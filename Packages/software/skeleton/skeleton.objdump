
skeleton.elf:     file format elf32-littlenios2
skeleton.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0001014c memsz 0x0001014c flags r-x
    LOAD off    0x0001116c vaddr 0x0005016c paddr 0x00051d50 align 2**12
         filesz 0x00001be4 memsz 0x00001be4 flags rw-
    LOAD off    0x00013934 vaddr 0x00053934 paddr 0x00053934 align 2**12
         filesz 0x00000000 memsz 0x00001d8c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fc30  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000388  0004fde4  0004fde4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be4  0005016c  00051d50  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001d8c  00053934  00053934  00013934  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  00012d50  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e78  00000000  00000000  00012da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c6b  00000000  00000000  00013c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000272d4  00000000  00000000  00015883  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008e11  00000000  00000000  0003cb57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016465  00000000  00000000  00045968  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000226c  00000000  00000000  0005bdd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000228a  00000000  00000000  0005e03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d172  00000000  00000000  000602c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006d438  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a38  00000000  00000000  0006d468  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00071eb0  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00071eb3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071ebd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071ebe  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00071ebf  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00071ec3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00071ec7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00071ecb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00071ed4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00071edd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00071ee6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000022  00000000  00000000  00071eee  2**0
                  CONTENTS, READONLY
 29 .jdi          00004b68  00000000  00000000  00071f10  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0011026c  00000000  00000000  00076a78  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
0004fde4 l    d  .rodata	00000000 .rodata
0005016c l    d  .rwdata	00000000 .rwdata
00053934 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 aic23.c
00050198 l     O .rwdata	0000002c aic23_default_config
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 i2s_control.c
00000000 l    df *ABS*	00000000 main.c
00041aa0 l     F .text	000000c8 handle_switch0_interrupt
00041b68 l     F .text	0000004c handle_switch1_interrupt
00041bb4 l     F .text	000001a4 handle_key0_interrupt
00041d58 l     F .text	0000005c handle_key1_interrupt
00041db4 l     F .text	0000004c handle_key2_interrupt
00041e00 l     F .text	0000005c handle_key3_interrupt
00041ecc l     F .text	00000170 handle_leftready_interrupt_test
0004203c l     F .text	000000dc handle_rightready_interrupt_test
00000000 l    df *ABS*	00000000 spi_control.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 fp-bit.c
000428c0 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00042e78 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00043830 l     F .text	00000058 __sprint_r
0004fe96 l     O .rodata	00000010 blanks.3452
0004fe86 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00045894 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00047290 l     F .text	00000058 std
0004739c l     F .text	00000008 __fp_lock
000473a4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00050200 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00051d1c l     O .rwdata	00000004 charset
0004fecc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00050014 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0004b530 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004c9d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004ca38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004cb38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004ce18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004cef8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004d054 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004d160 l     F .text	000000dc alt_file_locked
0004d3c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0004d544 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00051d44 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004d7e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00050bbc l     O .rwdata	00001060 jtag_uart
00051c1c l     O .rwdata	000000c4 uart
0004d8d8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004db18 l     F .text	00000228 altera_avalon_jtag_uart_irq
0004dd40 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0004e57c l     F .text	0000009c altera_avalon_uart_irq
0004e618 l     F .text	000000e0 altera_avalon_uart_rxirq
0004e6f8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0004eae4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0004ed0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004efb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004f648 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004fbcc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0004fd80 l     F .text	00000040 alt_sim_halt
0004904c g     F .text	00000094 _mprec_log10
00049138 g     F .text	00000088 __any_on
0004a844 g     F .text	00000070 _isatty_r
0004ffec g     O .rodata	00000028 __mprec_tinytens
0004d0b4 g     F .text	0000006c alt_main
00040f1c g     F .text	00000064 AIC23_format
00040c20 g     F .text	00000068 AIC23_deemp
00043598 g     F .text	000000a0 _puts_r
00055430 g     O .bss	00000100 alt_irq
0004a8b4 g     F .text	00000078 _lseek_r
00040a14 g     F .text	00000068 AIC23_bypass
00051d50 g       *ABS*	00000000 __flash_rwdata_start
0004c050 g     F .text	00000088 __eqdf2
000501d8 g     O .rwdata	00000028 aic23_demo
000556c0 g       *ABS*	00000000 __alt_heap_start
00051cf0 g     O .rwdata	00000004 key1_id
00051ce8 g     O .rwdata	00000004 switch1_id
0004a310 g     F .text	00000068 __sseek
000472f8 g     F .text	000000a4 __sinit
00047fd0 g     F .text	00000084 _setlocale_r
000473f8 g     F .text	00000068 __sfmoreglue
0004d140 g     F .text	00000020 __malloc_unlock
000423e4 g     F .text	00000174 spi_send
000539ec g     O .bss	00000200 datatest
000405d4 g     F .text	00000064 AIC23_line_rim
00053bec g     O .bss	00000036 leftChannelData
00053984 g     O .bss	00000004 setFreqFlag
00048ac8 g     F .text	000000e0 memmove
00041e5c g     F .text	0000002c unsigned2signed
000473e8 g     F .text	00000010 _cleanup
0004364c g     F .text	000000bc snprintf
000403d0 g     F .text	0000003c AIC_setFreq
000491c0 g     F .text	000000bc _Balloc
00042d58 g     F .text	00000094 __fixsfsi
00040200 g     F .text	000000ac AIC23_init
0004c160 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040944 g     F .text	00000068 AIC23_sidetone_add
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004a7d0 g     F .text	00000074 _fstat_r
000539a8 g     O .bss	00000004 errno
00042e40 g     F .text	00000038 __make_dp
000425a8 g     F .text	00000070 uart_sendInt16
000539b4 g     O .bss	00000004 alt_argv
00059ce0 g       *ABS*	00000000 _gp
00040f80 g     F .text	00000068 AIC23_clkin
00042aa4 g     F .text	00000070 __subsf3
000402ac g     F .text	00000030 AIC23_reset
00053934 g     O .bss	00000002 loop
00050a3c g     O .rwdata	00000180 alt_fd_list
00040448 g     F .text	00000064 AIC23_line_lrs
00041124 g     F .text	00000064 AIC23_clk_mode
0004f0e0 g     F .text	00000094 alt_find_dev
00048a28 g     F .text	000000a0 memcpy
00040760 g     F .text	00000060 AIC23_head_lhv
000473dc g     F .text	0000000c _cleanup_r
0004c2f8 g     F .text	000000f8 __floatsidf
0004f70c g     F .text	00000078 alt_io_redirect
0004c270 g     F .text	00000088 __ltdf2
0004fde4 g       *ABS*	00000000 __DTOR_END__
00043638 g     F .text	00000014 puts
00048f9c g     F .text	000000b0 __ratio
000404ac g     F .text	00000064 AIC23_line_lim
0004df58 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00042fb4 g     F .text	00000008 __udivsi3
0004cd58 g     F .text	000000c0 isatty
000407c0 g     F .text	00000064 AIC23_head_rls
0004fefc g     O .rodata	000000c8 __mprec_tens
00047fac g     F .text	00000008 __locale_charset
0004f948 g     F .text	00000090 alt_icache_flush
0005399c g     O .bss	00000004 __malloc_top_pad
00051d18 g     O .rwdata	00000004 __mb_cur_max
00047fb4 g     F .text	0000000c _localeconv_r
000498b8 g     F .text	0000003c __i2b
00047990 g     F .text	0000049c __sfvwrite_r
0004a298 g     F .text	00000070 _sbrk_r
00041050 g     F .text	0000006c AIC23_setFreq
0004a92c g     F .text	00000078 _read_r
00050600 g     O .rwdata	0000000c __lc_ctype
00051cf4 g     O .rwdata	00000004 key2_id
00051d38 g     O .rwdata	00000004 alt_max_fd
0004c6dc g     F .text	00000138 __unpack_d
0004a6ac g     F .text	00000110 _fclose_r
0004725c g     F .text	00000034 fflush
000539a0 g     O .bss	00000004 __malloc_max_sbrked_mem
0004cb98 g     F .text	000001c0 alt_irq_register
00051d00 g     O .rwdata	00000004 rightready_id
00042dec g     F .text	00000054 __extendsfdf2
00041e88 g     F .text	00000044 signed2unsigned
00040510 g     F .text	00000060 AIC23_line_liv
0004b9c0 g     F .text	00000074 __adddf3
00051d08 g     O .rwdata	00000004 sampleFrequency
00048e7c g     F .text	00000120 __b2d
00053960 g     O .bss	00000004 convIndex
000553fa g     O .bss	00000036 DataBufferCopy
0004af80 g     F .text	000005b0 __umoddi3
0004cf64 g     F .text	000000f0 lseek
00051d14 g     O .rwdata	00000004 _global_impure_ptr
00049c34 g     F .text	000005f4 _realloc_r
000556c0 g       *ABS*	00000000 __bss_end
0004f550 g     F .text	000000f8 alt_iic_isr_register
0004f81c g     F .text	0000010c alt_tick
00041410 g     F .text	000000d4 I2S_send_left
0004a9a4 g     F .text	000005dc __udivdi3
0004ffc4 g     O .rodata	00000028 __mprec_bigtens
00049b14 g     F .text	00000120 __s2b
0004c4c8 g     F .text	00000194 __floatunsidf
00048d9c g     F .text	00000060 __mcmp
0004e4b4 g     F .text	000000c8 altera_avalon_uart_init
00041188 g     F .text	00000030 AIC23_on
000473c4 g     F .text	00000018 __fp_lock_all
0004f508 g     F .text	00000048 alt_ic_irq_enabled
00040ae8 g     F .text	0000006c AIC23_mic_mute
0004f784 g     F .text	00000098 alt_alarm_stop
000539ac g     O .bss	00000004 alt_irq_active
00041328 g     F .text	000000e8 I2S_collect_right
000400ec g     F .exceptions	000000c8 alt_irq_handler
00050a14 g     O .rwdata	00000028 alt_dev_null
000431bc g     F .text	000000c8 __unpack_f
0004eec0 g     F .text	00000044 alt_dcache_flush_all
00048c68 g     F .text	00000070 __hi0bits
0004c3f0 g     F .text	000000d8 __fixdfsi
00051d50 g       *ABS*	00000000 __ram_rwdata_end
00051d30 g     O .rwdata	00000008 alt_dev_list
0004d6c0 g     F .text	00000120 write
00053c22 g     O .bss	00000400 rx_buffer
00040638 g     F .text	00000060 AIC23_line_riv
000410bc g     F .text	00000068 AIC23_bosr
0005016c g       *ABS*	00000000 __ram_rodata_end
0004ca64 g     F .text	000000d4 fstat
0004123c g     F .text	000000ec I2S_collect_left
000499f4 g     F .text	00000120 __pow5mult
00053990 g     O .bss	00000004 __nlocale_changed
00042fbc g     F .text	00000008 __umodsi3
00040c88 g     F .text	00000064 AIC23_adc_highpass
000556c0 g       *ABS*	00000000 end
0004305c g     F .text	00000160 __pack_f
000414e4 g     F .text	000000d8 I2S_send_right
00053974 g     O .bss	00000004 leftBufferFull
0004eb44 g     F .text	000001c8 altera_avalon_uart_write
00053940 g     O .bss	00000004 key0
00053944 g     O .bss	00000004 key1
0004da58 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004275c g     F .text	000000cc uart_SendTestBuff
0004fde0 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
0004e414 g     F .text	00000058 altera_avalon_uart_write_fd
0004c65c g     F .text	00000080 __clzsi2
00043708 g     F .text	000000b4 _snprintf_r
0004e46c g     F .text	00000048 altera_avalon_uart_close_fd
0004e17c g     F .text	00000240 altera_avalon_jtag_uart_write
000472e8 g     F .text	00000004 __sfp_lock_acquire
00048944 g     F .text	000000e4 memchr
00043888 g     F .text	00001eac ___vfprintf_internal_r
0004767c g     F .text	00000314 _free_r
0004fbd0 g     F .text	000001b0 __call_exitprocs
00054024 g     O .bss	00000fa0 convResultBuffer
00040de0 g     F .text	00000068 AIC23_lr_swap
00040d78 g     F .text	00000068 AIC23_mode
00053994 g     O .bss	00000004 __mlocale_changed
0004032c g     F .text	000000a4 AIC23_demo
00051d24 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000004c _start
00053968 g     O .bss	00000004 leftCount
000539bc g     O .bss	00000004 _alt_tick_rate
00049584 g     F .text	0000014c __lshift
000539c0 g     O .bss	00000004 _alt_nticks
0004d424 g     F .text	00000120 read
0004d874 g     F .text	00000064 alt_sys_init
00040d30 g     F .text	00000048 AIC23_power_off
0004fa98 g     F .text	00000134 __register_exitproc
000496d0 g     F .text	000001e8 __multiply
0004ddf0 g     F .text	00000074 altera_avalon_jtag_uart_close
0005016c g       *ABS*	00000000 __ram_rwdata_start
0004fde4 g       *ABS*	00000000 __ram_rodata_start
000539c4 g     O .bss	00000028 __malloc_current_mallinfo
0005397c g     O .bss	00000004 uartStartRecvFlag
0004927c g     F .text	0000017c __d2b
0005396c g     O .bss	00000004 lefttestCount
00040fe8 g     F .text	00000068 AIC23_clkout
00040a7c g     F .text	0000006c AIC23_input
0004d910 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00042828 g     F .text	00000098 uart_SendConvBuff
0004f294 g     F .text	000000b8 alt_get_fd
00042118 g     F .text	00000210 system_initialization
00054fc4 g     O .bss	00000400 UARTData
0004c814 g     F .text	000000c8 __fpcmp_parts_d
0004a63c g     F .text	00000070 _close_r
000411b8 g     F .text	00000030 AIC23_off
00051cec g     O .rwdata	00000004 key0_id
0004fa24 g     F .text	00000074 memcmp
0004d9c0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000556c0 g       *ABS*	00000000 __alt_stack_base
0004da08 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00040b54 g     F .text	00000064 AIC23_mic_boost
00040e48 g     F .text	00000068 AIC23_lr_phase
00045758 g     F .text	0000013c __swsetup_r
00053950 g     O .bss	00000004 leftready
0004bdf8 g     F .text	00000258 __divdf3
00047460 g     F .text	000000f0 __sfp
00053978 g     O .bss	00000004 uartStartSendFlag
000490e0 g     F .text	00000058 __copybits
0005060c g     O .rwdata	00000408 __malloc_av_
000472f4 g     F .text	00000004 __sinit_lock_release
0004ba34 g     F .text	000003c4 __muldf3
0004a3f4 g     F .text	00000060 __sread
0005398c g     O .bss	00000004 counter
0004fe14 g     O .rodata	00000010 __thenan_sf
0004f174 g     F .text	00000120 alt_find_file
0004ef04 g     F .text	000000b4 alt_dev_llist_insert
0004d120 g     F .text	00000020 __malloc_lock
0004d604 g     F .text	000000bc sbrk
00040824 g     F .text	00000068 AIC23_head_rzc
00047060 g     F .text	000001fc _fflush_r
0004a588 g     F .text	000000b4 _calloc_r
00053934 g       *ABS*	00000000 __bss_start
00048ba8 g     F .text	00000098 memset
00051d04 g     O .rwdata	00000004 uart_id
00042328 g     F .text	000000bc main
00051ce4 g     O .rwdata	00000004 switch0_id
000539b8 g     O .bss	00000004 alt_envp
000539a4 g     O .bss	00000004 __malloc_max_total_mem
0004d968 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00040698 g     F .text	00000064 AIC23_head_lrs
0004a308 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
0004a7bc g     F .text	00000014 fclose
00055530 g     O .bss	00000190 _atexit0
00045aac g     F .text	000015b4 _dtoa_r
00048204 g     F .text	00000740 _malloc_r
00051d3c g     O .rwdata	00000004 alt_errno
00047ef4 g     F .text	000000b8 _fwalk
00042ef4 g     F .text	00000060 __divsi3
00050020 g     O .rodata	00000014 __thenan_df
00047550 g     F .text	0000012c _malloc_trim_r
0004fde4 g       *ABS*	00000000 __CTOR_END__
00042b78 g     F .text	000001e0 __mulsf3
00051ce0 g     O .rwdata	00000002 gain
00051cf8 g     O .rwdata	00000004 key3_id
0004a454 g     F .text	000000bc strcmp
0004fde4 g       *ABS*	00000000 __flash_rodata_start
0004fde4 g       *ABS*	00000000 __DTOR_LIST__
00042618 g     F .text	000000b8 uart_sendFloat
0005394c g     O .bss	00000004 key3
000411e8 g     F .text	00000054 delay
0004c0d8 g     F .text	00000088 __nedf2
0004d840 g     F .text	00000034 alt_irq_init
0004d5a4 g     F .text	00000060 alt_release_fd
0004088c g     F .text	00000060 AIC23_head_rhv
000408ec g     F .text	00000058 AIC23_sidetone_disable
00050034 g     O .rodata	00000100 __clz_tab
00053998 g     O .bss	00000004 _PathLocale
0005393c g     O .bss	00000004 switch1
0004f9d8 g     F .text	00000014 atexit
00040cec g     F .text	00000044 AIC23_power_on
0004a510 g     F .text	00000078 _write_r
00048054 g     F .text	0000001c setlocale
00051cfc g     O .rwdata	00000004 leftready_id
0005016c g     O .rwdata	0000002c aic23_config
00051d10 g     O .rwdata	00000004 _impure_ptr
000539b0 g     O .bss	00000004 alt_argc
00040bb8 g     F .text	00000068 AIC23_dac_mute
0004f07c g     F .text	00000064 _do_dtors
00053964 g     O .bss	00000002 RxHead
00040020 g       .exceptions	00000000 alt_irq_entry
00048dfc g     F .text	00000080 __ulp
0004a228 g     F .text	00000040 __isinfd
000473ac g     F .text	00000018 __fp_unlock_all
00040570 g     F .text	00000064 AIC23_line_rls
000415f8 g     F .text	000004a8 fft
00051d28 g     O .rwdata	00000008 alt_fs_list
00042558 g     F .text	00000050 uart_sendByte
00040eb0 g     F .text	0000006c AIC23_input_len
00040020 g       *ABS*	00000000 __ram_exceptions_start
00047fc0 g     F .text	00000010 localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000501c4 g     O .rwdata	00000014 sine_table
000426d0 g     F .text	0000008c uart_SendLeftBuff
000409ac g     F .text	00000068 AIC23_dac_select
000406fc g     F .text	00000064 AIC23_head_lzc
00051d0c g     O .rwdata	00000004 calBuffersize
0004f37c g     F .text	00000050 alt_ic_isr_register
00051d50 g       *ABS*	00000000 _edata
0004e3bc g     F .text	00000058 altera_avalon_uart_read_fd
000556c0 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
0004de64 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00053948 g     O .bss	00000004 key2
0005395c g     O .bss	00000004 rightChannel
00053954 g     O .bss	00000004 rightready
0004f468 g     F .text	000000a0 alt_ic_irq_disable
0004a378 g     F .text	0000007c __swrite
00051d20 g     O .rwdata	00000004 __malloc_trim_threshold
0004f928 g     F .text	00000020 altera_nios2_qsys_irq_init
0004f9ec g     F .text	00000038 exit
00047e2c g     F .text	000000c8 _fwalk_reent
000493f8 g     F .text	0000018c __mdiff
00042f54 g     F .text	00000060 __modsi3
000402dc g     F .text	00000050 AIC23_config
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00053988 g     O .bss	00000004 uart
000472ec g     F .text	00000004 __sfp_lock_release
00053958 g     O .bss	00000004 leftChannel
0004e854 g     F .text	00000060 altera_avalon_uart_close
0004fdc0 g     F .text	00000020 _exit
0004a268 g     F .text	00000030 __isnand
0004ed6c g     F .text	00000154 alt_alarm_start
00042fc4 g     F .text	00000098 __muldi3
000415bc g     F .text	0000003c I2S_send_lr
00048070 g     F .text	00000194 __smakebuf_r
000437bc g     F .text	00000074 strlen
0004d23c g     F .text	00000188 open
0004c1e8 g     F .text	00000088 __gedf2
0004f34c g     F .text	00000030 alt_icache_flush_all
00053980 g     O .bss	00000004 sr
0004040c g     F .text	0000003c AIC23_read
00051d40 g     O .rwdata	00000004 alt_priority_mask
0004f3cc g     F .text	0000009c alt_ic_irq_enable
00045734 g     F .text	00000024 __vfprintf_internal
0004e8b4 g     F .text	00000230 altera_avalon_uart_read
000553c4 g     O .bss	00000036 rightChannelData
0004b940 g     F .text	00000080 __subdf3
00048cd8 g     F .text	000000c4 __lo0bits
00053938 g     O .bss	00000004 switch0
00051d48 g     O .rwdata	00000008 alt_alarm_list
0004f018 g     F .text	00000064 _do_ctors
0004c8dc g     F .text	000000fc close
00042b14 g     F .text	00000064 __addsf3
0004ce78 g     F .text	00000080 alt_load
00043284 g     F .text	00000314 __pack_d
00053970 g     O .bss	00000004 rightCount
00000000  w      *UND*	00000000 free
000472f0 g     F .text	00000004 __sinit_lock_acquire
000498f4 g     F .text	00000100 __multadd
00048c40 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00174 	movhi	r3,5
   40134:	18d50c04 	addi	r3,r3,21552
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00174 	movhi	r3,5
   4014c:	18d50c04 	addi	r3,r3,21552
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401d0:	d6a73814 	ori	gp,gp,40160
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401d8:	108e4d14 	ori	r2,r2,14644

    movhi r3, %hi(__bss_end)
   401dc:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401e0:	18d5b014 	ori	r3,r3,22208

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	004ce780 	call	4ce78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	004d0b40 	call	4d0b4 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <AIC23_init>:
//AIC Master Mode                                                           0130     0A00    0C00    0E5E   (0001->48k,0019->32k, 0023->44.1k, 001D->96k)
extern unsigned int aic23_demo[10];    // = {0x0017, 0x0017, 0x01f9, 0x01f9, 0x0012, 0x0000, 0x0000, 0x0042, 0x0001, 0x0001};;


// Initializes AIC to default
void AIC23_init(){
   40200:	defffd04 	addi	sp,sp,-12
   40204:	dfc00215 	stw	ra,8(sp)
   40208:	df000115 	stw	fp,4(sp)
   4020c:	df000104 	addi	fp,sp,4
	int i = 0;
   40210:	e03fff15 	stw	zero,-4(fp)
	for(i = 0; i < 11; i++){
   40214:	e03fff15 	stw	zero,-4(fp)
   40218:	00001c06 	br	4028c <AIC23_init+0x8c>
		spi_send(i, aic23_default_config[i]);
   4021c:	e13fff17 	ldw	r4,-4(fp)
   40220:	e0bfff17 	ldw	r2,-4(fp)
   40224:	00c00174 	movhi	r3,5
   40228:	18c06604 	addi	r3,r3,408
   4022c:	1085883a 	add	r2,r2,r2
   40230:	1085883a 	add	r2,r2,r2
   40234:	10c5883a 	add	r2,r2,r3
   40238:	10800017 	ldw	r2,0(r2)
   4023c:	100b883a 	mov	r5,r2
   40240:	00423e40 	call	423e4 <spi_send>
		aic23_config[i] = aic23_default_config[i];
   40244:	e17fff17 	ldw	r5,-4(fp)
   40248:	e0bfff17 	ldw	r2,-4(fp)
   4024c:	00c00174 	movhi	r3,5
   40250:	18c06604 	addi	r3,r3,408
   40254:	1085883a 	add	r2,r2,r2
   40258:	1085883a 	add	r2,r2,r2
   4025c:	10c5883a 	add	r2,r2,r3
   40260:	10800017 	ldw	r2,0(r2)
   40264:	1009883a 	mov	r4,r2
   40268:	00c00174 	movhi	r3,5
   4026c:	18c05b04 	addi	r3,r3,364
   40270:	2945883a 	add	r2,r5,r5
   40274:	1085883a 	add	r2,r2,r2
   40278:	10c5883a 	add	r2,r2,r3
   4027c:	11000015 	stw	r4,0(r2)


// Initializes AIC to default
void AIC23_init(){
	int i = 0;
	for(i = 0; i < 11; i++){
   40280:	e0bfff17 	ldw	r2,-4(fp)
   40284:	10800044 	addi	r2,r2,1
   40288:	e0bfff15 	stw	r2,-4(fp)
   4028c:	e0bfff17 	ldw	r2,-4(fp)
   40290:	108002d0 	cmplti	r2,r2,11
   40294:	103fe11e 	bne	r2,zero,4021c <AIC23_init+0x1c>
		spi_send(i, aic23_default_config[i]);
		aic23_config[i] = aic23_default_config[i];
	}
}
   40298:	e037883a 	mov	sp,fp
   4029c:	dfc00117 	ldw	ra,4(sp)
   402a0:	df000017 	ldw	fp,0(sp)
   402a4:	dec00204 	addi	sp,sp,8
   402a8:	f800283a 	ret

000402ac <AIC23_reset>:

void AIC23_reset(){
   402ac:	defffe04 	addi	sp,sp,-8
   402b0:	dfc00115 	stw	ra,4(sp)
   402b4:	df000015 	stw	fp,0(sp)
   402b8:	d839883a 	mov	fp,sp
	spi_send(0x0F, 0x00);
   402bc:	010003c4 	movi	r4,15
   402c0:	000b883a 	mov	r5,zero
   402c4:	00423e40 	call	423e4 <spi_send>
}
   402c8:	e037883a 	mov	sp,fp
   402cc:	dfc00117 	ldw	ra,4(sp)
   402d0:	df000017 	ldw	fp,0(sp)
   402d4:	dec00204 	addi	sp,sp,8
   402d8:	f800283a 	ret

000402dc <AIC23_config>:

void AIC23_config(int address, int setting){
   402dc:	defffc04 	addi	sp,sp,-16
   402e0:	dfc00315 	stw	ra,12(sp)
   402e4:	df000215 	stw	fp,8(sp)
   402e8:	df000204 	addi	fp,sp,8
   402ec:	e13ffe15 	stw	r4,-8(fp)
   402f0:	e17fff15 	stw	r5,-4(fp)
	aic23_demo[address] = setting;
   402f4:	e0bffe17 	ldw	r2,-8(fp)
   402f8:	e13fff17 	ldw	r4,-4(fp)
   402fc:	00c00174 	movhi	r3,5
   40300:	18c07604 	addi	r3,r3,472
   40304:	1085883a 	add	r2,r2,r2
   40308:	1085883a 	add	r2,r2,r2
   4030c:	10c5883a 	add	r2,r2,r3
   40310:	11000015 	stw	r4,0(r2)
	AIC23_demo();
   40314:	004032c0 	call	4032c <AIC23_demo>
}
   40318:	e037883a 	mov	sp,fp
   4031c:	dfc00117 	ldw	ra,4(sp)
   40320:	df000017 	ldw	fp,0(sp)
   40324:	dec00204 	addi	sp,sp,8
   40328:	f800283a 	ret

0004032c <AIC23_demo>:

/*AIC configuration function: Update all control registers*/
void AIC23_demo(){
   4032c:	defffd04 	addi	sp,sp,-12
   40330:	dfc00215 	stw	ra,8(sp)
   40334:	df000115 	stw	fp,4(sp)
   40338:	df000104 	addi	fp,sp,4
	int i = 0;
   4033c:	e03fff15 	stw	zero,-4(fp)
	for(i = 0; i < 10; i++){
   40340:	e03fff15 	stw	zero,-4(fp)
   40344:	00001a06 	br	403b0 <AIC23_demo+0x84>
		spi_send(i, aic23_demo[i]);
   40348:	e13fff17 	ldw	r4,-4(fp)
   4034c:	e0bfff17 	ldw	r2,-4(fp)
   40350:	00c00174 	movhi	r3,5
   40354:	18c07604 	addi	r3,r3,472
   40358:	1085883a 	add	r2,r2,r2
   4035c:	1085883a 	add	r2,r2,r2
   40360:	10c5883a 	add	r2,r2,r3
   40364:	11400017 	ldw	r5,0(r2)
   40368:	00423e40 	call	423e4 <spi_send>
		aic23_config[i] = aic23_demo[i];
   4036c:	e17fff17 	ldw	r5,-4(fp)
   40370:	e0bfff17 	ldw	r2,-4(fp)
   40374:	00c00174 	movhi	r3,5
   40378:	18c07604 	addi	r3,r3,472
   4037c:	1085883a 	add	r2,r2,r2
   40380:	1085883a 	add	r2,r2,r2
   40384:	10c5883a 	add	r2,r2,r3
   40388:	11000017 	ldw	r4,0(r2)
   4038c:	00c00174 	movhi	r3,5
   40390:	18c05b04 	addi	r3,r3,364
   40394:	2945883a 	add	r2,r5,r5
   40398:	1085883a 	add	r2,r2,r2
   4039c:	10c5883a 	add	r2,r2,r3
   403a0:	11000015 	stw	r4,0(r2)
}

/*AIC configuration function: Update all control registers*/
void AIC23_demo(){
	int i = 0;
	for(i = 0; i < 10; i++){
   403a4:	e0bfff17 	ldw	r2,-4(fp)
   403a8:	10800044 	addi	r2,r2,1
   403ac:	e0bfff15 	stw	r2,-4(fp)
   403b0:	e0bfff17 	ldw	r2,-4(fp)
   403b4:	10800290 	cmplti	r2,r2,10
   403b8:	103fe31e 	bne	r2,zero,40348 <AIC23_demo+0x1c>
		spi_send(i, aic23_demo[i]);
		aic23_config[i] = aic23_demo[i];
	}
}
   403bc:	e037883a 	mov	sp,fp
   403c0:	dfc00117 	ldw	ra,4(sp)
   403c4:	df000017 	ldw	fp,0(sp)
   403c8:	dec00204 	addi	sp,sp,8
   403cc:	f800283a 	ret

000403d0 <AIC_setFreq>:



void AIC_setFreq(int sampleRate){
   403d0:	defffd04 	addi	sp,sp,-12
   403d4:	dfc00215 	stw	ra,8(sp)
   403d8:	df000115 	stw	fp,4(sp)
   403dc:	df000104 	addi	fp,sp,4
   403e0:	e13fff15 	stw	r4,-4(fp)
	aic23_demo[8] = sampleRate;
   403e4:	e0ffff17 	ldw	r3,-4(fp)
   403e8:	00800174 	movhi	r2,5
   403ec:	10807604 	addi	r2,r2,472
   403f0:	10c00815 	stw	r3,32(r2)
	AIC23_demo();
   403f4:	004032c0 	call	4032c <AIC23_demo>
}
   403f8:	e037883a 	mov	sp,fp
   403fc:	dfc00117 	ldw	ra,4(sp)
   40400:	df000017 	ldw	fp,0(sp)
   40404:	dec00204 	addi	sp,sp,8
   40408:	f800283a 	ret

0004040c <AIC23_read>:
	POWER_DOWN
	DIGITAL_AUDIO_INTERFACE
	SAMPLE_RATE
	DIGITAL_INTERFACE_ACTIVATION
 */
unsigned int AIC23_read(unsigned char address){
   4040c:	defffe04 	addi	sp,sp,-8
   40410:	df000115 	stw	fp,4(sp)
   40414:	df000104 	addi	fp,sp,4
   40418:	e13fff05 	stb	r4,-4(fp)
	return aic23_config[address];
   4041c:	e0bfff03 	ldbu	r2,-4(fp)
   40420:	00c00174 	movhi	r3,5
   40424:	18c05b04 	addi	r3,r3,364
   40428:	1085883a 	add	r2,r2,r2
   4042c:	1085883a 	add	r2,r2,r2
   40430:	10c5883a 	add	r2,r2,r3
   40434:	10800017 	ldw	r2,0(r2)
}
   40438:	e037883a 	mov	sp,fp
   4043c:	df000017 	ldw	fp,0(sp)
   40440:	dec00104 	addi	sp,sp,4
   40444:	f800283a 	ret

00040448 <AIC23_line_lrs>:
/* Left/right line simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_line_lrs(unsigned int simultaneous_update){
   40448:	defffd04 	addi	sp,sp,-12
   4044c:	dfc00215 	stw	ra,8(sp)
   40450:	df000115 	stw	fp,4(sp)
   40454:	df000104 	addi	fp,sp,4
   40458:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x00FF) | (simultaneous_update << 8);
   4045c:	00800174 	movhi	r2,5
   40460:	10805b04 	addi	r2,r2,364
   40464:	10800017 	ldw	r2,0(r2)
   40468:	10c03fcc 	andi	r3,r2,255
   4046c:	e0bfff17 	ldw	r2,-4(fp)
   40470:	1004923a 	slli	r2,r2,8
   40474:	1886b03a 	or	r3,r3,r2
   40478:	00800174 	movhi	r2,5
   4047c:	10805b04 	addi	r2,r2,364
   40480:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40484:	00800174 	movhi	r2,5
   40488:	10805b04 	addi	r2,r2,364
   4048c:	11400017 	ldw	r5,0(r2)
   40490:	0009883a 	mov	r4,zero
   40494:	00423e40 	call	423e4 <spi_send>
}
   40498:	e037883a 	mov	sp,fp
   4049c:	dfc00117 	ldw	ra,4(sp)
   404a0:	df000017 	ldw	fp,0(sp)
   404a4:	dec00204 	addi	sp,sp,8
   404a8:	f800283a 	ret

000404ac <AIC23_line_lim>:
/* Left line input mute
   Valid inputs:
		NORMAL
		MUTED
*/
void AIC23_line_lim(unsigned int mute){
   404ac:	defffd04 	addi	sp,sp,-12
   404b0:	dfc00215 	stw	ra,8(sp)
   404b4:	df000115 	stw	fp,4(sp)
   404b8:	df000104 	addi	fp,sp,4
   404bc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x017F) | (mute << 7);
   404c0:	00800174 	movhi	r2,5
   404c4:	10805b04 	addi	r2,r2,364
   404c8:	10800017 	ldw	r2,0(r2)
   404cc:	10c05fcc 	andi	r3,r2,383
   404d0:	e0bfff17 	ldw	r2,-4(fp)
   404d4:	100491fa 	slli	r2,r2,7
   404d8:	1886b03a 	or	r3,r3,r2
   404dc:	00800174 	movhi	r2,5
   404e0:	10805b04 	addi	r2,r2,364
   404e4:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   404e8:	00800174 	movhi	r2,5
   404ec:	10805b04 	addi	r2,r2,364
   404f0:	11400017 	ldw	r5,0(r2)
   404f4:	0009883a 	mov	r4,zero
   404f8:	00423e40 	call	423e4 <spi_send>
}
   404fc:	e037883a 	mov	sp,fp
   40500:	dfc00117 	ldw	ra,4(sp)
   40504:	df000017 	ldw	fp,0(sp)
   40508:	dec00204 	addi	sp,sp,8
   4050c:	f800283a 	ret

00040510 <AIC23_line_liv>:
/* Left line input volume control
   Valid inputs:
		0b10111 = 0dB default
		0b11111 = +12 dB down to 0b00000 = -34.5dB in 1.5dB steps
*/
void AIC23_line_liv(unsigned int volume){
   40510:	defffd04 	addi	sp,sp,-12
   40514:	dfc00215 	stw	ra,8(sp)
   40518:	df000115 	stw	fp,4(sp)
   4051c:	df000104 	addi	fp,sp,4
   40520:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x01E0) | (volume);
   40524:	00800174 	movhi	r2,5
   40528:	10805b04 	addi	r2,r2,364
   4052c:	10800017 	ldw	r2,0(r2)
   40530:	10c0780c 	andi	r3,r2,480
   40534:	e0bfff17 	ldw	r2,-4(fp)
   40538:	1886b03a 	or	r3,r3,r2
   4053c:	00800174 	movhi	r2,5
   40540:	10805b04 	addi	r2,r2,364
   40544:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40548:	00800174 	movhi	r2,5
   4054c:	10805b04 	addi	r2,r2,364
   40550:	11400017 	ldw	r5,0(r2)
   40554:	0009883a 	mov	r4,zero
   40558:	00423e40 	call	423e4 <spi_send>
}
   4055c:	e037883a 	mov	sp,fp
   40560:	dfc00117 	ldw	ra,4(sp)
   40564:	df000017 	ldw	fp,0(sp)
   40568:	dec00204 	addi	sp,sp,8
   4056c:	f800283a 	ret

00040570 <AIC23_line_rls>:
/* Right/left line simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_line_rls(unsigned int simultaneous_update){
   40570:	defffd04 	addi	sp,sp,-12
   40574:	dfc00215 	stw	ra,8(sp)
   40578:	df000115 	stw	fp,4(sp)
   4057c:	df000104 	addi	fp,sp,4
   40580:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x00FF) | (simultaneous_update << 8);
   40584:	00800174 	movhi	r2,5
   40588:	10805b04 	addi	r2,r2,364
   4058c:	10800117 	ldw	r2,4(r2)
   40590:	10c03fcc 	andi	r3,r2,255
   40594:	e0bfff17 	ldw	r2,-4(fp)
   40598:	1004923a 	slli	r2,r2,8
   4059c:	1886b03a 	or	r3,r3,r2
   405a0:	00800174 	movhi	r2,5
   405a4:	10805b04 	addi	r2,r2,364
   405a8:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   405ac:	00800174 	movhi	r2,5
   405b0:	10805b04 	addi	r2,r2,364
   405b4:	11400117 	ldw	r5,4(r2)
   405b8:	01000044 	movi	r4,1
   405bc:	00423e40 	call	423e4 <spi_send>
}
   405c0:	e037883a 	mov	sp,fp
   405c4:	dfc00117 	ldw	ra,4(sp)
   405c8:	df000017 	ldw	fp,0(sp)
   405cc:	dec00204 	addi	sp,sp,8
   405d0:	f800283a 	ret

000405d4 <AIC23_line_rim>:
/* Right line input mute
   Valid inputs:
		NORMAL
		MUTED
*/
void AIC23_line_rim(unsigned int mute){
   405d4:	defffd04 	addi	sp,sp,-12
   405d8:	dfc00215 	stw	ra,8(sp)
   405dc:	df000115 	stw	fp,4(sp)
   405e0:	df000104 	addi	fp,sp,4
   405e4:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x017F) | (mute << 7);
   405e8:	00800174 	movhi	r2,5
   405ec:	10805b04 	addi	r2,r2,364
   405f0:	10800117 	ldw	r2,4(r2)
   405f4:	10c05fcc 	andi	r3,r2,383
   405f8:	e0bfff17 	ldw	r2,-4(fp)
   405fc:	100491fa 	slli	r2,r2,7
   40600:	1886b03a 	or	r3,r3,r2
   40604:	00800174 	movhi	r2,5
   40608:	10805b04 	addi	r2,r2,364
   4060c:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   40610:	00800174 	movhi	r2,5
   40614:	10805b04 	addi	r2,r2,364
   40618:	11400117 	ldw	r5,4(r2)
   4061c:	01000044 	movi	r4,1
   40620:	00423e40 	call	423e4 <spi_send>
}
   40624:	e037883a 	mov	sp,fp
   40628:	dfc00117 	ldw	ra,4(sp)
   4062c:	df000017 	ldw	fp,0(sp)
   40630:	dec00204 	addi	sp,sp,8
   40634:	f800283a 	ret

00040638 <AIC23_line_riv>:
/* Right line input volume control
   Valid inputs:
		0b10111 = 0dB default
		0b11111 = +12 dB down to 0b00000 = -34.5dB in 1.5dB steps
*/
void AIC23_line_riv(unsigned int volume){
   40638:	defffd04 	addi	sp,sp,-12
   4063c:	dfc00215 	stw	ra,8(sp)
   40640:	df000115 	stw	fp,4(sp)
   40644:	df000104 	addi	fp,sp,4
   40648:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x01E0) | (volume);
   4064c:	00800174 	movhi	r2,5
   40650:	10805b04 	addi	r2,r2,364
   40654:	10800117 	ldw	r2,4(r2)
   40658:	10c0780c 	andi	r3,r2,480
   4065c:	e0bfff17 	ldw	r2,-4(fp)
   40660:	1886b03a 	or	r3,r3,r2
   40664:	00800174 	movhi	r2,5
   40668:	10805b04 	addi	r2,r2,364
   4066c:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   40670:	00800174 	movhi	r2,5
   40674:	10805b04 	addi	r2,r2,364
   40678:	11400117 	ldw	r5,4(r2)
   4067c:	01000044 	movi	r4,1
   40680:	00423e40 	call	423e4 <spi_send>
}
   40684:	e037883a 	mov	sp,fp
   40688:	dfc00117 	ldw	ra,4(sp)
   4068c:	df000017 	ldw	fp,0(sp)
   40690:	dec00204 	addi	sp,sp,8
   40694:	f800283a 	ret

00040698 <AIC23_head_lrs>:
/* Left/right headphone simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_head_lrs(unsigned int simultaneous_update){
   40698:	defffd04 	addi	sp,sp,-12
   4069c:	dfc00215 	stw	ra,8(sp)
   406a0:	df000115 	stw	fp,4(sp)
   406a4:	df000104 	addi	fp,sp,4
   406a8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x00FF) | (simultaneous_update << 8);
   406ac:	00800174 	movhi	r2,5
   406b0:	10805b04 	addi	r2,r2,364
   406b4:	10800217 	ldw	r2,8(r2)
   406b8:	10c03fcc 	andi	r3,r2,255
   406bc:	e0bfff17 	ldw	r2,-4(fp)
   406c0:	1004923a 	slli	r2,r2,8
   406c4:	1886b03a 	or	r3,r3,r2
   406c8:	00800174 	movhi	r2,5
   406cc:	10805b04 	addi	r2,r2,364
   406d0:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   406d4:	00800174 	movhi	r2,5
   406d8:	10805b04 	addi	r2,r2,364
   406dc:	11400217 	ldw	r5,8(r2)
   406e0:	01000084 	movi	r4,2
   406e4:	00423e40 	call	423e4 <spi_send>
}
   406e8:	e037883a 	mov	sp,fp
   406ec:	dfc00117 	ldw	ra,4(sp)
   406f0:	df000017 	ldw	fp,0(sp)
   406f4:	dec00204 	addi	sp,sp,8
   406f8:	f800283a 	ret

000406fc <AIC23_head_lzc>:
/* Left Channel Zero-Cross Detect
   Valid inputs:
		ON
		OFF
*/
void AIC23_head_lzc(unsigned int zero){
   406fc:	defffd04 	addi	sp,sp,-12
   40700:	dfc00215 	stw	ra,8(sp)
   40704:	df000115 	stw	fp,4(sp)
   40708:	df000104 	addi	fp,sp,4
   4070c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x017F) | (zero << 7);
   40710:	00800174 	movhi	r2,5
   40714:	10805b04 	addi	r2,r2,364
   40718:	10800217 	ldw	r2,8(r2)
   4071c:	10c05fcc 	andi	r3,r2,383
   40720:	e0bfff17 	ldw	r2,-4(fp)
   40724:	100491fa 	slli	r2,r2,7
   40728:	1886b03a 	or	r3,r3,r2
   4072c:	00800174 	movhi	r2,5
   40730:	10805b04 	addi	r2,r2,364
   40734:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   40738:	00800174 	movhi	r2,5
   4073c:	10805b04 	addi	r2,r2,364
   40740:	11400217 	ldw	r5,8(r2)
   40744:	01000084 	movi	r4,2
   40748:	00423e40 	call	423e4 <spi_send>
}
   4074c:	e037883a 	mov	sp,fp
   40750:	dfc00117 	ldw	ra,4(sp)
   40754:	df000017 	ldw	fp,0(sp)
   40758:	dec00204 	addi	sp,sp,8
   4075c:	f800283a 	ret

00040760 <AIC23_head_lhv>:
   Valid Inputs:
   	   0b1111001 = 0dB default
   	   0b1111111 = +6dB down to 0b0110000 = -73dB mute in 1dB increments
   	   Anything lower than -73dB is still mute. 79 steps in between max/min.
 */
void AIC23_head_lhv(unsigned int volume){
   40760:	defffd04 	addi	sp,sp,-12
   40764:	dfc00215 	stw	ra,8(sp)
   40768:	df000115 	stw	fp,4(sp)
   4076c:	df000104 	addi	fp,sp,4
   40770:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x0180) | volume;
   40774:	00800174 	movhi	r2,5
   40778:	10805b04 	addi	r2,r2,364
   4077c:	10800217 	ldw	r2,8(r2)
   40780:	10c0600c 	andi	r3,r2,384
   40784:	e0bfff17 	ldw	r2,-4(fp)
   40788:	1886b03a 	or	r3,r3,r2
   4078c:	00800174 	movhi	r2,5
   40790:	10805b04 	addi	r2,r2,364
   40794:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   40798:	00800174 	movhi	r2,5
   4079c:	10805b04 	addi	r2,r2,364
   407a0:	11400217 	ldw	r5,8(r2)
   407a4:	01000084 	movi	r4,2
   407a8:	00423e40 	call	423e4 <spi_send>
}
   407ac:	e037883a 	mov	sp,fp
   407b0:	dfc00117 	ldw	ra,4(sp)
   407b4:	df000017 	ldw	fp,0(sp)
   407b8:	dec00204 	addi	sp,sp,8
   407bc:	f800283a 	ret

000407c0 <AIC23_head_rls>:
/* Right/left headphone simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_head_rls(unsigned int simultaneous_update){
   407c0:	defffd04 	addi	sp,sp,-12
   407c4:	dfc00215 	stw	ra,8(sp)
   407c8:	df000115 	stw	fp,4(sp)
   407cc:	df000104 	addi	fp,sp,4
   407d0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x00FF) | (simultaneous_update << 8);
   407d4:	00800174 	movhi	r2,5
   407d8:	10805b04 	addi	r2,r2,364
   407dc:	10800317 	ldw	r2,12(r2)
   407e0:	10c03fcc 	andi	r3,r2,255
   407e4:	e0bfff17 	ldw	r2,-4(fp)
   407e8:	1004923a 	slli	r2,r2,8
   407ec:	1886b03a 	or	r3,r3,r2
   407f0:	00800174 	movhi	r2,5
   407f4:	10805b04 	addi	r2,r2,364
   407f8:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   407fc:	00800174 	movhi	r2,5
   40800:	10805b04 	addi	r2,r2,364
   40804:	11400317 	ldw	r5,12(r2)
   40808:	010000c4 	movi	r4,3
   4080c:	00423e40 	call	423e4 <spi_send>
}
   40810:	e037883a 	mov	sp,fp
   40814:	dfc00117 	ldw	ra,4(sp)
   40818:	df000017 	ldw	fp,0(sp)
   4081c:	dec00204 	addi	sp,sp,8
   40820:	f800283a 	ret

00040824 <AIC23_head_rzc>:
/* Right Channel Zero-Cross Detect
   Valid inputs:
		ON
		OFF
*/
void AIC23_head_rzc(unsigned int zero){
   40824:	defffd04 	addi	sp,sp,-12
   40828:	dfc00215 	stw	ra,8(sp)
   4082c:	df000115 	stw	fp,4(sp)
   40830:	df000104 	addi	fp,sp,4
   40834:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x017F) | ((zero & 0x01) << 7);
   40838:	00800174 	movhi	r2,5
   4083c:	10805b04 	addi	r2,r2,364
   40840:	10800317 	ldw	r2,12(r2)
   40844:	10c05fcc 	andi	r3,r2,383
   40848:	e0bfff17 	ldw	r2,-4(fp)
   4084c:	1080004c 	andi	r2,r2,1
   40850:	100491fa 	slli	r2,r2,7
   40854:	1886b03a 	or	r3,r3,r2
   40858:	00800174 	movhi	r2,5
   4085c:	10805b04 	addi	r2,r2,364
   40860:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   40864:	00800174 	movhi	r2,5
   40868:	10805b04 	addi	r2,r2,364
   4086c:	11400317 	ldw	r5,12(r2)
   40870:	010000c4 	movi	r4,3
   40874:	00423e40 	call	423e4 <spi_send>
}
   40878:	e037883a 	mov	sp,fp
   4087c:	dfc00117 	ldw	ra,4(sp)
   40880:	df000017 	ldw	fp,0(sp)
   40884:	dec00204 	addi	sp,sp,8
   40888:	f800283a 	ret

0004088c <AIC23_head_rhv>:
   Valid Inputs:
   	   0b1111001 = 0dB default
   	   0b1111111 = +6dB down to 0b0110000 = -73dB mute in 1dB increments
   	   Anything lower than -73dB is still mute. 79 steps in between max/min.
 */
void AIC23_head_rhv(unsigned int volume){
   4088c:	defffd04 	addi	sp,sp,-12
   40890:	dfc00215 	stw	ra,8(sp)
   40894:	df000115 	stw	fp,4(sp)
   40898:	df000104 	addi	fp,sp,4
   4089c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x0180) | volume;
   408a0:	00800174 	movhi	r2,5
   408a4:	10805b04 	addi	r2,r2,364
   408a8:	10800317 	ldw	r2,12(r2)
   408ac:	10c0600c 	andi	r3,r2,384
   408b0:	e0bfff17 	ldw	r2,-4(fp)
   408b4:	1886b03a 	or	r3,r3,r2
   408b8:	00800174 	movhi	r2,5
   408bc:	10805b04 	addi	r2,r2,364
   408c0:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   408c4:	00800174 	movhi	r2,5
   408c8:	10805b04 	addi	r2,r2,364
   408cc:	11400317 	ldw	r5,12(r2)
   408d0:	010000c4 	movi	r4,3
   408d4:	00423e40 	call	423e4 <spi_send>
}
   408d8:	e037883a 	mov	sp,fp
   408dc:	dfc00117 	ldw	ra,4(sp)
   408e0:	df000017 	ldw	fp,0(sp)
   408e4:	dec00204 	addi	sp,sp,8
   408e8:	f800283a 	ret

000408ec <AIC23_sidetone_disable>:
//
// 					Analog Audio Path Control
//
/////////////////////////////////////////////////////////////////

void AIC23_sidetone_disable(unsigned int sidetone){
   408ec:	defffd04 	addi	sp,sp,-12
   408f0:	dfc00215 	stw	ra,8(sp)
   408f4:	df000115 	stw	fp,4(sp)
   408f8:	df000104 	addi	fp,sp,4
   408fc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = aic23_config[4] & 0x01DF;
   40900:	00800174 	movhi	r2,5
   40904:	10805b04 	addi	r2,r2,364
   40908:	10800417 	ldw	r2,16(r2)
   4090c:	10c077cc 	andi	r3,r2,479
   40910:	00800174 	movhi	r2,5
   40914:	10805b04 	addi	r2,r2,364
   40918:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   4091c:	00800174 	movhi	r2,5
   40920:	10805b04 	addi	r2,r2,364
   40924:	11400417 	ldw	r5,16(r2)
   40928:	01000104 	movi	r4,4
   4092c:	00423e40 	call	423e4 <spi_send>
}
   40930:	e037883a 	mov	sp,fp
   40934:	dfc00117 	ldw	ra,4(sp)
   40938:	df000017 	ldw	fp,0(sp)
   4093c:	dec00204 	addi	sp,sp,8
   40940:	f800283a 	ret

00040944 <AIC23_sidetone_add>:

void AIC23_sidetone_add(unsigned int add){
   40944:	defffd04 	addi	sp,sp,-12
   40948:	dfc00215 	stw	ra,8(sp)
   4094c:	df000115 	stw	fp,4(sp)
   40950:	df000104 	addi	fp,sp,4
   40954:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1F) | ((add & 0x0F) << 5);
   40958:	00800174 	movhi	r2,5
   4095c:	10805b04 	addi	r2,r2,364
   40960:	10800417 	ldw	r2,16(r2)
   40964:	10c007cc 	andi	r3,r2,31
   40968:	e0bfff17 	ldw	r2,-4(fp)
   4096c:	108003cc 	andi	r2,r2,15
   40970:	1004917a 	slli	r2,r2,5
   40974:	1886b03a 	or	r3,r3,r2
   40978:	00800174 	movhi	r2,5
   4097c:	10805b04 	addi	r2,r2,364
   40980:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40984:	00800174 	movhi	r2,5
   40988:	10805b04 	addi	r2,r2,364
   4098c:	11400417 	ldw	r5,16(r2)
   40990:	01000104 	movi	r4,4
   40994:	00423e40 	call	423e4 <spi_send>
}
   40998:	e037883a 	mov	sp,fp
   4099c:	dfc00117 	ldw	ra,4(sp)
   409a0:	df000017 	ldw	fp,0(sp)
   409a4:	dec00204 	addi	sp,sp,8
   409a8:	f800283a 	ret

000409ac <AIC23_dac_select>:

void AIC23_dac_select(unsigned int dac){
   409ac:	defffd04 	addi	sp,sp,-12
   409b0:	dfc00215 	stw	ra,8(sp)
   409b4:	df000115 	stw	fp,4(sp)
   409b8:	df000104 	addi	fp,sp,4
   409bc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1EF) | ((dac & 0x01) << 4);
   409c0:	00800174 	movhi	r2,5
   409c4:	10805b04 	addi	r2,r2,364
   409c8:	10800417 	ldw	r2,16(r2)
   409cc:	10c07bcc 	andi	r3,r2,495
   409d0:	e0bfff17 	ldw	r2,-4(fp)
   409d4:	1080004c 	andi	r2,r2,1
   409d8:	1004913a 	slli	r2,r2,4
   409dc:	1886b03a 	or	r3,r3,r2
   409e0:	00800174 	movhi	r2,5
   409e4:	10805b04 	addi	r2,r2,364
   409e8:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   409ec:	00800174 	movhi	r2,5
   409f0:	10805b04 	addi	r2,r2,364
   409f4:	11400417 	ldw	r5,16(r2)
   409f8:	01000104 	movi	r4,4
   409fc:	00423e40 	call	423e4 <spi_send>
}
   40a00:	e037883a 	mov	sp,fp
   40a04:	dfc00117 	ldw	ra,4(sp)
   40a08:	df000017 	ldw	fp,0(sp)
   40a0c:	dec00204 	addi	sp,sp,8
   40a10:	f800283a 	ret

00040a14 <AIC23_bypass>:
/* Bypass
   Valid Inputs:
   	   ENABLED
   	   DISABLED
 */
void AIC23_bypass(unsigned int bypass){
   40a14:	defffd04 	addi	sp,sp,-12
   40a18:	dfc00215 	stw	ra,8(sp)
   40a1c:	df000115 	stw	fp,4(sp)
   40a20:	df000104 	addi	fp,sp,4
   40a24:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1F7) | ((bypass & 0x01) << 3);
   40a28:	00800174 	movhi	r2,5
   40a2c:	10805b04 	addi	r2,r2,364
   40a30:	10800417 	ldw	r2,16(r2)
   40a34:	10c07dcc 	andi	r3,r2,503
   40a38:	e0bfff17 	ldw	r2,-4(fp)
   40a3c:	1080004c 	andi	r2,r2,1
   40a40:	100490fa 	slli	r2,r2,3
   40a44:	1886b03a 	or	r3,r3,r2
   40a48:	00800174 	movhi	r2,5
   40a4c:	10805b04 	addi	r2,r2,364
   40a50:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40a54:	00800174 	movhi	r2,5
   40a58:	10805b04 	addi	r2,r2,364
   40a5c:	11400417 	ldw	r5,16(r2)
   40a60:	01000104 	movi	r4,4
   40a64:	00423e40 	call	423e4 <spi_send>
}
   40a68:	e037883a 	mov	sp,fp
   40a6c:	dfc00117 	ldw	ra,4(sp)
   40a70:	df000017 	ldw	fp,0(sp)
   40a74:	dec00204 	addi	sp,sp,8
   40a78:	f800283a 	ret

00040a7c <AIC23_input>:

void AIC23_input(unsigned int input){
   40a7c:	defffd04 	addi	sp,sp,-12
   40a80:	dfc00215 	stw	ra,8(sp)
   40a84:	df000115 	stw	fp,4(sp)
   40a88:	df000104 	addi	fp,sp,4
   40a8c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FB) | ((input & 0x01) << 2);
   40a90:	00800174 	movhi	r2,5
   40a94:	10805b04 	addi	r2,r2,364
   40a98:	10800417 	ldw	r2,16(r2)
   40a9c:	10c07ecc 	andi	r3,r2,507
   40aa0:	e0bfff17 	ldw	r2,-4(fp)
   40aa4:	1080004c 	andi	r2,r2,1
   40aa8:	1085883a 	add	r2,r2,r2
   40aac:	1085883a 	add	r2,r2,r2
   40ab0:	1886b03a 	or	r3,r3,r2
   40ab4:	00800174 	movhi	r2,5
   40ab8:	10805b04 	addi	r2,r2,364
   40abc:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40ac0:	00800174 	movhi	r2,5
   40ac4:	10805b04 	addi	r2,r2,364
   40ac8:	11400417 	ldw	r5,16(r2)
   40acc:	01000104 	movi	r4,4
   40ad0:	00423e40 	call	423e4 <spi_send>
}
   40ad4:	e037883a 	mov	sp,fp
   40ad8:	dfc00117 	ldw	ra,4(sp)
   40adc:	df000017 	ldw	fp,0(sp)
   40ae0:	dec00204 	addi	sp,sp,8
   40ae4:	f800283a 	ret

00040ae8 <AIC23_mic_mute>:

void AIC23_mic_mute(unsigned int mute){
   40ae8:	defffd04 	addi	sp,sp,-12
   40aec:	dfc00215 	stw	ra,8(sp)
   40af0:	df000115 	stw	fp,4(sp)
   40af4:	df000104 	addi	fp,sp,4
   40af8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FD) | ((mute & 0x01) << 2);
   40afc:	00800174 	movhi	r2,5
   40b00:	10805b04 	addi	r2,r2,364
   40b04:	10800417 	ldw	r2,16(r2)
   40b08:	10c07f4c 	andi	r3,r2,509
   40b0c:	e0bfff17 	ldw	r2,-4(fp)
   40b10:	1080004c 	andi	r2,r2,1
   40b14:	1085883a 	add	r2,r2,r2
   40b18:	1085883a 	add	r2,r2,r2
   40b1c:	1886b03a 	or	r3,r3,r2
   40b20:	00800174 	movhi	r2,5
   40b24:	10805b04 	addi	r2,r2,364
   40b28:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40b2c:	00800174 	movhi	r2,5
   40b30:	10805b04 	addi	r2,r2,364
   40b34:	11400417 	ldw	r5,16(r2)
   40b38:	01000104 	movi	r4,4
   40b3c:	00423e40 	call	423e4 <spi_send>
}
   40b40:	e037883a 	mov	sp,fp
   40b44:	dfc00117 	ldw	ra,4(sp)
   40b48:	df000017 	ldw	fp,0(sp)
   40b4c:	dec00204 	addi	sp,sp,8
   40b50:	f800283a 	ret

00040b54 <AIC23_mic_boost>:

void AIC23_mic_boost(unsigned int boost){
   40b54:	defffd04 	addi	sp,sp,-12
   40b58:	dfc00215 	stw	ra,8(sp)
   40b5c:	df000115 	stw	fp,4(sp)
   40b60:	df000104 	addi	fp,sp,4
   40b64:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FE) | (boost & 0x01);
   40b68:	00800174 	movhi	r2,5
   40b6c:	10805b04 	addi	r2,r2,364
   40b70:	10800417 	ldw	r2,16(r2)
   40b74:	10c07f8c 	andi	r3,r2,510
   40b78:	e0bfff17 	ldw	r2,-4(fp)
   40b7c:	1080004c 	andi	r2,r2,1
   40b80:	1886b03a 	or	r3,r3,r2
   40b84:	00800174 	movhi	r2,5
   40b88:	10805b04 	addi	r2,r2,364
   40b8c:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40b90:	00800174 	movhi	r2,5
   40b94:	10805b04 	addi	r2,r2,364
   40b98:	11400417 	ldw	r5,16(r2)
   40b9c:	01000104 	movi	r4,4
   40ba0:	00423e40 	call	423e4 <spi_send>
}
   40ba4:	e037883a 	mov	sp,fp
   40ba8:	dfc00117 	ldw	ra,4(sp)
   40bac:	df000017 	ldw	fp,0(sp)
   40bb0:	dec00204 	addi	sp,sp,8
   40bb4:	f800283a 	ret

00040bb8 <AIC23_dac_mute>:
//
// 					Digital Audio Path Control
//
/////////////////////////////////////////////////////////////////

void AIC23_dac_mute(unsigned int mute){
   40bb8:	defffd04 	addi	sp,sp,-12
   40bbc:	dfc00215 	stw	ra,8(sp)
   40bc0:	df000115 	stw	fp,4(sp)
   40bc4:	df000104 	addi	fp,sp,4
   40bc8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x1F7) | ((mute & 0x01) << 3);
   40bcc:	00800174 	movhi	r2,5
   40bd0:	10805b04 	addi	r2,r2,364
   40bd4:	10800517 	ldw	r2,20(r2)
   40bd8:	10c07dcc 	andi	r3,r2,503
   40bdc:	e0bfff17 	ldw	r2,-4(fp)
   40be0:	1080004c 	andi	r2,r2,1
   40be4:	100490fa 	slli	r2,r2,3
   40be8:	1886b03a 	or	r3,r3,r2
   40bec:	00800174 	movhi	r2,5
   40bf0:	10805b04 	addi	r2,r2,364
   40bf4:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40bf8:	00800174 	movhi	r2,5
   40bfc:	10805b04 	addi	r2,r2,364
   40c00:	11400517 	ldw	r5,20(r2)
   40c04:	01000144 	movi	r4,5
   40c08:	00423e40 	call	423e4 <spi_send>
}
   40c0c:	e037883a 	mov	sp,fp
   40c10:	dfc00117 	ldw	ra,4(sp)
   40c14:	df000017 	ldw	fp,0(sp)
   40c18:	dec00204 	addi	sp,sp,8
   40c1c:	f800283a 	ret

00040c20 <AIC23_deemp>:

void AIC23_deemp(unsigned int deemphasis){
   40c20:	defffd04 	addi	sp,sp,-12
   40c24:	dfc00215 	stw	ra,8(sp)
   40c28:	df000115 	stw	fp,4(sp)
   40c2c:	df000104 	addi	fp,sp,4
   40c30:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x01F9) | ((deemphasis & 0x03) << 1);
   40c34:	00800174 	movhi	r2,5
   40c38:	10805b04 	addi	r2,r2,364
   40c3c:	10800517 	ldw	r2,20(r2)
   40c40:	10c07e4c 	andi	r3,r2,505
   40c44:	e0bfff17 	ldw	r2,-4(fp)
   40c48:	108000cc 	andi	r2,r2,3
   40c4c:	1085883a 	add	r2,r2,r2
   40c50:	1886b03a 	or	r3,r3,r2
   40c54:	00800174 	movhi	r2,5
   40c58:	10805b04 	addi	r2,r2,364
   40c5c:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40c60:	00800174 	movhi	r2,5
   40c64:	10805b04 	addi	r2,r2,364
   40c68:	11400517 	ldw	r5,20(r2)
   40c6c:	01000144 	movi	r4,5
   40c70:	00423e40 	call	423e4 <spi_send>
}
   40c74:	e037883a 	mov	sp,fp
   40c78:	dfc00117 	ldw	ra,4(sp)
   40c7c:	df000017 	ldw	fp,0(sp)
   40c80:	dec00204 	addi	sp,sp,8
   40c84:	f800283a 	ret

00040c88 <AIC23_adc_highpass>:

void AIC23_adc_highpass(unsigned int highpass){
   40c88:	defffd04 	addi	sp,sp,-12
   40c8c:	dfc00215 	stw	ra,8(sp)
   40c90:	df000115 	stw	fp,4(sp)
   40c94:	df000104 	addi	fp,sp,4
   40c98:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x01FE) | (highpass & 0x01);
   40c9c:	00800174 	movhi	r2,5
   40ca0:	10805b04 	addi	r2,r2,364
   40ca4:	10800517 	ldw	r2,20(r2)
   40ca8:	10c07f8c 	andi	r3,r2,510
   40cac:	e0bfff17 	ldw	r2,-4(fp)
   40cb0:	1080004c 	andi	r2,r2,1
   40cb4:	1886b03a 	or	r3,r3,r2
   40cb8:	00800174 	movhi	r2,5
   40cbc:	10805b04 	addi	r2,r2,364
   40cc0:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40cc4:	00800174 	movhi	r2,5
   40cc8:	10805b04 	addi	r2,r2,364
   40ccc:	11400517 	ldw	r5,20(r2)
   40cd0:	01000144 	movi	r4,5
   40cd4:	00423e40 	call	423e4 <spi_send>
}
   40cd8:	e037883a 	mov	sp,fp
   40cdc:	dfc00117 	ldw	ra,4(sp)
   40ce0:	df000017 	ldw	fp,0(sp)
   40ce4:	dec00204 	addi	sp,sp,8
   40ce8:	f800283a 	ret

00040cec <AIC23_power_on>:
//
// 						Power Down Control
//
/////////////////////////////////////////////////////////////////

void AIC23_power_on(){
   40cec:	defffe04 	addi	sp,sp,-8
   40cf0:	dfc00115 	stw	ra,4(sp)
   40cf4:	df000015 	stw	fp,0(sp)
   40cf8:	d839883a 	mov	fp,sp
	aic23_config[6] = 0x00;
   40cfc:	00800174 	movhi	r2,5
   40d00:	10805b04 	addi	r2,r2,364
   40d04:	10000615 	stw	zero,24(r2)
	spi_send(0x06, aic23_config[6]);
   40d08:	00800174 	movhi	r2,5
   40d0c:	10805b04 	addi	r2,r2,364
   40d10:	11400617 	ldw	r5,24(r2)
   40d14:	01000184 	movi	r4,6
   40d18:	00423e40 	call	423e4 <spi_send>
}
   40d1c:	e037883a 	mov	sp,fp
   40d20:	dfc00117 	ldw	ra,4(sp)
   40d24:	df000017 	ldw	fp,0(sp)
   40d28:	dec00204 	addi	sp,sp,8
   40d2c:	f800283a 	ret

00040d30 <AIC23_power_off>:

void AIC23_power_off(){
   40d30:	defffe04 	addi	sp,sp,-8
   40d34:	dfc00115 	stw	ra,4(sp)
   40d38:	df000015 	stw	fp,0(sp)
   40d3c:	d839883a 	mov	fp,sp
	aic23_config[6] = 0xFF;
   40d40:	00c00174 	movhi	r3,5
   40d44:	18c05b04 	addi	r3,r3,364
   40d48:	00803fc4 	movi	r2,255
   40d4c:	18800615 	stw	r2,24(r3)
	spi_send(0x06, aic23_config[6]);
   40d50:	00800174 	movhi	r2,5
   40d54:	10805b04 	addi	r2,r2,364
   40d58:	11400617 	ldw	r5,24(r2)
   40d5c:	01000184 	movi	r4,6
   40d60:	00423e40 	call	423e4 <spi_send>
}
   40d64:	e037883a 	mov	sp,fp
   40d68:	dfc00117 	ldw	ra,4(sp)
   40d6c:	df000017 	ldw	fp,0(sp)
   40d70:	dec00204 	addi	sp,sp,8
   40d74:	f800283a 	ret

00040d78 <AIC23_mode>:
//
// 				Digital Audio Interface Format
//
/////////////////////////////////////////////////////////////////

void AIC23_mode(unsigned int mode){
   40d78:	defffd04 	addi	sp,sp,-12
   40d7c:	dfc00215 	stw	ra,8(sp)
   40d80:	df000115 	stw	fp,4(sp)
   40d84:	df000104 	addi	fp,sp,4
   40d88:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01BF) | ((mode & 0x01) << 6);
   40d8c:	00800174 	movhi	r2,5
   40d90:	10805b04 	addi	r2,r2,364
   40d94:	10800717 	ldw	r2,28(r2)
   40d98:	10c06fcc 	andi	r3,r2,447
   40d9c:	e0bfff17 	ldw	r2,-4(fp)
   40da0:	1080004c 	andi	r2,r2,1
   40da4:	100491ba 	slli	r2,r2,6
   40da8:	1886b03a 	or	r3,r3,r2
   40dac:	00800174 	movhi	r2,5
   40db0:	10805b04 	addi	r2,r2,364
   40db4:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40db8:	00800174 	movhi	r2,5
   40dbc:	10805b04 	addi	r2,r2,364
   40dc0:	11400717 	ldw	r5,28(r2)
   40dc4:	010001c4 	movi	r4,7
   40dc8:	00423e40 	call	423e4 <spi_send>
}
   40dcc:	e037883a 	mov	sp,fp
   40dd0:	dfc00117 	ldw	ra,4(sp)
   40dd4:	df000017 	ldw	fp,0(sp)
   40dd8:	dec00204 	addi	sp,sp,8
   40ddc:	f800283a 	ret

00040de0 <AIC23_lr_swap>:

void AIC23_lr_swap(unsigned int swap){
   40de0:	defffd04 	addi	sp,sp,-12
   40de4:	dfc00215 	stw	ra,8(sp)
   40de8:	df000115 	stw	fp,4(sp)
   40dec:	df000104 	addi	fp,sp,4
   40df0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01DF) | ((swap & 0x01) << 5);
   40df4:	00800174 	movhi	r2,5
   40df8:	10805b04 	addi	r2,r2,364
   40dfc:	10800717 	ldw	r2,28(r2)
   40e00:	10c077cc 	andi	r3,r2,479
   40e04:	e0bfff17 	ldw	r2,-4(fp)
   40e08:	1080004c 	andi	r2,r2,1
   40e0c:	1004917a 	slli	r2,r2,5
   40e10:	1886b03a 	or	r3,r3,r2
   40e14:	00800174 	movhi	r2,5
   40e18:	10805b04 	addi	r2,r2,364
   40e1c:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40e20:	00800174 	movhi	r2,5
   40e24:	10805b04 	addi	r2,r2,364
   40e28:	11400717 	ldw	r5,28(r2)
   40e2c:	010001c4 	movi	r4,7
   40e30:	00423e40 	call	423e4 <spi_send>

}
   40e34:	e037883a 	mov	sp,fp
   40e38:	dfc00117 	ldw	ra,4(sp)
   40e3c:	df000017 	ldw	fp,0(sp)
   40e40:	dec00204 	addi	sp,sp,8
   40e44:	f800283a 	ret

00040e48 <AIC23_lr_phase>:

void AIC23_lr_phase(unsigned int phase){
   40e48:	defffd04 	addi	sp,sp,-12
   40e4c:	dfc00215 	stw	ra,8(sp)
   40e50:	df000115 	stw	fp,4(sp)
   40e54:	df000104 	addi	fp,sp,4
   40e58:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01EF) | ((phase & 0x01) << 4);
   40e5c:	00800174 	movhi	r2,5
   40e60:	10805b04 	addi	r2,r2,364
   40e64:	10800717 	ldw	r2,28(r2)
   40e68:	10c07bcc 	andi	r3,r2,495
   40e6c:	e0bfff17 	ldw	r2,-4(fp)
   40e70:	1080004c 	andi	r2,r2,1
   40e74:	1004913a 	slli	r2,r2,4
   40e78:	1886b03a 	or	r3,r3,r2
   40e7c:	00800174 	movhi	r2,5
   40e80:	10805b04 	addi	r2,r2,364
   40e84:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40e88:	00800174 	movhi	r2,5
   40e8c:	10805b04 	addi	r2,r2,364
   40e90:	11400717 	ldw	r5,28(r2)
   40e94:	010001c4 	movi	r4,7
   40e98:	00423e40 	call	423e4 <spi_send>
}
   40e9c:	e037883a 	mov	sp,fp
   40ea0:	dfc00117 	ldw	ra,4(sp)
   40ea4:	df000017 	ldw	fp,0(sp)
   40ea8:	dec00204 	addi	sp,sp,8
   40eac:	f800283a 	ret

00040eb0 <AIC23_input_len>:

void AIC23_input_len(unsigned int length){
   40eb0:	defffd04 	addi	sp,sp,-12
   40eb4:	dfc00215 	stw	ra,8(sp)
   40eb8:	df000115 	stw	fp,4(sp)
   40ebc:	df000104 	addi	fp,sp,4
   40ec0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01F3) | ((length & 0x03) << 2);
   40ec4:	00800174 	movhi	r2,5
   40ec8:	10805b04 	addi	r2,r2,364
   40ecc:	10800717 	ldw	r2,28(r2)
   40ed0:	10c07ccc 	andi	r3,r2,499
   40ed4:	e0bfff17 	ldw	r2,-4(fp)
   40ed8:	108000cc 	andi	r2,r2,3
   40edc:	1085883a 	add	r2,r2,r2
   40ee0:	1085883a 	add	r2,r2,r2
   40ee4:	1886b03a 	or	r3,r3,r2
   40ee8:	00800174 	movhi	r2,5
   40eec:	10805b04 	addi	r2,r2,364
   40ef0:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40ef4:	00800174 	movhi	r2,5
   40ef8:	10805b04 	addi	r2,r2,364
   40efc:	11400717 	ldw	r5,28(r2)
   40f00:	010001c4 	movi	r4,7
   40f04:	00423e40 	call	423e4 <spi_send>
}
   40f08:	e037883a 	mov	sp,fp
   40f0c:	dfc00117 	ldw	ra,4(sp)
   40f10:	df000017 	ldw	fp,0(sp)
   40f14:	dec00204 	addi	sp,sp,8
   40f18:	f800283a 	ret

00040f1c <AIC23_format>:

void AIC23_format(unsigned int format){
   40f1c:	defffd04 	addi	sp,sp,-12
   40f20:	dfc00215 	stw	ra,8(sp)
   40f24:	df000115 	stw	fp,4(sp)
   40f28:	df000104 	addi	fp,sp,4
   40f2c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01FC) | (format & 0x03);
   40f30:	00800174 	movhi	r2,5
   40f34:	10805b04 	addi	r2,r2,364
   40f38:	10800717 	ldw	r2,28(r2)
   40f3c:	10c07f0c 	andi	r3,r2,508
   40f40:	e0bfff17 	ldw	r2,-4(fp)
   40f44:	108000cc 	andi	r2,r2,3
   40f48:	1886b03a 	or	r3,r3,r2
   40f4c:	00800174 	movhi	r2,5
   40f50:	10805b04 	addi	r2,r2,364
   40f54:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40f58:	00800174 	movhi	r2,5
   40f5c:	10805b04 	addi	r2,r2,364
   40f60:	11400717 	ldw	r5,28(r2)
   40f64:	010001c4 	movi	r4,7
   40f68:	00423e40 	call	423e4 <spi_send>
}
   40f6c:	e037883a 	mov	sp,fp
   40f70:	dfc00117 	ldw	ra,4(sp)
   40f74:	df000017 	ldw	fp,0(sp)
   40f78:	dec00204 	addi	sp,sp,8
   40f7c:	f800283a 	ret

00040f80 <AIC23_clkin>:
//
// 						Sample Rate Control
//
/////////////////////////////////////////////////////////////////

void AIC23_clkin(unsigned int clock){
   40f80:	defffd04 	addi	sp,sp,-12
   40f84:	dfc00215 	stw	ra,8(sp)
   40f88:	df000115 	stw	fp,4(sp)
   40f8c:	df000104 	addi	fp,sp,4
   40f90:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x01BF) | ((clock & 0x01) << 6);
   40f94:	00800174 	movhi	r2,5
   40f98:	10805b04 	addi	r2,r2,364
   40f9c:	10800817 	ldw	r2,32(r2)
   40fa0:	10c06fcc 	andi	r3,r2,447
   40fa4:	e0bfff17 	ldw	r2,-4(fp)
   40fa8:	1080004c 	andi	r2,r2,1
   40fac:	100491ba 	slli	r2,r2,6
   40fb0:	1886b03a 	or	r3,r3,r2
   40fb4:	00800174 	movhi	r2,5
   40fb8:	10805b04 	addi	r2,r2,364
   40fbc:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   40fc0:	00800174 	movhi	r2,5
   40fc4:	10805b04 	addi	r2,r2,364
   40fc8:	11400817 	ldw	r5,32(r2)
   40fcc:	01000204 	movi	r4,8
   40fd0:	00423e40 	call	423e4 <spi_send>
}
   40fd4:	e037883a 	mov	sp,fp
   40fd8:	dfc00117 	ldw	ra,4(sp)
   40fdc:	df000017 	ldw	fp,0(sp)
   40fe0:	dec00204 	addi	sp,sp,8
   40fe4:	f800283a 	ret

00040fe8 <AIC23_clkout>:

void AIC23_clkout(unsigned int clock){
   40fe8:	defffd04 	addi	sp,sp,-12
   40fec:	dfc00215 	stw	ra,8(sp)
   40ff0:	df000115 	stw	fp,4(sp)
   40ff4:	df000104 	addi	fp,sp,4
   40ff8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x017F) | ((clock & 0x01) << 7);
   40ffc:	00800174 	movhi	r2,5
   41000:	10805b04 	addi	r2,r2,364
   41004:	10800817 	ldw	r2,32(r2)
   41008:	10c05fcc 	andi	r3,r2,383
   4100c:	e0bfff17 	ldw	r2,-4(fp)
   41010:	1080004c 	andi	r2,r2,1
   41014:	100491fa 	slli	r2,r2,7
   41018:	1886b03a 	or	r3,r3,r2
   4101c:	00800174 	movhi	r2,5
   41020:	10805b04 	addi	r2,r2,364
   41024:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41028:	00800174 	movhi	r2,5
   4102c:	10805b04 	addi	r2,r2,364
   41030:	11400817 	ldw	r5,32(r2)
   41034:	01000204 	movi	r4,8
   41038:	00423e40 	call	423e4 <spi_send>
}
   4103c:	e037883a 	mov	sp,fp
   41040:	dfc00117 	ldw	ra,4(sp)
   41044:	df000017 	ldw	fp,0(sp)
   41048:	dec00204 	addi	sp,sp,8
   4104c:	f800283a 	ret

00041050 <AIC23_setFreq>:
	 AIC23_FREQ_32KHZ 0x0c	// 32000 Hz
	 AIC23_FREQ_44KHZ 0x11	// 44100 Hz
	 AIC23_FREQ_48KHZ 0x00	// 48000 Hz
	 AIC23_FREQ_96KHZ 0x0e	// 96000 Hz
 */
void AIC23_setFreq(unsigned int frequency){
   41050:	defffd04 	addi	sp,sp,-12
   41054:	dfc00215 	stw	ra,8(sp)
   41058:	df000115 	stw	fp,4(sp)
   4105c:	df000104 	addi	fp,sp,4
   41060:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1C3) | ((frequency & 0x0F) << 2);
   41064:	00800174 	movhi	r2,5
   41068:	10805b04 	addi	r2,r2,364
   4106c:	10800817 	ldw	r2,32(r2)
   41070:	10c070cc 	andi	r3,r2,451
   41074:	e0bfff17 	ldw	r2,-4(fp)
   41078:	108003cc 	andi	r2,r2,15
   4107c:	1085883a 	add	r2,r2,r2
   41080:	1085883a 	add	r2,r2,r2
   41084:	1886b03a 	or	r3,r3,r2
   41088:	00800174 	movhi	r2,5
   4108c:	10805b04 	addi	r2,r2,364
   41090:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41094:	00800174 	movhi	r2,5
   41098:	10805b04 	addi	r2,r2,364
   4109c:	11400817 	ldw	r5,32(r2)
   410a0:	01000204 	movi	r4,8
   410a4:	00423e40 	call	423e4 <spi_send>
}
   410a8:	e037883a 	mov	sp,fp
   410ac:	dfc00117 	ldw	ra,4(sp)
   410b0:	df000017 	ldw	fp,0(sp)
   410b4:	dec00204 	addi	sp,sp,8
   410b8:	f800283a 	ret

000410bc <AIC23_bosr>:

void AIC23_bosr(unsigned int frequency){
   410bc:	defffd04 	addi	sp,sp,-12
   410c0:	dfc00215 	stw	ra,8(sp)
   410c4:	df000115 	stw	fp,4(sp)
   410c8:	df000104 	addi	fp,sp,4
   410cc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1FD) | ((frequency & 0x01) << 1);
   410d0:	00800174 	movhi	r2,5
   410d4:	10805b04 	addi	r2,r2,364
   410d8:	10800817 	ldw	r2,32(r2)
   410dc:	10c07f4c 	andi	r3,r2,509
   410e0:	e0bfff17 	ldw	r2,-4(fp)
   410e4:	1080004c 	andi	r2,r2,1
   410e8:	1085883a 	add	r2,r2,r2
   410ec:	1886b03a 	or	r3,r3,r2
   410f0:	00800174 	movhi	r2,5
   410f4:	10805b04 	addi	r2,r2,364
   410f8:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   410fc:	00800174 	movhi	r2,5
   41100:	10805b04 	addi	r2,r2,364
   41104:	11400817 	ldw	r5,32(r2)
   41108:	01000204 	movi	r4,8
   4110c:	00423e40 	call	423e4 <spi_send>
}
   41110:	e037883a 	mov	sp,fp
   41114:	dfc00117 	ldw	ra,4(sp)
   41118:	df000017 	ldw	fp,0(sp)
   4111c:	dec00204 	addi	sp,sp,8
   41120:	f800283a 	ret

00041124 <AIC23_clk_mode>:

void AIC23_clk_mode(unsigned int mode){
   41124:	defffd04 	addi	sp,sp,-12
   41128:	dfc00215 	stw	ra,8(sp)
   4112c:	df000115 	stw	fp,4(sp)
   41130:	df000104 	addi	fp,sp,4
   41134:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1FE) | (mode & 0x01);
   41138:	00800174 	movhi	r2,5
   4113c:	10805b04 	addi	r2,r2,364
   41140:	10800817 	ldw	r2,32(r2)
   41144:	10c07f8c 	andi	r3,r2,510
   41148:	e0bfff17 	ldw	r2,-4(fp)
   4114c:	1080004c 	andi	r2,r2,1
   41150:	1886b03a 	or	r3,r3,r2
   41154:	00800174 	movhi	r2,5
   41158:	10805b04 	addi	r2,r2,364
   4115c:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41160:	00800174 	movhi	r2,5
   41164:	10805b04 	addi	r2,r2,364
   41168:	11400817 	ldw	r5,32(r2)
   4116c:	01000204 	movi	r4,8
   41170:	00423e40 	call	423e4 <spi_send>
}
   41174:	e037883a 	mov	sp,fp
   41178:	dfc00117 	ldw	ra,4(sp)
   4117c:	df000017 	ldw	fp,0(sp)
   41180:	dec00204 	addi	sp,sp,8
   41184:	f800283a 	ret

00041188 <AIC23_on>:
// 					Digital Interface Activation
//
/////////////////////////////////////////////////////////////////

// Turns the AIC23 on
void AIC23_on(){
   41188:	defffe04 	addi	sp,sp,-8
   4118c:	dfc00115 	stw	ra,4(sp)
   41190:	df000015 	stw	fp,0(sp)
   41194:	d839883a 	mov	fp,sp
	spi_send(0x06, 0x00);
   41198:	01000184 	movi	r4,6
   4119c:	000b883a 	mov	r5,zero
   411a0:	00423e40 	call	423e4 <spi_send>
}
   411a4:	e037883a 	mov	sp,fp
   411a8:	dfc00117 	ldw	ra,4(sp)
   411ac:	df000017 	ldw	fp,0(sp)
   411b0:	dec00204 	addi	sp,sp,8
   411b4:	f800283a 	ret

000411b8 <AIC23_off>:

// Turns the AIC23 off
void AIC23_off(){
   411b8:	defffe04 	addi	sp,sp,-8
   411bc:	dfc00115 	stw	ra,4(sp)
   411c0:	df000015 	stw	fp,0(sp)
   411c4:	d839883a 	mov	fp,sp
	spi_send(0x06, 0x80);
   411c8:	01000184 	movi	r4,6
   411cc:	01402004 	movi	r5,128
   411d0:	00423e40 	call	423e4 <spi_send>
}
   411d4:	e037883a 	mov	sp,fp
   411d8:	dfc00117 	ldw	ra,4(sp)
   411dc:	df000017 	ldw	fp,0(sp)
   411e0:	dec00204 	addi	sp,sp,8
   411e4:	f800283a 	ret

000411e8 <delay>:
   411e8:	defffc04 	addi	sp,sp,-16
   411ec:	df000315 	stw	fp,12(sp)
   411f0:	df000304 	addi	fp,sp,12
   411f4:	e13fff15 	stw	r4,-4(fp)
   411f8:	e03ffe15 	stw	zero,-8(fp)
   411fc:	e03ffd15 	stw	zero,-12(fp)
   41200:	e03ffe15 	stw	zero,-8(fp)
   41204:	00000606 	br	41220 <delay+0x38>
   41208:	e0bffd17 	ldw	r2,-12(fp)
   4120c:	10800044 	addi	r2,r2,1
   41210:	e0bffd15 	stw	r2,-12(fp)
   41214:	e0bffe17 	ldw	r2,-8(fp)
   41218:	10800044 	addi	r2,r2,1
   4121c:	e0bffe15 	stw	r2,-8(fp)
   41220:	e0fffe17 	ldw	r3,-8(fp)
   41224:	e0bfff17 	ldw	r2,-4(fp)
   41228:	18bff716 	blt	r3,r2,41208 <delay+0x20>
   4122c:	e037883a 	mov	sp,fp
   41230:	df000017 	ldw	fp,0(sp)
   41234:	dec00104 	addi	sp,sp,4
   41238:	f800283a 	ret

0004123c <I2S_collect_left>:
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "delay.h"

int I2S_collect_left(){
   4123c:	defffc04 	addi	sp,sp,-16
   41240:	dfc00315 	stw	ra,12(sp)
   41244:	df000215 	stw	fp,8(sp)
   41248:	df000204 	addi	fp,sp,8
	int k = 0;
   4124c:	e03fff15 	stw	zero,-4(fp)
	int leftChannel = 0;
   41250:	e03ffe15 	stw	zero,-8(fp)

	//Left channel LRCOUT = 0
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 0);
   41254:	00800234 	movhi	r2,8
   41258:	10846004 	addi	r2,r2,4480
   4125c:	10000035 	stwio	zero,0(r2)
    delay(3);
   41260:	010000c4 	movi	r4,3
   41264:	00411e80 	call	411e8 <delay>
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41268:	00800234 	movhi	r2,8
   4126c:	10845804 	addi	r2,r2,4448
   41270:	10000035 	stwio	zero,0(r2)
	delay(3);
   41274:	010000c4 	movi	r4,3
   41278:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   4127c:	00c00234 	movhi	r3,8
   41280:	18c45804 	addi	r3,r3,4448
   41284:	00800044 	movi	r2,1
   41288:	18800035 	stwio	r2,0(r3)
	delay(3);
   4128c:	010000c4 	movi	r4,3
   41290:	00411e80 	call	411e8 <delay>
	for(k = 0; k < 16; k++){
   41294:	e03fff15 	stw	zero,-4(fp)
   41298:	00001a06 	br	41304 <I2S_collect_left+0xc8>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   4129c:	00800234 	movhi	r2,8
   412a0:	10845804 	addi	r2,r2,4448
   412a4:	10000035 	stwio	zero,0(r2)
		delay(3);
   412a8:	010000c4 	movi	r4,3
   412ac:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   412b0:	00c00234 	movhi	r3,8
   412b4:	18c45804 	addi	r3,r3,4448
   412b8:	00800044 	movi	r2,1
   412bc:	18800035 	stwio	r2,0(r3)
		delay(3);
   412c0:	010000c4 	movi	r4,3
   412c4:	00411e80 	call	411e8 <delay>
		//printf("%i", IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE));
		leftChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
   412c8:	00800234 	movhi	r2,8
   412cc:	10845c04 	addi	r2,r2,4464
   412d0:	10c00037 	ldwio	r3,0(r2)
   412d4:	e0bffe17 	ldw	r2,-8(fp)
   412d8:	10c4b03a 	or	r2,r2,r3
   412dc:	e0bffe15 	stw	r2,-8(fp)
		if(k < 15)
   412e0:	e0bfff17 	ldw	r2,-4(fp)
   412e4:	108003c8 	cmpgei	r2,r2,15
   412e8:	1000031e 	bne	r2,zero,412f8 <I2S_collect_left+0xbc>
			leftChannel <<= 1;
   412ec:	e0bffe17 	ldw	r2,-8(fp)
   412f0:	1085883a 	add	r2,r2,r2
   412f4:	e0bffe15 	stw	r2,-8(fp)
    delay(3);
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
	delay(3);
	for(k = 0; k < 16; k++){
   412f8:	e0bfff17 	ldw	r2,-4(fp)
   412fc:	10800044 	addi	r2,r2,1
   41300:	e0bfff15 	stw	r2,-4(fp)
   41304:	e0bfff17 	ldw	r2,-4(fp)
   41308:	10800410 	cmplti	r2,r2,16
   4130c:	103fe31e 	bne	r2,zero,4129c <I2S_collect_left+0x60>
		leftChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
		if(k < 15)
			leftChannel <<= 1;

	}
	return leftChannel;
   41310:	e0bffe17 	ldw	r2,-8(fp)
}
   41314:	e037883a 	mov	sp,fp
   41318:	dfc00117 	ldw	ra,4(sp)
   4131c:	df000017 	ldw	fp,0(sp)
   41320:	dec00204 	addi	sp,sp,8
   41324:	f800283a 	ret

00041328 <I2S_collect_right>:

int I2S_collect_right(){
   41328:	defffc04 	addi	sp,sp,-16
   4132c:	dfc00315 	stw	ra,12(sp)
   41330:	df000215 	stw	fp,8(sp)
   41334:	df000204 	addi	fp,sp,8
	int l = 0;
   41338:	e03fff15 	stw	zero,-4(fp)
	int rightChannel = 0;
   4133c:	e03ffe15 	stw	zero,-8(fp)
	//right channel LRCOUT = 1
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 1);
   41340:	00c00234 	movhi	r3,8
   41344:	18c46004 	addi	r3,r3,4480
   41348:	00800044 	movi	r2,1
   4134c:	18800035 	stwio	r2,0(r3)
    delay(3);
   41350:	010000c4 	movi	r4,3
   41354:	00411e80 	call	411e8 <delay>
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41358:	00800234 	movhi	r2,8
   4135c:	10845804 	addi	r2,r2,4448
   41360:	10000035 	stwio	zero,0(r2)
	delay(3);
   41364:	010000c4 	movi	r4,3
   41368:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   4136c:	00c00234 	movhi	r3,8
   41370:	18c45804 	addi	r3,r3,4448
   41374:	00800044 	movi	r2,1
   41378:	18800035 	stwio	r2,0(r3)
	for(l = 0; l < 16; l++){
   4137c:	e03fff15 	stw	zero,-4(fp)
   41380:	00001a06 	br	413ec <I2S_collect_right+0xc4>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41384:	00800234 	movhi	r2,8
   41388:	10845804 	addi	r2,r2,4448
   4138c:	10000035 	stwio	zero,0(r2)
		delay(3);
   41390:	010000c4 	movi	r4,3
   41394:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41398:	00c00234 	movhi	r3,8
   4139c:	18c45804 	addi	r3,r3,4448
   413a0:	00800044 	movi	r2,1
   413a4:	18800035 	stwio	r2,0(r3)
		delay(3);
   413a8:	010000c4 	movi	r4,3
   413ac:	00411e80 	call	411e8 <delay>
		rightChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
   413b0:	00800234 	movhi	r2,8
   413b4:	10845c04 	addi	r2,r2,4464
   413b8:	10c00037 	ldwio	r3,0(r2)
   413bc:	e0bffe17 	ldw	r2,-8(fp)
   413c0:	10c4b03a 	or	r2,r2,r3
   413c4:	e0bffe15 	stw	r2,-8(fp)
		if(l < 15)
   413c8:	e0bfff17 	ldw	r2,-4(fp)
   413cc:	108003c8 	cmpgei	r2,r2,15
   413d0:	1000031e 	bne	r2,zero,413e0 <I2S_collect_right+0xb8>
			rightChannel <<= 1;
   413d4:	e0bffe17 	ldw	r2,-8(fp)
   413d8:	1085883a 	add	r2,r2,r2
   413dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 1);
    delay(3);
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
	for(l = 0; l < 16; l++){
   413e0:	e0bfff17 	ldw	r2,-4(fp)
   413e4:	10800044 	addi	r2,r2,1
   413e8:	e0bfff15 	stw	r2,-4(fp)
   413ec:	e0bfff17 	ldw	r2,-4(fp)
   413f0:	10800410 	cmplti	r2,r2,16
   413f4:	103fe31e 	bne	r2,zero,41384 <I2S_collect_right+0x5c>
		rightChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
		if(l < 15)
			rightChannel <<= 1;
	}

	return rightChannel;
   413f8:	e0bffe17 	ldw	r2,-8(fp)

}
   413fc:	e037883a 	mov	sp,fp
   41400:	dfc00117 	ldw	ra,4(sp)
   41404:	df000017 	ldw	fp,0(sp)
   41408:	dec00204 	addi	sp,sp,8
   4140c:	f800283a 	ret

00041410 <I2S_send_left>:


void I2S_send_left(int leftdata){
   41410:	defffc04 	addi	sp,sp,-16
   41414:	dfc00315 	stw	ra,12(sp)
   41418:	df000215 	stw	fp,8(sp)
   4141c:	df000204 	addi	fp,sp,8
   41420:	e13fff15 	stw	r4,-4(fp)
	int temp = 0;
   41424:	e03ffe15 	stw	zero,-8(fp)

	//Toggle LRCIN to 0
	IOWR_ALTERA_AVALON_PIO_DATA(LRCIN_BASE, 0);
   41428:	00800234 	movhi	r2,8
   4142c:	10845404 	addi	r2,r2,4432
   41430:	10000035 	stwio	zero,0(r2)
	delay(3);
   41434:	010000c4 	movi	r4,3
   41438:	00411e80 	call	411e8 <delay>

	//first Bclk cycle
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   4143c:	00800234 	movhi	r2,8
   41440:	10845804 	addi	r2,r2,4448
   41444:	10000035 	stwio	zero,0(r2)
	delay(3);
   41448:	010000c4 	movi	r4,3
   4144c:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41450:	00c00234 	movhi	r3,8
   41454:	18c45804 	addi	r3,r3,4448
   41458:	00800044 	movi	r2,1
   4145c:	18800035 	stwio	r2,0(r3)

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41460:	e03ffe15 	stw	zero,-8(fp)
   41464:	00001706 	br	414c4 <I2S_send_left+0xb4>
		//Insert the data to DIN_BASE
		IOWR_ALTERA_AVALON_PIO_DATA(DIN_BASE, !!(leftdata&0x1000));
   41468:	e0bfff17 	ldw	r2,-4(fp)
   4146c:	1084000c 	andi	r2,r2,4096
   41470:	1006c03a 	cmpne	r3,r2,zero
   41474:	00800234 	movhi	r2,8
   41478:	10846804 	addi	r2,r2,4512
   4147c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41480:	00800234 	movhi	r2,8
   41484:	10845804 	addi	r2,r2,4448
   41488:	10000035 	stwio	zero,0(r2)
		delay(3);
   4148c:	010000c4 	movi	r4,3
   41490:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41494:	00c00234 	movhi	r3,8
   41498:	18c45804 	addi	r3,r3,4448
   4149c:	00800044 	movi	r2,1
   414a0:	18800035 	stwio	r2,0(r3)
		delay(3);
   414a4:	010000c4 	movi	r4,3
   414a8:	00411e80 	call	411e8 <delay>
		leftdata <<= 1;
   414ac:	e0bfff17 	ldw	r2,-4(fp)
   414b0:	1085883a 	add	r2,r2,r2
   414b4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   414b8:	e0bffe17 	ldw	r2,-8(fp)
   414bc:	10800044 	addi	r2,r2,1
   414c0:	e0bffe15 	stw	r2,-8(fp)
   414c4:	e0bffe17 	ldw	r2,-8(fp)
   414c8:	10800410 	cmplti	r2,r2,16
   414cc:	103fe61e 	bne	r2,zero,41468 <I2S_send_left+0x58>
		delay(3);
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
		delay(3);
		leftdata <<= 1;
	}
}
   414d0:	e037883a 	mov	sp,fp
   414d4:	dfc00117 	ldw	ra,4(sp)
   414d8:	df000017 	ldw	fp,0(sp)
   414dc:	dec00204 	addi	sp,sp,8
   414e0:	f800283a 	ret

000414e4 <I2S_send_right>:


void I2S_send_right(int rightdata){
   414e4:	defffc04 	addi	sp,sp,-16
   414e8:	dfc00315 	stw	ra,12(sp)
   414ec:	df000215 	stw	fp,8(sp)
   414f0:	df000204 	addi	fp,sp,8
   414f4:	e13fff15 	stw	r4,-4(fp)
	int temp = 0;
   414f8:	e03ffe15 	stw	zero,-8(fp)
	//Toggle LRCIN to 0
	IOWR_ALTERA_AVALON_PIO_DATA(0x81060, 1);
   414fc:	00c00234 	movhi	r3,8
   41500:	18c41804 	addi	r3,r3,4192
   41504:	00800044 	movi	r2,1
   41508:	18800035 	stwio	r2,0(r3)
	delay(3);
   4150c:	010000c4 	movi	r4,3
   41510:	00411e80 	call	411e8 <delay>

	//first Bclk cycle
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41514:	00800234 	movhi	r2,8
   41518:	10845804 	addi	r2,r2,4448
   4151c:	10000035 	stwio	zero,0(r2)
	delay(3);
   41520:	010000c4 	movi	r4,3
   41524:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41528:	00c00234 	movhi	r3,8
   4152c:	18c45804 	addi	r3,r3,4448
   41530:	00800044 	movi	r2,1
   41534:	18800035 	stwio	r2,0(r3)

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41538:	e03ffe15 	stw	zero,-8(fp)
   4153c:	00001706 	br	4159c <I2S_send_right+0xb8>
		//Insert the data to DIN_BASE
		IOWR_ALTERA_AVALON_PIO_DATA(DIN_BASE, !!(rightdata&0x1000));
   41540:	e0bfff17 	ldw	r2,-4(fp)
   41544:	1084000c 	andi	r2,r2,4096
   41548:	1006c03a 	cmpne	r3,r2,zero
   4154c:	00800234 	movhi	r2,8
   41550:	10846804 	addi	r2,r2,4512
   41554:	10c00035 	stwio	r3,0(r2)

		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41558:	00800234 	movhi	r2,8
   4155c:	10845804 	addi	r2,r2,4448
   41560:	10000035 	stwio	zero,0(r2)
		delay(3);
   41564:	010000c4 	movi	r4,3
   41568:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   4156c:	00c00234 	movhi	r3,8
   41570:	18c45804 	addi	r3,r3,4448
   41574:	00800044 	movi	r2,1
   41578:	18800035 	stwio	r2,0(r3)
		delay(3);
   4157c:	010000c4 	movi	r4,3
   41580:	00411e80 	call	411e8 <delay>
		rightdata <<= 1;
   41584:	e0bfff17 	ldw	r2,-4(fp)
   41588:	1085883a 	add	r2,r2,r2
   4158c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41590:	e0bffe17 	ldw	r2,-8(fp)
   41594:	10800044 	addi	r2,r2,1
   41598:	e0bffe15 	stw	r2,-8(fp)
   4159c:	e0bffe17 	ldw	r2,-8(fp)
   415a0:	10800410 	cmplti	r2,r2,16
   415a4:	103fe61e 	bne	r2,zero,41540 <I2S_send_right+0x5c>
		delay(3);
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
		delay(3);
		rightdata <<= 1;
	}
}
   415a8:	e037883a 	mov	sp,fp
   415ac:	dfc00117 	ldw	ra,4(sp)
   415b0:	df000017 	ldw	fp,0(sp)
   415b4:	dec00204 	addi	sp,sp,8
   415b8:	f800283a 	ret

000415bc <I2S_send_lr>:


void I2S_send_lr(int left, int right){
   415bc:	defffc04 	addi	sp,sp,-16
   415c0:	dfc00315 	stw	ra,12(sp)
   415c4:	df000215 	stw	fp,8(sp)
   415c8:	df000204 	addi	fp,sp,8
   415cc:	e13ffe15 	stw	r4,-8(fp)
   415d0:	e17fff15 	stw	r5,-4(fp)
	I2S_send_left(left);
   415d4:	e13ffe17 	ldw	r4,-8(fp)
   415d8:	00414100 	call	41410 <I2S_send_left>
	I2S_send_right(right);
   415dc:	e13fff17 	ldw	r4,-4(fp)
   415e0:	00414e40 	call	414e4 <I2S_send_right>
}
   415e4:	e037883a 	mov	sp,fp
   415e8:	dfc00117 	ldw	ra,4(sp)
   415ec:	df000017 	ldw	fp,0(sp)
   415f0:	dec00204 	addi	sp,sp,8
   415f4:	f800283a 	ret

000415f8 <fft>:
    float imag;
    };
typedef struct cmpx COMPLEX;

void fft(COMPLEX *Y, int M, COMPLEX *w)       //input sample array, number of points
{
   415f8:	deffec04 	addi	sp,sp,-80
   415fc:	dfc01315 	stw	ra,76(sp)
   41600:	df001215 	stw	fp,72(sp)
   41604:	dc401115 	stw	r17,68(sp)
   41608:	dc001015 	stw	r16,64(sp)
   4160c:	df001004 	addi	fp,sp,64
   41610:	e13ffd15 	stw	r4,-12(fp)
   41614:	e17ffe15 	stw	r5,-8(fp)
   41618:	e1bfff15 	stw	r6,-4(fp)
  COMPLEX temp1,temp2;            //temporary storage variables
  int i,j,k;                      //loop counter variables
  int upper_leg, lower_leg;       //index of upper/lower butterfly leg
  int leg_diff;                   //difference between upper/lower leg
  int num_stages=0;               //number of FFT stages, or iterations
   4161c:	e03ff215 	stw	zero,-56(fp)
  int index, step;                //index and step between twiddle factor
  i=1;                            //log(base 2) of # of points = # of stages
   41620:	00800044 	movi	r2,1
   41624:	e0bff815 	stw	r2,-32(fp)
  do
  {
    num_stages+=1;
   41628:	e0bff217 	ldw	r2,-56(fp)
   4162c:	10800044 	addi	r2,r2,1
   41630:	e0bff215 	stw	r2,-56(fp)
    i=i*2;
   41634:	e0bff817 	ldw	r2,-32(fp)
   41638:	1085883a 	add	r2,r2,r2
   4163c:	e0bff815 	stw	r2,-32(fp)
  } while (i!=M);
   41640:	e0fff817 	ldw	r3,-32(fp)
   41644:	e0bffe17 	ldw	r2,-8(fp)
   41648:	18bff71e 	bne	r3,r2,41628 <fft+0x30>

  leg_diff=M/2;                 //starting difference between upper & lower legs
   4164c:	e0fffe17 	ldw	r3,-8(fp)
   41650:	1804d7fa 	srli	r2,r3,31
   41654:	10c5883a 	add	r2,r2,r3
   41658:	1005d07a 	srai	r2,r2,1
   4165c:	e0bff315 	stw	r2,-52(fp)
  step=2;                     //step between values in twiddle.h              
   41660:	00800084 	movi	r2,2
   41664:	e0bff015 	stw	r2,-64(fp)
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
   41668:	e03ff815 	stw	zero,-32(fp)
   4166c:	0000aa06 	br	41918 <fft+0x320>
  {
    index=0;
   41670:	e03ff115 	stw	zero,-60(fp)
    for (j=0;j<leg_diff;j++)
   41674:	e03ff715 	stw	zero,-36(fp)
   41678:	00009906 	br	418e0 <fft+0x2e8>
    {
      for (upper_leg=j;upper_leg<M;upper_leg+=(2*leg_diff))
   4167c:	e0bff717 	ldw	r2,-36(fp)
   41680:	e0bff515 	stw	r2,-44(fp)
   41684:	00008c06 	br	418b8 <fft+0x2c0>
      {
        lower_leg=upper_leg+leg_diff;
   41688:	e0fff517 	ldw	r3,-44(fp)
   4168c:	e0bff317 	ldw	r2,-52(fp)
   41690:	1885883a 	add	r2,r3,r2
   41694:	e0bff415 	stw	r2,-48(fp)
        temp1.real=(Y[upper_leg]).real + (Y[lower_leg]).real;
   41698:	e0bff517 	ldw	r2,-44(fp)
   4169c:	100490fa 	slli	r2,r2,3
   416a0:	1007883a 	mov	r3,r2
   416a4:	e0bffd17 	ldw	r2,-12(fp)
   416a8:	1885883a 	add	r2,r3,r2
   416ac:	11000017 	ldw	r4,0(r2)
   416b0:	e0bff417 	ldw	r2,-48(fp)
   416b4:	100490fa 	slli	r2,r2,3
   416b8:	1007883a 	mov	r3,r2
   416bc:	e0bffd17 	ldw	r2,-12(fp)
   416c0:	1885883a 	add	r2,r3,r2
   416c4:	10800017 	ldw	r2,0(r2)
   416c8:	100b883a 	mov	r5,r2
   416cc:	0042b140 	call	42b14 <__addsf3>
   416d0:	e0bff915 	stw	r2,-28(fp)
        temp1.imag=(Y[upper_leg]).imag + (Y[lower_leg]).imag;
   416d4:	e0bff517 	ldw	r2,-44(fp)
   416d8:	100490fa 	slli	r2,r2,3
   416dc:	1007883a 	mov	r3,r2
   416e0:	e0bffd17 	ldw	r2,-12(fp)
   416e4:	1885883a 	add	r2,r3,r2
   416e8:	11000117 	ldw	r4,4(r2)
   416ec:	e0bff417 	ldw	r2,-48(fp)
   416f0:	100490fa 	slli	r2,r2,3
   416f4:	1007883a 	mov	r3,r2
   416f8:	e0bffd17 	ldw	r2,-12(fp)
   416fc:	1885883a 	add	r2,r3,r2
   41700:	10800117 	ldw	r2,4(r2)
   41704:	100b883a 	mov	r5,r2
   41708:	0042b140 	call	42b14 <__addsf3>
   4170c:	e0bffa15 	stw	r2,-24(fp)
        temp2.real=(Y[upper_leg]).real - (Y[lower_leg]).real;
   41710:	e0bff517 	ldw	r2,-44(fp)
   41714:	100490fa 	slli	r2,r2,3
   41718:	1007883a 	mov	r3,r2
   4171c:	e0bffd17 	ldw	r2,-12(fp)
   41720:	1885883a 	add	r2,r3,r2
   41724:	11000017 	ldw	r4,0(r2)
   41728:	e0bff417 	ldw	r2,-48(fp)
   4172c:	100490fa 	slli	r2,r2,3
   41730:	1007883a 	mov	r3,r2
   41734:	e0bffd17 	ldw	r2,-12(fp)
   41738:	1885883a 	add	r2,r3,r2
   4173c:	10800017 	ldw	r2,0(r2)
   41740:	100b883a 	mov	r5,r2
   41744:	0042aa40 	call	42aa4 <__subsf3>
   41748:	e0bffb15 	stw	r2,-20(fp)
        temp2.imag=(Y[upper_leg]).imag - (Y[lower_leg]).imag;
   4174c:	e0bff517 	ldw	r2,-44(fp)
   41750:	100490fa 	slli	r2,r2,3
   41754:	1007883a 	mov	r3,r2
   41758:	e0bffd17 	ldw	r2,-12(fp)
   4175c:	1885883a 	add	r2,r3,r2
   41760:	11000117 	ldw	r4,4(r2)
   41764:	e0bff417 	ldw	r2,-48(fp)
   41768:	100490fa 	slli	r2,r2,3
   4176c:	1007883a 	mov	r3,r2
   41770:	e0bffd17 	ldw	r2,-12(fp)
   41774:	1885883a 	add	r2,r3,r2
   41778:	10800117 	ldw	r2,4(r2)
   4177c:	100b883a 	mov	r5,r2
   41780:	0042aa40 	call	42aa4 <__subsf3>
   41784:	e0bffc15 	stw	r2,-16(fp)
        (Y[lower_leg]).real=((temp2.real*(w[index]).real-temp2.imag*(w[index]).imag));
   41788:	e0bff417 	ldw	r2,-48(fp)
   4178c:	100490fa 	slli	r2,r2,3
   41790:	1007883a 	mov	r3,r2
   41794:	e0bffd17 	ldw	r2,-12(fp)
   41798:	18a1883a 	add	r16,r3,r2
   4179c:	e13ffb17 	ldw	r4,-20(fp)
   417a0:	e0bff117 	ldw	r2,-60(fp)
   417a4:	100490fa 	slli	r2,r2,3
   417a8:	1007883a 	mov	r3,r2
   417ac:	e0bfff17 	ldw	r2,-4(fp)
   417b0:	1885883a 	add	r2,r3,r2
   417b4:	10800017 	ldw	r2,0(r2)
   417b8:	100b883a 	mov	r5,r2
   417bc:	0042b780 	call	42b78 <__mulsf3>
   417c0:	1023883a 	mov	r17,r2
   417c4:	e13ffc17 	ldw	r4,-16(fp)
   417c8:	e0bff117 	ldw	r2,-60(fp)
   417cc:	100490fa 	slli	r2,r2,3
   417d0:	1007883a 	mov	r3,r2
   417d4:	e0bfff17 	ldw	r2,-4(fp)
   417d8:	1885883a 	add	r2,r3,r2
   417dc:	10800117 	ldw	r2,4(r2)
   417e0:	100b883a 	mov	r5,r2
   417e4:	0042b780 	call	42b78 <__mulsf3>
   417e8:	8809883a 	mov	r4,r17
   417ec:	100b883a 	mov	r5,r2
   417f0:	0042aa40 	call	42aa4 <__subsf3>
   417f4:	80800015 	stw	r2,0(r16)
        (Y[lower_leg]).imag=((temp2.real*(w[index]).imag+temp2.imag*(w[index]).real));
   417f8:	e0bff417 	ldw	r2,-48(fp)
   417fc:	100490fa 	slli	r2,r2,3
   41800:	1007883a 	mov	r3,r2
   41804:	e0bffd17 	ldw	r2,-12(fp)
   41808:	18a1883a 	add	r16,r3,r2
   4180c:	e13ffb17 	ldw	r4,-20(fp)
   41810:	e0bff117 	ldw	r2,-60(fp)
   41814:	100490fa 	slli	r2,r2,3
   41818:	1007883a 	mov	r3,r2
   4181c:	e0bfff17 	ldw	r2,-4(fp)
   41820:	1885883a 	add	r2,r3,r2
   41824:	10800117 	ldw	r2,4(r2)
   41828:	100b883a 	mov	r5,r2
   4182c:	0042b780 	call	42b78 <__mulsf3>
   41830:	1023883a 	mov	r17,r2
   41834:	e13ffc17 	ldw	r4,-16(fp)
   41838:	e0bff117 	ldw	r2,-60(fp)
   4183c:	100490fa 	slli	r2,r2,3
   41840:	1007883a 	mov	r3,r2
   41844:	e0bfff17 	ldw	r2,-4(fp)
   41848:	1885883a 	add	r2,r3,r2
   4184c:	10800017 	ldw	r2,0(r2)
   41850:	100b883a 	mov	r5,r2
   41854:	0042b780 	call	42b78 <__mulsf3>
   41858:	8809883a 	mov	r4,r17
   4185c:	100b883a 	mov	r5,r2
   41860:	0042b140 	call	42b14 <__addsf3>
   41864:	80800115 	stw	r2,4(r16)
        (Y[upper_leg]).real=temp1.real;
   41868:	e0bff517 	ldw	r2,-44(fp)
   4186c:	100490fa 	slli	r2,r2,3
   41870:	1007883a 	mov	r3,r2
   41874:	e0bffd17 	ldw	r2,-12(fp)
   41878:	1887883a 	add	r3,r3,r2
   4187c:	e0bff917 	ldw	r2,-28(fp)
   41880:	18800015 	stw	r2,0(r3)
        (Y[upper_leg]).imag=temp1.imag;
   41884:	e0bff517 	ldw	r2,-44(fp)
   41888:	100490fa 	slli	r2,r2,3
   4188c:	1007883a 	mov	r3,r2
   41890:	e0bffd17 	ldw	r2,-12(fp)
   41894:	1887883a 	add	r3,r3,r2
   41898:	e0bffa17 	ldw	r2,-24(fp)
   4189c:	18800115 	stw	r2,4(r3)
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
  {
    index=0;
    for (j=0;j<leg_diff;j++)
    {
      for (upper_leg=j;upper_leg<M;upper_leg+=(2*leg_diff))
   418a0:	e0bff317 	ldw	r2,-52(fp)
   418a4:	1085883a 	add	r2,r2,r2
   418a8:	1007883a 	mov	r3,r2
   418ac:	e0bff517 	ldw	r2,-44(fp)
   418b0:	10c5883a 	add	r2,r2,r3
   418b4:	e0bff515 	stw	r2,-44(fp)
   418b8:	e0fff517 	ldw	r3,-44(fp)
   418bc:	e0bffe17 	ldw	r2,-8(fp)
   418c0:	18bf7116 	blt	r3,r2,41688 <fft+0x90>
        (Y[lower_leg]).real=((temp2.real*(w[index]).real-temp2.imag*(w[index]).imag));
        (Y[lower_leg]).imag=((temp2.real*(w[index]).imag+temp2.imag*(w[index]).real));
        (Y[upper_leg]).real=temp1.real;
        (Y[upper_leg]).imag=temp1.imag;
      }
      index+=step;
   418c4:	e0fff117 	ldw	r3,-60(fp)
   418c8:	e0bff017 	ldw	r2,-64(fp)
   418cc:	1885883a 	add	r2,r3,r2
   418d0:	e0bff115 	stw	r2,-60(fp)
  leg_diff=M/2;                 //starting difference between upper & lower legs
  step=2;                     //step between values in twiddle.h              
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
  {
    index=0;
    for (j=0;j<leg_diff;j++)
   418d4:	e0bff717 	ldw	r2,-36(fp)
   418d8:	10800044 	addi	r2,r2,1
   418dc:	e0bff715 	stw	r2,-36(fp)
   418e0:	e0fff717 	ldw	r3,-36(fp)
   418e4:	e0bff317 	ldw	r2,-52(fp)
   418e8:	18bf6416 	blt	r3,r2,4167c <fft+0x84>
        (Y[upper_leg]).real=temp1.real;
        (Y[upper_leg]).imag=temp1.imag;
      }
      index+=step;
    }
    leg_diff=leg_diff/2;
   418ec:	e0fff317 	ldw	r3,-52(fp)
   418f0:	1804d7fa 	srli	r2,r3,31
   418f4:	10c5883a 	add	r2,r2,r3
   418f8:	1005d07a 	srai	r2,r2,1
   418fc:	e0bff315 	stw	r2,-52(fp)
    step*=2;
   41900:	e0bff017 	ldw	r2,-64(fp)
   41904:	1085883a 	add	r2,r2,r2
   41908:	e0bff015 	stw	r2,-64(fp)
    i=i*2;
  } while (i!=M);

  leg_diff=M/2;                 //starting difference between upper & lower legs
  step=2;                     //step between values in twiddle.h              
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
   4190c:	e0bff817 	ldw	r2,-32(fp)
   41910:	10800044 	addi	r2,r2,1
   41914:	e0bff815 	stw	r2,-32(fp)
   41918:	e0fff817 	ldw	r3,-32(fp)
   4191c:	e0bff217 	ldw	r2,-56(fp)
   41920:	18bf5316 	blt	r3,r2,41670 <fft+0x78>
    }
    leg_diff=leg_diff/2;
    step*=2;
  }

  j=0;
   41924:	e03ff715 	stw	zero,-36(fp)
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
   41928:	00800044 	movi	r2,1
   4192c:	e0bff815 	stw	r2,-32(fp)
   41930:	00005006 	br	41a74 <fft+0x47c>
  {
    k=M/2;
   41934:	e0fffe17 	ldw	r3,-8(fp)
   41938:	1804d7fa 	srli	r2,r3,31
   4193c:	10c5883a 	add	r2,r2,r3
   41940:	1005d07a 	srai	r2,r2,1
   41944:	e0bff615 	stw	r2,-40(fp)
    while (k<=j)
   41948:	00000906 	br	41970 <fft+0x378>
    {
      j=j-k;
   4194c:	e0fff717 	ldw	r3,-36(fp)
   41950:	e0bff617 	ldw	r2,-40(fp)
   41954:	1885c83a 	sub	r2,r3,r2
   41958:	e0bff715 	stw	r2,-36(fp)
      k=k/2;
   4195c:	e0fff617 	ldw	r3,-40(fp)
   41960:	1804d7fa 	srli	r2,r3,31
   41964:	10c5883a 	add	r2,r2,r3
   41968:	1005d07a 	srai	r2,r2,1
   4196c:	e0bff615 	stw	r2,-40(fp)

  j=0;
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
  {
    k=M/2;
    while (k<=j)
   41970:	e0fff617 	ldw	r3,-40(fp)
   41974:	e0bff717 	ldw	r2,-36(fp)
   41978:	10fff40e 	bge	r2,r3,4194c <fft+0x354>
    {
      j=j-k;
      k=k/2;
    }
    j=j+k;
   4197c:	e0fff717 	ldw	r3,-36(fp)
   41980:	e0bff617 	ldw	r2,-40(fp)
   41984:	1885883a 	add	r2,r3,r2
   41988:	e0bff715 	stw	r2,-36(fp)
    if (i<j)
   4198c:	e0fff817 	ldw	r3,-32(fp)
   41990:	e0bff717 	ldw	r2,-36(fp)
   41994:	1880340e 	bge	r3,r2,41a68 <fft+0x470>
    {
      temp1.real=(Y[j]).real;
   41998:	e0bff717 	ldw	r2,-36(fp)
   4199c:	100490fa 	slli	r2,r2,3
   419a0:	1007883a 	mov	r3,r2
   419a4:	e0bffd17 	ldw	r2,-12(fp)
   419a8:	1885883a 	add	r2,r3,r2
   419ac:	10800017 	ldw	r2,0(r2)
   419b0:	e0bff915 	stw	r2,-28(fp)
      temp1.imag=(Y[j]).imag;
   419b4:	e0bff717 	ldw	r2,-36(fp)
   419b8:	100490fa 	slli	r2,r2,3
   419bc:	1007883a 	mov	r3,r2
   419c0:	e0bffd17 	ldw	r2,-12(fp)
   419c4:	1885883a 	add	r2,r3,r2
   419c8:	10800117 	ldw	r2,4(r2)
   419cc:	e0bffa15 	stw	r2,-24(fp)
      (Y[j]).real=(Y[i]).real;
   419d0:	e0bff717 	ldw	r2,-36(fp)
   419d4:	100490fa 	slli	r2,r2,3
   419d8:	1007883a 	mov	r3,r2
   419dc:	e0bffd17 	ldw	r2,-12(fp)
   419e0:	1889883a 	add	r4,r3,r2
   419e4:	e0bff817 	ldw	r2,-32(fp)
   419e8:	100490fa 	slli	r2,r2,3
   419ec:	1007883a 	mov	r3,r2
   419f0:	e0bffd17 	ldw	r2,-12(fp)
   419f4:	1885883a 	add	r2,r3,r2
   419f8:	10800017 	ldw	r2,0(r2)
   419fc:	20800015 	stw	r2,0(r4)
      (Y[j]).imag=(Y[i]).imag;
   41a00:	e0bff717 	ldw	r2,-36(fp)
   41a04:	100490fa 	slli	r2,r2,3
   41a08:	1007883a 	mov	r3,r2
   41a0c:	e0bffd17 	ldw	r2,-12(fp)
   41a10:	1889883a 	add	r4,r3,r2
   41a14:	e0bff817 	ldw	r2,-32(fp)
   41a18:	100490fa 	slli	r2,r2,3
   41a1c:	1007883a 	mov	r3,r2
   41a20:	e0bffd17 	ldw	r2,-12(fp)
   41a24:	1885883a 	add	r2,r3,r2
   41a28:	10800117 	ldw	r2,4(r2)
   41a2c:	20800115 	stw	r2,4(r4)
      (Y[i]).real=temp1.real;
   41a30:	e0bff817 	ldw	r2,-32(fp)
   41a34:	100490fa 	slli	r2,r2,3
   41a38:	1007883a 	mov	r3,r2
   41a3c:	e0bffd17 	ldw	r2,-12(fp)
   41a40:	1887883a 	add	r3,r3,r2
   41a44:	e0bff917 	ldw	r2,-28(fp)
   41a48:	18800015 	stw	r2,0(r3)
      (Y[i]).imag=temp1.imag;
   41a4c:	e0bff817 	ldw	r2,-32(fp)
   41a50:	100490fa 	slli	r2,r2,3
   41a54:	1007883a 	mov	r3,r2
   41a58:	e0bffd17 	ldw	r2,-12(fp)
   41a5c:	1887883a 	add	r3,r3,r2
   41a60:	e0bffa17 	ldw	r2,-24(fp)
   41a64:	18800115 	stw	r2,4(r3)
    leg_diff=leg_diff/2;
    step*=2;
  }

  j=0;
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
   41a68:	e0bff817 	ldw	r2,-32(fp)
   41a6c:	10800044 	addi	r2,r2,1
   41a70:	e0bff815 	stw	r2,-32(fp)
   41a74:	e0bffe17 	ldw	r2,-8(fp)
   41a78:	10ffffc4 	addi	r3,r2,-1
   41a7c:	e0bff817 	ldw	r2,-32(fp)
   41a80:	10ffac16 	blt	r2,r3,41934 <fft+0x33c>
      (Y[i]).imag=temp1.imag;
    }
  }

  return;
}                                 //end of fft()
   41a84:	e037883a 	mov	sp,fp
   41a88:	dfc00317 	ldw	ra,12(sp)
   41a8c:	df000217 	ldw	fp,8(sp)
   41a90:	dc400117 	ldw	r17,4(sp)
   41a94:	dc000017 	ldw	r16,0(sp)
   41a98:	dec00404 	addi	sp,sp,16
   41a9c:	f800283a 	ret

00041aa0 <handle_switch0_interrupt>:
short loop = 0;
short sine_table[10]={0,588,951,951,588,0,-588,-951,-951,-588};
int UARTData[256];
// ------------------------------------------------------------

static void handle_switch0_interrupt(void* context, alt_u32 id) {
   41aa0:	defff804 	addi	sp,sp,-32
   41aa4:	df000715 	stw	fp,28(sp)
   41aa8:	df000704 	addi	fp,sp,28
   41aac:	e13ffe15 	stw	r4,-8(fp)
   41ab0:	e17fff15 	stw	r5,-4(fp)
	 volatile int* switch0ptr = (volatile int *)context;
   41ab4:	e0bffe17 	ldw	r2,-8(fp)
   41ab8:	e0bffd15 	stw	r2,-12(fp)
	 *switch0ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE);
   41abc:	00800234 	movhi	r2,8
   41ac0:	10848304 	addi	r2,r2,4620
   41ac4:	10c00037 	ldwio	r3,0(r2)
   41ac8:	e0bffd17 	ldw	r2,-12(fp)
   41acc:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0);
   41ad0:	00800234 	movhi	r2,8
   41ad4:	10848304 	addi	r2,r2,4620
   41ad8:	10000035 	stwio	zero,0(r2)

	 /*Perform Jobs*/
	 alt_irq_enable(leftready_id);
   41adc:	00800174 	movhi	r2,5
   41ae0:	10873f04 	addi	r2,r2,7420
   41ae4:	10800017 	ldw	r2,0(r2)
   41ae8:	e0bffb15 	stw	r2,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41aec:	0005303a 	rdctl	r2,status
   41af0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41af4:	e0fffa17 	ldw	r3,-24(fp)
   41af8:	00bfff84 	movi	r2,-2
   41afc:	1884703a 	and	r2,r3,r2
   41b00:	1001703a 	wrctl	status,r2
  
  return context;
   41b04:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41b08:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   41b0c:	e0fffb17 	ldw	r3,-20(fp)
   41b10:	00800044 	movi	r2,1
   41b14:	10c4983a 	sll	r2,r2,r3
   41b18:	1007883a 	mov	r3,r2
   41b1c:	00800174 	movhi	r2,5
   41b20:	108e6b04 	addi	r2,r2,14764
   41b24:	10800017 	ldw	r2,0(r2)
   41b28:	1886b03a 	or	r3,r3,r2
   41b2c:	00800174 	movhi	r2,5
   41b30:	108e6b04 	addi	r2,r2,14764
   41b34:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41b38:	00800174 	movhi	r2,5
   41b3c:	108e6b04 	addi	r2,r2,14764
   41b40:	10800017 	ldw	r2,0(r2)
   41b44:	100170fa 	wrctl	ienable,r2
   41b48:	e0bffc17 	ldw	r2,-16(fp)
   41b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41b50:	e0bff917 	ldw	r2,-28(fp)
   41b54:	1001703a 	wrctl	status,r2
}
   41b58:	e037883a 	mov	sp,fp
   41b5c:	df000017 	ldw	fp,0(sp)
   41b60:	dec00104 	addi	sp,sp,4
   41b64:	f800283a 	ret

00041b68 <handle_switch1_interrupt>:

static void handle_switch1_interrupt(void* context, alt_u32 id) {
   41b68:	defffc04 	addi	sp,sp,-16
   41b6c:	df000315 	stw	fp,12(sp)
   41b70:	df000304 	addi	fp,sp,12
   41b74:	e13ffe15 	stw	r4,-8(fp)
   41b78:	e17fff15 	stw	r5,-4(fp)
	 volatile int* switch1ptr = (volatile int *)context;
   41b7c:	e0bffe17 	ldw	r2,-8(fp)
   41b80:	e0bffd15 	stw	r2,-12(fp)
	 *switch1ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE);
   41b84:	00800234 	movhi	r2,8
   41b88:	10844704 	addi	r2,r2,4380
   41b8c:	10c00037 	ldwio	r3,0(r2)
   41b90:	e0bffd17 	ldw	r2,-12(fp)
   41b94:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE, 0);
   41b98:	00800234 	movhi	r2,8
   41b9c:	10844704 	addi	r2,r2,4380
   41ba0:	10000035 	stwio	zero,0(r2)

	 /*Perform Jobs*/
}
   41ba4:	e037883a 	mov	sp,fp
   41ba8:	df000017 	ldw	fp,0(sp)
   41bac:	dec00104 	addi	sp,sp,4
   41bb0:	f800283a 	ret

00041bb4 <handle_key0_interrupt>:

/* Enable the flag to send recent
 * channel buffer to host computer.
 */
static void handle_key0_interrupt(void* context, alt_u32 id) {
   41bb4:	defff204 	addi	sp,sp,-56
   41bb8:	dfc00d15 	stw	ra,52(sp)
   41bbc:	df000c15 	stw	fp,48(sp)
   41bc0:	df000c04 	addi	fp,sp,48
   41bc4:	e13ffe15 	stw	r4,-8(fp)
   41bc8:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key0ptr = (volatile int *)context;
   41bcc:	e0bffe17 	ldw	r2,-8(fp)
   41bd0:	e0bffd15 	stw	r2,-12(fp)
	 *key0ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE);
   41bd4:	00800234 	movhi	r2,8
   41bd8:	10847f04 	addi	r2,r2,4604
   41bdc:	10c00037 	ldwio	r3,0(r2)
   41be0:	e0bffd17 	ldw	r2,-12(fp)
   41be4:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE, 0);
   41be8:	00800234 	movhi	r2,8
   41bec:	10847f04 	addi	r2,r2,4604
   41bf0:	10000035 	stwio	zero,0(r2)

	 uartStartSendFlag = 1;
   41bf4:	00c00174 	movhi	r3,5
   41bf8:	18ce5e04 	addi	r3,r3,14712
   41bfc:	00800044 	movi	r2,1
   41c00:	18800015 	stw	r2,0(r3)
	 alt_irq_disable(leftready_id);
   41c04:	00800174 	movhi	r2,5
   41c08:	10873f04 	addi	r2,r2,7420
   41c0c:	10800017 	ldw	r2,0(r2)
   41c10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41c14:	0005303a 	rdctl	r2,status
   41c18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41c1c:	e0fff917 	ldw	r3,-28(fp)
   41c20:	00bfff84 	movi	r2,-2
   41c24:	1884703a 	and	r2,r3,r2
   41c28:	1001703a 	wrctl	status,r2
  
  return context;
   41c2c:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41c30:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   41c34:	e0fffa17 	ldw	r3,-24(fp)
   41c38:	00800044 	movi	r2,1
   41c3c:	10c4983a 	sll	r2,r2,r3
   41c40:	0084303a 	nor	r2,zero,r2
   41c44:	1007883a 	mov	r3,r2
   41c48:	00800174 	movhi	r2,5
   41c4c:	108e6b04 	addi	r2,r2,14764
   41c50:	10800017 	ldw	r2,0(r2)
   41c54:	1886703a 	and	r3,r3,r2
   41c58:	00800174 	movhi	r2,5
   41c5c:	108e6b04 	addi	r2,r2,14764
   41c60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41c64:	00800174 	movhi	r2,5
   41c68:	108e6b04 	addi	r2,r2,14764
   41c6c:	10800017 	ldw	r2,0(r2)
   41c70:	100170fa 	wrctl	ienable,r2
   41c74:	e0bffb17 	ldw	r2,-20(fp)
   41c78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41c7c:	e0bff817 	ldw	r2,-32(fp)
   41c80:	1001703a 	wrctl	status,r2
	 alt_irq_disable(rightready_id);
   41c84:	00800174 	movhi	r2,5
   41c88:	10874004 	addi	r2,r2,7424
   41c8c:	10800017 	ldw	r2,0(r2)
   41c90:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41c94:	0005303a 	rdctl	r2,status
   41c98:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41c9c:	e0fff517 	ldw	r3,-44(fp)
   41ca0:	00bfff84 	movi	r2,-2
   41ca4:	1884703a 	and	r2,r3,r2
   41ca8:	1001703a 	wrctl	status,r2
  
  return context;
   41cac:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41cb0:	e0bff715 	stw	r2,-36(fp)

  alt_irq_active &= ~(1 << id);
   41cb4:	e0fff617 	ldw	r3,-40(fp)
   41cb8:	00800044 	movi	r2,1
   41cbc:	10c4983a 	sll	r2,r2,r3
   41cc0:	0084303a 	nor	r2,zero,r2
   41cc4:	1007883a 	mov	r3,r2
   41cc8:	00800174 	movhi	r2,5
   41ccc:	108e6b04 	addi	r2,r2,14764
   41cd0:	10800017 	ldw	r2,0(r2)
   41cd4:	1886703a 	and	r3,r3,r2
   41cd8:	00800174 	movhi	r2,5
   41cdc:	108e6b04 	addi	r2,r2,14764
   41ce0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41ce4:	00800174 	movhi	r2,5
   41ce8:	108e6b04 	addi	r2,r2,14764
   41cec:	10800017 	ldw	r2,0(r2)
   41cf0:	100170fa 	wrctl	ienable,r2
   41cf4:	e0bff717 	ldw	r2,-36(fp)
   41cf8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41cfc:	e0bff417 	ldw	r2,-48(fp)
   41d00:	1001703a 	wrctl	status,r2

	 // program
	 int i;
	 for (i = 0; i<256; i++) {
   41d04:	e03ffc15 	stw	zero,-16(fp)
   41d08:	00000b06 	br	41d38 <handle_key0_interrupt+0x184>
		uart_sendInt16(UARTData[i]);
   41d0c:	e0bffc17 	ldw	r2,-16(fp)
   41d10:	00c00174 	movhi	r3,5
   41d14:	18d3f104 	addi	r3,r3,20420
   41d18:	1085883a 	add	r2,r2,r2
   41d1c:	1085883a 	add	r2,r2,r2
   41d20:	10c5883a 	add	r2,r2,r3
   41d24:	11000017 	ldw	r4,0(r2)
   41d28:	00425a80 	call	425a8 <uart_sendInt16>
	 alt_irq_disable(leftready_id);
	 alt_irq_disable(rightready_id);

	 // program
	 int i;
	 for (i = 0; i<256; i++) {
   41d2c:	e0bffc17 	ldw	r2,-16(fp)
   41d30:	10800044 	addi	r2,r2,1
   41d34:	e0bffc15 	stw	r2,-16(fp)
   41d38:	e0bffc17 	ldw	r2,-16(fp)
   41d3c:	10804010 	cmplti	r2,r2,256
   41d40:	103ff21e 	bne	r2,zero,41d0c <handle_key0_interrupt+0x158>
		uart_sendInt16(UARTData[i]);
	 }
}
   41d44:	e037883a 	mov	sp,fp
   41d48:	dfc00117 	ldw	ra,4(sp)
   41d4c:	df000017 	ldw	fp,0(sp)
   41d50:	dec00204 	addi	sp,sp,8
   41d54:	f800283a 	ret

00041d58 <handle_key1_interrupt>:

/* Enable the flag to update the
 * ADC sampling frequency on AIC23.
 */
static void handle_key1_interrupt(void* context, alt_u32 id) {
   41d58:	defffc04 	addi	sp,sp,-16
   41d5c:	df000315 	stw	fp,12(sp)
   41d60:	df000304 	addi	fp,sp,12
   41d64:	e13ffe15 	stw	r4,-8(fp)
   41d68:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key1ptr = (volatile int *)context;
   41d6c:	e0bffe17 	ldw	r2,-8(fp)
   41d70:	e0bffd15 	stw	r2,-12(fp)
	 *key1ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE);
   41d74:	00800234 	movhi	r2,8
   41d78:	10847f04 	addi	r2,r2,4604
   41d7c:	10c00037 	ldwio	r3,0(r2)
   41d80:	e0bffd17 	ldw	r2,-12(fp)
   41d84:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY1_BASE, 0);
   41d88:	00800234 	movhi	r2,8
   41d8c:	10845304 	addi	r2,r2,4428
   41d90:	10000035 	stwio	zero,0(r2)

	 //IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH1_BASE, 0x01);
	 setFreqFlag = 1;
   41d94:	00c00174 	movhi	r3,5
   41d98:	18ce6104 	addi	r3,r3,14724
   41d9c:	00800044 	movi	r2,1
   41da0:	18800015 	stw	r2,0(r3)
}
   41da4:	e037883a 	mov	sp,fp
   41da8:	df000017 	ldw	fp,0(sp)
   41dac:	dec00104 	addi	sp,sp,4
   41db0:	f800283a 	ret

00041db4 <handle_key2_interrupt>:

static void handle_key2_interrupt(void* context, alt_u32 id) {
   41db4:	defffc04 	addi	sp,sp,-16
   41db8:	df000315 	stw	fp,12(sp)
   41dbc:	df000304 	addi	fp,sp,12
   41dc0:	e13ffe15 	stw	r4,-8(fp)
   41dc4:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key2ptr = (volatile int *)context;
   41dc8:	e0bffe17 	ldw	r2,-8(fp)
   41dcc:	e0bffd15 	stw	r2,-12(fp)
	 *key2ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE);
   41dd0:	00800234 	movhi	r2,8
   41dd4:	10844f04 	addi	r2,r2,4412
   41dd8:	10c00037 	ldwio	r3,0(r2)
   41ddc:	e0bffd17 	ldw	r2,-12(fp)
   41de0:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE, 0);
   41de4:	00800234 	movhi	r2,8
   41de8:	10844f04 	addi	r2,r2,4412
   41dec:	10000035 	stwio	zero,0(r2)

}
   41df0:	e037883a 	mov	sp,fp
   41df4:	df000017 	ldw	fp,0(sp)
   41df8:	dec00104 	addi	sp,sp,4
   41dfc:	f800283a 	ret

00041e00 <handle_key3_interrupt>:

static void handle_key3_interrupt(void* context, alt_u32 id) {
   41e00:	defffc04 	addi	sp,sp,-16
   41e04:	df000315 	stw	fp,12(sp)
   41e08:	df000304 	addi	fp,sp,12
   41e0c:	e13ffe15 	stw	r4,-8(fp)
   41e10:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key3ptr = (volatile int *)context;
   41e14:	e0bffe17 	ldw	r2,-8(fp)
   41e18:	e0bffd15 	stw	r2,-12(fp)
	 *key3ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE);
   41e1c:	00800234 	movhi	r2,8
   41e20:	10844b04 	addi	r2,r2,4396
   41e24:	10c00037 	ldwio	r3,0(r2)
   41e28:	e0bffd17 	ldw	r2,-12(fp)
   41e2c:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE, 0);
   41e30:	00800234 	movhi	r2,8
   41e34:	10844b04 	addi	r2,r2,4396
   41e38:	10000035 	stwio	zero,0(r2)

	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x10);
   41e3c:	00c00234 	movhi	r3,8
   41e40:	18c48404 	addi	r3,r3,4624
   41e44:	00800404 	movi	r2,16
   41e48:	18800035 	stwio	r2,0(r3)
}
   41e4c:	e037883a 	mov	sp,fp
   41e50:	df000017 	ldw	fp,0(sp)
   41e54:	dec00104 	addi	sp,sp,4
   41e58:	f800283a 	ret

00041e5c <unsigned2signed>:
 *  store in buffer,
 *  instantly play back.
 *
 */

int unsigned2signed(alt_16 unsign){
   41e5c:	defffd04 	addi	sp,sp,-12
   41e60:	df000215 	stw	fp,8(sp)
   41e64:	df000204 	addi	fp,sp,8
   41e68:	e13fff0d 	sth	r4,-4(fp)
	int result;
	if(unsign>32767)
		result = unsign - 65536;
	else
		result = unsign;
   41e6c:	e0bfff0f 	ldh	r2,-4(fp)
   41e70:	e0bffe15 	stw	r2,-8(fp)
	return result;
   41e74:	e0bffe17 	ldw	r2,-8(fp)
}
   41e78:	e037883a 	mov	sp,fp
   41e7c:	df000017 	ldw	fp,0(sp)
   41e80:	dec00104 	addi	sp,sp,4
   41e84:	f800283a 	ret

00041e88 <signed2unsigned>:

alt_16 signed2unsigned(int sign){
   41e88:	defffd04 	addi	sp,sp,-12
   41e8c:	df000215 	stw	fp,8(sp)
   41e90:	df000204 	addi	fp,sp,8
   41e94:	e13fff15 	stw	r4,-4(fp)
	alt_16 result;
	if(sign<0)
   41e98:	e0bfff17 	ldw	r2,-4(fp)
   41e9c:	1004403a 	cmpge	r2,r2,zero
   41ea0:	1000031e 	bne	r2,zero,41eb0 <signed2unsigned+0x28>
		result = sign + 65536;
   41ea4:	e0bfff17 	ldw	r2,-4(fp)
   41ea8:	e0bffe0d 	sth	r2,-8(fp)
   41eac:	00000206 	br	41eb8 <signed2unsigned+0x30>
	else
		result = sign;
   41eb0:	e0bfff17 	ldw	r2,-4(fp)
   41eb4:	e0bffe0d 	sth	r2,-8(fp)
	return result;
   41eb8:	e0bffe0f 	ldh	r2,-8(fp)
}
   41ebc:	e037883a 	mov	sp,fp
   41ec0:	df000017 	ldw	fp,0(sp)
   41ec4:	dec00104 	addi	sp,sp,4
   41ec8:	f800283a 	ret

00041ecc <handle_leftready_interrupt_test>:

static void handle_leftready_interrupt_test(void* context, alt_u32 id) {
   41ecc:	defffa04 	addi	sp,sp,-24
   41ed0:	dfc00515 	stw	ra,20(sp)
   41ed4:	df000415 	stw	fp,16(sp)
   41ed8:	df000404 	addi	fp,sp,16
   41edc:	e13ffd15 	stw	r4,-12(fp)
   41ee0:	e17ffe15 	stw	r5,-8(fp)
	 volatile int* leftreadyptr = (volatile int *)context;
   41ee4:	e0bffd17 	ldw	r2,-12(fp)
   41ee8:	e0bffc15 	stw	r2,-16(fp)
	 *leftreadyptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE);
   41eec:	00800234 	movhi	r2,8
   41ef0:	10842b04 	addi	r2,r2,4268
   41ef4:	10c00037 	ldwio	r3,0(r2)
   41ef8:	e0bffc17 	ldw	r2,-16(fp)
   41efc:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE, 0);
   41f00:	00800234 	movhi	r2,8
   41f04:	10842b04 	addi	r2,r2,4268
   41f08:	10000035 	stwio	zero,0(r2)
	 // --------- Read, playback, store data -----
	 leftChannel = IORD_ALTERA_AVALON_PIO_DATA(LEFTDATA_BASE);
   41f0c:	00800234 	movhi	r2,8
   41f10:	10843004 	addi	r2,r2,4288
   41f14:	10c00037 	ldwio	r3,0(r2)
   41f18:	00800174 	movhi	r2,5
   41f1c:	108e5604 	addi	r2,r2,14680
   41f20:	10c00015 	stw	r3,0(r2)
	 datatest[leftCount] = leftChannel;
   41f24:	00800174 	movhi	r2,5
   41f28:	108e5a04 	addi	r2,r2,14696
   41f2c:	11000017 	ldw	r4,0(r2)
   41f30:	00800174 	movhi	r2,5
   41f34:	108e5604 	addi	r2,r2,14680
   41f38:	10800017 	ldw	r2,0(r2)
   41f3c:	100b883a 	mov	r5,r2
   41f40:	00c00174 	movhi	r3,5
   41f44:	18ce7b04 	addi	r3,r3,14828
   41f48:	2105883a 	add	r2,r4,r4
   41f4c:	10c5883a 	add	r2,r2,r3
   41f50:	1140000d 	sth	r5,0(r2)
	 leftCount = (leftCount+1)%256;
   41f54:	00800174 	movhi	r2,5
   41f58:	108e5a04 	addi	r2,r2,14696
   41f5c:	10800017 	ldw	r2,0(r2)
   41f60:	10c00044 	addi	r3,r2,1
   41f64:	00a00034 	movhi	r2,32768
   41f68:	10803fc4 	addi	r2,r2,255
   41f6c:	1886703a 	and	r3,r3,r2
   41f70:	e0ffff15 	stw	r3,-4(fp)
   41f74:	e0ffff17 	ldw	r3,-4(fp)
   41f78:	1804403a 	cmpge	r2,r3,zero
   41f7c:	10000a1e 	bne	r2,zero,41fa8 <handle_leftready_interrupt_test+0xdc>
   41f80:	e0bfff17 	ldw	r2,-4(fp)
   41f84:	10bfffc4 	addi	r2,r2,-1
   41f88:	e0bfff15 	stw	r2,-4(fp)
   41f8c:	00bfc004 	movi	r2,-256
   41f90:	e0ffff17 	ldw	r3,-4(fp)
   41f94:	1886b03a 	or	r3,r3,r2
   41f98:	e0ffff15 	stw	r3,-4(fp)
   41f9c:	e0bfff17 	ldw	r2,-4(fp)
   41fa0:	10800044 	addi	r2,r2,1
   41fa4:	e0bfff15 	stw	r2,-4(fp)
   41fa8:	e0ffff17 	ldw	r3,-4(fp)
   41fac:	00800174 	movhi	r2,5
   41fb0:	108e5a04 	addi	r2,r2,14696
   41fb4:	10c00015 	stw	r3,0(r2)

	 // sending sine wave to lineOut
	 IOWR_ALTERA_AVALON_PIO_DATA(LEFTSENDDATA_BASE, gain*sine_table[loop]);
   41fb8:	d0a0000b 	ldhu	r2,-32768(gp)
   41fbc:	113fffcc 	andi	r4,r2,65535
   41fc0:	2120001c 	xori	r4,r4,32768
   41fc4:	21200004 	addi	r4,r4,-32768
   41fc8:	d0a7150b 	ldhu	r2,-25516(gp)
   41fcc:	10bfffcc 	andi	r2,r2,65535
   41fd0:	10a0001c 	xori	r2,r2,32768
   41fd4:	10a00004 	addi	r2,r2,-32768
   41fd8:	00c00174 	movhi	r3,5
   41fdc:	18c07104 	addi	r3,r3,452
   41fe0:	1085883a 	add	r2,r2,r2
   41fe4:	10c5883a 	add	r2,r2,r3
   41fe8:	1080000b 	ldhu	r2,0(r2)
   41fec:	10bfffcc 	andi	r2,r2,65535
   41ff0:	10a0001c 	xori	r2,r2,32768
   41ff4:	10a00004 	addi	r2,r2,-32768
   41ff8:	2087383a 	mul	r3,r4,r2
   41ffc:	00800234 	movhi	r2,8
   42000:	10842004 	addi	r2,r2,4224
   42004:	10c00035 	stwio	r3,0(r2)
	 loop = (loop + 1) % 10;
   42008:	d0a7150b 	ldhu	r2,-25516(gp)
   4200c:	10bfffcc 	andi	r2,r2,65535
   42010:	10a0001c 	xori	r2,r2,32768
   42014:	10a00004 	addi	r2,r2,-32768
   42018:	11000044 	addi	r4,r2,1
   4201c:	01400284 	movi	r5,10
   42020:	0042f540 	call	42f54 <__modsi3>
   42024:	d0a7150d 	sth	r2,-25516(gp)
	 //-------------------------------------------
}
   42028:	e037883a 	mov	sp,fp
   4202c:	dfc00117 	ldw	ra,4(sp)
   42030:	df000017 	ldw	fp,0(sp)
   42034:	dec00204 	addi	sp,sp,8
   42038:	f800283a 	ret

0004203c <handle_rightready_interrupt_test>:
/*  Detect right channel ready interrupt and do:
 *  Collect data,
 *  store in buffer,
 *  instantly play back.
 */
static void handle_rightready_interrupt_test(void* context, alt_u32 id) {
   4203c:	defffb04 	addi	sp,sp,-20
   42040:	dfc00415 	stw	ra,16(sp)
   42044:	df000315 	stw	fp,12(sp)
   42048:	df000304 	addi	fp,sp,12
   4204c:	e13ffe15 	stw	r4,-8(fp)
   42050:	e17fff15 	stw	r5,-4(fp)
	 volatile int* rightreadyptr = (volatile int *)context;
   42054:	e0bffe17 	ldw	r2,-8(fp)
   42058:	e0bffd15 	stw	r2,-12(fp)
	 *rightreadyptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE);
   4205c:	00800234 	movhi	r2,8
   42060:	10842704 	addi	r2,r2,4252
   42064:	10c00037 	ldwio	r3,0(r2)
   42068:	e0bffd17 	ldw	r2,-12(fp)
   4206c:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE, 0);
   42070:	00800234 	movhi	r2,8
   42074:	10842704 	addi	r2,r2,4252
   42078:	10000035 	stwio	zero,0(r2)
	 /*******Read, playback, store data*******/
	 rightChannel = IORD_ALTERA_AVALON_PIO_DATA(RIGHTDATA_BASE);
   4207c:	00800234 	movhi	r2,8
   42080:	10842c04 	addi	r2,r2,4272
   42084:	10c00037 	ldwio	r3,0(r2)
   42088:	00800174 	movhi	r2,5
   4208c:	108e5704 	addi	r2,r2,14684
   42090:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(RIGHTSENDDATA_BASE, rightChannel);
   42094:	00800174 	movhi	r2,5
   42098:	108e5704 	addi	r2,r2,14684
   4209c:	10c00017 	ldw	r3,0(r2)
   420a0:	00800234 	movhi	r2,8
   420a4:	10841c04 	addi	r2,r2,4208
   420a8:	10c00035 	stwio	r3,0(r2)
	 rightChannelData[rightCount] = rightChannel;
   420ac:	00800174 	movhi	r2,5
   420b0:	108e5c04 	addi	r2,r2,14704
   420b4:	11000017 	ldw	r4,0(r2)
   420b8:	00800174 	movhi	r2,5
   420bc:	108e5704 	addi	r2,r2,14684
   420c0:	10800017 	ldw	r2,0(r2)
   420c4:	100b883a 	mov	r5,r2
   420c8:	00c00174 	movhi	r3,5
   420cc:	18d4f104 	addi	r3,r3,21444
   420d0:	2105883a 	add	r2,r4,r4
   420d4:	10c5883a 	add	r2,r2,r3
   420d8:	1140000d 	sth	r5,0(r2)
	 rightCount = (rightCount+1) % BUFFERSIZE;
   420dc:	00800174 	movhi	r2,5
   420e0:	108e5c04 	addi	r2,r2,14704
   420e4:	10800017 	ldw	r2,0(r2)
   420e8:	11000044 	addi	r4,r2,1
   420ec:	014006c4 	movi	r5,27
   420f0:	0042f540 	call	42f54 <__modsi3>
   420f4:	1007883a 	mov	r3,r2
   420f8:	00800174 	movhi	r2,5
   420fc:	108e5c04 	addi	r2,r2,14704
   42100:	10c00015 	stw	r3,0(r2)
	 /****************************************/
}
   42104:	e037883a 	mov	sp,fp
   42108:	dfc00117 	ldw	ra,4(sp)
   4210c:	df000017 	ldw	fp,0(sp)
   42110:	dec00204 	addi	sp,sp,8
   42114:	f800283a 	ret

00042118 <system_initialization>:

/*uart object*/
int uart;

/*System initialization function. Should be called before your while(1)*/
void system_initialization(){
   42118:	defffe04 	addi	sp,sp,-8
   4211c:	dfc00115 	stw	ra,4(sp)
   42120:	df000015 	stw	fp,0(sp)
   42124:	d839883a 	mov	fp,sp
	/*Hard-code to 1 right here, you can use ISR
	 *to change the value by yourself
	*/
	uartStartRecvFlag = 1;
   42128:	00800044 	movi	r2,1
   4212c:	d0a72715 	stw	r2,-25444(gp)

	 /*Open Uart port and ready to transmit and receive*/
	 uart = open(UART_NAME, O_ACCMODE);
   42130:	01000174 	movhi	r4,5
   42134:	213f7904 	addi	r4,r4,-540
   42138:	014000c4 	movi	r5,3
   4213c:	004d23c0 	call	4d23c <open>
   42140:	d0a72a15 	stw	r2,-25432(gp)
	 if(!uart){
   42144:	d0a72a17 	ldw	r2,-25432(gp)
   42148:	1004c03a 	cmpne	r2,r2,zero
   4214c:	1000041e 	bne	r2,zero,42160 <system_initialization+0x48>
		 printf("failed to open uart\n");
   42150:	01000174 	movhi	r4,5
   42154:	213f7c04 	addi	r4,r4,-528
   42158:	00436380 	call	43638 <puts>
   4215c:	00000306 	br	4216c <system_initialization+0x54>
		 //return 0;
	 } else {
		 printf("Uart ready!\n");
   42160:	01000174 	movhi	r4,5
   42164:	213f8104 	addi	r4,r4,-508
   42168:	00436380 	call	43638 <puts>
	 }

	 //Interrupts Registrations
	 alt_irq_register(switch0_id, (void *)&switch0, handle_switch0_interrupt);
   4216c:	d1200117 	ldw	r4,-32764(gp)
   42170:	01800134 	movhi	r6,4
   42174:	3186a804 	addi	r6,r6,6816
   42178:	d1671604 	addi	r5,gp,-25512
   4217c:	004cb980 	call	4cb98 <alt_irq_register>
	 alt_irq_register(switch1_id, (void *)&switch1, handle_switch1_interrupt);
   42180:	d1200217 	ldw	r4,-32760(gp)
   42184:	01800134 	movhi	r6,4
   42188:	3186da04 	addi	r6,r6,7016
   4218c:	d1671704 	addi	r5,gp,-25508
   42190:	004cb980 	call	4cb98 <alt_irq_register>
	 alt_irq_register(key0_id, (void *)&key0, handle_key0_interrupt);
   42194:	d1200317 	ldw	r4,-32756(gp)
   42198:	01800134 	movhi	r6,4
   4219c:	3186ed04 	addi	r6,r6,7092
   421a0:	d1671804 	addi	r5,gp,-25504
   421a4:	004cb980 	call	4cb98 <alt_irq_register>
	 alt_irq_register(key1_id, (void *)&key1, handle_key1_interrupt);
   421a8:	d1200417 	ldw	r4,-32752(gp)
   421ac:	01800134 	movhi	r6,4
   421b0:	31875604 	addi	r6,r6,7512
   421b4:	d1671904 	addi	r5,gp,-25500
   421b8:	004cb980 	call	4cb98 <alt_irq_register>
	 alt_irq_register(key2_id, (void *)&key2, handle_key2_interrupt);
   421bc:	d1200517 	ldw	r4,-32748(gp)
   421c0:	01800134 	movhi	r6,4
   421c4:	31876d04 	addi	r6,r6,7604
   421c8:	d1671a04 	addi	r5,gp,-25496
   421cc:	004cb980 	call	4cb98 <alt_irq_register>
	 alt_irq_register(key3_id, (void *)&key3, handle_key3_interrupt);
   421d0:	d1200617 	ldw	r4,-32744(gp)
   421d4:	01800134 	movhi	r6,4
   421d8:	31878004 	addi	r6,r6,7680
   421dc:	d1671b04 	addi	r5,gp,-25492
   421e0:	004cb980 	call	4cb98 <alt_irq_register>
	 alt_irq_register(leftready_id, (void *)&leftready, handle_leftready_interrupt_test);
   421e4:	d1200717 	ldw	r4,-32740(gp)
   421e8:	01800134 	movhi	r6,4
   421ec:	3187b304 	addi	r6,r6,7884
   421f0:	d1671c04 	addi	r5,gp,-25488
   421f4:	004cb980 	call	4cb98 <alt_irq_register>
	 alt_irq_register(rightready_id, (void *)&rightready, handle_rightready_interrupt_test);
   421f8:	d1200817 	ldw	r4,-32736(gp)
   421fc:	01800134 	movhi	r6,4
   42200:	31880f04 	addi	r6,r6,8252
   42204:	d1671d04 	addi	r5,gp,-25484
   42208:	004cb980 	call	4cb98 <alt_irq_register>

	 /*Interrupt enable -> mask to enable it*/
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH0_BASE, 1);
   4220c:	00c00234 	movhi	r3,8
   42210:	18c48204 	addi	r3,r3,4616
   42214:	00800044 	movi	r2,1
   42218:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH1_BASE, 1);
   4221c:	00c00234 	movhi	r3,8
   42220:	18c44604 	addi	r3,r3,4376
   42224:	00800044 	movi	r2,1
   42228:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY0_BASE, 1);
   4222c:	00c00234 	movhi	r3,8
   42230:	18c47e04 	addi	r3,r3,4600
   42234:	00800044 	movi	r2,1
   42238:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY1_BASE, 1);
   4223c:	00c00234 	movhi	r3,8
   42240:	18c45204 	addi	r3,r3,4424
   42244:	00800044 	movi	r2,1
   42248:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY2_BASE, 1);
   4224c:	00c00234 	movhi	r3,8
   42250:	18c44e04 	addi	r3,r3,4408
   42254:	00800044 	movi	r2,1
   42258:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY3_BASE, 1);
   4225c:	00c00234 	movhi	r3,8
   42260:	18c44a04 	addi	r3,r3,4392
   42264:	00800044 	movi	r2,1
   42268:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(LEFTREADY_BASE, 1);
   4226c:	00c00234 	movhi	r3,8
   42270:	18c42a04 	addi	r3,r3,4264
   42274:	00800044 	movi	r2,1
   42278:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(RIGHTREADY_BASE, 1);
   4227c:	00c00234 	movhi	r3,8
   42280:	18c42604 	addi	r3,r3,4248
   42284:	00800044 	movi	r2,1
   42288:	18800035 	stwio	r2,0(r3)

	 /*Reset edge capture bit*/
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0);
   4228c:	00800234 	movhi	r2,8
   42290:	10848304 	addi	r2,r2,4620
   42294:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE, 0);
   42298:	00800234 	movhi	r2,8
   4229c:	10844704 	addi	r2,r2,4380
   422a0:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE, 0);
   422a4:	00800234 	movhi	r2,8
   422a8:	10847f04 	addi	r2,r2,4604
   422ac:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY1_BASE, 0);
   422b0:	00800234 	movhi	r2,8
   422b4:	10845304 	addi	r2,r2,4428
   422b8:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE, 0);
   422bc:	00800234 	movhi	r2,8
   422c0:	10844f04 	addi	r2,r2,4412
   422c4:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE, 0);
   422c8:	00800234 	movhi	r2,8
   422cc:	10844b04 	addi	r2,r2,4396
   422d0:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE, 0);
   422d4:	00800234 	movhi	r2,8
   422d8:	10842b04 	addi	r2,r2,4268
   422dc:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE, 0);
   422e0:	00800234 	movhi	r2,8
   422e4:	10842704 	addi	r2,r2,4252
   422e8:	10000035 	stwio	zero,0(r2)

	 /*turn off all LEDs*/
	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   422ec:	00800234 	movhi	r2,8
   422f0:	10848404 	addi	r2,r2,4624
   422f4:	10000035 	stwio	zero,0(r2)

	 /*initialize SPI transmission*/
	 IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 1); // ~CS low
   422f8:	00c00234 	movhi	r3,8
   422fc:	18c47404 	addi	r3,r3,4560
   42300:	00800044 	movi	r2,1
   42304:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0); // Initialize SCLK to high
   42308:	00800234 	movhi	r2,8
   4230c:	10847004 	addi	r2,r2,4544
   42310:	10000035 	stwio	zero,0(r2)
}
   42314:	e037883a 	mov	sp,fp
   42318:	dfc00117 	ldw	ra,4(sp)
   4231c:	df000017 	ldw	fp,0(sp)
   42320:	dec00204 	addi	sp,sp,8
   42324:	f800283a 	ret

00042328 <main>:
to verify. Also take advantage of the data exporting via UART (see the example in Lecture Note 1 about
transferring a chunk of data to Matlab via UART), use the appropriate Matlab command to plot the 256
most recent output samples in the time domain, as well as the FFT magnitudes of these 256 samples.
 *
 * */
int main(void) {
   42328:	defffc04 	addi	sp,sp,-16
   4232c:	dfc00315 	stw	ra,12(sp)
   42330:	df000215 	stw	fp,8(sp)
   42334:	dc000115 	stw	r16,4(sp)
   42338:	df000104 	addi	fp,sp,4
	 system_initialization();
   4233c:	00421180 	call	42118 <system_initialization>
     // set frequency
	 sampleFrequency = 0x000C; //8k
   42340:	00800304 	movi	r2,12
   42344:	d0a00a15 	stw	r2,-32728(gp)
	 //sampleFrequency = 0x0019; //32k
	 //sampleFrequency = 0x0023; //44.1k
	 //sampleFrequency = 0x0001; //48k
	 aic23_demo[8] = sampleFrequency;
   42348:	d0a00a17 	ldw	r2,-32728(gp)
   4234c:	1007883a 	mov	r3,r2
   42350:	00800174 	movhi	r2,5
   42354:	10807604 	addi	r2,r2,472
   42358:	10c00815 	stw	r3,32(r2)
	 AIC23_demo();
   4235c:	004032c0 	call	4032c <AIC23_demo>

	 int i;
	 for(i=0; i<256; i++){
   42360:	e03fff15 	stw	zero,-4(fp)
   42364:	00001506 	br	423bc <main+0x94>
		 UARTData[i] = sine_table[i%10];
   42368:	e43fff17 	ldw	r16,-4(fp)
   4236c:	e13fff17 	ldw	r4,-4(fp)
   42370:	01400284 	movi	r5,10
   42374:	0042f540 	call	42f54 <__modsi3>
   42378:	00c00174 	movhi	r3,5
   4237c:	18c07104 	addi	r3,r3,452
   42380:	1085883a 	add	r2,r2,r2
   42384:	10c5883a 	add	r2,r2,r3
   42388:	1080000b 	ldhu	r2,0(r2)
   4238c:	113fffcc 	andi	r4,r2,65535
   42390:	2120001c 	xori	r4,r4,32768
   42394:	21200004 	addi	r4,r4,-32768
   42398:	00c00174 	movhi	r3,5
   4239c:	18d3f104 	addi	r3,r3,20420
   423a0:	8405883a 	add	r2,r16,r16
   423a4:	1085883a 	add	r2,r2,r2
   423a8:	10c5883a 	add	r2,r2,r3
   423ac:	11000015 	stw	r4,0(r2)
	 //sampleFrequency = 0x0001; //48k
	 aic23_demo[8] = sampleFrequency;
	 AIC23_demo();

	 int i;
	 for(i=0; i<256; i++){
   423b0:	e0bfff17 	ldw	r2,-4(fp)
   423b4:	10800044 	addi	r2,r2,1
   423b8:	e0bfff15 	stw	r2,-4(fp)
   423bc:	e0bfff17 	ldw	r2,-4(fp)
   423c0:	10804010 	cmplti	r2,r2,256
   423c4:	103fe81e 	bne	r2,zero,42368 <main+0x40>
		 UARTData[i] = sine_table[i%10];
	 }
	 /*Your main infinity while loop*/
	 while(1){
		 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, IORD_ALTERA_AVALON_PIO_DATA(SWITCH0_BASE));
   423c8:	00800234 	movhi	r2,8
   423cc:	10848004 	addi	r2,r2,4608
   423d0:	10c00037 	ldwio	r3,0(r2)
   423d4:	00800234 	movhi	r2,8
   423d8:	10848404 	addi	r2,r2,4624
   423dc:	10c00035 	stwio	r3,0(r2)
	 }
   423e0:	003ff906 	br	423c8 <main+0xa0>

000423e4 <spi_send>:

#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "delay.h"

void spi_send(unsigned int address, unsigned int data){
   423e4:	defffb04 	addi	sp,sp,-20
   423e8:	dfc00415 	stw	ra,16(sp)
   423ec:	df000315 	stw	fp,12(sp)
   423f0:	df000304 	addi	fp,sp,12
   423f4:	e13ffe15 	stw	r4,-8(fp)
   423f8:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
   423fc:	e03ffd15 	stw	zero,-12(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 0); // Begin
   42400:	00800234 	movhi	r2,8
   42404:	10847404 	addi	r2,r2,4560
   42408:	10000035 	stwio	zero,0(r2)
	delay(150);
   4240c:	01002584 	movi	r4,150
   42410:	00411e80 	call	411e8 <delay>
	for(i = 0; i < 7; i++){
   42414:	e03ffd15 	stw	zero,-12(fp)
   42418:	00001f06 	br	42498 <spi_send+0xb4>
		if((address & 0x40) != 0){
   4241c:	e0bffe17 	ldw	r2,-8(fp)
   42420:	1080100c 	andi	r2,r2,64
   42424:	1005003a 	cmpeq	r2,r2,zero
   42428:	1000051e 	bne	r2,zero,42440 <spi_send+0x5c>
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 1);
   4242c:	00c00234 	movhi	r3,8
   42430:	18c46c04 	addi	r3,r3,4528
   42434:	00800044 	movi	r2,1
   42438:	18800035 	stwio	r2,0(r3)
   4243c:	00000306 	br	4244c <spi_send+0x68>
			//printf("1");
		}else{
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 0);
   42440:	00800234 	movhi	r2,8
   42444:	10846c04 	addi	r2,r2,4528
   42448:	10000035 	stwio	zero,0(r2)
			//printf("0");
		}
		delay(1000);
   4244c:	0100fa04 	movi	r4,1000
   42450:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
   42454:	00c00234 	movhi	r3,8
   42458:	18c47004 	addi	r3,r3,4544
   4245c:	00800044 	movi	r2,1
   42460:	18800035 	stwio	r2,0(r3)
		delay(1000);
   42464:	0100fa04 	movi	r4,1000
   42468:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0);
   4246c:	00800234 	movhi	r2,8
   42470:	10847004 	addi	r2,r2,4544
   42474:	10000035 	stwio	zero,0(r2)
		delay(1000);
   42478:	0100fa04 	movi	r4,1000
   4247c:	00411e80 	call	411e8 <delay>

		address <<= 1;
   42480:	e0bffe17 	ldw	r2,-8(fp)
   42484:	1085883a 	add	r2,r2,r2
   42488:	e0bffe15 	stw	r2,-8(fp)
void spi_send(unsigned int address, unsigned int data){
	int i = 0;

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 0); // Begin
	delay(150);
	for(i = 0; i < 7; i++){
   4248c:	e0bffd17 	ldw	r2,-12(fp)
   42490:	10800044 	addi	r2,r2,1
   42494:	e0bffd15 	stw	r2,-12(fp)
   42498:	e0bffd17 	ldw	r2,-12(fp)
   4249c:	108001d0 	cmplti	r2,r2,7
   424a0:	103fde1e 	bne	r2,zero,4241c <spi_send+0x38>
		delay(1000);

		address <<= 1;
	}

	for(i = 0; i < 9; i++){
   424a4:	e03ffd15 	stw	zero,-12(fp)
   424a8:	00001f06 	br	42528 <spi_send+0x144>
		if((data & 0x100) != 0){
   424ac:	e0bfff17 	ldw	r2,-4(fp)
   424b0:	1080400c 	andi	r2,r2,256
   424b4:	1005003a 	cmpeq	r2,r2,zero
   424b8:	1000051e 	bne	r2,zero,424d0 <spi_send+0xec>
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 1);
   424bc:	00c00234 	movhi	r3,8
   424c0:	18c46c04 	addi	r3,r3,4528
   424c4:	00800044 	movi	r2,1
   424c8:	18800035 	stwio	r2,0(r3)
   424cc:	00000306 	br	424dc <spi_send+0xf8>
			//printf("1");
		}else{
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 0);
   424d0:	00800234 	movhi	r2,8
   424d4:	10846c04 	addi	r2,r2,4528
   424d8:	10000035 	stwio	zero,0(r2)
			//printf("0");
		}
		delay(1000);
   424dc:	0100fa04 	movi	r4,1000
   424e0:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
   424e4:	00c00234 	movhi	r3,8
   424e8:	18c47004 	addi	r3,r3,4544
   424ec:	00800044 	movi	r2,1
   424f0:	18800035 	stwio	r2,0(r3)
		delay(1000);
   424f4:	0100fa04 	movi	r4,1000
   424f8:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0);
   424fc:	00800234 	movhi	r2,8
   42500:	10847004 	addi	r2,r2,4544
   42504:	10000035 	stwio	zero,0(r2)
		delay(1000);
   42508:	0100fa04 	movi	r4,1000
   4250c:	00411e80 	call	411e8 <delay>

		data <<= 1;
   42510:	e0bfff17 	ldw	r2,-4(fp)
   42514:	1085883a 	add	r2,r2,r2
   42518:	e0bfff15 	stw	r2,-4(fp)
		delay(1000);

		address <<= 1;
	}

	for(i = 0; i < 9; i++){
   4251c:	e0bffd17 	ldw	r2,-12(fp)
   42520:	10800044 	addi	r2,r2,1
   42524:	e0bffd15 	stw	r2,-12(fp)
   42528:	e0bffd17 	ldw	r2,-12(fp)
   4252c:	10800250 	cmplti	r2,r2,9
   42530:	103fde1e 	bne	r2,zero,424ac <spi_send+0xc8>
		delay(1000);

		data <<= 1;
	}

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 1); // Latches word to AIC
   42534:	00c00234 	movhi	r3,8
   42538:	18c47404 	addi	r3,r3,4560
   4253c:	00800044 	movi	r2,1
   42540:	18800035 	stwio	r2,0(r3)
	//IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
}
   42544:	e037883a 	mov	sp,fp
   42548:	dfc00117 	ldw	ra,4(sp)
   4254c:	df000017 	ldw	fp,0(sp)
   42550:	dec00204 	addi	sp,sp,8
   42554:	f800283a 	ret

00042558 <uart_sendByte>:

int counter = 0;

/*-------------------------- Send data---------------------------*/
/*Send integer value through UART*/
void uart_sendByte(char data){
   42558:	defffd04 	addi	sp,sp,-12
   4255c:	dfc00215 	stw	ra,8(sp)
   42560:	df000115 	stw	fp,4(sp)
   42564:	df000104 	addi	fp,sp,4
   42568:	e13fff05 	stb	r4,-4(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data);
   4256c:	e0ffff07 	ldb	r3,-4(fp)
   42570:	00800234 	movhi	r2,8
   42574:	10840104 	addi	r2,r2,4100
   42578:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY); //not sure about delay parameter
   4257c:	0100e104 	movi	r4,900
   42580:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, '\n');
   42584:	00c00234 	movhi	r3,8
   42588:	18c40104 	addi	r3,r3,4100
   4258c:	00800284 	movi	r2,10
   42590:	18800035 	stwio	r2,0(r3)
}
   42594:	e037883a 	mov	sp,fp
   42598:	dfc00117 	ldw	ra,4(sp)
   4259c:	df000017 	ldw	fp,0(sp)
   425a0:	dec00204 	addi	sp,sp,8
   425a4:	f800283a 	ret

000425a8 <uart_sendInt16>:

/*Send integer value through UART  -> Higher 8 bits first */
void uart_sendInt16(alt_16 data){
   425a8:	defffd04 	addi	sp,sp,-12
   425ac:	dfc00215 	stw	ra,8(sp)
   425b0:	df000115 	stw	fp,4(sp)
   425b4:	df000104 	addi	fp,sp,4
   425b8:	e13fff0d 	sth	r4,-4(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data & 0xFF);
   425bc:	e0bfff0b 	ldhu	r2,-4(fp)
   425c0:	10bfffcc 	andi	r2,r2,65535
   425c4:	10c03fcc 	andi	r3,r2,255
   425c8:	00800234 	movhi	r2,8
   425cc:	10840104 	addi	r2,r2,4100
   425d0:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY);
   425d4:	0100e104 	movi	r4,900
   425d8:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data >> 8);
   425dc:	e0bfff0f 	ldh	r2,-4(fp)
   425e0:	1005d23a 	srai	r2,r2,8
   425e4:	10ffffcc 	andi	r3,r2,65535
   425e8:	18e0001c 	xori	r3,r3,32768
   425ec:	18e00004 	addi	r3,r3,-32768
   425f0:	00800234 	movhi	r2,8
   425f4:	10840104 	addi	r2,r2,4100
   425f8:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY);
   425fc:	0100e104 	movi	r4,900
   42600:	00411e80 	call	411e8 <delay>

}
   42604:	e037883a 	mov	sp,fp
   42608:	dfc00117 	ldw	ra,4(sp)
   4260c:	df000017 	ldw	fp,0(sp)
   42610:	dec00204 	addi	sp,sp,8
   42614:	f800283a 	ret

00042618 <uart_sendFloat>:



void uart_sendFloat(float data){
   42618:	defff804 	addi	sp,sp,-32
   4261c:	dfc00715 	stw	ra,28(sp)
   42620:	df000615 	stw	fp,24(sp)
   42624:	df000604 	addi	fp,sp,24
   42628:	e13fff15 	stw	r4,-4(fp)
	char number[10];
	int i = 0;
   4262c:	e03ffb15 	stw	zero,-20(fp)
	snprintf(number, sizeof(number), "%f", data);
   42630:	e13fff17 	ldw	r4,-4(fp)
   42634:	0042dec0 	call	42dec <__extendsfdf2>
   42638:	1009883a 	mov	r4,r2
   4263c:	180b883a 	mov	r5,r3
   42640:	e0bffc04 	addi	r2,fp,-16
   42644:	d9400015 	stw	r5,0(sp)
   42648:	200f883a 	mov	r7,r4
   4264c:	1009883a 	mov	r4,r2
   42650:	01400284 	movi	r5,10
   42654:	01800174 	movhi	r6,5
   42658:	31bf8404 	addi	r6,r6,-496
   4265c:	004364c0 	call	4364c <snprintf>
	while(i < 10){
   42660:	00000f06 	br	426a0 <uart_sendFloat+0x88>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, number[i]);
   42664:	e0fffb17 	ldw	r3,-20(fp)
   42668:	e0bffc04 	addi	r2,fp,-16
   4266c:	10c5883a 	add	r2,r2,r3
   42670:	10800003 	ldbu	r2,0(r2)
   42674:	10c03fcc 	andi	r3,r2,255
   42678:	18c0201c 	xori	r3,r3,128
   4267c:	18ffe004 	addi	r3,r3,-128
   42680:	00800234 	movhi	r2,8
   42684:	10840104 	addi	r2,r2,4100
   42688:	10c00035 	stwio	r3,0(r2)
		delay(UART_SEND_DELAY); //not sure about delay parameter
   4268c:	0100e104 	movi	r4,900
   42690:	00411e80 	call	411e8 <delay>
		i++;
   42694:	e0bffb17 	ldw	r2,-20(fp)
   42698:	10800044 	addi	r2,r2,1
   4269c:	e0bffb15 	stw	r2,-20(fp)

void uart_sendFloat(float data){
	char number[10];
	int i = 0;
	snprintf(number, sizeof(number), "%f", data);
	while(i < 10){
   426a0:	e0bffb17 	ldw	r2,-20(fp)
   426a4:	10800290 	cmplti	r2,r2,10
   426a8:	103fee1e 	bne	r2,zero,42664 <uart_sendFloat+0x4c>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, number[i]);
		delay(UART_SEND_DELAY); //not sure about delay parameter
		i++;
	}
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, '\n');
   426ac:	00c00234 	movhi	r3,8
   426b0:	18c40104 	addi	r3,r3,4100
   426b4:	00800284 	movi	r2,10
   426b8:	18800035 	stwio	r2,0(r3)

}
   426bc:	e037883a 	mov	sp,fp
   426c0:	dfc00117 	ldw	ra,4(sp)
   426c4:	df000017 	ldw	fp,0(sp)
   426c8:	dec00204 	addi	sp,sp,8
   426cc:	f800283a 	ret

000426d0 <uart_SendLeftBuff>:
//		if (++RxHead > (RX_BUFFER_SIZE-1)) RxHead = 0;
//	}
//}

/*Send the whole buffer to the PC through UART*/
void uart_SendLeftBuff(void){
   426d0:	defffd04 	addi	sp,sp,-12
   426d4:	dfc00215 	stw	ra,8(sp)
   426d8:	df000115 	stw	fp,4(sp)
   426dc:	df000104 	addi	fp,sp,4
	int temp;
	temp = leftCount;
   426e0:	00800174 	movhi	r2,5
   426e4:	108e5a04 	addi	r2,r2,14696
   426e8:	10800017 	ldw	r2,0(r2)
   426ec:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (BUFFERSIZE + temp); counter++){
   426f0:	e0bfff17 	ldw	r2,-4(fp)
   426f4:	d0a72b15 	stw	r2,-25428(gp)
   426f8:	00000f06 	br	42738 <uart_SendLeftBuff+0x68>
		uart_sendInt16(leftChannelData[(counter % BUFFERSIZE)]);
   426fc:	d1272b17 	ldw	r4,-25428(gp)
   42700:	014006c4 	movi	r5,27
   42704:	0042f540 	call	42f54 <__modsi3>
   42708:	00c00174 	movhi	r3,5
   4270c:	18cefb04 	addi	r3,r3,15340
   42710:	1085883a 	add	r2,r2,r2
   42714:	10c5883a 	add	r2,r2,r3
   42718:	1080000b 	ldhu	r2,0(r2)
   4271c:	113fffcc 	andi	r4,r2,65535
   42720:	2120001c 	xori	r4,r4,32768
   42724:	21200004 	addi	r4,r4,-32768
   42728:	00425a80 	call	425a8 <uart_sendInt16>

/*Send the whole buffer to the PC through UART*/
void uart_SendLeftBuff(void){
	int temp;
	temp = leftCount;
	for (counter = temp; counter < (BUFFERSIZE + temp); counter++){
   4272c:	d0a72b17 	ldw	r2,-25428(gp)
   42730:	10800044 	addi	r2,r2,1
   42734:	d0a72b15 	stw	r2,-25428(gp)
   42738:	e0bfff17 	ldw	r2,-4(fp)
   4273c:	10c006c4 	addi	r3,r2,27
   42740:	d0a72b17 	ldw	r2,-25428(gp)
   42744:	10ffed16 	blt	r2,r3,426fc <uart_SendLeftBuff+0x2c>
		uart_sendInt16(leftChannelData[(counter % BUFFERSIZE)]);
	}
}
   42748:	e037883a 	mov	sp,fp
   4274c:	dfc00117 	ldw	ra,4(sp)
   42750:	df000017 	ldw	fp,0(sp)
   42754:	dec00204 	addi	sp,sp,8
   42758:	f800283a 	ret

0004275c <uart_SendTestBuff>:

/*Send the whole testing 1000 data buffer to the PC through UART*/
void uart_SendTestBuff(void){
   4275c:	defffc04 	addi	sp,sp,-16
   42760:	dfc00315 	stw	ra,12(sp)
   42764:	df000215 	stw	fp,8(sp)
   42768:	df000204 	addi	fp,sp,8
	int temp;
	temp = lefttestCount;
   4276c:	00800174 	movhi	r2,5
   42770:	108e5b04 	addi	r2,r2,14700
   42774:	10800017 	ldw	r2,0(r2)
   42778:	e0bffe15 	stw	r2,-8(fp)
	for (counter = temp; counter < (256 + temp); counter++){
   4277c:	e0bffe17 	ldw	r2,-8(fp)
   42780:	d0a72b15 	stw	r2,-25428(gp)
   42784:	00001f06 	br	42804 <uart_SendTestBuff+0xa8>
		uart_sendInt16(datatest[counter % 256]);
   42788:	d0a72b17 	ldw	r2,-25428(gp)
   4278c:	00e00034 	movhi	r3,32768
   42790:	18c03fc4 	addi	r3,r3,255
   42794:	10c4703a 	and	r2,r2,r3
   42798:	e0bfff15 	stw	r2,-4(fp)
   4279c:	e0ffff17 	ldw	r3,-4(fp)
   427a0:	1804403a 	cmpge	r2,r3,zero
   427a4:	10000a1e 	bne	r2,zero,427d0 <uart_SendTestBuff+0x74>
   427a8:	e0bfff17 	ldw	r2,-4(fp)
   427ac:	10bfffc4 	addi	r2,r2,-1
   427b0:	e0bfff15 	stw	r2,-4(fp)
   427b4:	00bfc004 	movi	r2,-256
   427b8:	e0ffff17 	ldw	r3,-4(fp)
   427bc:	1886b03a 	or	r3,r3,r2
   427c0:	e0ffff15 	stw	r3,-4(fp)
   427c4:	e0bfff17 	ldw	r2,-4(fp)
   427c8:	10800044 	addi	r2,r2,1
   427cc:	e0bfff15 	stw	r2,-4(fp)
   427d0:	e0bfff17 	ldw	r2,-4(fp)
   427d4:	00c00174 	movhi	r3,5
   427d8:	18ce7b04 	addi	r3,r3,14828
   427dc:	1085883a 	add	r2,r2,r2
   427e0:	10c5883a 	add	r2,r2,r3
   427e4:	1080000b 	ldhu	r2,0(r2)
   427e8:	113fffcc 	andi	r4,r2,65535
   427ec:	2120001c 	xori	r4,r4,32768
   427f0:	21200004 	addi	r4,r4,-32768
   427f4:	00425a80 	call	425a8 <uart_sendInt16>

/*Send the whole testing 1000 data buffer to the PC through UART*/
void uart_SendTestBuff(void){
	int temp;
	temp = lefttestCount;
	for (counter = temp; counter < (256 + temp); counter++){
   427f8:	d0a72b17 	ldw	r2,-25428(gp)
   427fc:	10800044 	addi	r2,r2,1
   42800:	d0a72b15 	stw	r2,-25428(gp)
   42804:	e0bffe17 	ldw	r2,-8(fp)
   42808:	10c04004 	addi	r3,r2,256
   4280c:	d0a72b17 	ldw	r2,-25428(gp)
   42810:	10ffdd16 	blt	r2,r3,42788 <uart_SendTestBuff+0x2c>
		uart_sendInt16(datatest[counter % 256]);
	}
}
   42814:	e037883a 	mov	sp,fp
   42818:	dfc00117 	ldw	ra,4(sp)
   4281c:	df000017 	ldw	fp,0(sp)
   42820:	dec00204 	addi	sp,sp,8
   42824:	f800283a 	ret

00042828 <uart_SendConvBuff>:

/*Send the whole buffer to the PC through UART*/
void uart_SendConvBuff(void){
   42828:	defffd04 	addi	sp,sp,-12
   4282c:	dfc00215 	stw	ra,8(sp)
   42830:	df000115 	stw	fp,4(sp)
   42834:	df000104 	addi	fp,sp,4
	int temp;
	temp = convIndex;
   42838:	00800174 	movhi	r2,5
   4283c:	108e5804 	addi	r2,r2,14688
   42840:	10800017 	ldw	r2,0(r2)
   42844:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (CONVBUFFSIZE + temp); counter++){
   42848:	e0bfff17 	ldw	r2,-4(fp)
   4284c:	d0a72b15 	stw	r2,-25428(gp)
   42850:	00001206 	br	4289c <uart_SendConvBuff+0x74>
		uart_sendInt16((alt_16)convResultBuffer[counter % (CONVBUFFSIZE)]);
   42854:	d1272b17 	ldw	r4,-25428(gp)
   42858:	0140fa04 	movi	r5,1000
   4285c:	0042f540 	call	42f54 <__modsi3>
   42860:	00c00174 	movhi	r3,5
   42864:	18d00904 	addi	r3,r3,16420
   42868:	1085883a 	add	r2,r2,r2
   4286c:	1085883a 	add	r2,r2,r2
   42870:	10c5883a 	add	r2,r2,r3
   42874:	10800017 	ldw	r2,0(r2)
   42878:	1009883a 	mov	r4,r2
   4287c:	0042d580 	call	42d58 <__fixsfsi>
   42880:	113fffcc 	andi	r4,r2,65535
   42884:	2120001c 	xori	r4,r4,32768
   42888:	21200004 	addi	r4,r4,-32768
   4288c:	00425a80 	call	425a8 <uart_sendInt16>

/*Send the whole buffer to the PC through UART*/
void uart_SendConvBuff(void){
	int temp;
	temp = convIndex;
	for (counter = temp; counter < (CONVBUFFSIZE + temp); counter++){
   42890:	d0a72b17 	ldw	r2,-25428(gp)
   42894:	10800044 	addi	r2,r2,1
   42898:	d0a72b15 	stw	r2,-25428(gp)
   4289c:	e0bfff17 	ldw	r2,-4(fp)
   428a0:	10c0fa04 	addi	r3,r2,1000
   428a4:	d0a72b17 	ldw	r2,-25428(gp)
   428a8:	10ffea16 	blt	r2,r3,42854 <uart_SendConvBuff+0x2c>
		uart_sendInt16((alt_16)convResultBuffer[counter % (CONVBUFFSIZE)]);
	}
}
   428ac:	e037883a 	mov	sp,fp
   428b0:	dfc00117 	ldw	ra,4(sp)
   428b4:	df000017 	ldw	fp,0(sp)
   428b8:	dec00204 	addi	sp,sp,8
   428bc:	f800283a 	ret

000428c0 <_fpadd_parts>:
   428c0:	21c00017 	ldw	r7,0(r4)
   428c4:	02000044 	movi	r8,1
   428c8:	41c0332e 	bgeu	r8,r7,42998 <_fpadd_parts+0xd8>
   428cc:	28800017 	ldw	r2,0(r5)
   428d0:	4080462e 	bgeu	r8,r2,429ec <_fpadd_parts+0x12c>
   428d4:	00c00104 	movi	r3,4
   428d8:	38c06b26 	beq	r7,r3,42a88 <_fpadd_parts+0x1c8>
   428dc:	10c04326 	beq	r2,r3,429ec <_fpadd_parts+0x12c>
   428e0:	00c00084 	movi	r3,2
   428e4:	10c02e26 	beq	r2,r3,429a0 <_fpadd_parts+0xe0>
   428e8:	38c04026 	beq	r7,r3,429ec <_fpadd_parts+0x12c>
   428ec:	22800217 	ldw	r10,8(r4)
   428f0:	28c00217 	ldw	r3,8(r5)
   428f4:	23000317 	ldw	r12,12(r4)
   428f8:	2a400317 	ldw	r9,12(r5)
   428fc:	50cfc83a 	sub	r7,r10,r3
   42900:	3817883a 	mov	r11,r7
   42904:	38004f16 	blt	r7,zero,42a44 <_fpadd_parts+0x184>
   42908:	008007c4 	movi	r2,31
   4290c:	11c03316 	blt	r2,r7,429dc <_fpadd_parts+0x11c>
   42910:	02c0540e 	bge	zero,r11,42a64 <_fpadd_parts+0x1a4>
   42914:	41c4983a 	sll	r2,r8,r7
   42918:	49c6d83a 	srl	r3,r9,r7
   4291c:	10bfffc4 	addi	r2,r2,-1
   42920:	4884703a 	and	r2,r9,r2
   42924:	1004c03a 	cmpne	r2,r2,zero
   42928:	1892b03a 	or	r9,r3,r2
   4292c:	20c00117 	ldw	r3,4(r4)
   42930:	28800117 	ldw	r2,4(r5)
   42934:	18803c26 	beq	r3,r2,42a28 <_fpadd_parts+0x168>
   42938:	18002f26 	beq	r3,zero,429f8 <_fpadd_parts+0x138>
   4293c:	4b05c83a 	sub	r2,r9,r12
   42940:	10004216 	blt	r2,zero,42a4c <_fpadd_parts+0x18c>
   42944:	32800215 	stw	r10,8(r6)
   42948:	30800315 	stw	r2,12(r6)
   4294c:	30000115 	stw	zero,4(r6)
   42950:	31000317 	ldw	r4,12(r6)
   42954:	01d00034 	movhi	r7,16384
   42958:	39ffff84 	addi	r7,r7,-2
   4295c:	20bfffc4 	addi	r2,r4,-1
   42960:	2007883a 	mov	r3,r4
   42964:	38800836 	bltu	r7,r2,42988 <_fpadd_parts+0xc8>
   42968:	31400217 	ldw	r5,8(r6)
   4296c:	18c9883a 	add	r4,r3,r3
   42970:	20bfffc4 	addi	r2,r4,-1
   42974:	297fffc4 	addi	r5,r5,-1
   42978:	2007883a 	mov	r3,r4
   4297c:	38bffb2e 	bgeu	r7,r2,4296c <_fpadd_parts+0xac>
   42980:	31400215 	stw	r5,8(r6)
   42984:	31000315 	stw	r4,12(r6)
   42988:	008000c4 	movi	r2,3
   4298c:	30800015 	stw	r2,0(r6)
   42990:	20001b16 	blt	r4,zero,42a00 <_fpadd_parts+0x140>
   42994:	3009883a 	mov	r4,r6
   42998:	2005883a 	mov	r2,r4
   4299c:	f800283a 	ret
   429a0:	38fffd1e 	bne	r7,r3,42998 <_fpadd_parts+0xd8>
   429a4:	31c00015 	stw	r7,0(r6)
   429a8:	20800117 	ldw	r2,4(r4)
   429ac:	30800115 	stw	r2,4(r6)
   429b0:	20c00217 	ldw	r3,8(r4)
   429b4:	30c00215 	stw	r3,8(r6)
   429b8:	20800317 	ldw	r2,12(r4)
   429bc:	30800315 	stw	r2,12(r6)
   429c0:	20c00117 	ldw	r3,4(r4)
   429c4:	28800117 	ldw	r2,4(r5)
   429c8:	3009883a 	mov	r4,r6
   429cc:	1886703a 	and	r3,r3,r2
   429d0:	2005883a 	mov	r2,r4
   429d4:	30c00115 	stw	r3,4(r6)
   429d8:	f800283a 	ret
   429dc:	1a801716 	blt	r3,r10,42a3c <_fpadd_parts+0x17c>
   429e0:	1815883a 	mov	r10,r3
   429e4:	0019883a 	mov	r12,zero
   429e8:	003fd006 	br	4292c <_fpadd_parts+0x6c>
   429ec:	2809883a 	mov	r4,r5
   429f0:	2005883a 	mov	r2,r4
   429f4:	f800283a 	ret
   429f8:	6245c83a 	sub	r2,r12,r9
   429fc:	003fd006 	br	42940 <_fpadd_parts+0x80>
   42a00:	30800217 	ldw	r2,8(r6)
   42a04:	2006d07a 	srli	r3,r4,1
   42a08:	2100004c 	andi	r4,r4,1
   42a0c:	10800044 	addi	r2,r2,1
   42a10:	1906b03a 	or	r3,r3,r4
   42a14:	3009883a 	mov	r4,r6
   42a18:	30800215 	stw	r2,8(r6)
   42a1c:	2005883a 	mov	r2,r4
   42a20:	30c00315 	stw	r3,12(r6)
   42a24:	f800283a 	ret
   42a28:	4b09883a 	add	r4,r9,r12
   42a2c:	30c00115 	stw	r3,4(r6)
   42a30:	32800215 	stw	r10,8(r6)
   42a34:	31000315 	stw	r4,12(r6)
   42a38:	003fd306 	br	42988 <_fpadd_parts+0xc8>
   42a3c:	0013883a 	mov	r9,zero
   42a40:	003fba06 	br	4292c <_fpadd_parts+0x6c>
   42a44:	01cfc83a 	sub	r7,zero,r7
   42a48:	003faf06 	br	42908 <_fpadd_parts+0x48>
   42a4c:	0089c83a 	sub	r4,zero,r2
   42a50:	00800044 	movi	r2,1
   42a54:	30800115 	stw	r2,4(r6)
   42a58:	32800215 	stw	r10,8(r6)
   42a5c:	31000315 	stw	r4,12(r6)
   42a60:	003fbb06 	br	42950 <_fpadd_parts+0x90>
   42a64:	583fb126 	beq	r11,zero,4292c <_fpadd_parts+0x6c>
   42a68:	41c4983a 	sll	r2,r8,r7
   42a6c:	61c6d83a 	srl	r3,r12,r7
   42a70:	51d5883a 	add	r10,r10,r7
   42a74:	10bfffc4 	addi	r2,r2,-1
   42a78:	6084703a 	and	r2,r12,r2
   42a7c:	1004c03a 	cmpne	r2,r2,zero
   42a80:	1898b03a 	or	r12,r3,r2
   42a84:	003fa906 	br	4292c <_fpadd_parts+0x6c>
   42a88:	11ffc31e 	bne	r2,r7,42998 <_fpadd_parts+0xd8>
   42a8c:	28c00117 	ldw	r3,4(r5)
   42a90:	20800117 	ldw	r2,4(r4)
   42a94:	10ffc026 	beq	r2,r3,42998 <_fpadd_parts+0xd8>
   42a98:	01000174 	movhi	r4,5
   42a9c:	213f8504 	addi	r4,r4,-492
   42aa0:	003fbd06 	br	42998 <_fpadd_parts+0xd8>

00042aa4 <__subsf3>:
   42aa4:	deffef04 	addi	sp,sp,-68
   42aa8:	dcc00f15 	stw	r19,60(sp)
   42aac:	dcc00204 	addi	r19,sp,8
   42ab0:	dc400e15 	stw	r17,56(sp)
   42ab4:	d9000015 	stw	r4,0(sp)
   42ab8:	d9400115 	stw	r5,4(sp)
   42abc:	d809883a 	mov	r4,sp
   42ac0:	980b883a 	mov	r5,r19
   42ac4:	dc400604 	addi	r17,sp,24
   42ac8:	dfc01015 	stw	ra,64(sp)
   42acc:	00431bc0 	call	431bc <__unpack_f>
   42ad0:	d9000104 	addi	r4,sp,4
   42ad4:	880b883a 	mov	r5,r17
   42ad8:	00431bc0 	call	431bc <__unpack_f>
   42adc:	d8800717 	ldw	r2,28(sp)
   42ae0:	9809883a 	mov	r4,r19
   42ae4:	880b883a 	mov	r5,r17
   42ae8:	d9800a04 	addi	r6,sp,40
   42aec:	1080005c 	xori	r2,r2,1
   42af0:	d8800715 	stw	r2,28(sp)
   42af4:	00428c00 	call	428c0 <_fpadd_parts>
   42af8:	1009883a 	mov	r4,r2
   42afc:	004305c0 	call	4305c <__pack_f>
   42b00:	dfc01017 	ldw	ra,64(sp)
   42b04:	dcc00f17 	ldw	r19,60(sp)
   42b08:	dc400e17 	ldw	r17,56(sp)
   42b0c:	dec01104 	addi	sp,sp,68
   42b10:	f800283a 	ret

00042b14 <__addsf3>:
   42b14:	deffef04 	addi	sp,sp,-68
   42b18:	dcc00f15 	stw	r19,60(sp)
   42b1c:	dcc00204 	addi	r19,sp,8
   42b20:	dc400e15 	stw	r17,56(sp)
   42b24:	d9000015 	stw	r4,0(sp)
   42b28:	d9400115 	stw	r5,4(sp)
   42b2c:	d809883a 	mov	r4,sp
   42b30:	980b883a 	mov	r5,r19
   42b34:	dc400604 	addi	r17,sp,24
   42b38:	dfc01015 	stw	ra,64(sp)
   42b3c:	00431bc0 	call	431bc <__unpack_f>
   42b40:	d9000104 	addi	r4,sp,4
   42b44:	880b883a 	mov	r5,r17
   42b48:	00431bc0 	call	431bc <__unpack_f>
   42b4c:	d9800a04 	addi	r6,sp,40
   42b50:	9809883a 	mov	r4,r19
   42b54:	880b883a 	mov	r5,r17
   42b58:	00428c00 	call	428c0 <_fpadd_parts>
   42b5c:	1009883a 	mov	r4,r2
   42b60:	004305c0 	call	4305c <__pack_f>
   42b64:	dfc01017 	ldw	ra,64(sp)
   42b68:	dcc00f17 	ldw	r19,60(sp)
   42b6c:	dc400e17 	ldw	r17,56(sp)
   42b70:	dec01104 	addi	sp,sp,68
   42b74:	f800283a 	ret

00042b78 <__mulsf3>:
   42b78:	deffef04 	addi	sp,sp,-68
   42b7c:	dc400f15 	stw	r17,60(sp)
   42b80:	dc400204 	addi	r17,sp,8
   42b84:	dc000e15 	stw	r16,56(sp)
   42b88:	d9000015 	stw	r4,0(sp)
   42b8c:	d9400115 	stw	r5,4(sp)
   42b90:	d809883a 	mov	r4,sp
   42b94:	880b883a 	mov	r5,r17
   42b98:	dc000604 	addi	r16,sp,24
   42b9c:	dfc01015 	stw	ra,64(sp)
   42ba0:	00431bc0 	call	431bc <__unpack_f>
   42ba4:	d9000104 	addi	r4,sp,4
   42ba8:	800b883a 	mov	r5,r16
   42bac:	00431bc0 	call	431bc <__unpack_f>
   42bb0:	d9000217 	ldw	r4,8(sp)
   42bb4:	00800044 	movi	r2,1
   42bb8:	01400104 	movi	r5,4
   42bbc:	1100142e 	bgeu	r2,r4,42c10 <__mulsf3+0x98>
   42bc0:	d8c00617 	ldw	r3,24(sp)
   42bc4:	10c0052e 	bgeu	r2,r3,42bdc <__mulsf3+0x64>
   42bc8:	21400f26 	beq	r4,r5,42c08 <__mulsf3+0x90>
   42bcc:	19405d26 	beq	r3,r5,42d44 <__mulsf3+0x1cc>
   42bd0:	00800084 	movi	r2,2
   42bd4:	20800e26 	beq	r4,r2,42c10 <__mulsf3+0x98>
   42bd8:	1880181e 	bne	r3,r2,42c3c <__mulsf3+0xc4>
   42bdc:	d8c00717 	ldw	r3,28(sp)
   42be0:	d8800317 	ldw	r2,12(sp)
   42be4:	8009883a 	mov	r4,r16
   42be8:	10c4c03a 	cmpne	r2,r2,r3
   42bec:	d8800715 	stw	r2,28(sp)
   42bf0:	004305c0 	call	4305c <__pack_f>
   42bf4:	dfc01017 	ldw	ra,64(sp)
   42bf8:	dc400f17 	ldw	r17,60(sp)
   42bfc:	dc000e17 	ldw	r16,56(sp)
   42c00:	dec01104 	addi	sp,sp,68
   42c04:	f800283a 	ret
   42c08:	00800084 	movi	r2,2
   42c0c:	18804f26 	beq	r3,r2,42d4c <__mulsf3+0x1d4>
   42c10:	d8800317 	ldw	r2,12(sp)
   42c14:	d8c00717 	ldw	r3,28(sp)
   42c18:	8809883a 	mov	r4,r17
   42c1c:	10c4c03a 	cmpne	r2,r2,r3
   42c20:	d8800315 	stw	r2,12(sp)
   42c24:	004305c0 	call	4305c <__pack_f>
   42c28:	dfc01017 	ldw	ra,64(sp)
   42c2c:	dc400f17 	ldw	r17,60(sp)
   42c30:	dc000e17 	ldw	r16,56(sp)
   42c34:	dec01104 	addi	sp,sp,68
   42c38:	f800283a 	ret
   42c3c:	d8800517 	ldw	r2,20(sp)
   42c40:	da000917 	ldw	r8,36(sp)
   42c44:	0013883a 	mov	r9,zero
   42c48:	0007883a 	mov	r3,zero
   42c4c:	480f883a 	mov	r7,r9
   42c50:	180b883a 	mov	r5,r3
   42c54:	400d883a 	mov	r6,r8
   42c58:	1009883a 	mov	r4,r2
   42c5c:	0042fc40 	call	42fc4 <__muldi3>
   42c60:	da800417 	ldw	r10,16(sp)
   42c64:	d9800817 	ldw	r6,32(sp)
   42c68:	da400317 	ldw	r9,12(sp)
   42c6c:	52800084 	addi	r10,r10,2
   42c70:	3295883a 	add	r10,r6,r10
   42c74:	d9800717 	ldw	r6,28(sp)
   42c78:	180b883a 	mov	r5,r3
   42c7c:	180f883a 	mov	r7,r3
   42c80:	4992c03a 	cmpne	r9,r9,r6
   42c84:	da400b15 	stw	r9,44(sp)
   42c88:	1007883a 	mov	r3,r2
   42c8c:	da800c15 	stw	r10,48(sp)
   42c90:	2800070e 	bge	r5,zero,42cb0 <__mulsf3+0x138>
   42c94:	2880004c 	andi	r2,r5,1
   42c98:	1005003a 	cmpeq	r2,r2,zero
   42c9c:	500d883a 	mov	r6,r10
   42ca0:	10001e26 	beq	r2,zero,42d1c <__mulsf3+0x1a4>
   42ca4:	380ed07a 	srli	r7,r7,1
   42ca8:	31800044 	addi	r6,r6,1
   42cac:	d9800c15 	stw	r6,48(sp)
   42cb0:	01100034 	movhi	r4,16384
   42cb4:	213fffc4 	addi	r4,r4,-1
   42cb8:	21c00b36 	bltu	r4,r7,42ce8 <__mulsf3+0x170>
   42cbc:	d8800c17 	ldw	r2,48(sp)
   42cc0:	00000206 	br	42ccc <__mulsf3+0x154>
   42cc4:	18c7883a 	add	r3,r3,r3
   42cc8:	21c00636 	bltu	r4,r7,42ce4 <__mulsf3+0x16c>
   42ccc:	10bfffc4 	addi	r2,r2,-1
   42cd0:	39cf883a 	add	r7,r7,r7
   42cd4:	183ffb0e 	bge	r3,zero,42cc4 <__mulsf3+0x14c>
   42cd8:	39c00054 	ori	r7,r7,1
   42cdc:	18c7883a 	add	r3,r3,r3
   42ce0:	21fffa2e 	bgeu	r4,r7,42ccc <__mulsf3+0x154>
   42ce4:	d8800c15 	stw	r2,48(sp)
   42ce8:	39001fcc 	andi	r4,r7,127
   42cec:	00801004 	movi	r2,64
   42cf0:	20800d26 	beq	r4,r2,42d28 <__mulsf3+0x1b0>
   42cf4:	008000c4 	movi	r2,3
   42cf8:	d9000a04 	addi	r4,sp,40
   42cfc:	d9c00d15 	stw	r7,52(sp)
   42d00:	d8800a15 	stw	r2,40(sp)
   42d04:	004305c0 	call	4305c <__pack_f>
   42d08:	dfc01017 	ldw	ra,64(sp)
   42d0c:	dc400f17 	ldw	r17,60(sp)
   42d10:	dc000e17 	ldw	r16,56(sp)
   42d14:	dec01104 	addi	sp,sp,68
   42d18:	f800283a 	ret
   42d1c:	1804d07a 	srli	r2,r3,1
   42d20:	10e00034 	orhi	r3,r2,32768
   42d24:	003fdf06 	br	42ca4 <__mulsf3+0x12c>
   42d28:	3880200c 	andi	r2,r7,128
   42d2c:	103ff11e 	bne	r2,zero,42cf4 <__mulsf3+0x17c>
   42d30:	183ff026 	beq	r3,zero,42cf4 <__mulsf3+0x17c>
   42d34:	3907883a 	add	r3,r7,r4
   42d38:	00bfe004 	movi	r2,-128
   42d3c:	188e703a 	and	r7,r3,r2
   42d40:	003fec06 	br	42cf4 <__mulsf3+0x17c>
   42d44:	00800084 	movi	r2,2
   42d48:	20bfa41e 	bne	r4,r2,42bdc <__mulsf3+0x64>
   42d4c:	01000174 	movhi	r4,5
   42d50:	213f8504 	addi	r4,r4,-492
   42d54:	003fb306 	br	42c24 <__mulsf3+0xac>

00042d58 <__fixsfsi>:
   42d58:	defffa04 	addi	sp,sp,-24
   42d5c:	d9000015 	stw	r4,0(sp)
   42d60:	d9400104 	addi	r5,sp,4
   42d64:	d809883a 	mov	r4,sp
   42d68:	dfc00515 	stw	ra,20(sp)
   42d6c:	00431bc0 	call	431bc <__unpack_f>
   42d70:	d8c00117 	ldw	r3,4(sp)
   42d74:	00800084 	movi	r2,2
   42d78:	1880041e 	bne	r3,r2,42d8c <__fixsfsi+0x34>
   42d7c:	0005883a 	mov	r2,zero
   42d80:	dfc00517 	ldw	ra,20(sp)
   42d84:	dec00604 	addi	sp,sp,24
   42d88:	f800283a 	ret
   42d8c:	00800044 	movi	r2,1
   42d90:	10fffa2e 	bgeu	r2,r3,42d7c <__fixsfsi+0x24>
   42d94:	00800104 	movi	r2,4
   42d98:	18800426 	beq	r3,r2,42dac <__fixsfsi+0x54>
   42d9c:	d8800317 	ldw	r2,12(sp)
   42da0:	103ff616 	blt	r2,zero,42d7c <__fixsfsi+0x24>
   42da4:	00c00784 	movi	r3,30
   42da8:	1880070e 	bge	r3,r2,42dc8 <__fixsfsi+0x70>
   42dac:	d8800217 	ldw	r2,8(sp)
   42db0:	10000c1e 	bne	r2,zero,42de4 <__fixsfsi+0x8c>
   42db4:	00a00034 	movhi	r2,32768
   42db8:	10bfffc4 	addi	r2,r2,-1
   42dbc:	dfc00517 	ldw	ra,20(sp)
   42dc0:	dec00604 	addi	sp,sp,24
   42dc4:	f800283a 	ret
   42dc8:	1885c83a 	sub	r2,r3,r2
   42dcc:	d9000217 	ldw	r4,8(sp)
   42dd0:	d8c00417 	ldw	r3,16(sp)
   42dd4:	1884d83a 	srl	r2,r3,r2
   42dd8:	203fe926 	beq	r4,zero,42d80 <__fixsfsi+0x28>
   42ddc:	0085c83a 	sub	r2,zero,r2
   42de0:	003fe706 	br	42d80 <__fixsfsi+0x28>
   42de4:	00a00034 	movhi	r2,32768
   42de8:	003fe506 	br	42d80 <__fixsfsi+0x28>

00042dec <__extendsfdf2>:
   42dec:	defff904 	addi	sp,sp,-28
   42df0:	d9000115 	stw	r4,4(sp)
   42df4:	d9400204 	addi	r5,sp,8
   42df8:	d9000104 	addi	r4,sp,4
   42dfc:	dfc00615 	stw	ra,24(sp)
   42e00:	00431bc0 	call	431bc <__unpack_f>
   42e04:	d9c00517 	ldw	r7,20(sp)
   42e08:	0011883a 	mov	r8,zero
   42e0c:	400697ba 	slli	r3,r8,30
   42e10:	3812d0ba 	srli	r9,r7,2
   42e14:	380497ba 	slli	r2,r7,30
   42e18:	d9000217 	ldw	r4,8(sp)
   42e1c:	d9400317 	ldw	r5,12(sp)
   42e20:	d9800417 	ldw	r6,16(sp)
   42e24:	48c6b03a 	or	r3,r9,r3
   42e28:	100f883a 	mov	r7,r2
   42e2c:	d8c00015 	stw	r3,0(sp)
   42e30:	0042e400 	call	42e40 <__make_dp>
   42e34:	dfc00617 	ldw	ra,24(sp)
   42e38:	dec00704 	addi	sp,sp,28
   42e3c:	f800283a 	ret

00042e40 <__make_dp>:
   42e40:	defff904 	addi	sp,sp,-28
   42e44:	d8c00717 	ldw	r3,28(sp)
   42e48:	d9000015 	stw	r4,0(sp)
   42e4c:	d809883a 	mov	r4,sp
   42e50:	dfc00515 	stw	ra,20(sp)
   42e54:	d9c00615 	stw	r7,24(sp)
   42e58:	d9400115 	stw	r5,4(sp)
   42e5c:	d9800215 	stw	r6,8(sp)
   42e60:	d8c00415 	stw	r3,16(sp)
   42e64:	d9c00315 	stw	r7,12(sp)
   42e68:	00432840 	call	43284 <__pack_d>
   42e6c:	dfc00517 	ldw	ra,20(sp)
   42e70:	dec00704 	addi	sp,sp,28
   42e74:	f800283a 	ret

00042e78 <udivmodsi4>:
   42e78:	29001b2e 	bgeu	r5,r4,42ee8 <udivmodsi4+0x70>
   42e7c:	28001a16 	blt	r5,zero,42ee8 <udivmodsi4+0x70>
   42e80:	00800044 	movi	r2,1
   42e84:	0007883a 	mov	r3,zero
   42e88:	01c007c4 	movi	r7,31
   42e8c:	00000306 	br	42e9c <udivmodsi4+0x24>
   42e90:	19c01326 	beq	r3,r7,42ee0 <udivmodsi4+0x68>
   42e94:	18c00044 	addi	r3,r3,1
   42e98:	28000416 	blt	r5,zero,42eac <udivmodsi4+0x34>
   42e9c:	294b883a 	add	r5,r5,r5
   42ea0:	1085883a 	add	r2,r2,r2
   42ea4:	293ffa36 	bltu	r5,r4,42e90 <udivmodsi4+0x18>
   42ea8:	10000d26 	beq	r2,zero,42ee0 <udivmodsi4+0x68>
   42eac:	0007883a 	mov	r3,zero
   42eb0:	21400236 	bltu	r4,r5,42ebc <udivmodsi4+0x44>
   42eb4:	2149c83a 	sub	r4,r4,r5
   42eb8:	1886b03a 	or	r3,r3,r2
   42ebc:	1004d07a 	srli	r2,r2,1
   42ec0:	280ad07a 	srli	r5,r5,1
   42ec4:	103ffa1e 	bne	r2,zero,42eb0 <udivmodsi4+0x38>
   42ec8:	30000226 	beq	r6,zero,42ed4 <udivmodsi4+0x5c>
   42ecc:	2005883a 	mov	r2,r4
   42ed0:	f800283a 	ret
   42ed4:	1809883a 	mov	r4,r3
   42ed8:	2005883a 	mov	r2,r4
   42edc:	f800283a 	ret
   42ee0:	0007883a 	mov	r3,zero
   42ee4:	003ff806 	br	42ec8 <udivmodsi4+0x50>
   42ee8:	00800044 	movi	r2,1
   42eec:	0007883a 	mov	r3,zero
   42ef0:	003fef06 	br	42eb0 <udivmodsi4+0x38>

00042ef4 <__divsi3>:
   42ef4:	defffe04 	addi	sp,sp,-8
   42ef8:	dc000015 	stw	r16,0(sp)
   42efc:	dfc00115 	stw	ra,4(sp)
   42f00:	0021883a 	mov	r16,zero
   42f04:	20000c16 	blt	r4,zero,42f38 <__divsi3+0x44>
   42f08:	000d883a 	mov	r6,zero
   42f0c:	28000e16 	blt	r5,zero,42f48 <__divsi3+0x54>
   42f10:	0042e780 	call	42e78 <udivmodsi4>
   42f14:	1007883a 	mov	r3,r2
   42f18:	8005003a 	cmpeq	r2,r16,zero
   42f1c:	1000011e 	bne	r2,zero,42f24 <__divsi3+0x30>
   42f20:	00c7c83a 	sub	r3,zero,r3
   42f24:	1805883a 	mov	r2,r3
   42f28:	dfc00117 	ldw	ra,4(sp)
   42f2c:	dc000017 	ldw	r16,0(sp)
   42f30:	dec00204 	addi	sp,sp,8
   42f34:	f800283a 	ret
   42f38:	0109c83a 	sub	r4,zero,r4
   42f3c:	04000044 	movi	r16,1
   42f40:	000d883a 	mov	r6,zero
   42f44:	283ff20e 	bge	r5,zero,42f10 <__divsi3+0x1c>
   42f48:	014bc83a 	sub	r5,zero,r5
   42f4c:	8021003a 	cmpeq	r16,r16,zero
   42f50:	003fef06 	br	42f10 <__divsi3+0x1c>

00042f54 <__modsi3>:
   42f54:	deffff04 	addi	sp,sp,-4
   42f58:	dfc00015 	stw	ra,0(sp)
   42f5c:	01800044 	movi	r6,1
   42f60:	2807883a 	mov	r3,r5
   42f64:	20000416 	blt	r4,zero,42f78 <__modsi3+0x24>
   42f68:	28000c16 	blt	r5,zero,42f9c <__modsi3+0x48>
   42f6c:	dfc00017 	ldw	ra,0(sp)
   42f70:	dec00104 	addi	sp,sp,4
   42f74:	0042e781 	jmpi	42e78 <udivmodsi4>
   42f78:	0109c83a 	sub	r4,zero,r4
   42f7c:	28000b16 	blt	r5,zero,42fac <__modsi3+0x58>
   42f80:	180b883a 	mov	r5,r3
   42f84:	01800044 	movi	r6,1
   42f88:	0042e780 	call	42e78 <udivmodsi4>
   42f8c:	0085c83a 	sub	r2,zero,r2
   42f90:	dfc00017 	ldw	ra,0(sp)
   42f94:	dec00104 	addi	sp,sp,4
   42f98:	f800283a 	ret
   42f9c:	014bc83a 	sub	r5,zero,r5
   42fa0:	dfc00017 	ldw	ra,0(sp)
   42fa4:	dec00104 	addi	sp,sp,4
   42fa8:	0042e781 	jmpi	42e78 <udivmodsi4>
   42fac:	0147c83a 	sub	r3,zero,r5
   42fb0:	003ff306 	br	42f80 <__modsi3+0x2c>

00042fb4 <__udivsi3>:
   42fb4:	000d883a 	mov	r6,zero
   42fb8:	0042e781 	jmpi	42e78 <udivmodsi4>

00042fbc <__umodsi3>:
   42fbc:	01800044 	movi	r6,1
   42fc0:	0042e781 	jmpi	42e78 <udivmodsi4>

00042fc4 <__muldi3>:
   42fc4:	2011883a 	mov	r8,r4
   42fc8:	427fffcc 	andi	r9,r8,65535
   42fcc:	4018d43a 	srli	r12,r8,16
   42fd0:	32bfffcc 	andi	r10,r6,65535
   42fd4:	3016d43a 	srli	r11,r6,16
   42fd8:	4a85383a 	mul	r2,r9,r10
   42fdc:	6295383a 	mul	r10,r12,r10
   42fe0:	4ad3383a 	mul	r9,r9,r11
   42fe4:	113fffcc 	andi	r4,r2,65535
   42fe8:	1004d43a 	srli	r2,r2,16
   42fec:	4a93883a 	add	r9,r9,r10
   42ff0:	3807883a 	mov	r3,r7
   42ff4:	1245883a 	add	r2,r2,r9
   42ff8:	280f883a 	mov	r7,r5
   42ffc:	180b883a 	mov	r5,r3
   43000:	1006943a 	slli	r3,r2,16
   43004:	defffd04 	addi	sp,sp,-12
   43008:	dc800215 	stw	r18,8(sp)
   4300c:	1907883a 	add	r3,r3,r4
   43010:	dc400115 	stw	r17,4(sp)
   43014:	dc000015 	stw	r16,0(sp)
   43018:	4165383a 	mul	r18,r8,r5
   4301c:	31e3383a 	mul	r17,r6,r7
   43020:	1012d43a 	srli	r9,r2,16
   43024:	62d9383a 	mul	r12,r12,r11
   43028:	181f883a 	mov	r15,r3
   4302c:	1280022e 	bgeu	r2,r10,43038 <__muldi3+0x74>
   43030:	00800074 	movhi	r2,1
   43034:	6099883a 	add	r12,r12,r2
   43038:	624d883a 	add	r6,r12,r9
   4303c:	9187883a 	add	r3,r18,r6
   43040:	88c7883a 	add	r3,r17,r3
   43044:	7805883a 	mov	r2,r15
   43048:	dc800217 	ldw	r18,8(sp)
   4304c:	dc400117 	ldw	r17,4(sp)
   43050:	dc000017 	ldw	r16,0(sp)
   43054:	dec00304 	addi	sp,sp,12
   43058:	f800283a 	ret

0004305c <__pack_f>:
   4305c:	20c00017 	ldw	r3,0(r4)
   43060:	01c00044 	movi	r7,1
   43064:	21800317 	ldw	r6,12(r4)
   43068:	21400117 	ldw	r5,4(r4)
   4306c:	38c02d2e 	bgeu	r7,r3,43124 <__pack_f+0xc8>
   43070:	00800104 	movi	r2,4
   43074:	18802826 	beq	r3,r2,43118 <__pack_f+0xbc>
   43078:	00800084 	movi	r2,2
   4307c:	18800126 	beq	r3,r2,43084 <__pack_f+0x28>
   43080:	3000101e 	bne	r6,zero,430c4 <__pack_f+0x68>
   43084:	000d883a 	mov	r6,zero
   43088:	0007883a 	mov	r3,zero
   4308c:	19003fcc 	andi	r4,r3,255
   43090:	200895fa 	slli	r4,r4,23
   43094:	00c02034 	movhi	r3,128
   43098:	18ffffc4 	addi	r3,r3,-1
   4309c:	30c6703a 	and	r3,r6,r3
   430a0:	10a0002c 	andhi	r2,r2,32768
   430a4:	10c4b03a 	or	r2,r2,r3
   430a8:	280a97fa 	slli	r5,r5,31
   430ac:	1104b03a 	or	r2,r2,r4
   430b0:	00e00034 	movhi	r3,32768
   430b4:	18ffffc4 	addi	r3,r3,-1
   430b8:	10c4703a 	and	r2,r2,r3
   430bc:	1144b03a 	or	r2,r2,r5
   430c0:	f800283a 	ret
   430c4:	21000217 	ldw	r4,8(r4)
   430c8:	00bfe084 	movi	r2,-126
   430cc:	20801b16 	blt	r4,r2,4313c <__pack_f+0xe0>
   430d0:	00801fc4 	movi	r2,127
   430d4:	11001016 	blt	r2,r4,43118 <__pack_f+0xbc>
   430d8:	308e703a 	and	r7,r6,r2
   430dc:	2087883a 	add	r3,r4,r2
   430e0:	00801004 	movi	r2,64
   430e4:	38800526 	beq	r7,r2,430fc <__pack_f+0xa0>
   430e8:	31800fc4 	addi	r6,r6,63
   430ec:	30000716 	blt	r6,zero,4310c <__pack_f+0xb0>
   430f0:	300490ba 	slli	r2,r6,2
   430f4:	100cd27a 	srli	r6,r2,9
   430f8:	003fe406 	br	4308c <__pack_f+0x30>
   430fc:	3080200c 	andi	r2,r6,128
   43100:	103ffa26 	beq	r2,zero,430ec <__pack_f+0x90>
   43104:	31cd883a 	add	r6,r6,r7
   43108:	003ff806 	br	430ec <__pack_f+0x90>
   4310c:	300cd07a 	srli	r6,r6,1
   43110:	18c00044 	addi	r3,r3,1
   43114:	003ff606 	br	430f0 <__pack_f+0x94>
   43118:	000d883a 	mov	r6,zero
   4311c:	00ffffc4 	movi	r3,-1
   43120:	003fda06 	br	4308c <__pack_f+0x30>
   43124:	31800434 	orhi	r6,r6,16
   43128:	00802034 	movhi	r2,128
   4312c:	10bfffc4 	addi	r2,r2,-1
   43130:	308c703a 	and	r6,r6,r2
   43134:	00ffffc4 	movi	r3,-1
   43138:	003fd406 	br	4308c <__pack_f+0x30>
   4313c:	1109c83a 	sub	r4,r2,r4
   43140:	00800644 	movi	r2,25
   43144:	11001216 	blt	r2,r4,43190 <__pack_f+0x134>
   43148:	3904983a 	sll	r2,r7,r4
   4314c:	3106d83a 	srl	r3,r6,r4
   43150:	10bfffc4 	addi	r2,r2,-1
   43154:	3084703a 	and	r2,r6,r2
   43158:	1004c03a 	cmpne	r2,r2,zero
   4315c:	1886b03a 	or	r3,r3,r2
   43160:	19001fcc 	andi	r4,r3,127
   43164:	00801004 	movi	r2,64
   43168:	20800c26 	beq	r4,r2,4319c <__pack_f+0x140>
   4316c:	18c00fc4 	addi	r3,r3,63
   43170:	00900034 	movhi	r2,16384
   43174:	10bfffc4 	addi	r2,r2,-1
   43178:	180cd1fa 	srli	r6,r3,7
   4317c:	10c7803a 	cmpltu	r3,r2,r3
   43180:	00802034 	movhi	r2,128
   43184:	10bfffc4 	addi	r2,r2,-1
   43188:	308c703a 	and	r6,r6,r2
   4318c:	003fbf06 	br	4308c <__pack_f+0x30>
   43190:	0007883a 	mov	r3,zero
   43194:	000d883a 	mov	r6,zero
   43198:	003ff906 	br	43180 <__pack_f+0x124>
   4319c:	1880200c 	andi	r2,r3,128
   431a0:	10000126 	beq	r2,zero,431a8 <__pack_f+0x14c>
   431a4:	1907883a 	add	r3,r3,r4
   431a8:	180cd1fa 	srli	r6,r3,7
   431ac:	00900034 	movhi	r2,16384
   431b0:	10bfffc4 	addi	r2,r2,-1
   431b4:	10c7803a 	cmpltu	r3,r2,r3
   431b8:	003ff106 	br	43180 <__pack_f+0x124>

000431bc <__unpack_f>:
   431bc:	21800017 	ldw	r6,0(r4)
   431c0:	00c02034 	movhi	r3,128
   431c4:	18ffffc4 	addi	r3,r3,-1
   431c8:	3004d5fa 	srli	r2,r6,23
   431cc:	3008d7fa 	srli	r4,r6,31
   431d0:	30ce703a 	and	r7,r6,r3
   431d4:	10c03fcc 	andi	r3,r2,255
   431d8:	29000115 	stw	r4,4(r5)
   431dc:	1800131e 	bne	r3,zero,4322c <__unpack_f+0x70>
   431e0:	38000f26 	beq	r7,zero,43220 <__unpack_f+0x64>
   431e4:	380691fa 	slli	r3,r7,7
   431e8:	01bfe084 	movi	r6,-126
   431ec:	008000c4 	movi	r2,3
   431f0:	01100034 	movhi	r4,16384
   431f4:	213fffc4 	addi	r4,r4,-1
   431f8:	28800015 	stw	r2,0(r5)
   431fc:	29800215 	stw	r6,8(r5)
   43200:	20c00536 	bltu	r4,r3,43218 <__unpack_f+0x5c>
   43204:	3005883a 	mov	r2,r6
   43208:	18c7883a 	add	r3,r3,r3
   4320c:	10bfffc4 	addi	r2,r2,-1
   43210:	20fffd2e 	bgeu	r4,r3,43208 <__unpack_f+0x4c>
   43214:	28800215 	stw	r2,8(r5)
   43218:	28c00315 	stw	r3,12(r5)
   4321c:	f800283a 	ret
   43220:	00800084 	movi	r2,2
   43224:	28800015 	stw	r2,0(r5)
   43228:	f800283a 	ret
   4322c:	00803fc4 	movi	r2,255
   43230:	18800826 	beq	r3,r2,43254 <__unpack_f+0x98>
   43234:	380491fa 	slli	r2,r7,7
   43238:	18ffe044 	addi	r3,r3,-127
   4323c:	28c00215 	stw	r3,8(r5)
   43240:	10900034 	orhi	r2,r2,16384
   43244:	28800315 	stw	r2,12(r5)
   43248:	008000c4 	movi	r2,3
   4324c:	28800015 	stw	r2,0(r5)
   43250:	f800283a 	ret
   43254:	3800031e 	bne	r7,zero,43264 <__unpack_f+0xa8>
   43258:	00800104 	movi	r2,4
   4325c:	28800015 	stw	r2,0(r5)
   43260:	f800283a 	ret
   43264:	3080042c 	andhi	r2,r6,16
   43268:	10000426 	beq	r2,zero,4327c <__unpack_f+0xc0>
   4326c:	00800044 	movi	r2,1
   43270:	28800015 	stw	r2,0(r5)
   43274:	29c00315 	stw	r7,12(r5)
   43278:	f800283a 	ret
   4327c:	28000015 	stw	zero,0(r5)
   43280:	003ffc06 	br	43274 <__unpack_f+0xb8>

00043284 <__pack_d>:
   43284:	20c00017 	ldw	r3,0(r4)
   43288:	defffd04 	addi	sp,sp,-12
   4328c:	dc000015 	stw	r16,0(sp)
   43290:	dc800215 	stw	r18,8(sp)
   43294:	dc400115 	stw	r17,4(sp)
   43298:	00800044 	movi	r2,1
   4329c:	22000317 	ldw	r8,12(r4)
   432a0:	001f883a 	mov	r15,zero
   432a4:	22400417 	ldw	r9,16(r4)
   432a8:	24000117 	ldw	r16,4(r4)
   432ac:	10c0552e 	bgeu	r2,r3,43404 <__pack_d+0x180>
   432b0:	00800104 	movi	r2,4
   432b4:	18804f26 	beq	r3,r2,433f4 <__pack_d+0x170>
   432b8:	00800084 	movi	r2,2
   432bc:	18800226 	beq	r3,r2,432c8 <__pack_d+0x44>
   432c0:	4244b03a 	or	r2,r8,r9
   432c4:	10001a1e 	bne	r2,zero,43330 <__pack_d+0xac>
   432c8:	000d883a 	mov	r6,zero
   432cc:	000f883a 	mov	r7,zero
   432d0:	0011883a 	mov	r8,zero
   432d4:	00800434 	movhi	r2,16
   432d8:	10bfffc4 	addi	r2,r2,-1
   432dc:	301d883a 	mov	r14,r6
   432e0:	3884703a 	and	r2,r7,r2
   432e4:	400a953a 	slli	r5,r8,20
   432e8:	79bffc2c 	andhi	r6,r15,65520
   432ec:	308cb03a 	or	r6,r6,r2
   432f0:	00e00434 	movhi	r3,32784
   432f4:	18ffffc4 	addi	r3,r3,-1
   432f8:	800497fa 	slli	r2,r16,31
   432fc:	30c6703a 	and	r3,r6,r3
   43300:	1946b03a 	or	r3,r3,r5
   43304:	01600034 	movhi	r5,32768
   43308:	297fffc4 	addi	r5,r5,-1
   4330c:	194a703a 	and	r5,r3,r5
   43310:	288ab03a 	or	r5,r5,r2
   43314:	2807883a 	mov	r3,r5
   43318:	7005883a 	mov	r2,r14
   4331c:	dc800217 	ldw	r18,8(sp)
   43320:	dc400117 	ldw	r17,4(sp)
   43324:	dc000017 	ldw	r16,0(sp)
   43328:	dec00304 	addi	sp,sp,12
   4332c:	f800283a 	ret
   43330:	21000217 	ldw	r4,8(r4)
   43334:	00bf0084 	movi	r2,-1022
   43338:	20803f16 	blt	r4,r2,43438 <__pack_d+0x1b4>
   4333c:	0080ffc4 	movi	r2,1023
   43340:	11002c16 	blt	r2,r4,433f4 <__pack_d+0x170>
   43344:	00803fc4 	movi	r2,255
   43348:	408c703a 	and	r6,r8,r2
   4334c:	00802004 	movi	r2,128
   43350:	0007883a 	mov	r3,zero
   43354:	000f883a 	mov	r7,zero
   43358:	2280ffc4 	addi	r10,r4,1023
   4335c:	30801e26 	beq	r6,r2,433d8 <__pack_d+0x154>
   43360:	00801fc4 	movi	r2,127
   43364:	4089883a 	add	r4,r8,r2
   43368:	220d803a 	cmpltu	r6,r4,r8
   4336c:	324d883a 	add	r6,r6,r9
   43370:	2011883a 	mov	r8,r4
   43374:	3013883a 	mov	r9,r6
   43378:	00880034 	movhi	r2,8192
   4337c:	10bfffc4 	addi	r2,r2,-1
   43380:	12400d36 	bltu	r2,r9,433b8 <__pack_d+0x134>
   43384:	4804963a 	slli	r2,r9,24
   43388:	400cd23a 	srli	r6,r8,8
   4338c:	480ed23a 	srli	r7,r9,8
   43390:	013fffc4 	movi	r4,-1
   43394:	118cb03a 	or	r6,r2,r6
   43398:	01400434 	movhi	r5,16
   4339c:	297fffc4 	addi	r5,r5,-1
   433a0:	3104703a 	and	r2,r6,r4
   433a4:	3946703a 	and	r3,r7,r5
   433a8:	5201ffcc 	andi	r8,r10,2047
   433ac:	100d883a 	mov	r6,r2
   433b0:	180f883a 	mov	r7,r3
   433b4:	003fc706 	br	432d4 <__pack_d+0x50>
   433b8:	480897fa 	slli	r4,r9,31
   433bc:	4004d07a 	srli	r2,r8,1
   433c0:	4806d07a 	srli	r3,r9,1
   433c4:	52800044 	addi	r10,r10,1
   433c8:	2084b03a 	or	r2,r4,r2
   433cc:	1011883a 	mov	r8,r2
   433d0:	1813883a 	mov	r9,r3
   433d4:	003feb06 	br	43384 <__pack_d+0x100>
   433d8:	383fe11e 	bne	r7,zero,43360 <__pack_d+0xdc>
   433dc:	01004004 	movi	r4,256
   433e0:	4104703a 	and	r2,r8,r4
   433e4:	10c4b03a 	or	r2,r2,r3
   433e8:	103fe326 	beq	r2,zero,43378 <__pack_d+0xf4>
   433ec:	3005883a 	mov	r2,r6
   433f0:	003fdc06 	br	43364 <__pack_d+0xe0>
   433f4:	000d883a 	mov	r6,zero
   433f8:	000f883a 	mov	r7,zero
   433fc:	0201ffc4 	movi	r8,2047
   43400:	003fb406 	br	432d4 <__pack_d+0x50>
   43404:	0005883a 	mov	r2,zero
   43408:	00c00234 	movhi	r3,8
   4340c:	408cb03a 	or	r6,r8,r2
   43410:	48ceb03a 	or	r7,r9,r3
   43414:	013fffc4 	movi	r4,-1
   43418:	01400434 	movhi	r5,16
   4341c:	297fffc4 	addi	r5,r5,-1
   43420:	3104703a 	and	r2,r6,r4
   43424:	3946703a 	and	r3,r7,r5
   43428:	100d883a 	mov	r6,r2
   4342c:	180f883a 	mov	r7,r3
   43430:	0201ffc4 	movi	r8,2047
   43434:	003fa706 	br	432d4 <__pack_d+0x50>
   43438:	1109c83a 	sub	r4,r2,r4
   4343c:	00800e04 	movi	r2,56
   43440:	11004316 	blt	r2,r4,43550 <__pack_d+0x2cc>
   43444:	21fff804 	addi	r7,r4,-32
   43448:	38004516 	blt	r7,zero,43560 <__pack_d+0x2dc>
   4344c:	49d8d83a 	srl	r12,r9,r7
   43450:	001b883a 	mov	r13,zero
   43454:	0023883a 	mov	r17,zero
   43458:	01400044 	movi	r5,1
   4345c:	0025883a 	mov	r18,zero
   43460:	38004716 	blt	r7,zero,43580 <__pack_d+0x2fc>
   43464:	29d6983a 	sll	r11,r5,r7
   43468:	0015883a 	mov	r10,zero
   4346c:	00bfffc4 	movi	r2,-1
   43470:	5089883a 	add	r4,r10,r2
   43474:	588b883a 	add	r5,r11,r2
   43478:	228d803a 	cmpltu	r6,r4,r10
   4347c:	314b883a 	add	r5,r6,r5
   43480:	4104703a 	and	r2,r8,r4
   43484:	4946703a 	and	r3,r9,r5
   43488:	10c4b03a 	or	r2,r2,r3
   4348c:	10000226 	beq	r2,zero,43498 <__pack_d+0x214>
   43490:	04400044 	movi	r17,1
   43494:	0025883a 	mov	r18,zero
   43498:	00803fc4 	movi	r2,255
   4349c:	644eb03a 	or	r7,r12,r17
   434a0:	3892703a 	and	r9,r7,r2
   434a4:	00802004 	movi	r2,128
   434a8:	6c90b03a 	or	r8,r13,r18
   434ac:	0015883a 	mov	r10,zero
   434b0:	48801626 	beq	r9,r2,4350c <__pack_d+0x288>
   434b4:	01001fc4 	movi	r4,127
   434b8:	3905883a 	add	r2,r7,r4
   434bc:	11cd803a 	cmpltu	r6,r2,r7
   434c0:	320d883a 	add	r6,r6,r8
   434c4:	100f883a 	mov	r7,r2
   434c8:	00840034 	movhi	r2,4096
   434cc:	10bfffc4 	addi	r2,r2,-1
   434d0:	3011883a 	mov	r8,r6
   434d4:	0007883a 	mov	r3,zero
   434d8:	11801b36 	bltu	r2,r6,43548 <__pack_d+0x2c4>
   434dc:	4004963a 	slli	r2,r8,24
   434e0:	3808d23a 	srli	r4,r7,8
   434e4:	400ad23a 	srli	r5,r8,8
   434e8:	1813883a 	mov	r9,r3
   434ec:	1108b03a 	or	r4,r2,r4
   434f0:	00bfffc4 	movi	r2,-1
   434f4:	00c00434 	movhi	r3,16
   434f8:	18ffffc4 	addi	r3,r3,-1
   434fc:	208c703a 	and	r6,r4,r2
   43500:	28ce703a 	and	r7,r5,r3
   43504:	4a01ffcc 	andi	r8,r9,2047
   43508:	003f7206 	br	432d4 <__pack_d+0x50>
   4350c:	503fe91e 	bne	r10,zero,434b4 <__pack_d+0x230>
   43510:	01004004 	movi	r4,256
   43514:	3904703a 	and	r2,r7,r4
   43518:	0007883a 	mov	r3,zero
   4351c:	10c4b03a 	or	r2,r2,r3
   43520:	10000626 	beq	r2,zero,4353c <__pack_d+0x2b8>
   43524:	3a45883a 	add	r2,r7,r9
   43528:	11cd803a 	cmpltu	r6,r2,r7
   4352c:	320d883a 	add	r6,r6,r8
   43530:	100f883a 	mov	r7,r2
   43534:	3011883a 	mov	r8,r6
   43538:	0007883a 	mov	r3,zero
   4353c:	00840034 	movhi	r2,4096
   43540:	10bfffc4 	addi	r2,r2,-1
   43544:	123fe52e 	bgeu	r2,r8,434dc <__pack_d+0x258>
   43548:	00c00044 	movi	r3,1
   4354c:	003fe306 	br	434dc <__pack_d+0x258>
   43550:	0009883a 	mov	r4,zero
   43554:	0013883a 	mov	r9,zero
   43558:	000b883a 	mov	r5,zero
   4355c:	003fe406 	br	434f0 <__pack_d+0x26c>
   43560:	4a47883a 	add	r3,r9,r9
   43564:	008007c4 	movi	r2,31
   43568:	1105c83a 	sub	r2,r2,r4
   4356c:	1886983a 	sll	r3,r3,r2
   43570:	4118d83a 	srl	r12,r8,r4
   43574:	491ad83a 	srl	r13,r9,r4
   43578:	1b18b03a 	or	r12,r3,r12
   4357c:	003fb506 	br	43454 <__pack_d+0x1d0>
   43580:	2806d07a 	srli	r3,r5,1
   43584:	008007c4 	movi	r2,31
   43588:	1105c83a 	sub	r2,r2,r4
   4358c:	1896d83a 	srl	r11,r3,r2
   43590:	2914983a 	sll	r10,r5,r4
   43594:	003fb506 	br	4346c <__pack_d+0x1e8>

00043598 <_puts_r>:
   43598:	defff604 	addi	sp,sp,-40
   4359c:	dc400715 	stw	r17,28(sp)
   435a0:	2023883a 	mov	r17,r4
   435a4:	2809883a 	mov	r4,r5
   435a8:	dfc00915 	stw	ra,36(sp)
   435ac:	dcc00815 	stw	r19,32(sp)
   435b0:	2827883a 	mov	r19,r5
   435b4:	00437bc0 	call	437bc <strlen>
   435b8:	89400217 	ldw	r5,8(r17)
   435bc:	00c00174 	movhi	r3,5
   435c0:	18ff8904 	addi	r3,r3,-476
   435c4:	01c00044 	movi	r7,1
   435c8:	12000044 	addi	r8,r2,1
   435cc:	d8c00515 	stw	r3,20(sp)
   435d0:	d9c00615 	stw	r7,24(sp)
   435d4:	d8c00304 	addi	r3,sp,12
   435d8:	01c00084 	movi	r7,2
   435dc:	8809883a 	mov	r4,r17
   435e0:	d80d883a 	mov	r6,sp
   435e4:	d8c00015 	stw	r3,0(sp)
   435e8:	dcc00315 	stw	r19,12(sp)
   435ec:	da000215 	stw	r8,8(sp)
   435f0:	d9c00115 	stw	r7,4(sp)
   435f4:	d8800415 	stw	r2,16(sp)
   435f8:	00479900 	call	47990 <__sfvwrite_r>
   435fc:	00ffffc4 	movi	r3,-1
   43600:	10000626 	beq	r2,zero,4361c <_puts_r+0x84>
   43604:	1805883a 	mov	r2,r3
   43608:	dfc00917 	ldw	ra,36(sp)
   4360c:	dcc00817 	ldw	r19,32(sp)
   43610:	dc400717 	ldw	r17,28(sp)
   43614:	dec00a04 	addi	sp,sp,40
   43618:	f800283a 	ret
   4361c:	00c00284 	movi	r3,10
   43620:	1805883a 	mov	r2,r3
   43624:	dfc00917 	ldw	ra,36(sp)
   43628:	dcc00817 	ldw	r19,32(sp)
   4362c:	dc400717 	ldw	r17,28(sp)
   43630:	dec00a04 	addi	sp,sp,40
   43634:	f800283a 	ret

00043638 <puts>:
   43638:	00800174 	movhi	r2,5
   4363c:	10874404 	addi	r2,r2,7440
   43640:	200b883a 	mov	r5,r4
   43644:	11000017 	ldw	r4,0(r2)
   43648:	00435981 	jmpi	43598 <_puts_r>

0004364c <snprintf>:
   4364c:	deffe404 	addi	sp,sp,-112
   43650:	dc001815 	stw	r16,96(sp)
   43654:	2011883a 	mov	r8,r4
   43658:	2821883a 	mov	r16,r5
   4365c:	dfc01a15 	stw	ra,104(sp)
   43660:	dc401915 	stw	r17,100(sp)
   43664:	d9c01b15 	stw	r7,108(sp)
   43668:	01000174 	movhi	r4,5
   4366c:	21074404 	addi	r4,r4,7440
   43670:	00ffffc4 	movi	r3,-1
   43674:	24400017 	ldw	r17,0(r4)
   43678:	28002016 	blt	r5,zero,436fc <snprintf+0xb0>
   4367c:	0007883a 	mov	r3,zero
   43680:	28000126 	beq	r5,zero,43688 <snprintf+0x3c>
   43684:	28ffffc4 	addi	r3,r5,-1
   43688:	d8801b04 	addi	r2,sp,108
   4368c:	21000017 	ldw	r4,0(r4)
   43690:	d8800015 	stw	r2,0(sp)
   43694:	100f883a 	mov	r7,r2
   43698:	00808204 	movi	r2,520
   4369c:	d880040d 	sth	r2,16(sp)
   436a0:	d9400104 	addi	r5,sp,4
   436a4:	00bfffc4 	movi	r2,-1
   436a8:	d8c00615 	stw	r3,24(sp)
   436ac:	d8c00315 	stw	r3,12(sp)
   436b0:	da000515 	stw	r8,20(sp)
   436b4:	d880048d 	sth	r2,18(sp)
   436b8:	da000115 	stw	r8,4(sp)
   436bc:	00438880 	call	43888 <___vfprintf_internal_r>
   436c0:	1007883a 	mov	r3,r2
   436c4:	00bfffc4 	movi	r2,-1
   436c8:	18800916 	blt	r3,r2,436f0 <snprintf+0xa4>
   436cc:	80000226 	beq	r16,zero,436d8 <snprintf+0x8c>
   436d0:	d8800117 	ldw	r2,4(sp)
   436d4:	10000005 	stb	zero,0(r2)
   436d8:	1805883a 	mov	r2,r3
   436dc:	dfc01a17 	ldw	ra,104(sp)
   436e0:	dc401917 	ldw	r17,100(sp)
   436e4:	dc001817 	ldw	r16,96(sp)
   436e8:	dec01c04 	addi	sp,sp,112
   436ec:	f800283a 	ret
   436f0:	008022c4 	movi	r2,139
   436f4:	88800015 	stw	r2,0(r17)
   436f8:	003ff406 	br	436cc <snprintf+0x80>
   436fc:	008022c4 	movi	r2,139
   43700:	88800015 	stw	r2,0(r17)
   43704:	003ff406 	br	436d8 <snprintf+0x8c>

00043708 <_snprintf_r>:
   43708:	deffe504 	addi	sp,sp,-108
   4370c:	dc401915 	stw	r17,100(sp)
   43710:	dc001815 	stw	r16,96(sp)
   43714:	dfc01a15 	stw	ra,104(sp)
   43718:	3021883a 	mov	r16,r6
   4371c:	00ffffc4 	movi	r3,-1
   43720:	2023883a 	mov	r17,r4
   43724:	2811883a 	mov	r8,r5
   43728:	30002116 	blt	r6,zero,437b0 <_snprintf_r+0xa8>
   4372c:	0007883a 	mov	r3,zero
   43730:	30000126 	beq	r6,zero,43738 <_snprintf_r+0x30>
   43734:	30ffffc4 	addi	r3,r6,-1
   43738:	d8801b04 	addi	r2,sp,108
   4373c:	d8800015 	stw	r2,0(sp)
   43740:	380d883a 	mov	r6,r7
   43744:	100f883a 	mov	r7,r2
   43748:	00808204 	movi	r2,520
   4374c:	d880040d 	sth	r2,16(sp)
   43750:	8809883a 	mov	r4,r17
   43754:	00bfffc4 	movi	r2,-1
   43758:	d9400104 	addi	r5,sp,4
   4375c:	d8c00615 	stw	r3,24(sp)
   43760:	d8c00315 	stw	r3,12(sp)
   43764:	da000515 	stw	r8,20(sp)
   43768:	d880048d 	sth	r2,18(sp)
   4376c:	da000115 	stw	r8,4(sp)
   43770:	00438880 	call	43888 <___vfprintf_internal_r>
   43774:	1007883a 	mov	r3,r2
   43778:	00bfffc4 	movi	r2,-1
   4377c:	18800916 	blt	r3,r2,437a4 <_snprintf_r+0x9c>
   43780:	80000226 	beq	r16,zero,4378c <_snprintf_r+0x84>
   43784:	d8800117 	ldw	r2,4(sp)
   43788:	10000005 	stb	zero,0(r2)
   4378c:	1805883a 	mov	r2,r3
   43790:	dfc01a17 	ldw	ra,104(sp)
   43794:	dc401917 	ldw	r17,100(sp)
   43798:	dc001817 	ldw	r16,96(sp)
   4379c:	dec01b04 	addi	sp,sp,108
   437a0:	f800283a 	ret
   437a4:	008022c4 	movi	r2,139
   437a8:	88800015 	stw	r2,0(r17)
   437ac:	003ff406 	br	43780 <_snprintf_r+0x78>
   437b0:	008022c4 	movi	r2,139
   437b4:	20800015 	stw	r2,0(r4)
   437b8:	003ff406 	br	4378c <_snprintf_r+0x84>

000437bc <strlen>:
   437bc:	208000cc 	andi	r2,r4,3
   437c0:	2011883a 	mov	r8,r4
   437c4:	1000161e 	bne	r2,zero,43820 <strlen+0x64>
   437c8:	20c00017 	ldw	r3,0(r4)
   437cc:	017fbff4 	movhi	r5,65279
   437d0:	297fbfc4 	addi	r5,r5,-257
   437d4:	01e02074 	movhi	r7,32897
   437d8:	39e02004 	addi	r7,r7,-32640
   437dc:	1945883a 	add	r2,r3,r5
   437e0:	11c4703a 	and	r2,r2,r7
   437e4:	00c6303a 	nor	r3,zero,r3
   437e8:	1886703a 	and	r3,r3,r2
   437ec:	18000c1e 	bne	r3,zero,43820 <strlen+0x64>
   437f0:	280d883a 	mov	r6,r5
   437f4:	380b883a 	mov	r5,r7
   437f8:	21000104 	addi	r4,r4,4
   437fc:	20800017 	ldw	r2,0(r4)
   43800:	1187883a 	add	r3,r2,r6
   43804:	1946703a 	and	r3,r3,r5
   43808:	0084303a 	nor	r2,zero,r2
   4380c:	10c4703a 	and	r2,r2,r3
   43810:	103ff926 	beq	r2,zero,437f8 <strlen+0x3c>
   43814:	20800007 	ldb	r2,0(r4)
   43818:	10000326 	beq	r2,zero,43828 <strlen+0x6c>
   4381c:	21000044 	addi	r4,r4,1
   43820:	20800007 	ldb	r2,0(r4)
   43824:	103ffd1e 	bne	r2,zero,4381c <strlen+0x60>
   43828:	2205c83a 	sub	r2,r4,r8
   4382c:	f800283a 	ret

00043830 <__sprint_r>:
   43830:	30800217 	ldw	r2,8(r6)
   43834:	defffe04 	addi	sp,sp,-8
   43838:	dc000015 	stw	r16,0(sp)
   4383c:	dfc00115 	stw	ra,4(sp)
   43840:	3021883a 	mov	r16,r6
   43844:	0007883a 	mov	r3,zero
   43848:	1000061e 	bne	r2,zero,43864 <__sprint_r+0x34>
   4384c:	1805883a 	mov	r2,r3
   43850:	30000115 	stw	zero,4(r6)
   43854:	dfc00117 	ldw	ra,4(sp)
   43858:	dc000017 	ldw	r16,0(sp)
   4385c:	dec00204 	addi	sp,sp,8
   43860:	f800283a 	ret
   43864:	00479900 	call	47990 <__sfvwrite_r>
   43868:	1007883a 	mov	r3,r2
   4386c:	1805883a 	mov	r2,r3
   43870:	80000115 	stw	zero,4(r16)
   43874:	80000215 	stw	zero,8(r16)
   43878:	dfc00117 	ldw	ra,4(sp)
   4387c:	dc000017 	ldw	r16,0(sp)
   43880:	dec00204 	addi	sp,sp,8
   43884:	f800283a 	ret

00043888 <___vfprintf_internal_r>:
   43888:	defea404 	addi	sp,sp,-1392
   4388c:	dd815815 	stw	r22,1376(sp)
   43890:	dc015215 	stw	r16,1352(sp)
   43894:	d9c15115 	stw	r7,1348(sp)
   43898:	dfc15b15 	stw	ra,1388(sp)
   4389c:	df015a15 	stw	fp,1384(sp)
   438a0:	ddc15915 	stw	r23,1380(sp)
   438a4:	dd415715 	stw	r21,1372(sp)
   438a8:	dd015615 	stw	r20,1368(sp)
   438ac:	dcc15515 	stw	r19,1364(sp)
   438b0:	dc815415 	stw	r18,1360(sp)
   438b4:	dc415315 	stw	r17,1356(sp)
   438b8:	282d883a 	mov	r22,r5
   438bc:	3021883a 	mov	r16,r6
   438c0:	d9014f15 	stw	r4,1340(sp)
   438c4:	0047fb40 	call	47fb4 <_localeconv_r>
   438c8:	10800017 	ldw	r2,0(r2)
   438cc:	d9c15117 	ldw	r7,1348(sp)
   438d0:	d8814915 	stw	r2,1316(sp)
   438d4:	d8814f17 	ldw	r2,1340(sp)
   438d8:	10000226 	beq	r2,zero,438e4 <___vfprintf_internal_r+0x5c>
   438dc:	10800e17 	ldw	r2,56(r2)
   438e0:	10020d26 	beq	r2,zero,44118 <___vfprintf_internal_r+0x890>
   438e4:	b080030b 	ldhu	r2,12(r22)
   438e8:	1080020c 	andi	r2,r2,8
   438ec:	10020e26 	beq	r2,zero,44128 <___vfprintf_internal_r+0x8a0>
   438f0:	b0800417 	ldw	r2,16(r22)
   438f4:	10020c26 	beq	r2,zero,44128 <___vfprintf_internal_r+0x8a0>
   438f8:	b200030b 	ldhu	r8,12(r22)
   438fc:	00800284 	movi	r2,10
   43900:	40c0068c 	andi	r3,r8,26
   43904:	18802f1e 	bne	r3,r2,439c4 <___vfprintf_internal_r+0x13c>
   43908:	b080038f 	ldh	r2,14(r22)
   4390c:	10002d16 	blt	r2,zero,439c4 <___vfprintf_internal_r+0x13c>
   43910:	b240038b 	ldhu	r9,14(r22)
   43914:	b2800717 	ldw	r10,28(r22)
   43918:	b2c00917 	ldw	r11,36(r22)
   4391c:	d9014f17 	ldw	r4,1340(sp)
   43920:	dc402904 	addi	r17,sp,164
   43924:	d8804004 	addi	r2,sp,256
   43928:	00c10004 	movi	r3,1024
   4392c:	423fff4c 	andi	r8,r8,65533
   43930:	800d883a 	mov	r6,r16
   43934:	880b883a 	mov	r5,r17
   43938:	da002c0d 	sth	r8,176(sp)
   4393c:	da402c8d 	sth	r9,178(sp)
   43940:	da803015 	stw	r10,192(sp)
   43944:	dac03215 	stw	r11,200(sp)
   43948:	d8802d15 	stw	r2,180(sp)
   4394c:	d8c02e15 	stw	r3,184(sp)
   43950:	d8802915 	stw	r2,164(sp)
   43954:	d8c02b15 	stw	r3,172(sp)
   43958:	d8002f15 	stw	zero,188(sp)
   4395c:	00438880 	call	43888 <___vfprintf_internal_r>
   43960:	d8814b15 	stw	r2,1324(sp)
   43964:	10000416 	blt	r2,zero,43978 <___vfprintf_internal_r+0xf0>
   43968:	d9014f17 	ldw	r4,1340(sp)
   4396c:	880b883a 	mov	r5,r17
   43970:	00470600 	call	47060 <_fflush_r>
   43974:	1002321e 	bne	r2,zero,44240 <___vfprintf_internal_r+0x9b8>
   43978:	d8802c0b 	ldhu	r2,176(sp)
   4397c:	1080100c 	andi	r2,r2,64
   43980:	10000326 	beq	r2,zero,43990 <___vfprintf_internal_r+0x108>
   43984:	b080030b 	ldhu	r2,12(r22)
   43988:	10801014 	ori	r2,r2,64
   4398c:	b080030d 	sth	r2,12(r22)
   43990:	d8814b17 	ldw	r2,1324(sp)
   43994:	dfc15b17 	ldw	ra,1388(sp)
   43998:	df015a17 	ldw	fp,1384(sp)
   4399c:	ddc15917 	ldw	r23,1380(sp)
   439a0:	dd815817 	ldw	r22,1376(sp)
   439a4:	dd415717 	ldw	r21,1372(sp)
   439a8:	dd015617 	ldw	r20,1368(sp)
   439ac:	dcc15517 	ldw	r19,1364(sp)
   439b0:	dc815417 	ldw	r18,1360(sp)
   439b4:	dc415317 	ldw	r17,1356(sp)
   439b8:	dc015217 	ldw	r16,1352(sp)
   439bc:	dec15c04 	addi	sp,sp,1392
   439c0:	f800283a 	ret
   439c4:	0005883a 	mov	r2,zero
   439c8:	0007883a 	mov	r3,zero
   439cc:	dd401904 	addi	r21,sp,100
   439d0:	d8814215 	stw	r2,1288(sp)
   439d4:	802f883a 	mov	r23,r16
   439d8:	d8c14315 	stw	r3,1292(sp)
   439dc:	d8014b15 	stw	zero,1324(sp)
   439e0:	d8014815 	stw	zero,1312(sp)
   439e4:	d8014415 	stw	zero,1296(sp)
   439e8:	d8014715 	stw	zero,1308(sp)
   439ec:	dd400c15 	stw	r21,48(sp)
   439f0:	d8000e15 	stw	zero,56(sp)
   439f4:	d8000d15 	stw	zero,52(sp)
   439f8:	b8800007 	ldb	r2,0(r23)
   439fc:	10001926 	beq	r2,zero,43a64 <___vfprintf_internal_r+0x1dc>
   43a00:	00c00944 	movi	r3,37
   43a04:	10c01726 	beq	r2,r3,43a64 <___vfprintf_internal_r+0x1dc>
   43a08:	b821883a 	mov	r16,r23
   43a0c:	00000106 	br	43a14 <___vfprintf_internal_r+0x18c>
   43a10:	10c00326 	beq	r2,r3,43a20 <___vfprintf_internal_r+0x198>
   43a14:	84000044 	addi	r16,r16,1
   43a18:	80800007 	ldb	r2,0(r16)
   43a1c:	103ffc1e 	bne	r2,zero,43a10 <___vfprintf_internal_r+0x188>
   43a20:	85e7c83a 	sub	r19,r16,r23
   43a24:	98000e26 	beq	r19,zero,43a60 <___vfprintf_internal_r+0x1d8>
   43a28:	dc800e17 	ldw	r18,56(sp)
   43a2c:	dc400d17 	ldw	r17,52(sp)
   43a30:	008001c4 	movi	r2,7
   43a34:	94e5883a 	add	r18,r18,r19
   43a38:	8c400044 	addi	r17,r17,1
   43a3c:	adc00015 	stw	r23,0(r21)
   43a40:	dc800e15 	stw	r18,56(sp)
   43a44:	acc00115 	stw	r19,4(r21)
   43a48:	dc400d15 	stw	r17,52(sp)
   43a4c:	14428b16 	blt	r2,r17,4447c <___vfprintf_internal_r+0xbf4>
   43a50:	ad400204 	addi	r21,r21,8
   43a54:	d9014b17 	ldw	r4,1324(sp)
   43a58:	24c9883a 	add	r4,r4,r19
   43a5c:	d9014b15 	stw	r4,1324(sp)
   43a60:	802f883a 	mov	r23,r16
   43a64:	b8800007 	ldb	r2,0(r23)
   43a68:	10013c26 	beq	r2,zero,43f5c <___vfprintf_internal_r+0x6d4>
   43a6c:	bdc00044 	addi	r23,r23,1
   43a70:	d8000405 	stb	zero,16(sp)
   43a74:	b8c00007 	ldb	r3,0(r23)
   43a78:	04ffffc4 	movi	r19,-1
   43a7c:	d8014c15 	stw	zero,1328(sp)
   43a80:	d8014a15 	stw	zero,1320(sp)
   43a84:	d8c14d15 	stw	r3,1332(sp)
   43a88:	bdc00044 	addi	r23,r23,1
   43a8c:	d9414d17 	ldw	r5,1332(sp)
   43a90:	00801604 	movi	r2,88
   43a94:	28fff804 	addi	r3,r5,-32
   43a98:	10c06036 	bltu	r2,r3,43c1c <___vfprintf_internal_r+0x394>
   43a9c:	18c5883a 	add	r2,r3,r3
   43aa0:	1085883a 	add	r2,r2,r2
   43aa4:	00c00134 	movhi	r3,4
   43aa8:	18ceae04 	addi	r3,r3,15032
   43aac:	10c5883a 	add	r2,r2,r3
   43ab0:	11000017 	ldw	r4,0(r2)
   43ab4:	2000683a 	jmp	r4
   43ab8:	00044a2c 	andhi	zero,zero,4392
   43abc:	00043c1c 	xori	zero,zero,4336
   43ac0:	00043c1c 	xori	zero,zero,4336
   43ac4:	00044a18 	cmpnei	zero,zero,4392
   43ac8:	00043c1c 	xori	zero,zero,4336
   43acc:	00043c1c 	xori	zero,zero,4336
   43ad0:	00043c1c 	xori	zero,zero,4336
   43ad4:	00043c1c 	xori	zero,zero,4336
   43ad8:	00043c1c 	xori	zero,zero,4336
   43adc:	00043c1c 	xori	zero,zero,4336
   43ae0:	000447f8 	rdprs	zero,zero,4383
   43ae4:	00044a08 	cmpgei	zero,zero,4392
   43ae8:	00043c1c 	xori	zero,zero,4336
   43aec:	00044810 	cmplti	zero,zero,4384
   43af0:	00044aa4 	muli	zero,zero,4394
   43af4:	00043c1c 	xori	zero,zero,4336
   43af8:	00044a90 	cmplti	zero,zero,4394
   43afc:	00044a58 	cmpnei	zero,zero,4393
   43b00:	00044a58 	cmpnei	zero,zero,4393
   43b04:	00044a58 	cmpnei	zero,zero,4393
   43b08:	00044a58 	cmpnei	zero,zero,4393
   43b0c:	00044a58 	cmpnei	zero,zero,4393
   43b10:	00044a58 	cmpnei	zero,zero,4393
   43b14:	00044a58 	cmpnei	zero,zero,4393
   43b18:	00044a58 	cmpnei	zero,zero,4393
   43b1c:	00044a58 	cmpnei	zero,zero,4393
   43b20:	00043c1c 	xori	zero,zero,4336
   43b24:	00043c1c 	xori	zero,zero,4336
   43b28:	00043c1c 	xori	zero,zero,4336
   43b2c:	00043c1c 	xori	zero,zero,4336
   43b30:	00043c1c 	xori	zero,zero,4336
   43b34:	00043c1c 	xori	zero,zero,4336
   43b38:	00043c1c 	xori	zero,zero,4336
   43b3c:	00043c1c 	xori	zero,zero,4336
   43b40:	00043c1c 	xori	zero,zero,4336
   43b44:	00043c1c 	xori	zero,zero,4336
   43b48:	00044274 	movhi	zero,4361
   43b4c:	000448e0 	cmpeqi	zero,zero,4387
   43b50:	00043c1c 	xori	zero,zero,4336
   43b54:	000448e0 	cmpeqi	zero,zero,4387
   43b58:	00043c1c 	xori	zero,zero,4336
   43b5c:	00043c1c 	xori	zero,zero,4336
   43b60:	00043c1c 	xori	zero,zero,4336
   43b64:	00043c1c 	xori	zero,zero,4336
   43b68:	00044a44 	movi	zero,4393
   43b6c:	00043c1c 	xori	zero,zero,4336
   43b70:	00043c1c 	xori	zero,zero,4336
   43b74:	00044328 	cmpgeui	zero,zero,4364
   43b78:	00043c1c 	xori	zero,zero,4336
   43b7c:	00043c1c 	xori	zero,zero,4336
   43b80:	00043c1c 	xori	zero,zero,4336
   43b84:	00043c1c 	xori	zero,zero,4336
   43b88:	00043c1c 	xori	zero,zero,4336
   43b8c:	00044374 	movhi	zero,4365
   43b90:	00043c1c 	xori	zero,zero,4336
   43b94:	00043c1c 	xori	zero,zero,4336
   43b98:	00044994 	movui	zero,4390
   43b9c:	00043c1c 	xori	zero,zero,4336
   43ba0:	00043c1c 	xori	zero,zero,4336
   43ba4:	00043c1c 	xori	zero,zero,4336
   43ba8:	00043c1c 	xori	zero,zero,4336
   43bac:	00043c1c 	xori	zero,zero,4336
   43bb0:	00043c1c 	xori	zero,zero,4336
   43bb4:	00043c1c 	xori	zero,zero,4336
   43bb8:	00043c1c 	xori	zero,zero,4336
   43bbc:	00043c1c 	xori	zero,zero,4336
   43bc0:	00043c1c 	xori	zero,zero,4336
   43bc4:	00044968 	cmpgeui	zero,zero,4389
   43bc8:	00044280 	call	4428 <__reset-0x3bbd8>
   43bcc:	000448e0 	cmpeqi	zero,zero,4387
   43bd0:	000448e0 	cmpeqi	zero,zero,4387
   43bd4:	000448e0 	cmpeqi	zero,zero,4387
   43bd8:	000448cc 	andi	zero,zero,4387
   43bdc:	00044280 	call	4428 <__reset-0x3bbd8>
   43be0:	00043c1c 	xori	zero,zero,4336
   43be4:	00043c1c 	xori	zero,zero,4336
   43be8:	00044854 	movui	zero,4385
   43bec:	00043c1c 	xori	zero,zero,4336
   43bf0:	00044824 	muli	zero,zero,4384
   43bf4:	00044334 	movhi	zero,4364
   43bf8:	00044884 	movi	zero,4386
   43bfc:	00044870 	cmpltui	zero,zero,4385
   43c00:	00043c1c 	xori	zero,zero,4336
   43c04:	00044b00 	call	44b0 <__reset-0x3bb50>
   43c08:	00043c1c 	xori	zero,zero,4336
   43c0c:	00044380 	call	4438 <__reset-0x3bbc8>
   43c10:	00043c1c 	xori	zero,zero,4336
   43c14:	00043c1c 	xori	zero,zero,4336
   43c18:	000449f8 	rdprs	zero,zero,4391
   43c1c:	d9014d17 	ldw	r4,1332(sp)
   43c20:	2000ce26 	beq	r4,zero,43f5c <___vfprintf_internal_r+0x6d4>
   43c24:	01400044 	movi	r5,1
   43c28:	d9800f04 	addi	r6,sp,60
   43c2c:	d9c14015 	stw	r7,1280(sp)
   43c30:	d9414515 	stw	r5,1300(sp)
   43c34:	d9814115 	stw	r6,1284(sp)
   43c38:	280f883a 	mov	r7,r5
   43c3c:	d9000f05 	stb	r4,60(sp)
   43c40:	d8000405 	stb	zero,16(sp)
   43c44:	d8014615 	stw	zero,1304(sp)
   43c48:	d8c14c17 	ldw	r3,1328(sp)
   43c4c:	1880008c 	andi	r2,r3,2
   43c50:	1005003a 	cmpeq	r2,r2,zero
   43c54:	d8815015 	stw	r2,1344(sp)
   43c58:	1000031e 	bne	r2,zero,43c68 <___vfprintf_internal_r+0x3e0>
   43c5c:	d9014517 	ldw	r4,1300(sp)
   43c60:	21000084 	addi	r4,r4,2
   43c64:	d9014515 	stw	r4,1300(sp)
   43c68:	d9414c17 	ldw	r5,1328(sp)
   43c6c:	2940210c 	andi	r5,r5,132
   43c70:	d9414e15 	stw	r5,1336(sp)
   43c74:	28002d1e 	bne	r5,zero,43d2c <___vfprintf_internal_r+0x4a4>
   43c78:	d9814a17 	ldw	r6,1320(sp)
   43c7c:	d8814517 	ldw	r2,1300(sp)
   43c80:	30a1c83a 	sub	r16,r6,r2
   43c84:	0400290e 	bge	zero,r16,43d2c <___vfprintf_internal_r+0x4a4>
   43c88:	00800404 	movi	r2,16
   43c8c:	1404580e 	bge	r2,r16,44df0 <___vfprintf_internal_r+0x1568>
   43c90:	dc800e17 	ldw	r18,56(sp)
   43c94:	dc400d17 	ldw	r17,52(sp)
   43c98:	1027883a 	mov	r19,r2
   43c9c:	07000174 	movhi	fp,5
   43ca0:	e73fa584 	addi	fp,fp,-362
   43ca4:	050001c4 	movi	r20,7
   43ca8:	00000306 	br	43cb8 <___vfprintf_internal_r+0x430>
   43cac:	843ffc04 	addi	r16,r16,-16
   43cb0:	ad400204 	addi	r21,r21,8
   43cb4:	9c00130e 	bge	r19,r16,43d04 <___vfprintf_internal_r+0x47c>
   43cb8:	94800404 	addi	r18,r18,16
   43cbc:	8c400044 	addi	r17,r17,1
   43cc0:	af000015 	stw	fp,0(r21)
   43cc4:	acc00115 	stw	r19,4(r21)
   43cc8:	dc800e15 	stw	r18,56(sp)
   43ccc:	dc400d15 	stw	r17,52(sp)
   43cd0:	a47ff60e 	bge	r20,r17,43cac <___vfprintf_internal_r+0x424>
   43cd4:	d9014f17 	ldw	r4,1340(sp)
   43cd8:	b00b883a 	mov	r5,r22
   43cdc:	d9800c04 	addi	r6,sp,48
   43ce0:	d9c15115 	stw	r7,1348(sp)
   43ce4:	00438300 	call	43830 <__sprint_r>
   43ce8:	d9c15117 	ldw	r7,1348(sp)
   43cec:	10009e1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   43cf0:	843ffc04 	addi	r16,r16,-16
   43cf4:	dc800e17 	ldw	r18,56(sp)
   43cf8:	dc400d17 	ldw	r17,52(sp)
   43cfc:	dd401904 	addi	r21,sp,100
   43d00:	9c3fed16 	blt	r19,r16,43cb8 <___vfprintf_internal_r+0x430>
   43d04:	9425883a 	add	r18,r18,r16
   43d08:	8c400044 	addi	r17,r17,1
   43d0c:	008001c4 	movi	r2,7
   43d10:	af000015 	stw	fp,0(r21)
   43d14:	ac000115 	stw	r16,4(r21)
   43d18:	dc800e15 	stw	r18,56(sp)
   43d1c:	dc400d15 	stw	r17,52(sp)
   43d20:	1441f516 	blt	r2,r17,444f8 <___vfprintf_internal_r+0xc70>
   43d24:	ad400204 	addi	r21,r21,8
   43d28:	00000206 	br	43d34 <___vfprintf_internal_r+0x4ac>
   43d2c:	dc800e17 	ldw	r18,56(sp)
   43d30:	dc400d17 	ldw	r17,52(sp)
   43d34:	d8800407 	ldb	r2,16(sp)
   43d38:	10000b26 	beq	r2,zero,43d68 <___vfprintf_internal_r+0x4e0>
   43d3c:	00800044 	movi	r2,1
   43d40:	94800044 	addi	r18,r18,1
   43d44:	8c400044 	addi	r17,r17,1
   43d48:	a8800115 	stw	r2,4(r21)
   43d4c:	d8c00404 	addi	r3,sp,16
   43d50:	008001c4 	movi	r2,7
   43d54:	a8c00015 	stw	r3,0(r21)
   43d58:	dc800e15 	stw	r18,56(sp)
   43d5c:	dc400d15 	stw	r17,52(sp)
   43d60:	1441da16 	blt	r2,r17,444cc <___vfprintf_internal_r+0xc44>
   43d64:	ad400204 	addi	r21,r21,8
   43d68:	d9015017 	ldw	r4,1344(sp)
   43d6c:	20000b1e 	bne	r4,zero,43d9c <___vfprintf_internal_r+0x514>
   43d70:	d8800444 	addi	r2,sp,17
   43d74:	94800084 	addi	r18,r18,2
   43d78:	8c400044 	addi	r17,r17,1
   43d7c:	a8800015 	stw	r2,0(r21)
   43d80:	00c00084 	movi	r3,2
   43d84:	008001c4 	movi	r2,7
   43d88:	a8c00115 	stw	r3,4(r21)
   43d8c:	dc800e15 	stw	r18,56(sp)
   43d90:	dc400d15 	stw	r17,52(sp)
   43d94:	1441c216 	blt	r2,r17,444a0 <___vfprintf_internal_r+0xc18>
   43d98:	ad400204 	addi	r21,r21,8
   43d9c:	d9414e17 	ldw	r5,1336(sp)
   43da0:	00802004 	movi	r2,128
   43da4:	2880b126 	beq	r5,r2,4406c <___vfprintf_internal_r+0x7e4>
   43da8:	d8c14617 	ldw	r3,1304(sp)
   43dac:	19e1c83a 	sub	r16,r3,r7
   43db0:	0400260e 	bge	zero,r16,43e4c <___vfprintf_internal_r+0x5c4>
   43db4:	00800404 	movi	r2,16
   43db8:	1403c90e 	bge	r2,r16,44ce0 <___vfprintf_internal_r+0x1458>
   43dbc:	1027883a 	mov	r19,r2
   43dc0:	07000174 	movhi	fp,5
   43dc4:	e73fa184 	addi	fp,fp,-378
   43dc8:	050001c4 	movi	r20,7
   43dcc:	00000306 	br	43ddc <___vfprintf_internal_r+0x554>
   43dd0:	843ffc04 	addi	r16,r16,-16
   43dd4:	ad400204 	addi	r21,r21,8
   43dd8:	9c00130e 	bge	r19,r16,43e28 <___vfprintf_internal_r+0x5a0>
   43ddc:	94800404 	addi	r18,r18,16
   43de0:	8c400044 	addi	r17,r17,1
   43de4:	af000015 	stw	fp,0(r21)
   43de8:	acc00115 	stw	r19,4(r21)
   43dec:	dc800e15 	stw	r18,56(sp)
   43df0:	dc400d15 	stw	r17,52(sp)
   43df4:	a47ff60e 	bge	r20,r17,43dd0 <___vfprintf_internal_r+0x548>
   43df8:	d9014f17 	ldw	r4,1340(sp)
   43dfc:	b00b883a 	mov	r5,r22
   43e00:	d9800c04 	addi	r6,sp,48
   43e04:	d9c15115 	stw	r7,1348(sp)
   43e08:	00438300 	call	43830 <__sprint_r>
   43e0c:	d9c15117 	ldw	r7,1348(sp)
   43e10:	1000551e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   43e14:	843ffc04 	addi	r16,r16,-16
   43e18:	dc800e17 	ldw	r18,56(sp)
   43e1c:	dc400d17 	ldw	r17,52(sp)
   43e20:	dd401904 	addi	r21,sp,100
   43e24:	9c3fed16 	blt	r19,r16,43ddc <___vfprintf_internal_r+0x554>
   43e28:	9425883a 	add	r18,r18,r16
   43e2c:	8c400044 	addi	r17,r17,1
   43e30:	008001c4 	movi	r2,7
   43e34:	af000015 	stw	fp,0(r21)
   43e38:	ac000115 	stw	r16,4(r21)
   43e3c:	dc800e15 	stw	r18,56(sp)
   43e40:	dc400d15 	stw	r17,52(sp)
   43e44:	14418216 	blt	r2,r17,44450 <___vfprintf_internal_r+0xbc8>
   43e48:	ad400204 	addi	r21,r21,8
   43e4c:	d9014c17 	ldw	r4,1328(sp)
   43e50:	2080400c 	andi	r2,r4,256
   43e54:	10004a1e 	bne	r2,zero,43f80 <___vfprintf_internal_r+0x6f8>
   43e58:	d9414117 	ldw	r5,1284(sp)
   43e5c:	91e5883a 	add	r18,r18,r7
   43e60:	8c400044 	addi	r17,r17,1
   43e64:	008001c4 	movi	r2,7
   43e68:	a9400015 	stw	r5,0(r21)
   43e6c:	a9c00115 	stw	r7,4(r21)
   43e70:	dc800e15 	stw	r18,56(sp)
   43e74:	dc400d15 	stw	r17,52(sp)
   43e78:	14416716 	blt	r2,r17,44418 <___vfprintf_internal_r+0xb90>
   43e7c:	a8c00204 	addi	r3,r21,8
   43e80:	d9814c17 	ldw	r6,1328(sp)
   43e84:	3080010c 	andi	r2,r6,4
   43e88:	10002826 	beq	r2,zero,43f2c <___vfprintf_internal_r+0x6a4>
   43e8c:	d8814a17 	ldw	r2,1320(sp)
   43e90:	d9014517 	ldw	r4,1300(sp)
   43e94:	1121c83a 	sub	r16,r2,r4
   43e98:	0400240e 	bge	zero,r16,43f2c <___vfprintf_internal_r+0x6a4>
   43e9c:	00800404 	movi	r2,16
   43ea0:	14044f0e 	bge	r2,r16,44fe0 <___vfprintf_internal_r+0x1758>
   43ea4:	dc400d17 	ldw	r17,52(sp)
   43ea8:	1027883a 	mov	r19,r2
   43eac:	07000174 	movhi	fp,5
   43eb0:	e73fa584 	addi	fp,fp,-362
   43eb4:	050001c4 	movi	r20,7
   43eb8:	00000306 	br	43ec8 <___vfprintf_internal_r+0x640>
   43ebc:	843ffc04 	addi	r16,r16,-16
   43ec0:	18c00204 	addi	r3,r3,8
   43ec4:	9c00110e 	bge	r19,r16,43f0c <___vfprintf_internal_r+0x684>
   43ec8:	94800404 	addi	r18,r18,16
   43ecc:	8c400044 	addi	r17,r17,1
   43ed0:	1f000015 	stw	fp,0(r3)
   43ed4:	1cc00115 	stw	r19,4(r3)
   43ed8:	dc800e15 	stw	r18,56(sp)
   43edc:	dc400d15 	stw	r17,52(sp)
   43ee0:	a47ff60e 	bge	r20,r17,43ebc <___vfprintf_internal_r+0x634>
   43ee4:	d9014f17 	ldw	r4,1340(sp)
   43ee8:	b00b883a 	mov	r5,r22
   43eec:	d9800c04 	addi	r6,sp,48
   43ef0:	00438300 	call	43830 <__sprint_r>
   43ef4:	10001c1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   43ef8:	843ffc04 	addi	r16,r16,-16
   43efc:	dc800e17 	ldw	r18,56(sp)
   43f00:	dc400d17 	ldw	r17,52(sp)
   43f04:	d8c01904 	addi	r3,sp,100
   43f08:	9c3fef16 	blt	r19,r16,43ec8 <___vfprintf_internal_r+0x640>
   43f0c:	9425883a 	add	r18,r18,r16
   43f10:	8c400044 	addi	r17,r17,1
   43f14:	008001c4 	movi	r2,7
   43f18:	1f000015 	stw	fp,0(r3)
   43f1c:	1c000115 	stw	r16,4(r3)
   43f20:	dc800e15 	stw	r18,56(sp)
   43f24:	dc400d15 	stw	r17,52(sp)
   43f28:	1440cb16 	blt	r2,r17,44258 <___vfprintf_internal_r+0x9d0>
   43f2c:	d8814a17 	ldw	r2,1320(sp)
   43f30:	d9414517 	ldw	r5,1300(sp)
   43f34:	1140010e 	bge	r2,r5,43f3c <___vfprintf_internal_r+0x6b4>
   43f38:	2805883a 	mov	r2,r5
   43f3c:	d9814b17 	ldw	r6,1324(sp)
   43f40:	308d883a 	add	r6,r6,r2
   43f44:	d9814b15 	stw	r6,1324(sp)
   43f48:	90013b1e 	bne	r18,zero,44438 <___vfprintf_internal_r+0xbb0>
   43f4c:	d9c14017 	ldw	r7,1280(sp)
   43f50:	dd401904 	addi	r21,sp,100
   43f54:	d8000d15 	stw	zero,52(sp)
   43f58:	003ea706 	br	439f8 <___vfprintf_internal_r+0x170>
   43f5c:	d8800e17 	ldw	r2,56(sp)
   43f60:	10053f1e 	bne	r2,zero,45460 <___vfprintf_internal_r+0x1bd8>
   43f64:	d8000d15 	stw	zero,52(sp)
   43f68:	b080030b 	ldhu	r2,12(r22)
   43f6c:	1080100c 	andi	r2,r2,64
   43f70:	103e8726 	beq	r2,zero,43990 <___vfprintf_internal_r+0x108>
   43f74:	00bfffc4 	movi	r2,-1
   43f78:	d8814b15 	stw	r2,1324(sp)
   43f7c:	003e8406 	br	43990 <___vfprintf_internal_r+0x108>
   43f80:	d9814d17 	ldw	r6,1332(sp)
   43f84:	00801944 	movi	r2,101
   43f88:	11806e16 	blt	r2,r6,44144 <___vfprintf_internal_r+0x8bc>
   43f8c:	d9414717 	ldw	r5,1308(sp)
   43f90:	00c00044 	movi	r3,1
   43f94:	1943430e 	bge	r3,r5,44ca4 <___vfprintf_internal_r+0x141c>
   43f98:	d8814117 	ldw	r2,1284(sp)
   43f9c:	94800044 	addi	r18,r18,1
   43fa0:	8c400044 	addi	r17,r17,1
   43fa4:	a8800015 	stw	r2,0(r21)
   43fa8:	008001c4 	movi	r2,7
   43fac:	a8c00115 	stw	r3,4(r21)
   43fb0:	dc800e15 	stw	r18,56(sp)
   43fb4:	dc400d15 	stw	r17,52(sp)
   43fb8:	1441ca16 	blt	r2,r17,446e4 <___vfprintf_internal_r+0xe5c>
   43fbc:	a8c00204 	addi	r3,r21,8
   43fc0:	d9014917 	ldw	r4,1316(sp)
   43fc4:	00800044 	movi	r2,1
   43fc8:	94800044 	addi	r18,r18,1
   43fcc:	8c400044 	addi	r17,r17,1
   43fd0:	18800115 	stw	r2,4(r3)
   43fd4:	008001c4 	movi	r2,7
   43fd8:	19000015 	stw	r4,0(r3)
   43fdc:	dc800e15 	stw	r18,56(sp)
   43fe0:	dc400d15 	stw	r17,52(sp)
   43fe4:	1441b616 	blt	r2,r17,446c0 <___vfprintf_internal_r+0xe38>
   43fe8:	1cc00204 	addi	r19,r3,8
   43fec:	d9014217 	ldw	r4,1288(sp)
   43ff0:	d9414317 	ldw	r5,1292(sp)
   43ff4:	000d883a 	mov	r6,zero
   43ff8:	000f883a 	mov	r7,zero
   43ffc:	004c0d80 	call	4c0d8 <__nedf2>
   44000:	10017426 	beq	r2,zero,445d4 <___vfprintf_internal_r+0xd4c>
   44004:	d9414717 	ldw	r5,1308(sp)
   44008:	d9814117 	ldw	r6,1284(sp)
   4400c:	8c400044 	addi	r17,r17,1
   44010:	2c85883a 	add	r2,r5,r18
   44014:	14bfffc4 	addi	r18,r2,-1
   44018:	28bfffc4 	addi	r2,r5,-1
   4401c:	30c00044 	addi	r3,r6,1
   44020:	98800115 	stw	r2,4(r19)
   44024:	008001c4 	movi	r2,7
   44028:	98c00015 	stw	r3,0(r19)
   4402c:	dc800e15 	stw	r18,56(sp)
   44030:	dc400d15 	stw	r17,52(sp)
   44034:	14418e16 	blt	r2,r17,44670 <___vfprintf_internal_r+0xde8>
   44038:	9cc00204 	addi	r19,r19,8
   4403c:	d9414817 	ldw	r5,1312(sp)
   44040:	d8800804 	addi	r2,sp,32
   44044:	8c400044 	addi	r17,r17,1
   44048:	9165883a 	add	r18,r18,r5
   4404c:	98800015 	stw	r2,0(r19)
   44050:	008001c4 	movi	r2,7
   44054:	99400115 	stw	r5,4(r19)
   44058:	dc800e15 	stw	r18,56(sp)
   4405c:	dc400d15 	stw	r17,52(sp)
   44060:	1440ed16 	blt	r2,r17,44418 <___vfprintf_internal_r+0xb90>
   44064:	98c00204 	addi	r3,r19,8
   44068:	003f8506 	br	43e80 <___vfprintf_internal_r+0x5f8>
   4406c:	d9814a17 	ldw	r6,1320(sp)
   44070:	d8814517 	ldw	r2,1300(sp)
   44074:	30a1c83a 	sub	r16,r6,r2
   44078:	043f4b0e 	bge	zero,r16,43da8 <___vfprintf_internal_r+0x520>
   4407c:	00800404 	movi	r2,16
   44080:	1404340e 	bge	r2,r16,45154 <___vfprintf_internal_r+0x18cc>
   44084:	1027883a 	mov	r19,r2
   44088:	07000174 	movhi	fp,5
   4408c:	e73fa184 	addi	fp,fp,-378
   44090:	050001c4 	movi	r20,7
   44094:	00000306 	br	440a4 <___vfprintf_internal_r+0x81c>
   44098:	843ffc04 	addi	r16,r16,-16
   4409c:	ad400204 	addi	r21,r21,8
   440a0:	9c00130e 	bge	r19,r16,440f0 <___vfprintf_internal_r+0x868>
   440a4:	94800404 	addi	r18,r18,16
   440a8:	8c400044 	addi	r17,r17,1
   440ac:	af000015 	stw	fp,0(r21)
   440b0:	acc00115 	stw	r19,4(r21)
   440b4:	dc800e15 	stw	r18,56(sp)
   440b8:	dc400d15 	stw	r17,52(sp)
   440bc:	a47ff60e 	bge	r20,r17,44098 <___vfprintf_internal_r+0x810>
   440c0:	d9014f17 	ldw	r4,1340(sp)
   440c4:	b00b883a 	mov	r5,r22
   440c8:	d9800c04 	addi	r6,sp,48
   440cc:	d9c15115 	stw	r7,1348(sp)
   440d0:	00438300 	call	43830 <__sprint_r>
   440d4:	d9c15117 	ldw	r7,1348(sp)
   440d8:	103fa31e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   440dc:	843ffc04 	addi	r16,r16,-16
   440e0:	dc800e17 	ldw	r18,56(sp)
   440e4:	dc400d17 	ldw	r17,52(sp)
   440e8:	dd401904 	addi	r21,sp,100
   440ec:	9c3fed16 	blt	r19,r16,440a4 <___vfprintf_internal_r+0x81c>
   440f0:	9425883a 	add	r18,r18,r16
   440f4:	8c400044 	addi	r17,r17,1
   440f8:	008001c4 	movi	r2,7
   440fc:	af000015 	stw	fp,0(r21)
   44100:	ac000115 	stw	r16,4(r21)
   44104:	dc800e15 	stw	r18,56(sp)
   44108:	dc400d15 	stw	r17,52(sp)
   4410c:	14416116 	blt	r2,r17,44694 <___vfprintf_internal_r+0xe0c>
   44110:	ad400204 	addi	r21,r21,8
   44114:	003f2406 	br	43da8 <___vfprintf_internal_r+0x520>
   44118:	d9014f17 	ldw	r4,1340(sp)
   4411c:	00472f80 	call	472f8 <__sinit>
   44120:	d9c15117 	ldw	r7,1348(sp)
   44124:	003def06 	br	438e4 <___vfprintf_internal_r+0x5c>
   44128:	d9014f17 	ldw	r4,1340(sp)
   4412c:	b00b883a 	mov	r5,r22
   44130:	d9c15115 	stw	r7,1348(sp)
   44134:	00457580 	call	45758 <__swsetup_r>
   44138:	d9c15117 	ldw	r7,1348(sp)
   4413c:	103dee26 	beq	r2,zero,438f8 <___vfprintf_internal_r+0x70>
   44140:	003f8c06 	br	43f74 <___vfprintf_internal_r+0x6ec>
   44144:	d9014217 	ldw	r4,1288(sp)
   44148:	d9414317 	ldw	r5,1292(sp)
   4414c:	000d883a 	mov	r6,zero
   44150:	000f883a 	mov	r7,zero
   44154:	004c0500 	call	4c050 <__eqdf2>
   44158:	1000f21e 	bne	r2,zero,44524 <___vfprintf_internal_r+0xc9c>
   4415c:	00800174 	movhi	r2,5
   44160:	10bfa104 	addi	r2,r2,-380
   44164:	94800044 	addi	r18,r18,1
   44168:	8c400044 	addi	r17,r17,1
   4416c:	a8800015 	stw	r2,0(r21)
   44170:	00c00044 	movi	r3,1
   44174:	008001c4 	movi	r2,7
   44178:	a8c00115 	stw	r3,4(r21)
   4417c:	dc800e15 	stw	r18,56(sp)
   44180:	dc400d15 	stw	r17,52(sp)
   44184:	1442fa16 	blt	r2,r17,44d70 <___vfprintf_internal_r+0x14e8>
   44188:	a8c00204 	addi	r3,r21,8
   4418c:	d8800517 	ldw	r2,20(sp)
   44190:	d9014717 	ldw	r4,1308(sp)
   44194:	11015c0e 	bge	r2,r4,44708 <___vfprintf_internal_r+0xe80>
   44198:	dc400d17 	ldw	r17,52(sp)
   4419c:	d9814917 	ldw	r6,1316(sp)
   441a0:	00800044 	movi	r2,1
   441a4:	94800044 	addi	r18,r18,1
   441a8:	8c400044 	addi	r17,r17,1
   441ac:	18800115 	stw	r2,4(r3)
   441b0:	008001c4 	movi	r2,7
   441b4:	19800015 	stw	r6,0(r3)
   441b8:	dc800e15 	stw	r18,56(sp)
   441bc:	dc400d15 	stw	r17,52(sp)
   441c0:	14431016 	blt	r2,r17,44e04 <___vfprintf_internal_r+0x157c>
   441c4:	18c00204 	addi	r3,r3,8
   441c8:	d8814717 	ldw	r2,1308(sp)
   441cc:	143fffc4 	addi	r16,r2,-1
   441d0:	043f2b0e 	bge	zero,r16,43e80 <___vfprintf_internal_r+0x5f8>
   441d4:	00800404 	movi	r2,16
   441d8:	1402a20e 	bge	r2,r16,44c64 <___vfprintf_internal_r+0x13dc>
   441dc:	dc400d17 	ldw	r17,52(sp)
   441e0:	1027883a 	mov	r19,r2
   441e4:	07000174 	movhi	fp,5
   441e8:	e73fa184 	addi	fp,fp,-378
   441ec:	050001c4 	movi	r20,7
   441f0:	00000306 	br	44200 <___vfprintf_internal_r+0x978>
   441f4:	18c00204 	addi	r3,r3,8
   441f8:	843ffc04 	addi	r16,r16,-16
   441fc:	9c029c0e 	bge	r19,r16,44c70 <___vfprintf_internal_r+0x13e8>
   44200:	94800404 	addi	r18,r18,16
   44204:	8c400044 	addi	r17,r17,1
   44208:	1f000015 	stw	fp,0(r3)
   4420c:	1cc00115 	stw	r19,4(r3)
   44210:	dc800e15 	stw	r18,56(sp)
   44214:	dc400d15 	stw	r17,52(sp)
   44218:	a47ff60e 	bge	r20,r17,441f4 <___vfprintf_internal_r+0x96c>
   4421c:	d9014f17 	ldw	r4,1340(sp)
   44220:	b00b883a 	mov	r5,r22
   44224:	d9800c04 	addi	r6,sp,48
   44228:	00438300 	call	43830 <__sprint_r>
   4422c:	103f4e1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   44230:	dc800e17 	ldw	r18,56(sp)
   44234:	dc400d17 	ldw	r17,52(sp)
   44238:	d8c01904 	addi	r3,sp,100
   4423c:	003fee06 	br	441f8 <___vfprintf_internal_r+0x970>
   44240:	d8802c0b 	ldhu	r2,176(sp)
   44244:	00ffffc4 	movi	r3,-1
   44248:	d8c14b15 	stw	r3,1324(sp)
   4424c:	1080100c 	andi	r2,r2,64
   44250:	103dcc1e 	bne	r2,zero,43984 <___vfprintf_internal_r+0xfc>
   44254:	003dce06 	br	43990 <___vfprintf_internal_r+0x108>
   44258:	d9014f17 	ldw	r4,1340(sp)
   4425c:	b00b883a 	mov	r5,r22
   44260:	d9800c04 	addi	r6,sp,48
   44264:	00438300 	call	43830 <__sprint_r>
   44268:	103f3f1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   4426c:	dc800e17 	ldw	r18,56(sp)
   44270:	003f2e06 	br	43f2c <___vfprintf_internal_r+0x6a4>
   44274:	d9414c17 	ldw	r5,1328(sp)
   44278:	29400414 	ori	r5,r5,16
   4427c:	d9414c15 	stw	r5,1328(sp)
   44280:	d9814c17 	ldw	r6,1328(sp)
   44284:	3080080c 	andi	r2,r6,32
   44288:	10014f1e 	bne	r2,zero,447c8 <___vfprintf_internal_r+0xf40>
   4428c:	d8c14c17 	ldw	r3,1328(sp)
   44290:	1880040c 	andi	r2,r3,16
   44294:	1002ea1e 	bne	r2,zero,44e40 <___vfprintf_internal_r+0x15b8>
   44298:	d9014c17 	ldw	r4,1328(sp)
   4429c:	2080100c 	andi	r2,r4,64
   442a0:	1002e726 	beq	r2,zero,44e40 <___vfprintf_internal_r+0x15b8>
   442a4:	3880000f 	ldh	r2,0(r7)
   442a8:	39c00104 	addi	r7,r7,4
   442ac:	d9c14015 	stw	r7,1280(sp)
   442b0:	1023d7fa 	srai	r17,r2,31
   442b4:	1021883a 	mov	r16,r2
   442b8:	88037216 	blt	r17,zero,45084 <___vfprintf_internal_r+0x17fc>
   442bc:	01000044 	movi	r4,1
   442c0:	98000416 	blt	r19,zero,442d4 <___vfprintf_internal_r+0xa4c>
   442c4:	d8c14c17 	ldw	r3,1328(sp)
   442c8:	00bfdfc4 	movi	r2,-129
   442cc:	1886703a 	and	r3,r3,r2
   442d0:	d8c14c15 	stw	r3,1328(sp)
   442d4:	8444b03a 	or	r2,r16,r17
   442d8:	1002261e 	bne	r2,zero,44b74 <___vfprintf_internal_r+0x12ec>
   442dc:	9802251e 	bne	r19,zero,44b74 <___vfprintf_internal_r+0x12ec>
   442e0:	20803fcc 	andi	r2,r4,255
   442e4:	10029b26 	beq	r2,zero,44d54 <___vfprintf_internal_r+0x14cc>
   442e8:	d8c01904 	addi	r3,sp,100
   442ec:	dd000f04 	addi	r20,sp,60
   442f0:	d8c14115 	stw	r3,1284(sp)
   442f4:	d8c14117 	ldw	r3,1284(sp)
   442f8:	dcc14515 	stw	r19,1300(sp)
   442fc:	a0c5c83a 	sub	r2,r20,r3
   44300:	11c00a04 	addi	r7,r2,40
   44304:	99c0010e 	bge	r19,r7,4430c <___vfprintf_internal_r+0xa84>
   44308:	d9c14515 	stw	r7,1300(sp)
   4430c:	dcc14615 	stw	r19,1304(sp)
   44310:	d8800407 	ldb	r2,16(sp)
   44314:	103e4c26 	beq	r2,zero,43c48 <___vfprintf_internal_r+0x3c0>
   44318:	d8814517 	ldw	r2,1300(sp)
   4431c:	10800044 	addi	r2,r2,1
   44320:	d8814515 	stw	r2,1300(sp)
   44324:	003e4806 	br	43c48 <___vfprintf_internal_r+0x3c0>
   44328:	d9814c17 	ldw	r6,1328(sp)
   4432c:	31800414 	ori	r6,r6,16
   44330:	d9814c15 	stw	r6,1328(sp)
   44334:	d8c14c17 	ldw	r3,1328(sp)
   44338:	1880080c 	andi	r2,r3,32
   4433c:	1001271e 	bne	r2,zero,447dc <___vfprintf_internal_r+0xf54>
   44340:	d9414c17 	ldw	r5,1328(sp)
   44344:	2880040c 	andi	r2,r5,16
   44348:	1002b61e 	bne	r2,zero,44e24 <___vfprintf_internal_r+0x159c>
   4434c:	d9814c17 	ldw	r6,1328(sp)
   44350:	3080100c 	andi	r2,r6,64
   44354:	1002b326 	beq	r2,zero,44e24 <___vfprintf_internal_r+0x159c>
   44358:	3c00000b 	ldhu	r16,0(r7)
   4435c:	0009883a 	mov	r4,zero
   44360:	39c00104 	addi	r7,r7,4
   44364:	0023883a 	mov	r17,zero
   44368:	d9c14015 	stw	r7,1280(sp)
   4436c:	d8000405 	stb	zero,16(sp)
   44370:	003fd306 	br	442c0 <___vfprintf_internal_r+0xa38>
   44374:	d9014c17 	ldw	r4,1328(sp)
   44378:	21000414 	ori	r4,r4,16
   4437c:	d9014c15 	stw	r4,1328(sp)
   44380:	d9414c17 	ldw	r5,1328(sp)
   44384:	2880080c 	andi	r2,r5,32
   44388:	1001081e 	bne	r2,zero,447ac <___vfprintf_internal_r+0xf24>
   4438c:	d8c14c17 	ldw	r3,1328(sp)
   44390:	1880040c 	andi	r2,r3,16
   44394:	1002b01e 	bne	r2,zero,44e58 <___vfprintf_internal_r+0x15d0>
   44398:	d9014c17 	ldw	r4,1328(sp)
   4439c:	2080100c 	andi	r2,r4,64
   443a0:	1002ad26 	beq	r2,zero,44e58 <___vfprintf_internal_r+0x15d0>
   443a4:	3c00000b 	ldhu	r16,0(r7)
   443a8:	01000044 	movi	r4,1
   443ac:	39c00104 	addi	r7,r7,4
   443b0:	0023883a 	mov	r17,zero
   443b4:	d9c14015 	stw	r7,1280(sp)
   443b8:	d8000405 	stb	zero,16(sp)
   443bc:	003fc006 	br	442c0 <___vfprintf_internal_r+0xa38>
   443c0:	d9014f17 	ldw	r4,1340(sp)
   443c4:	b00b883a 	mov	r5,r22
   443c8:	d9800c04 	addi	r6,sp,48
   443cc:	00438300 	call	43830 <__sprint_r>
   443d0:	103ee51e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   443d4:	dc800e17 	ldw	r18,56(sp)
   443d8:	d8c01904 	addi	r3,sp,100
   443dc:	d9814c17 	ldw	r6,1328(sp)
   443e0:	3080004c 	andi	r2,r6,1
   443e4:	1005003a 	cmpeq	r2,r2,zero
   443e8:	103ea51e 	bne	r2,zero,43e80 <___vfprintf_internal_r+0x5f8>
   443ec:	00800044 	movi	r2,1
   443f0:	dc400d17 	ldw	r17,52(sp)
   443f4:	18800115 	stw	r2,4(r3)
   443f8:	d8814917 	ldw	r2,1316(sp)
   443fc:	94800044 	addi	r18,r18,1
   44400:	8c400044 	addi	r17,r17,1
   44404:	18800015 	stw	r2,0(r3)
   44408:	008001c4 	movi	r2,7
   4440c:	dc800e15 	stw	r18,56(sp)
   44410:	dc400d15 	stw	r17,52(sp)
   44414:	14421e0e 	bge	r2,r17,44c90 <___vfprintf_internal_r+0x1408>
   44418:	d9014f17 	ldw	r4,1340(sp)
   4441c:	b00b883a 	mov	r5,r22
   44420:	d9800c04 	addi	r6,sp,48
   44424:	00438300 	call	43830 <__sprint_r>
   44428:	103ecf1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   4442c:	dc800e17 	ldw	r18,56(sp)
   44430:	d8c01904 	addi	r3,sp,100
   44434:	003e9206 	br	43e80 <___vfprintf_internal_r+0x5f8>
   44438:	d9014f17 	ldw	r4,1340(sp)
   4443c:	b00b883a 	mov	r5,r22
   44440:	d9800c04 	addi	r6,sp,48
   44444:	00438300 	call	43830 <__sprint_r>
   44448:	103ec026 	beq	r2,zero,43f4c <___vfprintf_internal_r+0x6c4>
   4444c:	003ec606 	br	43f68 <___vfprintf_internal_r+0x6e0>
   44450:	d9014f17 	ldw	r4,1340(sp)
   44454:	b00b883a 	mov	r5,r22
   44458:	d9800c04 	addi	r6,sp,48
   4445c:	d9c15115 	stw	r7,1348(sp)
   44460:	00438300 	call	43830 <__sprint_r>
   44464:	d9c15117 	ldw	r7,1348(sp)
   44468:	103ebf1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   4446c:	dc800e17 	ldw	r18,56(sp)
   44470:	dc400d17 	ldw	r17,52(sp)
   44474:	dd401904 	addi	r21,sp,100
   44478:	003e7406 	br	43e4c <___vfprintf_internal_r+0x5c4>
   4447c:	d9014f17 	ldw	r4,1340(sp)
   44480:	b00b883a 	mov	r5,r22
   44484:	d9800c04 	addi	r6,sp,48
   44488:	d9c15115 	stw	r7,1348(sp)
   4448c:	00438300 	call	43830 <__sprint_r>
   44490:	d9c15117 	ldw	r7,1348(sp)
   44494:	103eb41e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   44498:	dd401904 	addi	r21,sp,100
   4449c:	003d6d06 	br	43a54 <___vfprintf_internal_r+0x1cc>
   444a0:	d9014f17 	ldw	r4,1340(sp)
   444a4:	b00b883a 	mov	r5,r22
   444a8:	d9800c04 	addi	r6,sp,48
   444ac:	d9c15115 	stw	r7,1348(sp)
   444b0:	00438300 	call	43830 <__sprint_r>
   444b4:	d9c15117 	ldw	r7,1348(sp)
   444b8:	103eab1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   444bc:	dc800e17 	ldw	r18,56(sp)
   444c0:	dc400d17 	ldw	r17,52(sp)
   444c4:	dd401904 	addi	r21,sp,100
   444c8:	003e3406 	br	43d9c <___vfprintf_internal_r+0x514>
   444cc:	d9014f17 	ldw	r4,1340(sp)
   444d0:	b00b883a 	mov	r5,r22
   444d4:	d9800c04 	addi	r6,sp,48
   444d8:	d9c15115 	stw	r7,1348(sp)
   444dc:	00438300 	call	43830 <__sprint_r>
   444e0:	d9c15117 	ldw	r7,1348(sp)
   444e4:	103ea01e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   444e8:	dc800e17 	ldw	r18,56(sp)
   444ec:	dc400d17 	ldw	r17,52(sp)
   444f0:	dd401904 	addi	r21,sp,100
   444f4:	003e1c06 	br	43d68 <___vfprintf_internal_r+0x4e0>
   444f8:	d9014f17 	ldw	r4,1340(sp)
   444fc:	b00b883a 	mov	r5,r22
   44500:	d9800c04 	addi	r6,sp,48
   44504:	d9c15115 	stw	r7,1348(sp)
   44508:	00438300 	call	43830 <__sprint_r>
   4450c:	d9c15117 	ldw	r7,1348(sp)
   44510:	103e951e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   44514:	dc800e17 	ldw	r18,56(sp)
   44518:	dc400d17 	ldw	r17,52(sp)
   4451c:	dd401904 	addi	r21,sp,100
   44520:	003e0406 	br	43d34 <___vfprintf_internal_r+0x4ac>
   44524:	d9000517 	ldw	r4,20(sp)
   44528:	0102520e 	bge	zero,r4,44e74 <___vfprintf_internal_r+0x15ec>
   4452c:	d9814717 	ldw	r6,1308(sp)
   44530:	21807a16 	blt	r4,r6,4471c <___vfprintf_internal_r+0xe94>
   44534:	d8814117 	ldw	r2,1284(sp)
   44538:	91a5883a 	add	r18,r18,r6
   4453c:	8c400044 	addi	r17,r17,1
   44540:	a8800015 	stw	r2,0(r21)
   44544:	008001c4 	movi	r2,7
   44548:	a9800115 	stw	r6,4(r21)
   4454c:	dc800e15 	stw	r18,56(sp)
   44550:	dc400d15 	stw	r17,52(sp)
   44554:	1442f616 	blt	r2,r17,45130 <___vfprintf_internal_r+0x18a8>
   44558:	a8c00204 	addi	r3,r21,8
   4455c:	d9414717 	ldw	r5,1308(sp)
   44560:	2161c83a 	sub	r16,r4,r5
   44564:	043f9d0e 	bge	zero,r16,443dc <___vfprintf_internal_r+0xb54>
   44568:	00800404 	movi	r2,16
   4456c:	1402130e 	bge	r2,r16,44dbc <___vfprintf_internal_r+0x1534>
   44570:	dc400d17 	ldw	r17,52(sp)
   44574:	1027883a 	mov	r19,r2
   44578:	07000174 	movhi	fp,5
   4457c:	e73fa184 	addi	fp,fp,-378
   44580:	050001c4 	movi	r20,7
   44584:	00000306 	br	44594 <___vfprintf_internal_r+0xd0c>
   44588:	18c00204 	addi	r3,r3,8
   4458c:	843ffc04 	addi	r16,r16,-16
   44590:	9c020d0e 	bge	r19,r16,44dc8 <___vfprintf_internal_r+0x1540>
   44594:	94800404 	addi	r18,r18,16
   44598:	8c400044 	addi	r17,r17,1
   4459c:	1f000015 	stw	fp,0(r3)
   445a0:	1cc00115 	stw	r19,4(r3)
   445a4:	dc800e15 	stw	r18,56(sp)
   445a8:	dc400d15 	stw	r17,52(sp)
   445ac:	a47ff60e 	bge	r20,r17,44588 <___vfprintf_internal_r+0xd00>
   445b0:	d9014f17 	ldw	r4,1340(sp)
   445b4:	b00b883a 	mov	r5,r22
   445b8:	d9800c04 	addi	r6,sp,48
   445bc:	00438300 	call	43830 <__sprint_r>
   445c0:	103e691e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   445c4:	dc800e17 	ldw	r18,56(sp)
   445c8:	dc400d17 	ldw	r17,52(sp)
   445cc:	d8c01904 	addi	r3,sp,100
   445d0:	003fee06 	br	4458c <___vfprintf_internal_r+0xd04>
   445d4:	d8814717 	ldw	r2,1308(sp)
   445d8:	143fffc4 	addi	r16,r2,-1
   445dc:	043e970e 	bge	zero,r16,4403c <___vfprintf_internal_r+0x7b4>
   445e0:	00800404 	movi	r2,16
   445e4:	1400180e 	bge	r2,r16,44648 <___vfprintf_internal_r+0xdc0>
   445e8:	1029883a 	mov	r20,r2
   445ec:	07000174 	movhi	fp,5
   445f0:	e73fa184 	addi	fp,fp,-378
   445f4:	054001c4 	movi	r21,7
   445f8:	00000306 	br	44608 <___vfprintf_internal_r+0xd80>
   445fc:	9cc00204 	addi	r19,r19,8
   44600:	843ffc04 	addi	r16,r16,-16
   44604:	a400120e 	bge	r20,r16,44650 <___vfprintf_internal_r+0xdc8>
   44608:	94800404 	addi	r18,r18,16
   4460c:	8c400044 	addi	r17,r17,1
   44610:	9f000015 	stw	fp,0(r19)
   44614:	9d000115 	stw	r20,4(r19)
   44618:	dc800e15 	stw	r18,56(sp)
   4461c:	dc400d15 	stw	r17,52(sp)
   44620:	ac7ff60e 	bge	r21,r17,445fc <___vfprintf_internal_r+0xd74>
   44624:	d9014f17 	ldw	r4,1340(sp)
   44628:	b00b883a 	mov	r5,r22
   4462c:	d9800c04 	addi	r6,sp,48
   44630:	00438300 	call	43830 <__sprint_r>
   44634:	103e4c1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   44638:	dc800e17 	ldw	r18,56(sp)
   4463c:	dc400d17 	ldw	r17,52(sp)
   44640:	dcc01904 	addi	r19,sp,100
   44644:	003fee06 	br	44600 <___vfprintf_internal_r+0xd78>
   44648:	07000174 	movhi	fp,5
   4464c:	e73fa184 	addi	fp,fp,-378
   44650:	9425883a 	add	r18,r18,r16
   44654:	8c400044 	addi	r17,r17,1
   44658:	008001c4 	movi	r2,7
   4465c:	9f000015 	stw	fp,0(r19)
   44660:	9c000115 	stw	r16,4(r19)
   44664:	dc800e15 	stw	r18,56(sp)
   44668:	dc400d15 	stw	r17,52(sp)
   4466c:	147e720e 	bge	r2,r17,44038 <___vfprintf_internal_r+0x7b0>
   44670:	d9014f17 	ldw	r4,1340(sp)
   44674:	b00b883a 	mov	r5,r22
   44678:	d9800c04 	addi	r6,sp,48
   4467c:	00438300 	call	43830 <__sprint_r>
   44680:	103e391e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   44684:	dc800e17 	ldw	r18,56(sp)
   44688:	dc400d17 	ldw	r17,52(sp)
   4468c:	dcc01904 	addi	r19,sp,100
   44690:	003e6a06 	br	4403c <___vfprintf_internal_r+0x7b4>
   44694:	d9014f17 	ldw	r4,1340(sp)
   44698:	b00b883a 	mov	r5,r22
   4469c:	d9800c04 	addi	r6,sp,48
   446a0:	d9c15115 	stw	r7,1348(sp)
   446a4:	00438300 	call	43830 <__sprint_r>
   446a8:	d9c15117 	ldw	r7,1348(sp)
   446ac:	103e2e1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   446b0:	dc800e17 	ldw	r18,56(sp)
   446b4:	dc400d17 	ldw	r17,52(sp)
   446b8:	dd401904 	addi	r21,sp,100
   446bc:	003dba06 	br	43da8 <___vfprintf_internal_r+0x520>
   446c0:	d9014f17 	ldw	r4,1340(sp)
   446c4:	b00b883a 	mov	r5,r22
   446c8:	d9800c04 	addi	r6,sp,48
   446cc:	00438300 	call	43830 <__sprint_r>
   446d0:	103e251e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   446d4:	dc800e17 	ldw	r18,56(sp)
   446d8:	dc400d17 	ldw	r17,52(sp)
   446dc:	dcc01904 	addi	r19,sp,100
   446e0:	003e4206 	br	43fec <___vfprintf_internal_r+0x764>
   446e4:	d9014f17 	ldw	r4,1340(sp)
   446e8:	b00b883a 	mov	r5,r22
   446ec:	d9800c04 	addi	r6,sp,48
   446f0:	00438300 	call	43830 <__sprint_r>
   446f4:	103e1c1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   446f8:	dc800e17 	ldw	r18,56(sp)
   446fc:	dc400d17 	ldw	r17,52(sp)
   44700:	d8c01904 	addi	r3,sp,100
   44704:	003e2e06 	br	43fc0 <___vfprintf_internal_r+0x738>
   44708:	d9414c17 	ldw	r5,1328(sp)
   4470c:	2880004c 	andi	r2,r5,1
   44710:	1005003a 	cmpeq	r2,r2,zero
   44714:	103dda1e 	bne	r2,zero,43e80 <___vfprintf_internal_r+0x5f8>
   44718:	003e9f06 	br	44198 <___vfprintf_internal_r+0x910>
   4471c:	d8c14117 	ldw	r3,1284(sp)
   44720:	9125883a 	add	r18,r18,r4
   44724:	8c400044 	addi	r17,r17,1
   44728:	008001c4 	movi	r2,7
   4472c:	a8c00015 	stw	r3,0(r21)
   44730:	a9000115 	stw	r4,4(r21)
   44734:	dc800e15 	stw	r18,56(sp)
   44738:	dc400d15 	stw	r17,52(sp)
   4473c:	14426616 	blt	r2,r17,450d8 <___vfprintf_internal_r+0x1850>
   44740:	a8c00204 	addi	r3,r21,8
   44744:	d9414917 	ldw	r5,1316(sp)
   44748:	00800044 	movi	r2,1
   4474c:	94800044 	addi	r18,r18,1
   44750:	8c400044 	addi	r17,r17,1
   44754:	18800115 	stw	r2,4(r3)
   44758:	008001c4 	movi	r2,7
   4475c:	19400015 	stw	r5,0(r3)
   44760:	dc800e15 	stw	r18,56(sp)
   44764:	dc400d15 	stw	r17,52(sp)
   44768:	2021883a 	mov	r16,r4
   4476c:	14425016 	blt	r2,r17,450b0 <___vfprintf_internal_r+0x1828>
   44770:	19400204 	addi	r5,r3,8
   44774:	d9814717 	ldw	r6,1308(sp)
   44778:	8c400044 	addi	r17,r17,1
   4477c:	dc400d15 	stw	r17,52(sp)
   44780:	3107c83a 	sub	r3,r6,r4
   44784:	d9014117 	ldw	r4,1284(sp)
   44788:	90e5883a 	add	r18,r18,r3
   4478c:	28c00115 	stw	r3,4(r5)
   44790:	8105883a 	add	r2,r16,r4
   44794:	28800015 	stw	r2,0(r5)
   44798:	008001c4 	movi	r2,7
   4479c:	dc800e15 	stw	r18,56(sp)
   447a0:	147f1d16 	blt	r2,r17,44418 <___vfprintf_internal_r+0xb90>
   447a4:	28c00204 	addi	r3,r5,8
   447a8:	003db506 	br	43e80 <___vfprintf_internal_r+0x5f8>
   447ac:	3c000017 	ldw	r16,0(r7)
   447b0:	3c400117 	ldw	r17,4(r7)
   447b4:	39800204 	addi	r6,r7,8
   447b8:	01000044 	movi	r4,1
   447bc:	d9814015 	stw	r6,1280(sp)
   447c0:	d8000405 	stb	zero,16(sp)
   447c4:	003ebe06 	br	442c0 <___vfprintf_internal_r+0xa38>
   447c8:	3c000017 	ldw	r16,0(r7)
   447cc:	3c400117 	ldw	r17,4(r7)
   447d0:	38800204 	addi	r2,r7,8
   447d4:	d8814015 	stw	r2,1280(sp)
   447d8:	003eb706 	br	442b8 <___vfprintf_internal_r+0xa30>
   447dc:	3c000017 	ldw	r16,0(r7)
   447e0:	3c400117 	ldw	r17,4(r7)
   447e4:	39000204 	addi	r4,r7,8
   447e8:	d9014015 	stw	r4,1280(sp)
   447ec:	0009883a 	mov	r4,zero
   447f0:	d8000405 	stb	zero,16(sp)
   447f4:	003eb206 	br	442c0 <___vfprintf_internal_r+0xa38>
   447f8:	38c00017 	ldw	r3,0(r7)
   447fc:	39c00104 	addi	r7,r7,4
   44800:	d8c14a15 	stw	r3,1320(sp)
   44804:	1800d10e 	bge	r3,zero,44b4c <___vfprintf_internal_r+0x12c4>
   44808:	00c7c83a 	sub	r3,zero,r3
   4480c:	d8c14a15 	stw	r3,1320(sp)
   44810:	d9014c17 	ldw	r4,1328(sp)
   44814:	b8c00007 	ldb	r3,0(r23)
   44818:	21000114 	ori	r4,r4,4
   4481c:	d9014c15 	stw	r4,1328(sp)
   44820:	003c9806 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44824:	d9814c17 	ldw	r6,1328(sp)
   44828:	3080080c 	andi	r2,r6,32
   4482c:	1001f026 	beq	r2,zero,44ff0 <___vfprintf_internal_r+0x1768>
   44830:	d9014b17 	ldw	r4,1324(sp)
   44834:	38800017 	ldw	r2,0(r7)
   44838:	39c00104 	addi	r7,r7,4
   4483c:	d9c14015 	stw	r7,1280(sp)
   44840:	2007d7fa 	srai	r3,r4,31
   44844:	d9c14017 	ldw	r7,1280(sp)
   44848:	11000015 	stw	r4,0(r2)
   4484c:	10c00115 	stw	r3,4(r2)
   44850:	003c6906 	br	439f8 <___vfprintf_internal_r+0x170>
   44854:	b8c00007 	ldb	r3,0(r23)
   44858:	00801b04 	movi	r2,108
   4485c:	18824f26 	beq	r3,r2,4519c <___vfprintf_internal_r+0x1914>
   44860:	d9414c17 	ldw	r5,1328(sp)
   44864:	29400414 	ori	r5,r5,16
   44868:	d9414c15 	stw	r5,1328(sp)
   4486c:	003c8506 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44870:	d9814c17 	ldw	r6,1328(sp)
   44874:	b8c00007 	ldb	r3,0(r23)
   44878:	31800814 	ori	r6,r6,32
   4487c:	d9814c15 	stw	r6,1328(sp)
   44880:	003c8006 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44884:	d8814c17 	ldw	r2,1328(sp)
   44888:	3c000017 	ldw	r16,0(r7)
   4488c:	00c01e04 	movi	r3,120
   44890:	10800094 	ori	r2,r2,2
   44894:	d8814c15 	stw	r2,1328(sp)
   44898:	39c00104 	addi	r7,r7,4
   4489c:	01400174 	movhi	r5,5
   448a0:	297f8a04 	addi	r5,r5,-472
   448a4:	00800c04 	movi	r2,48
   448a8:	0023883a 	mov	r17,zero
   448ac:	01000084 	movi	r4,2
   448b0:	d9c14015 	stw	r7,1280(sp)
   448b4:	d8c14d15 	stw	r3,1332(sp)
   448b8:	d9414415 	stw	r5,1296(sp)
   448bc:	d8800445 	stb	r2,17(sp)
   448c0:	d8c00485 	stb	r3,18(sp)
   448c4:	d8000405 	stb	zero,16(sp)
   448c8:	003e7d06 	br	442c0 <___vfprintf_internal_r+0xa38>
   448cc:	d8814c17 	ldw	r2,1328(sp)
   448d0:	b8c00007 	ldb	r3,0(r23)
   448d4:	10801014 	ori	r2,r2,64
   448d8:	d8814c15 	stw	r2,1328(sp)
   448dc:	003c6906 	br	43a84 <___vfprintf_internal_r+0x1fc>
   448e0:	d9414c17 	ldw	r5,1328(sp)
   448e4:	2880020c 	andi	r2,r5,8
   448e8:	1001df26 	beq	r2,zero,45068 <___vfprintf_internal_r+0x17e0>
   448ec:	39800017 	ldw	r6,0(r7)
   448f0:	38800204 	addi	r2,r7,8
   448f4:	d8814015 	stw	r2,1280(sp)
   448f8:	d9814215 	stw	r6,1288(sp)
   448fc:	39c00117 	ldw	r7,4(r7)
   44900:	d9c14315 	stw	r7,1292(sp)
   44904:	d9014217 	ldw	r4,1288(sp)
   44908:	d9414317 	ldw	r5,1292(sp)
   4490c:	004a2280 	call	4a228 <__isinfd>
   44910:	10021726 	beq	r2,zero,45170 <___vfprintf_internal_r+0x18e8>
   44914:	d9014217 	ldw	r4,1288(sp)
   44918:	d9414317 	ldw	r5,1292(sp)
   4491c:	000d883a 	mov	r6,zero
   44920:	000f883a 	mov	r7,zero
   44924:	004c2700 	call	4c270 <__ltdf2>
   44928:	1002ca16 	blt	r2,zero,45454 <___vfprintf_internal_r+0x1bcc>
   4492c:	d9414d17 	ldw	r5,1332(sp)
   44930:	008011c4 	movi	r2,71
   44934:	11420a16 	blt	r2,r5,45160 <___vfprintf_internal_r+0x18d8>
   44938:	01800174 	movhi	r6,5
   4493c:	31bf8f04 	addi	r6,r6,-452
   44940:	d9814115 	stw	r6,1284(sp)
   44944:	d9014c17 	ldw	r4,1328(sp)
   44948:	00c000c4 	movi	r3,3
   4494c:	00bfdfc4 	movi	r2,-129
   44950:	2088703a 	and	r4,r4,r2
   44954:	180f883a 	mov	r7,r3
   44958:	d8c14515 	stw	r3,1300(sp)
   4495c:	d9014c15 	stw	r4,1328(sp)
   44960:	d8014615 	stw	zero,1304(sp)
   44964:	003e6a06 	br	44310 <___vfprintf_internal_r+0xa88>
   44968:	38800017 	ldw	r2,0(r7)
   4496c:	00c00044 	movi	r3,1
   44970:	39c00104 	addi	r7,r7,4
   44974:	d9c14015 	stw	r7,1280(sp)
   44978:	d9000f04 	addi	r4,sp,60
   4497c:	180f883a 	mov	r7,r3
   44980:	d8c14515 	stw	r3,1300(sp)
   44984:	d9014115 	stw	r4,1284(sp)
   44988:	d8800f05 	stb	r2,60(sp)
   4498c:	d8000405 	stb	zero,16(sp)
   44990:	003cac06 	br	43c44 <___vfprintf_internal_r+0x3bc>
   44994:	01400174 	movhi	r5,5
   44998:	297f9504 	addi	r5,r5,-428
   4499c:	d9414415 	stw	r5,1296(sp)
   449a0:	d9814c17 	ldw	r6,1328(sp)
   449a4:	3080080c 	andi	r2,r6,32
   449a8:	1000f926 	beq	r2,zero,44d90 <___vfprintf_internal_r+0x1508>
   449ac:	3c000017 	ldw	r16,0(r7)
   449b0:	3c400117 	ldw	r17,4(r7)
   449b4:	38800204 	addi	r2,r7,8
   449b8:	d8814015 	stw	r2,1280(sp)
   449bc:	d9414c17 	ldw	r5,1328(sp)
   449c0:	2880004c 	andi	r2,r5,1
   449c4:	1005003a 	cmpeq	r2,r2,zero
   449c8:	1000b31e 	bne	r2,zero,44c98 <___vfprintf_internal_r+0x1410>
   449cc:	8444b03a 	or	r2,r16,r17
   449d0:	1000b126 	beq	r2,zero,44c98 <___vfprintf_internal_r+0x1410>
   449d4:	d9814d17 	ldw	r6,1332(sp)
   449d8:	29400094 	ori	r5,r5,2
   449dc:	00800c04 	movi	r2,48
   449e0:	01000084 	movi	r4,2
   449e4:	d9414c15 	stw	r5,1328(sp)
   449e8:	d8800445 	stb	r2,17(sp)
   449ec:	d9800485 	stb	r6,18(sp)
   449f0:	d8000405 	stb	zero,16(sp)
   449f4:	003e3206 	br	442c0 <___vfprintf_internal_r+0xa38>
   449f8:	01800174 	movhi	r6,5
   449fc:	31bf8a04 	addi	r6,r6,-472
   44a00:	d9814415 	stw	r6,1296(sp)
   44a04:	003fe606 	br	449a0 <___vfprintf_internal_r+0x1118>
   44a08:	00800ac4 	movi	r2,43
   44a0c:	d8800405 	stb	r2,16(sp)
   44a10:	b8c00007 	ldb	r3,0(r23)
   44a14:	003c1b06 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44a18:	d8814c17 	ldw	r2,1328(sp)
   44a1c:	b8c00007 	ldb	r3,0(r23)
   44a20:	10800054 	ori	r2,r2,1
   44a24:	d8814c15 	stw	r2,1328(sp)
   44a28:	003c1606 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44a2c:	d8800407 	ldb	r2,16(sp)
   44a30:	1000461e 	bne	r2,zero,44b4c <___vfprintf_internal_r+0x12c4>
   44a34:	00800804 	movi	r2,32
   44a38:	d8800405 	stb	r2,16(sp)
   44a3c:	b8c00007 	ldb	r3,0(r23)
   44a40:	003c1006 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44a44:	d9814c17 	ldw	r6,1328(sp)
   44a48:	b8c00007 	ldb	r3,0(r23)
   44a4c:	31800214 	ori	r6,r6,8
   44a50:	d9814c15 	stw	r6,1328(sp)
   44a54:	003c0b06 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44a58:	0007883a 	mov	r3,zero
   44a5c:	01000244 	movi	r4,9
   44a60:	188002a4 	muli	r2,r3,10
   44a64:	b8c00007 	ldb	r3,0(r23)
   44a68:	d9814d17 	ldw	r6,1332(sp)
   44a6c:	bdc00044 	addi	r23,r23,1
   44a70:	d8c14d15 	stw	r3,1332(sp)
   44a74:	d9414d17 	ldw	r5,1332(sp)
   44a78:	3085883a 	add	r2,r6,r2
   44a7c:	10fff404 	addi	r3,r2,-48
   44a80:	28bff404 	addi	r2,r5,-48
   44a84:	20bff62e 	bgeu	r4,r2,44a60 <___vfprintf_internal_r+0x11d8>
   44a88:	d8c14a15 	stw	r3,1320(sp)
   44a8c:	003bff06 	br	43a8c <___vfprintf_internal_r+0x204>
   44a90:	d9414c17 	ldw	r5,1328(sp)
   44a94:	b8c00007 	ldb	r3,0(r23)
   44a98:	29402014 	ori	r5,r5,128
   44a9c:	d9414c15 	stw	r5,1328(sp)
   44aa0:	003bf806 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44aa4:	b8c00007 	ldb	r3,0(r23)
   44aa8:	00800a84 	movi	r2,42
   44aac:	bdc00044 	addi	r23,r23,1
   44ab0:	18831526 	beq	r3,r2,45708 <___vfprintf_internal_r+0x1e80>
   44ab4:	d8c14d15 	stw	r3,1332(sp)
   44ab8:	18bff404 	addi	r2,r3,-48
   44abc:	00c00244 	movi	r3,9
   44ac0:	18827836 	bltu	r3,r2,454a4 <___vfprintf_internal_r+0x1c1c>
   44ac4:	000d883a 	mov	r6,zero
   44ac8:	308002a4 	muli	r2,r6,10
   44acc:	b9800007 	ldb	r6,0(r23)
   44ad0:	d9414d17 	ldw	r5,1332(sp)
   44ad4:	bdc00044 	addi	r23,r23,1
   44ad8:	d9814d15 	stw	r6,1332(sp)
   44adc:	d9014d17 	ldw	r4,1332(sp)
   44ae0:	1145883a 	add	r2,r2,r5
   44ae4:	11bff404 	addi	r6,r2,-48
   44ae8:	20bff404 	addi	r2,r4,-48
   44aec:	18bff62e 	bgeu	r3,r2,44ac8 <___vfprintf_internal_r+0x1240>
   44af0:	3027883a 	mov	r19,r6
   44af4:	303be50e 	bge	r6,zero,43a8c <___vfprintf_internal_r+0x204>
   44af8:	04ffffc4 	movi	r19,-1
   44afc:	003be306 	br	43a8c <___vfprintf_internal_r+0x204>
   44b00:	d8000405 	stb	zero,16(sp)
   44b04:	39800017 	ldw	r6,0(r7)
   44b08:	39c00104 	addi	r7,r7,4
   44b0c:	d9c14015 	stw	r7,1280(sp)
   44b10:	d9814115 	stw	r6,1284(sp)
   44b14:	3001c926 	beq	r6,zero,4523c <___vfprintf_internal_r+0x19b4>
   44b18:	98000e16 	blt	r19,zero,44b54 <___vfprintf_internal_r+0x12cc>
   44b1c:	d9014117 	ldw	r4,1284(sp)
   44b20:	000b883a 	mov	r5,zero
   44b24:	980d883a 	mov	r6,r19
   44b28:	00489440 	call	48944 <memchr>
   44b2c:	10025926 	beq	r2,zero,45494 <___vfprintf_internal_r+0x1c0c>
   44b30:	d8c14117 	ldw	r3,1284(sp)
   44b34:	10cfc83a 	sub	r7,r2,r3
   44b38:	99c19e16 	blt	r19,r7,451b4 <___vfprintf_internal_r+0x192c>
   44b3c:	d9c14515 	stw	r7,1300(sp)
   44b40:	38000916 	blt	r7,zero,44b68 <___vfprintf_internal_r+0x12e0>
   44b44:	d8014615 	stw	zero,1304(sp)
   44b48:	003df106 	br	44310 <___vfprintf_internal_r+0xa88>
   44b4c:	b8c00007 	ldb	r3,0(r23)
   44b50:	003bcc06 	br	43a84 <___vfprintf_internal_r+0x1fc>
   44b54:	d9014117 	ldw	r4,1284(sp)
   44b58:	00437bc0 	call	437bc <strlen>
   44b5c:	d8814515 	stw	r2,1300(sp)
   44b60:	100f883a 	mov	r7,r2
   44b64:	103ff70e 	bge	r2,zero,44b44 <___vfprintf_internal_r+0x12bc>
   44b68:	d8014515 	stw	zero,1300(sp)
   44b6c:	d8014615 	stw	zero,1304(sp)
   44b70:	003de706 	br	44310 <___vfprintf_internal_r+0xa88>
   44b74:	20c03fcc 	andi	r3,r4,255
   44b78:	00800044 	movi	r2,1
   44b7c:	18802d26 	beq	r3,r2,44c34 <___vfprintf_internal_r+0x13ac>
   44b80:	18800e36 	bltu	r3,r2,44bbc <___vfprintf_internal_r+0x1334>
   44b84:	00800084 	movi	r2,2
   44b88:	1880fa26 	beq	r3,r2,44f74 <___vfprintf_internal_r+0x16ec>
   44b8c:	01000174 	movhi	r4,5
   44b90:	213f9a04 	addi	r4,r4,-408
   44b94:	00437bc0 	call	437bc <strlen>
   44b98:	100f883a 	mov	r7,r2
   44b9c:	dcc14515 	stw	r19,1300(sp)
   44ba0:	9880010e 	bge	r19,r2,44ba8 <___vfprintf_internal_r+0x1320>
   44ba4:	d8814515 	stw	r2,1300(sp)
   44ba8:	00800174 	movhi	r2,5
   44bac:	10bf9a04 	addi	r2,r2,-408
   44bb0:	dcc14615 	stw	r19,1304(sp)
   44bb4:	d8814115 	stw	r2,1284(sp)
   44bb8:	003dd506 	br	44310 <___vfprintf_internal_r+0xa88>
   44bbc:	d9401904 	addi	r5,sp,100
   44bc0:	dd000f04 	addi	r20,sp,60
   44bc4:	d9414115 	stw	r5,1284(sp)
   44bc8:	880a977a 	slli	r5,r17,29
   44bcc:	d9814117 	ldw	r6,1284(sp)
   44bd0:	8004d0fa 	srli	r2,r16,3
   44bd4:	8806d0fa 	srli	r3,r17,3
   44bd8:	810001cc 	andi	r4,r16,7
   44bdc:	2884b03a 	or	r2,r5,r2
   44be0:	31bfffc4 	addi	r6,r6,-1
   44be4:	21000c04 	addi	r4,r4,48
   44be8:	d9814115 	stw	r6,1284(sp)
   44bec:	10cab03a 	or	r5,r2,r3
   44bf0:	31000005 	stb	r4,0(r6)
   44bf4:	1021883a 	mov	r16,r2
   44bf8:	1823883a 	mov	r17,r3
   44bfc:	283ff21e 	bne	r5,zero,44bc8 <___vfprintf_internal_r+0x1340>
   44c00:	d8c14c17 	ldw	r3,1328(sp)
   44c04:	1880004c 	andi	r2,r3,1
   44c08:	1005003a 	cmpeq	r2,r2,zero
   44c0c:	103db91e 	bne	r2,zero,442f4 <___vfprintf_internal_r+0xa6c>
   44c10:	20803fcc 	andi	r2,r4,255
   44c14:	1080201c 	xori	r2,r2,128
   44c18:	10bfe004 	addi	r2,r2,-128
   44c1c:	00c00c04 	movi	r3,48
   44c20:	10fdb426 	beq	r2,r3,442f4 <___vfprintf_internal_r+0xa6c>
   44c24:	31bfffc4 	addi	r6,r6,-1
   44c28:	d9814115 	stw	r6,1284(sp)
   44c2c:	30c00005 	stb	r3,0(r6)
   44c30:	003db006 	br	442f4 <___vfprintf_internal_r+0xa6c>
   44c34:	88800068 	cmpgeui	r2,r17,1
   44c38:	10002c1e 	bne	r2,zero,44cec <___vfprintf_internal_r+0x1464>
   44c3c:	8800021e 	bne	r17,zero,44c48 <___vfprintf_internal_r+0x13c0>
   44c40:	00800244 	movi	r2,9
   44c44:	14002936 	bltu	r2,r16,44cec <___vfprintf_internal_r+0x1464>
   44c48:	d90018c4 	addi	r4,sp,99
   44c4c:	dd000f04 	addi	r20,sp,60
   44c50:	d9014115 	stw	r4,1284(sp)
   44c54:	d9014117 	ldw	r4,1284(sp)
   44c58:	80800c04 	addi	r2,r16,48
   44c5c:	20800005 	stb	r2,0(r4)
   44c60:	003da406 	br	442f4 <___vfprintf_internal_r+0xa6c>
   44c64:	dc400d17 	ldw	r17,52(sp)
   44c68:	07000174 	movhi	fp,5
   44c6c:	e73fa184 	addi	fp,fp,-378
   44c70:	9425883a 	add	r18,r18,r16
   44c74:	8c400044 	addi	r17,r17,1
   44c78:	008001c4 	movi	r2,7
   44c7c:	1f000015 	stw	fp,0(r3)
   44c80:	1c000115 	stw	r16,4(r3)
   44c84:	dc800e15 	stw	r18,56(sp)
   44c88:	dc400d15 	stw	r17,52(sp)
   44c8c:	147de216 	blt	r2,r17,44418 <___vfprintf_internal_r+0xb90>
   44c90:	18c00204 	addi	r3,r3,8
   44c94:	003c7a06 	br	43e80 <___vfprintf_internal_r+0x5f8>
   44c98:	01000084 	movi	r4,2
   44c9c:	d8000405 	stb	zero,16(sp)
   44ca0:	003d8706 	br	442c0 <___vfprintf_internal_r+0xa38>
   44ca4:	d9814c17 	ldw	r6,1328(sp)
   44ca8:	30c4703a 	and	r2,r6,r3
   44cac:	1005003a 	cmpeq	r2,r2,zero
   44cb0:	103cb926 	beq	r2,zero,43f98 <___vfprintf_internal_r+0x710>
   44cb4:	d9014117 	ldw	r4,1284(sp)
   44cb8:	94800044 	addi	r18,r18,1
   44cbc:	8c400044 	addi	r17,r17,1
   44cc0:	008001c4 	movi	r2,7
   44cc4:	a9000015 	stw	r4,0(r21)
   44cc8:	a8c00115 	stw	r3,4(r21)
   44ccc:	dc800e15 	stw	r18,56(sp)
   44cd0:	dc400d15 	stw	r17,52(sp)
   44cd4:	147e6616 	blt	r2,r17,44670 <___vfprintf_internal_r+0xde8>
   44cd8:	acc00204 	addi	r19,r21,8
   44cdc:	003cd706 	br	4403c <___vfprintf_internal_r+0x7b4>
   44ce0:	07000174 	movhi	fp,5
   44ce4:	e73fa184 	addi	fp,fp,-378
   44ce8:	003c4f06 	br	43e28 <___vfprintf_internal_r+0x5a0>
   44cec:	dd000f04 	addi	r20,sp,60
   44cf0:	dc801904 	addi	r18,sp,100
   44cf4:	8009883a 	mov	r4,r16
   44cf8:	880b883a 	mov	r5,r17
   44cfc:	01800284 	movi	r6,10
   44d00:	000f883a 	mov	r7,zero
   44d04:	004af800 	call	4af80 <__umoddi3>
   44d08:	12000c04 	addi	r8,r2,48
   44d0c:	94bfffc4 	addi	r18,r18,-1
   44d10:	8009883a 	mov	r4,r16
   44d14:	880b883a 	mov	r5,r17
   44d18:	01800284 	movi	r6,10
   44d1c:	000f883a 	mov	r7,zero
   44d20:	92000005 	stb	r8,0(r18)
   44d24:	004a9a40 	call	4a9a4 <__udivdi3>
   44d28:	1009883a 	mov	r4,r2
   44d2c:	1021883a 	mov	r16,r2
   44d30:	18800068 	cmpgeui	r2,r3,1
   44d34:	1823883a 	mov	r17,r3
   44d38:	103fee1e 	bne	r2,zero,44cf4 <___vfprintf_internal_r+0x146c>
   44d3c:	1800021e 	bne	r3,zero,44d48 <___vfprintf_internal_r+0x14c0>
   44d40:	00800244 	movi	r2,9
   44d44:	113feb36 	bltu	r2,r4,44cf4 <___vfprintf_internal_r+0x146c>
   44d48:	94bfffc4 	addi	r18,r18,-1
   44d4c:	dc814115 	stw	r18,1284(sp)
   44d50:	003fc006 	br	44c54 <___vfprintf_internal_r+0x13cc>
   44d54:	d9014c17 	ldw	r4,1328(sp)
   44d58:	2080004c 	andi	r2,r4,1
   44d5c:	10009a1e 	bne	r2,zero,44fc8 <___vfprintf_internal_r+0x1740>
   44d60:	d9401904 	addi	r5,sp,100
   44d64:	dd000f04 	addi	r20,sp,60
   44d68:	d9414115 	stw	r5,1284(sp)
   44d6c:	003d6106 	br	442f4 <___vfprintf_internal_r+0xa6c>
   44d70:	d9014f17 	ldw	r4,1340(sp)
   44d74:	b00b883a 	mov	r5,r22
   44d78:	d9800c04 	addi	r6,sp,48
   44d7c:	00438300 	call	43830 <__sprint_r>
   44d80:	103c791e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   44d84:	dc800e17 	ldw	r18,56(sp)
   44d88:	d8c01904 	addi	r3,sp,100
   44d8c:	003cff06 	br	4418c <___vfprintf_internal_r+0x904>
   44d90:	d8c14c17 	ldw	r3,1328(sp)
   44d94:	1880040c 	andi	r2,r3,16
   44d98:	1000711e 	bne	r2,zero,44f60 <___vfprintf_internal_r+0x16d8>
   44d9c:	d9014c17 	ldw	r4,1328(sp)
   44da0:	2080100c 	andi	r2,r4,64
   44da4:	10006e26 	beq	r2,zero,44f60 <___vfprintf_internal_r+0x16d8>
   44da8:	3c00000b 	ldhu	r16,0(r7)
   44dac:	0023883a 	mov	r17,zero
   44db0:	39c00104 	addi	r7,r7,4
   44db4:	d9c14015 	stw	r7,1280(sp)
   44db8:	003f0006 	br	449bc <___vfprintf_internal_r+0x1134>
   44dbc:	dc400d17 	ldw	r17,52(sp)
   44dc0:	07000174 	movhi	fp,5
   44dc4:	e73fa184 	addi	fp,fp,-378
   44dc8:	9425883a 	add	r18,r18,r16
   44dcc:	8c400044 	addi	r17,r17,1
   44dd0:	008001c4 	movi	r2,7
   44dd4:	1f000015 	stw	fp,0(r3)
   44dd8:	1c000115 	stw	r16,4(r3)
   44ddc:	dc800e15 	stw	r18,56(sp)
   44de0:	dc400d15 	stw	r17,52(sp)
   44de4:	147d7616 	blt	r2,r17,443c0 <___vfprintf_internal_r+0xb38>
   44de8:	18c00204 	addi	r3,r3,8
   44dec:	003d7b06 	br	443dc <___vfprintf_internal_r+0xb54>
   44df0:	dc800e17 	ldw	r18,56(sp)
   44df4:	dc400d17 	ldw	r17,52(sp)
   44df8:	07000174 	movhi	fp,5
   44dfc:	e73fa584 	addi	fp,fp,-362
   44e00:	003bc006 	br	43d04 <___vfprintf_internal_r+0x47c>
   44e04:	d9014f17 	ldw	r4,1340(sp)
   44e08:	b00b883a 	mov	r5,r22
   44e0c:	d9800c04 	addi	r6,sp,48
   44e10:	00438300 	call	43830 <__sprint_r>
   44e14:	103c541e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   44e18:	dc800e17 	ldw	r18,56(sp)
   44e1c:	d8c01904 	addi	r3,sp,100
   44e20:	003ce906 	br	441c8 <___vfprintf_internal_r+0x940>
   44e24:	3c000017 	ldw	r16,0(r7)
   44e28:	0009883a 	mov	r4,zero
   44e2c:	39c00104 	addi	r7,r7,4
   44e30:	0023883a 	mov	r17,zero
   44e34:	d9c14015 	stw	r7,1280(sp)
   44e38:	d8000405 	stb	zero,16(sp)
   44e3c:	003d2006 	br	442c0 <___vfprintf_internal_r+0xa38>
   44e40:	38800017 	ldw	r2,0(r7)
   44e44:	39c00104 	addi	r7,r7,4
   44e48:	d9c14015 	stw	r7,1280(sp)
   44e4c:	1023d7fa 	srai	r17,r2,31
   44e50:	1021883a 	mov	r16,r2
   44e54:	003d1806 	br	442b8 <___vfprintf_internal_r+0xa30>
   44e58:	3c000017 	ldw	r16,0(r7)
   44e5c:	01000044 	movi	r4,1
   44e60:	39c00104 	addi	r7,r7,4
   44e64:	0023883a 	mov	r17,zero
   44e68:	d9c14015 	stw	r7,1280(sp)
   44e6c:	d8000405 	stb	zero,16(sp)
   44e70:	003d1306 	br	442c0 <___vfprintf_internal_r+0xa38>
   44e74:	00800174 	movhi	r2,5
   44e78:	10bfa104 	addi	r2,r2,-380
   44e7c:	94800044 	addi	r18,r18,1
   44e80:	8c400044 	addi	r17,r17,1
   44e84:	a8800015 	stw	r2,0(r21)
   44e88:	00c00044 	movi	r3,1
   44e8c:	008001c4 	movi	r2,7
   44e90:	a8c00115 	stw	r3,4(r21)
   44e94:	dc800e15 	stw	r18,56(sp)
   44e98:	dc400d15 	stw	r17,52(sp)
   44e9c:	1440ca16 	blt	r2,r17,451c8 <___vfprintf_internal_r+0x1940>
   44ea0:	a8c00204 	addi	r3,r21,8
   44ea4:	2000061e 	bne	r4,zero,44ec0 <___vfprintf_internal_r+0x1638>
   44ea8:	d9414717 	ldw	r5,1308(sp)
   44eac:	2800041e 	bne	r5,zero,44ec0 <___vfprintf_internal_r+0x1638>
   44eb0:	d9814c17 	ldw	r6,1328(sp)
   44eb4:	3080004c 	andi	r2,r6,1
   44eb8:	1005003a 	cmpeq	r2,r2,zero
   44ebc:	103bf01e 	bne	r2,zero,43e80 <___vfprintf_internal_r+0x5f8>
   44ec0:	00800044 	movi	r2,1
   44ec4:	dc400d17 	ldw	r17,52(sp)
   44ec8:	18800115 	stw	r2,4(r3)
   44ecc:	d8814917 	ldw	r2,1316(sp)
   44ed0:	94800044 	addi	r18,r18,1
   44ed4:	8c400044 	addi	r17,r17,1
   44ed8:	18800015 	stw	r2,0(r3)
   44edc:	008001c4 	movi	r2,7
   44ee0:	dc800e15 	stw	r18,56(sp)
   44ee4:	dc400d15 	stw	r17,52(sp)
   44ee8:	1440ca16 	blt	r2,r17,45214 <___vfprintf_internal_r+0x198c>
   44eec:	18c00204 	addi	r3,r3,8
   44ef0:	0121c83a 	sub	r16,zero,r4
   44ef4:	0400500e 	bge	zero,r16,45038 <___vfprintf_internal_r+0x17b0>
   44ef8:	00800404 	movi	r2,16
   44efc:	1400800e 	bge	r2,r16,45100 <___vfprintf_internal_r+0x1878>
   44f00:	1027883a 	mov	r19,r2
   44f04:	07000174 	movhi	fp,5
   44f08:	e73fa184 	addi	fp,fp,-378
   44f0c:	050001c4 	movi	r20,7
   44f10:	00000306 	br	44f20 <___vfprintf_internal_r+0x1698>
   44f14:	18c00204 	addi	r3,r3,8
   44f18:	843ffc04 	addi	r16,r16,-16
   44f1c:	9c007a0e 	bge	r19,r16,45108 <___vfprintf_internal_r+0x1880>
   44f20:	94800404 	addi	r18,r18,16
   44f24:	8c400044 	addi	r17,r17,1
   44f28:	1f000015 	stw	fp,0(r3)
   44f2c:	1cc00115 	stw	r19,4(r3)
   44f30:	dc800e15 	stw	r18,56(sp)
   44f34:	dc400d15 	stw	r17,52(sp)
   44f38:	a47ff60e 	bge	r20,r17,44f14 <___vfprintf_internal_r+0x168c>
   44f3c:	d9014f17 	ldw	r4,1340(sp)
   44f40:	b00b883a 	mov	r5,r22
   44f44:	d9800c04 	addi	r6,sp,48
   44f48:	00438300 	call	43830 <__sprint_r>
   44f4c:	103c061e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   44f50:	dc800e17 	ldw	r18,56(sp)
   44f54:	dc400d17 	ldw	r17,52(sp)
   44f58:	d8c01904 	addi	r3,sp,100
   44f5c:	003fee06 	br	44f18 <___vfprintf_internal_r+0x1690>
   44f60:	3c000017 	ldw	r16,0(r7)
   44f64:	0023883a 	mov	r17,zero
   44f68:	39c00104 	addi	r7,r7,4
   44f6c:	d9c14015 	stw	r7,1280(sp)
   44f70:	003e9206 	br	449bc <___vfprintf_internal_r+0x1134>
   44f74:	d9401904 	addi	r5,sp,100
   44f78:	dd000f04 	addi	r20,sp,60
   44f7c:	d9414115 	stw	r5,1284(sp)
   44f80:	d9814417 	ldw	r6,1296(sp)
   44f84:	880a973a 	slli	r5,r17,28
   44f88:	8004d13a 	srli	r2,r16,4
   44f8c:	810003cc 	andi	r4,r16,15
   44f90:	3109883a 	add	r4,r6,r4
   44f94:	2884b03a 	or	r2,r5,r2
   44f98:	21400003 	ldbu	r5,0(r4)
   44f9c:	d9014117 	ldw	r4,1284(sp)
   44fa0:	8806d13a 	srli	r3,r17,4
   44fa4:	1021883a 	mov	r16,r2
   44fa8:	213fffc4 	addi	r4,r4,-1
   44fac:	d9014115 	stw	r4,1284(sp)
   44fb0:	d9814117 	ldw	r6,1284(sp)
   44fb4:	10c8b03a 	or	r4,r2,r3
   44fb8:	1823883a 	mov	r17,r3
   44fbc:	31400005 	stb	r5,0(r6)
   44fc0:	203fef1e 	bne	r4,zero,44f80 <___vfprintf_internal_r+0x16f8>
   44fc4:	003ccb06 	br	442f4 <___vfprintf_internal_r+0xa6c>
   44fc8:	00800c04 	movi	r2,48
   44fcc:	d98018c4 	addi	r6,sp,99
   44fd0:	dd000f04 	addi	r20,sp,60
   44fd4:	d88018c5 	stb	r2,99(sp)
   44fd8:	d9814115 	stw	r6,1284(sp)
   44fdc:	003cc506 	br	442f4 <___vfprintf_internal_r+0xa6c>
   44fe0:	dc400d17 	ldw	r17,52(sp)
   44fe4:	07000174 	movhi	fp,5
   44fe8:	e73fa584 	addi	fp,fp,-362
   44fec:	003bc706 	br	43f0c <___vfprintf_internal_r+0x684>
   44ff0:	d9414c17 	ldw	r5,1328(sp)
   44ff4:	2880040c 	andi	r2,r5,16
   44ff8:	10007c26 	beq	r2,zero,451ec <___vfprintf_internal_r+0x1964>
   44ffc:	38800017 	ldw	r2,0(r7)
   45000:	39c00104 	addi	r7,r7,4
   45004:	d9c14015 	stw	r7,1280(sp)
   45008:	d9814b17 	ldw	r6,1324(sp)
   4500c:	d9c14017 	ldw	r7,1280(sp)
   45010:	11800015 	stw	r6,0(r2)
   45014:	003a7806 	br	439f8 <___vfprintf_internal_r+0x170>
   45018:	d9014f17 	ldw	r4,1340(sp)
   4501c:	b00b883a 	mov	r5,r22
   45020:	d9800c04 	addi	r6,sp,48
   45024:	00438300 	call	43830 <__sprint_r>
   45028:	103bcf1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   4502c:	dc800e17 	ldw	r18,56(sp)
   45030:	dc400d17 	ldw	r17,52(sp)
   45034:	d8c01904 	addi	r3,sp,100
   45038:	d9014717 	ldw	r4,1308(sp)
   4503c:	d9414117 	ldw	r5,1284(sp)
   45040:	8c400044 	addi	r17,r17,1
   45044:	9125883a 	add	r18,r18,r4
   45048:	008001c4 	movi	r2,7
   4504c:	19400015 	stw	r5,0(r3)
   45050:	19000115 	stw	r4,4(r3)
   45054:	dc800e15 	stw	r18,56(sp)
   45058:	dc400d15 	stw	r17,52(sp)
   4505c:	147cee16 	blt	r2,r17,44418 <___vfprintf_internal_r+0xb90>
   45060:	18c00204 	addi	r3,r3,8
   45064:	003b8606 	br	43e80 <___vfprintf_internal_r+0x5f8>
   45068:	38c00017 	ldw	r3,0(r7)
   4506c:	39000204 	addi	r4,r7,8
   45070:	d9014015 	stw	r4,1280(sp)
   45074:	d8c14215 	stw	r3,1288(sp)
   45078:	39c00117 	ldw	r7,4(r7)
   4507c:	d9c14315 	stw	r7,1292(sp)
   45080:	003e2006 	br	44904 <___vfprintf_internal_r+0x107c>
   45084:	0005883a 	mov	r2,zero
   45088:	1409c83a 	sub	r4,r2,r16
   4508c:	1105803a 	cmpltu	r2,r2,r4
   45090:	044bc83a 	sub	r5,zero,r17
   45094:	2885c83a 	sub	r2,r5,r2
   45098:	2021883a 	mov	r16,r4
   4509c:	1023883a 	mov	r17,r2
   450a0:	01000044 	movi	r4,1
   450a4:	00800b44 	movi	r2,45
   450a8:	d8800405 	stb	r2,16(sp)
   450ac:	003c8406 	br	442c0 <___vfprintf_internal_r+0xa38>
   450b0:	d9014f17 	ldw	r4,1340(sp)
   450b4:	b00b883a 	mov	r5,r22
   450b8:	d9800c04 	addi	r6,sp,48
   450bc:	00438300 	call	43830 <__sprint_r>
   450c0:	103ba91e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   450c4:	dc800e17 	ldw	r18,56(sp)
   450c8:	dc400d17 	ldw	r17,52(sp)
   450cc:	d9000517 	ldw	r4,20(sp)
   450d0:	d9401904 	addi	r5,sp,100
   450d4:	003da706 	br	44774 <___vfprintf_internal_r+0xeec>
   450d8:	d9014f17 	ldw	r4,1340(sp)
   450dc:	b00b883a 	mov	r5,r22
   450e0:	d9800c04 	addi	r6,sp,48
   450e4:	00438300 	call	43830 <__sprint_r>
   450e8:	103b9f1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   450ec:	dc800e17 	ldw	r18,56(sp)
   450f0:	dc400d17 	ldw	r17,52(sp)
   450f4:	d9000517 	ldw	r4,20(sp)
   450f8:	d8c01904 	addi	r3,sp,100
   450fc:	003d9106 	br	44744 <___vfprintf_internal_r+0xebc>
   45100:	07000174 	movhi	fp,5
   45104:	e73fa184 	addi	fp,fp,-378
   45108:	9425883a 	add	r18,r18,r16
   4510c:	8c400044 	addi	r17,r17,1
   45110:	008001c4 	movi	r2,7
   45114:	1f000015 	stw	fp,0(r3)
   45118:	1c000115 	stw	r16,4(r3)
   4511c:	dc800e15 	stw	r18,56(sp)
   45120:	dc400d15 	stw	r17,52(sp)
   45124:	147fbc16 	blt	r2,r17,45018 <___vfprintf_internal_r+0x1790>
   45128:	18c00204 	addi	r3,r3,8
   4512c:	003fc206 	br	45038 <___vfprintf_internal_r+0x17b0>
   45130:	d9014f17 	ldw	r4,1340(sp)
   45134:	b00b883a 	mov	r5,r22
   45138:	d9800c04 	addi	r6,sp,48
   4513c:	00438300 	call	43830 <__sprint_r>
   45140:	103b891e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   45144:	dc800e17 	ldw	r18,56(sp)
   45148:	d9000517 	ldw	r4,20(sp)
   4514c:	d8c01904 	addi	r3,sp,100
   45150:	003d0206 	br	4455c <___vfprintf_internal_r+0xcd4>
   45154:	07000174 	movhi	fp,5
   45158:	e73fa184 	addi	fp,fp,-378
   4515c:	003be406 	br	440f0 <___vfprintf_internal_r+0x868>
   45160:	00800174 	movhi	r2,5
   45164:	10bf9004 	addi	r2,r2,-448
   45168:	d8814115 	stw	r2,1284(sp)
   4516c:	003df506 	br	44944 <___vfprintf_internal_r+0x10bc>
   45170:	d9014217 	ldw	r4,1288(sp)
   45174:	d9414317 	ldw	r5,1292(sp)
   45178:	004a2680 	call	4a268 <__isnand>
   4517c:	10003926 	beq	r2,zero,45264 <___vfprintf_internal_r+0x19dc>
   45180:	d9414d17 	ldw	r5,1332(sp)
   45184:	008011c4 	movi	r2,71
   45188:	1140ce16 	blt	r2,r5,454c4 <___vfprintf_internal_r+0x1c3c>
   4518c:	01800174 	movhi	r6,5
   45190:	31bf9104 	addi	r6,r6,-444
   45194:	d9814115 	stw	r6,1284(sp)
   45198:	003dea06 	br	44944 <___vfprintf_internal_r+0x10bc>
   4519c:	d9014c17 	ldw	r4,1328(sp)
   451a0:	bdc00044 	addi	r23,r23,1
   451a4:	b8c00007 	ldb	r3,0(r23)
   451a8:	21000814 	ori	r4,r4,32
   451ac:	d9014c15 	stw	r4,1328(sp)
   451b0:	003a3406 	br	43a84 <___vfprintf_internal_r+0x1fc>
   451b4:	dcc14515 	stw	r19,1300(sp)
   451b8:	98011016 	blt	r19,zero,455fc <___vfprintf_internal_r+0x1d74>
   451bc:	980f883a 	mov	r7,r19
   451c0:	d8014615 	stw	zero,1304(sp)
   451c4:	003c5206 	br	44310 <___vfprintf_internal_r+0xa88>
   451c8:	d9014f17 	ldw	r4,1340(sp)
   451cc:	b00b883a 	mov	r5,r22
   451d0:	d9800c04 	addi	r6,sp,48
   451d4:	00438300 	call	43830 <__sprint_r>
   451d8:	103b631e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   451dc:	dc800e17 	ldw	r18,56(sp)
   451e0:	d9000517 	ldw	r4,20(sp)
   451e4:	d8c01904 	addi	r3,sp,100
   451e8:	003f2e06 	br	44ea4 <___vfprintf_internal_r+0x161c>
   451ec:	d8c14c17 	ldw	r3,1328(sp)
   451f0:	1880100c 	andi	r2,r3,64
   451f4:	1000a026 	beq	r2,zero,45478 <___vfprintf_internal_r+0x1bf0>
   451f8:	38800017 	ldw	r2,0(r7)
   451fc:	39c00104 	addi	r7,r7,4
   45200:	d9c14015 	stw	r7,1280(sp)
   45204:	d9014b17 	ldw	r4,1324(sp)
   45208:	d9c14017 	ldw	r7,1280(sp)
   4520c:	1100000d 	sth	r4,0(r2)
   45210:	0039f906 	br	439f8 <___vfprintf_internal_r+0x170>
   45214:	d9014f17 	ldw	r4,1340(sp)
   45218:	b00b883a 	mov	r5,r22
   4521c:	d9800c04 	addi	r6,sp,48
   45220:	00438300 	call	43830 <__sprint_r>
   45224:	103b501e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   45228:	dc800e17 	ldw	r18,56(sp)
   4522c:	dc400d17 	ldw	r17,52(sp)
   45230:	d9000517 	ldw	r4,20(sp)
   45234:	d8c01904 	addi	r3,sp,100
   45238:	003f2d06 	br	44ef0 <___vfprintf_internal_r+0x1668>
   4523c:	00800184 	movi	r2,6
   45240:	14c09a36 	bltu	r2,r19,454ac <___vfprintf_internal_r+0x1c24>
   45244:	dcc14515 	stw	r19,1300(sp)
   45248:	9800010e 	bge	r19,zero,45250 <___vfprintf_internal_r+0x19c8>
   4524c:	d8014515 	stw	zero,1300(sp)
   45250:	00800174 	movhi	r2,5
   45254:	10bf9304 	addi	r2,r2,-436
   45258:	980f883a 	mov	r7,r19
   4525c:	d8814115 	stw	r2,1284(sp)
   45260:	003a7806 	br	43c44 <___vfprintf_internal_r+0x3bc>
   45264:	00bfffc4 	movi	r2,-1
   45268:	9880e226 	beq	r19,r2,455f4 <___vfprintf_internal_r+0x1d6c>
   4526c:	d9414d17 	ldw	r5,1332(sp)
   45270:	008019c4 	movi	r2,103
   45274:	2880dc26 	beq	r5,r2,455e8 <___vfprintf_internal_r+0x1d60>
   45278:	008011c4 	movi	r2,71
   4527c:	2880da26 	beq	r5,r2,455e8 <___vfprintf_internal_r+0x1d60>
   45280:	d9414c17 	ldw	r5,1328(sp)
   45284:	d9014317 	ldw	r4,1292(sp)
   45288:	d9814217 	ldw	r6,1288(sp)
   4528c:	29404014 	ori	r5,r5,256
   45290:	d9414c15 	stw	r5,1328(sp)
   45294:	2000cc16 	blt	r4,zero,455c8 <___vfprintf_internal_r+0x1d40>
   45298:	3021883a 	mov	r16,r6
   4529c:	2023883a 	mov	r17,r4
   452a0:	0039883a 	mov	fp,zero
   452a4:	d9414d17 	ldw	r5,1332(sp)
   452a8:	00801984 	movi	r2,102
   452ac:	2880b726 	beq	r5,r2,4558c <___vfprintf_internal_r+0x1d04>
   452b0:	00801184 	movi	r2,70
   452b4:	2880b526 	beq	r5,r2,4558c <___vfprintf_internal_r+0x1d04>
   452b8:	00801944 	movi	r2,101
   452bc:	2880c826 	beq	r5,r2,455e0 <___vfprintf_internal_r+0x1d58>
   452c0:	00801144 	movi	r2,69
   452c4:	2880c626 	beq	r5,r2,455e0 <___vfprintf_internal_r+0x1d58>
   452c8:	9829883a 	mov	r20,r19
   452cc:	d9014f17 	ldw	r4,1340(sp)
   452d0:	d8800504 	addi	r2,sp,20
   452d4:	880d883a 	mov	r6,r17
   452d8:	d8800115 	stw	r2,4(sp)
   452dc:	d8c00604 	addi	r3,sp,24
   452e0:	d8800704 	addi	r2,sp,28
   452e4:	800b883a 	mov	r5,r16
   452e8:	01c00084 	movi	r7,2
   452ec:	d8c00215 	stw	r3,8(sp)
   452f0:	d8800315 	stw	r2,12(sp)
   452f4:	dd000015 	stw	r20,0(sp)
   452f8:	0045aac0 	call	45aac <_dtoa_r>
   452fc:	d9814d17 	ldw	r6,1332(sp)
   45300:	d8814115 	stw	r2,1284(sp)
   45304:	008019c4 	movi	r2,103
   45308:	30809526 	beq	r6,r2,45560 <___vfprintf_internal_r+0x1cd8>
   4530c:	d8c14d17 	ldw	r3,1332(sp)
   45310:	008011c4 	movi	r2,71
   45314:	18809226 	beq	r3,r2,45560 <___vfprintf_internal_r+0x1cd8>
   45318:	d9414117 	ldw	r5,1284(sp)
   4531c:	d9814d17 	ldw	r6,1332(sp)
   45320:	00801984 	movi	r2,102
   45324:	2d25883a 	add	r18,r5,r20
   45328:	30808626 	beq	r6,r2,45544 <___vfprintf_internal_r+0x1cbc>
   4532c:	00801184 	movi	r2,70
   45330:	30808426 	beq	r6,r2,45544 <___vfprintf_internal_r+0x1cbc>
   45334:	000d883a 	mov	r6,zero
   45338:	000f883a 	mov	r7,zero
   4533c:	880b883a 	mov	r5,r17
   45340:	8009883a 	mov	r4,r16
   45344:	004c0500 	call	4c050 <__eqdf2>
   45348:	1000751e 	bne	r2,zero,45520 <___vfprintf_internal_r+0x1c98>
   4534c:	9005883a 	mov	r2,r18
   45350:	dc800715 	stw	r18,28(sp)
   45354:	d9014117 	ldw	r4,1284(sp)
   45358:	d9414d17 	ldw	r5,1332(sp)
   4535c:	00c019c4 	movi	r3,103
   45360:	1125c83a 	sub	r18,r2,r4
   45364:	28c06826 	beq	r5,r3,45508 <___vfprintf_internal_r+0x1c80>
   45368:	008011c4 	movi	r2,71
   4536c:	28806626 	beq	r5,r2,45508 <___vfprintf_internal_r+0x1c80>
   45370:	d9000517 	ldw	r4,20(sp)
   45374:	d8c14d17 	ldw	r3,1332(sp)
   45378:	00801944 	movi	r2,101
   4537c:	10c05516 	blt	r2,r3,454d4 <___vfprintf_internal_r+0x1c4c>
   45380:	213fffc4 	addi	r4,r4,-1
   45384:	d9000515 	stw	r4,20(sp)
   45388:	d8c00805 	stb	r3,32(sp)
   4538c:	2021883a 	mov	r16,r4
   45390:	2000c116 	blt	r4,zero,45698 <___vfprintf_internal_r+0x1e10>
   45394:	00800ac4 	movi	r2,43
   45398:	d8800845 	stb	r2,33(sp)
   4539c:	00800244 	movi	r2,9
   453a0:	1400af0e 	bge	r2,r16,45660 <___vfprintf_internal_r+0x1dd8>
   453a4:	1027883a 	mov	r19,r2
   453a8:	dc400b84 	addi	r17,sp,46
   453ac:	8009883a 	mov	r4,r16
   453b0:	01400284 	movi	r5,10
   453b4:	0042f540 	call	42f54 <__modsi3>
   453b8:	10800c04 	addi	r2,r2,48
   453bc:	8c7fffc4 	addi	r17,r17,-1
   453c0:	8009883a 	mov	r4,r16
   453c4:	01400284 	movi	r5,10
   453c8:	88800005 	stb	r2,0(r17)
   453cc:	0042ef40 	call	42ef4 <__divsi3>
   453d0:	1021883a 	mov	r16,r2
   453d4:	98bff516 	blt	r19,r2,453ac <___vfprintf_internal_r+0x1b24>
   453d8:	10c00c04 	addi	r3,r2,48
   453dc:	d88009c4 	addi	r2,sp,39
   453e0:	108001c4 	addi	r2,r2,7
   453e4:	897fffc4 	addi	r5,r17,-1
   453e8:	88ffffc5 	stb	r3,-1(r17)
   453ec:	2880a72e 	bgeu	r5,r2,4568c <___vfprintf_internal_r+0x1e04>
   453f0:	1009883a 	mov	r4,r2
   453f4:	d9800804 	addi	r6,sp,32
   453f8:	d8c00884 	addi	r3,sp,34
   453fc:	28800003 	ldbu	r2,0(r5)
   45400:	29400044 	addi	r5,r5,1
   45404:	18800005 	stb	r2,0(r3)
   45408:	18c00044 	addi	r3,r3,1
   4540c:	293ffb36 	bltu	r5,r4,453fc <___vfprintf_internal_r+0x1b74>
   45410:	1987c83a 	sub	r3,r3,r6
   45414:	00800044 	movi	r2,1
   45418:	d8c14815 	stw	r3,1312(sp)
   4541c:	90cf883a 	add	r7,r18,r3
   45420:	1480960e 	bge	r2,r18,4567c <___vfprintf_internal_r+0x1df4>
   45424:	39c00044 	addi	r7,r7,1
   45428:	d9c14515 	stw	r7,1300(sp)
   4542c:	38003416 	blt	r7,zero,45500 <___vfprintf_internal_r+0x1c78>
   45430:	e0803fcc 	andi	r2,fp,255
   45434:	1080201c 	xori	r2,r2,128
   45438:	10bfe004 	addi	r2,r2,-128
   4543c:	10004e26 	beq	r2,zero,45578 <___vfprintf_internal_r+0x1cf0>
   45440:	00800b44 	movi	r2,45
   45444:	dc814715 	stw	r18,1308(sp)
   45448:	d8014615 	stw	zero,1304(sp)
   4544c:	d8800405 	stb	r2,16(sp)
   45450:	003bb106 	br	44318 <___vfprintf_internal_r+0xa90>
   45454:	00800b44 	movi	r2,45
   45458:	d8800405 	stb	r2,16(sp)
   4545c:	003d3306 	br	4492c <___vfprintf_internal_r+0x10a4>
   45460:	d9014f17 	ldw	r4,1340(sp)
   45464:	b00b883a 	mov	r5,r22
   45468:	d9800c04 	addi	r6,sp,48
   4546c:	00438300 	call	43830 <__sprint_r>
   45470:	103abd1e 	bne	r2,zero,43f68 <___vfprintf_internal_r+0x6e0>
   45474:	003abb06 	br	43f64 <___vfprintf_internal_r+0x6dc>
   45478:	38800017 	ldw	r2,0(r7)
   4547c:	39c00104 	addi	r7,r7,4
   45480:	d9c14015 	stw	r7,1280(sp)
   45484:	d9414b17 	ldw	r5,1324(sp)
   45488:	d9c14017 	ldw	r7,1280(sp)
   4548c:	11400015 	stw	r5,0(r2)
   45490:	00395906 	br	439f8 <___vfprintf_internal_r+0x170>
   45494:	980f883a 	mov	r7,r19
   45498:	dcc14515 	stw	r19,1300(sp)
   4549c:	d8014615 	stw	zero,1304(sp)
   454a0:	003b9b06 	br	44310 <___vfprintf_internal_r+0xa88>
   454a4:	0027883a 	mov	r19,zero
   454a8:	00397806 	br	43a8c <___vfprintf_internal_r+0x204>
   454ac:	00c00174 	movhi	r3,5
   454b0:	18ff9304 	addi	r3,r3,-436
   454b4:	100f883a 	mov	r7,r2
   454b8:	d8814515 	stw	r2,1300(sp)
   454bc:	d8c14115 	stw	r3,1284(sp)
   454c0:	0039e006 	br	43c44 <___vfprintf_internal_r+0x3bc>
   454c4:	00800174 	movhi	r2,5
   454c8:	10bf9204 	addi	r2,r2,-440
   454cc:	d8814115 	stw	r2,1284(sp)
   454d0:	003d1c06 	br	44944 <___vfprintf_internal_r+0x10bc>
   454d4:	d9414d17 	ldw	r5,1332(sp)
   454d8:	00801984 	movi	r2,102
   454dc:	28804926 	beq	r5,r2,45604 <___vfprintf_internal_r+0x1d7c>
   454e0:	200f883a 	mov	r7,r4
   454e4:	24805716 	blt	r4,r18,45644 <___vfprintf_internal_r+0x1dbc>
   454e8:	d9414c17 	ldw	r5,1328(sp)
   454ec:	2880004c 	andi	r2,r5,1
   454f0:	10000126 	beq	r2,zero,454f8 <___vfprintf_internal_r+0x1c70>
   454f4:	21c00044 	addi	r7,r4,1
   454f8:	d9c14515 	stw	r7,1300(sp)
   454fc:	383fcc0e 	bge	r7,zero,45430 <___vfprintf_internal_r+0x1ba8>
   45500:	d8014515 	stw	zero,1300(sp)
   45504:	003fca06 	br	45430 <___vfprintf_internal_r+0x1ba8>
   45508:	d9000517 	ldw	r4,20(sp)
   4550c:	00bfff04 	movi	r2,-4
   45510:	1100480e 	bge	r2,r4,45634 <___vfprintf_internal_r+0x1dac>
   45514:	99004716 	blt	r19,r4,45634 <___vfprintf_internal_r+0x1dac>
   45518:	d8c14d15 	stw	r3,1332(sp)
   4551c:	003ff006 	br	454e0 <___vfprintf_internal_r+0x1c58>
   45520:	d8800717 	ldw	r2,28(sp)
   45524:	14bf8b2e 	bgeu	r2,r18,45354 <___vfprintf_internal_r+0x1acc>
   45528:	9007883a 	mov	r3,r18
   4552c:	01000c04 	movi	r4,48
   45530:	11000005 	stb	r4,0(r2)
   45534:	10800044 	addi	r2,r2,1
   45538:	d8800715 	stw	r2,28(sp)
   4553c:	18bffc1e 	bne	r3,r2,45530 <___vfprintf_internal_r+0x1ca8>
   45540:	003f8406 	br	45354 <___vfprintf_internal_r+0x1acc>
   45544:	d8814117 	ldw	r2,1284(sp)
   45548:	10c00007 	ldb	r3,0(r2)
   4554c:	00800c04 	movi	r2,48
   45550:	18805b26 	beq	r3,r2,456c0 <___vfprintf_internal_r+0x1e38>
   45554:	d9000517 	ldw	r4,20(sp)
   45558:	9125883a 	add	r18,r18,r4
   4555c:	003f7506 	br	45334 <___vfprintf_internal_r+0x1aac>
   45560:	d9014c17 	ldw	r4,1328(sp)
   45564:	2080004c 	andi	r2,r4,1
   45568:	1005003a 	cmpeq	r2,r2,zero
   4556c:	103f6a26 	beq	r2,zero,45318 <___vfprintf_internal_r+0x1a90>
   45570:	d8800717 	ldw	r2,28(sp)
   45574:	003f7706 	br	45354 <___vfprintf_internal_r+0x1acc>
   45578:	d9c14515 	stw	r7,1300(sp)
   4557c:	38004d16 	blt	r7,zero,456b4 <___vfprintf_internal_r+0x1e2c>
   45580:	dc814715 	stw	r18,1308(sp)
   45584:	d8014615 	stw	zero,1304(sp)
   45588:	003b6106 	br	44310 <___vfprintf_internal_r+0xa88>
   4558c:	d9014f17 	ldw	r4,1340(sp)
   45590:	d8800504 	addi	r2,sp,20
   45594:	d8800115 	stw	r2,4(sp)
   45598:	d8c00604 	addi	r3,sp,24
   4559c:	d8800704 	addi	r2,sp,28
   455a0:	800b883a 	mov	r5,r16
   455a4:	880d883a 	mov	r6,r17
   455a8:	01c000c4 	movi	r7,3
   455ac:	d8c00215 	stw	r3,8(sp)
   455b0:	d8800315 	stw	r2,12(sp)
   455b4:	dcc00015 	stw	r19,0(sp)
   455b8:	9829883a 	mov	r20,r19
   455bc:	0045aac0 	call	45aac <_dtoa_r>
   455c0:	d8814115 	stw	r2,1284(sp)
   455c4:	003f5106 	br	4530c <___vfprintf_internal_r+0x1a84>
   455c8:	d8c14217 	ldw	r3,1288(sp)
   455cc:	d9014317 	ldw	r4,1292(sp)
   455d0:	07000b44 	movi	fp,45
   455d4:	1821883a 	mov	r16,r3
   455d8:	2460003c 	xorhi	r17,r4,32768
   455dc:	003f3106 	br	452a4 <___vfprintf_internal_r+0x1a1c>
   455e0:	9d000044 	addi	r20,r19,1
   455e4:	003f3906 	br	452cc <___vfprintf_internal_r+0x1a44>
   455e8:	983f251e 	bne	r19,zero,45280 <___vfprintf_internal_r+0x19f8>
   455ec:	04c00044 	movi	r19,1
   455f0:	003f2306 	br	45280 <___vfprintf_internal_r+0x19f8>
   455f4:	04c00184 	movi	r19,6
   455f8:	003f2106 	br	45280 <___vfprintf_internal_r+0x19f8>
   455fc:	d8014515 	stw	zero,1300(sp)
   45600:	003eee06 	br	451bc <___vfprintf_internal_r+0x1934>
   45604:	200f883a 	mov	r7,r4
   45608:	0100370e 	bge	zero,r4,456e8 <___vfprintf_internal_r+0x1e60>
   4560c:	9800031e 	bne	r19,zero,4561c <___vfprintf_internal_r+0x1d94>
   45610:	d9814c17 	ldw	r6,1328(sp)
   45614:	3080004c 	andi	r2,r6,1
   45618:	103fb726 	beq	r2,zero,454f8 <___vfprintf_internal_r+0x1c70>
   4561c:	20800044 	addi	r2,r4,1
   45620:	98a7883a 	add	r19,r19,r2
   45624:	dcc14515 	stw	r19,1300(sp)
   45628:	980f883a 	mov	r7,r19
   4562c:	983f800e 	bge	r19,zero,45430 <___vfprintf_internal_r+0x1ba8>
   45630:	003fb306 	br	45500 <___vfprintf_internal_r+0x1c78>
   45634:	d9814d17 	ldw	r6,1332(sp)
   45638:	31bfff84 	addi	r6,r6,-2
   4563c:	d9814d15 	stw	r6,1332(sp)
   45640:	003f4c06 	br	45374 <___vfprintf_internal_r+0x1aec>
   45644:	0100180e 	bge	zero,r4,456a8 <___vfprintf_internal_r+0x1e20>
   45648:	00800044 	movi	r2,1
   4564c:	1485883a 	add	r2,r2,r18
   45650:	d8814515 	stw	r2,1300(sp)
   45654:	100f883a 	mov	r7,r2
   45658:	103f750e 	bge	r2,zero,45430 <___vfprintf_internal_r+0x1ba8>
   4565c:	003fa806 	br	45500 <___vfprintf_internal_r+0x1c78>
   45660:	80c00c04 	addi	r3,r16,48
   45664:	00800c04 	movi	r2,48
   45668:	d8c008c5 	stb	r3,35(sp)
   4566c:	d9800804 	addi	r6,sp,32
   45670:	d8c00904 	addi	r3,sp,36
   45674:	d8800885 	stb	r2,34(sp)
   45678:	003f6506 	br	45410 <___vfprintf_internal_r+0x1b88>
   4567c:	d9014c17 	ldw	r4,1328(sp)
   45680:	2084703a 	and	r2,r4,r2
   45684:	103f9c26 	beq	r2,zero,454f8 <___vfprintf_internal_r+0x1c70>
   45688:	003f6606 	br	45424 <___vfprintf_internal_r+0x1b9c>
   4568c:	d9800804 	addi	r6,sp,32
   45690:	d8c00884 	addi	r3,sp,34
   45694:	003f5e06 	br	45410 <___vfprintf_internal_r+0x1b88>
   45698:	00800b44 	movi	r2,45
   4569c:	0121c83a 	sub	r16,zero,r4
   456a0:	d8800845 	stb	r2,33(sp)
   456a4:	003f3d06 	br	4539c <___vfprintf_internal_r+0x1b14>
   456a8:	00800084 	movi	r2,2
   456ac:	1105c83a 	sub	r2,r2,r4
   456b0:	003fe606 	br	4564c <___vfprintf_internal_r+0x1dc4>
   456b4:	d8014515 	stw	zero,1300(sp)
   456b8:	dc814715 	stw	r18,1308(sp)
   456bc:	003fb106 	br	45584 <___vfprintf_internal_r+0x1cfc>
   456c0:	000d883a 	mov	r6,zero
   456c4:	000f883a 	mov	r7,zero
   456c8:	8009883a 	mov	r4,r16
   456cc:	880b883a 	mov	r5,r17
   456d0:	004c0d80 	call	4c0d8 <__nedf2>
   456d4:	103f9f26 	beq	r2,zero,45554 <___vfprintf_internal_r+0x1ccc>
   456d8:	00800044 	movi	r2,1
   456dc:	1509c83a 	sub	r4,r2,r20
   456e0:	d9000515 	stw	r4,20(sp)
   456e4:	003f9b06 	br	45554 <___vfprintf_internal_r+0x1ccc>
   456e8:	98000d1e 	bne	r19,zero,45720 <___vfprintf_internal_r+0x1e98>
   456ec:	d8c14c17 	ldw	r3,1328(sp)
   456f0:	1880004c 	andi	r2,r3,1
   456f4:	10000a1e 	bne	r2,zero,45720 <___vfprintf_internal_r+0x1e98>
   456f8:	01000044 	movi	r4,1
   456fc:	200f883a 	mov	r7,r4
   45700:	d9014515 	stw	r4,1300(sp)
   45704:	003f4a06 	br	45430 <___vfprintf_internal_r+0x1ba8>
   45708:	3cc00017 	ldw	r19,0(r7)
   4570c:	39c00104 	addi	r7,r7,4
   45710:	983d0e0e 	bge	r19,zero,44b4c <___vfprintf_internal_r+0x12c4>
   45714:	b8c00007 	ldb	r3,0(r23)
   45718:	04ffffc4 	movi	r19,-1
   4571c:	0038d906 	br	43a84 <___vfprintf_internal_r+0x1fc>
   45720:	9cc00084 	addi	r19,r19,2
   45724:	dcc14515 	stw	r19,1300(sp)
   45728:	980f883a 	mov	r7,r19
   4572c:	983f400e 	bge	r19,zero,45430 <___vfprintf_internal_r+0x1ba8>
   45730:	003f7306 	br	45500 <___vfprintf_internal_r+0x1c78>

00045734 <__vfprintf_internal>:
   45734:	00800174 	movhi	r2,5
   45738:	10874404 	addi	r2,r2,7440
   4573c:	2013883a 	mov	r9,r4
   45740:	11000017 	ldw	r4,0(r2)
   45744:	2805883a 	mov	r2,r5
   45748:	300f883a 	mov	r7,r6
   4574c:	480b883a 	mov	r5,r9
   45750:	100d883a 	mov	r6,r2
   45754:	00438881 	jmpi	43888 <___vfprintf_internal_r>

00045758 <__swsetup_r>:
   45758:	00800174 	movhi	r2,5
   4575c:	10874404 	addi	r2,r2,7440
   45760:	10c00017 	ldw	r3,0(r2)
   45764:	defffd04 	addi	sp,sp,-12
   45768:	dc400115 	stw	r17,4(sp)
   4576c:	dc000015 	stw	r16,0(sp)
   45770:	dfc00215 	stw	ra,8(sp)
   45774:	2023883a 	mov	r17,r4
   45778:	2821883a 	mov	r16,r5
   4577c:	18000226 	beq	r3,zero,45788 <__swsetup_r+0x30>
   45780:	18800e17 	ldw	r2,56(r3)
   45784:	10001f26 	beq	r2,zero,45804 <__swsetup_r+0xac>
   45788:	8100030b 	ldhu	r4,12(r16)
   4578c:	2080020c 	andi	r2,r4,8
   45790:	10002826 	beq	r2,zero,45834 <__swsetup_r+0xdc>
   45794:	81400417 	ldw	r5,16(r16)
   45798:	28001d26 	beq	r5,zero,45810 <__swsetup_r+0xb8>
   4579c:	2080004c 	andi	r2,r4,1
   457a0:	1005003a 	cmpeq	r2,r2,zero
   457a4:	10000b26 	beq	r2,zero,457d4 <__swsetup_r+0x7c>
   457a8:	2080008c 	andi	r2,r4,2
   457ac:	10001226 	beq	r2,zero,457f8 <__swsetup_r+0xa0>
   457b0:	0005883a 	mov	r2,zero
   457b4:	80800215 	stw	r2,8(r16)
   457b8:	28000b26 	beq	r5,zero,457e8 <__swsetup_r+0x90>
   457bc:	0005883a 	mov	r2,zero
   457c0:	dfc00217 	ldw	ra,8(sp)
   457c4:	dc400117 	ldw	r17,4(sp)
   457c8:	dc000017 	ldw	r16,0(sp)
   457cc:	dec00304 	addi	sp,sp,12
   457d0:	f800283a 	ret
   457d4:	80800517 	ldw	r2,20(r16)
   457d8:	80000215 	stw	zero,8(r16)
   457dc:	0085c83a 	sub	r2,zero,r2
   457e0:	80800615 	stw	r2,24(r16)
   457e4:	283ff51e 	bne	r5,zero,457bc <__swsetup_r+0x64>
   457e8:	2080200c 	andi	r2,r4,128
   457ec:	103ff326 	beq	r2,zero,457bc <__swsetup_r+0x64>
   457f0:	00bfffc4 	movi	r2,-1
   457f4:	003ff206 	br	457c0 <__swsetup_r+0x68>
   457f8:	80800517 	ldw	r2,20(r16)
   457fc:	80800215 	stw	r2,8(r16)
   45800:	003fed06 	br	457b8 <__swsetup_r+0x60>
   45804:	1809883a 	mov	r4,r3
   45808:	00472f80 	call	472f8 <__sinit>
   4580c:	003fde06 	br	45788 <__swsetup_r+0x30>
   45810:	20c0a00c 	andi	r3,r4,640
   45814:	00808004 	movi	r2,512
   45818:	18bfe026 	beq	r3,r2,4579c <__swsetup_r+0x44>
   4581c:	8809883a 	mov	r4,r17
   45820:	800b883a 	mov	r5,r16
   45824:	00480700 	call	48070 <__smakebuf_r>
   45828:	8100030b 	ldhu	r4,12(r16)
   4582c:	81400417 	ldw	r5,16(r16)
   45830:	003fda06 	br	4579c <__swsetup_r+0x44>
   45834:	2080040c 	andi	r2,r4,16
   45838:	103fed26 	beq	r2,zero,457f0 <__swsetup_r+0x98>
   4583c:	2080010c 	andi	r2,r4,4
   45840:	10001226 	beq	r2,zero,4588c <__swsetup_r+0x134>
   45844:	81400c17 	ldw	r5,48(r16)
   45848:	28000526 	beq	r5,zero,45860 <__swsetup_r+0x108>
   4584c:	80801004 	addi	r2,r16,64
   45850:	28800226 	beq	r5,r2,4585c <__swsetup_r+0x104>
   45854:	8809883a 	mov	r4,r17
   45858:	004767c0 	call	4767c <_free_r>
   4585c:	80000c15 	stw	zero,48(r16)
   45860:	8080030b 	ldhu	r2,12(r16)
   45864:	81400417 	ldw	r5,16(r16)
   45868:	80000115 	stw	zero,4(r16)
   4586c:	10bff6cc 	andi	r2,r2,65499
   45870:	8080030d 	sth	r2,12(r16)
   45874:	81400015 	stw	r5,0(r16)
   45878:	8080030b 	ldhu	r2,12(r16)
   4587c:	10800214 	ori	r2,r2,8
   45880:	113fffcc 	andi	r4,r2,65535
   45884:	8080030d 	sth	r2,12(r16)
   45888:	003fc306 	br	45798 <__swsetup_r+0x40>
   4588c:	81400417 	ldw	r5,16(r16)
   45890:	003ff906 	br	45878 <__swsetup_r+0x120>

00045894 <quorem>:
   45894:	28c00417 	ldw	r3,16(r5)
   45898:	20800417 	ldw	r2,16(r4)
   4589c:	defff604 	addi	sp,sp,-40
   458a0:	ddc00715 	stw	r23,28(sp)
   458a4:	dd400515 	stw	r21,20(sp)
   458a8:	dfc00915 	stw	ra,36(sp)
   458ac:	df000815 	stw	fp,32(sp)
   458b0:	dd800615 	stw	r22,24(sp)
   458b4:	dd000415 	stw	r20,16(sp)
   458b8:	dcc00315 	stw	r19,12(sp)
   458bc:	dc800215 	stw	r18,8(sp)
   458c0:	dc400115 	stw	r17,4(sp)
   458c4:	dc000015 	stw	r16,0(sp)
   458c8:	202f883a 	mov	r23,r4
   458cc:	282b883a 	mov	r21,r5
   458d0:	10c07416 	blt	r2,r3,45aa4 <quorem+0x210>
   458d4:	1c7fffc4 	addi	r17,r3,-1
   458d8:	8c45883a 	add	r2,r17,r17
   458dc:	1085883a 	add	r2,r2,r2
   458e0:	2c000504 	addi	r16,r5,20
   458e4:	24c00504 	addi	r19,r4,20
   458e8:	14ed883a 	add	r22,r2,r19
   458ec:	80a5883a 	add	r18,r16,r2
   458f0:	b7000017 	ldw	fp,0(r22)
   458f4:	91400017 	ldw	r5,0(r18)
   458f8:	e009883a 	mov	r4,fp
   458fc:	29400044 	addi	r5,r5,1
   45900:	0042fb40 	call	42fb4 <__udivsi3>
   45904:	1029883a 	mov	r20,r2
   45908:	10003c1e 	bne	r2,zero,459fc <quorem+0x168>
   4590c:	a80b883a 	mov	r5,r21
   45910:	b809883a 	mov	r4,r23
   45914:	0048d9c0 	call	48d9c <__mcmp>
   45918:	10002b16 	blt	r2,zero,459c8 <quorem+0x134>
   4591c:	a5000044 	addi	r20,r20,1
   45920:	980f883a 	mov	r7,r19
   45924:	0011883a 	mov	r8,zero
   45928:	0009883a 	mov	r4,zero
   4592c:	81400017 	ldw	r5,0(r16)
   45930:	38c00017 	ldw	r3,0(r7)
   45934:	84000104 	addi	r16,r16,4
   45938:	28bfffcc 	andi	r2,r5,65535
   4593c:	2085883a 	add	r2,r4,r2
   45940:	11bfffcc 	andi	r6,r2,65535
   45944:	193fffcc 	andi	r4,r3,65535
   45948:	1004d43a 	srli	r2,r2,16
   4594c:	280ad43a 	srli	r5,r5,16
   45950:	2189c83a 	sub	r4,r4,r6
   45954:	2209883a 	add	r4,r4,r8
   45958:	1806d43a 	srli	r3,r3,16
   4595c:	288b883a 	add	r5,r5,r2
   45960:	200dd43a 	srai	r6,r4,16
   45964:	28bfffcc 	andi	r2,r5,65535
   45968:	1887c83a 	sub	r3,r3,r2
   4596c:	1987883a 	add	r3,r3,r6
   45970:	3900000d 	sth	r4,0(r7)
   45974:	38c0008d 	sth	r3,2(r7)
   45978:	2808d43a 	srli	r4,r5,16
   4597c:	39c00104 	addi	r7,r7,4
   45980:	1811d43a 	srai	r8,r3,16
   45984:	943fe92e 	bgeu	r18,r16,4592c <quorem+0x98>
   45988:	8c45883a 	add	r2,r17,r17
   4598c:	1085883a 	add	r2,r2,r2
   45990:	9885883a 	add	r2,r19,r2
   45994:	10c00017 	ldw	r3,0(r2)
   45998:	18000b1e 	bne	r3,zero,459c8 <quorem+0x134>
   4599c:	113fff04 	addi	r4,r2,-4
   459a0:	9900082e 	bgeu	r19,r4,459c4 <quorem+0x130>
   459a4:	10bfff17 	ldw	r2,-4(r2)
   459a8:	10000326 	beq	r2,zero,459b8 <quorem+0x124>
   459ac:	00000506 	br	459c4 <quorem+0x130>
   459b0:	20800017 	ldw	r2,0(r4)
   459b4:	1000031e 	bne	r2,zero,459c4 <quorem+0x130>
   459b8:	213fff04 	addi	r4,r4,-4
   459bc:	8c7fffc4 	addi	r17,r17,-1
   459c0:	993ffb36 	bltu	r19,r4,459b0 <quorem+0x11c>
   459c4:	bc400415 	stw	r17,16(r23)
   459c8:	a005883a 	mov	r2,r20
   459cc:	dfc00917 	ldw	ra,36(sp)
   459d0:	df000817 	ldw	fp,32(sp)
   459d4:	ddc00717 	ldw	r23,28(sp)
   459d8:	dd800617 	ldw	r22,24(sp)
   459dc:	dd400517 	ldw	r21,20(sp)
   459e0:	dd000417 	ldw	r20,16(sp)
   459e4:	dcc00317 	ldw	r19,12(sp)
   459e8:	dc800217 	ldw	r18,8(sp)
   459ec:	dc400117 	ldw	r17,4(sp)
   459f0:	dc000017 	ldw	r16,0(sp)
   459f4:	dec00a04 	addi	sp,sp,40
   459f8:	f800283a 	ret
   459fc:	980f883a 	mov	r7,r19
   45a00:	8011883a 	mov	r8,r16
   45a04:	0013883a 	mov	r9,zero
   45a08:	000d883a 	mov	r6,zero
   45a0c:	40c00017 	ldw	r3,0(r8)
   45a10:	39000017 	ldw	r4,0(r7)
   45a14:	42000104 	addi	r8,r8,4
   45a18:	18bfffcc 	andi	r2,r3,65535
   45a1c:	a085383a 	mul	r2,r20,r2
   45a20:	1806d43a 	srli	r3,r3,16
   45a24:	217fffcc 	andi	r5,r4,65535
   45a28:	3085883a 	add	r2,r6,r2
   45a2c:	11bfffcc 	andi	r6,r2,65535
   45a30:	a0c7383a 	mul	r3,r20,r3
   45a34:	1004d43a 	srli	r2,r2,16
   45a38:	298bc83a 	sub	r5,r5,r6
   45a3c:	2a4b883a 	add	r5,r5,r9
   45a40:	2008d43a 	srli	r4,r4,16
   45a44:	1887883a 	add	r3,r3,r2
   45a48:	280dd43a 	srai	r6,r5,16
   45a4c:	18bfffcc 	andi	r2,r3,65535
   45a50:	2089c83a 	sub	r4,r4,r2
   45a54:	2189883a 	add	r4,r4,r6
   45a58:	3900008d 	sth	r4,2(r7)
   45a5c:	3940000d 	sth	r5,0(r7)
   45a60:	180cd43a 	srli	r6,r3,16
   45a64:	39c00104 	addi	r7,r7,4
   45a68:	2013d43a 	srai	r9,r4,16
   45a6c:	923fe72e 	bgeu	r18,r8,45a0c <quorem+0x178>
   45a70:	e03fa61e 	bne	fp,zero,4590c <quorem+0x78>
   45a74:	b0ffff04 	addi	r3,r22,-4
   45a78:	98c0082e 	bgeu	r19,r3,45a9c <quorem+0x208>
   45a7c:	b0bfff17 	ldw	r2,-4(r22)
   45a80:	10000326 	beq	r2,zero,45a90 <quorem+0x1fc>
   45a84:	00000506 	br	45a9c <quorem+0x208>
   45a88:	18800017 	ldw	r2,0(r3)
   45a8c:	1000031e 	bne	r2,zero,45a9c <quorem+0x208>
   45a90:	18ffff04 	addi	r3,r3,-4
   45a94:	8c7fffc4 	addi	r17,r17,-1
   45a98:	98fffb36 	bltu	r19,r3,45a88 <quorem+0x1f4>
   45a9c:	bc400415 	stw	r17,16(r23)
   45aa0:	003f9a06 	br	4590c <quorem+0x78>
   45aa4:	0005883a 	mov	r2,zero
   45aa8:	003fc806 	br	459cc <quorem+0x138>

00045aac <_dtoa_r>:
   45aac:	22001017 	ldw	r8,64(r4)
   45ab0:	deffda04 	addi	sp,sp,-152
   45ab4:	dd402115 	stw	r21,132(sp)
   45ab8:	dd002015 	stw	r20,128(sp)
   45abc:	dc801e15 	stw	r18,120(sp)
   45ac0:	dc401d15 	stw	r17,116(sp)
   45ac4:	dfc02515 	stw	ra,148(sp)
   45ac8:	df002415 	stw	fp,144(sp)
   45acc:	ddc02315 	stw	r23,140(sp)
   45ad0:	dd802215 	stw	r22,136(sp)
   45ad4:	dcc01f15 	stw	r19,124(sp)
   45ad8:	dc001c15 	stw	r16,112(sp)
   45adc:	d9001615 	stw	r4,88(sp)
   45ae0:	3023883a 	mov	r17,r6
   45ae4:	2829883a 	mov	r20,r5
   45ae8:	d9c01715 	stw	r7,92(sp)
   45aec:	dc802817 	ldw	r18,160(sp)
   45af0:	302b883a 	mov	r21,r6
   45af4:	40000a26 	beq	r8,zero,45b20 <_dtoa_r+0x74>
   45af8:	20801117 	ldw	r2,68(r4)
   45afc:	400b883a 	mov	r5,r8
   45b00:	40800115 	stw	r2,4(r8)
   45b04:	20c01117 	ldw	r3,68(r4)
   45b08:	00800044 	movi	r2,1
   45b0c:	10c4983a 	sll	r2,r2,r3
   45b10:	40800215 	stw	r2,8(r8)
   45b14:	0048c400 	call	48c40 <_Bfree>
   45b18:	d8c01617 	ldw	r3,88(sp)
   45b1c:	18001015 	stw	zero,64(r3)
   45b20:	8800a316 	blt	r17,zero,45db0 <_dtoa_r+0x304>
   45b24:	90000015 	stw	zero,0(r18)
   45b28:	a8dffc2c 	andhi	r3,r21,32752
   45b2c:	009ffc34 	movhi	r2,32752
   45b30:	18809126 	beq	r3,r2,45d78 <_dtoa_r+0x2cc>
   45b34:	000d883a 	mov	r6,zero
   45b38:	000f883a 	mov	r7,zero
   45b3c:	a009883a 	mov	r4,r20
   45b40:	a80b883a 	mov	r5,r21
   45b44:	dd001215 	stw	r20,72(sp)
   45b48:	dd401315 	stw	r21,76(sp)
   45b4c:	004c0d80 	call	4c0d8 <__nedf2>
   45b50:	1000171e 	bne	r2,zero,45bb0 <_dtoa_r+0x104>
   45b54:	d9802717 	ldw	r6,156(sp)
   45b58:	00800044 	movi	r2,1
   45b5c:	30800015 	stw	r2,0(r6)
   45b60:	d8802917 	ldw	r2,164(sp)
   45b64:	10029b26 	beq	r2,zero,465d4 <_dtoa_r+0xb28>
   45b68:	d9002917 	ldw	r4,164(sp)
   45b6c:	00800174 	movhi	r2,5
   45b70:	10bfa144 	addi	r2,r2,-379
   45b74:	10ffffc4 	addi	r3,r2,-1
   45b78:	20800015 	stw	r2,0(r4)
   45b7c:	1805883a 	mov	r2,r3
   45b80:	dfc02517 	ldw	ra,148(sp)
   45b84:	df002417 	ldw	fp,144(sp)
   45b88:	ddc02317 	ldw	r23,140(sp)
   45b8c:	dd802217 	ldw	r22,136(sp)
   45b90:	dd402117 	ldw	r21,132(sp)
   45b94:	dd002017 	ldw	r20,128(sp)
   45b98:	dcc01f17 	ldw	r19,124(sp)
   45b9c:	dc801e17 	ldw	r18,120(sp)
   45ba0:	dc401d17 	ldw	r17,116(sp)
   45ba4:	dc001c17 	ldw	r16,112(sp)
   45ba8:	dec02604 	addi	sp,sp,152
   45bac:	f800283a 	ret
   45bb0:	d9001617 	ldw	r4,88(sp)
   45bb4:	d9401217 	ldw	r5,72(sp)
   45bb8:	d8800104 	addi	r2,sp,4
   45bbc:	a80d883a 	mov	r6,r21
   45bc0:	d9c00204 	addi	r7,sp,8
   45bc4:	d8800015 	stw	r2,0(sp)
   45bc8:	004927c0 	call	4927c <__d2b>
   45bcc:	d8800715 	stw	r2,28(sp)
   45bd0:	a804d53a 	srli	r2,r21,20
   45bd4:	1101ffcc 	andi	r4,r2,2047
   45bd8:	20008626 	beq	r4,zero,45df4 <_dtoa_r+0x348>
   45bdc:	d8c01217 	ldw	r3,72(sp)
   45be0:	00800434 	movhi	r2,16
   45be4:	10bfffc4 	addi	r2,r2,-1
   45be8:	ddc00117 	ldw	r23,4(sp)
   45bec:	a884703a 	and	r2,r21,r2
   45bf0:	1811883a 	mov	r8,r3
   45bf4:	124ffc34 	orhi	r9,r2,16368
   45bf8:	25bf0044 	addi	r22,r4,-1023
   45bfc:	d8000815 	stw	zero,32(sp)
   45c00:	0005883a 	mov	r2,zero
   45c04:	00cffe34 	movhi	r3,16376
   45c08:	480b883a 	mov	r5,r9
   45c0c:	4009883a 	mov	r4,r8
   45c10:	180f883a 	mov	r7,r3
   45c14:	100d883a 	mov	r6,r2
   45c18:	004b9400 	call	4b940 <__subdf3>
   45c1c:	0218dbf4 	movhi	r8,25455
   45c20:	4210d844 	addi	r8,r8,17249
   45c24:	024ff4f4 	movhi	r9,16339
   45c28:	4a61e9c4 	addi	r9,r9,-30809
   45c2c:	480f883a 	mov	r7,r9
   45c30:	400d883a 	mov	r6,r8
   45c34:	180b883a 	mov	r5,r3
   45c38:	1009883a 	mov	r4,r2
   45c3c:	004ba340 	call	4ba34 <__muldf3>
   45c40:	0222d874 	movhi	r8,35681
   45c44:	42322cc4 	addi	r8,r8,-14157
   45c48:	024ff1f4 	movhi	r9,16327
   45c4c:	4a628a04 	addi	r9,r9,-30168
   45c50:	480f883a 	mov	r7,r9
   45c54:	400d883a 	mov	r6,r8
   45c58:	180b883a 	mov	r5,r3
   45c5c:	1009883a 	mov	r4,r2
   45c60:	004b9c00 	call	4b9c0 <__adddf3>
   45c64:	b009883a 	mov	r4,r22
   45c68:	1021883a 	mov	r16,r2
   45c6c:	1823883a 	mov	r17,r3
   45c70:	004c2f80 	call	4c2f8 <__floatsidf>
   45c74:	021427f4 	movhi	r8,20639
   45c78:	421e7ec4 	addi	r8,r8,31227
   45c7c:	024ff4f4 	movhi	r9,16339
   45c80:	4a5104c4 	addi	r9,r9,17427
   45c84:	480f883a 	mov	r7,r9
   45c88:	400d883a 	mov	r6,r8
   45c8c:	180b883a 	mov	r5,r3
   45c90:	1009883a 	mov	r4,r2
   45c94:	004ba340 	call	4ba34 <__muldf3>
   45c98:	180f883a 	mov	r7,r3
   45c9c:	880b883a 	mov	r5,r17
   45ca0:	100d883a 	mov	r6,r2
   45ca4:	8009883a 	mov	r4,r16
   45ca8:	004b9c00 	call	4b9c0 <__adddf3>
   45cac:	1009883a 	mov	r4,r2
   45cb0:	180b883a 	mov	r5,r3
   45cb4:	1021883a 	mov	r16,r2
   45cb8:	1823883a 	mov	r17,r3
   45cbc:	004c3f00 	call	4c3f0 <__fixdfsi>
   45cc0:	000d883a 	mov	r6,zero
   45cc4:	000f883a 	mov	r7,zero
   45cc8:	8009883a 	mov	r4,r16
   45ccc:	880b883a 	mov	r5,r17
   45cd0:	d8800d15 	stw	r2,52(sp)
   45cd4:	004c2700 	call	4c270 <__ltdf2>
   45cd8:	10031716 	blt	r2,zero,46938 <_dtoa_r+0xe8c>
   45cdc:	d8c00d17 	ldw	r3,52(sp)
   45ce0:	00800584 	movi	r2,22
   45ce4:	10c1482e 	bgeu	r2,r3,46208 <_dtoa_r+0x75c>
   45ce8:	01000044 	movi	r4,1
   45cec:	d9000c15 	stw	r4,48(sp)
   45cf0:	bd85c83a 	sub	r2,r23,r22
   45cf4:	11bfffc4 	addi	r6,r2,-1
   45cf8:	30030b16 	blt	r6,zero,46928 <_dtoa_r+0xe7c>
   45cfc:	d9800a15 	stw	r6,40(sp)
   45d00:	d8001115 	stw	zero,68(sp)
   45d04:	d8c00d17 	ldw	r3,52(sp)
   45d08:	1802ff16 	blt	r3,zero,46908 <_dtoa_r+0xe5c>
   45d0c:	d9000a17 	ldw	r4,40(sp)
   45d10:	d8c00915 	stw	r3,36(sp)
   45d14:	d8001015 	stw	zero,64(sp)
   45d18:	20c9883a 	add	r4,r4,r3
   45d1c:	d9000a15 	stw	r4,40(sp)
   45d20:	d9001717 	ldw	r4,92(sp)
   45d24:	00800244 	movi	r2,9
   45d28:	11004636 	bltu	r2,r4,45e44 <_dtoa_r+0x398>
   45d2c:	00800144 	movi	r2,5
   45d30:	11020416 	blt	r2,r4,46544 <_dtoa_r+0xa98>
   45d34:	04400044 	movi	r17,1
   45d38:	d8c01717 	ldw	r3,92(sp)
   45d3c:	00800144 	movi	r2,5
   45d40:	10c1ed36 	bltu	r2,r3,464f8 <_dtoa_r+0xa4c>
   45d44:	18c5883a 	add	r2,r3,r3
   45d48:	1085883a 	add	r2,r2,r2
   45d4c:	00c00134 	movhi	r3,4
   45d50:	18d75804 	addi	r3,r3,23904
   45d54:	10c5883a 	add	r2,r2,r3
   45d58:	11000017 	ldw	r4,0(r2)
   45d5c:	2000683a 	jmp	r4
   45d60:	00045e4c 	andi	zero,zero,4473
   45d64:	00045e4c 	andi	zero,zero,4473
   45d68:	0004684c 	andi	zero,zero,4513
   45d6c:	00046824 	muli	zero,zero,4512
   45d70:	00046868 	cmpgeui	zero,zero,4513
   45d74:	00046874 	movhi	zero,4513
   45d78:	d9002717 	ldw	r4,156(sp)
   45d7c:	0089c3c4 	movi	r2,9999
   45d80:	20800015 	stw	r2,0(r4)
   45d84:	a0001026 	beq	r20,zero,45dc8 <_dtoa_r+0x31c>
   45d88:	00c00174 	movhi	r3,5
   45d8c:	18ffad04 	addi	r3,r3,-332
   45d90:	d9802917 	ldw	r6,164(sp)
   45d94:	303f7926 	beq	r6,zero,45b7c <_dtoa_r+0xd0>
   45d98:	188000c7 	ldb	r2,3(r3)
   45d9c:	190000c4 	addi	r4,r3,3
   45da0:	1000101e 	bne	r2,zero,45de4 <_dtoa_r+0x338>
   45da4:	d8802917 	ldw	r2,164(sp)
   45da8:	11000015 	stw	r4,0(r2)
   45dac:	003f7306 	br	45b7c <_dtoa_r+0xd0>
   45db0:	00a00034 	movhi	r2,32768
   45db4:	10bfffc4 	addi	r2,r2,-1
   45db8:	00c00044 	movi	r3,1
   45dbc:	88aa703a 	and	r21,r17,r2
   45dc0:	90c00015 	stw	r3,0(r18)
   45dc4:	003f5806 	br	45b28 <_dtoa_r+0x7c>
   45dc8:	00800434 	movhi	r2,16
   45dcc:	10bfffc4 	addi	r2,r2,-1
   45dd0:	a884703a 	and	r2,r21,r2
   45dd4:	103fec1e 	bne	r2,zero,45d88 <_dtoa_r+0x2dc>
   45dd8:	00c00174 	movhi	r3,5
   45ddc:	18ffaa04 	addi	r3,r3,-344
   45de0:	003feb06 	br	45d90 <_dtoa_r+0x2e4>
   45de4:	d8802917 	ldw	r2,164(sp)
   45de8:	19000204 	addi	r4,r3,8
   45dec:	11000015 	stw	r4,0(r2)
   45df0:	003f6206 	br	45b7c <_dtoa_r+0xd0>
   45df4:	ddc00117 	ldw	r23,4(sp)
   45df8:	d8800217 	ldw	r2,8(sp)
   45dfc:	01000804 	movi	r4,32
   45e00:	b8c10c84 	addi	r3,r23,1074
   45e04:	18a3883a 	add	r17,r3,r2
   45e08:	2441b80e 	bge	r4,r17,464ec <_dtoa_r+0xa40>
   45e0c:	00c01004 	movi	r3,64
   45e10:	1c47c83a 	sub	r3,r3,r17
   45e14:	88bff804 	addi	r2,r17,-32
   45e18:	a8c6983a 	sll	r3,r21,r3
   45e1c:	a084d83a 	srl	r2,r20,r2
   45e20:	1888b03a 	or	r4,r3,r2
   45e24:	004c4c80 	call	4c4c8 <__floatunsidf>
   45e28:	1011883a 	mov	r8,r2
   45e2c:	00bf8434 	movhi	r2,65040
   45e30:	01000044 	movi	r4,1
   45e34:	10d3883a 	add	r9,r2,r3
   45e38:	8dbef344 	addi	r22,r17,-1075
   45e3c:	d9000815 	stw	r4,32(sp)
   45e40:	003f6f06 	br	45c00 <_dtoa_r+0x154>
   45e44:	d8001715 	stw	zero,92(sp)
   45e48:	04400044 	movi	r17,1
   45e4c:	00bfffc4 	movi	r2,-1
   45e50:	00c00044 	movi	r3,1
   45e54:	d8800e15 	stw	r2,56(sp)
   45e58:	d8002615 	stw	zero,152(sp)
   45e5c:	d8800f15 	stw	r2,60(sp)
   45e60:	d8c00b15 	stw	r3,44(sp)
   45e64:	1021883a 	mov	r16,r2
   45e68:	d8801617 	ldw	r2,88(sp)
   45e6c:	10001115 	stw	zero,68(r2)
   45e70:	d8801617 	ldw	r2,88(sp)
   45e74:	11401117 	ldw	r5,68(r2)
   45e78:	1009883a 	mov	r4,r2
   45e7c:	00491c00 	call	491c0 <_Balloc>
   45e80:	d8c01617 	ldw	r3,88(sp)
   45e84:	d8800515 	stw	r2,20(sp)
   45e88:	18801015 	stw	r2,64(r3)
   45e8c:	00800384 	movi	r2,14
   45e90:	14006836 	bltu	r2,r16,46034 <_dtoa_r+0x588>
   45e94:	8805003a 	cmpeq	r2,r17,zero
   45e98:	1000661e 	bne	r2,zero,46034 <_dtoa_r+0x588>
   45e9c:	d9000d17 	ldw	r4,52(sp)
   45ea0:	0102300e 	bge	zero,r4,46764 <_dtoa_r+0xcb8>
   45ea4:	208003cc 	andi	r2,r4,15
   45ea8:	100490fa 	slli	r2,r2,3
   45eac:	2025d13a 	srai	r18,r4,4
   45eb0:	00c00174 	movhi	r3,5
   45eb4:	18ffbf04 	addi	r3,r3,-260
   45eb8:	10c5883a 	add	r2,r2,r3
   45ebc:	90c0040c 	andi	r3,r18,16
   45ec0:	14000017 	ldw	r16,0(r2)
   45ec4:	14400117 	ldw	r17,4(r2)
   45ec8:	18036a1e 	bne	r3,zero,46c74 <_dtoa_r+0x11c8>
   45ecc:	05800084 	movi	r22,2
   45ed0:	90001026 	beq	r18,zero,45f14 <_dtoa_r+0x468>
   45ed4:	04c00174 	movhi	r19,5
   45ed8:	9cfff104 	addi	r19,r19,-60
   45edc:	9080004c 	andi	r2,r18,1
   45ee0:	1005003a 	cmpeq	r2,r2,zero
   45ee4:	1000081e 	bne	r2,zero,45f08 <_dtoa_r+0x45c>
   45ee8:	99800017 	ldw	r6,0(r19)
   45eec:	99c00117 	ldw	r7,4(r19)
   45ef0:	880b883a 	mov	r5,r17
   45ef4:	8009883a 	mov	r4,r16
   45ef8:	004ba340 	call	4ba34 <__muldf3>
   45efc:	1021883a 	mov	r16,r2
   45f00:	b5800044 	addi	r22,r22,1
   45f04:	1823883a 	mov	r17,r3
   45f08:	9025d07a 	srai	r18,r18,1
   45f0c:	9cc00204 	addi	r19,r19,8
   45f10:	903ff21e 	bne	r18,zero,45edc <_dtoa_r+0x430>
   45f14:	a80b883a 	mov	r5,r21
   45f18:	a009883a 	mov	r4,r20
   45f1c:	880f883a 	mov	r7,r17
   45f20:	800d883a 	mov	r6,r16
   45f24:	004bdf80 	call	4bdf8 <__divdf3>
   45f28:	1029883a 	mov	r20,r2
   45f2c:	182b883a 	mov	r21,r3
   45f30:	d8c00c17 	ldw	r3,48(sp)
   45f34:	1805003a 	cmpeq	r2,r3,zero
   45f38:	1000081e 	bne	r2,zero,45f5c <_dtoa_r+0x4b0>
   45f3c:	0005883a 	mov	r2,zero
   45f40:	00cffc34 	movhi	r3,16368
   45f44:	180f883a 	mov	r7,r3
   45f48:	a009883a 	mov	r4,r20
   45f4c:	a80b883a 	mov	r5,r21
   45f50:	100d883a 	mov	r6,r2
   45f54:	004c2700 	call	4c270 <__ltdf2>
   45f58:	1003fe16 	blt	r2,zero,46f54 <_dtoa_r+0x14a8>
   45f5c:	b009883a 	mov	r4,r22
   45f60:	004c2f80 	call	4c2f8 <__floatsidf>
   45f64:	180b883a 	mov	r5,r3
   45f68:	1009883a 	mov	r4,r2
   45f6c:	a00d883a 	mov	r6,r20
   45f70:	a80f883a 	mov	r7,r21
   45f74:	004ba340 	call	4ba34 <__muldf3>
   45f78:	0011883a 	mov	r8,zero
   45f7c:	02500734 	movhi	r9,16412
   45f80:	1009883a 	mov	r4,r2
   45f84:	180b883a 	mov	r5,r3
   45f88:	480f883a 	mov	r7,r9
   45f8c:	400d883a 	mov	r6,r8
   45f90:	004b9c00 	call	4b9c0 <__adddf3>
   45f94:	d9000f17 	ldw	r4,60(sp)
   45f98:	102d883a 	mov	r22,r2
   45f9c:	00bf3034 	movhi	r2,64704
   45fa0:	18b9883a 	add	fp,r3,r2
   45fa4:	e02f883a 	mov	r23,fp
   45fa8:	20028f1e 	bne	r4,zero,469e8 <_dtoa_r+0xf3c>
   45fac:	0005883a 	mov	r2,zero
   45fb0:	00d00534 	movhi	r3,16404
   45fb4:	a009883a 	mov	r4,r20
   45fb8:	a80b883a 	mov	r5,r21
   45fbc:	180f883a 	mov	r7,r3
   45fc0:	100d883a 	mov	r6,r2
   45fc4:	004b9400 	call	4b940 <__subdf3>
   45fc8:	1009883a 	mov	r4,r2
   45fcc:	e00f883a 	mov	r7,fp
   45fd0:	180b883a 	mov	r5,r3
   45fd4:	b00d883a 	mov	r6,r22
   45fd8:	1025883a 	mov	r18,r2
   45fdc:	1827883a 	mov	r19,r3
   45fe0:	004c1600 	call	4c160 <__gtdf2>
   45fe4:	00834f16 	blt	zero,r2,46d24 <_dtoa_r+0x1278>
   45fe8:	e0e0003c 	xorhi	r3,fp,32768
   45fec:	9009883a 	mov	r4,r18
   45ff0:	980b883a 	mov	r5,r19
   45ff4:	180f883a 	mov	r7,r3
   45ff8:	b00d883a 	mov	r6,r22
   45ffc:	004c2700 	call	4c270 <__ltdf2>
   46000:	1000080e 	bge	r2,zero,46024 <_dtoa_r+0x578>
   46004:	0027883a 	mov	r19,zero
   46008:	0025883a 	mov	r18,zero
   4600c:	d8802617 	ldw	r2,152(sp)
   46010:	df000517 	ldw	fp,20(sp)
   46014:	d8000615 	stw	zero,24(sp)
   46018:	0084303a 	nor	r2,zero,r2
   4601c:	d8800d15 	stw	r2,52(sp)
   46020:	00019b06 	br	46690 <_dtoa_r+0xbe4>
   46024:	d9801217 	ldw	r6,72(sp)
   46028:	d8801317 	ldw	r2,76(sp)
   4602c:	3029883a 	mov	r20,r6
   46030:	102b883a 	mov	r21,r2
   46034:	d8c00217 	ldw	r3,8(sp)
   46038:	18008516 	blt	r3,zero,46250 <_dtoa_r+0x7a4>
   4603c:	d9000d17 	ldw	r4,52(sp)
   46040:	00800384 	movi	r2,14
   46044:	11008216 	blt	r2,r4,46250 <_dtoa_r+0x7a4>
   46048:	200490fa 	slli	r2,r4,3
   4604c:	d9802617 	ldw	r6,152(sp)
   46050:	00c00174 	movhi	r3,5
   46054:	18ffbf04 	addi	r3,r3,-260
   46058:	10c5883a 	add	r2,r2,r3
   4605c:	14800017 	ldw	r18,0(r2)
   46060:	14c00117 	ldw	r19,4(r2)
   46064:	30031e16 	blt	r6,zero,46ce0 <_dtoa_r+0x1234>
   46068:	d9000517 	ldw	r4,20(sp)
   4606c:	d8c00f17 	ldw	r3,60(sp)
   46070:	a823883a 	mov	r17,r21
   46074:	a021883a 	mov	r16,r20
   46078:	192b883a 	add	r21,r3,r4
   4607c:	2039883a 	mov	fp,r4
   46080:	00000f06 	br	460c0 <_dtoa_r+0x614>
   46084:	0005883a 	mov	r2,zero
   46088:	00d00934 	movhi	r3,16420
   4608c:	5009883a 	mov	r4,r10
   46090:	580b883a 	mov	r5,r11
   46094:	180f883a 	mov	r7,r3
   46098:	100d883a 	mov	r6,r2
   4609c:	004ba340 	call	4ba34 <__muldf3>
   460a0:	180b883a 	mov	r5,r3
   460a4:	000d883a 	mov	r6,zero
   460a8:	000f883a 	mov	r7,zero
   460ac:	1009883a 	mov	r4,r2
   460b0:	1021883a 	mov	r16,r2
   460b4:	1823883a 	mov	r17,r3
   460b8:	004c0d80 	call	4c0d8 <__nedf2>
   460bc:	10004526 	beq	r2,zero,461d4 <_dtoa_r+0x728>
   460c0:	900d883a 	mov	r6,r18
   460c4:	980f883a 	mov	r7,r19
   460c8:	8009883a 	mov	r4,r16
   460cc:	880b883a 	mov	r5,r17
   460d0:	004bdf80 	call	4bdf8 <__divdf3>
   460d4:	180b883a 	mov	r5,r3
   460d8:	1009883a 	mov	r4,r2
   460dc:	004c3f00 	call	4c3f0 <__fixdfsi>
   460e0:	1009883a 	mov	r4,r2
   460e4:	1029883a 	mov	r20,r2
   460e8:	004c2f80 	call	4c2f8 <__floatsidf>
   460ec:	180f883a 	mov	r7,r3
   460f0:	9009883a 	mov	r4,r18
   460f4:	980b883a 	mov	r5,r19
   460f8:	100d883a 	mov	r6,r2
   460fc:	004ba340 	call	4ba34 <__muldf3>
   46100:	180f883a 	mov	r7,r3
   46104:	880b883a 	mov	r5,r17
   46108:	8009883a 	mov	r4,r16
   4610c:	100d883a 	mov	r6,r2
   46110:	004b9400 	call	4b940 <__subdf3>
   46114:	1015883a 	mov	r10,r2
   46118:	a0800c04 	addi	r2,r20,48
   4611c:	e0800005 	stb	r2,0(fp)
   46120:	e7000044 	addi	fp,fp,1
   46124:	1817883a 	mov	r11,r3
   46128:	e57fd61e 	bne	fp,r21,46084 <_dtoa_r+0x5d8>
   4612c:	500d883a 	mov	r6,r10
   46130:	180f883a 	mov	r7,r3
   46134:	5009883a 	mov	r4,r10
   46138:	180b883a 	mov	r5,r3
   4613c:	004b9c00 	call	4b9c0 <__adddf3>
   46140:	100d883a 	mov	r6,r2
   46144:	9009883a 	mov	r4,r18
   46148:	980b883a 	mov	r5,r19
   4614c:	180f883a 	mov	r7,r3
   46150:	1021883a 	mov	r16,r2
   46154:	1823883a 	mov	r17,r3
   46158:	004c2700 	call	4c270 <__ltdf2>
   4615c:	10000816 	blt	r2,zero,46180 <_dtoa_r+0x6d4>
   46160:	980b883a 	mov	r5,r19
   46164:	800d883a 	mov	r6,r16
   46168:	880f883a 	mov	r7,r17
   4616c:	9009883a 	mov	r4,r18
   46170:	004c0500 	call	4c050 <__eqdf2>
   46174:	1000171e 	bne	r2,zero,461d4 <_dtoa_r+0x728>
   46178:	a080004c 	andi	r2,r20,1
   4617c:	10001526 	beq	r2,zero,461d4 <_dtoa_r+0x728>
   46180:	d8800d17 	ldw	r2,52(sp)
   46184:	d8800415 	stw	r2,16(sp)
   46188:	e009883a 	mov	r4,fp
   4618c:	213fffc4 	addi	r4,r4,-1
   46190:	20c00007 	ldb	r3,0(r4)
   46194:	00800e44 	movi	r2,57
   46198:	1880081e 	bne	r3,r2,461bc <_dtoa_r+0x710>
   4619c:	d8800517 	ldw	r2,20(sp)
   461a0:	113ffa1e 	bne	r2,r4,4618c <_dtoa_r+0x6e0>
   461a4:	d8c00417 	ldw	r3,16(sp)
   461a8:	d9800517 	ldw	r6,20(sp)
   461ac:	00800c04 	movi	r2,48
   461b0:	18c00044 	addi	r3,r3,1
   461b4:	d8c00415 	stw	r3,16(sp)
   461b8:	30800005 	stb	r2,0(r6)
   461bc:	20800003 	ldbu	r2,0(r4)
   461c0:	d8c00417 	ldw	r3,16(sp)
   461c4:	27000044 	addi	fp,r4,1
   461c8:	10800044 	addi	r2,r2,1
   461cc:	d8c00d15 	stw	r3,52(sp)
   461d0:	20800005 	stb	r2,0(r4)
   461d4:	d9001617 	ldw	r4,88(sp)
   461d8:	d9400717 	ldw	r5,28(sp)
   461dc:	0048c400 	call	48c40 <_Bfree>
   461e0:	e0000005 	stb	zero,0(fp)
   461e4:	d9800d17 	ldw	r6,52(sp)
   461e8:	d8c02717 	ldw	r3,156(sp)
   461ec:	d9002917 	ldw	r4,164(sp)
   461f0:	30800044 	addi	r2,r6,1
   461f4:	18800015 	stw	r2,0(r3)
   461f8:	20029c26 	beq	r4,zero,46c6c <_dtoa_r+0x11c0>
   461fc:	d8c00517 	ldw	r3,20(sp)
   46200:	27000015 	stw	fp,0(r4)
   46204:	003e5d06 	br	45b7c <_dtoa_r+0xd0>
   46208:	d9800d17 	ldw	r6,52(sp)
   4620c:	00c00174 	movhi	r3,5
   46210:	18ffbf04 	addi	r3,r3,-260
   46214:	d9001217 	ldw	r4,72(sp)
   46218:	300490fa 	slli	r2,r6,3
   4621c:	d9401317 	ldw	r5,76(sp)
   46220:	10c5883a 	add	r2,r2,r3
   46224:	12000017 	ldw	r8,0(r2)
   46228:	12400117 	ldw	r9,4(r2)
   4622c:	400d883a 	mov	r6,r8
   46230:	480f883a 	mov	r7,r9
   46234:	004c2700 	call	4c270 <__ltdf2>
   46238:	1000030e 	bge	r2,zero,46248 <_dtoa_r+0x79c>
   4623c:	d8800d17 	ldw	r2,52(sp)
   46240:	10bfffc4 	addi	r2,r2,-1
   46244:	d8800d15 	stw	r2,52(sp)
   46248:	d8000c15 	stw	zero,48(sp)
   4624c:	003ea806 	br	45cf0 <_dtoa_r+0x244>
   46250:	d9000b17 	ldw	r4,44(sp)
   46254:	202cc03a 	cmpne	r22,r4,zero
   46258:	b000c71e 	bne	r22,zero,46578 <_dtoa_r+0xacc>
   4625c:	dc001117 	ldw	r16,68(sp)
   46260:	dc801017 	ldw	r18,64(sp)
   46264:	0027883a 	mov	r19,zero
   46268:	04000b0e 	bge	zero,r16,46298 <_dtoa_r+0x7ec>
   4626c:	d8c00a17 	ldw	r3,40(sp)
   46270:	00c0090e 	bge	zero,r3,46298 <_dtoa_r+0x7ec>
   46274:	8005883a 	mov	r2,r16
   46278:	1c011316 	blt	r3,r16,466c8 <_dtoa_r+0xc1c>
   4627c:	d9000a17 	ldw	r4,40(sp)
   46280:	d9801117 	ldw	r6,68(sp)
   46284:	80a1c83a 	sub	r16,r16,r2
   46288:	2089c83a 	sub	r4,r4,r2
   4628c:	308dc83a 	sub	r6,r6,r2
   46290:	d9000a15 	stw	r4,40(sp)
   46294:	d9801115 	stw	r6,68(sp)
   46298:	d8801017 	ldw	r2,64(sp)
   4629c:	0080150e 	bge	zero,r2,462f4 <_dtoa_r+0x848>
   462a0:	d8c00b17 	ldw	r3,44(sp)
   462a4:	1805003a 	cmpeq	r2,r3,zero
   462a8:	1001c91e 	bne	r2,zero,469d0 <_dtoa_r+0xf24>
   462ac:	04800e0e 	bge	zero,r18,462e8 <_dtoa_r+0x83c>
   462b0:	d9001617 	ldw	r4,88(sp)
   462b4:	980b883a 	mov	r5,r19
   462b8:	900d883a 	mov	r6,r18
   462bc:	00499f40 	call	499f4 <__pow5mult>
   462c0:	d9001617 	ldw	r4,88(sp)
   462c4:	d9800717 	ldw	r6,28(sp)
   462c8:	100b883a 	mov	r5,r2
   462cc:	1027883a 	mov	r19,r2
   462d0:	00496d00 	call	496d0 <__multiply>
   462d4:	d9001617 	ldw	r4,88(sp)
   462d8:	d9400717 	ldw	r5,28(sp)
   462dc:	1023883a 	mov	r17,r2
   462e0:	0048c400 	call	48c40 <_Bfree>
   462e4:	dc400715 	stw	r17,28(sp)
   462e8:	d9001017 	ldw	r4,64(sp)
   462ec:	248dc83a 	sub	r6,r4,r18
   462f0:	30010e1e 	bne	r6,zero,4672c <_dtoa_r+0xc80>
   462f4:	d9001617 	ldw	r4,88(sp)
   462f8:	04400044 	movi	r17,1
   462fc:	880b883a 	mov	r5,r17
   46300:	00498b80 	call	498b8 <__i2b>
   46304:	d9800917 	ldw	r6,36(sp)
   46308:	1025883a 	mov	r18,r2
   4630c:	0180040e 	bge	zero,r6,46320 <_dtoa_r+0x874>
   46310:	d9001617 	ldw	r4,88(sp)
   46314:	100b883a 	mov	r5,r2
   46318:	00499f40 	call	499f4 <__pow5mult>
   4631c:	1025883a 	mov	r18,r2
   46320:	d8801717 	ldw	r2,92(sp)
   46324:	8880f30e 	bge	r17,r2,466f4 <_dtoa_r+0xc48>
   46328:	0023883a 	mov	r17,zero
   4632c:	d9800917 	ldw	r6,36(sp)
   46330:	30019e1e 	bne	r6,zero,469ac <_dtoa_r+0xf00>
   46334:	00c00044 	movi	r3,1
   46338:	d9000a17 	ldw	r4,40(sp)
   4633c:	20c5883a 	add	r2,r4,r3
   46340:	10c007cc 	andi	r3,r2,31
   46344:	1800841e 	bne	r3,zero,46558 <_dtoa_r+0xaac>
   46348:	00800704 	movi	r2,28
   4634c:	d9000a17 	ldw	r4,40(sp)
   46350:	d9801117 	ldw	r6,68(sp)
   46354:	80a1883a 	add	r16,r16,r2
   46358:	2089883a 	add	r4,r4,r2
   4635c:	308d883a 	add	r6,r6,r2
   46360:	d9000a15 	stw	r4,40(sp)
   46364:	d9801115 	stw	r6,68(sp)
   46368:	d8801117 	ldw	r2,68(sp)
   4636c:	0080050e 	bge	zero,r2,46384 <_dtoa_r+0x8d8>
   46370:	d9400717 	ldw	r5,28(sp)
   46374:	d9001617 	ldw	r4,88(sp)
   46378:	100d883a 	mov	r6,r2
   4637c:	00495840 	call	49584 <__lshift>
   46380:	d8800715 	stw	r2,28(sp)
   46384:	d8c00a17 	ldw	r3,40(sp)
   46388:	00c0050e 	bge	zero,r3,463a0 <_dtoa_r+0x8f4>
   4638c:	d9001617 	ldw	r4,88(sp)
   46390:	900b883a 	mov	r5,r18
   46394:	180d883a 	mov	r6,r3
   46398:	00495840 	call	49584 <__lshift>
   4639c:	1025883a 	mov	r18,r2
   463a0:	d9000c17 	ldw	r4,48(sp)
   463a4:	2005003a 	cmpeq	r2,r4,zero
   463a8:	10016f26 	beq	r2,zero,46968 <_dtoa_r+0xebc>
   463ac:	d9000f17 	ldw	r4,60(sp)
   463b0:	0102170e 	bge	zero,r4,46c10 <_dtoa_r+0x1164>
   463b4:	d9800b17 	ldw	r6,44(sp)
   463b8:	3005003a 	cmpeq	r2,r6,zero
   463bc:	1000881e 	bne	r2,zero,465e0 <_dtoa_r+0xb34>
   463c0:	0400050e 	bge	zero,r16,463d8 <_dtoa_r+0x92c>
   463c4:	d9001617 	ldw	r4,88(sp)
   463c8:	980b883a 	mov	r5,r19
   463cc:	800d883a 	mov	r6,r16
   463d0:	00495840 	call	49584 <__lshift>
   463d4:	1027883a 	mov	r19,r2
   463d8:	8804c03a 	cmpne	r2,r17,zero
   463dc:	1002541e 	bne	r2,zero,46d30 <_dtoa_r+0x1284>
   463e0:	980b883a 	mov	r5,r19
   463e4:	dd800517 	ldw	r22,20(sp)
   463e8:	dcc00615 	stw	r19,24(sp)
   463ec:	a700004c 	andi	fp,r20,1
   463f0:	2827883a 	mov	r19,r5
   463f4:	d9000717 	ldw	r4,28(sp)
   463f8:	900b883a 	mov	r5,r18
   463fc:	00458940 	call	45894 <quorem>
   46400:	d9000717 	ldw	r4,28(sp)
   46404:	d9400617 	ldw	r5,24(sp)
   46408:	1023883a 	mov	r17,r2
   4640c:	8dc00c04 	addi	r23,r17,48
   46410:	0048d9c0 	call	48d9c <__mcmp>
   46414:	d9001617 	ldw	r4,88(sp)
   46418:	900b883a 	mov	r5,r18
   4641c:	980d883a 	mov	r6,r19
   46420:	1029883a 	mov	r20,r2
   46424:	00493f80 	call	493f8 <__mdiff>
   46428:	102b883a 	mov	r21,r2
   4642c:	10800317 	ldw	r2,12(r2)
   46430:	1001281e 	bne	r2,zero,468d4 <_dtoa_r+0xe28>
   46434:	d9000717 	ldw	r4,28(sp)
   46438:	a80b883a 	mov	r5,r21
   4643c:	0048d9c0 	call	48d9c <__mcmp>
   46440:	d9001617 	ldw	r4,88(sp)
   46444:	1021883a 	mov	r16,r2
   46448:	a80b883a 	mov	r5,r21
   4644c:	0048c400 	call	48c40 <_Bfree>
   46450:	8000041e 	bne	r16,zero,46464 <_dtoa_r+0x9b8>
   46454:	d8801717 	ldw	r2,92(sp)
   46458:	1000021e 	bne	r2,zero,46464 <_dtoa_r+0x9b8>
   4645c:	e004c03a 	cmpne	r2,fp,zero
   46460:	10011726 	beq	r2,zero,468c0 <_dtoa_r+0xe14>
   46464:	a0010616 	blt	r20,zero,46880 <_dtoa_r+0xdd4>
   46468:	a000041e 	bne	r20,zero,4647c <_dtoa_r+0x9d0>
   4646c:	d8c01717 	ldw	r3,92(sp)
   46470:	1800021e 	bne	r3,zero,4647c <_dtoa_r+0x9d0>
   46474:	e004c03a 	cmpne	r2,fp,zero
   46478:	10010126 	beq	r2,zero,46880 <_dtoa_r+0xdd4>
   4647c:	04023d16 	blt	zero,r16,46d74 <_dtoa_r+0x12c8>
   46480:	b5c00005 	stb	r23,0(r22)
   46484:	d9800517 	ldw	r6,20(sp)
   46488:	d9000f17 	ldw	r4,60(sp)
   4648c:	b5800044 	addi	r22,r22,1
   46490:	3105883a 	add	r2,r6,r4
   46494:	b0806526 	beq	r22,r2,4662c <_dtoa_r+0xb80>
   46498:	d9400717 	ldw	r5,28(sp)
   4649c:	d9001617 	ldw	r4,88(sp)
   464a0:	01800284 	movi	r6,10
   464a4:	000f883a 	mov	r7,zero
   464a8:	00498f40 	call	498f4 <__multadd>
   464ac:	d8800715 	stw	r2,28(sp)
   464b0:	d8800617 	ldw	r2,24(sp)
   464b4:	14c10c26 	beq	r2,r19,468e8 <_dtoa_r+0xe3c>
   464b8:	d9400617 	ldw	r5,24(sp)
   464bc:	d9001617 	ldw	r4,88(sp)
   464c0:	01800284 	movi	r6,10
   464c4:	000f883a 	mov	r7,zero
   464c8:	00498f40 	call	498f4 <__multadd>
   464cc:	d9001617 	ldw	r4,88(sp)
   464d0:	980b883a 	mov	r5,r19
   464d4:	01800284 	movi	r6,10
   464d8:	000f883a 	mov	r7,zero
   464dc:	d8800615 	stw	r2,24(sp)
   464e0:	00498f40 	call	498f4 <__multadd>
   464e4:	1027883a 	mov	r19,r2
   464e8:	003fc206 	br	463f4 <_dtoa_r+0x948>
   464ec:	2445c83a 	sub	r2,r4,r17
   464f0:	a088983a 	sll	r4,r20,r2
   464f4:	003e4b06 	br	45e24 <_dtoa_r+0x378>
   464f8:	01bfffc4 	movi	r6,-1
   464fc:	00800044 	movi	r2,1
   46500:	d9800e15 	stw	r6,56(sp)
   46504:	d9800f15 	stw	r6,60(sp)
   46508:	d8800b15 	stw	r2,44(sp)
   4650c:	d8c01617 	ldw	r3,88(sp)
   46510:	008005c4 	movi	r2,23
   46514:	18001115 	stw	zero,68(r3)
   46518:	1580082e 	bgeu	r2,r22,4653c <_dtoa_r+0xa90>
   4651c:	00c00104 	movi	r3,4
   46520:	0009883a 	mov	r4,zero
   46524:	18c7883a 	add	r3,r3,r3
   46528:	18800504 	addi	r2,r3,20
   4652c:	21000044 	addi	r4,r4,1
   46530:	b0bffc2e 	bgeu	r22,r2,46524 <_dtoa_r+0xa78>
   46534:	d9801617 	ldw	r6,88(sp)
   46538:	31001115 	stw	r4,68(r6)
   4653c:	dc000f17 	ldw	r16,60(sp)
   46540:	003e4b06 	br	45e70 <_dtoa_r+0x3c4>
   46544:	d9801717 	ldw	r6,92(sp)
   46548:	0023883a 	mov	r17,zero
   4654c:	31bfff04 	addi	r6,r6,-4
   46550:	d9801715 	stw	r6,92(sp)
   46554:	003df806 	br	45d38 <_dtoa_r+0x28c>
   46558:	00800804 	movi	r2,32
   4655c:	10c9c83a 	sub	r4,r2,r3
   46560:	00c00104 	movi	r3,4
   46564:	19005a16 	blt	r3,r4,466d0 <_dtoa_r+0xc24>
   46568:	008000c4 	movi	r2,3
   4656c:	113f7e16 	blt	r2,r4,46368 <_dtoa_r+0x8bc>
   46570:	20800704 	addi	r2,r4,28
   46574:	003f7506 	br	4634c <_dtoa_r+0x8a0>
   46578:	d9801717 	ldw	r6,92(sp)
   4657c:	00800044 	movi	r2,1
   46580:	1180a10e 	bge	r2,r6,46808 <_dtoa_r+0xd5c>
   46584:	d9800f17 	ldw	r6,60(sp)
   46588:	d8c01017 	ldw	r3,64(sp)
   4658c:	30bfffc4 	addi	r2,r6,-1
   46590:	1881c616 	blt	r3,r2,46cac <_dtoa_r+0x1200>
   46594:	18a5c83a 	sub	r18,r3,r2
   46598:	d8800f17 	ldw	r2,60(sp)
   4659c:	10026216 	blt	r2,zero,46f28 <_dtoa_r+0x147c>
   465a0:	dc001117 	ldw	r16,68(sp)
   465a4:	1007883a 	mov	r3,r2
   465a8:	d9800a17 	ldw	r6,40(sp)
   465ac:	d8801117 	ldw	r2,68(sp)
   465b0:	d9001617 	ldw	r4,88(sp)
   465b4:	30cd883a 	add	r6,r6,r3
   465b8:	10c5883a 	add	r2,r2,r3
   465bc:	01400044 	movi	r5,1
   465c0:	d9800a15 	stw	r6,40(sp)
   465c4:	d8801115 	stw	r2,68(sp)
   465c8:	00498b80 	call	498b8 <__i2b>
   465cc:	1027883a 	mov	r19,r2
   465d0:	003f2506 	br	46268 <_dtoa_r+0x7bc>
   465d4:	00c00174 	movhi	r3,5
   465d8:	18ffa104 	addi	r3,r3,-380
   465dc:	003d6706 	br	45b7c <_dtoa_r+0xd0>
   465e0:	dd800517 	ldw	r22,20(sp)
   465e4:	04000044 	movi	r16,1
   465e8:	00000706 	br	46608 <_dtoa_r+0xb5c>
   465ec:	d9400717 	ldw	r5,28(sp)
   465f0:	d9001617 	ldw	r4,88(sp)
   465f4:	01800284 	movi	r6,10
   465f8:	000f883a 	mov	r7,zero
   465fc:	00498f40 	call	498f4 <__multadd>
   46600:	d8800715 	stw	r2,28(sp)
   46604:	84000044 	addi	r16,r16,1
   46608:	d9000717 	ldw	r4,28(sp)
   4660c:	900b883a 	mov	r5,r18
   46610:	00458940 	call	45894 <quorem>
   46614:	15c00c04 	addi	r23,r2,48
   46618:	b5c00005 	stb	r23,0(r22)
   4661c:	d8c00f17 	ldw	r3,60(sp)
   46620:	b5800044 	addi	r22,r22,1
   46624:	80fff116 	blt	r16,r3,465ec <_dtoa_r+0xb40>
   46628:	d8000615 	stw	zero,24(sp)
   4662c:	d9400717 	ldw	r5,28(sp)
   46630:	d9001617 	ldw	r4,88(sp)
   46634:	01800044 	movi	r6,1
   46638:	00495840 	call	49584 <__lshift>
   4663c:	1009883a 	mov	r4,r2
   46640:	900b883a 	mov	r5,r18
   46644:	d8800715 	stw	r2,28(sp)
   46648:	0048d9c0 	call	48d9c <__mcmp>
   4664c:	00803c0e 	bge	zero,r2,46740 <_dtoa_r+0xc94>
   46650:	b009883a 	mov	r4,r22
   46654:	213fffc4 	addi	r4,r4,-1
   46658:	21400003 	ldbu	r5,0(r4)
   4665c:	00800e44 	movi	r2,57
   46660:	28c03fcc 	andi	r3,r5,255
   46664:	18c0201c 	xori	r3,r3,128
   46668:	18ffe004 	addi	r3,r3,-128
   4666c:	1881981e 	bne	r3,r2,46cd0 <_dtoa_r+0x1224>
   46670:	d9800517 	ldw	r6,20(sp)
   46674:	21bff71e 	bne	r4,r6,46654 <_dtoa_r+0xba8>
   46678:	d8800d17 	ldw	r2,52(sp)
   4667c:	37000044 	addi	fp,r6,1
   46680:	10800044 	addi	r2,r2,1
   46684:	d8800d15 	stw	r2,52(sp)
   46688:	00800c44 	movi	r2,49
   4668c:	30800005 	stb	r2,0(r6)
   46690:	d9001617 	ldw	r4,88(sp)
   46694:	900b883a 	mov	r5,r18
   46698:	0048c400 	call	48c40 <_Bfree>
   4669c:	983ecd26 	beq	r19,zero,461d4 <_dtoa_r+0x728>
   466a0:	d8c00617 	ldw	r3,24(sp)
   466a4:	18000426 	beq	r3,zero,466b8 <_dtoa_r+0xc0c>
   466a8:	1cc00326 	beq	r3,r19,466b8 <_dtoa_r+0xc0c>
   466ac:	d9001617 	ldw	r4,88(sp)
   466b0:	180b883a 	mov	r5,r3
   466b4:	0048c400 	call	48c40 <_Bfree>
   466b8:	d9001617 	ldw	r4,88(sp)
   466bc:	980b883a 	mov	r5,r19
   466c0:	0048c400 	call	48c40 <_Bfree>
   466c4:	003ec306 	br	461d4 <_dtoa_r+0x728>
   466c8:	1805883a 	mov	r2,r3
   466cc:	003eeb06 	br	4627c <_dtoa_r+0x7d0>
   466d0:	d9800a17 	ldw	r6,40(sp)
   466d4:	d8c01117 	ldw	r3,68(sp)
   466d8:	20bfff04 	addi	r2,r4,-4
   466dc:	308d883a 	add	r6,r6,r2
   466e0:	1887883a 	add	r3,r3,r2
   466e4:	80a1883a 	add	r16,r16,r2
   466e8:	d9800a15 	stw	r6,40(sp)
   466ec:	d8c01115 	stw	r3,68(sp)
   466f0:	003f1d06 	br	46368 <_dtoa_r+0x8bc>
   466f4:	a03f0c1e 	bne	r20,zero,46328 <_dtoa_r+0x87c>
   466f8:	00800434 	movhi	r2,16
   466fc:	10bfffc4 	addi	r2,r2,-1
   46700:	a884703a 	and	r2,r21,r2
   46704:	103f081e 	bne	r2,zero,46328 <_dtoa_r+0x87c>
   46708:	a89ffc2c 	andhi	r2,r21,32752
   4670c:	103f0626 	beq	r2,zero,46328 <_dtoa_r+0x87c>
   46710:	d8c01117 	ldw	r3,68(sp)
   46714:	d9000a17 	ldw	r4,40(sp)
   46718:	18c00044 	addi	r3,r3,1
   4671c:	21000044 	addi	r4,r4,1
   46720:	d8c01115 	stw	r3,68(sp)
   46724:	d9000a15 	stw	r4,40(sp)
   46728:	003f0006 	br	4632c <_dtoa_r+0x880>
   4672c:	d9400717 	ldw	r5,28(sp)
   46730:	d9001617 	ldw	r4,88(sp)
   46734:	00499f40 	call	499f4 <__pow5mult>
   46738:	d8800715 	stw	r2,28(sp)
   4673c:	003eed06 	br	462f4 <_dtoa_r+0x848>
   46740:	1000021e 	bne	r2,zero,4674c <_dtoa_r+0xca0>
   46744:	b880004c 	andi	r2,r23,1
   46748:	103fc11e 	bne	r2,zero,46650 <_dtoa_r+0xba4>
   4674c:	b5bfffc4 	addi	r22,r22,-1
   46750:	b0c00007 	ldb	r3,0(r22)
   46754:	00800c04 	movi	r2,48
   46758:	18bffc26 	beq	r3,r2,4674c <_dtoa_r+0xca0>
   4675c:	b7000044 	addi	fp,r22,1
   46760:	003fcb06 	br	46690 <_dtoa_r+0xbe4>
   46764:	d9800d17 	ldw	r6,52(sp)
   46768:	018fc83a 	sub	r7,zero,r6
   4676c:	3801f726 	beq	r7,zero,46f4c <_dtoa_r+0x14a0>
   46770:	398003cc 	andi	r6,r7,15
   46774:	300c90fa 	slli	r6,r6,3
   46778:	01400174 	movhi	r5,5
   4677c:	297fbf04 	addi	r5,r5,-260
   46780:	d9001217 	ldw	r4,72(sp)
   46784:	314d883a 	add	r6,r6,r5
   46788:	30c00117 	ldw	r3,4(r6)
   4678c:	30800017 	ldw	r2,0(r6)
   46790:	d9401317 	ldw	r5,76(sp)
   46794:	3821d13a 	srai	r16,r7,4
   46798:	100d883a 	mov	r6,r2
   4679c:	180f883a 	mov	r7,r3
   467a0:	004ba340 	call	4ba34 <__muldf3>
   467a4:	1011883a 	mov	r8,r2
   467a8:	1813883a 	mov	r9,r3
   467ac:	1029883a 	mov	r20,r2
   467b0:	182b883a 	mov	r21,r3
   467b4:	8001e526 	beq	r16,zero,46f4c <_dtoa_r+0x14a0>
   467b8:	05800084 	movi	r22,2
   467bc:	04400174 	movhi	r17,5
   467c0:	8c7ff104 	addi	r17,r17,-60
   467c4:	8080004c 	andi	r2,r16,1
   467c8:	1005003a 	cmpeq	r2,r2,zero
   467cc:	1000081e 	bne	r2,zero,467f0 <_dtoa_r+0xd44>
   467d0:	89800017 	ldw	r6,0(r17)
   467d4:	89c00117 	ldw	r7,4(r17)
   467d8:	480b883a 	mov	r5,r9
   467dc:	4009883a 	mov	r4,r8
   467e0:	004ba340 	call	4ba34 <__muldf3>
   467e4:	1011883a 	mov	r8,r2
   467e8:	b5800044 	addi	r22,r22,1
   467ec:	1813883a 	mov	r9,r3
   467f0:	8021d07a 	srai	r16,r16,1
   467f4:	8c400204 	addi	r17,r17,8
   467f8:	803ff21e 	bne	r16,zero,467c4 <_dtoa_r+0xd18>
   467fc:	4029883a 	mov	r20,r8
   46800:	482b883a 	mov	r21,r9
   46804:	003dca06 	br	45f30 <_dtoa_r+0x484>
   46808:	d9000817 	ldw	r4,32(sp)
   4680c:	2005003a 	cmpeq	r2,r4,zero
   46810:	1001f61e 	bne	r2,zero,46fec <_dtoa_r+0x1540>
   46814:	dc001117 	ldw	r16,68(sp)
   46818:	dc801017 	ldw	r18,64(sp)
   4681c:	18c10cc4 	addi	r3,r3,1075
   46820:	003f6106 	br	465a8 <_dtoa_r+0xafc>
   46824:	d8000b15 	stw	zero,44(sp)
   46828:	d9802617 	ldw	r6,152(sp)
   4682c:	d8c00d17 	ldw	r3,52(sp)
   46830:	30800044 	addi	r2,r6,1
   46834:	18ad883a 	add	r22,r3,r2
   46838:	b13fffc4 	addi	r4,r22,-1
   4683c:	d9000e15 	stw	r4,56(sp)
   46840:	0581f60e 	bge	zero,r22,4701c <_dtoa_r+0x1570>
   46844:	dd800f15 	stw	r22,60(sp)
   46848:	003f3006 	br	4650c <_dtoa_r+0xa60>
   4684c:	d8000b15 	stw	zero,44(sp)
   46850:	d9002617 	ldw	r4,152(sp)
   46854:	0101eb0e 	bge	zero,r4,47004 <_dtoa_r+0x1558>
   46858:	202d883a 	mov	r22,r4
   4685c:	d9000e15 	stw	r4,56(sp)
   46860:	d9000f15 	stw	r4,60(sp)
   46864:	003f2906 	br	4650c <_dtoa_r+0xa60>
   46868:	01800044 	movi	r6,1
   4686c:	d9800b15 	stw	r6,44(sp)
   46870:	003ff706 	br	46850 <_dtoa_r+0xda4>
   46874:	01000044 	movi	r4,1
   46878:	d9000b15 	stw	r4,44(sp)
   4687c:	003fea06 	br	46828 <_dtoa_r+0xd7c>
   46880:	04000c0e 	bge	zero,r16,468b4 <_dtoa_r+0xe08>
   46884:	d9400717 	ldw	r5,28(sp)
   46888:	d9001617 	ldw	r4,88(sp)
   4688c:	01800044 	movi	r6,1
   46890:	00495840 	call	49584 <__lshift>
   46894:	1009883a 	mov	r4,r2
   46898:	900b883a 	mov	r5,r18
   4689c:	d8800715 	stw	r2,28(sp)
   468a0:	0048d9c0 	call	48d9c <__mcmp>
   468a4:	0081e00e 	bge	zero,r2,47028 <_dtoa_r+0x157c>
   468a8:	bdc00044 	addi	r23,r23,1
   468ac:	00800e84 	movi	r2,58
   468b0:	b881a226 	beq	r23,r2,46f3c <_dtoa_r+0x1490>
   468b4:	b7000044 	addi	fp,r22,1
   468b8:	b5c00005 	stb	r23,0(r22)
   468bc:	003f7406 	br	46690 <_dtoa_r+0xbe4>
   468c0:	00800e44 	movi	r2,57
   468c4:	b8819d26 	beq	r23,r2,46f3c <_dtoa_r+0x1490>
   468c8:	053ffa0e 	bge	zero,r20,468b4 <_dtoa_r+0xe08>
   468cc:	8dc00c44 	addi	r23,r17,49
   468d0:	003ff806 	br	468b4 <_dtoa_r+0xe08>
   468d4:	d9001617 	ldw	r4,88(sp)
   468d8:	a80b883a 	mov	r5,r21
   468dc:	04000044 	movi	r16,1
   468e0:	0048c400 	call	48c40 <_Bfree>
   468e4:	003edf06 	br	46464 <_dtoa_r+0x9b8>
   468e8:	d9001617 	ldw	r4,88(sp)
   468ec:	980b883a 	mov	r5,r19
   468f0:	01800284 	movi	r6,10
   468f4:	000f883a 	mov	r7,zero
   468f8:	00498f40 	call	498f4 <__multadd>
   468fc:	1027883a 	mov	r19,r2
   46900:	d8800615 	stw	r2,24(sp)
   46904:	003ebb06 	br	463f4 <_dtoa_r+0x948>
   46908:	d9801117 	ldw	r6,68(sp)
   4690c:	d8800d17 	ldw	r2,52(sp)
   46910:	d8000915 	stw	zero,36(sp)
   46914:	308dc83a 	sub	r6,r6,r2
   46918:	0087c83a 	sub	r3,zero,r2
   4691c:	d9801115 	stw	r6,68(sp)
   46920:	d8c01015 	stw	r3,64(sp)
   46924:	003cfe06 	br	45d20 <_dtoa_r+0x274>
   46928:	018dc83a 	sub	r6,zero,r6
   4692c:	d9801115 	stw	r6,68(sp)
   46930:	d8000a15 	stw	zero,40(sp)
   46934:	003cf306 	br	45d04 <_dtoa_r+0x258>
   46938:	d9000d17 	ldw	r4,52(sp)
   4693c:	004c2f80 	call	4c2f8 <__floatsidf>
   46940:	880b883a 	mov	r5,r17
   46944:	8009883a 	mov	r4,r16
   46948:	180f883a 	mov	r7,r3
   4694c:	100d883a 	mov	r6,r2
   46950:	004c0d80 	call	4c0d8 <__nedf2>
   46954:	103ce126 	beq	r2,zero,45cdc <_dtoa_r+0x230>
   46958:	d9800d17 	ldw	r6,52(sp)
   4695c:	31bfffc4 	addi	r6,r6,-1
   46960:	d9800d15 	stw	r6,52(sp)
   46964:	003cdd06 	br	45cdc <_dtoa_r+0x230>
   46968:	d9000717 	ldw	r4,28(sp)
   4696c:	900b883a 	mov	r5,r18
   46970:	0048d9c0 	call	48d9c <__mcmp>
   46974:	103e8d0e 	bge	r2,zero,463ac <_dtoa_r+0x900>
   46978:	d9400717 	ldw	r5,28(sp)
   4697c:	d9001617 	ldw	r4,88(sp)
   46980:	01800284 	movi	r6,10
   46984:	000f883a 	mov	r7,zero
   46988:	00498f40 	call	498f4 <__multadd>
   4698c:	d9800d17 	ldw	r6,52(sp)
   46990:	d8800715 	stw	r2,28(sp)
   46994:	31bfffc4 	addi	r6,r6,-1
   46998:	d9800d15 	stw	r6,52(sp)
   4699c:	b001a71e 	bne	r22,zero,4703c <_dtoa_r+0x1590>
   469a0:	d8800e17 	ldw	r2,56(sp)
   469a4:	d8800f15 	stw	r2,60(sp)
   469a8:	003e8006 	br	463ac <_dtoa_r+0x900>
   469ac:	90800417 	ldw	r2,16(r18)
   469b0:	1085883a 	add	r2,r2,r2
   469b4:	1085883a 	add	r2,r2,r2
   469b8:	1485883a 	add	r2,r2,r18
   469bc:	11000417 	ldw	r4,16(r2)
   469c0:	0048c680 	call	48c68 <__hi0bits>
   469c4:	00c00804 	movi	r3,32
   469c8:	1887c83a 	sub	r3,r3,r2
   469cc:	003e5a06 	br	46338 <_dtoa_r+0x88c>
   469d0:	d9400717 	ldw	r5,28(sp)
   469d4:	d9801017 	ldw	r6,64(sp)
   469d8:	d9001617 	ldw	r4,88(sp)
   469dc:	00499f40 	call	499f4 <__pow5mult>
   469e0:	d8800715 	stw	r2,28(sp)
   469e4:	003e4306 	br	462f4 <_dtoa_r+0x848>
   469e8:	d9800f17 	ldw	r6,60(sp)
   469ec:	d8800d17 	ldw	r2,52(sp)
   469f0:	d9800315 	stw	r6,12(sp)
   469f4:	d8800415 	stw	r2,16(sp)
   469f8:	d8c00b17 	ldw	r3,44(sp)
   469fc:	1805003a 	cmpeq	r2,r3,zero
   46a00:	1000e21e 	bne	r2,zero,46d8c <_dtoa_r+0x12e0>
   46a04:	d9000317 	ldw	r4,12(sp)
   46a08:	0005883a 	mov	r2,zero
   46a0c:	00cff834 	movhi	r3,16352
   46a10:	200c90fa 	slli	r6,r4,3
   46a14:	01000174 	movhi	r4,5
   46a18:	213fbf04 	addi	r4,r4,-260
   46a1c:	180b883a 	mov	r5,r3
   46a20:	310d883a 	add	r6,r6,r4
   46a24:	327fff17 	ldw	r9,-4(r6)
   46a28:	323ffe17 	ldw	r8,-8(r6)
   46a2c:	1009883a 	mov	r4,r2
   46a30:	480f883a 	mov	r7,r9
   46a34:	400d883a 	mov	r6,r8
   46a38:	004bdf80 	call	4bdf8 <__divdf3>
   46a3c:	180b883a 	mov	r5,r3
   46a40:	b00d883a 	mov	r6,r22
   46a44:	b80f883a 	mov	r7,r23
   46a48:	1009883a 	mov	r4,r2
   46a4c:	004b9400 	call	4b940 <__subdf3>
   46a50:	a80b883a 	mov	r5,r21
   46a54:	a009883a 	mov	r4,r20
   46a58:	d8c01915 	stw	r3,100(sp)
   46a5c:	d8801815 	stw	r2,96(sp)
   46a60:	004c3f00 	call	4c3f0 <__fixdfsi>
   46a64:	1009883a 	mov	r4,r2
   46a68:	1027883a 	mov	r19,r2
   46a6c:	004c2f80 	call	4c2f8 <__floatsidf>
   46a70:	a80b883a 	mov	r5,r21
   46a74:	a009883a 	mov	r4,r20
   46a78:	180f883a 	mov	r7,r3
   46a7c:	100d883a 	mov	r6,r2
   46a80:	004b9400 	call	4b940 <__subdf3>
   46a84:	d9801817 	ldw	r6,96(sp)
   46a88:	1823883a 	mov	r17,r3
   46a8c:	d8801415 	stw	r2,80(sp)
   46a90:	302d883a 	mov	r22,r6
   46a94:	d9800517 	ldw	r6,20(sp)
   46a98:	9cc00c04 	addi	r19,r19,48
   46a9c:	dc401515 	stw	r17,84(sp)
   46aa0:	d8c01917 	ldw	r3,100(sp)
   46aa4:	34c00005 	stb	r19,0(r6)
   46aa8:	d8800517 	ldw	r2,20(sp)
   46aac:	d9401917 	ldw	r5,100(sp)
   46ab0:	d9801417 	ldw	r6,80(sp)
   46ab4:	b009883a 	mov	r4,r22
   46ab8:	880f883a 	mov	r7,r17
   46abc:	182f883a 	mov	r23,r3
   46ac0:	17000044 	addi	fp,r2,1
   46ac4:	004c1600 	call	4c160 <__gtdf2>
   46ac8:	00804e16 	blt	zero,r2,46c04 <_dtoa_r+0x1158>
   46acc:	d9801417 	ldw	r6,80(sp)
   46ad0:	0005883a 	mov	r2,zero
   46ad4:	00cffc34 	movhi	r3,16368
   46ad8:	180b883a 	mov	r5,r3
   46adc:	880f883a 	mov	r7,r17
   46ae0:	1009883a 	mov	r4,r2
   46ae4:	004b9400 	call	4b940 <__subdf3>
   46ae8:	d9401917 	ldw	r5,100(sp)
   46aec:	180f883a 	mov	r7,r3
   46af0:	b009883a 	mov	r4,r22
   46af4:	100d883a 	mov	r6,r2
   46af8:	004c1600 	call	4c160 <__gtdf2>
   46afc:	00bda216 	blt	zero,r2,46188 <_dtoa_r+0x6dc>
   46b00:	d8c00317 	ldw	r3,12(sp)
   46b04:	00800044 	movi	r2,1
   46b08:	10c01216 	blt	r2,r3,46b54 <_dtoa_r+0x10a8>
   46b0c:	003d4506 	br	46024 <_dtoa_r+0x578>
   46b10:	d9801417 	ldw	r6,80(sp)
   46b14:	0005883a 	mov	r2,zero
   46b18:	00cffc34 	movhi	r3,16368
   46b1c:	180b883a 	mov	r5,r3
   46b20:	880f883a 	mov	r7,r17
   46b24:	1009883a 	mov	r4,r2
   46b28:	004b9400 	call	4b940 <__subdf3>
   46b2c:	d9c01b17 	ldw	r7,108(sp)
   46b30:	180b883a 	mov	r5,r3
   46b34:	1009883a 	mov	r4,r2
   46b38:	b00d883a 	mov	r6,r22
   46b3c:	004c2700 	call	4c270 <__ltdf2>
   46b40:	103d9116 	blt	r2,zero,46188 <_dtoa_r+0x6dc>
   46b44:	d9800517 	ldw	r6,20(sp)
   46b48:	d9000317 	ldw	r4,12(sp)
   46b4c:	3105883a 	add	r2,r6,r4
   46b50:	e0bd3426 	beq	fp,r2,46024 <_dtoa_r+0x578>
   46b54:	04500934 	movhi	r17,16420
   46b58:	0021883a 	mov	r16,zero
   46b5c:	b80b883a 	mov	r5,r23
   46b60:	b009883a 	mov	r4,r22
   46b64:	800d883a 	mov	r6,r16
   46b68:	880f883a 	mov	r7,r17
   46b6c:	004ba340 	call	4ba34 <__muldf3>
   46b70:	d9401517 	ldw	r5,84(sp)
   46b74:	d9001417 	ldw	r4,80(sp)
   46b78:	880f883a 	mov	r7,r17
   46b7c:	000d883a 	mov	r6,zero
   46b80:	d8801a15 	stw	r2,104(sp)
   46b84:	d8c01b15 	stw	r3,108(sp)
   46b88:	004ba340 	call	4ba34 <__muldf3>
   46b8c:	180b883a 	mov	r5,r3
   46b90:	1009883a 	mov	r4,r2
   46b94:	1823883a 	mov	r17,r3
   46b98:	1021883a 	mov	r16,r2
   46b9c:	004c3f00 	call	4c3f0 <__fixdfsi>
   46ba0:	1009883a 	mov	r4,r2
   46ba4:	102b883a 	mov	r21,r2
   46ba8:	004c2f80 	call	4c2f8 <__floatsidf>
   46bac:	880b883a 	mov	r5,r17
   46bb0:	8009883a 	mov	r4,r16
   46bb4:	180f883a 	mov	r7,r3
   46bb8:	100d883a 	mov	r6,r2
   46bbc:	004b9400 	call	4b940 <__subdf3>
   46bc0:	1021883a 	mov	r16,r2
   46bc4:	d9001b17 	ldw	r4,108(sp)
   46bc8:	1823883a 	mov	r17,r3
   46bcc:	dc001415 	stw	r16,80(sp)
   46bd0:	ad400c04 	addi	r21,r21,48
   46bd4:	dc401515 	stw	r17,84(sp)
   46bd8:	d8801a17 	ldw	r2,104(sp)
   46bdc:	e5400005 	stb	r21,0(fp)
   46be0:	202f883a 	mov	r23,r4
   46be4:	d9c01b17 	ldw	r7,108(sp)
   46be8:	d9001417 	ldw	r4,80(sp)
   46bec:	880b883a 	mov	r5,r17
   46bf0:	100d883a 	mov	r6,r2
   46bf4:	102d883a 	mov	r22,r2
   46bf8:	e7000044 	addi	fp,fp,1
   46bfc:	004c2700 	call	4c270 <__ltdf2>
   46c00:	103fc30e 	bge	r2,zero,46b10 <_dtoa_r+0x1064>
   46c04:	d9000417 	ldw	r4,16(sp)
   46c08:	d9000d15 	stw	r4,52(sp)
   46c0c:	003d7106 	br	461d4 <_dtoa_r+0x728>
   46c10:	d9801717 	ldw	r6,92(sp)
   46c14:	00800084 	movi	r2,2
   46c18:	11bde60e 	bge	r2,r6,463b4 <_dtoa_r+0x908>
   46c1c:	203cfb1e 	bne	r4,zero,4600c <_dtoa_r+0x560>
   46c20:	d9001617 	ldw	r4,88(sp)
   46c24:	900b883a 	mov	r5,r18
   46c28:	01800144 	movi	r6,5
   46c2c:	000f883a 	mov	r7,zero
   46c30:	00498f40 	call	498f4 <__multadd>
   46c34:	d9000717 	ldw	r4,28(sp)
   46c38:	100b883a 	mov	r5,r2
   46c3c:	1025883a 	mov	r18,r2
   46c40:	0048d9c0 	call	48d9c <__mcmp>
   46c44:	00bcf10e 	bge	zero,r2,4600c <_dtoa_r+0x560>
   46c48:	d8c00d17 	ldw	r3,52(sp)
   46c4c:	d9000517 	ldw	r4,20(sp)
   46c50:	d8000615 	stw	zero,24(sp)
   46c54:	18c00044 	addi	r3,r3,1
   46c58:	d8c00d15 	stw	r3,52(sp)
   46c5c:	00800c44 	movi	r2,49
   46c60:	27000044 	addi	fp,r4,1
   46c64:	20800005 	stb	r2,0(r4)
   46c68:	003e8906 	br	46690 <_dtoa_r+0xbe4>
   46c6c:	d8c00517 	ldw	r3,20(sp)
   46c70:	003bc206 	br	45b7c <_dtoa_r+0xd0>
   46c74:	01800174 	movhi	r6,5
   46c78:	31bff104 	addi	r6,r6,-60
   46c7c:	30c00917 	ldw	r3,36(r6)
   46c80:	30800817 	ldw	r2,32(r6)
   46c84:	d9001217 	ldw	r4,72(sp)
   46c88:	d9401317 	ldw	r5,76(sp)
   46c8c:	180f883a 	mov	r7,r3
   46c90:	100d883a 	mov	r6,r2
   46c94:	004bdf80 	call	4bdf8 <__divdf3>
   46c98:	948003cc 	andi	r18,r18,15
   46c9c:	058000c4 	movi	r22,3
   46ca0:	1029883a 	mov	r20,r2
   46ca4:	182b883a 	mov	r21,r3
   46ca8:	003c8906 	br	45ed0 <_dtoa_r+0x424>
   46cac:	d9001017 	ldw	r4,64(sp)
   46cb0:	d9800917 	ldw	r6,36(sp)
   46cb4:	0025883a 	mov	r18,zero
   46cb8:	1105c83a 	sub	r2,r2,r4
   46cbc:	2089883a 	add	r4,r4,r2
   46cc0:	308d883a 	add	r6,r6,r2
   46cc4:	d9001015 	stw	r4,64(sp)
   46cc8:	d9800915 	stw	r6,36(sp)
   46ccc:	003e3206 	br	46598 <_dtoa_r+0xaec>
   46cd0:	28800044 	addi	r2,r5,1
   46cd4:	27000044 	addi	fp,r4,1
   46cd8:	20800005 	stb	r2,0(r4)
   46cdc:	003e6c06 	br	46690 <_dtoa_r+0xbe4>
   46ce0:	d8800f17 	ldw	r2,60(sp)
   46ce4:	00bce016 	blt	zero,r2,46068 <_dtoa_r+0x5bc>
   46ce8:	d9800f17 	ldw	r6,60(sp)
   46cec:	303cc51e 	bne	r6,zero,46004 <_dtoa_r+0x558>
   46cf0:	0005883a 	mov	r2,zero
   46cf4:	00d00534 	movhi	r3,16404
   46cf8:	980b883a 	mov	r5,r19
   46cfc:	180f883a 	mov	r7,r3
   46d00:	9009883a 	mov	r4,r18
   46d04:	100d883a 	mov	r6,r2
   46d08:	004ba340 	call	4ba34 <__muldf3>
   46d0c:	180b883a 	mov	r5,r3
   46d10:	a80f883a 	mov	r7,r21
   46d14:	1009883a 	mov	r4,r2
   46d18:	a00d883a 	mov	r6,r20
   46d1c:	004c1e80 	call	4c1e8 <__gedf2>
   46d20:	103cb80e 	bge	r2,zero,46004 <_dtoa_r+0x558>
   46d24:	0027883a 	mov	r19,zero
   46d28:	0025883a 	mov	r18,zero
   46d2c:	003fc606 	br	46c48 <_dtoa_r+0x119c>
   46d30:	99400117 	ldw	r5,4(r19)
   46d34:	d9001617 	ldw	r4,88(sp)
   46d38:	00491c00 	call	491c0 <_Balloc>
   46d3c:	99800417 	ldw	r6,16(r19)
   46d40:	11000304 	addi	r4,r2,12
   46d44:	99400304 	addi	r5,r19,12
   46d48:	318d883a 	add	r6,r6,r6
   46d4c:	318d883a 	add	r6,r6,r6
   46d50:	31800204 	addi	r6,r6,8
   46d54:	1023883a 	mov	r17,r2
   46d58:	0048a280 	call	48a28 <memcpy>
   46d5c:	d9001617 	ldw	r4,88(sp)
   46d60:	880b883a 	mov	r5,r17
   46d64:	01800044 	movi	r6,1
   46d68:	00495840 	call	49584 <__lshift>
   46d6c:	100b883a 	mov	r5,r2
   46d70:	003d9c06 	br	463e4 <_dtoa_r+0x938>
   46d74:	00800e44 	movi	r2,57
   46d78:	b8807026 	beq	r23,r2,46f3c <_dtoa_r+0x1490>
   46d7c:	b8800044 	addi	r2,r23,1
   46d80:	b7000044 	addi	fp,r22,1
   46d84:	b0800005 	stb	r2,0(r22)
   46d88:	003e4106 	br	46690 <_dtoa_r+0xbe4>
   46d8c:	d8800317 	ldw	r2,12(sp)
   46d90:	01800174 	movhi	r6,5
   46d94:	31bfbf04 	addi	r6,r6,-260
   46d98:	b009883a 	mov	r4,r22
   46d9c:	100e90fa 	slli	r7,r2,3
   46da0:	b80b883a 	mov	r5,r23
   46da4:	398f883a 	add	r7,r7,r6
   46da8:	38bffe17 	ldw	r2,-8(r7)
   46dac:	d9800517 	ldw	r6,20(sp)
   46db0:	38ffff17 	ldw	r3,-4(r7)
   46db4:	37000044 	addi	fp,r6,1
   46db8:	180f883a 	mov	r7,r3
   46dbc:	100d883a 	mov	r6,r2
   46dc0:	004ba340 	call	4ba34 <__muldf3>
   46dc4:	a80b883a 	mov	r5,r21
   46dc8:	a009883a 	mov	r4,r20
   46dcc:	182f883a 	mov	r23,r3
   46dd0:	102d883a 	mov	r22,r2
   46dd4:	004c3f00 	call	4c3f0 <__fixdfsi>
   46dd8:	1009883a 	mov	r4,r2
   46ddc:	1027883a 	mov	r19,r2
   46de0:	004c2f80 	call	4c2f8 <__floatsidf>
   46de4:	a80b883a 	mov	r5,r21
   46de8:	a009883a 	mov	r4,r20
   46dec:	180f883a 	mov	r7,r3
   46df0:	100d883a 	mov	r6,r2
   46df4:	004b9400 	call	4b940 <__subdf3>
   46df8:	180b883a 	mov	r5,r3
   46dfc:	d8c00517 	ldw	r3,20(sp)
   46e00:	9cc00c04 	addi	r19,r19,48
   46e04:	1009883a 	mov	r4,r2
   46e08:	1cc00005 	stb	r19,0(r3)
   46e0c:	2021883a 	mov	r16,r4
   46e10:	d9000317 	ldw	r4,12(sp)
   46e14:	00800044 	movi	r2,1
   46e18:	2823883a 	mov	r17,r5
   46e1c:	20802226 	beq	r4,r2,46ea8 <_dtoa_r+0x13fc>
   46e20:	1029883a 	mov	r20,r2
   46e24:	0005883a 	mov	r2,zero
   46e28:	00d00934 	movhi	r3,16420
   46e2c:	180f883a 	mov	r7,r3
   46e30:	100d883a 	mov	r6,r2
   46e34:	880b883a 	mov	r5,r17
   46e38:	8009883a 	mov	r4,r16
   46e3c:	004ba340 	call	4ba34 <__muldf3>
   46e40:	180b883a 	mov	r5,r3
   46e44:	1009883a 	mov	r4,r2
   46e48:	1823883a 	mov	r17,r3
   46e4c:	1021883a 	mov	r16,r2
   46e50:	004c3f00 	call	4c3f0 <__fixdfsi>
   46e54:	1009883a 	mov	r4,r2
   46e58:	102b883a 	mov	r21,r2
   46e5c:	004c2f80 	call	4c2f8 <__floatsidf>
   46e60:	880b883a 	mov	r5,r17
   46e64:	8009883a 	mov	r4,r16
   46e68:	180f883a 	mov	r7,r3
   46e6c:	100d883a 	mov	r6,r2
   46e70:	004b9400 	call	4b940 <__subdf3>
   46e74:	180b883a 	mov	r5,r3
   46e78:	d8c00517 	ldw	r3,20(sp)
   46e7c:	1009883a 	mov	r4,r2
   46e80:	ad400c04 	addi	r21,r21,48
   46e84:	1d05883a 	add	r2,r3,r20
   46e88:	15400005 	stb	r21,0(r2)
   46e8c:	2021883a 	mov	r16,r4
   46e90:	d9000317 	ldw	r4,12(sp)
   46e94:	a5000044 	addi	r20,r20,1
   46e98:	2823883a 	mov	r17,r5
   46e9c:	a13fe11e 	bne	r20,r4,46e24 <_dtoa_r+0x1378>
   46ea0:	e505883a 	add	r2,fp,r20
   46ea4:	173fffc4 	addi	fp,r2,-1
   46ea8:	0025883a 	mov	r18,zero
   46eac:	04cff834 	movhi	r19,16352
   46eb0:	b009883a 	mov	r4,r22
   46eb4:	b80b883a 	mov	r5,r23
   46eb8:	900d883a 	mov	r6,r18
   46ebc:	980f883a 	mov	r7,r19
   46ec0:	004b9c00 	call	4b9c0 <__adddf3>
   46ec4:	180b883a 	mov	r5,r3
   46ec8:	1009883a 	mov	r4,r2
   46ecc:	800d883a 	mov	r6,r16
   46ed0:	880f883a 	mov	r7,r17
   46ed4:	004c2700 	call	4c270 <__ltdf2>
   46ed8:	103cab16 	blt	r2,zero,46188 <_dtoa_r+0x6dc>
   46edc:	0009883a 	mov	r4,zero
   46ee0:	980b883a 	mov	r5,r19
   46ee4:	b80f883a 	mov	r7,r23
   46ee8:	b00d883a 	mov	r6,r22
   46eec:	004b9400 	call	4b940 <__subdf3>
   46ef0:	180b883a 	mov	r5,r3
   46ef4:	880f883a 	mov	r7,r17
   46ef8:	1009883a 	mov	r4,r2
   46efc:	800d883a 	mov	r6,r16
   46f00:	004c1600 	call	4c160 <__gtdf2>
   46f04:	00bc470e 	bge	zero,r2,46024 <_dtoa_r+0x578>
   46f08:	00c00c04 	movi	r3,48
   46f0c:	e73fffc4 	addi	fp,fp,-1
   46f10:	e0800007 	ldb	r2,0(fp)
   46f14:	10fffd26 	beq	r2,r3,46f0c <_dtoa_r+0x1460>
   46f18:	d9800417 	ldw	r6,16(sp)
   46f1c:	e7000044 	addi	fp,fp,1
   46f20:	d9800d15 	stw	r6,52(sp)
   46f24:	003cab06 	br	461d4 <_dtoa_r+0x728>
   46f28:	d8c00f17 	ldw	r3,60(sp)
   46f2c:	d9001117 	ldw	r4,68(sp)
   46f30:	20e1c83a 	sub	r16,r4,r3
   46f34:	0007883a 	mov	r3,zero
   46f38:	003d9b06 	br	465a8 <_dtoa_r+0xafc>
   46f3c:	00800e44 	movi	r2,57
   46f40:	b0800005 	stb	r2,0(r22)
   46f44:	b5800044 	addi	r22,r22,1
   46f48:	003dc106 	br	46650 <_dtoa_r+0xba4>
   46f4c:	05800084 	movi	r22,2
   46f50:	003bf706 	br	45f30 <_dtoa_r+0x484>
   46f54:	d9000f17 	ldw	r4,60(sp)
   46f58:	013c000e 	bge	zero,r4,45f5c <_dtoa_r+0x4b0>
   46f5c:	d9800e17 	ldw	r6,56(sp)
   46f60:	01bc300e 	bge	zero,r6,46024 <_dtoa_r+0x578>
   46f64:	0005883a 	mov	r2,zero
   46f68:	00d00934 	movhi	r3,16420
   46f6c:	a80b883a 	mov	r5,r21
   46f70:	180f883a 	mov	r7,r3
   46f74:	a009883a 	mov	r4,r20
   46f78:	100d883a 	mov	r6,r2
   46f7c:	004ba340 	call	4ba34 <__muldf3>
   46f80:	b1000044 	addi	r4,r22,1
   46f84:	1021883a 	mov	r16,r2
   46f88:	1823883a 	mov	r17,r3
   46f8c:	004c2f80 	call	4c2f8 <__floatsidf>
   46f90:	880b883a 	mov	r5,r17
   46f94:	8009883a 	mov	r4,r16
   46f98:	180f883a 	mov	r7,r3
   46f9c:	100d883a 	mov	r6,r2
   46fa0:	004ba340 	call	4ba34 <__muldf3>
   46fa4:	0011883a 	mov	r8,zero
   46fa8:	02500734 	movhi	r9,16412
   46fac:	180b883a 	mov	r5,r3
   46fb0:	480f883a 	mov	r7,r9
   46fb4:	1009883a 	mov	r4,r2
   46fb8:	400d883a 	mov	r6,r8
   46fbc:	004b9c00 	call	4b9c0 <__adddf3>
   46fc0:	102d883a 	mov	r22,r2
   46fc4:	00bf3034 	movhi	r2,64704
   46fc8:	10ef883a 	add	r23,r2,r3
   46fcc:	d8800d17 	ldw	r2,52(sp)
   46fd0:	d8c00e17 	ldw	r3,56(sp)
   46fd4:	8029883a 	mov	r20,r16
   46fd8:	10bfffc4 	addi	r2,r2,-1
   46fdc:	882b883a 	mov	r21,r17
   46fe0:	d8800415 	stw	r2,16(sp)
   46fe4:	d8c00315 	stw	r3,12(sp)
   46fe8:	003e8306 	br	469f8 <_dtoa_r+0xf4c>
   46fec:	d8800117 	ldw	r2,4(sp)
   46ff0:	dc001117 	ldw	r16,68(sp)
   46ff4:	dc801017 	ldw	r18,64(sp)
   46ff8:	00c00d84 	movi	r3,54
   46ffc:	1887c83a 	sub	r3,r3,r2
   47000:	003d6906 	br	465a8 <_dtoa_r+0xafc>
   47004:	01800044 	movi	r6,1
   47008:	3021883a 	mov	r16,r6
   4700c:	d9800f15 	stw	r6,60(sp)
   47010:	d9802615 	stw	r6,152(sp)
   47014:	d9800e15 	stw	r6,56(sp)
   47018:	003b9306 	br	45e68 <_dtoa_r+0x3bc>
   4701c:	b021883a 	mov	r16,r22
   47020:	dd800f15 	stw	r22,60(sp)
   47024:	003b9006 	br	45e68 <_dtoa_r+0x3bc>
   47028:	103e221e 	bne	r2,zero,468b4 <_dtoa_r+0xe08>
   4702c:	b880004c 	andi	r2,r23,1
   47030:	1005003a 	cmpeq	r2,r2,zero
   47034:	103e1f1e 	bne	r2,zero,468b4 <_dtoa_r+0xe08>
   47038:	003e1b06 	br	468a8 <_dtoa_r+0xdfc>
   4703c:	d9001617 	ldw	r4,88(sp)
   47040:	980b883a 	mov	r5,r19
   47044:	01800284 	movi	r6,10
   47048:	000f883a 	mov	r7,zero
   4704c:	00498f40 	call	498f4 <__multadd>
   47050:	d8c00e17 	ldw	r3,56(sp)
   47054:	1027883a 	mov	r19,r2
   47058:	d8c00f15 	stw	r3,60(sp)
   4705c:	003cd306 	br	463ac <_dtoa_r+0x900>

00047060 <_fflush_r>:
   47060:	defffb04 	addi	sp,sp,-20
   47064:	dcc00315 	stw	r19,12(sp)
   47068:	dc800215 	stw	r18,8(sp)
   4706c:	dfc00415 	stw	ra,16(sp)
   47070:	dc400115 	stw	r17,4(sp)
   47074:	dc000015 	stw	r16,0(sp)
   47078:	2027883a 	mov	r19,r4
   4707c:	2825883a 	mov	r18,r5
   47080:	20000226 	beq	r4,zero,4708c <_fflush_r+0x2c>
   47084:	20800e17 	ldw	r2,56(r4)
   47088:	10005626 	beq	r2,zero,471e4 <_fflush_r+0x184>
   4708c:	9100030b 	ldhu	r4,12(r18)
   47090:	20ffffcc 	andi	r3,r4,65535
   47094:	18e0001c 	xori	r3,r3,32768
   47098:	18e00004 	addi	r3,r3,-32768
   4709c:	1880020c 	andi	r2,r3,8
   470a0:	1000261e 	bne	r2,zero,4713c <_fflush_r+0xdc>
   470a4:	90c00117 	ldw	r3,4(r18)
   470a8:	20820014 	ori	r2,r4,2048
   470ac:	9080030d 	sth	r2,12(r18)
   470b0:	1009883a 	mov	r4,r2
   470b4:	00c0400e 	bge	zero,r3,471b8 <_fflush_r+0x158>
   470b8:	92000a17 	ldw	r8,40(r18)
   470bc:	40004026 	beq	r8,zero,471c0 <_fflush_r+0x160>
   470c0:	2084000c 	andi	r2,r4,4096
   470c4:	10005326 	beq	r2,zero,47214 <_fflush_r+0x1b4>
   470c8:	94001417 	ldw	r16,80(r18)
   470cc:	9080030b 	ldhu	r2,12(r18)
   470d0:	1080010c 	andi	r2,r2,4
   470d4:	1000481e 	bne	r2,zero,471f8 <_fflush_r+0x198>
   470d8:	91400717 	ldw	r5,28(r18)
   470dc:	9809883a 	mov	r4,r19
   470e0:	800d883a 	mov	r6,r16
   470e4:	000f883a 	mov	r7,zero
   470e8:	403ee83a 	callr	r8
   470ec:	8080261e 	bne	r16,r2,47188 <_fflush_r+0x128>
   470f0:	9080030b 	ldhu	r2,12(r18)
   470f4:	91000417 	ldw	r4,16(r18)
   470f8:	90000115 	stw	zero,4(r18)
   470fc:	10bdffcc 	andi	r2,r2,63487
   47100:	10ffffcc 	andi	r3,r2,65535
   47104:	18c4000c 	andi	r3,r3,4096
   47108:	9080030d 	sth	r2,12(r18)
   4710c:	91000015 	stw	r4,0(r18)
   47110:	18002b26 	beq	r3,zero,471c0 <_fflush_r+0x160>
   47114:	0007883a 	mov	r3,zero
   47118:	1805883a 	mov	r2,r3
   4711c:	94001415 	stw	r16,80(r18)
   47120:	dfc00417 	ldw	ra,16(sp)
   47124:	dcc00317 	ldw	r19,12(sp)
   47128:	dc800217 	ldw	r18,8(sp)
   4712c:	dc400117 	ldw	r17,4(sp)
   47130:	dc000017 	ldw	r16,0(sp)
   47134:	dec00504 	addi	sp,sp,20
   47138:	f800283a 	ret
   4713c:	94400417 	ldw	r17,16(r18)
   47140:	88001f26 	beq	r17,zero,471c0 <_fflush_r+0x160>
   47144:	90800017 	ldw	r2,0(r18)
   47148:	18c000cc 	andi	r3,r3,3
   4714c:	94400015 	stw	r17,0(r18)
   47150:	1461c83a 	sub	r16,r2,r17
   47154:	18002526 	beq	r3,zero,471ec <_fflush_r+0x18c>
   47158:	0005883a 	mov	r2,zero
   4715c:	90800215 	stw	r2,8(r18)
   47160:	0400170e 	bge	zero,r16,471c0 <_fflush_r+0x160>
   47164:	90c00917 	ldw	r3,36(r18)
   47168:	91400717 	ldw	r5,28(r18)
   4716c:	880d883a 	mov	r6,r17
   47170:	800f883a 	mov	r7,r16
   47174:	9809883a 	mov	r4,r19
   47178:	183ee83a 	callr	r3
   4717c:	88a3883a 	add	r17,r17,r2
   47180:	80a1c83a 	sub	r16,r16,r2
   47184:	00bff616 	blt	zero,r2,47160 <_fflush_r+0x100>
   47188:	9080030b 	ldhu	r2,12(r18)
   4718c:	00ffffc4 	movi	r3,-1
   47190:	10801014 	ori	r2,r2,64
   47194:	9080030d 	sth	r2,12(r18)
   47198:	1805883a 	mov	r2,r3
   4719c:	dfc00417 	ldw	ra,16(sp)
   471a0:	dcc00317 	ldw	r19,12(sp)
   471a4:	dc800217 	ldw	r18,8(sp)
   471a8:	dc400117 	ldw	r17,4(sp)
   471ac:	dc000017 	ldw	r16,0(sp)
   471b0:	dec00504 	addi	sp,sp,20
   471b4:	f800283a 	ret
   471b8:	90800f17 	ldw	r2,60(r18)
   471bc:	00bfbe16 	blt	zero,r2,470b8 <_fflush_r+0x58>
   471c0:	0007883a 	mov	r3,zero
   471c4:	1805883a 	mov	r2,r3
   471c8:	dfc00417 	ldw	ra,16(sp)
   471cc:	dcc00317 	ldw	r19,12(sp)
   471d0:	dc800217 	ldw	r18,8(sp)
   471d4:	dc400117 	ldw	r17,4(sp)
   471d8:	dc000017 	ldw	r16,0(sp)
   471dc:	dec00504 	addi	sp,sp,20
   471e0:	f800283a 	ret
   471e4:	00472f80 	call	472f8 <__sinit>
   471e8:	003fa806 	br	4708c <_fflush_r+0x2c>
   471ec:	90800517 	ldw	r2,20(r18)
   471f0:	90800215 	stw	r2,8(r18)
   471f4:	003fda06 	br	47160 <_fflush_r+0x100>
   471f8:	90800117 	ldw	r2,4(r18)
   471fc:	90c00c17 	ldw	r3,48(r18)
   47200:	80a1c83a 	sub	r16,r16,r2
   47204:	183fb426 	beq	r3,zero,470d8 <_fflush_r+0x78>
   47208:	90800f17 	ldw	r2,60(r18)
   4720c:	80a1c83a 	sub	r16,r16,r2
   47210:	003fb106 	br	470d8 <_fflush_r+0x78>
   47214:	91400717 	ldw	r5,28(r18)
   47218:	9809883a 	mov	r4,r19
   4721c:	000d883a 	mov	r6,zero
   47220:	01c00044 	movi	r7,1
   47224:	403ee83a 	callr	r8
   47228:	1021883a 	mov	r16,r2
   4722c:	00bfffc4 	movi	r2,-1
   47230:	80800226 	beq	r16,r2,4723c <_fflush_r+0x1dc>
   47234:	92000a17 	ldw	r8,40(r18)
   47238:	003fa406 	br	470cc <_fflush_r+0x6c>
   4723c:	98c00017 	ldw	r3,0(r19)
   47240:	00800744 	movi	r2,29
   47244:	18bfde26 	beq	r3,r2,471c0 <_fflush_r+0x160>
   47248:	9080030b 	ldhu	r2,12(r18)
   4724c:	8007883a 	mov	r3,r16
   47250:	10801014 	ori	r2,r2,64
   47254:	9080030d 	sth	r2,12(r18)
   47258:	003fcf06 	br	47198 <_fflush_r+0x138>

0004725c <fflush>:
   4725c:	01400134 	movhi	r5,4
   47260:	295c1804 	addi	r5,r5,28768
   47264:	2007883a 	mov	r3,r4
   47268:	20000526 	beq	r4,zero,47280 <fflush+0x24>
   4726c:	00800174 	movhi	r2,5
   47270:	10874404 	addi	r2,r2,7440
   47274:	11000017 	ldw	r4,0(r2)
   47278:	180b883a 	mov	r5,r3
   4727c:	00470601 	jmpi	47060 <_fflush_r>
   47280:	00800174 	movhi	r2,5
   47284:	10874504 	addi	r2,r2,7444
   47288:	11000017 	ldw	r4,0(r2)
   4728c:	0047e2c1 	jmpi	47e2c <_fwalk_reent>

00047290 <std>:
   47290:	00800174 	movhi	r2,5
   47294:	10a8c204 	addi	r2,r2,-23800
   47298:	20800b15 	stw	r2,44(r4)
   4729c:	00800174 	movhi	r2,5
   472a0:	10a8fd04 	addi	r2,r2,-23564
   472a4:	20800815 	stw	r2,32(r4)
   472a8:	00c00174 	movhi	r3,5
   472ac:	18e8de04 	addi	r3,r3,-23688
   472b0:	00800174 	movhi	r2,5
   472b4:	10a8c404 	addi	r2,r2,-23792
   472b8:	2140030d 	sth	r5,12(r4)
   472bc:	2180038d 	sth	r6,14(r4)
   472c0:	20c00915 	stw	r3,36(r4)
   472c4:	20800a15 	stw	r2,40(r4)
   472c8:	20000015 	stw	zero,0(r4)
   472cc:	20000115 	stw	zero,4(r4)
   472d0:	20000215 	stw	zero,8(r4)
   472d4:	20000415 	stw	zero,16(r4)
   472d8:	20000515 	stw	zero,20(r4)
   472dc:	20000615 	stw	zero,24(r4)
   472e0:	21000715 	stw	r4,28(r4)
   472e4:	f800283a 	ret

000472e8 <__sfp_lock_acquire>:
   472e8:	f800283a 	ret

000472ec <__sfp_lock_release>:
   472ec:	f800283a 	ret

000472f0 <__sinit_lock_acquire>:
   472f0:	f800283a 	ret

000472f4 <__sinit_lock_release>:
   472f4:	f800283a 	ret

000472f8 <__sinit>:
   472f8:	20800e17 	ldw	r2,56(r4)
   472fc:	defffd04 	addi	sp,sp,-12
   47300:	dc400115 	stw	r17,4(sp)
   47304:	dc000015 	stw	r16,0(sp)
   47308:	dfc00215 	stw	ra,8(sp)
   4730c:	04400044 	movi	r17,1
   47310:	01400104 	movi	r5,4
   47314:	000d883a 	mov	r6,zero
   47318:	2021883a 	mov	r16,r4
   4731c:	2200bb04 	addi	r8,r4,748
   47320:	200f883a 	mov	r7,r4
   47324:	10000526 	beq	r2,zero,4733c <__sinit+0x44>
   47328:	dfc00217 	ldw	ra,8(sp)
   4732c:	dc400117 	ldw	r17,4(sp)
   47330:	dc000017 	ldw	r16,0(sp)
   47334:	dec00304 	addi	sp,sp,12
   47338:	f800283a 	ret
   4733c:	21000117 	ldw	r4,4(r4)
   47340:	00800134 	movhi	r2,4
   47344:	109cf704 	addi	r2,r2,29660
   47348:	00c000c4 	movi	r3,3
   4734c:	80800f15 	stw	r2,60(r16)
   47350:	80c0b915 	stw	r3,740(r16)
   47354:	8200ba15 	stw	r8,744(r16)
   47358:	84400e15 	stw	r17,56(r16)
   4735c:	8000b815 	stw	zero,736(r16)
   47360:	00472900 	call	47290 <std>
   47364:	81000217 	ldw	r4,8(r16)
   47368:	880d883a 	mov	r6,r17
   4736c:	800f883a 	mov	r7,r16
   47370:	01400284 	movi	r5,10
   47374:	00472900 	call	47290 <std>
   47378:	81000317 	ldw	r4,12(r16)
   4737c:	800f883a 	mov	r7,r16
   47380:	01400484 	movi	r5,18
   47384:	01800084 	movi	r6,2
   47388:	dfc00217 	ldw	ra,8(sp)
   4738c:	dc400117 	ldw	r17,4(sp)
   47390:	dc000017 	ldw	r16,0(sp)
   47394:	dec00304 	addi	sp,sp,12
   47398:	00472901 	jmpi	47290 <std>

0004739c <__fp_lock>:
   4739c:	0005883a 	mov	r2,zero
   473a0:	f800283a 	ret

000473a4 <__fp_unlock>:
   473a4:	0005883a 	mov	r2,zero
   473a8:	f800283a 	ret

000473ac <__fp_unlock_all>:
   473ac:	00800174 	movhi	r2,5
   473b0:	10874404 	addi	r2,r2,7440
   473b4:	11000017 	ldw	r4,0(r2)
   473b8:	01400134 	movhi	r5,4
   473bc:	295ce904 	addi	r5,r5,29604
   473c0:	0047ef41 	jmpi	47ef4 <_fwalk>

000473c4 <__fp_lock_all>:
   473c4:	00800174 	movhi	r2,5
   473c8:	10874404 	addi	r2,r2,7440
   473cc:	11000017 	ldw	r4,0(r2)
   473d0:	01400134 	movhi	r5,4
   473d4:	295ce704 	addi	r5,r5,29596
   473d8:	0047ef41 	jmpi	47ef4 <_fwalk>

000473dc <_cleanup_r>:
   473dc:	01400174 	movhi	r5,5
   473e0:	2969ef04 	addi	r5,r5,-22596
   473e4:	0047ef41 	jmpi	47ef4 <_fwalk>

000473e8 <_cleanup>:
   473e8:	00800174 	movhi	r2,5
   473ec:	10874504 	addi	r2,r2,7444
   473f0:	11000017 	ldw	r4,0(r2)
   473f4:	00473dc1 	jmpi	473dc <_cleanup_r>

000473f8 <__sfmoreglue>:
   473f8:	defffc04 	addi	sp,sp,-16
   473fc:	dc400115 	stw	r17,4(sp)
   47400:	2c401724 	muli	r17,r5,92
   47404:	dc800215 	stw	r18,8(sp)
   47408:	2825883a 	mov	r18,r5
   4740c:	89400304 	addi	r5,r17,12
   47410:	dc000015 	stw	r16,0(sp)
   47414:	dfc00315 	stw	ra,12(sp)
   47418:	00482040 	call	48204 <_malloc_r>
   4741c:	0021883a 	mov	r16,zero
   47420:	880d883a 	mov	r6,r17
   47424:	000b883a 	mov	r5,zero
   47428:	10000626 	beq	r2,zero,47444 <__sfmoreglue+0x4c>
   4742c:	11000304 	addi	r4,r2,12
   47430:	14800115 	stw	r18,4(r2)
   47434:	10000015 	stw	zero,0(r2)
   47438:	11000215 	stw	r4,8(r2)
   4743c:	1021883a 	mov	r16,r2
   47440:	0048ba80 	call	48ba8 <memset>
   47444:	8005883a 	mov	r2,r16
   47448:	dfc00317 	ldw	ra,12(sp)
   4744c:	dc800217 	ldw	r18,8(sp)
   47450:	dc400117 	ldw	r17,4(sp)
   47454:	dc000017 	ldw	r16,0(sp)
   47458:	dec00404 	addi	sp,sp,16
   4745c:	f800283a 	ret

00047460 <__sfp>:
   47460:	defffd04 	addi	sp,sp,-12
   47464:	00800174 	movhi	r2,5
   47468:	10874504 	addi	r2,r2,7444
   4746c:	dc000015 	stw	r16,0(sp)
   47470:	14000017 	ldw	r16,0(r2)
   47474:	dc400115 	stw	r17,4(sp)
   47478:	dfc00215 	stw	ra,8(sp)
   4747c:	80800e17 	ldw	r2,56(r16)
   47480:	2023883a 	mov	r17,r4
   47484:	10002626 	beq	r2,zero,47520 <__sfp+0xc0>
   47488:	8400b804 	addi	r16,r16,736
   4748c:	80800117 	ldw	r2,4(r16)
   47490:	81000217 	ldw	r4,8(r16)
   47494:	10ffffc4 	addi	r3,r2,-1
   47498:	18000916 	blt	r3,zero,474c0 <__sfp+0x60>
   4749c:	2080030f 	ldh	r2,12(r4)
   474a0:	10000b26 	beq	r2,zero,474d0 <__sfp+0x70>
   474a4:	017fffc4 	movi	r5,-1
   474a8:	00000206 	br	474b4 <__sfp+0x54>
   474ac:	2080030f 	ldh	r2,12(r4)
   474b0:	10000726 	beq	r2,zero,474d0 <__sfp+0x70>
   474b4:	18ffffc4 	addi	r3,r3,-1
   474b8:	21001704 	addi	r4,r4,92
   474bc:	197ffb1e 	bne	r3,r5,474ac <__sfp+0x4c>
   474c0:	80800017 	ldw	r2,0(r16)
   474c4:	10001926 	beq	r2,zero,4752c <__sfp+0xcc>
   474c8:	1021883a 	mov	r16,r2
   474cc:	003fef06 	br	4748c <__sfp+0x2c>
   474d0:	00bfffc4 	movi	r2,-1
   474d4:	00c00044 	movi	r3,1
   474d8:	2080038d 	sth	r2,14(r4)
   474dc:	20c0030d 	sth	r3,12(r4)
   474e0:	20000015 	stw	zero,0(r4)
   474e4:	20000215 	stw	zero,8(r4)
   474e8:	20000115 	stw	zero,4(r4)
   474ec:	20000415 	stw	zero,16(r4)
   474f0:	20000515 	stw	zero,20(r4)
   474f4:	20000615 	stw	zero,24(r4)
   474f8:	20000c15 	stw	zero,48(r4)
   474fc:	20000d15 	stw	zero,52(r4)
   47500:	20001115 	stw	zero,68(r4)
   47504:	20001215 	stw	zero,72(r4)
   47508:	2005883a 	mov	r2,r4
   4750c:	dfc00217 	ldw	ra,8(sp)
   47510:	dc400117 	ldw	r17,4(sp)
   47514:	dc000017 	ldw	r16,0(sp)
   47518:	dec00304 	addi	sp,sp,12
   4751c:	f800283a 	ret
   47520:	8009883a 	mov	r4,r16
   47524:	00472f80 	call	472f8 <__sinit>
   47528:	003fd706 	br	47488 <__sfp+0x28>
   4752c:	8809883a 	mov	r4,r17
   47530:	01400104 	movi	r5,4
   47534:	00473f80 	call	473f8 <__sfmoreglue>
   47538:	80800015 	stw	r2,0(r16)
   4753c:	103fe21e 	bne	r2,zero,474c8 <__sfp+0x68>
   47540:	00800304 	movi	r2,12
   47544:	0009883a 	mov	r4,zero
   47548:	88800015 	stw	r2,0(r17)
   4754c:	003fee06 	br	47508 <__sfp+0xa8>

00047550 <_malloc_trim_r>:
   47550:	defffb04 	addi	sp,sp,-20
   47554:	dcc00315 	stw	r19,12(sp)
   47558:	04c00174 	movhi	r19,5
   4755c:	9cc18304 	addi	r19,r19,1548
   47560:	dc800215 	stw	r18,8(sp)
   47564:	dc400115 	stw	r17,4(sp)
   47568:	dc000015 	stw	r16,0(sp)
   4756c:	2823883a 	mov	r17,r5
   47570:	2025883a 	mov	r18,r4
   47574:	dfc00415 	stw	ra,16(sp)
   47578:	004d1200 	call	4d120 <__malloc_lock>
   4757c:	98800217 	ldw	r2,8(r19)
   47580:	9009883a 	mov	r4,r18
   47584:	000b883a 	mov	r5,zero
   47588:	10c00117 	ldw	r3,4(r2)
   4758c:	00bfff04 	movi	r2,-4
   47590:	18a0703a 	and	r16,r3,r2
   47594:	8463c83a 	sub	r17,r16,r17
   47598:	8c43fbc4 	addi	r17,r17,4079
   4759c:	8822d33a 	srli	r17,r17,12
   475a0:	0083ffc4 	movi	r2,4095
   475a4:	8c7fffc4 	addi	r17,r17,-1
   475a8:	8822933a 	slli	r17,r17,12
   475ac:	1440060e 	bge	r2,r17,475c8 <_malloc_trim_r+0x78>
   475b0:	004a2980 	call	4a298 <_sbrk_r>
   475b4:	98c00217 	ldw	r3,8(r19)
   475b8:	9009883a 	mov	r4,r18
   475bc:	044bc83a 	sub	r5,zero,r17
   475c0:	80c7883a 	add	r3,r16,r3
   475c4:	10c00926 	beq	r2,r3,475ec <_malloc_trim_r+0x9c>
   475c8:	004d1400 	call	4d140 <__malloc_unlock>
   475cc:	0005883a 	mov	r2,zero
   475d0:	dfc00417 	ldw	ra,16(sp)
   475d4:	dcc00317 	ldw	r19,12(sp)
   475d8:	dc800217 	ldw	r18,8(sp)
   475dc:	dc400117 	ldw	r17,4(sp)
   475e0:	dc000017 	ldw	r16,0(sp)
   475e4:	dec00504 	addi	sp,sp,20
   475e8:	f800283a 	ret
   475ec:	9009883a 	mov	r4,r18
   475f0:	004a2980 	call	4a298 <_sbrk_r>
   475f4:	844dc83a 	sub	r6,r16,r17
   475f8:	00ffffc4 	movi	r3,-1
   475fc:	9009883a 	mov	r4,r18
   47600:	000b883a 	mov	r5,zero
   47604:	01c00174 	movhi	r7,5
   47608:	39ce7104 	addi	r7,r7,14788
   4760c:	31800054 	ori	r6,r6,1
   47610:	10c00926 	beq	r2,r3,47638 <_malloc_trim_r+0xe8>
   47614:	38800017 	ldw	r2,0(r7)
   47618:	98c00217 	ldw	r3,8(r19)
   4761c:	9009883a 	mov	r4,r18
   47620:	1445c83a 	sub	r2,r2,r17
   47624:	38800015 	stw	r2,0(r7)
   47628:	19800115 	stw	r6,4(r3)
   4762c:	004d1400 	call	4d140 <__malloc_unlock>
   47630:	00800044 	movi	r2,1
   47634:	003fe606 	br	475d0 <_malloc_trim_r+0x80>
   47638:	004a2980 	call	4a298 <_sbrk_r>
   4763c:	99800217 	ldw	r6,8(r19)
   47640:	100f883a 	mov	r7,r2
   47644:	9009883a 	mov	r4,r18
   47648:	1187c83a 	sub	r3,r2,r6
   4764c:	008003c4 	movi	r2,15
   47650:	19400054 	ori	r5,r3,1
   47654:	10ffdc0e 	bge	r2,r3,475c8 <_malloc_trim_r+0x78>
   47658:	00800174 	movhi	r2,5
   4765c:	10874904 	addi	r2,r2,7460
   47660:	10c00017 	ldw	r3,0(r2)
   47664:	00800174 	movhi	r2,5
   47668:	108e7104 	addi	r2,r2,14788
   4766c:	31400115 	stw	r5,4(r6)
   47670:	38c7c83a 	sub	r3,r7,r3
   47674:	10c00015 	stw	r3,0(r2)
   47678:	003fd306 	br	475c8 <_malloc_trim_r+0x78>

0004767c <_free_r>:
   4767c:	defffd04 	addi	sp,sp,-12
   47680:	dc400115 	stw	r17,4(sp)
   47684:	dc000015 	stw	r16,0(sp)
   47688:	dfc00215 	stw	ra,8(sp)
   4768c:	2821883a 	mov	r16,r5
   47690:	2023883a 	mov	r17,r4
   47694:	28005a26 	beq	r5,zero,47800 <_free_r+0x184>
   47698:	004d1200 	call	4d120 <__malloc_lock>
   4769c:	823ffe04 	addi	r8,r16,-8
   476a0:	41400117 	ldw	r5,4(r8)
   476a4:	00bfff84 	movi	r2,-2
   476a8:	02800174 	movhi	r10,5
   476ac:	52818304 	addi	r10,r10,1548
   476b0:	288e703a 	and	r7,r5,r2
   476b4:	41cd883a 	add	r6,r8,r7
   476b8:	30c00117 	ldw	r3,4(r6)
   476bc:	51000217 	ldw	r4,8(r10)
   476c0:	00bfff04 	movi	r2,-4
   476c4:	1892703a 	and	r9,r3,r2
   476c8:	5017883a 	mov	r11,r10
   476cc:	31006726 	beq	r6,r4,4786c <_free_r+0x1f0>
   476d0:	2880004c 	andi	r2,r5,1
   476d4:	1005003a 	cmpeq	r2,r2,zero
   476d8:	32400115 	stw	r9,4(r6)
   476dc:	10001a1e 	bne	r2,zero,47748 <_free_r+0xcc>
   476e0:	000b883a 	mov	r5,zero
   476e4:	3247883a 	add	r3,r6,r9
   476e8:	18800117 	ldw	r2,4(r3)
   476ec:	1080004c 	andi	r2,r2,1
   476f0:	1000231e 	bne	r2,zero,47780 <_free_r+0x104>
   476f4:	280ac03a 	cmpne	r5,r5,zero
   476f8:	3a4f883a 	add	r7,r7,r9
   476fc:	2800451e 	bne	r5,zero,47814 <_free_r+0x198>
   47700:	31000217 	ldw	r4,8(r6)
   47704:	00800174 	movhi	r2,5
   47708:	10818504 	addi	r2,r2,1556
   4770c:	20807b26 	beq	r4,r2,478fc <_free_r+0x280>
   47710:	30800317 	ldw	r2,12(r6)
   47714:	3a07883a 	add	r3,r7,r8
   47718:	19c00015 	stw	r7,0(r3)
   4771c:	11000215 	stw	r4,8(r2)
   47720:	20800315 	stw	r2,12(r4)
   47724:	38800054 	ori	r2,r7,1
   47728:	40800115 	stw	r2,4(r8)
   4772c:	28001a26 	beq	r5,zero,47798 <_free_r+0x11c>
   47730:	8809883a 	mov	r4,r17
   47734:	dfc00217 	ldw	ra,8(sp)
   47738:	dc400117 	ldw	r17,4(sp)
   4773c:	dc000017 	ldw	r16,0(sp)
   47740:	dec00304 	addi	sp,sp,12
   47744:	004d1401 	jmpi	4d140 <__malloc_unlock>
   47748:	80bffe17 	ldw	r2,-8(r16)
   4774c:	50c00204 	addi	r3,r10,8
   47750:	4091c83a 	sub	r8,r8,r2
   47754:	41000217 	ldw	r4,8(r8)
   47758:	388f883a 	add	r7,r7,r2
   4775c:	20c06126 	beq	r4,r3,478e4 <_free_r+0x268>
   47760:	40800317 	ldw	r2,12(r8)
   47764:	3247883a 	add	r3,r6,r9
   47768:	000b883a 	mov	r5,zero
   4776c:	11000215 	stw	r4,8(r2)
   47770:	20800315 	stw	r2,12(r4)
   47774:	18800117 	ldw	r2,4(r3)
   47778:	1080004c 	andi	r2,r2,1
   4777c:	103fdd26 	beq	r2,zero,476f4 <_free_r+0x78>
   47780:	38800054 	ori	r2,r7,1
   47784:	3a07883a 	add	r3,r7,r8
   47788:	280ac03a 	cmpne	r5,r5,zero
   4778c:	40800115 	stw	r2,4(r8)
   47790:	19c00015 	stw	r7,0(r3)
   47794:	283fe61e 	bne	r5,zero,47730 <_free_r+0xb4>
   47798:	00807fc4 	movi	r2,511
   4779c:	11c01f2e 	bgeu	r2,r7,4781c <_free_r+0x1a0>
   477a0:	3806d27a 	srli	r3,r7,9
   477a4:	1800481e 	bne	r3,zero,478c8 <_free_r+0x24c>
   477a8:	3804d0fa 	srli	r2,r7,3
   477ac:	100690fa 	slli	r3,r2,3
   477b0:	1acd883a 	add	r6,r3,r11
   477b4:	31400217 	ldw	r5,8(r6)
   477b8:	31405926 	beq	r6,r5,47920 <_free_r+0x2a4>
   477bc:	28800117 	ldw	r2,4(r5)
   477c0:	00ffff04 	movi	r3,-4
   477c4:	10c4703a 	and	r2,r2,r3
   477c8:	3880022e 	bgeu	r7,r2,477d4 <_free_r+0x158>
   477cc:	29400217 	ldw	r5,8(r5)
   477d0:	317ffa1e 	bne	r6,r5,477bc <_free_r+0x140>
   477d4:	29800317 	ldw	r6,12(r5)
   477d8:	41800315 	stw	r6,12(r8)
   477dc:	41400215 	stw	r5,8(r8)
   477e0:	8809883a 	mov	r4,r17
   477e4:	2a000315 	stw	r8,12(r5)
   477e8:	32000215 	stw	r8,8(r6)
   477ec:	dfc00217 	ldw	ra,8(sp)
   477f0:	dc400117 	ldw	r17,4(sp)
   477f4:	dc000017 	ldw	r16,0(sp)
   477f8:	dec00304 	addi	sp,sp,12
   477fc:	004d1401 	jmpi	4d140 <__malloc_unlock>
   47800:	dfc00217 	ldw	ra,8(sp)
   47804:	dc400117 	ldw	r17,4(sp)
   47808:	dc000017 	ldw	r16,0(sp)
   4780c:	dec00304 	addi	sp,sp,12
   47810:	f800283a 	ret
   47814:	31000217 	ldw	r4,8(r6)
   47818:	003fbd06 	br	47710 <_free_r+0x94>
   4781c:	3806d0fa 	srli	r3,r7,3
   47820:	00800044 	movi	r2,1
   47824:	51400117 	ldw	r5,4(r10)
   47828:	180890fa 	slli	r4,r3,3
   4782c:	1807d0ba 	srai	r3,r3,2
   47830:	22c9883a 	add	r4,r4,r11
   47834:	21800217 	ldw	r6,8(r4)
   47838:	10c4983a 	sll	r2,r2,r3
   4783c:	41000315 	stw	r4,12(r8)
   47840:	41800215 	stw	r6,8(r8)
   47844:	288ab03a 	or	r5,r5,r2
   47848:	22000215 	stw	r8,8(r4)
   4784c:	8809883a 	mov	r4,r17
   47850:	51400115 	stw	r5,4(r10)
   47854:	32000315 	stw	r8,12(r6)
   47858:	dfc00217 	ldw	ra,8(sp)
   4785c:	dc400117 	ldw	r17,4(sp)
   47860:	dc000017 	ldw	r16,0(sp)
   47864:	dec00304 	addi	sp,sp,12
   47868:	004d1401 	jmpi	4d140 <__malloc_unlock>
   4786c:	2880004c 	andi	r2,r5,1
   47870:	3a4d883a 	add	r6,r7,r9
   47874:	1000071e 	bne	r2,zero,47894 <_free_r+0x218>
   47878:	80bffe17 	ldw	r2,-8(r16)
   4787c:	4091c83a 	sub	r8,r8,r2
   47880:	41000317 	ldw	r4,12(r8)
   47884:	40c00217 	ldw	r3,8(r8)
   47888:	308d883a 	add	r6,r6,r2
   4788c:	20c00215 	stw	r3,8(r4)
   47890:	19000315 	stw	r4,12(r3)
   47894:	00800174 	movhi	r2,5
   47898:	10874804 	addi	r2,r2,7456
   4789c:	11000017 	ldw	r4,0(r2)
   478a0:	30c00054 	ori	r3,r6,1
   478a4:	52000215 	stw	r8,8(r10)
   478a8:	40c00115 	stw	r3,4(r8)
   478ac:	313fa036 	bltu	r6,r4,47730 <_free_r+0xb4>
   478b0:	00800174 	movhi	r2,5
   478b4:	108e6704 	addi	r2,r2,14748
   478b8:	11400017 	ldw	r5,0(r2)
   478bc:	8809883a 	mov	r4,r17
   478c0:	00475500 	call	47550 <_malloc_trim_r>
   478c4:	003f9a06 	br	47730 <_free_r+0xb4>
   478c8:	00800104 	movi	r2,4
   478cc:	10c0072e 	bgeu	r2,r3,478ec <_free_r+0x270>
   478d0:	00800504 	movi	r2,20
   478d4:	10c01936 	bltu	r2,r3,4793c <_free_r+0x2c0>
   478d8:	188016c4 	addi	r2,r3,91
   478dc:	100690fa 	slli	r3,r2,3
   478e0:	003fb306 	br	477b0 <_free_r+0x134>
   478e4:	01400044 	movi	r5,1
   478e8:	003f7e06 	br	476e4 <_free_r+0x68>
   478ec:	3804d1ba 	srli	r2,r7,6
   478f0:	10800e04 	addi	r2,r2,56
   478f4:	100690fa 	slli	r3,r2,3
   478f8:	003fad06 	br	477b0 <_free_r+0x134>
   478fc:	22000315 	stw	r8,12(r4)
   47900:	22000215 	stw	r8,8(r4)
   47904:	3a05883a 	add	r2,r7,r8
   47908:	38c00054 	ori	r3,r7,1
   4790c:	11c00015 	stw	r7,0(r2)
   47910:	41000215 	stw	r4,8(r8)
   47914:	40c00115 	stw	r3,4(r8)
   47918:	41000315 	stw	r4,12(r8)
   4791c:	003f8406 	br	47730 <_free_r+0xb4>
   47920:	1005d0ba 	srai	r2,r2,2
   47924:	00c00044 	movi	r3,1
   47928:	51000117 	ldw	r4,4(r10)
   4792c:	1886983a 	sll	r3,r3,r2
   47930:	20c8b03a 	or	r4,r4,r3
   47934:	51000115 	stw	r4,4(r10)
   47938:	003fa706 	br	477d8 <_free_r+0x15c>
   4793c:	00801504 	movi	r2,84
   47940:	10c00436 	bltu	r2,r3,47954 <_free_r+0x2d8>
   47944:	3804d33a 	srli	r2,r7,12
   47948:	10801b84 	addi	r2,r2,110
   4794c:	100690fa 	slli	r3,r2,3
   47950:	003f9706 	br	477b0 <_free_r+0x134>
   47954:	00805504 	movi	r2,340
   47958:	10c00436 	bltu	r2,r3,4796c <_free_r+0x2f0>
   4795c:	3804d3fa 	srli	r2,r7,15
   47960:	10801dc4 	addi	r2,r2,119
   47964:	100690fa 	slli	r3,r2,3
   47968:	003f9106 	br	477b0 <_free_r+0x134>
   4796c:	00815504 	movi	r2,1364
   47970:	10c0032e 	bgeu	r2,r3,47980 <_free_r+0x304>
   47974:	00801f84 	movi	r2,126
   47978:	00c0fc04 	movi	r3,1008
   4797c:	003f8c06 	br	477b0 <_free_r+0x134>
   47980:	3804d4ba 	srli	r2,r7,18
   47984:	10801f04 	addi	r2,r2,124
   47988:	100690fa 	slli	r3,r2,3
   4798c:	003f8806 	br	477b0 <_free_r+0x134>

00047990 <__sfvwrite_r>:
   47990:	30800217 	ldw	r2,8(r6)
   47994:	defff504 	addi	sp,sp,-44
   47998:	df000915 	stw	fp,36(sp)
   4799c:	dd800715 	stw	r22,28(sp)
   479a0:	dc800315 	stw	r18,12(sp)
   479a4:	dfc00a15 	stw	ra,40(sp)
   479a8:	ddc00815 	stw	r23,32(sp)
   479ac:	dd400615 	stw	r21,24(sp)
   479b0:	dd000515 	stw	r20,20(sp)
   479b4:	dcc00415 	stw	r19,16(sp)
   479b8:	dc400215 	stw	r17,8(sp)
   479bc:	dc000115 	stw	r16,4(sp)
   479c0:	302d883a 	mov	r22,r6
   479c4:	2039883a 	mov	fp,r4
   479c8:	2825883a 	mov	r18,r5
   479cc:	10001c26 	beq	r2,zero,47a40 <__sfvwrite_r+0xb0>
   479d0:	29c0030b 	ldhu	r7,12(r5)
   479d4:	3880020c 	andi	r2,r7,8
   479d8:	10002726 	beq	r2,zero,47a78 <__sfvwrite_r+0xe8>
   479dc:	28800417 	ldw	r2,16(r5)
   479e0:	10002526 	beq	r2,zero,47a78 <__sfvwrite_r+0xe8>
   479e4:	3880008c 	andi	r2,r7,2
   479e8:	b5400017 	ldw	r21,0(r22)
   479ec:	10002826 	beq	r2,zero,47a90 <__sfvwrite_r+0x100>
   479f0:	0021883a 	mov	r16,zero
   479f4:	0023883a 	mov	r17,zero
   479f8:	880d883a 	mov	r6,r17
   479fc:	e009883a 	mov	r4,fp
   47a00:	00810004 	movi	r2,1024
   47a04:	80006e26 	beq	r16,zero,47bc0 <__sfvwrite_r+0x230>
   47a08:	800f883a 	mov	r7,r16
   47a0c:	91400717 	ldw	r5,28(r18)
   47a10:	1400012e 	bgeu	r2,r16,47a18 <__sfvwrite_r+0x88>
   47a14:	100f883a 	mov	r7,r2
   47a18:	90c00917 	ldw	r3,36(r18)
   47a1c:	183ee83a 	callr	r3
   47a20:	1007883a 	mov	r3,r2
   47a24:	80a1c83a 	sub	r16,r16,r2
   47a28:	88a3883a 	add	r17,r17,r2
   47a2c:	00806d0e 	bge	zero,r2,47be4 <__sfvwrite_r+0x254>
   47a30:	b0800217 	ldw	r2,8(r22)
   47a34:	10c5c83a 	sub	r2,r2,r3
   47a38:	b0800215 	stw	r2,8(r22)
   47a3c:	103fee1e 	bne	r2,zero,479f8 <__sfvwrite_r+0x68>
   47a40:	0009883a 	mov	r4,zero
   47a44:	2005883a 	mov	r2,r4
   47a48:	dfc00a17 	ldw	ra,40(sp)
   47a4c:	df000917 	ldw	fp,36(sp)
   47a50:	ddc00817 	ldw	r23,32(sp)
   47a54:	dd800717 	ldw	r22,28(sp)
   47a58:	dd400617 	ldw	r21,24(sp)
   47a5c:	dd000517 	ldw	r20,20(sp)
   47a60:	dcc00417 	ldw	r19,16(sp)
   47a64:	dc800317 	ldw	r18,12(sp)
   47a68:	dc400217 	ldw	r17,8(sp)
   47a6c:	dc000117 	ldw	r16,4(sp)
   47a70:	dec00b04 	addi	sp,sp,44
   47a74:	f800283a 	ret
   47a78:	00457580 	call	45758 <__swsetup_r>
   47a7c:	1000e41e 	bne	r2,zero,47e10 <__sfvwrite_r+0x480>
   47a80:	91c0030b 	ldhu	r7,12(r18)
   47a84:	b5400017 	ldw	r21,0(r22)
   47a88:	3880008c 	andi	r2,r7,2
   47a8c:	103fd81e 	bne	r2,zero,479f0 <__sfvwrite_r+0x60>
   47a90:	3880004c 	andi	r2,r7,1
   47a94:	1005003a 	cmpeq	r2,r2,zero
   47a98:	10005726 	beq	r2,zero,47bf8 <__sfvwrite_r+0x268>
   47a9c:	0029883a 	mov	r20,zero
   47aa0:	002f883a 	mov	r23,zero
   47aa4:	a0004226 	beq	r20,zero,47bb0 <__sfvwrite_r+0x220>
   47aa8:	3880800c 	andi	r2,r7,512
   47aac:	94000217 	ldw	r16,8(r18)
   47ab0:	10008b26 	beq	r2,zero,47ce0 <__sfvwrite_r+0x350>
   47ab4:	800d883a 	mov	r6,r16
   47ab8:	a400a536 	bltu	r20,r16,47d50 <__sfvwrite_r+0x3c0>
   47abc:	3881200c 	andi	r2,r7,1152
   47ac0:	10002726 	beq	r2,zero,47b60 <__sfvwrite_r+0x1d0>
   47ac4:	90800517 	ldw	r2,20(r18)
   47ac8:	92000417 	ldw	r8,16(r18)
   47acc:	91400017 	ldw	r5,0(r18)
   47ad0:	1087883a 	add	r3,r2,r2
   47ad4:	1887883a 	add	r3,r3,r2
   47ad8:	1808d7fa 	srli	r4,r3,31
   47adc:	2a21c83a 	sub	r16,r5,r8
   47ae0:	80800044 	addi	r2,r16,1
   47ae4:	20c9883a 	add	r4,r4,r3
   47ae8:	2027d07a 	srai	r19,r4,1
   47aec:	a085883a 	add	r2,r20,r2
   47af0:	980d883a 	mov	r6,r19
   47af4:	9880022e 	bgeu	r19,r2,47b00 <__sfvwrite_r+0x170>
   47af8:	1027883a 	mov	r19,r2
   47afc:	100d883a 	mov	r6,r2
   47b00:	3881000c 	andi	r2,r7,1024
   47b04:	1000b826 	beq	r2,zero,47de8 <__sfvwrite_r+0x458>
   47b08:	300b883a 	mov	r5,r6
   47b0c:	e009883a 	mov	r4,fp
   47b10:	00482040 	call	48204 <_malloc_r>
   47b14:	10003126 	beq	r2,zero,47bdc <__sfvwrite_r+0x24c>
   47b18:	91400417 	ldw	r5,16(r18)
   47b1c:	1009883a 	mov	r4,r2
   47b20:	800d883a 	mov	r6,r16
   47b24:	1023883a 	mov	r17,r2
   47b28:	0048a280 	call	48a28 <memcpy>
   47b2c:	90c0030b 	ldhu	r3,12(r18)
   47b30:	00beffc4 	movi	r2,-1025
   47b34:	1886703a 	and	r3,r3,r2
   47b38:	18c02014 	ori	r3,r3,128
   47b3c:	90c0030d 	sth	r3,12(r18)
   47b40:	9c07c83a 	sub	r3,r19,r16
   47b44:	8c05883a 	add	r2,r17,r16
   47b48:	a00d883a 	mov	r6,r20
   47b4c:	a021883a 	mov	r16,r20
   47b50:	90800015 	stw	r2,0(r18)
   47b54:	90c00215 	stw	r3,8(r18)
   47b58:	94400415 	stw	r17,16(r18)
   47b5c:	94c00515 	stw	r19,20(r18)
   47b60:	91000017 	ldw	r4,0(r18)
   47b64:	b80b883a 	mov	r5,r23
   47b68:	a023883a 	mov	r17,r20
   47b6c:	0048ac80 	call	48ac8 <memmove>
   47b70:	90c00217 	ldw	r3,8(r18)
   47b74:	90800017 	ldw	r2,0(r18)
   47b78:	a027883a 	mov	r19,r20
   47b7c:	1c07c83a 	sub	r3,r3,r16
   47b80:	1405883a 	add	r2,r2,r16
   47b84:	90c00215 	stw	r3,8(r18)
   47b88:	a021883a 	mov	r16,r20
   47b8c:	90800015 	stw	r2,0(r18)
   47b90:	b0800217 	ldw	r2,8(r22)
   47b94:	1405c83a 	sub	r2,r2,r16
   47b98:	b0800215 	stw	r2,8(r22)
   47b9c:	103fa826 	beq	r2,zero,47a40 <__sfvwrite_r+0xb0>
   47ba0:	a469c83a 	sub	r20,r20,r17
   47ba4:	91c0030b 	ldhu	r7,12(r18)
   47ba8:	bcef883a 	add	r23,r23,r19
   47bac:	a03fbe1e 	bne	r20,zero,47aa8 <__sfvwrite_r+0x118>
   47bb0:	adc00017 	ldw	r23,0(r21)
   47bb4:	ad000117 	ldw	r20,4(r21)
   47bb8:	ad400204 	addi	r21,r21,8
   47bbc:	003fb906 	br	47aa4 <__sfvwrite_r+0x114>
   47bc0:	ac400017 	ldw	r17,0(r21)
   47bc4:	ac000117 	ldw	r16,4(r21)
   47bc8:	ad400204 	addi	r21,r21,8
   47bcc:	003f8a06 	br	479f8 <__sfvwrite_r+0x68>
   47bd0:	91400417 	ldw	r5,16(r18)
   47bd4:	e009883a 	mov	r4,fp
   47bd8:	004767c0 	call	4767c <_free_r>
   47bdc:	00800304 	movi	r2,12
   47be0:	e0800015 	stw	r2,0(fp)
   47be4:	9080030b 	ldhu	r2,12(r18)
   47be8:	013fffc4 	movi	r4,-1
   47bec:	10801014 	ori	r2,r2,64
   47bf0:	9080030d 	sth	r2,12(r18)
   47bf4:	003f9306 	br	47a44 <__sfvwrite_r+0xb4>
   47bf8:	0027883a 	mov	r19,zero
   47bfc:	002f883a 	mov	r23,zero
   47c00:	d8000015 	stw	zero,0(sp)
   47c04:	0029883a 	mov	r20,zero
   47c08:	98001e26 	beq	r19,zero,47c84 <__sfvwrite_r+0x2f4>
   47c0c:	d8c00017 	ldw	r3,0(sp)
   47c10:	1804c03a 	cmpne	r2,r3,zero
   47c14:	10005e26 	beq	r2,zero,47d90 <__sfvwrite_r+0x400>
   47c18:	9821883a 	mov	r16,r19
   47c1c:	a4c0012e 	bgeu	r20,r19,47c24 <__sfvwrite_r+0x294>
   47c20:	a021883a 	mov	r16,r20
   47c24:	91000017 	ldw	r4,0(r18)
   47c28:	90800417 	ldw	r2,16(r18)
   47c2c:	91800217 	ldw	r6,8(r18)
   47c30:	91c00517 	ldw	r7,20(r18)
   47c34:	1100022e 	bgeu	r2,r4,47c40 <__sfvwrite_r+0x2b0>
   47c38:	31e3883a 	add	r17,r6,r7
   47c3c:	8c001616 	blt	r17,r16,47c98 <__sfvwrite_r+0x308>
   47c40:	81c03816 	blt	r16,r7,47d24 <__sfvwrite_r+0x394>
   47c44:	90c00917 	ldw	r3,36(r18)
   47c48:	91400717 	ldw	r5,28(r18)
   47c4c:	e009883a 	mov	r4,fp
   47c50:	b80d883a 	mov	r6,r23
   47c54:	183ee83a 	callr	r3
   47c58:	1023883a 	mov	r17,r2
   47c5c:	00bfe10e 	bge	zero,r2,47be4 <__sfvwrite_r+0x254>
   47c60:	a469c83a 	sub	r20,r20,r17
   47c64:	a0001826 	beq	r20,zero,47cc8 <__sfvwrite_r+0x338>
   47c68:	b0800217 	ldw	r2,8(r22)
   47c6c:	1445c83a 	sub	r2,r2,r17
   47c70:	b0800215 	stw	r2,8(r22)
   47c74:	103f7226 	beq	r2,zero,47a40 <__sfvwrite_r+0xb0>
   47c78:	9c67c83a 	sub	r19,r19,r17
   47c7c:	bc6f883a 	add	r23,r23,r17
   47c80:	983fe21e 	bne	r19,zero,47c0c <__sfvwrite_r+0x27c>
   47c84:	adc00017 	ldw	r23,0(r21)
   47c88:	acc00117 	ldw	r19,4(r21)
   47c8c:	ad400204 	addi	r21,r21,8
   47c90:	d8000015 	stw	zero,0(sp)
   47c94:	003fdc06 	br	47c08 <__sfvwrite_r+0x278>
   47c98:	b80b883a 	mov	r5,r23
   47c9c:	880d883a 	mov	r6,r17
   47ca0:	0048ac80 	call	48ac8 <memmove>
   47ca4:	90c00017 	ldw	r3,0(r18)
   47ca8:	e009883a 	mov	r4,fp
   47cac:	900b883a 	mov	r5,r18
   47cb0:	1c47883a 	add	r3,r3,r17
   47cb4:	90c00015 	stw	r3,0(r18)
   47cb8:	00470600 	call	47060 <_fflush_r>
   47cbc:	103fc91e 	bne	r2,zero,47be4 <__sfvwrite_r+0x254>
   47cc0:	a469c83a 	sub	r20,r20,r17
   47cc4:	a03fe81e 	bne	r20,zero,47c68 <__sfvwrite_r+0x2d8>
   47cc8:	e009883a 	mov	r4,fp
   47ccc:	900b883a 	mov	r5,r18
   47cd0:	00470600 	call	47060 <_fflush_r>
   47cd4:	103fc31e 	bne	r2,zero,47be4 <__sfvwrite_r+0x254>
   47cd8:	d8000015 	stw	zero,0(sp)
   47cdc:	003fe206 	br	47c68 <__sfvwrite_r+0x2d8>
   47ce0:	91000017 	ldw	r4,0(r18)
   47ce4:	90800417 	ldw	r2,16(r18)
   47ce8:	1100022e 	bgeu	r2,r4,47cf4 <__sfvwrite_r+0x364>
   47cec:	8023883a 	mov	r17,r16
   47cf0:	85003136 	bltu	r16,r20,47db8 <__sfvwrite_r+0x428>
   47cf4:	91c00517 	ldw	r7,20(r18)
   47cf8:	a1c01836 	bltu	r20,r7,47d5c <__sfvwrite_r+0x3cc>
   47cfc:	90c00917 	ldw	r3,36(r18)
   47d00:	91400717 	ldw	r5,28(r18)
   47d04:	e009883a 	mov	r4,fp
   47d08:	b80d883a 	mov	r6,r23
   47d0c:	183ee83a 	callr	r3
   47d10:	1021883a 	mov	r16,r2
   47d14:	00bfb30e 	bge	zero,r2,47be4 <__sfvwrite_r+0x254>
   47d18:	1023883a 	mov	r17,r2
   47d1c:	1027883a 	mov	r19,r2
   47d20:	003f9b06 	br	47b90 <__sfvwrite_r+0x200>
   47d24:	b80b883a 	mov	r5,r23
   47d28:	800d883a 	mov	r6,r16
   47d2c:	0048ac80 	call	48ac8 <memmove>
   47d30:	90c00217 	ldw	r3,8(r18)
   47d34:	90800017 	ldw	r2,0(r18)
   47d38:	8023883a 	mov	r17,r16
   47d3c:	1c07c83a 	sub	r3,r3,r16
   47d40:	1405883a 	add	r2,r2,r16
   47d44:	90c00215 	stw	r3,8(r18)
   47d48:	90800015 	stw	r2,0(r18)
   47d4c:	003fc406 	br	47c60 <__sfvwrite_r+0x2d0>
   47d50:	a00d883a 	mov	r6,r20
   47d54:	a021883a 	mov	r16,r20
   47d58:	003f8106 	br	47b60 <__sfvwrite_r+0x1d0>
   47d5c:	b80b883a 	mov	r5,r23
   47d60:	a00d883a 	mov	r6,r20
   47d64:	0048ac80 	call	48ac8 <memmove>
   47d68:	90c00217 	ldw	r3,8(r18)
   47d6c:	90800017 	ldw	r2,0(r18)
   47d70:	a021883a 	mov	r16,r20
   47d74:	1d07c83a 	sub	r3,r3,r20
   47d78:	1505883a 	add	r2,r2,r20
   47d7c:	a023883a 	mov	r17,r20
   47d80:	a027883a 	mov	r19,r20
   47d84:	90c00215 	stw	r3,8(r18)
   47d88:	90800015 	stw	r2,0(r18)
   47d8c:	003f8006 	br	47b90 <__sfvwrite_r+0x200>
   47d90:	b809883a 	mov	r4,r23
   47d94:	01400284 	movi	r5,10
   47d98:	980d883a 	mov	r6,r19
   47d9c:	00489440 	call	48944 <memchr>
   47da0:	10001726 	beq	r2,zero,47e00 <__sfvwrite_r+0x470>
   47da4:	15c5c83a 	sub	r2,r2,r23
   47da8:	15000044 	addi	r20,r2,1
   47dac:	00800044 	movi	r2,1
   47db0:	d8800015 	stw	r2,0(sp)
   47db4:	003f9806 	br	47c18 <__sfvwrite_r+0x288>
   47db8:	b80b883a 	mov	r5,r23
   47dbc:	800d883a 	mov	r6,r16
   47dc0:	0048ac80 	call	48ac8 <memmove>
   47dc4:	90c00017 	ldw	r3,0(r18)
   47dc8:	e009883a 	mov	r4,fp
   47dcc:	900b883a 	mov	r5,r18
   47dd0:	1c07883a 	add	r3,r3,r16
   47dd4:	90c00015 	stw	r3,0(r18)
   47dd8:	8027883a 	mov	r19,r16
   47ddc:	00470600 	call	47060 <_fflush_r>
   47de0:	103f6b26 	beq	r2,zero,47b90 <__sfvwrite_r+0x200>
   47de4:	003f7f06 	br	47be4 <__sfvwrite_r+0x254>
   47de8:	400b883a 	mov	r5,r8
   47dec:	e009883a 	mov	r4,fp
   47df0:	0049c340 	call	49c34 <_realloc_r>
   47df4:	103f7626 	beq	r2,zero,47bd0 <__sfvwrite_r+0x240>
   47df8:	1023883a 	mov	r17,r2
   47dfc:	003f5006 	br	47b40 <__sfvwrite_r+0x1b0>
   47e00:	00c00044 	movi	r3,1
   47e04:	9d000044 	addi	r20,r19,1
   47e08:	d8c00015 	stw	r3,0(sp)
   47e0c:	003f8206 	br	47c18 <__sfvwrite_r+0x288>
   47e10:	9080030b 	ldhu	r2,12(r18)
   47e14:	00c00244 	movi	r3,9
   47e18:	013fffc4 	movi	r4,-1
   47e1c:	10801014 	ori	r2,r2,64
   47e20:	9080030d 	sth	r2,12(r18)
   47e24:	e0c00015 	stw	r3,0(fp)
   47e28:	003f0606 	br	47a44 <__sfvwrite_r+0xb4>

00047e2c <_fwalk_reent>:
   47e2c:	defff704 	addi	sp,sp,-36
   47e30:	dcc00315 	stw	r19,12(sp)
   47e34:	24c0b804 	addi	r19,r4,736
   47e38:	dd800615 	stw	r22,24(sp)
   47e3c:	dd400515 	stw	r21,20(sp)
   47e40:	dfc00815 	stw	ra,32(sp)
   47e44:	ddc00715 	stw	r23,28(sp)
   47e48:	dd000415 	stw	r20,16(sp)
   47e4c:	dc800215 	stw	r18,8(sp)
   47e50:	dc400115 	stw	r17,4(sp)
   47e54:	dc000015 	stw	r16,0(sp)
   47e58:	202b883a 	mov	r21,r4
   47e5c:	282d883a 	mov	r22,r5
   47e60:	00472e80 	call	472e8 <__sfp_lock_acquire>
   47e64:	98002126 	beq	r19,zero,47eec <_fwalk_reent+0xc0>
   47e68:	002f883a 	mov	r23,zero
   47e6c:	9c800117 	ldw	r18,4(r19)
   47e70:	9c000217 	ldw	r16,8(r19)
   47e74:	90bfffc4 	addi	r2,r18,-1
   47e78:	10000d16 	blt	r2,zero,47eb0 <_fwalk_reent+0x84>
   47e7c:	0023883a 	mov	r17,zero
   47e80:	053fffc4 	movi	r20,-1
   47e84:	8080030f 	ldh	r2,12(r16)
   47e88:	8c400044 	addi	r17,r17,1
   47e8c:	10000626 	beq	r2,zero,47ea8 <_fwalk_reent+0x7c>
   47e90:	8080038f 	ldh	r2,14(r16)
   47e94:	800b883a 	mov	r5,r16
   47e98:	a809883a 	mov	r4,r21
   47e9c:	15000226 	beq	r2,r20,47ea8 <_fwalk_reent+0x7c>
   47ea0:	b03ee83a 	callr	r22
   47ea4:	b8aeb03a 	or	r23,r23,r2
   47ea8:	84001704 	addi	r16,r16,92
   47eac:	947ff51e 	bne	r18,r17,47e84 <_fwalk_reent+0x58>
   47eb0:	9cc00017 	ldw	r19,0(r19)
   47eb4:	983fed1e 	bne	r19,zero,47e6c <_fwalk_reent+0x40>
   47eb8:	00472ec0 	call	472ec <__sfp_lock_release>
   47ebc:	b805883a 	mov	r2,r23
   47ec0:	dfc00817 	ldw	ra,32(sp)
   47ec4:	ddc00717 	ldw	r23,28(sp)
   47ec8:	dd800617 	ldw	r22,24(sp)
   47ecc:	dd400517 	ldw	r21,20(sp)
   47ed0:	dd000417 	ldw	r20,16(sp)
   47ed4:	dcc00317 	ldw	r19,12(sp)
   47ed8:	dc800217 	ldw	r18,8(sp)
   47edc:	dc400117 	ldw	r17,4(sp)
   47ee0:	dc000017 	ldw	r16,0(sp)
   47ee4:	dec00904 	addi	sp,sp,36
   47ee8:	f800283a 	ret
   47eec:	002f883a 	mov	r23,zero
   47ef0:	003ff106 	br	47eb8 <_fwalk_reent+0x8c>

00047ef4 <_fwalk>:
   47ef4:	defff804 	addi	sp,sp,-32
   47ef8:	dcc00315 	stw	r19,12(sp)
   47efc:	24c0b804 	addi	r19,r4,736
   47f00:	dd400515 	stw	r21,20(sp)
   47f04:	dfc00715 	stw	ra,28(sp)
   47f08:	dd800615 	stw	r22,24(sp)
   47f0c:	dd000415 	stw	r20,16(sp)
   47f10:	dc800215 	stw	r18,8(sp)
   47f14:	dc400115 	stw	r17,4(sp)
   47f18:	dc000015 	stw	r16,0(sp)
   47f1c:	282b883a 	mov	r21,r5
   47f20:	00472e80 	call	472e8 <__sfp_lock_acquire>
   47f24:	98001f26 	beq	r19,zero,47fa4 <_fwalk+0xb0>
   47f28:	002d883a 	mov	r22,zero
   47f2c:	9c800117 	ldw	r18,4(r19)
   47f30:	9c000217 	ldw	r16,8(r19)
   47f34:	90bfffc4 	addi	r2,r18,-1
   47f38:	10000c16 	blt	r2,zero,47f6c <_fwalk+0x78>
   47f3c:	0023883a 	mov	r17,zero
   47f40:	053fffc4 	movi	r20,-1
   47f44:	8080030f 	ldh	r2,12(r16)
   47f48:	8c400044 	addi	r17,r17,1
   47f4c:	10000526 	beq	r2,zero,47f64 <_fwalk+0x70>
   47f50:	8080038f 	ldh	r2,14(r16)
   47f54:	8009883a 	mov	r4,r16
   47f58:	15000226 	beq	r2,r20,47f64 <_fwalk+0x70>
   47f5c:	a83ee83a 	callr	r21
   47f60:	b0acb03a 	or	r22,r22,r2
   47f64:	84001704 	addi	r16,r16,92
   47f68:	947ff61e 	bne	r18,r17,47f44 <_fwalk+0x50>
   47f6c:	9cc00017 	ldw	r19,0(r19)
   47f70:	983fee1e 	bne	r19,zero,47f2c <_fwalk+0x38>
   47f74:	00472ec0 	call	472ec <__sfp_lock_release>
   47f78:	b005883a 	mov	r2,r22
   47f7c:	dfc00717 	ldw	ra,28(sp)
   47f80:	dd800617 	ldw	r22,24(sp)
   47f84:	dd400517 	ldw	r21,20(sp)
   47f88:	dd000417 	ldw	r20,16(sp)
   47f8c:	dcc00317 	ldw	r19,12(sp)
   47f90:	dc800217 	ldw	r18,8(sp)
   47f94:	dc400117 	ldw	r17,4(sp)
   47f98:	dc000017 	ldw	r16,0(sp)
   47f9c:	dec00804 	addi	sp,sp,32
   47fa0:	f800283a 	ret
   47fa4:	002d883a 	mov	r22,zero
   47fa8:	003ff206 	br	47f74 <_fwalk+0x80>

00047fac <__locale_charset>:
   47fac:	d0a00f17 	ldw	r2,-32708(gp)
   47fb0:	f800283a 	ret

00047fb4 <_localeconv_r>:
   47fb4:	00800174 	movhi	r2,5
   47fb8:	10bfb304 	addi	r2,r2,-308
   47fbc:	f800283a 	ret

00047fc0 <localeconv>:
   47fc0:	00800174 	movhi	r2,5
   47fc4:	10874404 	addi	r2,r2,7440
   47fc8:	11000017 	ldw	r4,0(r2)
   47fcc:	0047fb41 	jmpi	47fb4 <_localeconv_r>

00047fd0 <_setlocale_r>:
   47fd0:	defffc04 	addi	sp,sp,-16
   47fd4:	00c00174 	movhi	r3,5
   47fd8:	18ffae04 	addi	r3,r3,-328
   47fdc:	dc800215 	stw	r18,8(sp)
   47fe0:	dc400115 	stw	r17,4(sp)
   47fe4:	dc000015 	stw	r16,0(sp)
   47fe8:	2023883a 	mov	r17,r4
   47fec:	2825883a 	mov	r18,r5
   47ff0:	dfc00315 	stw	ra,12(sp)
   47ff4:	3021883a 	mov	r16,r6
   47ff8:	3009883a 	mov	r4,r6
   47ffc:	180b883a 	mov	r5,r3
   48000:	30000926 	beq	r6,zero,48028 <_setlocale_r+0x58>
   48004:	004a4540 	call	4a454 <strcmp>
   48008:	8009883a 	mov	r4,r16
   4800c:	01400174 	movhi	r5,5
   48010:	297f9904 	addi	r5,r5,-412
   48014:	10000b1e 	bne	r2,zero,48044 <_setlocale_r+0x74>
   48018:	8c000d15 	stw	r16,52(r17)
   4801c:	8c800c15 	stw	r18,48(r17)
   48020:	00c00174 	movhi	r3,5
   48024:	18ffae04 	addi	r3,r3,-328
   48028:	1805883a 	mov	r2,r3
   4802c:	dfc00317 	ldw	ra,12(sp)
   48030:	dc800217 	ldw	r18,8(sp)
   48034:	dc400117 	ldw	r17,4(sp)
   48038:	dc000017 	ldw	r16,0(sp)
   4803c:	dec00404 	addi	sp,sp,16
   48040:	f800283a 	ret
   48044:	004a4540 	call	4a454 <strcmp>
   48048:	0007883a 	mov	r3,zero
   4804c:	103ff226 	beq	r2,zero,48018 <_setlocale_r+0x48>
   48050:	003ff506 	br	48028 <_setlocale_r+0x58>

00048054 <setlocale>:
   48054:	01800174 	movhi	r6,5
   48058:	31874404 	addi	r6,r6,7440
   4805c:	2007883a 	mov	r3,r4
   48060:	31000017 	ldw	r4,0(r6)
   48064:	280d883a 	mov	r6,r5
   48068:	180b883a 	mov	r5,r3
   4806c:	0047fd01 	jmpi	47fd0 <_setlocale_r>

00048070 <__smakebuf_r>:
   48070:	2880030b 	ldhu	r2,12(r5)
   48074:	deffed04 	addi	sp,sp,-76
   48078:	dc401015 	stw	r17,64(sp)
   4807c:	1080008c 	andi	r2,r2,2
   48080:	dc000f15 	stw	r16,60(sp)
   48084:	dfc01215 	stw	ra,72(sp)
   48088:	dc801115 	stw	r18,68(sp)
   4808c:	2821883a 	mov	r16,r5
   48090:	2023883a 	mov	r17,r4
   48094:	10000b26 	beq	r2,zero,480c4 <__smakebuf_r+0x54>
   48098:	28c010c4 	addi	r3,r5,67
   4809c:	00800044 	movi	r2,1
   480a0:	28800515 	stw	r2,20(r5)
   480a4:	28c00415 	stw	r3,16(r5)
   480a8:	28c00015 	stw	r3,0(r5)
   480ac:	dfc01217 	ldw	ra,72(sp)
   480b0:	dc801117 	ldw	r18,68(sp)
   480b4:	dc401017 	ldw	r17,64(sp)
   480b8:	dc000f17 	ldw	r16,60(sp)
   480bc:	dec01304 	addi	sp,sp,76
   480c0:	f800283a 	ret
   480c4:	2940038f 	ldh	r5,14(r5)
   480c8:	28002116 	blt	r5,zero,48150 <__smakebuf_r+0xe0>
   480cc:	d80d883a 	mov	r6,sp
   480d0:	004a7d00 	call	4a7d0 <_fstat_r>
   480d4:	10001e16 	blt	r2,zero,48150 <__smakebuf_r+0xe0>
   480d8:	d8800117 	ldw	r2,4(sp)
   480dc:	00e00014 	movui	r3,32768
   480e0:	113c000c 	andi	r4,r2,61440
   480e4:	20c03126 	beq	r4,r3,481ac <__smakebuf_r+0x13c>
   480e8:	8080030b 	ldhu	r2,12(r16)
   480ec:	00c80004 	movi	r3,8192
   480f0:	10820014 	ori	r2,r2,2048
   480f4:	8080030d 	sth	r2,12(r16)
   480f8:	20c01e26 	beq	r4,r3,48174 <__smakebuf_r+0x104>
   480fc:	04810004 	movi	r18,1024
   48100:	8809883a 	mov	r4,r17
   48104:	900b883a 	mov	r5,r18
   48108:	00482040 	call	48204 <_malloc_r>
   4810c:	1009883a 	mov	r4,r2
   48110:	10003126 	beq	r2,zero,481d8 <__smakebuf_r+0x168>
   48114:	80c0030b 	ldhu	r3,12(r16)
   48118:	00800134 	movhi	r2,4
   4811c:	109cf704 	addi	r2,r2,29660
   48120:	88800f15 	stw	r2,60(r17)
   48124:	18c02014 	ori	r3,r3,128
   48128:	84800515 	stw	r18,20(r16)
   4812c:	80c0030d 	sth	r3,12(r16)
   48130:	81000415 	stw	r4,16(r16)
   48134:	81000015 	stw	r4,0(r16)
   48138:	dfc01217 	ldw	ra,72(sp)
   4813c:	dc801117 	ldw	r18,68(sp)
   48140:	dc401017 	ldw	r17,64(sp)
   48144:	dc000f17 	ldw	r16,60(sp)
   48148:	dec01304 	addi	sp,sp,76
   4814c:	f800283a 	ret
   48150:	80c0030b 	ldhu	r3,12(r16)
   48154:	1880200c 	andi	r2,r3,128
   48158:	10000426 	beq	r2,zero,4816c <__smakebuf_r+0xfc>
   4815c:	04801004 	movi	r18,64
   48160:	18820014 	ori	r2,r3,2048
   48164:	8080030d 	sth	r2,12(r16)
   48168:	003fe506 	br	48100 <__smakebuf_r+0x90>
   4816c:	04810004 	movi	r18,1024
   48170:	003ffb06 	br	48160 <__smakebuf_r+0xf0>
   48174:	8140038f 	ldh	r5,14(r16)
   48178:	8809883a 	mov	r4,r17
   4817c:	004a8440 	call	4a844 <_isatty_r>
   48180:	103fde26 	beq	r2,zero,480fc <__smakebuf_r+0x8c>
   48184:	8080030b 	ldhu	r2,12(r16)
   48188:	80c010c4 	addi	r3,r16,67
   4818c:	04810004 	movi	r18,1024
   48190:	10800054 	ori	r2,r2,1
   48194:	8080030d 	sth	r2,12(r16)
   48198:	00800044 	movi	r2,1
   4819c:	80c00415 	stw	r3,16(r16)
   481a0:	80800515 	stw	r2,20(r16)
   481a4:	80c00015 	stw	r3,0(r16)
   481a8:	003fd506 	br	48100 <__smakebuf_r+0x90>
   481ac:	80c00a17 	ldw	r3,40(r16)
   481b0:	00800174 	movhi	r2,5
   481b4:	10a8c404 	addi	r2,r2,-23792
   481b8:	18bfcb1e 	bne	r3,r2,480e8 <__smakebuf_r+0x78>
   481bc:	8080030b 	ldhu	r2,12(r16)
   481c0:	00c10004 	movi	r3,1024
   481c4:	1825883a 	mov	r18,r3
   481c8:	10c4b03a 	or	r2,r2,r3
   481cc:	8080030d 	sth	r2,12(r16)
   481d0:	80c01315 	stw	r3,76(r16)
   481d4:	003fca06 	br	48100 <__smakebuf_r+0x90>
   481d8:	8100030b 	ldhu	r4,12(r16)
   481dc:	2080800c 	andi	r2,r4,512
   481e0:	103fb21e 	bne	r2,zero,480ac <__smakebuf_r+0x3c>
   481e4:	80c010c4 	addi	r3,r16,67
   481e8:	21000094 	ori	r4,r4,2
   481ec:	00800044 	movi	r2,1
   481f0:	80800515 	stw	r2,20(r16)
   481f4:	8100030d 	sth	r4,12(r16)
   481f8:	80c00415 	stw	r3,16(r16)
   481fc:	80c00015 	stw	r3,0(r16)
   48200:	003faa06 	br	480ac <__smakebuf_r+0x3c>

00048204 <_malloc_r>:
   48204:	defff604 	addi	sp,sp,-40
   48208:	28c002c4 	addi	r3,r5,11
   4820c:	00800584 	movi	r2,22
   48210:	dc800215 	stw	r18,8(sp)
   48214:	dfc00915 	stw	ra,36(sp)
   48218:	df000815 	stw	fp,32(sp)
   4821c:	ddc00715 	stw	r23,28(sp)
   48220:	dd800615 	stw	r22,24(sp)
   48224:	dd400515 	stw	r21,20(sp)
   48228:	dd000415 	stw	r20,16(sp)
   4822c:	dcc00315 	stw	r19,12(sp)
   48230:	dc400115 	stw	r17,4(sp)
   48234:	dc000015 	stw	r16,0(sp)
   48238:	2025883a 	mov	r18,r4
   4823c:	10c01236 	bltu	r2,r3,48288 <_malloc_r+0x84>
   48240:	04400404 	movi	r17,16
   48244:	8940142e 	bgeu	r17,r5,48298 <_malloc_r+0x94>
   48248:	00800304 	movi	r2,12
   4824c:	0007883a 	mov	r3,zero
   48250:	90800015 	stw	r2,0(r18)
   48254:	1805883a 	mov	r2,r3
   48258:	dfc00917 	ldw	ra,36(sp)
   4825c:	df000817 	ldw	fp,32(sp)
   48260:	ddc00717 	ldw	r23,28(sp)
   48264:	dd800617 	ldw	r22,24(sp)
   48268:	dd400517 	ldw	r21,20(sp)
   4826c:	dd000417 	ldw	r20,16(sp)
   48270:	dcc00317 	ldw	r19,12(sp)
   48274:	dc800217 	ldw	r18,8(sp)
   48278:	dc400117 	ldw	r17,4(sp)
   4827c:	dc000017 	ldw	r16,0(sp)
   48280:	dec00a04 	addi	sp,sp,40
   48284:	f800283a 	ret
   48288:	00bffe04 	movi	r2,-8
   4828c:	18a2703a 	and	r17,r3,r2
   48290:	883fed16 	blt	r17,zero,48248 <_malloc_r+0x44>
   48294:	897fec36 	bltu	r17,r5,48248 <_malloc_r+0x44>
   48298:	9009883a 	mov	r4,r18
   4829c:	004d1200 	call	4d120 <__malloc_lock>
   482a0:	00807dc4 	movi	r2,503
   482a4:	14402b2e 	bgeu	r2,r17,48354 <_malloc_r+0x150>
   482a8:	8806d27a 	srli	r3,r17,9
   482ac:	18003f1e 	bne	r3,zero,483ac <_malloc_r+0x1a8>
   482b0:	880cd0fa 	srli	r6,r17,3
   482b4:	300490fa 	slli	r2,r6,3
   482b8:	02c00174 	movhi	r11,5
   482bc:	5ac18304 	addi	r11,r11,1548
   482c0:	12cb883a 	add	r5,r2,r11
   482c4:	2c000317 	ldw	r16,12(r5)
   482c8:	580f883a 	mov	r7,r11
   482cc:	2c00041e 	bne	r5,r16,482e0 <_malloc_r+0xdc>
   482d0:	00000a06 	br	482fc <_malloc_r+0xf8>
   482d4:	1800860e 	bge	r3,zero,484f0 <_malloc_r+0x2ec>
   482d8:	84000317 	ldw	r16,12(r16)
   482dc:	2c000726 	beq	r5,r16,482fc <_malloc_r+0xf8>
   482e0:	80800117 	ldw	r2,4(r16)
   482e4:	00ffff04 	movi	r3,-4
   482e8:	10c8703a 	and	r4,r2,r3
   482ec:	2447c83a 	sub	r3,r4,r17
   482f0:	008003c4 	movi	r2,15
   482f4:	10fff70e 	bge	r2,r3,482d4 <_malloc_r+0xd0>
   482f8:	31bfffc4 	addi	r6,r6,-1
   482fc:	32400044 	addi	r9,r6,1
   48300:	02800174 	movhi	r10,5
   48304:	52818504 	addi	r10,r10,1556
   48308:	54000217 	ldw	r16,8(r10)
   4830c:	8280a026 	beq	r16,r10,48590 <_malloc_r+0x38c>
   48310:	80800117 	ldw	r2,4(r16)
   48314:	00ffff04 	movi	r3,-4
   48318:	10ca703a 	and	r5,r2,r3
   4831c:	2c4dc83a 	sub	r6,r5,r17
   48320:	008003c4 	movi	r2,15
   48324:	11808316 	blt	r2,r6,48534 <_malloc_r+0x330>
   48328:	52800315 	stw	r10,12(r10)
   4832c:	52800215 	stw	r10,8(r10)
   48330:	30002916 	blt	r6,zero,483d8 <_malloc_r+0x1d4>
   48334:	8147883a 	add	r3,r16,r5
   48338:	18800117 	ldw	r2,4(r3)
   4833c:	9009883a 	mov	r4,r18
   48340:	10800054 	ori	r2,r2,1
   48344:	18800115 	stw	r2,4(r3)
   48348:	004d1400 	call	4d140 <__malloc_unlock>
   4834c:	80c00204 	addi	r3,r16,8
   48350:	003fc006 	br	48254 <_malloc_r+0x50>
   48354:	02c00174 	movhi	r11,5
   48358:	5ac18304 	addi	r11,r11,1548
   4835c:	8ac5883a 	add	r2,r17,r11
   48360:	14000317 	ldw	r16,12(r2)
   48364:	580f883a 	mov	r7,r11
   48368:	8806d0fa 	srli	r3,r17,3
   4836c:	14006c26 	beq	r2,r16,48520 <_malloc_r+0x31c>
   48370:	80c00117 	ldw	r3,4(r16)
   48374:	00bfff04 	movi	r2,-4
   48378:	81800317 	ldw	r6,12(r16)
   4837c:	1886703a 	and	r3,r3,r2
   48380:	80c7883a 	add	r3,r16,r3
   48384:	18800117 	ldw	r2,4(r3)
   48388:	81400217 	ldw	r5,8(r16)
   4838c:	9009883a 	mov	r4,r18
   48390:	10800054 	ori	r2,r2,1
   48394:	18800115 	stw	r2,4(r3)
   48398:	31400215 	stw	r5,8(r6)
   4839c:	29800315 	stw	r6,12(r5)
   483a0:	004d1400 	call	4d140 <__malloc_unlock>
   483a4:	80c00204 	addi	r3,r16,8
   483a8:	003faa06 	br	48254 <_malloc_r+0x50>
   483ac:	00800104 	movi	r2,4
   483b0:	10c0052e 	bgeu	r2,r3,483c8 <_malloc_r+0x1c4>
   483b4:	00800504 	movi	r2,20
   483b8:	10c07836 	bltu	r2,r3,4859c <_malloc_r+0x398>
   483bc:	198016c4 	addi	r6,r3,91
   483c0:	300490fa 	slli	r2,r6,3
   483c4:	003fbc06 	br	482b8 <_malloc_r+0xb4>
   483c8:	8804d1ba 	srli	r2,r17,6
   483cc:	11800e04 	addi	r6,r2,56
   483d0:	300490fa 	slli	r2,r6,3
   483d4:	003fb806 	br	482b8 <_malloc_r+0xb4>
   483d8:	00807fc4 	movi	r2,511
   483dc:	1140bb36 	bltu	r2,r5,486cc <_malloc_r+0x4c8>
   483e0:	2806d0fa 	srli	r3,r5,3
   483e4:	573ffe04 	addi	fp,r10,-8
   483e8:	00800044 	movi	r2,1
   483ec:	180890fa 	slli	r4,r3,3
   483f0:	1807d0ba 	srai	r3,r3,2
   483f4:	e1c00117 	ldw	r7,4(fp)
   483f8:	5909883a 	add	r4,r11,r4
   483fc:	21400217 	ldw	r5,8(r4)
   48400:	10c4983a 	sll	r2,r2,r3
   48404:	81000315 	stw	r4,12(r16)
   48408:	81400215 	stw	r5,8(r16)
   4840c:	388eb03a 	or	r7,r7,r2
   48410:	2c000315 	stw	r16,12(r5)
   48414:	24000215 	stw	r16,8(r4)
   48418:	e1c00115 	stw	r7,4(fp)
   4841c:	4807883a 	mov	r3,r9
   48420:	4800cd16 	blt	r9,zero,48758 <_malloc_r+0x554>
   48424:	1807d0ba 	srai	r3,r3,2
   48428:	00800044 	movi	r2,1
   4842c:	10c8983a 	sll	r4,r2,r3
   48430:	39004436 	bltu	r7,r4,48544 <_malloc_r+0x340>
   48434:	21c4703a 	and	r2,r4,r7
   48438:	10000a1e 	bne	r2,zero,48464 <_malloc_r+0x260>
   4843c:	2109883a 	add	r4,r4,r4
   48440:	00bfff04 	movi	r2,-4
   48444:	4884703a 	and	r2,r9,r2
   48448:	3906703a 	and	r3,r7,r4
   4844c:	12400104 	addi	r9,r2,4
   48450:	1800041e 	bne	r3,zero,48464 <_malloc_r+0x260>
   48454:	2109883a 	add	r4,r4,r4
   48458:	3904703a 	and	r2,r7,r4
   4845c:	4a400104 	addi	r9,r9,4
   48460:	103ffc26 	beq	r2,zero,48454 <_malloc_r+0x250>
   48464:	480490fa 	slli	r2,r9,3
   48468:	4819883a 	mov	r12,r9
   4846c:	023fff04 	movi	r8,-4
   48470:	589b883a 	add	r13,r11,r2
   48474:	6807883a 	mov	r3,r13
   48478:	014003c4 	movi	r5,15
   4847c:	1c000317 	ldw	r16,12(r3)
   48480:	1c00041e 	bne	r3,r16,48494 <_malloc_r+0x290>
   48484:	0000a706 	br	48724 <_malloc_r+0x520>
   48488:	3000ab0e 	bge	r6,zero,48738 <_malloc_r+0x534>
   4848c:	84000317 	ldw	r16,12(r16)
   48490:	1c00a426 	beq	r3,r16,48724 <_malloc_r+0x520>
   48494:	80800117 	ldw	r2,4(r16)
   48498:	1204703a 	and	r2,r2,r8
   4849c:	144dc83a 	sub	r6,r2,r17
   484a0:	29bff90e 	bge	r5,r6,48488 <_malloc_r+0x284>
   484a4:	81000317 	ldw	r4,12(r16)
   484a8:	80c00217 	ldw	r3,8(r16)
   484ac:	89400054 	ori	r5,r17,1
   484b0:	8445883a 	add	r2,r16,r17
   484b4:	20c00215 	stw	r3,8(r4)
   484b8:	19000315 	stw	r4,12(r3)
   484bc:	81400115 	stw	r5,4(r16)
   484c0:	1187883a 	add	r3,r2,r6
   484c4:	31000054 	ori	r4,r6,1
   484c8:	50800315 	stw	r2,12(r10)
   484cc:	50800215 	stw	r2,8(r10)
   484d0:	19800015 	stw	r6,0(r3)
   484d4:	11000115 	stw	r4,4(r2)
   484d8:	12800215 	stw	r10,8(r2)
   484dc:	12800315 	stw	r10,12(r2)
   484e0:	9009883a 	mov	r4,r18
   484e4:	004d1400 	call	4d140 <__malloc_unlock>
   484e8:	80c00204 	addi	r3,r16,8
   484ec:	003f5906 	br	48254 <_malloc_r+0x50>
   484f0:	8109883a 	add	r4,r16,r4
   484f4:	20800117 	ldw	r2,4(r4)
   484f8:	80c00217 	ldw	r3,8(r16)
   484fc:	81400317 	ldw	r5,12(r16)
   48500:	10800054 	ori	r2,r2,1
   48504:	20800115 	stw	r2,4(r4)
   48508:	28c00215 	stw	r3,8(r5)
   4850c:	19400315 	stw	r5,12(r3)
   48510:	9009883a 	mov	r4,r18
   48514:	004d1400 	call	4d140 <__malloc_unlock>
   48518:	80c00204 	addi	r3,r16,8
   4851c:	003f4d06 	br	48254 <_malloc_r+0x50>
   48520:	80800204 	addi	r2,r16,8
   48524:	14000317 	ldw	r16,12(r2)
   48528:	143f911e 	bne	r2,r16,48370 <_malloc_r+0x16c>
   4852c:	1a400084 	addi	r9,r3,2
   48530:	003f7306 	br	48300 <_malloc_r+0xfc>
   48534:	88c00054 	ori	r3,r17,1
   48538:	8445883a 	add	r2,r16,r17
   4853c:	80c00115 	stw	r3,4(r16)
   48540:	003fdf06 	br	484c0 <_malloc_r+0x2bc>
   48544:	e4000217 	ldw	r16,8(fp)
   48548:	00bfff04 	movi	r2,-4
   4854c:	80c00117 	ldw	r3,4(r16)
   48550:	802d883a 	mov	r22,r16
   48554:	18aa703a 	and	r21,r3,r2
   48558:	ac401636 	bltu	r21,r17,485b4 <_malloc_r+0x3b0>
   4855c:	ac49c83a 	sub	r4,r21,r17
   48560:	008003c4 	movi	r2,15
   48564:	1100130e 	bge	r2,r4,485b4 <_malloc_r+0x3b0>
   48568:	88800054 	ori	r2,r17,1
   4856c:	8447883a 	add	r3,r16,r17
   48570:	80800115 	stw	r2,4(r16)
   48574:	20800054 	ori	r2,r4,1
   48578:	18800115 	stw	r2,4(r3)
   4857c:	e0c00215 	stw	r3,8(fp)
   48580:	9009883a 	mov	r4,r18
   48584:	004d1400 	call	4d140 <__malloc_unlock>
   48588:	80c00204 	addi	r3,r16,8
   4858c:	003f3106 	br	48254 <_malloc_r+0x50>
   48590:	39c00117 	ldw	r7,4(r7)
   48594:	573ffe04 	addi	fp,r10,-8
   48598:	003fa006 	br	4841c <_malloc_r+0x218>
   4859c:	00801504 	movi	r2,84
   485a0:	10c06736 	bltu	r2,r3,48740 <_malloc_r+0x53c>
   485a4:	8804d33a 	srli	r2,r17,12
   485a8:	11801b84 	addi	r6,r2,110
   485ac:	300490fa 	slli	r2,r6,3
   485b0:	003f4106 	br	482b8 <_malloc_r+0xb4>
   485b4:	d0a72f17 	ldw	r2,-25412(gp)
   485b8:	d0e01117 	ldw	r3,-32700(gp)
   485bc:	053fffc4 	movi	r20,-1
   485c0:	10800404 	addi	r2,r2,16
   485c4:	88a7883a 	add	r19,r17,r2
   485c8:	1d000326 	beq	r3,r20,485d8 <_malloc_r+0x3d4>
   485cc:	98c3ffc4 	addi	r3,r19,4095
   485d0:	00bc0004 	movi	r2,-4096
   485d4:	18a6703a 	and	r19,r3,r2
   485d8:	9009883a 	mov	r4,r18
   485dc:	980b883a 	mov	r5,r19
   485e0:	004a2980 	call	4a298 <_sbrk_r>
   485e4:	1009883a 	mov	r4,r2
   485e8:	15000426 	beq	r2,r20,485fc <_malloc_r+0x3f8>
   485ec:	854b883a 	add	r5,r16,r21
   485f0:	1029883a 	mov	r20,r2
   485f4:	11405a2e 	bgeu	r2,r5,48760 <_malloc_r+0x55c>
   485f8:	87000c26 	beq	r16,fp,4862c <_malloc_r+0x428>
   485fc:	e4000217 	ldw	r16,8(fp)
   48600:	80c00117 	ldw	r3,4(r16)
   48604:	00bfff04 	movi	r2,-4
   48608:	1884703a 	and	r2,r3,r2
   4860c:	14400336 	bltu	r2,r17,4861c <_malloc_r+0x418>
   48610:	1449c83a 	sub	r4,r2,r17
   48614:	008003c4 	movi	r2,15
   48618:	113fd316 	blt	r2,r4,48568 <_malloc_r+0x364>
   4861c:	9009883a 	mov	r4,r18
   48620:	004d1400 	call	4d140 <__malloc_unlock>
   48624:	0007883a 	mov	r3,zero
   48628:	003f0a06 	br	48254 <_malloc_r+0x50>
   4862c:	05c00174 	movhi	r23,5
   48630:	bdce7104 	addi	r23,r23,14788
   48634:	b8800017 	ldw	r2,0(r23)
   48638:	988d883a 	add	r6,r19,r2
   4863c:	b9800015 	stw	r6,0(r23)
   48640:	d0e01117 	ldw	r3,-32700(gp)
   48644:	00bfffc4 	movi	r2,-1
   48648:	18808e26 	beq	r3,r2,48884 <_malloc_r+0x680>
   4864c:	2145c83a 	sub	r2,r4,r5
   48650:	3085883a 	add	r2,r6,r2
   48654:	b8800015 	stw	r2,0(r23)
   48658:	20c001cc 	andi	r3,r4,7
   4865c:	18005f1e 	bne	r3,zero,487dc <_malloc_r+0x5d8>
   48660:	000b883a 	mov	r5,zero
   48664:	a4c5883a 	add	r2,r20,r19
   48668:	1083ffcc 	andi	r2,r2,4095
   4866c:	00c40004 	movi	r3,4096
   48670:	1887c83a 	sub	r3,r3,r2
   48674:	28e7883a 	add	r19,r5,r3
   48678:	9009883a 	mov	r4,r18
   4867c:	980b883a 	mov	r5,r19
   48680:	004a2980 	call	4a298 <_sbrk_r>
   48684:	1007883a 	mov	r3,r2
   48688:	00bfffc4 	movi	r2,-1
   4868c:	18807a26 	beq	r3,r2,48878 <_malloc_r+0x674>
   48690:	1d05c83a 	sub	r2,r3,r20
   48694:	9885883a 	add	r2,r19,r2
   48698:	10c00054 	ori	r3,r2,1
   4869c:	b8800017 	ldw	r2,0(r23)
   486a0:	a021883a 	mov	r16,r20
   486a4:	a0c00115 	stw	r3,4(r20)
   486a8:	9885883a 	add	r2,r19,r2
   486ac:	b8800015 	stw	r2,0(r23)
   486b0:	e5000215 	stw	r20,8(fp)
   486b4:	b7003626 	beq	r22,fp,48790 <_malloc_r+0x58c>
   486b8:	018003c4 	movi	r6,15
   486bc:	35404b36 	bltu	r6,r21,487ec <_malloc_r+0x5e8>
   486c0:	00800044 	movi	r2,1
   486c4:	a0800115 	stw	r2,4(r20)
   486c8:	003fcd06 	br	48600 <_malloc_r+0x3fc>
   486cc:	2808d27a 	srli	r4,r5,9
   486d0:	2000371e 	bne	r4,zero,487b0 <_malloc_r+0x5ac>
   486d4:	2808d0fa 	srli	r4,r5,3
   486d8:	200690fa 	slli	r3,r4,3
   486dc:	1ad1883a 	add	r8,r3,r11
   486e0:	41800217 	ldw	r6,8(r8)
   486e4:	41805b26 	beq	r8,r6,48854 <_malloc_r+0x650>
   486e8:	30800117 	ldw	r2,4(r6)
   486ec:	00ffff04 	movi	r3,-4
   486f0:	10c4703a 	and	r2,r2,r3
   486f4:	2880022e 	bgeu	r5,r2,48700 <_malloc_r+0x4fc>
   486f8:	31800217 	ldw	r6,8(r6)
   486fc:	41bffa1e 	bne	r8,r6,486e8 <_malloc_r+0x4e4>
   48700:	32000317 	ldw	r8,12(r6)
   48704:	39c00117 	ldw	r7,4(r7)
   48708:	82000315 	stw	r8,12(r16)
   4870c:	81800215 	stw	r6,8(r16)
   48710:	07000174 	movhi	fp,5
   48714:	e7018304 	addi	fp,fp,1548
   48718:	34000315 	stw	r16,12(r6)
   4871c:	44000215 	stw	r16,8(r8)
   48720:	003f3e06 	br	4841c <_malloc_r+0x218>
   48724:	63000044 	addi	r12,r12,1
   48728:	608000cc 	andi	r2,r12,3
   4872c:	10005d26 	beq	r2,zero,488a4 <_malloc_r+0x6a0>
   48730:	18c00204 	addi	r3,r3,8
   48734:	003f5106 	br	4847c <_malloc_r+0x278>
   48738:	8089883a 	add	r4,r16,r2
   4873c:	003f6d06 	br	484f4 <_malloc_r+0x2f0>
   48740:	00805504 	movi	r2,340
   48744:	10c02036 	bltu	r2,r3,487c8 <_malloc_r+0x5c4>
   48748:	8804d3fa 	srli	r2,r17,15
   4874c:	11801dc4 	addi	r6,r2,119
   48750:	300490fa 	slli	r2,r6,3
   48754:	003ed806 	br	482b8 <_malloc_r+0xb4>
   48758:	48c000c4 	addi	r3,r9,3
   4875c:	003f3106 	br	48424 <_malloc_r+0x220>
   48760:	05c00174 	movhi	r23,5
   48764:	bdce7104 	addi	r23,r23,14788
   48768:	b8800017 	ldw	r2,0(r23)
   4876c:	988d883a 	add	r6,r19,r2
   48770:	b9800015 	stw	r6,0(r23)
   48774:	293fb21e 	bne	r5,r4,48640 <_malloc_r+0x43c>
   48778:	2083ffcc 	andi	r2,r4,4095
   4877c:	103fb01e 	bne	r2,zero,48640 <_malloc_r+0x43c>
   48780:	e4000217 	ldw	r16,8(fp)
   48784:	9d45883a 	add	r2,r19,r21
   48788:	10800054 	ori	r2,r2,1
   4878c:	80800115 	stw	r2,4(r16)
   48790:	b8c00017 	ldw	r3,0(r23)
   48794:	d0a73017 	ldw	r2,-25408(gp)
   48798:	10c0012e 	bgeu	r2,r3,487a0 <_malloc_r+0x59c>
   4879c:	d0e73015 	stw	r3,-25408(gp)
   487a0:	d0a73117 	ldw	r2,-25404(gp)
   487a4:	10ff962e 	bgeu	r2,r3,48600 <_malloc_r+0x3fc>
   487a8:	d0e73115 	stw	r3,-25404(gp)
   487ac:	003f9406 	br	48600 <_malloc_r+0x3fc>
   487b0:	00800104 	movi	r2,4
   487b4:	11001e36 	bltu	r2,r4,48830 <_malloc_r+0x62c>
   487b8:	2804d1ba 	srli	r2,r5,6
   487bc:	11000e04 	addi	r4,r2,56
   487c0:	200690fa 	slli	r3,r4,3
   487c4:	003fc506 	br	486dc <_malloc_r+0x4d8>
   487c8:	00815504 	movi	r2,1364
   487cc:	10c01d2e 	bgeu	r2,r3,48844 <_malloc_r+0x640>
   487d0:	01801f84 	movi	r6,126
   487d4:	0080fc04 	movi	r2,1008
   487d8:	003eb706 	br	482b8 <_malloc_r+0xb4>
   487dc:	00800204 	movi	r2,8
   487e0:	10cbc83a 	sub	r5,r2,r3
   487e4:	2169883a 	add	r20,r4,r5
   487e8:	003f9e06 	br	48664 <_malloc_r+0x460>
   487ec:	00bffe04 	movi	r2,-8
   487f0:	a93ffd04 	addi	r4,r21,-12
   487f4:	2088703a 	and	r4,r4,r2
   487f8:	b10b883a 	add	r5,r22,r4
   487fc:	00c00144 	movi	r3,5
   48800:	28c00215 	stw	r3,8(r5)
   48804:	28c00115 	stw	r3,4(r5)
   48808:	b0800117 	ldw	r2,4(r22)
   4880c:	1080004c 	andi	r2,r2,1
   48810:	2084b03a 	or	r2,r4,r2
   48814:	b0800115 	stw	r2,4(r22)
   48818:	313fdd2e 	bgeu	r6,r4,48790 <_malloc_r+0x58c>
   4881c:	b1400204 	addi	r5,r22,8
   48820:	9009883a 	mov	r4,r18
   48824:	004767c0 	call	4767c <_free_r>
   48828:	e4000217 	ldw	r16,8(fp)
   4882c:	003fd806 	br	48790 <_malloc_r+0x58c>
   48830:	00800504 	movi	r2,20
   48834:	11001536 	bltu	r2,r4,4888c <_malloc_r+0x688>
   48838:	210016c4 	addi	r4,r4,91
   4883c:	200690fa 	slli	r3,r4,3
   48840:	003fa606 	br	486dc <_malloc_r+0x4d8>
   48844:	8804d4ba 	srli	r2,r17,18
   48848:	11801f04 	addi	r6,r2,124
   4884c:	300490fa 	slli	r2,r6,3
   48850:	003e9906 	br	482b8 <_malloc_r+0xb4>
   48854:	2009d0ba 	srai	r4,r4,2
   48858:	01400174 	movhi	r5,5
   4885c:	29418304 	addi	r5,r5,1548
   48860:	00c00044 	movi	r3,1
   48864:	28800117 	ldw	r2,4(r5)
   48868:	1906983a 	sll	r3,r3,r4
   4886c:	10c4b03a 	or	r2,r2,r3
   48870:	28800115 	stw	r2,4(r5)
   48874:	003fa306 	br	48704 <_malloc_r+0x500>
   48878:	0027883a 	mov	r19,zero
   4887c:	00c00044 	movi	r3,1
   48880:	003f8606 	br	4869c <_malloc_r+0x498>
   48884:	d1201115 	stw	r4,-32700(gp)
   48888:	003f7306 	br	48658 <_malloc_r+0x454>
   4888c:	00801504 	movi	r2,84
   48890:	11001936 	bltu	r2,r4,488f8 <_malloc_r+0x6f4>
   48894:	2804d33a 	srli	r2,r5,12
   48898:	11001b84 	addi	r4,r2,110
   4889c:	200690fa 	slli	r3,r4,3
   488a0:	003f8e06 	br	486dc <_malloc_r+0x4d8>
   488a4:	480b883a 	mov	r5,r9
   488a8:	6807883a 	mov	r3,r13
   488ac:	288000cc 	andi	r2,r5,3
   488b0:	18fffe04 	addi	r3,r3,-8
   488b4:	297fffc4 	addi	r5,r5,-1
   488b8:	10001526 	beq	r2,zero,48910 <_malloc_r+0x70c>
   488bc:	18800217 	ldw	r2,8(r3)
   488c0:	10fffa26 	beq	r2,r3,488ac <_malloc_r+0x6a8>
   488c4:	2109883a 	add	r4,r4,r4
   488c8:	393f1e36 	bltu	r7,r4,48544 <_malloc_r+0x340>
   488cc:	203f1d26 	beq	r4,zero,48544 <_malloc_r+0x340>
   488d0:	21c4703a 	and	r2,r4,r7
   488d4:	10000226 	beq	r2,zero,488e0 <_malloc_r+0x6dc>
   488d8:	6013883a 	mov	r9,r12
   488dc:	003ee106 	br	48464 <_malloc_r+0x260>
   488e0:	2109883a 	add	r4,r4,r4
   488e4:	3904703a 	and	r2,r7,r4
   488e8:	63000104 	addi	r12,r12,4
   488ec:	103ffc26 	beq	r2,zero,488e0 <_malloc_r+0x6dc>
   488f0:	6013883a 	mov	r9,r12
   488f4:	003edb06 	br	48464 <_malloc_r+0x260>
   488f8:	00805504 	movi	r2,340
   488fc:	11000836 	bltu	r2,r4,48920 <_malloc_r+0x71c>
   48900:	2804d3fa 	srli	r2,r5,15
   48904:	11001dc4 	addi	r4,r2,119
   48908:	200690fa 	slli	r3,r4,3
   4890c:	003f7306 	br	486dc <_malloc_r+0x4d8>
   48910:	0104303a 	nor	r2,zero,r4
   48914:	388e703a 	and	r7,r7,r2
   48918:	e1c00115 	stw	r7,4(fp)
   4891c:	003fe906 	br	488c4 <_malloc_r+0x6c0>
   48920:	00815504 	movi	r2,1364
   48924:	1100032e 	bgeu	r2,r4,48934 <_malloc_r+0x730>
   48928:	01001f84 	movi	r4,126
   4892c:	00c0fc04 	movi	r3,1008
   48930:	003f6a06 	br	486dc <_malloc_r+0x4d8>
   48934:	2804d4ba 	srli	r2,r5,18
   48938:	11001f04 	addi	r4,r2,124
   4893c:	200690fa 	slli	r3,r4,3
   48940:	003f6606 	br	486dc <_malloc_r+0x4d8>

00048944 <memchr>:
   48944:	008000c4 	movi	r2,3
   48948:	29403fcc 	andi	r5,r5,255
   4894c:	2007883a 	mov	r3,r4
   48950:	1180022e 	bgeu	r2,r6,4895c <memchr+0x18>
   48954:	2084703a 	and	r2,r4,r2
   48958:	10000b26 	beq	r2,zero,48988 <memchr+0x44>
   4895c:	313fffc4 	addi	r4,r6,-1
   48960:	3000051e 	bne	r6,zero,48978 <memchr+0x34>
   48964:	00002c06 	br	48a18 <memchr+0xd4>
   48968:	213fffc4 	addi	r4,r4,-1
   4896c:	00bfffc4 	movi	r2,-1
   48970:	18c00044 	addi	r3,r3,1
   48974:	20802826 	beq	r4,r2,48a18 <memchr+0xd4>
   48978:	18800003 	ldbu	r2,0(r3)
   4897c:	28bffa1e 	bne	r5,r2,48968 <memchr+0x24>
   48980:	1805883a 	mov	r2,r3
   48984:	f800283a 	ret
   48988:	0011883a 	mov	r8,zero
   4898c:	0007883a 	mov	r3,zero
   48990:	01c00104 	movi	r7,4
   48994:	4004923a 	slli	r2,r8,8
   48998:	18c00044 	addi	r3,r3,1
   4899c:	1151883a 	add	r8,r2,r5
   489a0:	19fffc1e 	bne	r3,r7,48994 <memchr+0x50>
   489a4:	02bfbff4 	movhi	r10,65279
   489a8:	52bfbfc4 	addi	r10,r10,-257
   489ac:	02602074 	movhi	r9,32897
   489b0:	4a602004 	addi	r9,r9,-32640
   489b4:	02c000c4 	movi	r11,3
   489b8:	20800017 	ldw	r2,0(r4)
   489bc:	31bfff04 	addi	r6,r6,-4
   489c0:	200f883a 	mov	r7,r4
   489c4:	1204f03a 	xor	r2,r2,r8
   489c8:	1287883a 	add	r3,r2,r10
   489cc:	1a46703a 	and	r3,r3,r9
   489d0:	0084303a 	nor	r2,zero,r2
   489d4:	10c4703a 	and	r2,r2,r3
   489d8:	10000b26 	beq	r2,zero,48a08 <memchr+0xc4>
   489dc:	20800003 	ldbu	r2,0(r4)
   489e0:	28800f26 	beq	r5,r2,48a20 <memchr+0xdc>
   489e4:	20800043 	ldbu	r2,1(r4)
   489e8:	21c00044 	addi	r7,r4,1
   489ec:	28800c26 	beq	r5,r2,48a20 <memchr+0xdc>
   489f0:	20800083 	ldbu	r2,2(r4)
   489f4:	21c00084 	addi	r7,r4,2
   489f8:	28800926 	beq	r5,r2,48a20 <memchr+0xdc>
   489fc:	208000c3 	ldbu	r2,3(r4)
   48a00:	21c000c4 	addi	r7,r4,3
   48a04:	28800626 	beq	r5,r2,48a20 <memchr+0xdc>
   48a08:	21000104 	addi	r4,r4,4
   48a0c:	59bfea36 	bltu	r11,r6,489b8 <memchr+0x74>
   48a10:	2007883a 	mov	r3,r4
   48a14:	003fd106 	br	4895c <memchr+0x18>
   48a18:	0005883a 	mov	r2,zero
   48a1c:	f800283a 	ret
   48a20:	3805883a 	mov	r2,r7
   48a24:	f800283a 	ret

00048a28 <memcpy>:
   48a28:	01c003c4 	movi	r7,15
   48a2c:	2007883a 	mov	r3,r4
   48a30:	3980032e 	bgeu	r7,r6,48a40 <memcpy+0x18>
   48a34:	2904b03a 	or	r2,r5,r4
   48a38:	108000cc 	andi	r2,r2,3
   48a3c:	10000926 	beq	r2,zero,48a64 <memcpy+0x3c>
   48a40:	30000626 	beq	r6,zero,48a5c <memcpy+0x34>
   48a44:	30cd883a 	add	r6,r6,r3
   48a48:	28800003 	ldbu	r2,0(r5)
   48a4c:	29400044 	addi	r5,r5,1
   48a50:	18800005 	stb	r2,0(r3)
   48a54:	18c00044 	addi	r3,r3,1
   48a58:	30fffb1e 	bne	r6,r3,48a48 <memcpy+0x20>
   48a5c:	2005883a 	mov	r2,r4
   48a60:	f800283a 	ret
   48a64:	3811883a 	mov	r8,r7
   48a68:	200f883a 	mov	r7,r4
   48a6c:	28c00017 	ldw	r3,0(r5)
   48a70:	31bffc04 	addi	r6,r6,-16
   48a74:	38c00015 	stw	r3,0(r7)
   48a78:	28800117 	ldw	r2,4(r5)
   48a7c:	38800115 	stw	r2,4(r7)
   48a80:	28c00217 	ldw	r3,8(r5)
   48a84:	38c00215 	stw	r3,8(r7)
   48a88:	28800317 	ldw	r2,12(r5)
   48a8c:	29400404 	addi	r5,r5,16
   48a90:	38800315 	stw	r2,12(r7)
   48a94:	39c00404 	addi	r7,r7,16
   48a98:	41bff436 	bltu	r8,r6,48a6c <memcpy+0x44>
   48a9c:	008000c4 	movi	r2,3
   48aa0:	1180072e 	bgeu	r2,r6,48ac0 <memcpy+0x98>
   48aa4:	1007883a 	mov	r3,r2
   48aa8:	28800017 	ldw	r2,0(r5)
   48aac:	31bfff04 	addi	r6,r6,-4
   48ab0:	29400104 	addi	r5,r5,4
   48ab4:	38800015 	stw	r2,0(r7)
   48ab8:	39c00104 	addi	r7,r7,4
   48abc:	19bffa36 	bltu	r3,r6,48aa8 <memcpy+0x80>
   48ac0:	3807883a 	mov	r3,r7
   48ac4:	003fde06 	br	48a40 <memcpy+0x18>

00048ac8 <memmove>:
   48ac8:	2807883a 	mov	r3,r5
   48acc:	2011883a 	mov	r8,r4
   48ad0:	29000c2e 	bgeu	r5,r4,48b04 <memmove+0x3c>
   48ad4:	298f883a 	add	r7,r5,r6
   48ad8:	21c00a2e 	bgeu	r4,r7,48b04 <memmove+0x3c>
   48adc:	30000726 	beq	r6,zero,48afc <memmove+0x34>
   48ae0:	2187883a 	add	r3,r4,r6
   48ae4:	198dc83a 	sub	r6,r3,r6
   48ae8:	39ffffc4 	addi	r7,r7,-1
   48aec:	38800003 	ldbu	r2,0(r7)
   48af0:	18ffffc4 	addi	r3,r3,-1
   48af4:	18800005 	stb	r2,0(r3)
   48af8:	19bffb1e 	bne	r3,r6,48ae8 <memmove+0x20>
   48afc:	2005883a 	mov	r2,r4
   48b00:	f800283a 	ret
   48b04:	01c003c4 	movi	r7,15
   48b08:	39800a36 	bltu	r7,r6,48b34 <memmove+0x6c>
   48b0c:	303ffb26 	beq	r6,zero,48afc <memmove+0x34>
   48b10:	400f883a 	mov	r7,r8
   48b14:	320d883a 	add	r6,r6,r8
   48b18:	28800003 	ldbu	r2,0(r5)
   48b1c:	29400044 	addi	r5,r5,1
   48b20:	38800005 	stb	r2,0(r7)
   48b24:	39c00044 	addi	r7,r7,1
   48b28:	39bffb1e 	bne	r7,r6,48b18 <memmove+0x50>
   48b2c:	2005883a 	mov	r2,r4
   48b30:	f800283a 	ret
   48b34:	1904b03a 	or	r2,r3,r4
   48b38:	108000cc 	andi	r2,r2,3
   48b3c:	103ff31e 	bne	r2,zero,48b0c <memmove+0x44>
   48b40:	3811883a 	mov	r8,r7
   48b44:	180b883a 	mov	r5,r3
   48b48:	200f883a 	mov	r7,r4
   48b4c:	28c00017 	ldw	r3,0(r5)
   48b50:	31bffc04 	addi	r6,r6,-16
   48b54:	38c00015 	stw	r3,0(r7)
   48b58:	28800117 	ldw	r2,4(r5)
   48b5c:	38800115 	stw	r2,4(r7)
   48b60:	28c00217 	ldw	r3,8(r5)
   48b64:	38c00215 	stw	r3,8(r7)
   48b68:	28800317 	ldw	r2,12(r5)
   48b6c:	29400404 	addi	r5,r5,16
   48b70:	38800315 	stw	r2,12(r7)
   48b74:	39c00404 	addi	r7,r7,16
   48b78:	41bff436 	bltu	r8,r6,48b4c <memmove+0x84>
   48b7c:	008000c4 	movi	r2,3
   48b80:	1180072e 	bgeu	r2,r6,48ba0 <memmove+0xd8>
   48b84:	1007883a 	mov	r3,r2
   48b88:	28800017 	ldw	r2,0(r5)
   48b8c:	31bfff04 	addi	r6,r6,-4
   48b90:	29400104 	addi	r5,r5,4
   48b94:	38800015 	stw	r2,0(r7)
   48b98:	39c00104 	addi	r7,r7,4
   48b9c:	19bffa36 	bltu	r3,r6,48b88 <memmove+0xc0>
   48ba0:	3811883a 	mov	r8,r7
   48ba4:	003fd906 	br	48b0c <memmove+0x44>

00048ba8 <memset>:
   48ba8:	008000c4 	movi	r2,3
   48bac:	29403fcc 	andi	r5,r5,255
   48bb0:	2007883a 	mov	r3,r4
   48bb4:	1180022e 	bgeu	r2,r6,48bc0 <memset+0x18>
   48bb8:	2084703a 	and	r2,r4,r2
   48bbc:	10000826 	beq	r2,zero,48be0 <memset+0x38>
   48bc0:	30000526 	beq	r6,zero,48bd8 <memset+0x30>
   48bc4:	2805883a 	mov	r2,r5
   48bc8:	30cd883a 	add	r6,r6,r3
   48bcc:	18800005 	stb	r2,0(r3)
   48bd0:	18c00044 	addi	r3,r3,1
   48bd4:	19bffd1e 	bne	r3,r6,48bcc <memset+0x24>
   48bd8:	2005883a 	mov	r2,r4
   48bdc:	f800283a 	ret
   48be0:	2804923a 	slli	r2,r5,8
   48be4:	020003c4 	movi	r8,15
   48be8:	200f883a 	mov	r7,r4
   48bec:	2884b03a 	or	r2,r5,r2
   48bf0:	1006943a 	slli	r3,r2,16
   48bf4:	10c6b03a 	or	r3,r2,r3
   48bf8:	41800a2e 	bgeu	r8,r6,48c24 <memset+0x7c>
   48bfc:	4005883a 	mov	r2,r8
   48c00:	31bffc04 	addi	r6,r6,-16
   48c04:	38c00015 	stw	r3,0(r7)
   48c08:	38c00115 	stw	r3,4(r7)
   48c0c:	38c00215 	stw	r3,8(r7)
   48c10:	38c00315 	stw	r3,12(r7)
   48c14:	39c00404 	addi	r7,r7,16
   48c18:	11bff936 	bltu	r2,r6,48c00 <memset+0x58>
   48c1c:	008000c4 	movi	r2,3
   48c20:	1180052e 	bgeu	r2,r6,48c38 <memset+0x90>
   48c24:	31bfff04 	addi	r6,r6,-4
   48c28:	008000c4 	movi	r2,3
   48c2c:	38c00015 	stw	r3,0(r7)
   48c30:	39c00104 	addi	r7,r7,4
   48c34:	11bffb36 	bltu	r2,r6,48c24 <memset+0x7c>
   48c38:	3807883a 	mov	r3,r7
   48c3c:	003fe006 	br	48bc0 <memset+0x18>

00048c40 <_Bfree>:
   48c40:	28000826 	beq	r5,zero,48c64 <_Bfree+0x24>
   48c44:	28800117 	ldw	r2,4(r5)
   48c48:	21001317 	ldw	r4,76(r4)
   48c4c:	1085883a 	add	r2,r2,r2
   48c50:	1085883a 	add	r2,r2,r2
   48c54:	1105883a 	add	r2,r2,r4
   48c58:	10c00017 	ldw	r3,0(r2)
   48c5c:	28c00015 	stw	r3,0(r5)
   48c60:	11400015 	stw	r5,0(r2)
   48c64:	f800283a 	ret

00048c68 <__hi0bits>:
   48c68:	20bfffec 	andhi	r2,r4,65535
   48c6c:	10001426 	beq	r2,zero,48cc0 <__hi0bits+0x58>
   48c70:	0007883a 	mov	r3,zero
   48c74:	20bfc02c 	andhi	r2,r4,65280
   48c78:	1000021e 	bne	r2,zero,48c84 <__hi0bits+0x1c>
   48c7c:	2008923a 	slli	r4,r4,8
   48c80:	18c00204 	addi	r3,r3,8
   48c84:	20bc002c 	andhi	r2,r4,61440
   48c88:	1000021e 	bne	r2,zero,48c94 <__hi0bits+0x2c>
   48c8c:	2008913a 	slli	r4,r4,4
   48c90:	18c00104 	addi	r3,r3,4
   48c94:	20b0002c 	andhi	r2,r4,49152
   48c98:	1000031e 	bne	r2,zero,48ca8 <__hi0bits+0x40>
   48c9c:	2105883a 	add	r2,r4,r4
   48ca0:	18c00084 	addi	r3,r3,2
   48ca4:	1089883a 	add	r4,r2,r2
   48ca8:	20000316 	blt	r4,zero,48cb8 <__hi0bits+0x50>
   48cac:	2090002c 	andhi	r2,r4,16384
   48cb0:	10000626 	beq	r2,zero,48ccc <__hi0bits+0x64>
   48cb4:	18c00044 	addi	r3,r3,1
   48cb8:	1805883a 	mov	r2,r3
   48cbc:	f800283a 	ret
   48cc0:	2008943a 	slli	r4,r4,16
   48cc4:	00c00404 	movi	r3,16
   48cc8:	003fea06 	br	48c74 <__hi0bits+0xc>
   48ccc:	00c00804 	movi	r3,32
   48cd0:	1805883a 	mov	r2,r3
   48cd4:	f800283a 	ret

00048cd8 <__lo0bits>:
   48cd8:	20c00017 	ldw	r3,0(r4)
   48cdc:	188001cc 	andi	r2,r3,7
   48ce0:	10000a26 	beq	r2,zero,48d0c <__lo0bits+0x34>
   48ce4:	1880004c 	andi	r2,r3,1
   48ce8:	1005003a 	cmpeq	r2,r2,zero
   48cec:	10002126 	beq	r2,zero,48d74 <__lo0bits+0x9c>
   48cf0:	1880008c 	andi	r2,r3,2
   48cf4:	1000251e 	bne	r2,zero,48d8c <__lo0bits+0xb4>
   48cf8:	1804d0ba 	srli	r2,r3,2
   48cfc:	01400084 	movi	r5,2
   48d00:	20800015 	stw	r2,0(r4)
   48d04:	2805883a 	mov	r2,r5
   48d08:	f800283a 	ret
   48d0c:	18bfffcc 	andi	r2,r3,65535
   48d10:	10001526 	beq	r2,zero,48d68 <__lo0bits+0x90>
   48d14:	000b883a 	mov	r5,zero
   48d18:	18803fcc 	andi	r2,r3,255
   48d1c:	1000021e 	bne	r2,zero,48d28 <__lo0bits+0x50>
   48d20:	1806d23a 	srli	r3,r3,8
   48d24:	29400204 	addi	r5,r5,8
   48d28:	188003cc 	andi	r2,r3,15
   48d2c:	1000021e 	bne	r2,zero,48d38 <__lo0bits+0x60>
   48d30:	1806d13a 	srli	r3,r3,4
   48d34:	29400104 	addi	r5,r5,4
   48d38:	188000cc 	andi	r2,r3,3
   48d3c:	1000021e 	bne	r2,zero,48d48 <__lo0bits+0x70>
   48d40:	1806d0ba 	srli	r3,r3,2
   48d44:	29400084 	addi	r5,r5,2
   48d48:	1880004c 	andi	r2,r3,1
   48d4c:	1000031e 	bne	r2,zero,48d5c <__lo0bits+0x84>
   48d50:	1806d07a 	srli	r3,r3,1
   48d54:	18000a26 	beq	r3,zero,48d80 <__lo0bits+0xa8>
   48d58:	29400044 	addi	r5,r5,1
   48d5c:	2805883a 	mov	r2,r5
   48d60:	20c00015 	stw	r3,0(r4)
   48d64:	f800283a 	ret
   48d68:	1806d43a 	srli	r3,r3,16
   48d6c:	01400404 	movi	r5,16
   48d70:	003fe906 	br	48d18 <__lo0bits+0x40>
   48d74:	000b883a 	mov	r5,zero
   48d78:	2805883a 	mov	r2,r5
   48d7c:	f800283a 	ret
   48d80:	01400804 	movi	r5,32
   48d84:	2805883a 	mov	r2,r5
   48d88:	f800283a 	ret
   48d8c:	1804d07a 	srli	r2,r3,1
   48d90:	01400044 	movi	r5,1
   48d94:	20800015 	stw	r2,0(r4)
   48d98:	003fda06 	br	48d04 <__lo0bits+0x2c>

00048d9c <__mcmp>:
   48d9c:	20800417 	ldw	r2,16(r4)
   48da0:	28c00417 	ldw	r3,16(r5)
   48da4:	10cfc83a 	sub	r7,r2,r3
   48da8:	38000c1e 	bne	r7,zero,48ddc <__mcmp+0x40>
   48dac:	18c5883a 	add	r2,r3,r3
   48db0:	1085883a 	add	r2,r2,r2
   48db4:	10c00504 	addi	r3,r2,20
   48db8:	21000504 	addi	r4,r4,20
   48dbc:	28cb883a 	add	r5,r5,r3
   48dc0:	2085883a 	add	r2,r4,r2
   48dc4:	10bfff04 	addi	r2,r2,-4
   48dc8:	297fff04 	addi	r5,r5,-4
   48dcc:	11800017 	ldw	r6,0(r2)
   48dd0:	28c00017 	ldw	r3,0(r5)
   48dd4:	30c0031e 	bne	r6,r3,48de4 <__mcmp+0x48>
   48dd8:	20bffa36 	bltu	r4,r2,48dc4 <__mcmp+0x28>
   48ddc:	3805883a 	mov	r2,r7
   48de0:	f800283a 	ret
   48de4:	30c00336 	bltu	r6,r3,48df4 <__mcmp+0x58>
   48de8:	01c00044 	movi	r7,1
   48dec:	3805883a 	mov	r2,r7
   48df0:	f800283a 	ret
   48df4:	01ffffc4 	movi	r7,-1
   48df8:	003ff806 	br	48ddc <__mcmp+0x40>

00048dfc <__ulp>:
   48dfc:	295ffc2c 	andhi	r5,r5,32752
   48e00:	013f3034 	movhi	r4,64704
   48e04:	290b883a 	add	r5,r5,r4
   48e08:	0145c83a 	sub	r2,zero,r5
   48e0c:	1007d53a 	srai	r3,r2,20
   48e10:	000d883a 	mov	r6,zero
   48e14:	0140040e 	bge	zero,r5,48e28 <__ulp+0x2c>
   48e18:	280f883a 	mov	r7,r5
   48e1c:	3807883a 	mov	r3,r7
   48e20:	3005883a 	mov	r2,r6
   48e24:	f800283a 	ret
   48e28:	008004c4 	movi	r2,19
   48e2c:	193ffb04 	addi	r4,r3,-20
   48e30:	10c00c0e 	bge	r2,r3,48e64 <__ulp+0x68>
   48e34:	008007c4 	movi	r2,31
   48e38:	1107c83a 	sub	r3,r2,r4
   48e3c:	00800784 	movi	r2,30
   48e40:	01400044 	movi	r5,1
   48e44:	11000216 	blt	r2,r4,48e50 <__ulp+0x54>
   48e48:	00800044 	movi	r2,1
   48e4c:	10ca983a 	sll	r5,r2,r3
   48e50:	000f883a 	mov	r7,zero
   48e54:	280d883a 	mov	r6,r5
   48e58:	3807883a 	mov	r3,r7
   48e5c:	3005883a 	mov	r2,r6
   48e60:	f800283a 	ret
   48e64:	00800234 	movhi	r2,8
   48e68:	10cfd83a 	sra	r7,r2,r3
   48e6c:	000d883a 	mov	r6,zero
   48e70:	3005883a 	mov	r2,r6
   48e74:	3807883a 	mov	r3,r7
   48e78:	f800283a 	ret

00048e7c <__b2d>:
   48e7c:	20800417 	ldw	r2,16(r4)
   48e80:	defff904 	addi	sp,sp,-28
   48e84:	dd000415 	stw	r20,16(sp)
   48e88:	1085883a 	add	r2,r2,r2
   48e8c:	25000504 	addi	r20,r4,20
   48e90:	1085883a 	add	r2,r2,r2
   48e94:	dc000015 	stw	r16,0(sp)
   48e98:	a0a1883a 	add	r16,r20,r2
   48e9c:	dd400515 	stw	r21,20(sp)
   48ea0:	857fff17 	ldw	r21,-4(r16)
   48ea4:	dc400115 	stw	r17,4(sp)
   48ea8:	dfc00615 	stw	ra,24(sp)
   48eac:	a809883a 	mov	r4,r21
   48eb0:	2823883a 	mov	r17,r5
   48eb4:	dcc00315 	stw	r19,12(sp)
   48eb8:	dc800215 	stw	r18,8(sp)
   48ebc:	0048c680 	call	48c68 <__hi0bits>
   48ec0:	100b883a 	mov	r5,r2
   48ec4:	00800804 	movi	r2,32
   48ec8:	1145c83a 	sub	r2,r2,r5
   48ecc:	88800015 	stw	r2,0(r17)
   48ed0:	00800284 	movi	r2,10
   48ed4:	80ffff04 	addi	r3,r16,-4
   48ed8:	11401416 	blt	r2,r5,48f2c <__b2d+0xb0>
   48edc:	008002c4 	movi	r2,11
   48ee0:	1149c83a 	sub	r4,r2,r5
   48ee4:	a0c02736 	bltu	r20,r3,48f84 <__b2d+0x108>
   48ee8:	000d883a 	mov	r6,zero
   48eec:	28800544 	addi	r2,r5,21
   48ef0:	a906d83a 	srl	r3,r21,r4
   48ef4:	a884983a 	sll	r2,r21,r2
   48ef8:	1ccffc34 	orhi	r19,r3,16368
   48efc:	11a4b03a 	or	r18,r2,r6
   48f00:	9005883a 	mov	r2,r18
   48f04:	9807883a 	mov	r3,r19
   48f08:	dfc00617 	ldw	ra,24(sp)
   48f0c:	dd400517 	ldw	r21,20(sp)
   48f10:	dd000417 	ldw	r20,16(sp)
   48f14:	dcc00317 	ldw	r19,12(sp)
   48f18:	dc800217 	ldw	r18,8(sp)
   48f1c:	dc400117 	ldw	r17,4(sp)
   48f20:	dc000017 	ldw	r16,0(sp)
   48f24:	dec00704 	addi	sp,sp,28
   48f28:	f800283a 	ret
   48f2c:	a0c00e36 	bltu	r20,r3,48f68 <__b2d+0xec>
   48f30:	293ffd44 	addi	r4,r5,-11
   48f34:	000d883a 	mov	r6,zero
   48f38:	20000f26 	beq	r4,zero,48f78 <__b2d+0xfc>
   48f3c:	00800804 	movi	r2,32
   48f40:	110bc83a 	sub	r5,r2,r4
   48f44:	a0c01236 	bltu	r20,r3,48f90 <__b2d+0x114>
   48f48:	000f883a 	mov	r7,zero
   48f4c:	a904983a 	sll	r2,r21,r4
   48f50:	3146d83a 	srl	r3,r6,r5
   48f54:	3108983a 	sll	r4,r6,r4
   48f58:	108ffc34 	orhi	r2,r2,16368
   48f5c:	18a6b03a 	or	r19,r3,r2
   48f60:	3924b03a 	or	r18,r7,r4
   48f64:	003fe606 	br	48f00 <__b2d+0x84>
   48f68:	293ffd44 	addi	r4,r5,-11
   48f6c:	81bffe17 	ldw	r6,-8(r16)
   48f70:	80fffe04 	addi	r3,r16,-8
   48f74:	203ff11e 	bne	r4,zero,48f3c <__b2d+0xc0>
   48f78:	accffc34 	orhi	r19,r21,16368
   48f7c:	3025883a 	mov	r18,r6
   48f80:	003fdf06 	br	48f00 <__b2d+0x84>
   48f84:	18bfff17 	ldw	r2,-4(r3)
   48f88:	110cd83a 	srl	r6,r2,r4
   48f8c:	003fd706 	br	48eec <__b2d+0x70>
   48f90:	18bfff17 	ldw	r2,-4(r3)
   48f94:	114ed83a 	srl	r7,r2,r5
   48f98:	003fec06 	br	48f4c <__b2d+0xd0>

00048f9c <__ratio>:
   48f9c:	defff904 	addi	sp,sp,-28
   48fa0:	dc400215 	stw	r17,8(sp)
   48fa4:	2823883a 	mov	r17,r5
   48fa8:	d80b883a 	mov	r5,sp
   48fac:	dfc00615 	stw	ra,24(sp)
   48fb0:	dd000515 	stw	r20,20(sp)
   48fb4:	dcc00415 	stw	r19,16(sp)
   48fb8:	dc800315 	stw	r18,12(sp)
   48fbc:	2025883a 	mov	r18,r4
   48fc0:	0048e7c0 	call	48e7c <__b2d>
   48fc4:	8809883a 	mov	r4,r17
   48fc8:	d9400104 	addi	r5,sp,4
   48fcc:	1027883a 	mov	r19,r2
   48fd0:	1829883a 	mov	r20,r3
   48fd4:	0048e7c0 	call	48e7c <__b2d>
   48fd8:	89000417 	ldw	r4,16(r17)
   48fdc:	91c00417 	ldw	r7,16(r18)
   48fe0:	d9800117 	ldw	r6,4(sp)
   48fe4:	180b883a 	mov	r5,r3
   48fe8:	390fc83a 	sub	r7,r7,r4
   48fec:	1009883a 	mov	r4,r2
   48ff0:	d8800017 	ldw	r2,0(sp)
   48ff4:	380e917a 	slli	r7,r7,5
   48ff8:	2011883a 	mov	r8,r4
   48ffc:	1185c83a 	sub	r2,r2,r6
   49000:	11c5883a 	add	r2,r2,r7
   49004:	1006953a 	slli	r3,r2,20
   49008:	2813883a 	mov	r9,r5
   4900c:	00800d0e 	bge	zero,r2,49044 <__ratio+0xa8>
   49010:	1d29883a 	add	r20,r3,r20
   49014:	a00b883a 	mov	r5,r20
   49018:	480f883a 	mov	r7,r9
   4901c:	9809883a 	mov	r4,r19
   49020:	400d883a 	mov	r6,r8
   49024:	004bdf80 	call	4bdf8 <__divdf3>
   49028:	dfc00617 	ldw	ra,24(sp)
   4902c:	dd000517 	ldw	r20,20(sp)
   49030:	dcc00417 	ldw	r19,16(sp)
   49034:	dc800317 	ldw	r18,12(sp)
   49038:	dc400217 	ldw	r17,8(sp)
   4903c:	dec00704 	addi	sp,sp,28
   49040:	f800283a 	ret
   49044:	28d3c83a 	sub	r9,r5,r3
   49048:	003ff206 	br	49014 <__ratio+0x78>

0004904c <_mprec_log10>:
   4904c:	defffe04 	addi	sp,sp,-8
   49050:	008005c4 	movi	r2,23
   49054:	dc000015 	stw	r16,0(sp)
   49058:	dfc00115 	stw	ra,4(sp)
   4905c:	2021883a 	mov	r16,r4
   49060:	11000c16 	blt	r2,r4,49094 <_mprec_log10+0x48>
   49064:	200490fa 	slli	r2,r4,3
   49068:	00c00174 	movhi	r3,5
   4906c:	18ffbf04 	addi	r3,r3,-260
   49070:	10c5883a 	add	r2,r2,r3
   49074:	12400117 	ldw	r9,4(r2)
   49078:	12000017 	ldw	r8,0(r2)
   4907c:	4807883a 	mov	r3,r9
   49080:	4005883a 	mov	r2,r8
   49084:	dfc00117 	ldw	ra,4(sp)
   49088:	dc000017 	ldw	r16,0(sp)
   4908c:	dec00204 	addi	sp,sp,8
   49090:	f800283a 	ret
   49094:	0011883a 	mov	r8,zero
   49098:	024ffc34 	movhi	r9,16368
   4909c:	0005883a 	mov	r2,zero
   490a0:	00d00934 	movhi	r3,16420
   490a4:	480b883a 	mov	r5,r9
   490a8:	4009883a 	mov	r4,r8
   490ac:	180f883a 	mov	r7,r3
   490b0:	100d883a 	mov	r6,r2
   490b4:	004ba340 	call	4ba34 <__muldf3>
   490b8:	843fffc4 	addi	r16,r16,-1
   490bc:	1011883a 	mov	r8,r2
   490c0:	1813883a 	mov	r9,r3
   490c4:	803ff51e 	bne	r16,zero,4909c <_mprec_log10+0x50>
   490c8:	4005883a 	mov	r2,r8
   490cc:	4807883a 	mov	r3,r9
   490d0:	dfc00117 	ldw	ra,4(sp)
   490d4:	dc000017 	ldw	r16,0(sp)
   490d8:	dec00204 	addi	sp,sp,8
   490dc:	f800283a 	ret

000490e0 <__copybits>:
   490e0:	297fffc4 	addi	r5,r5,-1
   490e4:	30800417 	ldw	r2,16(r6)
   490e8:	280bd17a 	srai	r5,r5,5
   490ec:	31800504 	addi	r6,r6,20
   490f0:	1085883a 	add	r2,r2,r2
   490f4:	294b883a 	add	r5,r5,r5
   490f8:	294b883a 	add	r5,r5,r5
   490fc:	1085883a 	add	r2,r2,r2
   49100:	290b883a 	add	r5,r5,r4
   49104:	3087883a 	add	r3,r6,r2
   49108:	29400104 	addi	r5,r5,4
   4910c:	30c0052e 	bgeu	r6,r3,49124 <__copybits+0x44>
   49110:	30800017 	ldw	r2,0(r6)
   49114:	31800104 	addi	r6,r6,4
   49118:	20800015 	stw	r2,0(r4)
   4911c:	21000104 	addi	r4,r4,4
   49120:	30fffb36 	bltu	r6,r3,49110 <__copybits+0x30>
   49124:	2140032e 	bgeu	r4,r5,49134 <__copybits+0x54>
   49128:	20000015 	stw	zero,0(r4)
   4912c:	21000104 	addi	r4,r4,4
   49130:	217ffd36 	bltu	r4,r5,49128 <__copybits+0x48>
   49134:	f800283a 	ret

00049138 <__any_on>:
   49138:	20800417 	ldw	r2,16(r4)
   4913c:	2807d17a 	srai	r3,r5,5
   49140:	21000504 	addi	r4,r4,20
   49144:	10c00d0e 	bge	r2,r3,4917c <__any_on+0x44>
   49148:	1085883a 	add	r2,r2,r2
   4914c:	1085883a 	add	r2,r2,r2
   49150:	208d883a 	add	r6,r4,r2
   49154:	2180182e 	bgeu	r4,r6,491b8 <__any_on+0x80>
   49158:	30bfff17 	ldw	r2,-4(r6)
   4915c:	30ffff04 	addi	r3,r6,-4
   49160:	1000041e 	bne	r2,zero,49174 <__any_on+0x3c>
   49164:	20c0142e 	bgeu	r4,r3,491b8 <__any_on+0x80>
   49168:	18ffff04 	addi	r3,r3,-4
   4916c:	18800017 	ldw	r2,0(r3)
   49170:	103ffc26 	beq	r2,zero,49164 <__any_on+0x2c>
   49174:	00800044 	movi	r2,1
   49178:	f800283a 	ret
   4917c:	18800a0e 	bge	r3,r2,491a8 <__any_on+0x70>
   49180:	294007cc 	andi	r5,r5,31
   49184:	28000826 	beq	r5,zero,491a8 <__any_on+0x70>
   49188:	18c5883a 	add	r2,r3,r3
   4918c:	1085883a 	add	r2,r2,r2
   49190:	208d883a 	add	r6,r4,r2
   49194:	30c00017 	ldw	r3,0(r6)
   49198:	1944d83a 	srl	r2,r3,r5
   4919c:	1144983a 	sll	r2,r2,r5
   491a0:	18bff41e 	bne	r3,r2,49174 <__any_on+0x3c>
   491a4:	003feb06 	br	49154 <__any_on+0x1c>
   491a8:	18c5883a 	add	r2,r3,r3
   491ac:	1085883a 	add	r2,r2,r2
   491b0:	208d883a 	add	r6,r4,r2
   491b4:	003fe706 	br	49154 <__any_on+0x1c>
   491b8:	0005883a 	mov	r2,zero
   491bc:	f800283a 	ret

000491c0 <_Balloc>:
   491c0:	20c01317 	ldw	r3,76(r4)
   491c4:	defffb04 	addi	sp,sp,-20
   491c8:	dcc00315 	stw	r19,12(sp)
   491cc:	dc800215 	stw	r18,8(sp)
   491d0:	dfc00415 	stw	ra,16(sp)
   491d4:	2825883a 	mov	r18,r5
   491d8:	dc400115 	stw	r17,4(sp)
   491dc:	dc000015 	stw	r16,0(sp)
   491e0:	2027883a 	mov	r19,r4
   491e4:	01800404 	movi	r6,16
   491e8:	01400104 	movi	r5,4
   491ec:	18001726 	beq	r3,zero,4924c <_Balloc+0x8c>
   491f0:	01400044 	movi	r5,1
   491f4:	9485883a 	add	r2,r18,r18
   491f8:	2ca2983a 	sll	r17,r5,r18
   491fc:	1085883a 	add	r2,r2,r2
   49200:	10c7883a 	add	r3,r2,r3
   49204:	1c000017 	ldw	r16,0(r3)
   49208:	8c4d883a 	add	r6,r17,r17
   4920c:	318d883a 	add	r6,r6,r6
   49210:	9809883a 	mov	r4,r19
   49214:	31800504 	addi	r6,r6,20
   49218:	80001226 	beq	r16,zero,49264 <_Balloc+0xa4>
   4921c:	80800017 	ldw	r2,0(r16)
   49220:	18800015 	stw	r2,0(r3)
   49224:	80000415 	stw	zero,16(r16)
   49228:	80000315 	stw	zero,12(r16)
   4922c:	8005883a 	mov	r2,r16
   49230:	dfc00417 	ldw	ra,16(sp)
   49234:	dcc00317 	ldw	r19,12(sp)
   49238:	dc800217 	ldw	r18,8(sp)
   4923c:	dc400117 	ldw	r17,4(sp)
   49240:	dc000017 	ldw	r16,0(sp)
   49244:	dec00504 	addi	sp,sp,20
   49248:	f800283a 	ret
   4924c:	004a5880 	call	4a588 <_calloc_r>
   49250:	1007883a 	mov	r3,r2
   49254:	0021883a 	mov	r16,zero
   49258:	98801315 	stw	r2,76(r19)
   4925c:	103fe41e 	bne	r2,zero,491f0 <_Balloc+0x30>
   49260:	003ff206 	br	4922c <_Balloc+0x6c>
   49264:	004a5880 	call	4a588 <_calloc_r>
   49268:	103ff026 	beq	r2,zero,4922c <_Balloc+0x6c>
   4926c:	1021883a 	mov	r16,r2
   49270:	14800115 	stw	r18,4(r2)
   49274:	14400215 	stw	r17,8(r2)
   49278:	003fea06 	br	49224 <_Balloc+0x64>

0004927c <__d2b>:
   4927c:	defff504 	addi	sp,sp,-44
   49280:	dcc00515 	stw	r19,20(sp)
   49284:	04c00044 	movi	r19,1
   49288:	dc000215 	stw	r16,8(sp)
   4928c:	2821883a 	mov	r16,r5
   49290:	980b883a 	mov	r5,r19
   49294:	ddc00915 	stw	r23,36(sp)
   49298:	dd800815 	stw	r22,32(sp)
   4929c:	dd400715 	stw	r21,28(sp)
   492a0:	dd000615 	stw	r20,24(sp)
   492a4:	dc800415 	stw	r18,16(sp)
   492a8:	dc400315 	stw	r17,12(sp)
   492ac:	dfc00a15 	stw	ra,40(sp)
   492b0:	3023883a 	mov	r17,r6
   492b4:	382d883a 	mov	r22,r7
   492b8:	ddc00b17 	ldw	r23,44(sp)
   492bc:	00491c00 	call	491c0 <_Balloc>
   492c0:	1025883a 	mov	r18,r2
   492c4:	00a00034 	movhi	r2,32768
   492c8:	10bfffc4 	addi	r2,r2,-1
   492cc:	8888703a 	and	r4,r17,r2
   492d0:	202ad53a 	srli	r21,r4,20
   492d4:	00800434 	movhi	r2,16
   492d8:	10bfffc4 	addi	r2,r2,-1
   492dc:	8886703a 	and	r3,r17,r2
   492e0:	a829003a 	cmpeq	r20,r21,zero
   492e4:	800b883a 	mov	r5,r16
   492e8:	d8c00115 	stw	r3,4(sp)
   492ec:	94000504 	addi	r16,r18,20
   492f0:	a000021e 	bne	r20,zero,492fc <__d2b+0x80>
   492f4:	18c00434 	orhi	r3,r3,16
   492f8:	d8c00115 	stw	r3,4(sp)
   492fc:	28002726 	beq	r5,zero,4939c <__d2b+0x120>
   49300:	d809883a 	mov	r4,sp
   49304:	d9400015 	stw	r5,0(sp)
   49308:	0048cd80 	call	48cd8 <__lo0bits>
   4930c:	100d883a 	mov	r6,r2
   49310:	10003526 	beq	r2,zero,493e8 <__d2b+0x16c>
   49314:	d8c00117 	ldw	r3,4(sp)
   49318:	00800804 	movi	r2,32
   4931c:	1185c83a 	sub	r2,r2,r6
   49320:	d9000017 	ldw	r4,0(sp)
   49324:	1886983a 	sll	r3,r3,r2
   49328:	1906b03a 	or	r3,r3,r4
   4932c:	90c00515 	stw	r3,20(r18)
   49330:	d8c00117 	ldw	r3,4(sp)
   49334:	1986d83a 	srl	r3,r3,r6
   49338:	d8c00115 	stw	r3,4(sp)
   4933c:	180b003a 	cmpeq	r5,r3,zero
   49340:	00800084 	movi	r2,2
   49344:	114bc83a 	sub	r5,r2,r5
   49348:	80c00115 	stw	r3,4(r16)
   4934c:	91400415 	stw	r5,16(r18)
   49350:	a0001a1e 	bne	r20,zero,493bc <__d2b+0x140>
   49354:	3545883a 	add	r2,r6,r21
   49358:	10bef344 	addi	r2,r2,-1075
   4935c:	00c00d44 	movi	r3,53
   49360:	b0800015 	stw	r2,0(r22)
   49364:	1987c83a 	sub	r3,r3,r6
   49368:	b8c00015 	stw	r3,0(r23)
   4936c:	9005883a 	mov	r2,r18
   49370:	dfc00a17 	ldw	ra,40(sp)
   49374:	ddc00917 	ldw	r23,36(sp)
   49378:	dd800817 	ldw	r22,32(sp)
   4937c:	dd400717 	ldw	r21,28(sp)
   49380:	dd000617 	ldw	r20,24(sp)
   49384:	dcc00517 	ldw	r19,20(sp)
   49388:	dc800417 	ldw	r18,16(sp)
   4938c:	dc400317 	ldw	r17,12(sp)
   49390:	dc000217 	ldw	r16,8(sp)
   49394:	dec00b04 	addi	sp,sp,44
   49398:	f800283a 	ret
   4939c:	d9000104 	addi	r4,sp,4
   493a0:	0048cd80 	call	48cd8 <__lo0bits>
   493a4:	11800804 	addi	r6,r2,32
   493a8:	d8800117 	ldw	r2,4(sp)
   493ac:	94c00415 	stw	r19,16(r18)
   493b0:	980b883a 	mov	r5,r19
   493b4:	90800515 	stw	r2,20(r18)
   493b8:	a03fe626 	beq	r20,zero,49354 <__d2b+0xd8>
   493bc:	2945883a 	add	r2,r5,r5
   493c0:	1085883a 	add	r2,r2,r2
   493c4:	1405883a 	add	r2,r2,r16
   493c8:	113fff17 	ldw	r4,-4(r2)
   493cc:	30fef384 	addi	r3,r6,-1074
   493d0:	2820917a 	slli	r16,r5,5
   493d4:	b0c00015 	stw	r3,0(r22)
   493d8:	0048c680 	call	48c68 <__hi0bits>
   493dc:	80a1c83a 	sub	r16,r16,r2
   493e0:	bc000015 	stw	r16,0(r23)
   493e4:	003fe106 	br	4936c <__d2b+0xf0>
   493e8:	d8800017 	ldw	r2,0(sp)
   493ec:	90800515 	stw	r2,20(r18)
   493f0:	d8c00117 	ldw	r3,4(sp)
   493f4:	003fd106 	br	4933c <__d2b+0xc0>

000493f8 <__mdiff>:
   493f8:	defffb04 	addi	sp,sp,-20
   493fc:	dc000015 	stw	r16,0(sp)
   49400:	2821883a 	mov	r16,r5
   49404:	dc800215 	stw	r18,8(sp)
   49408:	300b883a 	mov	r5,r6
   4940c:	2025883a 	mov	r18,r4
   49410:	8009883a 	mov	r4,r16
   49414:	dc400115 	stw	r17,4(sp)
   49418:	dfc00415 	stw	ra,16(sp)
   4941c:	dcc00315 	stw	r19,12(sp)
   49420:	3023883a 	mov	r17,r6
   49424:	0048d9c0 	call	48d9c <__mcmp>
   49428:	10004226 	beq	r2,zero,49534 <__mdiff+0x13c>
   4942c:	10005016 	blt	r2,zero,49570 <__mdiff+0x178>
   49430:	0027883a 	mov	r19,zero
   49434:	81400117 	ldw	r5,4(r16)
   49438:	9009883a 	mov	r4,r18
   4943c:	00491c00 	call	491c0 <_Balloc>
   49440:	1019883a 	mov	r12,r2
   49444:	82800417 	ldw	r10,16(r16)
   49448:	88800417 	ldw	r2,16(r17)
   4944c:	81800504 	addi	r6,r16,20
   49450:	5287883a 	add	r3,r10,r10
   49454:	1085883a 	add	r2,r2,r2
   49458:	18c7883a 	add	r3,r3,r3
   4945c:	1085883a 	add	r2,r2,r2
   49460:	8a000504 	addi	r8,r17,20
   49464:	64c00315 	stw	r19,12(r12)
   49468:	30db883a 	add	r13,r6,r3
   4946c:	4097883a 	add	r11,r8,r2
   49470:	61c00504 	addi	r7,r12,20
   49474:	0013883a 	mov	r9,zero
   49478:	31000017 	ldw	r4,0(r6)
   4947c:	41400017 	ldw	r5,0(r8)
   49480:	42000104 	addi	r8,r8,4
   49484:	20bfffcc 	andi	r2,r4,65535
   49488:	28ffffcc 	andi	r3,r5,65535
   4948c:	10c5c83a 	sub	r2,r2,r3
   49490:	1245883a 	add	r2,r2,r9
   49494:	2008d43a 	srli	r4,r4,16
   49498:	280ad43a 	srli	r5,r5,16
   4949c:	1007d43a 	srai	r3,r2,16
   494a0:	3880000d 	sth	r2,0(r7)
   494a4:	2149c83a 	sub	r4,r4,r5
   494a8:	20c9883a 	add	r4,r4,r3
   494ac:	3900008d 	sth	r4,2(r7)
   494b0:	31800104 	addi	r6,r6,4
   494b4:	39c00104 	addi	r7,r7,4
   494b8:	2013d43a 	srai	r9,r4,16
   494bc:	42ffee36 	bltu	r8,r11,49478 <__mdiff+0x80>
   494c0:	33400c2e 	bgeu	r6,r13,494f4 <__mdiff+0xfc>
   494c4:	30800017 	ldw	r2,0(r6)
   494c8:	31800104 	addi	r6,r6,4
   494cc:	10ffffcc 	andi	r3,r2,65535
   494d0:	1a47883a 	add	r3,r3,r9
   494d4:	1004d43a 	srli	r2,r2,16
   494d8:	1809d43a 	srai	r4,r3,16
   494dc:	38c0000d 	sth	r3,0(r7)
   494e0:	1105883a 	add	r2,r2,r4
   494e4:	3880008d 	sth	r2,2(r7)
   494e8:	1013d43a 	srai	r9,r2,16
   494ec:	39c00104 	addi	r7,r7,4
   494f0:	337ff436 	bltu	r6,r13,494c4 <__mdiff+0xcc>
   494f4:	38bfff17 	ldw	r2,-4(r7)
   494f8:	38ffff04 	addi	r3,r7,-4
   494fc:	1000041e 	bne	r2,zero,49510 <__mdiff+0x118>
   49500:	18ffff04 	addi	r3,r3,-4
   49504:	18800017 	ldw	r2,0(r3)
   49508:	52bfffc4 	addi	r10,r10,-1
   4950c:	103ffc26 	beq	r2,zero,49500 <__mdiff+0x108>
   49510:	6005883a 	mov	r2,r12
   49514:	62800415 	stw	r10,16(r12)
   49518:	dfc00417 	ldw	ra,16(sp)
   4951c:	dcc00317 	ldw	r19,12(sp)
   49520:	dc800217 	ldw	r18,8(sp)
   49524:	dc400117 	ldw	r17,4(sp)
   49528:	dc000017 	ldw	r16,0(sp)
   4952c:	dec00504 	addi	sp,sp,20
   49530:	f800283a 	ret
   49534:	9009883a 	mov	r4,r18
   49538:	000b883a 	mov	r5,zero
   4953c:	00491c00 	call	491c0 <_Balloc>
   49540:	1019883a 	mov	r12,r2
   49544:	00800044 	movi	r2,1
   49548:	60800415 	stw	r2,16(r12)
   4954c:	6005883a 	mov	r2,r12
   49550:	60000515 	stw	zero,20(r12)
   49554:	dfc00417 	ldw	ra,16(sp)
   49558:	dcc00317 	ldw	r19,12(sp)
   4955c:	dc800217 	ldw	r18,8(sp)
   49560:	dc400117 	ldw	r17,4(sp)
   49564:	dc000017 	ldw	r16,0(sp)
   49568:	dec00504 	addi	sp,sp,20
   4956c:	f800283a 	ret
   49570:	880d883a 	mov	r6,r17
   49574:	04c00044 	movi	r19,1
   49578:	8023883a 	mov	r17,r16
   4957c:	3021883a 	mov	r16,r6
   49580:	003fac06 	br	49434 <__mdiff+0x3c>

00049584 <__lshift>:
   49584:	defff904 	addi	sp,sp,-28
   49588:	28800417 	ldw	r2,16(r5)
   4958c:	dc000015 	stw	r16,0(sp)
   49590:	3021d17a 	srai	r16,r6,5
   49594:	28c00217 	ldw	r3,8(r5)
   49598:	10800044 	addi	r2,r2,1
   4959c:	dc400115 	stw	r17,4(sp)
   495a0:	80a3883a 	add	r17,r16,r2
   495a4:	dd400515 	stw	r21,20(sp)
   495a8:	dd000415 	stw	r20,16(sp)
   495ac:	dc800215 	stw	r18,8(sp)
   495b0:	dfc00615 	stw	ra,24(sp)
   495b4:	2825883a 	mov	r18,r5
   495b8:	dcc00315 	stw	r19,12(sp)
   495bc:	3029883a 	mov	r20,r6
   495c0:	202b883a 	mov	r21,r4
   495c4:	29400117 	ldw	r5,4(r5)
   495c8:	1c40030e 	bge	r3,r17,495d8 <__lshift+0x54>
   495cc:	18c7883a 	add	r3,r3,r3
   495d0:	29400044 	addi	r5,r5,1
   495d4:	1c7ffd16 	blt	r3,r17,495cc <__lshift+0x48>
   495d8:	a809883a 	mov	r4,r21
   495dc:	00491c00 	call	491c0 <_Balloc>
   495e0:	1027883a 	mov	r19,r2
   495e4:	11400504 	addi	r5,r2,20
   495e8:	0400090e 	bge	zero,r16,49610 <__lshift+0x8c>
   495ec:	2805883a 	mov	r2,r5
   495f0:	0007883a 	mov	r3,zero
   495f4:	18c00044 	addi	r3,r3,1
   495f8:	10000015 	stw	zero,0(r2)
   495fc:	10800104 	addi	r2,r2,4
   49600:	80fffc1e 	bne	r16,r3,495f4 <__lshift+0x70>
   49604:	8405883a 	add	r2,r16,r16
   49608:	1085883a 	add	r2,r2,r2
   4960c:	288b883a 	add	r5,r5,r2
   49610:	90800417 	ldw	r2,16(r18)
   49614:	91000504 	addi	r4,r18,20
   49618:	a18007cc 	andi	r6,r20,31
   4961c:	1085883a 	add	r2,r2,r2
   49620:	1085883a 	add	r2,r2,r2
   49624:	208f883a 	add	r7,r4,r2
   49628:	30001e26 	beq	r6,zero,496a4 <__lshift+0x120>
   4962c:	00800804 	movi	r2,32
   49630:	1191c83a 	sub	r8,r2,r6
   49634:	0007883a 	mov	r3,zero
   49638:	20800017 	ldw	r2,0(r4)
   4963c:	1184983a 	sll	r2,r2,r6
   49640:	1884b03a 	or	r2,r3,r2
   49644:	28800015 	stw	r2,0(r5)
   49648:	20c00017 	ldw	r3,0(r4)
   4964c:	21000104 	addi	r4,r4,4
   49650:	29400104 	addi	r5,r5,4
   49654:	1a06d83a 	srl	r3,r3,r8
   49658:	21fff736 	bltu	r4,r7,49638 <__lshift+0xb4>
   4965c:	28c00015 	stw	r3,0(r5)
   49660:	18000126 	beq	r3,zero,49668 <__lshift+0xe4>
   49664:	8c400044 	addi	r17,r17,1
   49668:	88bfffc4 	addi	r2,r17,-1
   4966c:	98800415 	stw	r2,16(r19)
   49670:	a809883a 	mov	r4,r21
   49674:	900b883a 	mov	r5,r18
   49678:	0048c400 	call	48c40 <_Bfree>
   4967c:	9805883a 	mov	r2,r19
   49680:	dfc00617 	ldw	ra,24(sp)
   49684:	dd400517 	ldw	r21,20(sp)
   49688:	dd000417 	ldw	r20,16(sp)
   4968c:	dcc00317 	ldw	r19,12(sp)
   49690:	dc800217 	ldw	r18,8(sp)
   49694:	dc400117 	ldw	r17,4(sp)
   49698:	dc000017 	ldw	r16,0(sp)
   4969c:	dec00704 	addi	sp,sp,28
   496a0:	f800283a 	ret
   496a4:	20800017 	ldw	r2,0(r4)
   496a8:	21000104 	addi	r4,r4,4
   496ac:	28800015 	stw	r2,0(r5)
   496b0:	29400104 	addi	r5,r5,4
   496b4:	21ffec2e 	bgeu	r4,r7,49668 <__lshift+0xe4>
   496b8:	20800017 	ldw	r2,0(r4)
   496bc:	21000104 	addi	r4,r4,4
   496c0:	28800015 	stw	r2,0(r5)
   496c4:	29400104 	addi	r5,r5,4
   496c8:	21fff636 	bltu	r4,r7,496a4 <__lshift+0x120>
   496cc:	003fe606 	br	49668 <__lshift+0xe4>

000496d0 <__multiply>:
   496d0:	defff904 	addi	sp,sp,-28
   496d4:	dcc00315 	stw	r19,12(sp)
   496d8:	dc800215 	stw	r18,8(sp)
   496dc:	2cc00417 	ldw	r19,16(r5)
   496e0:	34800417 	ldw	r18,16(r6)
   496e4:	dd000415 	stw	r20,16(sp)
   496e8:	dc400115 	stw	r17,4(sp)
   496ec:	dfc00615 	stw	ra,24(sp)
   496f0:	dd400515 	stw	r21,20(sp)
   496f4:	dc000015 	stw	r16,0(sp)
   496f8:	2823883a 	mov	r17,r5
   496fc:	3029883a 	mov	r20,r6
   49700:	9c80040e 	bge	r19,r18,49714 <__multiply+0x44>
   49704:	9027883a 	mov	r19,r18
   49708:	2c800417 	ldw	r18,16(r5)
   4970c:	2829883a 	mov	r20,r5
   49710:	3023883a 	mov	r17,r6
   49714:	88800217 	ldw	r2,8(r17)
   49718:	9ca1883a 	add	r16,r19,r18
   4971c:	89400117 	ldw	r5,4(r17)
   49720:	1400010e 	bge	r2,r16,49728 <__multiply+0x58>
   49724:	29400044 	addi	r5,r5,1
   49728:	00491c00 	call	491c0 <_Balloc>
   4972c:	102b883a 	mov	r21,r2
   49730:	8405883a 	add	r2,r16,r16
   49734:	1085883a 	add	r2,r2,r2
   49738:	a9000504 	addi	r4,r21,20
   4973c:	209d883a 	add	r14,r4,r2
   49740:	2380042e 	bgeu	r4,r14,49754 <__multiply+0x84>
   49744:	2005883a 	mov	r2,r4
   49748:	10000015 	stw	zero,0(r2)
   4974c:	10800104 	addi	r2,r2,4
   49750:	13bffd36 	bltu	r2,r14,49748 <__multiply+0x78>
   49754:	9485883a 	add	r2,r18,r18
   49758:	9cc7883a 	add	r3,r19,r19
   4975c:	a1800504 	addi	r6,r20,20
   49760:	1085883a 	add	r2,r2,r2
   49764:	8b400504 	addi	r13,r17,20
   49768:	18c7883a 	add	r3,r3,r3
   4976c:	309f883a 	add	r15,r6,r2
   49770:	68d7883a 	add	r11,r13,r3
   49774:	33c03b2e 	bgeu	r6,r15,49864 <__multiply+0x194>
   49778:	2019883a 	mov	r12,r4
   4977c:	30800017 	ldw	r2,0(r6)
   49780:	127fffcc 	andi	r9,r2,65535
   49784:	48001826 	beq	r9,zero,497e8 <__multiply+0x118>
   49788:	6811883a 	mov	r8,r13
   4978c:	600f883a 	mov	r7,r12
   49790:	0015883a 	mov	r10,zero
   49794:	40c00017 	ldw	r3,0(r8)
   49798:	39400017 	ldw	r5,0(r7)
   4979c:	42000104 	addi	r8,r8,4
   497a0:	193fffcc 	andi	r4,r3,65535
   497a4:	4909383a 	mul	r4,r9,r4
   497a8:	1806d43a 	srli	r3,r3,16
   497ac:	28bfffcc 	andi	r2,r5,65535
   497b0:	5085883a 	add	r2,r10,r2
   497b4:	2089883a 	add	r4,r4,r2
   497b8:	48c7383a 	mul	r3,r9,r3
   497bc:	280ad43a 	srli	r5,r5,16
   497c0:	2004d43a 	srli	r2,r4,16
   497c4:	3900000d 	sth	r4,0(r7)
   497c8:	1947883a 	add	r3,r3,r5
   497cc:	10c5883a 	add	r2,r2,r3
   497d0:	3880008d 	sth	r2,2(r7)
   497d4:	1014d43a 	srli	r10,r2,16
   497d8:	39c00104 	addi	r7,r7,4
   497dc:	42ffed36 	bltu	r8,r11,49794 <__multiply+0xc4>
   497e0:	3a800015 	stw	r10,0(r7)
   497e4:	30800017 	ldw	r2,0(r6)
   497e8:	1012d43a 	srli	r9,r2,16
   497ec:	48001926 	beq	r9,zero,49854 <__multiply+0x184>
   497f0:	60800017 	ldw	r2,0(r12)
   497f4:	6811883a 	mov	r8,r13
   497f8:	600f883a 	mov	r7,r12
   497fc:	0015883a 	mov	r10,zero
   49800:	100b883a 	mov	r5,r2
   49804:	41000017 	ldw	r4,0(r8)
   49808:	2806d43a 	srli	r3,r5,16
   4980c:	3880000d 	sth	r2,0(r7)
   49810:	20bfffcc 	andi	r2,r4,65535
   49814:	4885383a 	mul	r2,r9,r2
   49818:	50c7883a 	add	r3,r10,r3
   4981c:	2008d43a 	srli	r4,r4,16
   49820:	10c5883a 	add	r2,r2,r3
   49824:	3880008d 	sth	r2,2(r7)
   49828:	39c00104 	addi	r7,r7,4
   4982c:	39400017 	ldw	r5,0(r7)
   49830:	4909383a 	mul	r4,r9,r4
   49834:	1004d43a 	srli	r2,r2,16
   49838:	28ffffcc 	andi	r3,r5,65535
   4983c:	20c9883a 	add	r4,r4,r3
   49840:	1105883a 	add	r2,r2,r4
   49844:	42000104 	addi	r8,r8,4
   49848:	1014d43a 	srli	r10,r2,16
   4984c:	42ffed36 	bltu	r8,r11,49804 <__multiply+0x134>
   49850:	38800015 	stw	r2,0(r7)
   49854:	31800104 	addi	r6,r6,4
   49858:	33c0022e 	bgeu	r6,r15,49864 <__multiply+0x194>
   4985c:	63000104 	addi	r12,r12,4
   49860:	003fc606 	br	4977c <__multiply+0xac>
   49864:	0400090e 	bge	zero,r16,4988c <__multiply+0x1bc>
   49868:	70bfff17 	ldw	r2,-4(r14)
   4986c:	70ffff04 	addi	r3,r14,-4
   49870:	10000326 	beq	r2,zero,49880 <__multiply+0x1b0>
   49874:	00000506 	br	4988c <__multiply+0x1bc>
   49878:	18800017 	ldw	r2,0(r3)
   4987c:	1000031e 	bne	r2,zero,4988c <__multiply+0x1bc>
   49880:	843fffc4 	addi	r16,r16,-1
   49884:	18ffff04 	addi	r3,r3,-4
   49888:	803ffb1e 	bne	r16,zero,49878 <__multiply+0x1a8>
   4988c:	a805883a 	mov	r2,r21
   49890:	ac000415 	stw	r16,16(r21)
   49894:	dfc00617 	ldw	ra,24(sp)
   49898:	dd400517 	ldw	r21,20(sp)
   4989c:	dd000417 	ldw	r20,16(sp)
   498a0:	dcc00317 	ldw	r19,12(sp)
   498a4:	dc800217 	ldw	r18,8(sp)
   498a8:	dc400117 	ldw	r17,4(sp)
   498ac:	dc000017 	ldw	r16,0(sp)
   498b0:	dec00704 	addi	sp,sp,28
   498b4:	f800283a 	ret

000498b8 <__i2b>:
   498b8:	defffd04 	addi	sp,sp,-12
   498bc:	dc000015 	stw	r16,0(sp)
   498c0:	04000044 	movi	r16,1
   498c4:	dc800115 	stw	r18,4(sp)
   498c8:	2825883a 	mov	r18,r5
   498cc:	800b883a 	mov	r5,r16
   498d0:	dfc00215 	stw	ra,8(sp)
   498d4:	00491c00 	call	491c0 <_Balloc>
   498d8:	14000415 	stw	r16,16(r2)
   498dc:	14800515 	stw	r18,20(r2)
   498e0:	dfc00217 	ldw	ra,8(sp)
   498e4:	dc800117 	ldw	r18,4(sp)
   498e8:	dc000017 	ldw	r16,0(sp)
   498ec:	dec00304 	addi	sp,sp,12
   498f0:	f800283a 	ret

000498f4 <__multadd>:
   498f4:	defffa04 	addi	sp,sp,-24
   498f8:	dc800215 	stw	r18,8(sp)
   498fc:	2c800417 	ldw	r18,16(r5)
   49900:	dd000415 	stw	r20,16(sp)
   49904:	dcc00315 	stw	r19,12(sp)
   49908:	dc000015 	stw	r16,0(sp)
   4990c:	dfc00515 	stw	ra,20(sp)
   49910:	3821883a 	mov	r16,r7
   49914:	dc400115 	stw	r17,4(sp)
   49918:	2827883a 	mov	r19,r5
   4991c:	2029883a 	mov	r20,r4
   49920:	2a000504 	addi	r8,r5,20
   49924:	000f883a 	mov	r7,zero
   49928:	40800017 	ldw	r2,0(r8)
   4992c:	39c00044 	addi	r7,r7,1
   49930:	10ffffcc 	andi	r3,r2,65535
   49934:	1987383a 	mul	r3,r3,r6
   49938:	1004d43a 	srli	r2,r2,16
   4993c:	1c07883a 	add	r3,r3,r16
   49940:	180ad43a 	srli	r5,r3,16
   49944:	1185383a 	mul	r2,r2,r6
   49948:	18ffffcc 	andi	r3,r3,65535
   4994c:	1145883a 	add	r2,r2,r5
   49950:	1008943a 	slli	r4,r2,16
   49954:	1020d43a 	srli	r16,r2,16
   49958:	20c9883a 	add	r4,r4,r3
   4995c:	41000015 	stw	r4,0(r8)
   49960:	42000104 	addi	r8,r8,4
   49964:	3cbff016 	blt	r7,r18,49928 <__multadd+0x34>
   49968:	80000826 	beq	r16,zero,4998c <__multadd+0x98>
   4996c:	98800217 	ldw	r2,8(r19)
   49970:	90800f0e 	bge	r18,r2,499b0 <__multadd+0xbc>
   49974:	9485883a 	add	r2,r18,r18
   49978:	1085883a 	add	r2,r2,r2
   4997c:	14c5883a 	add	r2,r2,r19
   49980:	90c00044 	addi	r3,r18,1
   49984:	14000515 	stw	r16,20(r2)
   49988:	98c00415 	stw	r3,16(r19)
   4998c:	9805883a 	mov	r2,r19
   49990:	dfc00517 	ldw	ra,20(sp)
   49994:	dd000417 	ldw	r20,16(sp)
   49998:	dcc00317 	ldw	r19,12(sp)
   4999c:	dc800217 	ldw	r18,8(sp)
   499a0:	dc400117 	ldw	r17,4(sp)
   499a4:	dc000017 	ldw	r16,0(sp)
   499a8:	dec00604 	addi	sp,sp,24
   499ac:	f800283a 	ret
   499b0:	99400117 	ldw	r5,4(r19)
   499b4:	a009883a 	mov	r4,r20
   499b8:	29400044 	addi	r5,r5,1
   499bc:	00491c00 	call	491c0 <_Balloc>
   499c0:	99800417 	ldw	r6,16(r19)
   499c4:	99400304 	addi	r5,r19,12
   499c8:	11000304 	addi	r4,r2,12
   499cc:	318d883a 	add	r6,r6,r6
   499d0:	318d883a 	add	r6,r6,r6
   499d4:	31800204 	addi	r6,r6,8
   499d8:	1023883a 	mov	r17,r2
   499dc:	0048a280 	call	48a28 <memcpy>
   499e0:	980b883a 	mov	r5,r19
   499e4:	a009883a 	mov	r4,r20
   499e8:	0048c400 	call	48c40 <_Bfree>
   499ec:	8827883a 	mov	r19,r17
   499f0:	003fe006 	br	49974 <__multadd+0x80>

000499f4 <__pow5mult>:
   499f4:	defffa04 	addi	sp,sp,-24
   499f8:	308000cc 	andi	r2,r6,3
   499fc:	dd000415 	stw	r20,16(sp)
   49a00:	dcc00315 	stw	r19,12(sp)
   49a04:	dc000015 	stw	r16,0(sp)
   49a08:	dfc00515 	stw	ra,20(sp)
   49a0c:	dc800215 	stw	r18,8(sp)
   49a10:	dc400115 	stw	r17,4(sp)
   49a14:	3021883a 	mov	r16,r6
   49a18:	2027883a 	mov	r19,r4
   49a1c:	2829883a 	mov	r20,r5
   49a20:	10002b1e 	bne	r2,zero,49ad0 <__pow5mult+0xdc>
   49a24:	8025d0ba 	srai	r18,r16,2
   49a28:	90001b26 	beq	r18,zero,49a98 <__pow5mult+0xa4>
   49a2c:	9c001217 	ldw	r16,72(r19)
   49a30:	8000081e 	bne	r16,zero,49a54 <__pow5mult+0x60>
   49a34:	00003006 	br	49af8 <__pow5mult+0x104>
   49a38:	800b883a 	mov	r5,r16
   49a3c:	800d883a 	mov	r6,r16
   49a40:	9809883a 	mov	r4,r19
   49a44:	90001426 	beq	r18,zero,49a98 <__pow5mult+0xa4>
   49a48:	80800017 	ldw	r2,0(r16)
   49a4c:	10001b26 	beq	r2,zero,49abc <__pow5mult+0xc8>
   49a50:	1021883a 	mov	r16,r2
   49a54:	9080004c 	andi	r2,r18,1
   49a58:	1005003a 	cmpeq	r2,r2,zero
   49a5c:	9025d07a 	srai	r18,r18,1
   49a60:	800d883a 	mov	r6,r16
   49a64:	9809883a 	mov	r4,r19
   49a68:	a00b883a 	mov	r5,r20
   49a6c:	103ff21e 	bne	r2,zero,49a38 <__pow5mult+0x44>
   49a70:	00496d00 	call	496d0 <__multiply>
   49a74:	a00b883a 	mov	r5,r20
   49a78:	9809883a 	mov	r4,r19
   49a7c:	1023883a 	mov	r17,r2
   49a80:	0048c400 	call	48c40 <_Bfree>
   49a84:	8829883a 	mov	r20,r17
   49a88:	800b883a 	mov	r5,r16
   49a8c:	800d883a 	mov	r6,r16
   49a90:	9809883a 	mov	r4,r19
   49a94:	903fec1e 	bne	r18,zero,49a48 <__pow5mult+0x54>
   49a98:	a005883a 	mov	r2,r20
   49a9c:	dfc00517 	ldw	ra,20(sp)
   49aa0:	dd000417 	ldw	r20,16(sp)
   49aa4:	dcc00317 	ldw	r19,12(sp)
   49aa8:	dc800217 	ldw	r18,8(sp)
   49aac:	dc400117 	ldw	r17,4(sp)
   49ab0:	dc000017 	ldw	r16,0(sp)
   49ab4:	dec00604 	addi	sp,sp,24
   49ab8:	f800283a 	ret
   49abc:	00496d00 	call	496d0 <__multiply>
   49ac0:	80800015 	stw	r2,0(r16)
   49ac4:	1021883a 	mov	r16,r2
   49ac8:	10000015 	stw	zero,0(r2)
   49acc:	003fe106 	br	49a54 <__pow5mult+0x60>
   49ad0:	1085883a 	add	r2,r2,r2
   49ad4:	00c00174 	movhi	r3,5
   49ad8:	18c00504 	addi	r3,r3,20
   49adc:	1085883a 	add	r2,r2,r2
   49ae0:	10c5883a 	add	r2,r2,r3
   49ae4:	11bfff17 	ldw	r6,-4(r2)
   49ae8:	000f883a 	mov	r7,zero
   49aec:	00498f40 	call	498f4 <__multadd>
   49af0:	1029883a 	mov	r20,r2
   49af4:	003fcb06 	br	49a24 <__pow5mult+0x30>
   49af8:	9809883a 	mov	r4,r19
   49afc:	01409c44 	movi	r5,625
   49b00:	00498b80 	call	498b8 <__i2b>
   49b04:	98801215 	stw	r2,72(r19)
   49b08:	1021883a 	mov	r16,r2
   49b0c:	10000015 	stw	zero,0(r2)
   49b10:	003fd006 	br	49a54 <__pow5mult+0x60>

00049b14 <__s2b>:
   49b14:	defff904 	addi	sp,sp,-28
   49b18:	dcc00315 	stw	r19,12(sp)
   49b1c:	dc800215 	stw	r18,8(sp)
   49b20:	2827883a 	mov	r19,r5
   49b24:	2025883a 	mov	r18,r4
   49b28:	01400244 	movi	r5,9
   49b2c:	39000204 	addi	r4,r7,8
   49b30:	dd000415 	stw	r20,16(sp)
   49b34:	dc400115 	stw	r17,4(sp)
   49b38:	dfc00615 	stw	ra,24(sp)
   49b3c:	dd400515 	stw	r21,20(sp)
   49b40:	dc000015 	stw	r16,0(sp)
   49b44:	3829883a 	mov	r20,r7
   49b48:	3023883a 	mov	r17,r6
   49b4c:	0042ef40 	call	42ef4 <__divsi3>
   49b50:	00c00044 	movi	r3,1
   49b54:	1880350e 	bge	r3,r2,49c2c <__s2b+0x118>
   49b58:	000b883a 	mov	r5,zero
   49b5c:	18c7883a 	add	r3,r3,r3
   49b60:	29400044 	addi	r5,r5,1
   49b64:	18bffd16 	blt	r3,r2,49b5c <__s2b+0x48>
   49b68:	9009883a 	mov	r4,r18
   49b6c:	00491c00 	call	491c0 <_Balloc>
   49b70:	1011883a 	mov	r8,r2
   49b74:	d8800717 	ldw	r2,28(sp)
   49b78:	00c00044 	movi	r3,1
   49b7c:	01800244 	movi	r6,9
   49b80:	40800515 	stw	r2,20(r8)
   49b84:	40c00415 	stw	r3,16(r8)
   49b88:	3440260e 	bge	r6,r17,49c24 <__s2b+0x110>
   49b8c:	3021883a 	mov	r16,r6
   49b90:	99ab883a 	add	r21,r19,r6
   49b94:	9c05883a 	add	r2,r19,r16
   49b98:	11c00007 	ldb	r7,0(r2)
   49b9c:	400b883a 	mov	r5,r8
   49ba0:	9009883a 	mov	r4,r18
   49ba4:	39fff404 	addi	r7,r7,-48
   49ba8:	01800284 	movi	r6,10
   49bac:	00498f40 	call	498f4 <__multadd>
   49bb0:	84000044 	addi	r16,r16,1
   49bb4:	1011883a 	mov	r8,r2
   49bb8:	8c3ff61e 	bne	r17,r16,49b94 <__s2b+0x80>
   49bbc:	ac45883a 	add	r2,r21,r17
   49bc0:	117ffe04 	addi	r5,r2,-8
   49bc4:	880d883a 	mov	r6,r17
   49bc8:	35000c0e 	bge	r6,r20,49bfc <__s2b+0xe8>
   49bcc:	a185c83a 	sub	r2,r20,r6
   49bd0:	2821883a 	mov	r16,r5
   49bd4:	28a3883a 	add	r17,r5,r2
   49bd8:	81c00007 	ldb	r7,0(r16)
   49bdc:	400b883a 	mov	r5,r8
   49be0:	9009883a 	mov	r4,r18
   49be4:	39fff404 	addi	r7,r7,-48
   49be8:	01800284 	movi	r6,10
   49bec:	00498f40 	call	498f4 <__multadd>
   49bf0:	84000044 	addi	r16,r16,1
   49bf4:	1011883a 	mov	r8,r2
   49bf8:	847ff71e 	bne	r16,r17,49bd8 <__s2b+0xc4>
   49bfc:	4005883a 	mov	r2,r8
   49c00:	dfc00617 	ldw	ra,24(sp)
   49c04:	dd400517 	ldw	r21,20(sp)
   49c08:	dd000417 	ldw	r20,16(sp)
   49c0c:	dcc00317 	ldw	r19,12(sp)
   49c10:	dc800217 	ldw	r18,8(sp)
   49c14:	dc400117 	ldw	r17,4(sp)
   49c18:	dc000017 	ldw	r16,0(sp)
   49c1c:	dec00704 	addi	sp,sp,28
   49c20:	f800283a 	ret
   49c24:	99400284 	addi	r5,r19,10
   49c28:	003fe706 	br	49bc8 <__s2b+0xb4>
   49c2c:	000b883a 	mov	r5,zero
   49c30:	003fcd06 	br	49b68 <__s2b+0x54>

00049c34 <_realloc_r>:
   49c34:	defff404 	addi	sp,sp,-48
   49c38:	dd800815 	stw	r22,32(sp)
   49c3c:	dc800415 	stw	r18,16(sp)
   49c40:	dc400315 	stw	r17,12(sp)
   49c44:	dfc00b15 	stw	ra,44(sp)
   49c48:	df000a15 	stw	fp,40(sp)
   49c4c:	ddc00915 	stw	r23,36(sp)
   49c50:	dd400715 	stw	r21,28(sp)
   49c54:	dd000615 	stw	r20,24(sp)
   49c58:	dcc00515 	stw	r19,20(sp)
   49c5c:	dc000215 	stw	r16,8(sp)
   49c60:	2825883a 	mov	r18,r5
   49c64:	3023883a 	mov	r17,r6
   49c68:	202d883a 	mov	r22,r4
   49c6c:	2800c926 	beq	r5,zero,49f94 <_realloc_r+0x360>
   49c70:	004d1200 	call	4d120 <__malloc_lock>
   49c74:	943ffe04 	addi	r16,r18,-8
   49c78:	88c002c4 	addi	r3,r17,11
   49c7c:	00800584 	movi	r2,22
   49c80:	82000117 	ldw	r8,4(r16)
   49c84:	10c01b2e 	bgeu	r2,r3,49cf4 <_realloc_r+0xc0>
   49c88:	00bffe04 	movi	r2,-8
   49c8c:	188e703a 	and	r7,r3,r2
   49c90:	3839883a 	mov	fp,r7
   49c94:	38001a16 	blt	r7,zero,49d00 <_realloc_r+0xcc>
   49c98:	e4401936 	bltu	fp,r17,49d00 <_realloc_r+0xcc>
   49c9c:	013fff04 	movi	r4,-4
   49ca0:	4126703a 	and	r19,r8,r4
   49ca4:	99c02616 	blt	r19,r7,49d40 <_realloc_r+0x10c>
   49ca8:	802b883a 	mov	r21,r16
   49cac:	9829883a 	mov	r20,r19
   49cb0:	84000204 	addi	r16,r16,8
   49cb4:	a80f883a 	mov	r7,r21
   49cb8:	a70dc83a 	sub	r6,r20,fp
   49cbc:	008003c4 	movi	r2,15
   49cc0:	1180c136 	bltu	r2,r6,49fc8 <_realloc_r+0x394>
   49cc4:	38800117 	ldw	r2,4(r7)
   49cc8:	a549883a 	add	r4,r20,r21
   49ccc:	1080004c 	andi	r2,r2,1
   49cd0:	a084b03a 	or	r2,r20,r2
   49cd4:	38800115 	stw	r2,4(r7)
   49cd8:	20c00117 	ldw	r3,4(r4)
   49cdc:	18c00054 	ori	r3,r3,1
   49ce0:	20c00115 	stw	r3,4(r4)
   49ce4:	b009883a 	mov	r4,r22
   49ce8:	004d1400 	call	4d140 <__malloc_unlock>
   49cec:	8023883a 	mov	r17,r16
   49cf0:	00000606 	br	49d0c <_realloc_r+0xd8>
   49cf4:	01c00404 	movi	r7,16
   49cf8:	3839883a 	mov	fp,r7
   49cfc:	e47fe72e 	bgeu	fp,r17,49c9c <_realloc_r+0x68>
   49d00:	00800304 	movi	r2,12
   49d04:	0023883a 	mov	r17,zero
   49d08:	b0800015 	stw	r2,0(r22)
   49d0c:	8805883a 	mov	r2,r17
   49d10:	dfc00b17 	ldw	ra,44(sp)
   49d14:	df000a17 	ldw	fp,40(sp)
   49d18:	ddc00917 	ldw	r23,36(sp)
   49d1c:	dd800817 	ldw	r22,32(sp)
   49d20:	dd400717 	ldw	r21,28(sp)
   49d24:	dd000617 	ldw	r20,24(sp)
   49d28:	dcc00517 	ldw	r19,20(sp)
   49d2c:	dc800417 	ldw	r18,16(sp)
   49d30:	dc400317 	ldw	r17,12(sp)
   49d34:	dc000217 	ldw	r16,8(sp)
   49d38:	dec00c04 	addi	sp,sp,48
   49d3c:	f800283a 	ret
   49d40:	00800174 	movhi	r2,5
   49d44:	10818304 	addi	r2,r2,1548
   49d48:	12400217 	ldw	r9,8(r2)
   49d4c:	84cd883a 	add	r6,r16,r19
   49d50:	802b883a 	mov	r21,r16
   49d54:	3240b926 	beq	r6,r9,4a03c <_realloc_r+0x408>
   49d58:	31400117 	ldw	r5,4(r6)
   49d5c:	00bfff84 	movi	r2,-2
   49d60:	2884703a 	and	r2,r5,r2
   49d64:	1185883a 	add	r2,r2,r6
   49d68:	10c00117 	ldw	r3,4(r2)
   49d6c:	18c0004c 	andi	r3,r3,1
   49d70:	1807003a 	cmpeq	r3,r3,zero
   49d74:	1800a326 	beq	r3,zero,4a004 <_realloc_r+0x3d0>
   49d78:	2908703a 	and	r4,r5,r4
   49d7c:	9929883a 	add	r20,r19,r4
   49d80:	a1c0a30e 	bge	r20,r7,4a010 <_realloc_r+0x3dc>
   49d84:	4080004c 	andi	r2,r8,1
   49d88:	1000551e 	bne	r2,zero,49ee0 <_realloc_r+0x2ac>
   49d8c:	80800017 	ldw	r2,0(r16)
   49d90:	80afc83a 	sub	r23,r16,r2
   49d94:	b8c00117 	ldw	r3,4(r23)
   49d98:	00bfff04 	movi	r2,-4
   49d9c:	1884703a 	and	r2,r3,r2
   49da0:	30002e26 	beq	r6,zero,49e5c <_realloc_r+0x228>
   49da4:	3240b926 	beq	r6,r9,4a08c <_realloc_r+0x458>
   49da8:	98a9883a 	add	r20,r19,r2
   49dac:	2509883a 	add	r4,r4,r20
   49db0:	d9000015 	stw	r4,0(sp)
   49db4:	21c02a16 	blt	r4,r7,49e60 <_realloc_r+0x22c>
   49db8:	30800317 	ldw	r2,12(r6)
   49dbc:	30c00217 	ldw	r3,8(r6)
   49dc0:	01400904 	movi	r5,36
   49dc4:	99bfff04 	addi	r6,r19,-4
   49dc8:	18800315 	stw	r2,12(r3)
   49dcc:	10c00215 	stw	r3,8(r2)
   49dd0:	b9000317 	ldw	r4,12(r23)
   49dd4:	b8800217 	ldw	r2,8(r23)
   49dd8:	b82b883a 	mov	r21,r23
   49ddc:	bc000204 	addi	r16,r23,8
   49de0:	20800215 	stw	r2,8(r4)
   49de4:	11000315 	stw	r4,12(r2)
   49de8:	2980e436 	bltu	r5,r6,4a17c <_realloc_r+0x548>
   49dec:	008004c4 	movi	r2,19
   49df0:	9009883a 	mov	r4,r18
   49df4:	8011883a 	mov	r8,r16
   49df8:	11800f2e 	bgeu	r2,r6,49e38 <_realloc_r+0x204>
   49dfc:	90800017 	ldw	r2,0(r18)
   49e00:	ba000404 	addi	r8,r23,16
   49e04:	91000204 	addi	r4,r18,8
   49e08:	b8800215 	stw	r2,8(r23)
   49e0c:	90c00117 	ldw	r3,4(r18)
   49e10:	008006c4 	movi	r2,27
   49e14:	b8c00315 	stw	r3,12(r23)
   49e18:	1180072e 	bgeu	r2,r6,49e38 <_realloc_r+0x204>
   49e1c:	90c00217 	ldw	r3,8(r18)
   49e20:	ba000604 	addi	r8,r23,24
   49e24:	91000404 	addi	r4,r18,16
   49e28:	b8c00415 	stw	r3,16(r23)
   49e2c:	90800317 	ldw	r2,12(r18)
   49e30:	b8800515 	stw	r2,20(r23)
   49e34:	3140e726 	beq	r6,r5,4a1d4 <_realloc_r+0x5a0>
   49e38:	20800017 	ldw	r2,0(r4)
   49e3c:	dd000017 	ldw	r20,0(sp)
   49e40:	b80f883a 	mov	r7,r23
   49e44:	40800015 	stw	r2,0(r8)
   49e48:	20c00117 	ldw	r3,4(r4)
   49e4c:	40c00115 	stw	r3,4(r8)
   49e50:	20800217 	ldw	r2,8(r4)
   49e54:	40800215 	stw	r2,8(r8)
   49e58:	003f9706 	br	49cb8 <_realloc_r+0x84>
   49e5c:	98a9883a 	add	r20,r19,r2
   49e60:	a1c01f16 	blt	r20,r7,49ee0 <_realloc_r+0x2ac>
   49e64:	b8c00317 	ldw	r3,12(r23)
   49e68:	b8800217 	ldw	r2,8(r23)
   49e6c:	99bfff04 	addi	r6,r19,-4
   49e70:	01400904 	movi	r5,36
   49e74:	b82b883a 	mov	r21,r23
   49e78:	18800215 	stw	r2,8(r3)
   49e7c:	10c00315 	stw	r3,12(r2)
   49e80:	bc000204 	addi	r16,r23,8
   49e84:	2980c336 	bltu	r5,r6,4a194 <_realloc_r+0x560>
   49e88:	008004c4 	movi	r2,19
   49e8c:	9009883a 	mov	r4,r18
   49e90:	8011883a 	mov	r8,r16
   49e94:	11800f2e 	bgeu	r2,r6,49ed4 <_realloc_r+0x2a0>
   49e98:	90800017 	ldw	r2,0(r18)
   49e9c:	ba000404 	addi	r8,r23,16
   49ea0:	91000204 	addi	r4,r18,8
   49ea4:	b8800215 	stw	r2,8(r23)
   49ea8:	90c00117 	ldw	r3,4(r18)
   49eac:	008006c4 	movi	r2,27
   49eb0:	b8c00315 	stw	r3,12(r23)
   49eb4:	1180072e 	bgeu	r2,r6,49ed4 <_realloc_r+0x2a0>
   49eb8:	90c00217 	ldw	r3,8(r18)
   49ebc:	ba000604 	addi	r8,r23,24
   49ec0:	91000404 	addi	r4,r18,16
   49ec4:	b8c00415 	stw	r3,16(r23)
   49ec8:	90800317 	ldw	r2,12(r18)
   49ecc:	b8800515 	stw	r2,20(r23)
   49ed0:	3140c726 	beq	r6,r5,4a1f0 <_realloc_r+0x5bc>
   49ed4:	20800017 	ldw	r2,0(r4)
   49ed8:	b80f883a 	mov	r7,r23
   49edc:	003fd906 	br	49e44 <_realloc_r+0x210>
   49ee0:	880b883a 	mov	r5,r17
   49ee4:	b009883a 	mov	r4,r22
   49ee8:	00482040 	call	48204 <_malloc_r>
   49eec:	1023883a 	mov	r17,r2
   49ef0:	10002526 	beq	r2,zero,49f88 <_realloc_r+0x354>
   49ef4:	80800117 	ldw	r2,4(r16)
   49ef8:	00ffff84 	movi	r3,-2
   49efc:	893ffe04 	addi	r4,r17,-8
   49f00:	10c4703a 	and	r2,r2,r3
   49f04:	8085883a 	add	r2,r16,r2
   49f08:	20809526 	beq	r4,r2,4a160 <_realloc_r+0x52c>
   49f0c:	99bfff04 	addi	r6,r19,-4
   49f10:	01c00904 	movi	r7,36
   49f14:	39804536 	bltu	r7,r6,4a02c <_realloc_r+0x3f8>
   49f18:	008004c4 	movi	r2,19
   49f1c:	9009883a 	mov	r4,r18
   49f20:	880b883a 	mov	r5,r17
   49f24:	11800f2e 	bgeu	r2,r6,49f64 <_realloc_r+0x330>
   49f28:	90800017 	ldw	r2,0(r18)
   49f2c:	89400204 	addi	r5,r17,8
   49f30:	91000204 	addi	r4,r18,8
   49f34:	88800015 	stw	r2,0(r17)
   49f38:	90c00117 	ldw	r3,4(r18)
   49f3c:	008006c4 	movi	r2,27
   49f40:	88c00115 	stw	r3,4(r17)
   49f44:	1180072e 	bgeu	r2,r6,49f64 <_realloc_r+0x330>
   49f48:	90c00217 	ldw	r3,8(r18)
   49f4c:	89400404 	addi	r5,r17,16
   49f50:	91000404 	addi	r4,r18,16
   49f54:	88c00215 	stw	r3,8(r17)
   49f58:	90800317 	ldw	r2,12(r18)
   49f5c:	88800315 	stw	r2,12(r17)
   49f60:	31c09126 	beq	r6,r7,4a1a8 <_realloc_r+0x574>
   49f64:	20800017 	ldw	r2,0(r4)
   49f68:	28800015 	stw	r2,0(r5)
   49f6c:	20c00117 	ldw	r3,4(r4)
   49f70:	28c00115 	stw	r3,4(r5)
   49f74:	20800217 	ldw	r2,8(r4)
   49f78:	28800215 	stw	r2,8(r5)
   49f7c:	900b883a 	mov	r5,r18
   49f80:	b009883a 	mov	r4,r22
   49f84:	004767c0 	call	4767c <_free_r>
   49f88:	b009883a 	mov	r4,r22
   49f8c:	004d1400 	call	4d140 <__malloc_unlock>
   49f90:	003f5e06 	br	49d0c <_realloc_r+0xd8>
   49f94:	300b883a 	mov	r5,r6
   49f98:	dfc00b17 	ldw	ra,44(sp)
   49f9c:	df000a17 	ldw	fp,40(sp)
   49fa0:	ddc00917 	ldw	r23,36(sp)
   49fa4:	dd800817 	ldw	r22,32(sp)
   49fa8:	dd400717 	ldw	r21,28(sp)
   49fac:	dd000617 	ldw	r20,24(sp)
   49fb0:	dcc00517 	ldw	r19,20(sp)
   49fb4:	dc800417 	ldw	r18,16(sp)
   49fb8:	dc400317 	ldw	r17,12(sp)
   49fbc:	dc000217 	ldw	r16,8(sp)
   49fc0:	dec00c04 	addi	sp,sp,48
   49fc4:	00482041 	jmpi	48204 <_malloc_r>
   49fc8:	38800117 	ldw	r2,4(r7)
   49fcc:	e54b883a 	add	r5,fp,r21
   49fd0:	31000054 	ori	r4,r6,1
   49fd4:	1080004c 	andi	r2,r2,1
   49fd8:	1704b03a 	or	r2,r2,fp
   49fdc:	38800115 	stw	r2,4(r7)
   49fe0:	29000115 	stw	r4,4(r5)
   49fe4:	2987883a 	add	r3,r5,r6
   49fe8:	18800117 	ldw	r2,4(r3)
   49fec:	29400204 	addi	r5,r5,8
   49ff0:	b009883a 	mov	r4,r22
   49ff4:	10800054 	ori	r2,r2,1
   49ff8:	18800115 	stw	r2,4(r3)
   49ffc:	004767c0 	call	4767c <_free_r>
   4a000:	003f3806 	br	49ce4 <_realloc_r+0xb0>
   4a004:	000d883a 	mov	r6,zero
   4a008:	0009883a 	mov	r4,zero
   4a00c:	003f5d06 	br	49d84 <_realloc_r+0x150>
   4a010:	30c00217 	ldw	r3,8(r6)
   4a014:	30800317 	ldw	r2,12(r6)
   4a018:	800f883a 	mov	r7,r16
   4a01c:	84000204 	addi	r16,r16,8
   4a020:	10c00215 	stw	r3,8(r2)
   4a024:	18800315 	stw	r2,12(r3)
   4a028:	003f2306 	br	49cb8 <_realloc_r+0x84>
   4a02c:	8809883a 	mov	r4,r17
   4a030:	900b883a 	mov	r5,r18
   4a034:	0048ac80 	call	48ac8 <memmove>
   4a038:	003fd006 	br	49f7c <_realloc_r+0x348>
   4a03c:	30800117 	ldw	r2,4(r6)
   4a040:	e0c00404 	addi	r3,fp,16
   4a044:	1108703a 	and	r4,r2,r4
   4a048:	9905883a 	add	r2,r19,r4
   4a04c:	10ff4d16 	blt	r2,r3,49d84 <_realloc_r+0x150>
   4a050:	1705c83a 	sub	r2,r2,fp
   4a054:	870b883a 	add	r5,r16,fp
   4a058:	10800054 	ori	r2,r2,1
   4a05c:	28800115 	stw	r2,4(r5)
   4a060:	80c00117 	ldw	r3,4(r16)
   4a064:	00800174 	movhi	r2,5
   4a068:	10818304 	addi	r2,r2,1548
   4a06c:	b009883a 	mov	r4,r22
   4a070:	18c0004c 	andi	r3,r3,1
   4a074:	e0c6b03a 	or	r3,fp,r3
   4a078:	11400215 	stw	r5,8(r2)
   4a07c:	80c00115 	stw	r3,4(r16)
   4a080:	004d1400 	call	4d140 <__malloc_unlock>
   4a084:	84400204 	addi	r17,r16,8
   4a088:	003f2006 	br	49d0c <_realloc_r+0xd8>
   4a08c:	98a9883a 	add	r20,r19,r2
   4a090:	2509883a 	add	r4,r4,r20
   4a094:	e0800404 	addi	r2,fp,16
   4a098:	d9000115 	stw	r4,4(sp)
   4a09c:	20bf7016 	blt	r4,r2,49e60 <_realloc_r+0x22c>
   4a0a0:	b8c00317 	ldw	r3,12(r23)
   4a0a4:	b8800217 	ldw	r2,8(r23)
   4a0a8:	99bfff04 	addi	r6,r19,-4
   4a0ac:	01400904 	movi	r5,36
   4a0b0:	18800215 	stw	r2,8(r3)
   4a0b4:	10c00315 	stw	r3,12(r2)
   4a0b8:	bc400204 	addi	r17,r23,8
   4a0bc:	29804136 	bltu	r5,r6,4a1c4 <_realloc_r+0x590>
   4a0c0:	008004c4 	movi	r2,19
   4a0c4:	9009883a 	mov	r4,r18
   4a0c8:	880f883a 	mov	r7,r17
   4a0cc:	11800f2e 	bgeu	r2,r6,4a10c <_realloc_r+0x4d8>
   4a0d0:	90800017 	ldw	r2,0(r18)
   4a0d4:	b9c00404 	addi	r7,r23,16
   4a0d8:	91000204 	addi	r4,r18,8
   4a0dc:	b8800215 	stw	r2,8(r23)
   4a0e0:	90c00117 	ldw	r3,4(r18)
   4a0e4:	008006c4 	movi	r2,27
   4a0e8:	b8c00315 	stw	r3,12(r23)
   4a0ec:	1180072e 	bgeu	r2,r6,4a10c <_realloc_r+0x4d8>
   4a0f0:	90c00217 	ldw	r3,8(r18)
   4a0f4:	b9c00604 	addi	r7,r23,24
   4a0f8:	91000404 	addi	r4,r18,16
   4a0fc:	b8c00415 	stw	r3,16(r23)
   4a100:	90800317 	ldw	r2,12(r18)
   4a104:	b8800515 	stw	r2,20(r23)
   4a108:	31404026 	beq	r6,r5,4a20c <_realloc_r+0x5d8>
   4a10c:	20800017 	ldw	r2,0(r4)
   4a110:	38800015 	stw	r2,0(r7)
   4a114:	20c00117 	ldw	r3,4(r4)
   4a118:	38c00115 	stw	r3,4(r7)
   4a11c:	20800217 	ldw	r2,8(r4)
   4a120:	38800215 	stw	r2,8(r7)
   4a124:	d8c00117 	ldw	r3,4(sp)
   4a128:	bf0b883a 	add	r5,r23,fp
   4a12c:	b009883a 	mov	r4,r22
   4a130:	1f05c83a 	sub	r2,r3,fp
   4a134:	10800054 	ori	r2,r2,1
   4a138:	28800115 	stw	r2,4(r5)
   4a13c:	b8c00117 	ldw	r3,4(r23)
   4a140:	00800174 	movhi	r2,5
   4a144:	10818304 	addi	r2,r2,1548
   4a148:	11400215 	stw	r5,8(r2)
   4a14c:	18c0004c 	andi	r3,r3,1
   4a150:	e0c6b03a 	or	r3,fp,r3
   4a154:	b8c00115 	stw	r3,4(r23)
   4a158:	004d1400 	call	4d140 <__malloc_unlock>
   4a15c:	003eeb06 	br	49d0c <_realloc_r+0xd8>
   4a160:	20800117 	ldw	r2,4(r4)
   4a164:	00ffff04 	movi	r3,-4
   4a168:	800f883a 	mov	r7,r16
   4a16c:	10c4703a 	and	r2,r2,r3
   4a170:	98a9883a 	add	r20,r19,r2
   4a174:	84000204 	addi	r16,r16,8
   4a178:	003ecf06 	br	49cb8 <_realloc_r+0x84>
   4a17c:	900b883a 	mov	r5,r18
   4a180:	8009883a 	mov	r4,r16
   4a184:	0048ac80 	call	48ac8 <memmove>
   4a188:	dd000017 	ldw	r20,0(sp)
   4a18c:	b80f883a 	mov	r7,r23
   4a190:	003ec906 	br	49cb8 <_realloc_r+0x84>
   4a194:	900b883a 	mov	r5,r18
   4a198:	8009883a 	mov	r4,r16
   4a19c:	0048ac80 	call	48ac8 <memmove>
   4a1a0:	b80f883a 	mov	r7,r23
   4a1a4:	003ec406 	br	49cb8 <_realloc_r+0x84>
   4a1a8:	90c00417 	ldw	r3,16(r18)
   4a1ac:	89400604 	addi	r5,r17,24
   4a1b0:	91000604 	addi	r4,r18,24
   4a1b4:	88c00415 	stw	r3,16(r17)
   4a1b8:	90800517 	ldw	r2,20(r18)
   4a1bc:	88800515 	stw	r2,20(r17)
   4a1c0:	003f6806 	br	49f64 <_realloc_r+0x330>
   4a1c4:	900b883a 	mov	r5,r18
   4a1c8:	8809883a 	mov	r4,r17
   4a1cc:	0048ac80 	call	48ac8 <memmove>
   4a1d0:	003fd406 	br	4a124 <_realloc_r+0x4f0>
   4a1d4:	90c00417 	ldw	r3,16(r18)
   4a1d8:	91000604 	addi	r4,r18,24
   4a1dc:	ba000804 	addi	r8,r23,32
   4a1e0:	b8c00615 	stw	r3,24(r23)
   4a1e4:	90800517 	ldw	r2,20(r18)
   4a1e8:	b8800715 	stw	r2,28(r23)
   4a1ec:	003f1206 	br	49e38 <_realloc_r+0x204>
   4a1f0:	90c00417 	ldw	r3,16(r18)
   4a1f4:	91000604 	addi	r4,r18,24
   4a1f8:	ba000804 	addi	r8,r23,32
   4a1fc:	b8c00615 	stw	r3,24(r23)
   4a200:	90800517 	ldw	r2,20(r18)
   4a204:	b8800715 	stw	r2,28(r23)
   4a208:	003f3206 	br	49ed4 <_realloc_r+0x2a0>
   4a20c:	90c00417 	ldw	r3,16(r18)
   4a210:	91000604 	addi	r4,r18,24
   4a214:	b9c00804 	addi	r7,r23,32
   4a218:	b8c00615 	stw	r3,24(r23)
   4a21c:	90800517 	ldw	r2,20(r18)
   4a220:	b8800715 	stw	r2,28(r23)
   4a224:	003fb906 	br	4a10c <_realloc_r+0x4d8>

0004a228 <__isinfd>:
   4a228:	200d883a 	mov	r6,r4
   4a22c:	0109c83a 	sub	r4,zero,r4
   4a230:	2188b03a 	or	r4,r4,r6
   4a234:	2008d7fa 	srli	r4,r4,31
   4a238:	00a00034 	movhi	r2,32768
   4a23c:	10bfffc4 	addi	r2,r2,-1
   4a240:	1144703a 	and	r2,r2,r5
   4a244:	2088b03a 	or	r4,r4,r2
   4a248:	009ffc34 	movhi	r2,32752
   4a24c:	1105c83a 	sub	r2,r2,r4
   4a250:	0087c83a 	sub	r3,zero,r2
   4a254:	10c4b03a 	or	r2,r2,r3
   4a258:	1004d7fa 	srli	r2,r2,31
   4a25c:	00c00044 	movi	r3,1
   4a260:	1885c83a 	sub	r2,r3,r2
   4a264:	f800283a 	ret

0004a268 <__isnand>:
   4a268:	200d883a 	mov	r6,r4
   4a26c:	0109c83a 	sub	r4,zero,r4
   4a270:	2188b03a 	or	r4,r4,r6
   4a274:	2008d7fa 	srli	r4,r4,31
   4a278:	00a00034 	movhi	r2,32768
   4a27c:	10bfffc4 	addi	r2,r2,-1
   4a280:	1144703a 	and	r2,r2,r5
   4a284:	2088b03a 	or	r4,r4,r2
   4a288:	009ffc34 	movhi	r2,32752
   4a28c:	1105c83a 	sub	r2,r2,r4
   4a290:	1004d7fa 	srli	r2,r2,31
   4a294:	f800283a 	ret

0004a298 <_sbrk_r>:
   4a298:	defffd04 	addi	sp,sp,-12
   4a29c:	dc000015 	stw	r16,0(sp)
   4a2a0:	04000174 	movhi	r16,5
   4a2a4:	840e6a04 	addi	r16,r16,14760
   4a2a8:	dc400115 	stw	r17,4(sp)
   4a2ac:	80000015 	stw	zero,0(r16)
   4a2b0:	2023883a 	mov	r17,r4
   4a2b4:	2809883a 	mov	r4,r5
   4a2b8:	dfc00215 	stw	ra,8(sp)
   4a2bc:	004d6040 	call	4d604 <sbrk>
   4a2c0:	1007883a 	mov	r3,r2
   4a2c4:	00bfffc4 	movi	r2,-1
   4a2c8:	18800626 	beq	r3,r2,4a2e4 <_sbrk_r+0x4c>
   4a2cc:	1805883a 	mov	r2,r3
   4a2d0:	dfc00217 	ldw	ra,8(sp)
   4a2d4:	dc400117 	ldw	r17,4(sp)
   4a2d8:	dc000017 	ldw	r16,0(sp)
   4a2dc:	dec00304 	addi	sp,sp,12
   4a2e0:	f800283a 	ret
   4a2e4:	80800017 	ldw	r2,0(r16)
   4a2e8:	103ff826 	beq	r2,zero,4a2cc <_sbrk_r+0x34>
   4a2ec:	88800015 	stw	r2,0(r17)
   4a2f0:	1805883a 	mov	r2,r3
   4a2f4:	dfc00217 	ldw	ra,8(sp)
   4a2f8:	dc400117 	ldw	r17,4(sp)
   4a2fc:	dc000017 	ldw	r16,0(sp)
   4a300:	dec00304 	addi	sp,sp,12
   4a304:	f800283a 	ret

0004a308 <__sclose>:
   4a308:	2940038f 	ldh	r5,14(r5)
   4a30c:	004a63c1 	jmpi	4a63c <_close_r>

0004a310 <__sseek>:
   4a310:	defffe04 	addi	sp,sp,-8
   4a314:	dc000015 	stw	r16,0(sp)
   4a318:	2821883a 	mov	r16,r5
   4a31c:	2940038f 	ldh	r5,14(r5)
   4a320:	dfc00115 	stw	ra,4(sp)
   4a324:	004a8b40 	call	4a8b4 <_lseek_r>
   4a328:	1007883a 	mov	r3,r2
   4a32c:	00bfffc4 	movi	r2,-1
   4a330:	18800926 	beq	r3,r2,4a358 <__sseek+0x48>
   4a334:	8080030b 	ldhu	r2,12(r16)
   4a338:	80c01415 	stw	r3,80(r16)
   4a33c:	10840014 	ori	r2,r2,4096
   4a340:	8080030d 	sth	r2,12(r16)
   4a344:	1805883a 	mov	r2,r3
   4a348:	dfc00117 	ldw	ra,4(sp)
   4a34c:	dc000017 	ldw	r16,0(sp)
   4a350:	dec00204 	addi	sp,sp,8
   4a354:	f800283a 	ret
   4a358:	8080030b 	ldhu	r2,12(r16)
   4a35c:	10bbffcc 	andi	r2,r2,61439
   4a360:	8080030d 	sth	r2,12(r16)
   4a364:	1805883a 	mov	r2,r3
   4a368:	dfc00117 	ldw	ra,4(sp)
   4a36c:	dc000017 	ldw	r16,0(sp)
   4a370:	dec00204 	addi	sp,sp,8
   4a374:	f800283a 	ret

0004a378 <__swrite>:
   4a378:	2880030b 	ldhu	r2,12(r5)
   4a37c:	defffb04 	addi	sp,sp,-20
   4a380:	dcc00315 	stw	r19,12(sp)
   4a384:	1080400c 	andi	r2,r2,256
   4a388:	dc800215 	stw	r18,8(sp)
   4a38c:	dc400115 	stw	r17,4(sp)
   4a390:	dc000015 	stw	r16,0(sp)
   4a394:	3027883a 	mov	r19,r6
   4a398:	3825883a 	mov	r18,r7
   4a39c:	dfc00415 	stw	ra,16(sp)
   4a3a0:	2821883a 	mov	r16,r5
   4a3a4:	000d883a 	mov	r6,zero
   4a3a8:	01c00084 	movi	r7,2
   4a3ac:	2023883a 	mov	r17,r4
   4a3b0:	10000226 	beq	r2,zero,4a3bc <__swrite+0x44>
   4a3b4:	2940038f 	ldh	r5,14(r5)
   4a3b8:	004a8b40 	call	4a8b4 <_lseek_r>
   4a3bc:	8080030b 	ldhu	r2,12(r16)
   4a3c0:	8140038f 	ldh	r5,14(r16)
   4a3c4:	8809883a 	mov	r4,r17
   4a3c8:	10bbffcc 	andi	r2,r2,61439
   4a3cc:	980d883a 	mov	r6,r19
   4a3d0:	900f883a 	mov	r7,r18
   4a3d4:	8080030d 	sth	r2,12(r16)
   4a3d8:	dfc00417 	ldw	ra,16(sp)
   4a3dc:	dcc00317 	ldw	r19,12(sp)
   4a3e0:	dc800217 	ldw	r18,8(sp)
   4a3e4:	dc400117 	ldw	r17,4(sp)
   4a3e8:	dc000017 	ldw	r16,0(sp)
   4a3ec:	dec00504 	addi	sp,sp,20
   4a3f0:	004a5101 	jmpi	4a510 <_write_r>

0004a3f4 <__sread>:
   4a3f4:	defffe04 	addi	sp,sp,-8
   4a3f8:	dc000015 	stw	r16,0(sp)
   4a3fc:	2821883a 	mov	r16,r5
   4a400:	2940038f 	ldh	r5,14(r5)
   4a404:	dfc00115 	stw	ra,4(sp)
   4a408:	004a92c0 	call	4a92c <_read_r>
   4a40c:	1007883a 	mov	r3,r2
   4a410:	10000816 	blt	r2,zero,4a434 <__sread+0x40>
   4a414:	80801417 	ldw	r2,80(r16)
   4a418:	10c5883a 	add	r2,r2,r3
   4a41c:	80801415 	stw	r2,80(r16)
   4a420:	1805883a 	mov	r2,r3
   4a424:	dfc00117 	ldw	ra,4(sp)
   4a428:	dc000017 	ldw	r16,0(sp)
   4a42c:	dec00204 	addi	sp,sp,8
   4a430:	f800283a 	ret
   4a434:	8080030b 	ldhu	r2,12(r16)
   4a438:	10bbffcc 	andi	r2,r2,61439
   4a43c:	8080030d 	sth	r2,12(r16)
   4a440:	1805883a 	mov	r2,r3
   4a444:	dfc00117 	ldw	ra,4(sp)
   4a448:	dc000017 	ldw	r16,0(sp)
   4a44c:	dec00204 	addi	sp,sp,8
   4a450:	f800283a 	ret

0004a454 <strcmp>:
   4a454:	2144b03a 	or	r2,r4,r5
   4a458:	108000cc 	andi	r2,r2,3
   4a45c:	10001d1e 	bne	r2,zero,4a4d4 <strcmp+0x80>
   4a460:	200f883a 	mov	r7,r4
   4a464:	28800017 	ldw	r2,0(r5)
   4a468:	21000017 	ldw	r4,0(r4)
   4a46c:	280d883a 	mov	r6,r5
   4a470:	2080161e 	bne	r4,r2,4a4cc <strcmp+0x78>
   4a474:	023fbff4 	movhi	r8,65279
   4a478:	423fbfc4 	addi	r8,r8,-257
   4a47c:	2207883a 	add	r3,r4,r8
   4a480:	01602074 	movhi	r5,32897
   4a484:	29602004 	addi	r5,r5,-32640
   4a488:	1946703a 	and	r3,r3,r5
   4a48c:	0104303a 	nor	r2,zero,r4
   4a490:	10c4703a 	and	r2,r2,r3
   4a494:	10001c1e 	bne	r2,zero,4a508 <strcmp+0xb4>
   4a498:	4013883a 	mov	r9,r8
   4a49c:	2811883a 	mov	r8,r5
   4a4a0:	00000106 	br	4a4a8 <strcmp+0x54>
   4a4a4:	1800181e 	bne	r3,zero,4a508 <strcmp+0xb4>
   4a4a8:	39c00104 	addi	r7,r7,4
   4a4ac:	39000017 	ldw	r4,0(r7)
   4a4b0:	31800104 	addi	r6,r6,4
   4a4b4:	31400017 	ldw	r5,0(r6)
   4a4b8:	2245883a 	add	r2,r4,r9
   4a4bc:	1204703a 	and	r2,r2,r8
   4a4c0:	0106303a 	nor	r3,zero,r4
   4a4c4:	1886703a 	and	r3,r3,r2
   4a4c8:	217ff626 	beq	r4,r5,4a4a4 <strcmp+0x50>
   4a4cc:	3809883a 	mov	r4,r7
   4a4d0:	300b883a 	mov	r5,r6
   4a4d4:	20c00007 	ldb	r3,0(r4)
   4a4d8:	1800051e 	bne	r3,zero,4a4f0 <strcmp+0x9c>
   4a4dc:	00000606 	br	4a4f8 <strcmp+0xa4>
   4a4e0:	21000044 	addi	r4,r4,1
   4a4e4:	20c00007 	ldb	r3,0(r4)
   4a4e8:	29400044 	addi	r5,r5,1
   4a4ec:	18000226 	beq	r3,zero,4a4f8 <strcmp+0xa4>
   4a4f0:	28800007 	ldb	r2,0(r5)
   4a4f4:	18bffa26 	beq	r3,r2,4a4e0 <strcmp+0x8c>
   4a4f8:	20c00003 	ldbu	r3,0(r4)
   4a4fc:	28800003 	ldbu	r2,0(r5)
   4a500:	1885c83a 	sub	r2,r3,r2
   4a504:	f800283a 	ret
   4a508:	0005883a 	mov	r2,zero
   4a50c:	f800283a 	ret

0004a510 <_write_r>:
   4a510:	defffd04 	addi	sp,sp,-12
   4a514:	dc000015 	stw	r16,0(sp)
   4a518:	04000174 	movhi	r16,5
   4a51c:	840e6a04 	addi	r16,r16,14760
   4a520:	dc400115 	stw	r17,4(sp)
   4a524:	80000015 	stw	zero,0(r16)
   4a528:	2023883a 	mov	r17,r4
   4a52c:	2809883a 	mov	r4,r5
   4a530:	300b883a 	mov	r5,r6
   4a534:	380d883a 	mov	r6,r7
   4a538:	dfc00215 	stw	ra,8(sp)
   4a53c:	004d6c00 	call	4d6c0 <write>
   4a540:	1007883a 	mov	r3,r2
   4a544:	00bfffc4 	movi	r2,-1
   4a548:	18800626 	beq	r3,r2,4a564 <_write_r+0x54>
   4a54c:	1805883a 	mov	r2,r3
   4a550:	dfc00217 	ldw	ra,8(sp)
   4a554:	dc400117 	ldw	r17,4(sp)
   4a558:	dc000017 	ldw	r16,0(sp)
   4a55c:	dec00304 	addi	sp,sp,12
   4a560:	f800283a 	ret
   4a564:	80800017 	ldw	r2,0(r16)
   4a568:	103ff826 	beq	r2,zero,4a54c <_write_r+0x3c>
   4a56c:	88800015 	stw	r2,0(r17)
   4a570:	1805883a 	mov	r2,r3
   4a574:	dfc00217 	ldw	ra,8(sp)
   4a578:	dc400117 	ldw	r17,4(sp)
   4a57c:	dc000017 	ldw	r16,0(sp)
   4a580:	dec00304 	addi	sp,sp,12
   4a584:	f800283a 	ret

0004a588 <_calloc_r>:
   4a588:	298b383a 	mul	r5,r5,r6
   4a58c:	defffe04 	addi	sp,sp,-8
   4a590:	dc000015 	stw	r16,0(sp)
   4a594:	dfc00115 	stw	ra,4(sp)
   4a598:	00482040 	call	48204 <_malloc_r>
   4a59c:	1021883a 	mov	r16,r2
   4a5a0:	01c00904 	movi	r7,36
   4a5a4:	10000d26 	beq	r2,zero,4a5dc <_calloc_r+0x54>
   4a5a8:	10ffff17 	ldw	r3,-4(r2)
   4a5ac:	1009883a 	mov	r4,r2
   4a5b0:	00bfff04 	movi	r2,-4
   4a5b4:	1886703a 	and	r3,r3,r2
   4a5b8:	1887883a 	add	r3,r3,r2
   4a5bc:	180d883a 	mov	r6,r3
   4a5c0:	000b883a 	mov	r5,zero
   4a5c4:	38c01736 	bltu	r7,r3,4a624 <_calloc_r+0x9c>
   4a5c8:	008004c4 	movi	r2,19
   4a5cc:	10c00836 	bltu	r2,r3,4a5f0 <_calloc_r+0x68>
   4a5d0:	20000215 	stw	zero,8(r4)
   4a5d4:	20000015 	stw	zero,0(r4)
   4a5d8:	20000115 	stw	zero,4(r4)
   4a5dc:	8005883a 	mov	r2,r16
   4a5e0:	dfc00117 	ldw	ra,4(sp)
   4a5e4:	dc000017 	ldw	r16,0(sp)
   4a5e8:	dec00204 	addi	sp,sp,8
   4a5ec:	f800283a 	ret
   4a5f0:	008006c4 	movi	r2,27
   4a5f4:	80000015 	stw	zero,0(r16)
   4a5f8:	80000115 	stw	zero,4(r16)
   4a5fc:	81000204 	addi	r4,r16,8
   4a600:	10fff32e 	bgeu	r2,r3,4a5d0 <_calloc_r+0x48>
   4a604:	80000215 	stw	zero,8(r16)
   4a608:	80000315 	stw	zero,12(r16)
   4a60c:	81000404 	addi	r4,r16,16
   4a610:	19ffef1e 	bne	r3,r7,4a5d0 <_calloc_r+0x48>
   4a614:	81000604 	addi	r4,r16,24
   4a618:	80000415 	stw	zero,16(r16)
   4a61c:	80000515 	stw	zero,20(r16)
   4a620:	003feb06 	br	4a5d0 <_calloc_r+0x48>
   4a624:	0048ba80 	call	48ba8 <memset>
   4a628:	8005883a 	mov	r2,r16
   4a62c:	dfc00117 	ldw	ra,4(sp)
   4a630:	dc000017 	ldw	r16,0(sp)
   4a634:	dec00204 	addi	sp,sp,8
   4a638:	f800283a 	ret

0004a63c <_close_r>:
   4a63c:	defffd04 	addi	sp,sp,-12
   4a640:	dc000015 	stw	r16,0(sp)
   4a644:	04000174 	movhi	r16,5
   4a648:	840e6a04 	addi	r16,r16,14760
   4a64c:	dc400115 	stw	r17,4(sp)
   4a650:	80000015 	stw	zero,0(r16)
   4a654:	2023883a 	mov	r17,r4
   4a658:	2809883a 	mov	r4,r5
   4a65c:	dfc00215 	stw	ra,8(sp)
   4a660:	004c8dc0 	call	4c8dc <close>
   4a664:	1007883a 	mov	r3,r2
   4a668:	00bfffc4 	movi	r2,-1
   4a66c:	18800626 	beq	r3,r2,4a688 <_close_r+0x4c>
   4a670:	1805883a 	mov	r2,r3
   4a674:	dfc00217 	ldw	ra,8(sp)
   4a678:	dc400117 	ldw	r17,4(sp)
   4a67c:	dc000017 	ldw	r16,0(sp)
   4a680:	dec00304 	addi	sp,sp,12
   4a684:	f800283a 	ret
   4a688:	80800017 	ldw	r2,0(r16)
   4a68c:	103ff826 	beq	r2,zero,4a670 <_close_r+0x34>
   4a690:	88800015 	stw	r2,0(r17)
   4a694:	1805883a 	mov	r2,r3
   4a698:	dfc00217 	ldw	ra,8(sp)
   4a69c:	dc400117 	ldw	r17,4(sp)
   4a6a0:	dc000017 	ldw	r16,0(sp)
   4a6a4:	dec00304 	addi	sp,sp,12
   4a6a8:	f800283a 	ret

0004a6ac <_fclose_r>:
   4a6ac:	defffc04 	addi	sp,sp,-16
   4a6b0:	dc400115 	stw	r17,4(sp)
   4a6b4:	dc000015 	stw	r16,0(sp)
   4a6b8:	dfc00315 	stw	ra,12(sp)
   4a6bc:	dc800215 	stw	r18,8(sp)
   4a6c0:	2821883a 	mov	r16,r5
   4a6c4:	2023883a 	mov	r17,r4
   4a6c8:	28002926 	beq	r5,zero,4a770 <_fclose_r+0xc4>
   4a6cc:	00472e80 	call	472e8 <__sfp_lock_acquire>
   4a6d0:	88000226 	beq	r17,zero,4a6dc <_fclose_r+0x30>
   4a6d4:	88800e17 	ldw	r2,56(r17)
   4a6d8:	10002d26 	beq	r2,zero,4a790 <_fclose_r+0xe4>
   4a6dc:	8080030f 	ldh	r2,12(r16)
   4a6e0:	10002226 	beq	r2,zero,4a76c <_fclose_r+0xc0>
   4a6e4:	8809883a 	mov	r4,r17
   4a6e8:	800b883a 	mov	r5,r16
   4a6ec:	00470600 	call	47060 <_fflush_r>
   4a6f0:	1025883a 	mov	r18,r2
   4a6f4:	80800b17 	ldw	r2,44(r16)
   4a6f8:	10000426 	beq	r2,zero,4a70c <_fclose_r+0x60>
   4a6fc:	81400717 	ldw	r5,28(r16)
   4a700:	8809883a 	mov	r4,r17
   4a704:	103ee83a 	callr	r2
   4a708:	10002a16 	blt	r2,zero,4a7b4 <_fclose_r+0x108>
   4a70c:	8080030b 	ldhu	r2,12(r16)
   4a710:	1080200c 	andi	r2,r2,128
   4a714:	1000231e 	bne	r2,zero,4a7a4 <_fclose_r+0xf8>
   4a718:	81400c17 	ldw	r5,48(r16)
   4a71c:	28000526 	beq	r5,zero,4a734 <_fclose_r+0x88>
   4a720:	80801004 	addi	r2,r16,64
   4a724:	28800226 	beq	r5,r2,4a730 <_fclose_r+0x84>
   4a728:	8809883a 	mov	r4,r17
   4a72c:	004767c0 	call	4767c <_free_r>
   4a730:	80000c15 	stw	zero,48(r16)
   4a734:	81401117 	ldw	r5,68(r16)
   4a738:	28000326 	beq	r5,zero,4a748 <_fclose_r+0x9c>
   4a73c:	8809883a 	mov	r4,r17
   4a740:	004767c0 	call	4767c <_free_r>
   4a744:	80001115 	stw	zero,68(r16)
   4a748:	8000030d 	sth	zero,12(r16)
   4a74c:	00472ec0 	call	472ec <__sfp_lock_release>
   4a750:	9005883a 	mov	r2,r18
   4a754:	dfc00317 	ldw	ra,12(sp)
   4a758:	dc800217 	ldw	r18,8(sp)
   4a75c:	dc400117 	ldw	r17,4(sp)
   4a760:	dc000017 	ldw	r16,0(sp)
   4a764:	dec00404 	addi	sp,sp,16
   4a768:	f800283a 	ret
   4a76c:	00472ec0 	call	472ec <__sfp_lock_release>
   4a770:	0025883a 	mov	r18,zero
   4a774:	9005883a 	mov	r2,r18
   4a778:	dfc00317 	ldw	ra,12(sp)
   4a77c:	dc800217 	ldw	r18,8(sp)
   4a780:	dc400117 	ldw	r17,4(sp)
   4a784:	dc000017 	ldw	r16,0(sp)
   4a788:	dec00404 	addi	sp,sp,16
   4a78c:	f800283a 	ret
   4a790:	8809883a 	mov	r4,r17
   4a794:	00472f80 	call	472f8 <__sinit>
   4a798:	8080030f 	ldh	r2,12(r16)
   4a79c:	103fd11e 	bne	r2,zero,4a6e4 <_fclose_r+0x38>
   4a7a0:	003ff206 	br	4a76c <_fclose_r+0xc0>
   4a7a4:	81400417 	ldw	r5,16(r16)
   4a7a8:	8809883a 	mov	r4,r17
   4a7ac:	004767c0 	call	4767c <_free_r>
   4a7b0:	003fd906 	br	4a718 <_fclose_r+0x6c>
   4a7b4:	04bfffc4 	movi	r18,-1
   4a7b8:	003fd406 	br	4a70c <_fclose_r+0x60>

0004a7bc <fclose>:
   4a7bc:	00800174 	movhi	r2,5
   4a7c0:	10874404 	addi	r2,r2,7440
   4a7c4:	200b883a 	mov	r5,r4
   4a7c8:	11000017 	ldw	r4,0(r2)
   4a7cc:	004a6ac1 	jmpi	4a6ac <_fclose_r>

0004a7d0 <_fstat_r>:
   4a7d0:	defffd04 	addi	sp,sp,-12
   4a7d4:	dc000015 	stw	r16,0(sp)
   4a7d8:	04000174 	movhi	r16,5
   4a7dc:	840e6a04 	addi	r16,r16,14760
   4a7e0:	dc400115 	stw	r17,4(sp)
   4a7e4:	80000015 	stw	zero,0(r16)
   4a7e8:	2023883a 	mov	r17,r4
   4a7ec:	2809883a 	mov	r4,r5
   4a7f0:	300b883a 	mov	r5,r6
   4a7f4:	dfc00215 	stw	ra,8(sp)
   4a7f8:	004ca640 	call	4ca64 <fstat>
   4a7fc:	1007883a 	mov	r3,r2
   4a800:	00bfffc4 	movi	r2,-1
   4a804:	18800626 	beq	r3,r2,4a820 <_fstat_r+0x50>
   4a808:	1805883a 	mov	r2,r3
   4a80c:	dfc00217 	ldw	ra,8(sp)
   4a810:	dc400117 	ldw	r17,4(sp)
   4a814:	dc000017 	ldw	r16,0(sp)
   4a818:	dec00304 	addi	sp,sp,12
   4a81c:	f800283a 	ret
   4a820:	80800017 	ldw	r2,0(r16)
   4a824:	103ff826 	beq	r2,zero,4a808 <_fstat_r+0x38>
   4a828:	88800015 	stw	r2,0(r17)
   4a82c:	1805883a 	mov	r2,r3
   4a830:	dfc00217 	ldw	ra,8(sp)
   4a834:	dc400117 	ldw	r17,4(sp)
   4a838:	dc000017 	ldw	r16,0(sp)
   4a83c:	dec00304 	addi	sp,sp,12
   4a840:	f800283a 	ret

0004a844 <_isatty_r>:
   4a844:	defffd04 	addi	sp,sp,-12
   4a848:	dc000015 	stw	r16,0(sp)
   4a84c:	04000174 	movhi	r16,5
   4a850:	840e6a04 	addi	r16,r16,14760
   4a854:	dc400115 	stw	r17,4(sp)
   4a858:	80000015 	stw	zero,0(r16)
   4a85c:	2023883a 	mov	r17,r4
   4a860:	2809883a 	mov	r4,r5
   4a864:	dfc00215 	stw	ra,8(sp)
   4a868:	004cd580 	call	4cd58 <isatty>
   4a86c:	1007883a 	mov	r3,r2
   4a870:	00bfffc4 	movi	r2,-1
   4a874:	18800626 	beq	r3,r2,4a890 <_isatty_r+0x4c>
   4a878:	1805883a 	mov	r2,r3
   4a87c:	dfc00217 	ldw	ra,8(sp)
   4a880:	dc400117 	ldw	r17,4(sp)
   4a884:	dc000017 	ldw	r16,0(sp)
   4a888:	dec00304 	addi	sp,sp,12
   4a88c:	f800283a 	ret
   4a890:	80800017 	ldw	r2,0(r16)
   4a894:	103ff826 	beq	r2,zero,4a878 <_isatty_r+0x34>
   4a898:	88800015 	stw	r2,0(r17)
   4a89c:	1805883a 	mov	r2,r3
   4a8a0:	dfc00217 	ldw	ra,8(sp)
   4a8a4:	dc400117 	ldw	r17,4(sp)
   4a8a8:	dc000017 	ldw	r16,0(sp)
   4a8ac:	dec00304 	addi	sp,sp,12
   4a8b0:	f800283a 	ret

0004a8b4 <_lseek_r>:
   4a8b4:	defffd04 	addi	sp,sp,-12
   4a8b8:	dc000015 	stw	r16,0(sp)
   4a8bc:	04000174 	movhi	r16,5
   4a8c0:	840e6a04 	addi	r16,r16,14760
   4a8c4:	dc400115 	stw	r17,4(sp)
   4a8c8:	80000015 	stw	zero,0(r16)
   4a8cc:	2023883a 	mov	r17,r4
   4a8d0:	2809883a 	mov	r4,r5
   4a8d4:	300b883a 	mov	r5,r6
   4a8d8:	380d883a 	mov	r6,r7
   4a8dc:	dfc00215 	stw	ra,8(sp)
   4a8e0:	004cf640 	call	4cf64 <lseek>
   4a8e4:	1007883a 	mov	r3,r2
   4a8e8:	00bfffc4 	movi	r2,-1
   4a8ec:	18800626 	beq	r3,r2,4a908 <_lseek_r+0x54>
   4a8f0:	1805883a 	mov	r2,r3
   4a8f4:	dfc00217 	ldw	ra,8(sp)
   4a8f8:	dc400117 	ldw	r17,4(sp)
   4a8fc:	dc000017 	ldw	r16,0(sp)
   4a900:	dec00304 	addi	sp,sp,12
   4a904:	f800283a 	ret
   4a908:	80800017 	ldw	r2,0(r16)
   4a90c:	103ff826 	beq	r2,zero,4a8f0 <_lseek_r+0x3c>
   4a910:	88800015 	stw	r2,0(r17)
   4a914:	1805883a 	mov	r2,r3
   4a918:	dfc00217 	ldw	ra,8(sp)
   4a91c:	dc400117 	ldw	r17,4(sp)
   4a920:	dc000017 	ldw	r16,0(sp)
   4a924:	dec00304 	addi	sp,sp,12
   4a928:	f800283a 	ret

0004a92c <_read_r>:
   4a92c:	defffd04 	addi	sp,sp,-12
   4a930:	dc000015 	stw	r16,0(sp)
   4a934:	04000174 	movhi	r16,5
   4a938:	840e6a04 	addi	r16,r16,14760
   4a93c:	dc400115 	stw	r17,4(sp)
   4a940:	80000015 	stw	zero,0(r16)
   4a944:	2023883a 	mov	r17,r4
   4a948:	2809883a 	mov	r4,r5
   4a94c:	300b883a 	mov	r5,r6
   4a950:	380d883a 	mov	r6,r7
   4a954:	dfc00215 	stw	ra,8(sp)
   4a958:	004d4240 	call	4d424 <read>
   4a95c:	1007883a 	mov	r3,r2
   4a960:	00bfffc4 	movi	r2,-1
   4a964:	18800626 	beq	r3,r2,4a980 <_read_r+0x54>
   4a968:	1805883a 	mov	r2,r3
   4a96c:	dfc00217 	ldw	ra,8(sp)
   4a970:	dc400117 	ldw	r17,4(sp)
   4a974:	dc000017 	ldw	r16,0(sp)
   4a978:	dec00304 	addi	sp,sp,12
   4a97c:	f800283a 	ret
   4a980:	80800017 	ldw	r2,0(r16)
   4a984:	103ff826 	beq	r2,zero,4a968 <_read_r+0x3c>
   4a988:	88800015 	stw	r2,0(r17)
   4a98c:	1805883a 	mov	r2,r3
   4a990:	dfc00217 	ldw	ra,8(sp)
   4a994:	dc400117 	ldw	r17,4(sp)
   4a998:	dc000017 	ldw	r16,0(sp)
   4a99c:	dec00304 	addi	sp,sp,12
   4a9a0:	f800283a 	ret

0004a9a4 <__udivdi3>:
   4a9a4:	defff004 	addi	sp,sp,-64
   4a9a8:	2005883a 	mov	r2,r4
   4a9ac:	3011883a 	mov	r8,r6
   4a9b0:	df000e15 	stw	fp,56(sp)
   4a9b4:	dd000a15 	stw	r20,40(sp)
   4a9b8:	dc000615 	stw	r16,24(sp)
   4a9bc:	dfc00f15 	stw	ra,60(sp)
   4a9c0:	ddc00d15 	stw	r23,52(sp)
   4a9c4:	dd800c15 	stw	r22,48(sp)
   4a9c8:	dd400b15 	stw	r21,44(sp)
   4a9cc:	dcc00915 	stw	r19,36(sp)
   4a9d0:	dc800815 	stw	r18,32(sp)
   4a9d4:	dc400715 	stw	r17,28(sp)
   4a9d8:	4021883a 	mov	r16,r8
   4a9dc:	1039883a 	mov	fp,r2
   4a9e0:	2829883a 	mov	r20,r5
   4a9e4:	38003b1e 	bne	r7,zero,4aad4 <__udivdi3+0x130>
   4a9e8:	2a005c36 	bltu	r5,r8,4ab5c <__udivdi3+0x1b8>
   4a9ec:	4000a626 	beq	r8,zero,4ac88 <__udivdi3+0x2e4>
   4a9f0:	00bfffd4 	movui	r2,65535
   4a9f4:	14009e36 	bltu	r2,r16,4ac70 <__udivdi3+0x2cc>
   4a9f8:	00803fc4 	movi	r2,255
   4a9fc:	14013d36 	bltu	r2,r16,4aef4 <__udivdi3+0x550>
   4aa00:	000b883a 	mov	r5,zero
   4aa04:	0005883a 	mov	r2,zero
   4aa08:	8084d83a 	srl	r2,r16,r2
   4aa0c:	01000174 	movhi	r4,5
   4aa10:	21000d04 	addi	r4,r4,52
   4aa14:	01800804 	movi	r6,32
   4aa18:	1105883a 	add	r2,r2,r4
   4aa1c:	10c00003 	ldbu	r3,0(r2)
   4aa20:	28c7883a 	add	r3,r5,r3
   4aa24:	30edc83a 	sub	r22,r6,r3
   4aa28:	b000ee1e 	bne	r22,zero,4ade4 <__udivdi3+0x440>
   4aa2c:	802ad43a 	srli	r21,r16,16
   4aa30:	00800044 	movi	r2,1
   4aa34:	a423c83a 	sub	r17,r20,r16
   4aa38:	85ffffcc 	andi	r23,r16,65535
   4aa3c:	d8800315 	stw	r2,12(sp)
   4aa40:	8809883a 	mov	r4,r17
   4aa44:	a80b883a 	mov	r5,r21
   4aa48:	0042fb40 	call	42fb4 <__udivsi3>
   4aa4c:	8809883a 	mov	r4,r17
   4aa50:	a80b883a 	mov	r5,r21
   4aa54:	102d883a 	mov	r22,r2
   4aa58:	0042fbc0 	call	42fbc <__umodsi3>
   4aa5c:	1004943a 	slli	r2,r2,16
   4aa60:	e006d43a 	srli	r3,fp,16
   4aa64:	bda3383a 	mul	r17,r23,r22
   4aa68:	10c4b03a 	or	r2,r2,r3
   4aa6c:	1440042e 	bgeu	r2,r17,4aa80 <__udivdi3+0xdc>
   4aa70:	1405883a 	add	r2,r2,r16
   4aa74:	b5bfffc4 	addi	r22,r22,-1
   4aa78:	14000136 	bltu	r2,r16,4aa80 <__udivdi3+0xdc>
   4aa7c:	14413d36 	bltu	r2,r17,4af74 <__udivdi3+0x5d0>
   4aa80:	1463c83a 	sub	r17,r2,r17
   4aa84:	8809883a 	mov	r4,r17
   4aa88:	a80b883a 	mov	r5,r21
   4aa8c:	0042fb40 	call	42fb4 <__udivsi3>
   4aa90:	8809883a 	mov	r4,r17
   4aa94:	a80b883a 	mov	r5,r21
   4aa98:	1029883a 	mov	r20,r2
   4aa9c:	0042fbc0 	call	42fbc <__umodsi3>
   4aaa0:	1004943a 	slli	r2,r2,16
   4aaa4:	bd09383a 	mul	r4,r23,r20
   4aaa8:	e0ffffcc 	andi	r3,fp,65535
   4aaac:	10c4b03a 	or	r2,r2,r3
   4aab0:	1100042e 	bgeu	r2,r4,4aac4 <__udivdi3+0x120>
   4aab4:	8085883a 	add	r2,r16,r2
   4aab8:	a53fffc4 	addi	r20,r20,-1
   4aabc:	14000136 	bltu	r2,r16,4aac4 <__udivdi3+0x120>
   4aac0:	11012036 	bltu	r2,r4,4af44 <__udivdi3+0x5a0>
   4aac4:	b004943a 	slli	r2,r22,16
   4aac8:	d9000317 	ldw	r4,12(sp)
   4aacc:	a084b03a 	or	r2,r20,r2
   4aad0:	00001506 	br	4ab28 <__udivdi3+0x184>
   4aad4:	380d883a 	mov	r6,r7
   4aad8:	29c06236 	bltu	r5,r7,4ac64 <__udivdi3+0x2c0>
   4aadc:	00bfffd4 	movui	r2,65535
   4aae0:	11c05a36 	bltu	r2,r7,4ac4c <__udivdi3+0x2a8>
   4aae4:	00803fc4 	movi	r2,255
   4aae8:	11c0fc36 	bltu	r2,r7,4aedc <__udivdi3+0x538>
   4aaec:	000b883a 	mov	r5,zero
   4aaf0:	0005883a 	mov	r2,zero
   4aaf4:	3084d83a 	srl	r2,r6,r2
   4aaf8:	01000174 	movhi	r4,5
   4aafc:	21000d04 	addi	r4,r4,52
   4ab00:	01c00804 	movi	r7,32
   4ab04:	1105883a 	add	r2,r2,r4
   4ab08:	10c00003 	ldbu	r3,0(r2)
   4ab0c:	28c7883a 	add	r3,r5,r3
   4ab10:	38efc83a 	sub	r23,r7,r3
   4ab14:	b800691e 	bne	r23,zero,4acbc <__udivdi3+0x318>
   4ab18:	35000136 	bltu	r6,r20,4ab20 <__udivdi3+0x17c>
   4ab1c:	e4005136 	bltu	fp,r16,4ac64 <__udivdi3+0x2c0>
   4ab20:	00800044 	movi	r2,1
   4ab24:	0009883a 	mov	r4,zero
   4ab28:	2007883a 	mov	r3,r4
   4ab2c:	dfc00f17 	ldw	ra,60(sp)
   4ab30:	df000e17 	ldw	fp,56(sp)
   4ab34:	ddc00d17 	ldw	r23,52(sp)
   4ab38:	dd800c17 	ldw	r22,48(sp)
   4ab3c:	dd400b17 	ldw	r21,44(sp)
   4ab40:	dd000a17 	ldw	r20,40(sp)
   4ab44:	dcc00917 	ldw	r19,36(sp)
   4ab48:	dc800817 	ldw	r18,32(sp)
   4ab4c:	dc400717 	ldw	r17,28(sp)
   4ab50:	dc000617 	ldw	r16,24(sp)
   4ab54:	dec01004 	addi	sp,sp,64
   4ab58:	f800283a 	ret
   4ab5c:	00bfffd4 	movui	r2,65535
   4ab60:	12005036 	bltu	r2,r8,4aca4 <__udivdi3+0x300>
   4ab64:	00803fc4 	movi	r2,255
   4ab68:	1200e836 	bltu	r2,r8,4af0c <__udivdi3+0x568>
   4ab6c:	000b883a 	mov	r5,zero
   4ab70:	0005883a 	mov	r2,zero
   4ab74:	8084d83a 	srl	r2,r16,r2
   4ab78:	01000174 	movhi	r4,5
   4ab7c:	21000d04 	addi	r4,r4,52
   4ab80:	01800804 	movi	r6,32
   4ab84:	1105883a 	add	r2,r2,r4
   4ab88:	10c00003 	ldbu	r3,0(r2)
   4ab8c:	28c7883a 	add	r3,r5,r3
   4ab90:	30cbc83a 	sub	r5,r6,r3
   4ab94:	28000626 	beq	r5,zero,4abb0 <__udivdi3+0x20c>
   4ab98:	3145c83a 	sub	r2,r6,r5
   4ab9c:	e084d83a 	srl	r2,fp,r2
   4aba0:	a146983a 	sll	r3,r20,r5
   4aba4:	e178983a 	sll	fp,fp,r5
   4aba8:	8160983a 	sll	r16,r16,r5
   4abac:	18a8b03a 	or	r20,r3,r2
   4abb0:	802ad43a 	srli	r21,r16,16
   4abb4:	a009883a 	mov	r4,r20
   4abb8:	85ffffcc 	andi	r23,r16,65535
   4abbc:	a80b883a 	mov	r5,r21
   4abc0:	0042fb40 	call	42fb4 <__udivsi3>
   4abc4:	a009883a 	mov	r4,r20
   4abc8:	a80b883a 	mov	r5,r21
   4abcc:	102d883a 	mov	r22,r2
   4abd0:	0042fbc0 	call	42fbc <__umodsi3>
   4abd4:	1004943a 	slli	r2,r2,16
   4abd8:	e006d43a 	srli	r3,fp,16
   4abdc:	bda3383a 	mul	r17,r23,r22
   4abe0:	10c4b03a 	or	r2,r2,r3
   4abe4:	1440042e 	bgeu	r2,r17,4abf8 <__udivdi3+0x254>
   4abe8:	1405883a 	add	r2,r2,r16
   4abec:	b5bfffc4 	addi	r22,r22,-1
   4abf0:	14000136 	bltu	r2,r16,4abf8 <__udivdi3+0x254>
   4abf4:	1440d536 	bltu	r2,r17,4af4c <__udivdi3+0x5a8>
   4abf8:	1463c83a 	sub	r17,r2,r17
   4abfc:	8809883a 	mov	r4,r17
   4ac00:	a80b883a 	mov	r5,r21
   4ac04:	0042fb40 	call	42fb4 <__udivsi3>
   4ac08:	8809883a 	mov	r4,r17
   4ac0c:	a80b883a 	mov	r5,r21
   4ac10:	1029883a 	mov	r20,r2
   4ac14:	0042fbc0 	call	42fbc <__umodsi3>
   4ac18:	1004943a 	slli	r2,r2,16
   4ac1c:	bd09383a 	mul	r4,r23,r20
   4ac20:	e0ffffcc 	andi	r3,fp,65535
   4ac24:	10c4b03a 	or	r2,r2,r3
   4ac28:	1100042e 	bgeu	r2,r4,4ac3c <__udivdi3+0x298>
   4ac2c:	8085883a 	add	r2,r16,r2
   4ac30:	a53fffc4 	addi	r20,r20,-1
   4ac34:	14000136 	bltu	r2,r16,4ac3c <__udivdi3+0x298>
   4ac38:	1100c736 	bltu	r2,r4,4af58 <__udivdi3+0x5b4>
   4ac3c:	b004943a 	slli	r2,r22,16
   4ac40:	0009883a 	mov	r4,zero
   4ac44:	a084b03a 	or	r2,r20,r2
   4ac48:	003fb706 	br	4ab28 <__udivdi3+0x184>
   4ac4c:	00804034 	movhi	r2,256
   4ac50:	10bfffc4 	addi	r2,r2,-1
   4ac54:	11c0a436 	bltu	r2,r7,4aee8 <__udivdi3+0x544>
   4ac58:	01400404 	movi	r5,16
   4ac5c:	2805883a 	mov	r2,r5
   4ac60:	003fa406 	br	4aaf4 <__udivdi3+0x150>
   4ac64:	0005883a 	mov	r2,zero
   4ac68:	0009883a 	mov	r4,zero
   4ac6c:	003fae06 	br	4ab28 <__udivdi3+0x184>
   4ac70:	00804034 	movhi	r2,256
   4ac74:	10bfffc4 	addi	r2,r2,-1
   4ac78:	1400a136 	bltu	r2,r16,4af00 <__udivdi3+0x55c>
   4ac7c:	01400404 	movi	r5,16
   4ac80:	2805883a 	mov	r2,r5
   4ac84:	003f6006 	br	4aa08 <__udivdi3+0x64>
   4ac88:	01000044 	movi	r4,1
   4ac8c:	000b883a 	mov	r5,zero
   4ac90:	0042fb40 	call	42fb4 <__udivsi3>
   4ac94:	1021883a 	mov	r16,r2
   4ac98:	00bfffd4 	movui	r2,65535
   4ac9c:	143ff436 	bltu	r2,r16,4ac70 <__udivdi3+0x2cc>
   4aca0:	003f5506 	br	4a9f8 <__udivdi3+0x54>
   4aca4:	00804034 	movhi	r2,256
   4aca8:	10bfffc4 	addi	r2,r2,-1
   4acac:	12009a36 	bltu	r2,r8,4af18 <__udivdi3+0x574>
   4acb0:	01400404 	movi	r5,16
   4acb4:	2805883a 	mov	r2,r5
   4acb8:	003fae06 	br	4ab74 <__udivdi3+0x1d0>
   4acbc:	3dc5c83a 	sub	r2,r7,r23
   4acc0:	35c8983a 	sll	r4,r6,r23
   4acc4:	8086d83a 	srl	r3,r16,r2
   4acc8:	a0a2d83a 	srl	r17,r20,r2
   4accc:	e084d83a 	srl	r2,fp,r2
   4acd0:	20eab03a 	or	r21,r4,r3
   4acd4:	a82cd43a 	srli	r22,r21,16
   4acd8:	a5c6983a 	sll	r3,r20,r23
   4acdc:	8809883a 	mov	r4,r17
   4ace0:	b00b883a 	mov	r5,r22
   4ace4:	1886b03a 	or	r3,r3,r2
   4ace8:	d8c00215 	stw	r3,8(sp)
   4acec:	0042fb40 	call	42fb4 <__udivsi3>
   4acf0:	8809883a 	mov	r4,r17
   4acf4:	b00b883a 	mov	r5,r22
   4acf8:	1029883a 	mov	r20,r2
   4acfc:	0042fbc0 	call	42fbc <__umodsi3>
   4ad00:	a8ffffcc 	andi	r3,r21,65535
   4ad04:	d8c00515 	stw	r3,20(sp)
   4ad08:	d9000217 	ldw	r4,8(sp)
   4ad0c:	d9400517 	ldw	r5,20(sp)
   4ad10:	1004943a 	slli	r2,r2,16
   4ad14:	2006d43a 	srli	r3,r4,16
   4ad18:	85e0983a 	sll	r16,r16,r23
   4ad1c:	2d23383a 	mul	r17,r5,r20
   4ad20:	10c4b03a 	or	r2,r2,r3
   4ad24:	dc000015 	stw	r16,0(sp)
   4ad28:	1440032e 	bgeu	r2,r17,4ad38 <__udivdi3+0x394>
   4ad2c:	1545883a 	add	r2,r2,r21
   4ad30:	a53fffc4 	addi	r20,r20,-1
   4ad34:	15407f2e 	bgeu	r2,r21,4af34 <__udivdi3+0x590>
   4ad38:	1463c83a 	sub	r17,r2,r17
   4ad3c:	8809883a 	mov	r4,r17
   4ad40:	b00b883a 	mov	r5,r22
   4ad44:	0042fb40 	call	42fb4 <__udivsi3>
   4ad48:	8809883a 	mov	r4,r17
   4ad4c:	b00b883a 	mov	r5,r22
   4ad50:	1021883a 	mov	r16,r2
   4ad54:	0042fbc0 	call	42fbc <__umodsi3>
   4ad58:	d8c00517 	ldw	r3,20(sp)
   4ad5c:	d9000217 	ldw	r4,8(sp)
   4ad60:	1004943a 	slli	r2,r2,16
   4ad64:	1c0f383a 	mul	r7,r3,r16
   4ad68:	20ffffcc 	andi	r3,r4,65535
   4ad6c:	10e2b03a 	or	r17,r2,r3
   4ad70:	89c0032e 	bgeu	r17,r7,4ad80 <__udivdi3+0x3dc>
   4ad74:	8d63883a 	add	r17,r17,r21
   4ad78:	843fffc4 	addi	r16,r16,-1
   4ad7c:	8d40692e 	bgeu	r17,r21,4af24 <__udivdi3+0x580>
   4ad80:	a008943a 	slli	r4,r20,16
   4ad84:	d9400017 	ldw	r5,0(sp)
   4ad88:	89e3c83a 	sub	r17,r17,r7
   4ad8c:	8110b03a 	or	r8,r16,r4
   4ad90:	280cd43a 	srli	r6,r5,16
   4ad94:	28ffffcc 	andi	r3,r5,65535
   4ad98:	40bfffcc 	andi	r2,r8,65535
   4ad9c:	400ad43a 	srli	r5,r8,16
   4ada0:	10d3383a 	mul	r9,r2,r3
   4ada4:	1185383a 	mul	r2,r2,r6
   4ada8:	28c7383a 	mul	r3,r5,r3
   4adac:	4808d43a 	srli	r4,r9,16
   4adb0:	298b383a 	mul	r5,r5,r6
   4adb4:	10c5883a 	add	r2,r2,r3
   4adb8:	2089883a 	add	r4,r4,r2
   4adbc:	20c0022e 	bgeu	r4,r3,4adc8 <__udivdi3+0x424>
   4adc0:	00800074 	movhi	r2,1
   4adc4:	288b883a 	add	r5,r5,r2
   4adc8:	2004d43a 	srli	r2,r4,16
   4adcc:	288b883a 	add	r5,r5,r2
   4add0:	89403f36 	bltu	r17,r5,4aed0 <__udivdi3+0x52c>
   4add4:	89403926 	beq	r17,r5,4aebc <__udivdi3+0x518>
   4add8:	4005883a 	mov	r2,r8
   4addc:	0009883a 	mov	r4,zero
   4ade0:	003f5106 	br	4ab28 <__udivdi3+0x184>
   4ade4:	85a0983a 	sll	r16,r16,r22
   4ade8:	3585c83a 	sub	r2,r6,r22
   4adec:	a0a2d83a 	srl	r17,r20,r2
   4adf0:	802ad43a 	srli	r21,r16,16
   4adf4:	e084d83a 	srl	r2,fp,r2
   4adf8:	a586983a 	sll	r3,r20,r22
   4adfc:	8809883a 	mov	r4,r17
   4ae00:	a80b883a 	mov	r5,r21
   4ae04:	1886b03a 	or	r3,r3,r2
   4ae08:	d8c00115 	stw	r3,4(sp)
   4ae0c:	0042fb40 	call	42fb4 <__udivsi3>
   4ae10:	8809883a 	mov	r4,r17
   4ae14:	a80b883a 	mov	r5,r21
   4ae18:	d8800415 	stw	r2,16(sp)
   4ae1c:	0042fbc0 	call	42fbc <__umodsi3>
   4ae20:	d9000117 	ldw	r4,4(sp)
   4ae24:	d9400417 	ldw	r5,16(sp)
   4ae28:	1004943a 	slli	r2,r2,16
   4ae2c:	85ffffcc 	andi	r23,r16,65535
   4ae30:	2006d43a 	srli	r3,r4,16
   4ae34:	b963383a 	mul	r17,r23,r5
   4ae38:	10c4b03a 	or	r2,r2,r3
   4ae3c:	1440042e 	bgeu	r2,r17,4ae50 <__udivdi3+0x4ac>
   4ae40:	297fffc4 	addi	r5,r5,-1
   4ae44:	1405883a 	add	r2,r2,r16
   4ae48:	d9400415 	stw	r5,16(sp)
   4ae4c:	1400442e 	bgeu	r2,r16,4af60 <__udivdi3+0x5bc>
   4ae50:	1463c83a 	sub	r17,r2,r17
   4ae54:	8809883a 	mov	r4,r17
   4ae58:	a80b883a 	mov	r5,r21
   4ae5c:	0042fb40 	call	42fb4 <__udivsi3>
   4ae60:	8809883a 	mov	r4,r17
   4ae64:	a80b883a 	mov	r5,r21
   4ae68:	1029883a 	mov	r20,r2
   4ae6c:	0042fbc0 	call	42fbc <__umodsi3>
   4ae70:	d9400117 	ldw	r5,4(sp)
   4ae74:	1004943a 	slli	r2,r2,16
   4ae78:	bd09383a 	mul	r4,r23,r20
   4ae7c:	28ffffcc 	andi	r3,r5,65535
   4ae80:	10c6b03a 	or	r3,r2,r3
   4ae84:	1900062e 	bgeu	r3,r4,4aea0 <__udivdi3+0x4fc>
   4ae88:	1c07883a 	add	r3,r3,r16
   4ae8c:	a53fffc4 	addi	r20,r20,-1
   4ae90:	1c000336 	bltu	r3,r16,4aea0 <__udivdi3+0x4fc>
   4ae94:	1900022e 	bgeu	r3,r4,4aea0 <__udivdi3+0x4fc>
   4ae98:	a53fffc4 	addi	r20,r20,-1
   4ae9c:	1c07883a 	add	r3,r3,r16
   4aea0:	d9400417 	ldw	r5,16(sp)
   4aea4:	e5b8983a 	sll	fp,fp,r22
   4aea8:	1923c83a 	sub	r17,r3,r4
   4aeac:	2804943a 	slli	r2,r5,16
   4aeb0:	a0a8b03a 	or	r20,r20,r2
   4aeb4:	dd000315 	stw	r20,12(sp)
   4aeb8:	003ee106 	br	4aa40 <__udivdi3+0x9c>
   4aebc:	2004943a 	slli	r2,r4,16
   4aec0:	e5c8983a 	sll	r4,fp,r23
   4aec4:	48ffffcc 	andi	r3,r9,65535
   4aec8:	10c5883a 	add	r2,r2,r3
   4aecc:	20bfc22e 	bgeu	r4,r2,4add8 <__udivdi3+0x434>
   4aed0:	40bfffc4 	addi	r2,r8,-1
   4aed4:	0009883a 	mov	r4,zero
   4aed8:	003f1306 	br	4ab28 <__udivdi3+0x184>
   4aedc:	01400204 	movi	r5,8
   4aee0:	2805883a 	mov	r2,r5
   4aee4:	003f0306 	br	4aaf4 <__udivdi3+0x150>
   4aee8:	01400604 	movi	r5,24
   4aeec:	2805883a 	mov	r2,r5
   4aef0:	003f0006 	br	4aaf4 <__udivdi3+0x150>
   4aef4:	01400204 	movi	r5,8
   4aef8:	2805883a 	mov	r2,r5
   4aefc:	003ec206 	br	4aa08 <__udivdi3+0x64>
   4af00:	01400604 	movi	r5,24
   4af04:	2805883a 	mov	r2,r5
   4af08:	003ebf06 	br	4aa08 <__udivdi3+0x64>
   4af0c:	01400204 	movi	r5,8
   4af10:	2805883a 	mov	r2,r5
   4af14:	003f1706 	br	4ab74 <__udivdi3+0x1d0>
   4af18:	01400604 	movi	r5,24
   4af1c:	2805883a 	mov	r2,r5
   4af20:	003f1406 	br	4ab74 <__udivdi3+0x1d0>
   4af24:	89ff962e 	bgeu	r17,r7,4ad80 <__udivdi3+0x3dc>
   4af28:	8d63883a 	add	r17,r17,r21
   4af2c:	843fffc4 	addi	r16,r16,-1
   4af30:	003f9306 	br	4ad80 <__udivdi3+0x3dc>
   4af34:	147f802e 	bgeu	r2,r17,4ad38 <__udivdi3+0x394>
   4af38:	a53fffc4 	addi	r20,r20,-1
   4af3c:	1545883a 	add	r2,r2,r21
   4af40:	003f7d06 	br	4ad38 <__udivdi3+0x394>
   4af44:	a53fffc4 	addi	r20,r20,-1
   4af48:	003ede06 	br	4aac4 <__udivdi3+0x120>
   4af4c:	b5bfffc4 	addi	r22,r22,-1
   4af50:	1405883a 	add	r2,r2,r16
   4af54:	003f2806 	br	4abf8 <__udivdi3+0x254>
   4af58:	a53fffc4 	addi	r20,r20,-1
   4af5c:	003f3706 	br	4ac3c <__udivdi3+0x298>
   4af60:	147fbb2e 	bgeu	r2,r17,4ae50 <__udivdi3+0x4ac>
   4af64:	297fffc4 	addi	r5,r5,-1
   4af68:	1405883a 	add	r2,r2,r16
   4af6c:	d9400415 	stw	r5,16(sp)
   4af70:	003fb706 	br	4ae50 <__udivdi3+0x4ac>
   4af74:	b5bfffc4 	addi	r22,r22,-1
   4af78:	1405883a 	add	r2,r2,r16
   4af7c:	003ec006 	br	4aa80 <__udivdi3+0xdc>

0004af80 <__umoddi3>:
   4af80:	defff104 	addi	sp,sp,-60
   4af84:	dd800b15 	stw	r22,44(sp)
   4af88:	dd000915 	stw	r20,36(sp)
   4af8c:	dc000515 	stw	r16,20(sp)
   4af90:	dfc00e15 	stw	ra,56(sp)
   4af94:	df000d15 	stw	fp,52(sp)
   4af98:	ddc00c15 	stw	r23,48(sp)
   4af9c:	dd400a15 	stw	r21,40(sp)
   4afa0:	dcc00815 	stw	r19,32(sp)
   4afa4:	dc800715 	stw	r18,28(sp)
   4afa8:	dc400615 	stw	r17,24(sp)
   4afac:	3021883a 	mov	r16,r6
   4afb0:	202d883a 	mov	r22,r4
   4afb4:	2829883a 	mov	r20,r5
   4afb8:	38002b1e 	bne	r7,zero,4b068 <__umoddi3+0xe8>
   4afbc:	29805036 	bltu	r5,r6,4b100 <__umoddi3+0x180>
   4afc0:	30008a26 	beq	r6,zero,4b1ec <__umoddi3+0x26c>
   4afc4:	00bfffd4 	movui	r2,65535
   4afc8:	14008236 	bltu	r2,r16,4b1d4 <__umoddi3+0x254>
   4afcc:	00803fc4 	movi	r2,255
   4afd0:	14013636 	bltu	r2,r16,4b4ac <__umoddi3+0x52c>
   4afd4:	000b883a 	mov	r5,zero
   4afd8:	0005883a 	mov	r2,zero
   4afdc:	8084d83a 	srl	r2,r16,r2
   4afe0:	01000174 	movhi	r4,5
   4afe4:	21000d04 	addi	r4,r4,52
   4afe8:	01800804 	movi	r6,32
   4afec:	1105883a 	add	r2,r2,r4
   4aff0:	10c00003 	ldbu	r3,0(r2)
   4aff4:	28c7883a 	add	r3,r5,r3
   4aff8:	30efc83a 	sub	r23,r6,r3
   4affc:	b800941e 	bne	r23,zero,4b250 <__umoddi3+0x2d0>
   4b000:	802ad43a 	srli	r21,r16,16
   4b004:	a423c83a 	sub	r17,r20,r16
   4b008:	0039883a 	mov	fp,zero
   4b00c:	853fffcc 	andi	r20,r16,65535
   4b010:	8809883a 	mov	r4,r17
   4b014:	a80b883a 	mov	r5,r21
   4b018:	0042fb40 	call	42fb4 <__udivsi3>
   4b01c:	8809883a 	mov	r4,r17
   4b020:	a80b883a 	mov	r5,r21
   4b024:	a0a3383a 	mul	r17,r20,r2
   4b028:	0042fbc0 	call	42fbc <__umodsi3>
   4b02c:	1004943a 	slli	r2,r2,16
   4b030:	b006d43a 	srli	r3,r22,16
   4b034:	10c4b03a 	or	r2,r2,r3
   4b038:	1440032e 	bgeu	r2,r17,4b048 <__umoddi3+0xc8>
   4b03c:	1405883a 	add	r2,r2,r16
   4b040:	14000136 	bltu	r2,r16,4b048 <__umoddi3+0xc8>
   4b044:	14413536 	bltu	r2,r17,4b51c <__umoddi3+0x59c>
   4b048:	1463c83a 	sub	r17,r2,r17
   4b04c:	8809883a 	mov	r4,r17
   4b050:	a80b883a 	mov	r5,r21
   4b054:	0042fb40 	call	42fb4 <__udivsi3>
   4b058:	8809883a 	mov	r4,r17
   4b05c:	a0a3383a 	mul	r17,r20,r2
   4b060:	a80b883a 	mov	r5,r21
   4b064:	00004d06 	br	4b19c <__umoddi3+0x21c>
   4b068:	380d883a 	mov	r6,r7
   4b06c:	29c0102e 	bgeu	r5,r7,4b0b0 <__umoddi3+0x130>
   4b070:	2011883a 	mov	r8,r4
   4b074:	2813883a 	mov	r9,r5
   4b078:	4005883a 	mov	r2,r8
   4b07c:	4807883a 	mov	r3,r9
   4b080:	dfc00e17 	ldw	ra,56(sp)
   4b084:	df000d17 	ldw	fp,52(sp)
   4b088:	ddc00c17 	ldw	r23,48(sp)
   4b08c:	dd800b17 	ldw	r22,44(sp)
   4b090:	dd400a17 	ldw	r21,40(sp)
   4b094:	dd000917 	ldw	r20,36(sp)
   4b098:	dcc00817 	ldw	r19,32(sp)
   4b09c:	dc800717 	ldw	r18,28(sp)
   4b0a0:	dc400617 	ldw	r17,24(sp)
   4b0a4:	dc000517 	ldw	r16,20(sp)
   4b0a8:	dec00f04 	addi	sp,sp,60
   4b0ac:	f800283a 	ret
   4b0b0:	00bfffd4 	movui	r2,65535
   4b0b4:	11c05a36 	bltu	r2,r7,4b220 <__umoddi3+0x2a0>
   4b0b8:	00803fc4 	movi	r2,255
   4b0bc:	11c0fe36 	bltu	r2,r7,4b4b8 <__umoddi3+0x538>
   4b0c0:	000b883a 	mov	r5,zero
   4b0c4:	0005883a 	mov	r2,zero
   4b0c8:	3084d83a 	srl	r2,r6,r2
   4b0cc:	01000174 	movhi	r4,5
   4b0d0:	21000d04 	addi	r4,r4,52
   4b0d4:	01c00804 	movi	r7,32
   4b0d8:	1105883a 	add	r2,r2,r4
   4b0dc:	10c00003 	ldbu	r3,0(r2)
   4b0e0:	28c7883a 	add	r3,r5,r3
   4b0e4:	38ebc83a 	sub	r21,r7,r3
   4b0e8:	a800851e 	bne	r21,zero,4b300 <__umoddi3+0x380>
   4b0ec:	35005236 	bltu	r6,r20,4b238 <__umoddi3+0x2b8>
   4b0f0:	b400512e 	bgeu	r22,r16,4b238 <__umoddi3+0x2b8>
   4b0f4:	b011883a 	mov	r8,r22
   4b0f8:	a013883a 	mov	r9,r20
   4b0fc:	003fde06 	br	4b078 <__umoddi3+0xf8>
   4b100:	00bfffd4 	movui	r2,65535
   4b104:	11804036 	bltu	r2,r6,4b208 <__umoddi3+0x288>
   4b108:	00803fc4 	movi	r2,255
   4b10c:	1180ed36 	bltu	r2,r6,4b4c4 <__umoddi3+0x544>
   4b110:	000b883a 	mov	r5,zero
   4b114:	0005883a 	mov	r2,zero
   4b118:	8084d83a 	srl	r2,r16,r2
   4b11c:	01000174 	movhi	r4,5
   4b120:	21000d04 	addi	r4,r4,52
   4b124:	01800804 	movi	r6,32
   4b128:	1105883a 	add	r2,r2,r4
   4b12c:	10c00003 	ldbu	r3,0(r2)
   4b130:	28c7883a 	add	r3,r5,r3
   4b134:	30c7c83a 	sub	r3,r6,r3
   4b138:	1800bf1e 	bne	r3,zero,4b438 <__umoddi3+0x4b8>
   4b13c:	0039883a 	mov	fp,zero
   4b140:	802ad43a 	srli	r21,r16,16
   4b144:	a009883a 	mov	r4,r20
   4b148:	85ffffcc 	andi	r23,r16,65535
   4b14c:	a80b883a 	mov	r5,r21
   4b150:	0042fb40 	call	42fb4 <__udivsi3>
   4b154:	a009883a 	mov	r4,r20
   4b158:	a80b883a 	mov	r5,r21
   4b15c:	b8a3383a 	mul	r17,r23,r2
   4b160:	0042fbc0 	call	42fbc <__umodsi3>
   4b164:	1004943a 	slli	r2,r2,16
   4b168:	b006d43a 	srli	r3,r22,16
   4b16c:	10c4b03a 	or	r2,r2,r3
   4b170:	1440032e 	bgeu	r2,r17,4b180 <__umoddi3+0x200>
   4b174:	1405883a 	add	r2,r2,r16
   4b178:	14000136 	bltu	r2,r16,4b180 <__umoddi3+0x200>
   4b17c:	1440e536 	bltu	r2,r17,4b514 <__umoddi3+0x594>
   4b180:	1463c83a 	sub	r17,r2,r17
   4b184:	8809883a 	mov	r4,r17
   4b188:	a80b883a 	mov	r5,r21
   4b18c:	0042fb40 	call	42fb4 <__udivsi3>
   4b190:	8809883a 	mov	r4,r17
   4b194:	b8a3383a 	mul	r17,r23,r2
   4b198:	a80b883a 	mov	r5,r21
   4b19c:	0042fbc0 	call	42fbc <__umodsi3>
   4b1a0:	1004943a 	slli	r2,r2,16
   4b1a4:	b0ffffcc 	andi	r3,r22,65535
   4b1a8:	10c4b03a 	or	r2,r2,r3
   4b1ac:	1440042e 	bgeu	r2,r17,4b1c0 <__umoddi3+0x240>
   4b1b0:	1405883a 	add	r2,r2,r16
   4b1b4:	14000236 	bltu	r2,r16,4b1c0 <__umoddi3+0x240>
   4b1b8:	1440012e 	bgeu	r2,r17,4b1c0 <__umoddi3+0x240>
   4b1bc:	1405883a 	add	r2,r2,r16
   4b1c0:	1445c83a 	sub	r2,r2,r17
   4b1c4:	1724d83a 	srl	r18,r2,fp
   4b1c8:	0013883a 	mov	r9,zero
   4b1cc:	9011883a 	mov	r8,r18
   4b1d0:	003fa906 	br	4b078 <__umoddi3+0xf8>
   4b1d4:	00804034 	movhi	r2,256
   4b1d8:	10bfffc4 	addi	r2,r2,-1
   4b1dc:	1400b036 	bltu	r2,r16,4b4a0 <__umoddi3+0x520>
   4b1e0:	01400404 	movi	r5,16
   4b1e4:	2805883a 	mov	r2,r5
   4b1e8:	003f7c06 	br	4afdc <__umoddi3+0x5c>
   4b1ec:	01000044 	movi	r4,1
   4b1f0:	000b883a 	mov	r5,zero
   4b1f4:	0042fb40 	call	42fb4 <__udivsi3>
   4b1f8:	1021883a 	mov	r16,r2
   4b1fc:	00bfffd4 	movui	r2,65535
   4b200:	143ff436 	bltu	r2,r16,4b1d4 <__umoddi3+0x254>
   4b204:	003f7106 	br	4afcc <__umoddi3+0x4c>
   4b208:	00804034 	movhi	r2,256
   4b20c:	10bfffc4 	addi	r2,r2,-1
   4b210:	1180af36 	bltu	r2,r6,4b4d0 <__umoddi3+0x550>
   4b214:	01400404 	movi	r5,16
   4b218:	2805883a 	mov	r2,r5
   4b21c:	003fbe06 	br	4b118 <__umoddi3+0x198>
   4b220:	00804034 	movhi	r2,256
   4b224:	10bfffc4 	addi	r2,r2,-1
   4b228:	11c0ac36 	bltu	r2,r7,4b4dc <__umoddi3+0x55c>
   4b22c:	01400404 	movi	r5,16
   4b230:	2805883a 	mov	r2,r5
   4b234:	003fa406 	br	4b0c8 <__umoddi3+0x148>
   4b238:	b409c83a 	sub	r4,r22,r16
   4b23c:	b105803a 	cmpltu	r2,r22,r4
   4b240:	a187c83a 	sub	r3,r20,r6
   4b244:	18a9c83a 	sub	r20,r3,r2
   4b248:	202d883a 	mov	r22,r4
   4b24c:	003fa906 	br	4b0f4 <__umoddi3+0x174>
   4b250:	85e0983a 	sll	r16,r16,r23
   4b254:	35c5c83a 	sub	r2,r6,r23
   4b258:	a0a2d83a 	srl	r17,r20,r2
   4b25c:	802ad43a 	srli	r21,r16,16
   4b260:	b084d83a 	srl	r2,r22,r2
   4b264:	a5c6983a 	sll	r3,r20,r23
   4b268:	8809883a 	mov	r4,r17
   4b26c:	a80b883a 	mov	r5,r21
   4b270:	1886b03a 	or	r3,r3,r2
   4b274:	d8c00115 	stw	r3,4(sp)
   4b278:	853fffcc 	andi	r20,r16,65535
   4b27c:	0042fb40 	call	42fb4 <__udivsi3>
   4b280:	8809883a 	mov	r4,r17
   4b284:	a80b883a 	mov	r5,r21
   4b288:	a0a3383a 	mul	r17,r20,r2
   4b28c:	0042fbc0 	call	42fbc <__umodsi3>
   4b290:	d9000117 	ldw	r4,4(sp)
   4b294:	1004943a 	slli	r2,r2,16
   4b298:	b839883a 	mov	fp,r23
   4b29c:	2006d43a 	srli	r3,r4,16
   4b2a0:	10c4b03a 	or	r2,r2,r3
   4b2a4:	1440022e 	bgeu	r2,r17,4b2b0 <__umoddi3+0x330>
   4b2a8:	1405883a 	add	r2,r2,r16
   4b2ac:	1400962e 	bgeu	r2,r16,4b508 <__umoddi3+0x588>
   4b2b0:	1463c83a 	sub	r17,r2,r17
   4b2b4:	8809883a 	mov	r4,r17
   4b2b8:	a80b883a 	mov	r5,r21
   4b2bc:	0042fb40 	call	42fb4 <__udivsi3>
   4b2c0:	8809883a 	mov	r4,r17
   4b2c4:	a80b883a 	mov	r5,r21
   4b2c8:	a0a3383a 	mul	r17,r20,r2
   4b2cc:	0042fbc0 	call	42fbc <__umodsi3>
   4b2d0:	d9400117 	ldw	r5,4(sp)
   4b2d4:	1004943a 	slli	r2,r2,16
   4b2d8:	28ffffcc 	andi	r3,r5,65535
   4b2dc:	10c4b03a 	or	r2,r2,r3
   4b2e0:	1440042e 	bgeu	r2,r17,4b2f4 <__umoddi3+0x374>
   4b2e4:	1405883a 	add	r2,r2,r16
   4b2e8:	14000236 	bltu	r2,r16,4b2f4 <__umoddi3+0x374>
   4b2ec:	1440012e 	bgeu	r2,r17,4b2f4 <__umoddi3+0x374>
   4b2f0:	1405883a 	add	r2,r2,r16
   4b2f4:	b5ec983a 	sll	r22,r22,r23
   4b2f8:	1463c83a 	sub	r17,r2,r17
   4b2fc:	003f4406 	br	4b010 <__umoddi3+0x90>
   4b300:	3d4fc83a 	sub	r7,r7,r21
   4b304:	3546983a 	sll	r3,r6,r21
   4b308:	81c4d83a 	srl	r2,r16,r7
   4b30c:	a1e2d83a 	srl	r17,r20,r7
   4b310:	a54c983a 	sll	r6,r20,r21
   4b314:	18aeb03a 	or	r23,r3,r2
   4b318:	b828d43a 	srli	r20,r23,16
   4b31c:	b1c4d83a 	srl	r2,r22,r7
   4b320:	8809883a 	mov	r4,r17
   4b324:	a00b883a 	mov	r5,r20
   4b328:	308cb03a 	or	r6,r6,r2
   4b32c:	d9c00315 	stw	r7,12(sp)
   4b330:	d9800215 	stw	r6,8(sp)
   4b334:	0042fb40 	call	42fb4 <__udivsi3>
   4b338:	8809883a 	mov	r4,r17
   4b33c:	a00b883a 	mov	r5,r20
   4b340:	1039883a 	mov	fp,r2
   4b344:	0042fbc0 	call	42fbc <__umodsi3>
   4b348:	b8ffffcc 	andi	r3,r23,65535
   4b34c:	d8c00415 	stw	r3,16(sp)
   4b350:	d9000217 	ldw	r4,8(sp)
   4b354:	d9400417 	ldw	r5,16(sp)
   4b358:	1004943a 	slli	r2,r2,16
   4b35c:	2006d43a 	srli	r3,r4,16
   4b360:	8560983a 	sll	r16,r16,r21
   4b364:	2f23383a 	mul	r17,r5,fp
   4b368:	10c4b03a 	or	r2,r2,r3
   4b36c:	dc000015 	stw	r16,0(sp)
   4b370:	b56c983a 	sll	r22,r22,r21
   4b374:	1440032e 	bgeu	r2,r17,4b384 <__umoddi3+0x404>
   4b378:	15c5883a 	add	r2,r2,r23
   4b37c:	e73fffc4 	addi	fp,fp,-1
   4b380:	15c05d2e 	bgeu	r2,r23,4b4f8 <__umoddi3+0x578>
   4b384:	1463c83a 	sub	r17,r2,r17
   4b388:	8809883a 	mov	r4,r17
   4b38c:	a00b883a 	mov	r5,r20
   4b390:	0042fb40 	call	42fb4 <__udivsi3>
   4b394:	8809883a 	mov	r4,r17
   4b398:	a00b883a 	mov	r5,r20
   4b39c:	1021883a 	mov	r16,r2
   4b3a0:	0042fbc0 	call	42fbc <__umodsi3>
   4b3a4:	d8c00417 	ldw	r3,16(sp)
   4b3a8:	d9000217 	ldw	r4,8(sp)
   4b3ac:	1004943a 	slli	r2,r2,16
   4b3b0:	1c23383a 	mul	r17,r3,r16
   4b3b4:	20ffffcc 	andi	r3,r4,65535
   4b3b8:	10ceb03a 	or	r7,r2,r3
   4b3bc:	3c40032e 	bgeu	r7,r17,4b3cc <__umoddi3+0x44c>
   4b3c0:	3dcf883a 	add	r7,r7,r23
   4b3c4:	843fffc4 	addi	r16,r16,-1
   4b3c8:	3dc0472e 	bgeu	r7,r23,4b4e8 <__umoddi3+0x568>
   4b3cc:	e004943a 	slli	r2,fp,16
   4b3d0:	d9400017 	ldw	r5,0(sp)
   4b3d4:	3c4fc83a 	sub	r7,r7,r17
   4b3d8:	8084b03a 	or	r2,r16,r2
   4b3dc:	28ffffcc 	andi	r3,r5,65535
   4b3e0:	280cd43a 	srli	r6,r5,16
   4b3e4:	100ad43a 	srli	r5,r2,16
   4b3e8:	10bfffcc 	andi	r2,r2,65535
   4b3ec:	10d1383a 	mul	r8,r2,r3
   4b3f0:	28c7383a 	mul	r3,r5,r3
   4b3f4:	1185383a 	mul	r2,r2,r6
   4b3f8:	4008d43a 	srli	r4,r8,16
   4b3fc:	298b383a 	mul	r5,r5,r6
   4b400:	10c5883a 	add	r2,r2,r3
   4b404:	2089883a 	add	r4,r4,r2
   4b408:	20c0022e 	bgeu	r4,r3,4b414 <__umoddi3+0x494>
   4b40c:	00800074 	movhi	r2,1
   4b410:	288b883a 	add	r5,r5,r2
   4b414:	2004d43a 	srli	r2,r4,16
   4b418:	2008943a 	slli	r4,r4,16
   4b41c:	40ffffcc 	andi	r3,r8,65535
   4b420:	288b883a 	add	r5,r5,r2
   4b424:	20c9883a 	add	r4,r4,r3
   4b428:	39400b36 	bltu	r7,r5,4b458 <__umoddi3+0x4d8>
   4b42c:	39403d26 	beq	r7,r5,4b524 <__umoddi3+0x5a4>
   4b430:	394bc83a 	sub	r5,r7,r5
   4b434:	00000f06 	br	4b474 <__umoddi3+0x4f4>
   4b438:	30c5c83a 	sub	r2,r6,r3
   4b43c:	1839883a 	mov	fp,r3
   4b440:	b084d83a 	srl	r2,r22,r2
   4b444:	a0c6983a 	sll	r3,r20,r3
   4b448:	8720983a 	sll	r16,r16,fp
   4b44c:	b72c983a 	sll	r22,r22,fp
   4b450:	18a8b03a 	or	r20,r3,r2
   4b454:	003f3a06 	br	4b140 <__umoddi3+0x1c0>
   4b458:	d8c00017 	ldw	r3,0(sp)
   4b45c:	20c5c83a 	sub	r2,r4,r3
   4b460:	2089803a 	cmpltu	r4,r4,r2
   4b464:	2dc7c83a 	sub	r3,r5,r23
   4b468:	1907c83a 	sub	r3,r3,r4
   4b46c:	38cbc83a 	sub	r5,r7,r3
   4b470:	1009883a 	mov	r4,r2
   4b474:	b105c83a 	sub	r2,r22,r4
   4b478:	b087803a 	cmpltu	r3,r22,r2
   4b47c:	28c7c83a 	sub	r3,r5,r3
   4b480:	d9400317 	ldw	r5,12(sp)
   4b484:	1544d83a 	srl	r2,r2,r21
   4b488:	1948983a 	sll	r4,r3,r5
   4b48c:	1d46d83a 	srl	r3,r3,r21
   4b490:	20a4b03a 	or	r18,r4,r2
   4b494:	9011883a 	mov	r8,r18
   4b498:	1813883a 	mov	r9,r3
   4b49c:	003ef606 	br	4b078 <__umoddi3+0xf8>
   4b4a0:	01400604 	movi	r5,24
   4b4a4:	2805883a 	mov	r2,r5
   4b4a8:	003ecc06 	br	4afdc <__umoddi3+0x5c>
   4b4ac:	01400204 	movi	r5,8
   4b4b0:	2805883a 	mov	r2,r5
   4b4b4:	003ec906 	br	4afdc <__umoddi3+0x5c>
   4b4b8:	01400204 	movi	r5,8
   4b4bc:	2805883a 	mov	r2,r5
   4b4c0:	003f0106 	br	4b0c8 <__umoddi3+0x148>
   4b4c4:	01400204 	movi	r5,8
   4b4c8:	2805883a 	mov	r2,r5
   4b4cc:	003f1206 	br	4b118 <__umoddi3+0x198>
   4b4d0:	01400604 	movi	r5,24
   4b4d4:	2805883a 	mov	r2,r5
   4b4d8:	003f0f06 	br	4b118 <__umoddi3+0x198>
   4b4dc:	01400604 	movi	r5,24
   4b4e0:	2805883a 	mov	r2,r5
   4b4e4:	003ef806 	br	4b0c8 <__umoddi3+0x148>
   4b4e8:	3c7fb82e 	bgeu	r7,r17,4b3cc <__umoddi3+0x44c>
   4b4ec:	843fffc4 	addi	r16,r16,-1
   4b4f0:	3dcf883a 	add	r7,r7,r23
   4b4f4:	003fb506 	br	4b3cc <__umoddi3+0x44c>
   4b4f8:	147fa22e 	bgeu	r2,r17,4b384 <__umoddi3+0x404>
   4b4fc:	e73fffc4 	addi	fp,fp,-1
   4b500:	15c5883a 	add	r2,r2,r23
   4b504:	003f9f06 	br	4b384 <__umoddi3+0x404>
   4b508:	147f692e 	bgeu	r2,r17,4b2b0 <__umoddi3+0x330>
   4b50c:	1405883a 	add	r2,r2,r16
   4b510:	003f6706 	br	4b2b0 <__umoddi3+0x330>
   4b514:	1405883a 	add	r2,r2,r16
   4b518:	003f1906 	br	4b180 <__umoddi3+0x200>
   4b51c:	1405883a 	add	r2,r2,r16
   4b520:	003ec906 	br	4b048 <__umoddi3+0xc8>
   4b524:	b13fcc36 	bltu	r22,r4,4b458 <__umoddi3+0x4d8>
   4b528:	000b883a 	mov	r5,zero
   4b52c:	003fd106 	br	4b474 <__umoddi3+0x4f4>

0004b530 <_fpadd_parts>:
   4b530:	defff804 	addi	sp,sp,-32
   4b534:	dcc00315 	stw	r19,12(sp)
   4b538:	2027883a 	mov	r19,r4
   4b53c:	21000017 	ldw	r4,0(r4)
   4b540:	00c00044 	movi	r3,1
   4b544:	dd400515 	stw	r21,20(sp)
   4b548:	dd000415 	stw	r20,16(sp)
   4b54c:	ddc00715 	stw	r23,28(sp)
   4b550:	dd800615 	stw	r22,24(sp)
   4b554:	dc800215 	stw	r18,8(sp)
   4b558:	dc400115 	stw	r17,4(sp)
   4b55c:	dc000015 	stw	r16,0(sp)
   4b560:	282b883a 	mov	r21,r5
   4b564:	3029883a 	mov	r20,r6
   4b568:	1900632e 	bgeu	r3,r4,4b6f8 <_fpadd_parts+0x1c8>
   4b56c:	28800017 	ldw	r2,0(r5)
   4b570:	1880812e 	bgeu	r3,r2,4b778 <_fpadd_parts+0x248>
   4b574:	00c00104 	movi	r3,4
   4b578:	20c0dc26 	beq	r4,r3,4b8ec <_fpadd_parts+0x3bc>
   4b57c:	10c07e26 	beq	r2,r3,4b778 <_fpadd_parts+0x248>
   4b580:	00c00084 	movi	r3,2
   4b584:	10c06726 	beq	r2,r3,4b724 <_fpadd_parts+0x1f4>
   4b588:	20c07b26 	beq	r4,r3,4b778 <_fpadd_parts+0x248>
   4b58c:	9dc00217 	ldw	r23,8(r19)
   4b590:	28c00217 	ldw	r3,8(r5)
   4b594:	9c400317 	ldw	r17,12(r19)
   4b598:	2bc00317 	ldw	r15,12(r5)
   4b59c:	b8cdc83a 	sub	r6,r23,r3
   4b5a0:	9c800417 	ldw	r18,16(r19)
   4b5a4:	2c000417 	ldw	r16,16(r5)
   4b5a8:	3009883a 	mov	r4,r6
   4b5ac:	30009716 	blt	r6,zero,4b80c <_fpadd_parts+0x2dc>
   4b5b0:	00800fc4 	movi	r2,63
   4b5b4:	11806b16 	blt	r2,r6,4b764 <_fpadd_parts+0x234>
   4b5b8:	0100a40e 	bge	zero,r4,4b84c <_fpadd_parts+0x31c>
   4b5bc:	35bff804 	addi	r22,r6,-32
   4b5c0:	b000bc16 	blt	r22,zero,4b8b4 <_fpadd_parts+0x384>
   4b5c4:	8596d83a 	srl	r11,r16,r22
   4b5c8:	0019883a 	mov	r12,zero
   4b5cc:	0013883a 	mov	r9,zero
   4b5d0:	01000044 	movi	r4,1
   4b5d4:	0015883a 	mov	r10,zero
   4b5d8:	b000be16 	blt	r22,zero,4b8d4 <_fpadd_parts+0x3a4>
   4b5dc:	2590983a 	sll	r8,r4,r22
   4b5e0:	000f883a 	mov	r7,zero
   4b5e4:	00bfffc4 	movi	r2,-1
   4b5e8:	3889883a 	add	r4,r7,r2
   4b5ec:	408b883a 	add	r5,r8,r2
   4b5f0:	21cd803a 	cmpltu	r6,r4,r7
   4b5f4:	314b883a 	add	r5,r6,r5
   4b5f8:	7904703a 	and	r2,r15,r4
   4b5fc:	8146703a 	and	r3,r16,r5
   4b600:	10c4b03a 	or	r2,r2,r3
   4b604:	10000226 	beq	r2,zero,4b610 <_fpadd_parts+0xe0>
   4b608:	02400044 	movi	r9,1
   4b60c:	0015883a 	mov	r10,zero
   4b610:	5a5eb03a 	or	r15,r11,r9
   4b614:	62a0b03a 	or	r16,r12,r10
   4b618:	99400117 	ldw	r5,4(r19)
   4b61c:	a8800117 	ldw	r2,4(r21)
   4b620:	28806e26 	beq	r5,r2,4b7dc <_fpadd_parts+0x2ac>
   4b624:	28006626 	beq	r5,zero,4b7c0 <_fpadd_parts+0x290>
   4b628:	7c45c83a 	sub	r2,r15,r17
   4b62c:	7889803a 	cmpltu	r4,r15,r2
   4b630:	8487c83a 	sub	r3,r16,r18
   4b634:	1909c83a 	sub	r4,r3,r4
   4b638:	100d883a 	mov	r6,r2
   4b63c:	200f883a 	mov	r7,r4
   4b640:	38007716 	blt	r7,zero,4b820 <_fpadd_parts+0x2f0>
   4b644:	a5c00215 	stw	r23,8(r20)
   4b648:	a1c00415 	stw	r7,16(r20)
   4b64c:	a0000115 	stw	zero,4(r20)
   4b650:	a1800315 	stw	r6,12(r20)
   4b654:	a2000317 	ldw	r8,12(r20)
   4b658:	a2400417 	ldw	r9,16(r20)
   4b65c:	00bfffc4 	movi	r2,-1
   4b660:	408b883a 	add	r5,r8,r2
   4b664:	2a09803a 	cmpltu	r4,r5,r8
   4b668:	488d883a 	add	r6,r9,r2
   4b66c:	01c40034 	movhi	r7,4096
   4b670:	39ffffc4 	addi	r7,r7,-1
   4b674:	218d883a 	add	r6,r4,r6
   4b678:	39801736 	bltu	r7,r6,4b6d8 <_fpadd_parts+0x1a8>
   4b67c:	31c06526 	beq	r6,r7,4b814 <_fpadd_parts+0x2e4>
   4b680:	a3000217 	ldw	r12,8(r20)
   4b684:	4209883a 	add	r4,r8,r8
   4b688:	00bfffc4 	movi	r2,-1
   4b68c:	220f803a 	cmpltu	r7,r4,r8
   4b690:	4a4b883a 	add	r5,r9,r9
   4b694:	394f883a 	add	r7,r7,r5
   4b698:	2095883a 	add	r10,r4,r2
   4b69c:	3897883a 	add	r11,r7,r2
   4b6a0:	510d803a 	cmpltu	r6,r10,r4
   4b6a4:	6099883a 	add	r12,r12,r2
   4b6a8:	32d7883a 	add	r11,r6,r11
   4b6ac:	00840034 	movhi	r2,4096
   4b6b0:	10bfffc4 	addi	r2,r2,-1
   4b6b4:	2011883a 	mov	r8,r4
   4b6b8:	3813883a 	mov	r9,r7
   4b6bc:	a1000315 	stw	r4,12(r20)
   4b6c0:	a1c00415 	stw	r7,16(r20)
   4b6c4:	a3000215 	stw	r12,8(r20)
   4b6c8:	12c00336 	bltu	r2,r11,4b6d8 <_fpadd_parts+0x1a8>
   4b6cc:	58bfed1e 	bne	r11,r2,4b684 <_fpadd_parts+0x154>
   4b6d0:	00bfff84 	movi	r2,-2
   4b6d4:	12bfeb2e 	bgeu	r2,r10,4b684 <_fpadd_parts+0x154>
   4b6d8:	a2800417 	ldw	r10,16(r20)
   4b6dc:	008000c4 	movi	r2,3
   4b6e0:	00c80034 	movhi	r3,8192
   4b6e4:	18ffffc4 	addi	r3,r3,-1
   4b6e8:	a2400317 	ldw	r9,12(r20)
   4b6ec:	a0800015 	stw	r2,0(r20)
   4b6f0:	1a802336 	bltu	r3,r10,4b780 <_fpadd_parts+0x250>
   4b6f4:	a027883a 	mov	r19,r20
   4b6f8:	9805883a 	mov	r2,r19
   4b6fc:	ddc00717 	ldw	r23,28(sp)
   4b700:	dd800617 	ldw	r22,24(sp)
   4b704:	dd400517 	ldw	r21,20(sp)
   4b708:	dd000417 	ldw	r20,16(sp)
   4b70c:	dcc00317 	ldw	r19,12(sp)
   4b710:	dc800217 	ldw	r18,8(sp)
   4b714:	dc400117 	ldw	r17,4(sp)
   4b718:	dc000017 	ldw	r16,0(sp)
   4b71c:	dec00804 	addi	sp,sp,32
   4b720:	f800283a 	ret
   4b724:	20fff41e 	bne	r4,r3,4b6f8 <_fpadd_parts+0x1c8>
   4b728:	31000015 	stw	r4,0(r6)
   4b72c:	98800117 	ldw	r2,4(r19)
   4b730:	30800115 	stw	r2,4(r6)
   4b734:	98c00217 	ldw	r3,8(r19)
   4b738:	30c00215 	stw	r3,8(r6)
   4b73c:	98800317 	ldw	r2,12(r19)
   4b740:	30800315 	stw	r2,12(r6)
   4b744:	98c00417 	ldw	r3,16(r19)
   4b748:	30c00415 	stw	r3,16(r6)
   4b74c:	98800117 	ldw	r2,4(r19)
   4b750:	28c00117 	ldw	r3,4(r5)
   4b754:	3027883a 	mov	r19,r6
   4b758:	10c4703a 	and	r2,r2,r3
   4b75c:	30800115 	stw	r2,4(r6)
   4b760:	003fe506 	br	4b6f8 <_fpadd_parts+0x1c8>
   4b764:	1dc02616 	blt	r3,r23,4b800 <_fpadd_parts+0x2d0>
   4b768:	0023883a 	mov	r17,zero
   4b76c:	182f883a 	mov	r23,r3
   4b770:	0025883a 	mov	r18,zero
   4b774:	003fa806 	br	4b618 <_fpadd_parts+0xe8>
   4b778:	a827883a 	mov	r19,r21
   4b77c:	003fde06 	br	4b6f8 <_fpadd_parts+0x1c8>
   4b780:	01800044 	movi	r6,1
   4b784:	500497fa 	slli	r2,r10,31
   4b788:	4808d07a 	srli	r4,r9,1
   4b78c:	518ad83a 	srl	r5,r10,r6
   4b790:	a2000217 	ldw	r8,8(r20)
   4b794:	1108b03a 	or	r4,r2,r4
   4b798:	0007883a 	mov	r3,zero
   4b79c:	4984703a 	and	r2,r9,r6
   4b7a0:	208cb03a 	or	r6,r4,r2
   4b7a4:	28ceb03a 	or	r7,r5,r3
   4b7a8:	42000044 	addi	r8,r8,1
   4b7ac:	a027883a 	mov	r19,r20
   4b7b0:	a1c00415 	stw	r7,16(r20)
   4b7b4:	a2000215 	stw	r8,8(r20)
   4b7b8:	a1800315 	stw	r6,12(r20)
   4b7bc:	003fce06 	br	4b6f8 <_fpadd_parts+0x1c8>
   4b7c0:	8bc5c83a 	sub	r2,r17,r15
   4b7c4:	8889803a 	cmpltu	r4,r17,r2
   4b7c8:	9407c83a 	sub	r3,r18,r16
   4b7cc:	1909c83a 	sub	r4,r3,r4
   4b7d0:	100d883a 	mov	r6,r2
   4b7d4:	200f883a 	mov	r7,r4
   4b7d8:	003f9906 	br	4b640 <_fpadd_parts+0x110>
   4b7dc:	7c45883a 	add	r2,r15,r17
   4b7e0:	13c9803a 	cmpltu	r4,r2,r15
   4b7e4:	8487883a 	add	r3,r16,r18
   4b7e8:	20c9883a 	add	r4,r4,r3
   4b7ec:	a1400115 	stw	r5,4(r20)
   4b7f0:	a5c00215 	stw	r23,8(r20)
   4b7f4:	a0800315 	stw	r2,12(r20)
   4b7f8:	a1000415 	stw	r4,16(r20)
   4b7fc:	003fb606 	br	4b6d8 <_fpadd_parts+0x1a8>
   4b800:	001f883a 	mov	r15,zero
   4b804:	0021883a 	mov	r16,zero
   4b808:	003f8306 	br	4b618 <_fpadd_parts+0xe8>
   4b80c:	018dc83a 	sub	r6,zero,r6
   4b810:	003f6706 	br	4b5b0 <_fpadd_parts+0x80>
   4b814:	00bfff84 	movi	r2,-2
   4b818:	117faf36 	bltu	r2,r5,4b6d8 <_fpadd_parts+0x1a8>
   4b81c:	003f9806 	br	4b680 <_fpadd_parts+0x150>
   4b820:	0005883a 	mov	r2,zero
   4b824:	1189c83a 	sub	r4,r2,r6
   4b828:	1105803a 	cmpltu	r2,r2,r4
   4b82c:	01cbc83a 	sub	r5,zero,r7
   4b830:	2885c83a 	sub	r2,r5,r2
   4b834:	01800044 	movi	r6,1
   4b838:	a1800115 	stw	r6,4(r20)
   4b83c:	a5c00215 	stw	r23,8(r20)
   4b840:	a1000315 	stw	r4,12(r20)
   4b844:	a0800415 	stw	r2,16(r20)
   4b848:	003f8206 	br	4b654 <_fpadd_parts+0x124>
   4b84c:	203f7226 	beq	r4,zero,4b618 <_fpadd_parts+0xe8>
   4b850:	35bff804 	addi	r22,r6,-32
   4b854:	b9af883a 	add	r23,r23,r6
   4b858:	b0003116 	blt	r22,zero,4b920 <_fpadd_parts+0x3f0>
   4b85c:	959ad83a 	srl	r13,r18,r22
   4b860:	001d883a 	mov	r14,zero
   4b864:	000f883a 	mov	r7,zero
   4b868:	01000044 	movi	r4,1
   4b86c:	0011883a 	mov	r8,zero
   4b870:	b0002516 	blt	r22,zero,4b908 <_fpadd_parts+0x3d8>
   4b874:	2594983a 	sll	r10,r4,r22
   4b878:	0013883a 	mov	r9,zero
   4b87c:	00bfffc4 	movi	r2,-1
   4b880:	4889883a 	add	r4,r9,r2
   4b884:	508b883a 	add	r5,r10,r2
   4b888:	224d803a 	cmpltu	r6,r4,r9
   4b88c:	314b883a 	add	r5,r6,r5
   4b890:	8904703a 	and	r2,r17,r4
   4b894:	9146703a 	and	r3,r18,r5
   4b898:	10c4b03a 	or	r2,r2,r3
   4b89c:	10000226 	beq	r2,zero,4b8a8 <_fpadd_parts+0x378>
   4b8a0:	01c00044 	movi	r7,1
   4b8a4:	0011883a 	mov	r8,zero
   4b8a8:	69e2b03a 	or	r17,r13,r7
   4b8ac:	7224b03a 	or	r18,r14,r8
   4b8b0:	003f5906 	br	4b618 <_fpadd_parts+0xe8>
   4b8b4:	8407883a 	add	r3,r16,r16
   4b8b8:	008007c4 	movi	r2,31
   4b8bc:	1185c83a 	sub	r2,r2,r6
   4b8c0:	1886983a 	sll	r3,r3,r2
   4b8c4:	7996d83a 	srl	r11,r15,r6
   4b8c8:	8198d83a 	srl	r12,r16,r6
   4b8cc:	1ad6b03a 	or	r11,r3,r11
   4b8d0:	003f3e06 	br	4b5cc <_fpadd_parts+0x9c>
   4b8d4:	2006d07a 	srli	r3,r4,1
   4b8d8:	008007c4 	movi	r2,31
   4b8dc:	1185c83a 	sub	r2,r2,r6
   4b8e0:	1890d83a 	srl	r8,r3,r2
   4b8e4:	218e983a 	sll	r7,r4,r6
   4b8e8:	003f3e06 	br	4b5e4 <_fpadd_parts+0xb4>
   4b8ec:	113f821e 	bne	r2,r4,4b6f8 <_fpadd_parts+0x1c8>
   4b8f0:	28c00117 	ldw	r3,4(r5)
   4b8f4:	98800117 	ldw	r2,4(r19)
   4b8f8:	10ff7f26 	beq	r2,r3,4b6f8 <_fpadd_parts+0x1c8>
   4b8fc:	04c00174 	movhi	r19,5
   4b900:	9cc00804 	addi	r19,r19,32
   4b904:	003f7c06 	br	4b6f8 <_fpadd_parts+0x1c8>
   4b908:	2006d07a 	srli	r3,r4,1
   4b90c:	008007c4 	movi	r2,31
   4b910:	1185c83a 	sub	r2,r2,r6
   4b914:	1894d83a 	srl	r10,r3,r2
   4b918:	2192983a 	sll	r9,r4,r6
   4b91c:	003fd706 	br	4b87c <_fpadd_parts+0x34c>
   4b920:	9487883a 	add	r3,r18,r18
   4b924:	008007c4 	movi	r2,31
   4b928:	1185c83a 	sub	r2,r2,r6
   4b92c:	1886983a 	sll	r3,r3,r2
   4b930:	899ad83a 	srl	r13,r17,r6
   4b934:	919cd83a 	srl	r14,r18,r6
   4b938:	1b5ab03a 	or	r13,r3,r13
   4b93c:	003fc906 	br	4b864 <_fpadd_parts+0x334>

0004b940 <__subdf3>:
   4b940:	deffea04 	addi	sp,sp,-88
   4b944:	dcc01415 	stw	r19,80(sp)
   4b948:	dcc00404 	addi	r19,sp,16
   4b94c:	2011883a 	mov	r8,r4
   4b950:	2813883a 	mov	r9,r5
   4b954:	dc401315 	stw	r17,76(sp)
   4b958:	d809883a 	mov	r4,sp
   4b95c:	980b883a 	mov	r5,r19
   4b960:	dc400904 	addi	r17,sp,36
   4b964:	dfc01515 	stw	ra,84(sp)
   4b968:	da400115 	stw	r9,4(sp)
   4b96c:	d9c00315 	stw	r7,12(sp)
   4b970:	da000015 	stw	r8,0(sp)
   4b974:	d9800215 	stw	r6,8(sp)
   4b978:	004c6dc0 	call	4c6dc <__unpack_d>
   4b97c:	d9000204 	addi	r4,sp,8
   4b980:	880b883a 	mov	r5,r17
   4b984:	004c6dc0 	call	4c6dc <__unpack_d>
   4b988:	d8800a17 	ldw	r2,40(sp)
   4b98c:	880b883a 	mov	r5,r17
   4b990:	9809883a 	mov	r4,r19
   4b994:	d9800e04 	addi	r6,sp,56
   4b998:	1080005c 	xori	r2,r2,1
   4b99c:	d8800a15 	stw	r2,40(sp)
   4b9a0:	004b5300 	call	4b530 <_fpadd_parts>
   4b9a4:	1009883a 	mov	r4,r2
   4b9a8:	00432840 	call	43284 <__pack_d>
   4b9ac:	dfc01517 	ldw	ra,84(sp)
   4b9b0:	dcc01417 	ldw	r19,80(sp)
   4b9b4:	dc401317 	ldw	r17,76(sp)
   4b9b8:	dec01604 	addi	sp,sp,88
   4b9bc:	f800283a 	ret

0004b9c0 <__adddf3>:
   4b9c0:	deffea04 	addi	sp,sp,-88
   4b9c4:	dcc01415 	stw	r19,80(sp)
   4b9c8:	dcc00404 	addi	r19,sp,16
   4b9cc:	2011883a 	mov	r8,r4
   4b9d0:	2813883a 	mov	r9,r5
   4b9d4:	dc401315 	stw	r17,76(sp)
   4b9d8:	d809883a 	mov	r4,sp
   4b9dc:	980b883a 	mov	r5,r19
   4b9e0:	dc400904 	addi	r17,sp,36
   4b9e4:	dfc01515 	stw	ra,84(sp)
   4b9e8:	da400115 	stw	r9,4(sp)
   4b9ec:	d9c00315 	stw	r7,12(sp)
   4b9f0:	da000015 	stw	r8,0(sp)
   4b9f4:	d9800215 	stw	r6,8(sp)
   4b9f8:	004c6dc0 	call	4c6dc <__unpack_d>
   4b9fc:	d9000204 	addi	r4,sp,8
   4ba00:	880b883a 	mov	r5,r17
   4ba04:	004c6dc0 	call	4c6dc <__unpack_d>
   4ba08:	d9800e04 	addi	r6,sp,56
   4ba0c:	9809883a 	mov	r4,r19
   4ba10:	880b883a 	mov	r5,r17
   4ba14:	004b5300 	call	4b530 <_fpadd_parts>
   4ba18:	1009883a 	mov	r4,r2
   4ba1c:	00432840 	call	43284 <__pack_d>
   4ba20:	dfc01517 	ldw	ra,84(sp)
   4ba24:	dcc01417 	ldw	r19,80(sp)
   4ba28:	dc401317 	ldw	r17,76(sp)
   4ba2c:	dec01604 	addi	sp,sp,88
   4ba30:	f800283a 	ret

0004ba34 <__muldf3>:
   4ba34:	deffe004 	addi	sp,sp,-128
   4ba38:	dc401815 	stw	r17,96(sp)
   4ba3c:	dc400404 	addi	r17,sp,16
   4ba40:	2011883a 	mov	r8,r4
   4ba44:	2813883a 	mov	r9,r5
   4ba48:	dc001715 	stw	r16,92(sp)
   4ba4c:	d809883a 	mov	r4,sp
   4ba50:	880b883a 	mov	r5,r17
   4ba54:	dc000904 	addi	r16,sp,36
   4ba58:	dfc01f15 	stw	ra,124(sp)
   4ba5c:	da400115 	stw	r9,4(sp)
   4ba60:	d9c00315 	stw	r7,12(sp)
   4ba64:	da000015 	stw	r8,0(sp)
   4ba68:	d9800215 	stw	r6,8(sp)
   4ba6c:	ddc01e15 	stw	r23,120(sp)
   4ba70:	dd801d15 	stw	r22,116(sp)
   4ba74:	dd401c15 	stw	r21,112(sp)
   4ba78:	dd001b15 	stw	r20,108(sp)
   4ba7c:	dcc01a15 	stw	r19,104(sp)
   4ba80:	dc801915 	stw	r18,100(sp)
   4ba84:	004c6dc0 	call	4c6dc <__unpack_d>
   4ba88:	d9000204 	addi	r4,sp,8
   4ba8c:	800b883a 	mov	r5,r16
   4ba90:	004c6dc0 	call	4c6dc <__unpack_d>
   4ba94:	d9000417 	ldw	r4,16(sp)
   4ba98:	00800044 	movi	r2,1
   4ba9c:	1100102e 	bgeu	r2,r4,4bae0 <__muldf3+0xac>
   4baa0:	d8c00917 	ldw	r3,36(sp)
   4baa4:	10c0062e 	bgeu	r2,r3,4bac0 <__muldf3+0x8c>
   4baa8:	00800104 	movi	r2,4
   4baac:	20800a26 	beq	r4,r2,4bad8 <__muldf3+0xa4>
   4bab0:	1880cc26 	beq	r3,r2,4bde4 <__muldf3+0x3b0>
   4bab4:	00800084 	movi	r2,2
   4bab8:	20800926 	beq	r4,r2,4bae0 <__muldf3+0xac>
   4babc:	1880191e 	bne	r3,r2,4bb24 <__muldf3+0xf0>
   4bac0:	d8c00a17 	ldw	r3,40(sp)
   4bac4:	d8800517 	ldw	r2,20(sp)
   4bac8:	8009883a 	mov	r4,r16
   4bacc:	10c4c03a 	cmpne	r2,r2,r3
   4bad0:	d8800a15 	stw	r2,40(sp)
   4bad4:	00000706 	br	4baf4 <__muldf3+0xc0>
   4bad8:	00800084 	movi	r2,2
   4badc:	1880c326 	beq	r3,r2,4bdec <__muldf3+0x3b8>
   4bae0:	d8800517 	ldw	r2,20(sp)
   4bae4:	d8c00a17 	ldw	r3,40(sp)
   4bae8:	8809883a 	mov	r4,r17
   4baec:	10c4c03a 	cmpne	r2,r2,r3
   4baf0:	d8800515 	stw	r2,20(sp)
   4baf4:	00432840 	call	43284 <__pack_d>
   4baf8:	dfc01f17 	ldw	ra,124(sp)
   4bafc:	ddc01e17 	ldw	r23,120(sp)
   4bb00:	dd801d17 	ldw	r22,116(sp)
   4bb04:	dd401c17 	ldw	r21,112(sp)
   4bb08:	dd001b17 	ldw	r20,108(sp)
   4bb0c:	dcc01a17 	ldw	r19,104(sp)
   4bb10:	dc801917 	ldw	r18,100(sp)
   4bb14:	dc401817 	ldw	r17,96(sp)
   4bb18:	dc001717 	ldw	r16,92(sp)
   4bb1c:	dec02004 	addi	sp,sp,128
   4bb20:	f800283a 	ret
   4bb24:	dd800717 	ldw	r22,28(sp)
   4bb28:	dc800c17 	ldw	r18,48(sp)
   4bb2c:	002b883a 	mov	r21,zero
   4bb30:	0023883a 	mov	r17,zero
   4bb34:	a80b883a 	mov	r5,r21
   4bb38:	b00d883a 	mov	r6,r22
   4bb3c:	880f883a 	mov	r7,r17
   4bb40:	ddc00817 	ldw	r23,32(sp)
   4bb44:	dcc00d17 	ldw	r19,52(sp)
   4bb48:	9009883a 	mov	r4,r18
   4bb4c:	0042fc40 	call	42fc4 <__muldi3>
   4bb50:	001b883a 	mov	r13,zero
   4bb54:	680f883a 	mov	r7,r13
   4bb58:	b009883a 	mov	r4,r22
   4bb5c:	000b883a 	mov	r5,zero
   4bb60:	980d883a 	mov	r6,r19
   4bb64:	b82d883a 	mov	r22,r23
   4bb68:	002f883a 	mov	r23,zero
   4bb6c:	db401615 	stw	r13,88(sp)
   4bb70:	d8801315 	stw	r2,76(sp)
   4bb74:	d8c01415 	stw	r3,80(sp)
   4bb78:	dcc01515 	stw	r19,84(sp)
   4bb7c:	0042fc40 	call	42fc4 <__muldi3>
   4bb80:	b00d883a 	mov	r6,r22
   4bb84:	000b883a 	mov	r5,zero
   4bb88:	9009883a 	mov	r4,r18
   4bb8c:	b80f883a 	mov	r7,r23
   4bb90:	1021883a 	mov	r16,r2
   4bb94:	1823883a 	mov	r17,r3
   4bb98:	0042fc40 	call	42fc4 <__muldi3>
   4bb9c:	8085883a 	add	r2,r16,r2
   4bba0:	140d803a 	cmpltu	r6,r2,r16
   4bba4:	88c7883a 	add	r3,r17,r3
   4bba8:	30cd883a 	add	r6,r6,r3
   4bbac:	1029883a 	mov	r20,r2
   4bbb0:	302b883a 	mov	r21,r6
   4bbb4:	da801317 	ldw	r10,76(sp)
   4bbb8:	dac01417 	ldw	r11,80(sp)
   4bbbc:	db001517 	ldw	r12,84(sp)
   4bbc0:	db401617 	ldw	r13,88(sp)
   4bbc4:	3440612e 	bgeu	r6,r17,4bd4c <__muldf3+0x318>
   4bbc8:	0009883a 	mov	r4,zero
   4bbcc:	5105883a 	add	r2,r10,r4
   4bbd0:	128d803a 	cmpltu	r6,r2,r10
   4bbd4:	5d07883a 	add	r3,r11,r20
   4bbd8:	30cd883a 	add	r6,r6,r3
   4bbdc:	0021883a 	mov	r16,zero
   4bbe0:	04400044 	movi	r17,1
   4bbe4:	1025883a 	mov	r18,r2
   4bbe8:	3027883a 	mov	r19,r6
   4bbec:	32c06236 	bltu	r6,r11,4bd78 <__muldf3+0x344>
   4bbf0:	59807a26 	beq	r11,r6,4bddc <__muldf3+0x3a8>
   4bbf4:	680b883a 	mov	r5,r13
   4bbf8:	b80f883a 	mov	r7,r23
   4bbfc:	6009883a 	mov	r4,r12
   4bc00:	b00d883a 	mov	r6,r22
   4bc04:	0042fc40 	call	42fc4 <__muldi3>
   4bc08:	1009883a 	mov	r4,r2
   4bc0c:	000f883a 	mov	r7,zero
   4bc10:	1545883a 	add	r2,r2,r21
   4bc14:	1111803a 	cmpltu	r8,r2,r4
   4bc18:	19c7883a 	add	r3,r3,r7
   4bc1c:	40c7883a 	add	r3,r8,r3
   4bc20:	88cb883a 	add	r5,r17,r3
   4bc24:	d8c00617 	ldw	r3,24(sp)
   4bc28:	8089883a 	add	r4,r16,r2
   4bc2c:	d8800b17 	ldw	r2,44(sp)
   4bc30:	18c00104 	addi	r3,r3,4
   4bc34:	240d803a 	cmpltu	r6,r4,r16
   4bc38:	10c7883a 	add	r3,r2,r3
   4bc3c:	2013883a 	mov	r9,r4
   4bc40:	d8800a17 	ldw	r2,40(sp)
   4bc44:	d9000517 	ldw	r4,20(sp)
   4bc48:	314d883a 	add	r6,r6,r5
   4bc4c:	3015883a 	mov	r10,r6
   4bc50:	2088c03a 	cmpne	r4,r4,r2
   4bc54:	00880034 	movhi	r2,8192
   4bc58:	10bfffc4 	addi	r2,r2,-1
   4bc5c:	d9000f15 	stw	r4,60(sp)
   4bc60:	d8c01015 	stw	r3,64(sp)
   4bc64:	1180162e 	bgeu	r2,r6,4bcc0 <__muldf3+0x28c>
   4bc68:	1811883a 	mov	r8,r3
   4bc6c:	101f883a 	mov	r15,r2
   4bc70:	980497fa 	slli	r2,r19,31
   4bc74:	9016d07a 	srli	r11,r18,1
   4bc78:	500697fa 	slli	r3,r10,31
   4bc7c:	480cd07a 	srli	r6,r9,1
   4bc80:	500ed07a 	srli	r7,r10,1
   4bc84:	12d6b03a 	or	r11,r2,r11
   4bc88:	00800044 	movi	r2,1
   4bc8c:	198cb03a 	or	r6,r3,r6
   4bc90:	4888703a 	and	r4,r9,r2
   4bc94:	9818d07a 	srli	r12,r19,1
   4bc98:	001b883a 	mov	r13,zero
   4bc9c:	03a00034 	movhi	r14,32768
   4bca0:	3013883a 	mov	r9,r6
   4bca4:	3815883a 	mov	r10,r7
   4bca8:	4091883a 	add	r8,r8,r2
   4bcac:	20000226 	beq	r4,zero,4bcb8 <__muldf3+0x284>
   4bcb0:	5b64b03a 	or	r18,r11,r13
   4bcb4:	63a6b03a 	or	r19,r12,r14
   4bcb8:	7abfed36 	bltu	r15,r10,4bc70 <__muldf3+0x23c>
   4bcbc:	da001015 	stw	r8,64(sp)
   4bcc0:	00840034 	movhi	r2,4096
   4bcc4:	10bfffc4 	addi	r2,r2,-1
   4bcc8:	12801436 	bltu	r2,r10,4bd1c <__muldf3+0x2e8>
   4bccc:	da001017 	ldw	r8,64(sp)
   4bcd0:	101f883a 	mov	r15,r2
   4bcd4:	4a45883a 	add	r2,r9,r9
   4bcd8:	124d803a 	cmpltu	r6,r2,r9
   4bcdc:	5287883a 	add	r3,r10,r10
   4bce0:	9497883a 	add	r11,r18,r18
   4bce4:	5c8f803a 	cmpltu	r7,r11,r18
   4bce8:	9cd9883a 	add	r12,r19,r19
   4bcec:	01000044 	movi	r4,1
   4bcf0:	30cd883a 	add	r6,r6,r3
   4bcf4:	3b0f883a 	add	r7,r7,r12
   4bcf8:	423fffc4 	addi	r8,r8,-1
   4bcfc:	1013883a 	mov	r9,r2
   4bd00:	3015883a 	mov	r10,r6
   4bd04:	111ab03a 	or	r13,r2,r4
   4bd08:	98003016 	blt	r19,zero,4bdcc <__muldf3+0x398>
   4bd0c:	5825883a 	mov	r18,r11
   4bd10:	3827883a 	mov	r19,r7
   4bd14:	7abfef2e 	bgeu	r15,r10,4bcd4 <__muldf3+0x2a0>
   4bd18:	da001015 	stw	r8,64(sp)
   4bd1c:	00803fc4 	movi	r2,255
   4bd20:	488e703a 	and	r7,r9,r2
   4bd24:	00802004 	movi	r2,128
   4bd28:	0007883a 	mov	r3,zero
   4bd2c:	0011883a 	mov	r8,zero
   4bd30:	38801826 	beq	r7,r2,4bd94 <__muldf3+0x360>
   4bd34:	008000c4 	movi	r2,3
   4bd38:	d9000e04 	addi	r4,sp,56
   4bd3c:	da801215 	stw	r10,72(sp)
   4bd40:	d8800e15 	stw	r2,56(sp)
   4bd44:	da401115 	stw	r9,68(sp)
   4bd48:	003f6a06 	br	4baf4 <__muldf3+0xc0>
   4bd4c:	89802126 	beq	r17,r6,4bdd4 <__muldf3+0x3a0>
   4bd50:	0009883a 	mov	r4,zero
   4bd54:	5105883a 	add	r2,r10,r4
   4bd58:	128d803a 	cmpltu	r6,r2,r10
   4bd5c:	5d07883a 	add	r3,r11,r20
   4bd60:	30cd883a 	add	r6,r6,r3
   4bd64:	0021883a 	mov	r16,zero
   4bd68:	0023883a 	mov	r17,zero
   4bd6c:	1025883a 	mov	r18,r2
   4bd70:	3027883a 	mov	r19,r6
   4bd74:	32ff9e2e 	bgeu	r6,r11,4bbf0 <__muldf3+0x1bc>
   4bd78:	00800044 	movi	r2,1
   4bd7c:	8089883a 	add	r4,r16,r2
   4bd80:	240d803a 	cmpltu	r6,r4,r16
   4bd84:	344d883a 	add	r6,r6,r17
   4bd88:	2021883a 	mov	r16,r4
   4bd8c:	3023883a 	mov	r17,r6
   4bd90:	003f9806 	br	4bbf4 <__muldf3+0x1c0>
   4bd94:	403fe71e 	bne	r8,zero,4bd34 <__muldf3+0x300>
   4bd98:	01004004 	movi	r4,256
   4bd9c:	4904703a 	and	r2,r9,r4
   4bda0:	10c4b03a 	or	r2,r2,r3
   4bda4:	103fe31e 	bne	r2,zero,4bd34 <__muldf3+0x300>
   4bda8:	94c4b03a 	or	r2,r18,r19
   4bdac:	103fe126 	beq	r2,zero,4bd34 <__muldf3+0x300>
   4bdb0:	49c5883a 	add	r2,r9,r7
   4bdb4:	1251803a 	cmpltu	r8,r2,r9
   4bdb8:	4291883a 	add	r8,r8,r10
   4bdbc:	013fc004 	movi	r4,-256
   4bdc0:	1112703a 	and	r9,r2,r4
   4bdc4:	4015883a 	mov	r10,r8
   4bdc8:	003fda06 	br	4bd34 <__muldf3+0x300>
   4bdcc:	6813883a 	mov	r9,r13
   4bdd0:	003fce06 	br	4bd0c <__muldf3+0x2d8>
   4bdd4:	143f7c36 	bltu	r2,r16,4bbc8 <__muldf3+0x194>
   4bdd8:	003fdd06 	br	4bd50 <__muldf3+0x31c>
   4bddc:	12bf852e 	bgeu	r2,r10,4bbf4 <__muldf3+0x1c0>
   4bde0:	003fe506 	br	4bd78 <__muldf3+0x344>
   4bde4:	00800084 	movi	r2,2
   4bde8:	20bf351e 	bne	r4,r2,4bac0 <__muldf3+0x8c>
   4bdec:	01000174 	movhi	r4,5
   4bdf0:	21000804 	addi	r4,r4,32
   4bdf4:	003f3f06 	br	4baf4 <__muldf3+0xc0>

0004bdf8 <__divdf3>:
   4bdf8:	deffed04 	addi	sp,sp,-76
   4bdfc:	dcc01115 	stw	r19,68(sp)
   4be00:	dcc00404 	addi	r19,sp,16
   4be04:	2011883a 	mov	r8,r4
   4be08:	2813883a 	mov	r9,r5
   4be0c:	dc000e15 	stw	r16,56(sp)
   4be10:	d809883a 	mov	r4,sp
   4be14:	980b883a 	mov	r5,r19
   4be18:	dc000904 	addi	r16,sp,36
   4be1c:	dfc01215 	stw	ra,72(sp)
   4be20:	da400115 	stw	r9,4(sp)
   4be24:	d9c00315 	stw	r7,12(sp)
   4be28:	da000015 	stw	r8,0(sp)
   4be2c:	d9800215 	stw	r6,8(sp)
   4be30:	dc801015 	stw	r18,64(sp)
   4be34:	dc400f15 	stw	r17,60(sp)
   4be38:	004c6dc0 	call	4c6dc <__unpack_d>
   4be3c:	d9000204 	addi	r4,sp,8
   4be40:	800b883a 	mov	r5,r16
   4be44:	004c6dc0 	call	4c6dc <__unpack_d>
   4be48:	d9000417 	ldw	r4,16(sp)
   4be4c:	00800044 	movi	r2,1
   4be50:	11000b2e 	bgeu	r2,r4,4be80 <__divdf3+0x88>
   4be54:	d9400917 	ldw	r5,36(sp)
   4be58:	1140762e 	bgeu	r2,r5,4c034 <__divdf3+0x23c>
   4be5c:	d8800517 	ldw	r2,20(sp)
   4be60:	d8c00a17 	ldw	r3,40(sp)
   4be64:	01800104 	movi	r6,4
   4be68:	10c4f03a 	xor	r2,r2,r3
   4be6c:	d8800515 	stw	r2,20(sp)
   4be70:	21800226 	beq	r4,r6,4be7c <__divdf3+0x84>
   4be74:	00800084 	movi	r2,2
   4be78:	2080141e 	bne	r4,r2,4becc <__divdf3+0xd4>
   4be7c:	29000926 	beq	r5,r4,4bea4 <__divdf3+0xac>
   4be80:	9809883a 	mov	r4,r19
   4be84:	00432840 	call	43284 <__pack_d>
   4be88:	dfc01217 	ldw	ra,72(sp)
   4be8c:	dcc01117 	ldw	r19,68(sp)
   4be90:	dc801017 	ldw	r18,64(sp)
   4be94:	dc400f17 	ldw	r17,60(sp)
   4be98:	dc000e17 	ldw	r16,56(sp)
   4be9c:	dec01304 	addi	sp,sp,76
   4bea0:	f800283a 	ret
   4bea4:	01000174 	movhi	r4,5
   4bea8:	21000804 	addi	r4,r4,32
   4beac:	00432840 	call	43284 <__pack_d>
   4beb0:	dfc01217 	ldw	ra,72(sp)
   4beb4:	dcc01117 	ldw	r19,68(sp)
   4beb8:	dc801017 	ldw	r18,64(sp)
   4bebc:	dc400f17 	ldw	r17,60(sp)
   4bec0:	dc000e17 	ldw	r16,56(sp)
   4bec4:	dec01304 	addi	sp,sp,76
   4bec8:	f800283a 	ret
   4becc:	29805b26 	beq	r5,r6,4c03c <__divdf3+0x244>
   4bed0:	28802d26 	beq	r5,r2,4bf88 <__divdf3+0x190>
   4bed4:	d8c00617 	ldw	r3,24(sp)
   4bed8:	d8800b17 	ldw	r2,44(sp)
   4bedc:	d9c00817 	ldw	r7,32(sp)
   4bee0:	dc400d17 	ldw	r17,52(sp)
   4bee4:	188bc83a 	sub	r5,r3,r2
   4bee8:	d9800717 	ldw	r6,28(sp)
   4beec:	dc000c17 	ldw	r16,48(sp)
   4bef0:	d9400615 	stw	r5,24(sp)
   4bef4:	3c403836 	bltu	r7,r17,4bfd8 <__divdf3+0x1e0>
   4bef8:	89c03626 	beq	r17,r7,4bfd4 <__divdf3+0x1dc>
   4befc:	0015883a 	mov	r10,zero
   4bf00:	001d883a 	mov	r14,zero
   4bf04:	02c40034 	movhi	r11,4096
   4bf08:	001f883a 	mov	r15,zero
   4bf0c:	003f883a 	mov	ra,zero
   4bf10:	04800f44 	movi	r18,61
   4bf14:	00000f06 	br	4bf54 <__divdf3+0x15c>
   4bf18:	601d883a 	mov	r14,r12
   4bf1c:	681f883a 	mov	r15,r13
   4bf20:	400d883a 	mov	r6,r8
   4bf24:	100f883a 	mov	r7,r2
   4bf28:	3191883a 	add	r8,r6,r6
   4bf2c:	5808d07a 	srli	r4,r11,1
   4bf30:	4185803a 	cmpltu	r2,r8,r6
   4bf34:	39d3883a 	add	r9,r7,r7
   4bf38:	28c6b03a 	or	r3,r5,r3
   4bf3c:	1245883a 	add	r2,r2,r9
   4bf40:	1815883a 	mov	r10,r3
   4bf44:	2017883a 	mov	r11,r4
   4bf48:	400d883a 	mov	r6,r8
   4bf4c:	100f883a 	mov	r7,r2
   4bf50:	fc801726 	beq	ra,r18,4bfb0 <__divdf3+0x1b8>
   4bf54:	580a97fa 	slli	r5,r11,31
   4bf58:	5006d07a 	srli	r3,r10,1
   4bf5c:	ffc00044 	addi	ra,ra,1
   4bf60:	3c7ff136 	bltu	r7,r17,4bf28 <__divdf3+0x130>
   4bf64:	3411c83a 	sub	r8,r6,r16
   4bf68:	3205803a 	cmpltu	r2,r6,r8
   4bf6c:	3c53c83a 	sub	r9,r7,r17
   4bf70:	7298b03a 	or	r12,r14,r10
   4bf74:	7adab03a 	or	r13,r15,r11
   4bf78:	4885c83a 	sub	r2,r9,r2
   4bf7c:	89ffe61e 	bne	r17,r7,4bf18 <__divdf3+0x120>
   4bf80:	343fe936 	bltu	r6,r16,4bf28 <__divdf3+0x130>
   4bf84:	003fe406 	br	4bf18 <__divdf3+0x120>
   4bf88:	9809883a 	mov	r4,r19
   4bf8c:	d9800415 	stw	r6,16(sp)
   4bf90:	00432840 	call	43284 <__pack_d>
   4bf94:	dfc01217 	ldw	ra,72(sp)
   4bf98:	dcc01117 	ldw	r19,68(sp)
   4bf9c:	dc801017 	ldw	r18,64(sp)
   4bfa0:	dc400f17 	ldw	r17,60(sp)
   4bfa4:	dc000e17 	ldw	r16,56(sp)
   4bfa8:	dec01304 	addi	sp,sp,76
   4bfac:	f800283a 	ret
   4bfb0:	00803fc4 	movi	r2,255
   4bfb4:	7090703a 	and	r8,r14,r2
   4bfb8:	00802004 	movi	r2,128
   4bfbc:	0007883a 	mov	r3,zero
   4bfc0:	0013883a 	mov	r9,zero
   4bfc4:	40800d26 	beq	r8,r2,4bffc <__divdf3+0x204>
   4bfc8:	dbc00815 	stw	r15,32(sp)
   4bfcc:	db800715 	stw	r14,28(sp)
   4bfd0:	003fab06 	br	4be80 <__divdf3+0x88>
   4bfd4:	343fc92e 	bgeu	r6,r16,4befc <__divdf3+0x104>
   4bfd8:	3185883a 	add	r2,r6,r6
   4bfdc:	1189803a 	cmpltu	r4,r2,r6
   4bfe0:	39c7883a 	add	r3,r7,r7
   4bfe4:	20c9883a 	add	r4,r4,r3
   4bfe8:	297fffc4 	addi	r5,r5,-1
   4bfec:	100d883a 	mov	r6,r2
   4bff0:	200f883a 	mov	r7,r4
   4bff4:	d9400615 	stw	r5,24(sp)
   4bff8:	003fc006 	br	4befc <__divdf3+0x104>
   4bffc:	483ff21e 	bne	r9,zero,4bfc8 <__divdf3+0x1d0>
   4c000:	01004004 	movi	r4,256
   4c004:	7104703a 	and	r2,r14,r4
   4c008:	10c4b03a 	or	r2,r2,r3
   4c00c:	103fee1e 	bne	r2,zero,4bfc8 <__divdf3+0x1d0>
   4c010:	31c4b03a 	or	r2,r6,r7
   4c014:	103fec26 	beq	r2,zero,4bfc8 <__divdf3+0x1d0>
   4c018:	7205883a 	add	r2,r14,r8
   4c01c:	1391803a 	cmpltu	r8,r2,r14
   4c020:	43d1883a 	add	r8,r8,r15
   4c024:	013fc004 	movi	r4,-256
   4c028:	111c703a 	and	r14,r2,r4
   4c02c:	401f883a 	mov	r15,r8
   4c030:	003fe506 	br	4bfc8 <__divdf3+0x1d0>
   4c034:	8009883a 	mov	r4,r16
   4c038:	003f9206 	br	4be84 <__divdf3+0x8c>
   4c03c:	9809883a 	mov	r4,r19
   4c040:	d8000715 	stw	zero,28(sp)
   4c044:	d8000815 	stw	zero,32(sp)
   4c048:	d8000615 	stw	zero,24(sp)
   4c04c:	003f8d06 	br	4be84 <__divdf3+0x8c>

0004c050 <__eqdf2>:
   4c050:	deffef04 	addi	sp,sp,-68
   4c054:	dc400f15 	stw	r17,60(sp)
   4c058:	dc400404 	addi	r17,sp,16
   4c05c:	2005883a 	mov	r2,r4
   4c060:	2807883a 	mov	r3,r5
   4c064:	dc000e15 	stw	r16,56(sp)
   4c068:	d809883a 	mov	r4,sp
   4c06c:	880b883a 	mov	r5,r17
   4c070:	dc000904 	addi	r16,sp,36
   4c074:	d8c00115 	stw	r3,4(sp)
   4c078:	d8800015 	stw	r2,0(sp)
   4c07c:	d9800215 	stw	r6,8(sp)
   4c080:	dfc01015 	stw	ra,64(sp)
   4c084:	d9c00315 	stw	r7,12(sp)
   4c088:	004c6dc0 	call	4c6dc <__unpack_d>
   4c08c:	d9000204 	addi	r4,sp,8
   4c090:	800b883a 	mov	r5,r16
   4c094:	004c6dc0 	call	4c6dc <__unpack_d>
   4c098:	d8800417 	ldw	r2,16(sp)
   4c09c:	00c00044 	movi	r3,1
   4c0a0:	180d883a 	mov	r6,r3
   4c0a4:	1880062e 	bgeu	r3,r2,4c0c0 <__eqdf2+0x70>
   4c0a8:	d8800917 	ldw	r2,36(sp)
   4c0ac:	8809883a 	mov	r4,r17
   4c0b0:	800b883a 	mov	r5,r16
   4c0b4:	1880022e 	bgeu	r3,r2,4c0c0 <__eqdf2+0x70>
   4c0b8:	004c8140 	call	4c814 <__fpcmp_parts_d>
   4c0bc:	100d883a 	mov	r6,r2
   4c0c0:	3005883a 	mov	r2,r6
   4c0c4:	dfc01017 	ldw	ra,64(sp)
   4c0c8:	dc400f17 	ldw	r17,60(sp)
   4c0cc:	dc000e17 	ldw	r16,56(sp)
   4c0d0:	dec01104 	addi	sp,sp,68
   4c0d4:	f800283a 	ret

0004c0d8 <__nedf2>:
   4c0d8:	deffef04 	addi	sp,sp,-68
   4c0dc:	dc400f15 	stw	r17,60(sp)
   4c0e0:	dc400404 	addi	r17,sp,16
   4c0e4:	2005883a 	mov	r2,r4
   4c0e8:	2807883a 	mov	r3,r5
   4c0ec:	dc000e15 	stw	r16,56(sp)
   4c0f0:	d809883a 	mov	r4,sp
   4c0f4:	880b883a 	mov	r5,r17
   4c0f8:	dc000904 	addi	r16,sp,36
   4c0fc:	d8c00115 	stw	r3,4(sp)
   4c100:	d8800015 	stw	r2,0(sp)
   4c104:	d9800215 	stw	r6,8(sp)
   4c108:	dfc01015 	stw	ra,64(sp)
   4c10c:	d9c00315 	stw	r7,12(sp)
   4c110:	004c6dc0 	call	4c6dc <__unpack_d>
   4c114:	d9000204 	addi	r4,sp,8
   4c118:	800b883a 	mov	r5,r16
   4c11c:	004c6dc0 	call	4c6dc <__unpack_d>
   4c120:	d8800417 	ldw	r2,16(sp)
   4c124:	00c00044 	movi	r3,1
   4c128:	180d883a 	mov	r6,r3
   4c12c:	1880062e 	bgeu	r3,r2,4c148 <__nedf2+0x70>
   4c130:	d8800917 	ldw	r2,36(sp)
   4c134:	8809883a 	mov	r4,r17
   4c138:	800b883a 	mov	r5,r16
   4c13c:	1880022e 	bgeu	r3,r2,4c148 <__nedf2+0x70>
   4c140:	004c8140 	call	4c814 <__fpcmp_parts_d>
   4c144:	100d883a 	mov	r6,r2
   4c148:	3005883a 	mov	r2,r6
   4c14c:	dfc01017 	ldw	ra,64(sp)
   4c150:	dc400f17 	ldw	r17,60(sp)
   4c154:	dc000e17 	ldw	r16,56(sp)
   4c158:	dec01104 	addi	sp,sp,68
   4c15c:	f800283a 	ret

0004c160 <__gtdf2>:
   4c160:	deffef04 	addi	sp,sp,-68
   4c164:	dc400f15 	stw	r17,60(sp)
   4c168:	dc400404 	addi	r17,sp,16
   4c16c:	2005883a 	mov	r2,r4
   4c170:	2807883a 	mov	r3,r5
   4c174:	dc000e15 	stw	r16,56(sp)
   4c178:	d809883a 	mov	r4,sp
   4c17c:	880b883a 	mov	r5,r17
   4c180:	dc000904 	addi	r16,sp,36
   4c184:	d8c00115 	stw	r3,4(sp)
   4c188:	d8800015 	stw	r2,0(sp)
   4c18c:	d9800215 	stw	r6,8(sp)
   4c190:	dfc01015 	stw	ra,64(sp)
   4c194:	d9c00315 	stw	r7,12(sp)
   4c198:	004c6dc0 	call	4c6dc <__unpack_d>
   4c19c:	d9000204 	addi	r4,sp,8
   4c1a0:	800b883a 	mov	r5,r16
   4c1a4:	004c6dc0 	call	4c6dc <__unpack_d>
   4c1a8:	d8800417 	ldw	r2,16(sp)
   4c1ac:	00c00044 	movi	r3,1
   4c1b0:	01bfffc4 	movi	r6,-1
   4c1b4:	1880062e 	bgeu	r3,r2,4c1d0 <__gtdf2+0x70>
   4c1b8:	d8800917 	ldw	r2,36(sp)
   4c1bc:	8809883a 	mov	r4,r17
   4c1c0:	800b883a 	mov	r5,r16
   4c1c4:	1880022e 	bgeu	r3,r2,4c1d0 <__gtdf2+0x70>
   4c1c8:	004c8140 	call	4c814 <__fpcmp_parts_d>
   4c1cc:	100d883a 	mov	r6,r2
   4c1d0:	3005883a 	mov	r2,r6
   4c1d4:	dfc01017 	ldw	ra,64(sp)
   4c1d8:	dc400f17 	ldw	r17,60(sp)
   4c1dc:	dc000e17 	ldw	r16,56(sp)
   4c1e0:	dec01104 	addi	sp,sp,68
   4c1e4:	f800283a 	ret

0004c1e8 <__gedf2>:
   4c1e8:	deffef04 	addi	sp,sp,-68
   4c1ec:	dc400f15 	stw	r17,60(sp)
   4c1f0:	dc400404 	addi	r17,sp,16
   4c1f4:	2005883a 	mov	r2,r4
   4c1f8:	2807883a 	mov	r3,r5
   4c1fc:	dc000e15 	stw	r16,56(sp)
   4c200:	d809883a 	mov	r4,sp
   4c204:	880b883a 	mov	r5,r17
   4c208:	dc000904 	addi	r16,sp,36
   4c20c:	d8c00115 	stw	r3,4(sp)
   4c210:	d8800015 	stw	r2,0(sp)
   4c214:	d9800215 	stw	r6,8(sp)
   4c218:	dfc01015 	stw	ra,64(sp)
   4c21c:	d9c00315 	stw	r7,12(sp)
   4c220:	004c6dc0 	call	4c6dc <__unpack_d>
   4c224:	d9000204 	addi	r4,sp,8
   4c228:	800b883a 	mov	r5,r16
   4c22c:	004c6dc0 	call	4c6dc <__unpack_d>
   4c230:	d8800417 	ldw	r2,16(sp)
   4c234:	00c00044 	movi	r3,1
   4c238:	01bfffc4 	movi	r6,-1
   4c23c:	1880062e 	bgeu	r3,r2,4c258 <__gedf2+0x70>
   4c240:	d8800917 	ldw	r2,36(sp)
   4c244:	8809883a 	mov	r4,r17
   4c248:	800b883a 	mov	r5,r16
   4c24c:	1880022e 	bgeu	r3,r2,4c258 <__gedf2+0x70>
   4c250:	004c8140 	call	4c814 <__fpcmp_parts_d>
   4c254:	100d883a 	mov	r6,r2
   4c258:	3005883a 	mov	r2,r6
   4c25c:	dfc01017 	ldw	ra,64(sp)
   4c260:	dc400f17 	ldw	r17,60(sp)
   4c264:	dc000e17 	ldw	r16,56(sp)
   4c268:	dec01104 	addi	sp,sp,68
   4c26c:	f800283a 	ret

0004c270 <__ltdf2>:
   4c270:	deffef04 	addi	sp,sp,-68
   4c274:	dc400f15 	stw	r17,60(sp)
   4c278:	dc400404 	addi	r17,sp,16
   4c27c:	2005883a 	mov	r2,r4
   4c280:	2807883a 	mov	r3,r5
   4c284:	dc000e15 	stw	r16,56(sp)
   4c288:	d809883a 	mov	r4,sp
   4c28c:	880b883a 	mov	r5,r17
   4c290:	dc000904 	addi	r16,sp,36
   4c294:	d8c00115 	stw	r3,4(sp)
   4c298:	d8800015 	stw	r2,0(sp)
   4c29c:	d9800215 	stw	r6,8(sp)
   4c2a0:	dfc01015 	stw	ra,64(sp)
   4c2a4:	d9c00315 	stw	r7,12(sp)
   4c2a8:	004c6dc0 	call	4c6dc <__unpack_d>
   4c2ac:	d9000204 	addi	r4,sp,8
   4c2b0:	800b883a 	mov	r5,r16
   4c2b4:	004c6dc0 	call	4c6dc <__unpack_d>
   4c2b8:	d8800417 	ldw	r2,16(sp)
   4c2bc:	00c00044 	movi	r3,1
   4c2c0:	180d883a 	mov	r6,r3
   4c2c4:	1880062e 	bgeu	r3,r2,4c2e0 <__ltdf2+0x70>
   4c2c8:	d8800917 	ldw	r2,36(sp)
   4c2cc:	8809883a 	mov	r4,r17
   4c2d0:	800b883a 	mov	r5,r16
   4c2d4:	1880022e 	bgeu	r3,r2,4c2e0 <__ltdf2+0x70>
   4c2d8:	004c8140 	call	4c814 <__fpcmp_parts_d>
   4c2dc:	100d883a 	mov	r6,r2
   4c2e0:	3005883a 	mov	r2,r6
   4c2e4:	dfc01017 	ldw	ra,64(sp)
   4c2e8:	dc400f17 	ldw	r17,60(sp)
   4c2ec:	dc000e17 	ldw	r16,56(sp)
   4c2f0:	dec01104 	addi	sp,sp,68
   4c2f4:	f800283a 	ret

0004c2f8 <__floatsidf>:
   4c2f8:	2006d7fa 	srli	r3,r4,31
   4c2fc:	defff604 	addi	sp,sp,-40
   4c300:	008000c4 	movi	r2,3
   4c304:	dfc00915 	stw	ra,36(sp)
   4c308:	dcc00815 	stw	r19,32(sp)
   4c30c:	dc800715 	stw	r18,28(sp)
   4c310:	dc400615 	stw	r17,24(sp)
   4c314:	dc000515 	stw	r16,20(sp)
   4c318:	d8800015 	stw	r2,0(sp)
   4c31c:	d8c00115 	stw	r3,4(sp)
   4c320:	20000f1e 	bne	r4,zero,4c360 <__floatsidf+0x68>
   4c324:	00800084 	movi	r2,2
   4c328:	d8800015 	stw	r2,0(sp)
   4c32c:	d809883a 	mov	r4,sp
   4c330:	00432840 	call	43284 <__pack_d>
   4c334:	1009883a 	mov	r4,r2
   4c338:	180b883a 	mov	r5,r3
   4c33c:	2005883a 	mov	r2,r4
   4c340:	2807883a 	mov	r3,r5
   4c344:	dfc00917 	ldw	ra,36(sp)
   4c348:	dcc00817 	ldw	r19,32(sp)
   4c34c:	dc800717 	ldw	r18,28(sp)
   4c350:	dc400617 	ldw	r17,24(sp)
   4c354:	dc000517 	ldw	r16,20(sp)
   4c358:	dec00a04 	addi	sp,sp,40
   4c35c:	f800283a 	ret
   4c360:	00800f04 	movi	r2,60
   4c364:	1807003a 	cmpeq	r3,r3,zero
   4c368:	d8800215 	stw	r2,8(sp)
   4c36c:	18001126 	beq	r3,zero,4c3b4 <__floatsidf+0xbc>
   4c370:	0027883a 	mov	r19,zero
   4c374:	2025883a 	mov	r18,r4
   4c378:	d9000315 	stw	r4,12(sp)
   4c37c:	dcc00415 	stw	r19,16(sp)
   4c380:	004c65c0 	call	4c65c <__clzsi2>
   4c384:	11000744 	addi	r4,r2,29
   4c388:	013fe80e 	bge	zero,r4,4c32c <__floatsidf+0x34>
   4c38c:	10bfff44 	addi	r2,r2,-3
   4c390:	10000c16 	blt	r2,zero,4c3c4 <__floatsidf+0xcc>
   4c394:	90a2983a 	sll	r17,r18,r2
   4c398:	0021883a 	mov	r16,zero
   4c39c:	d8800217 	ldw	r2,8(sp)
   4c3a0:	dc400415 	stw	r17,16(sp)
   4c3a4:	dc000315 	stw	r16,12(sp)
   4c3a8:	1105c83a 	sub	r2,r2,r4
   4c3ac:	d8800215 	stw	r2,8(sp)
   4c3b0:	003fde06 	br	4c32c <__floatsidf+0x34>
   4c3b4:	00a00034 	movhi	r2,32768
   4c3b8:	20800a26 	beq	r4,r2,4c3e4 <__floatsidf+0xec>
   4c3bc:	0109c83a 	sub	r4,zero,r4
   4c3c0:	003feb06 	br	4c370 <__floatsidf+0x78>
   4c3c4:	9006d07a 	srli	r3,r18,1
   4c3c8:	008007c4 	movi	r2,31
   4c3cc:	1105c83a 	sub	r2,r2,r4
   4c3d0:	1886d83a 	srl	r3,r3,r2
   4c3d4:	9922983a 	sll	r17,r19,r4
   4c3d8:	9120983a 	sll	r16,r18,r4
   4c3dc:	1c62b03a 	or	r17,r3,r17
   4c3e0:	003fee06 	br	4c39c <__floatsidf+0xa4>
   4c3e4:	0009883a 	mov	r4,zero
   4c3e8:	01707834 	movhi	r5,49632
   4c3ec:	003fd306 	br	4c33c <__floatsidf+0x44>

0004c3f0 <__fixdfsi>:
   4c3f0:	defff804 	addi	sp,sp,-32
   4c3f4:	2005883a 	mov	r2,r4
   4c3f8:	2807883a 	mov	r3,r5
   4c3fc:	d809883a 	mov	r4,sp
   4c400:	d9400204 	addi	r5,sp,8
   4c404:	d8c00115 	stw	r3,4(sp)
   4c408:	d8800015 	stw	r2,0(sp)
   4c40c:	dfc00715 	stw	ra,28(sp)
   4c410:	004c6dc0 	call	4c6dc <__unpack_d>
   4c414:	d8c00217 	ldw	r3,8(sp)
   4c418:	00800084 	movi	r2,2
   4c41c:	1880051e 	bne	r3,r2,4c434 <__fixdfsi+0x44>
   4c420:	0007883a 	mov	r3,zero
   4c424:	1805883a 	mov	r2,r3
   4c428:	dfc00717 	ldw	ra,28(sp)
   4c42c:	dec00804 	addi	sp,sp,32
   4c430:	f800283a 	ret
   4c434:	00800044 	movi	r2,1
   4c438:	10fff92e 	bgeu	r2,r3,4c420 <__fixdfsi+0x30>
   4c43c:	00800104 	movi	r2,4
   4c440:	18800426 	beq	r3,r2,4c454 <__fixdfsi+0x64>
   4c444:	d8c00417 	ldw	r3,16(sp)
   4c448:	183ff516 	blt	r3,zero,4c420 <__fixdfsi+0x30>
   4c44c:	00800784 	movi	r2,30
   4c450:	10c0080e 	bge	r2,r3,4c474 <__fixdfsi+0x84>
   4c454:	d8800317 	ldw	r2,12(sp)
   4c458:	1000121e 	bne	r2,zero,4c4a4 <__fixdfsi+0xb4>
   4c45c:	00e00034 	movhi	r3,32768
   4c460:	18ffffc4 	addi	r3,r3,-1
   4c464:	1805883a 	mov	r2,r3
   4c468:	dfc00717 	ldw	ra,28(sp)
   4c46c:	dec00804 	addi	sp,sp,32
   4c470:	f800283a 	ret
   4c474:	00800f04 	movi	r2,60
   4c478:	10d1c83a 	sub	r8,r2,r3
   4c47c:	40bff804 	addi	r2,r8,-32
   4c480:	d9800517 	ldw	r6,20(sp)
   4c484:	d9c00617 	ldw	r7,24(sp)
   4c488:	10000816 	blt	r2,zero,4c4ac <__fixdfsi+0xbc>
   4c48c:	3888d83a 	srl	r4,r7,r2
   4c490:	d8800317 	ldw	r2,12(sp)
   4c494:	2007883a 	mov	r3,r4
   4c498:	103fe226 	beq	r2,zero,4c424 <__fixdfsi+0x34>
   4c49c:	0107c83a 	sub	r3,zero,r4
   4c4a0:	003fe006 	br	4c424 <__fixdfsi+0x34>
   4c4a4:	00e00034 	movhi	r3,32768
   4c4a8:	003fde06 	br	4c424 <__fixdfsi+0x34>
   4c4ac:	39c7883a 	add	r3,r7,r7
   4c4b0:	008007c4 	movi	r2,31
   4c4b4:	1205c83a 	sub	r2,r2,r8
   4c4b8:	1886983a 	sll	r3,r3,r2
   4c4bc:	3208d83a 	srl	r4,r6,r8
   4c4c0:	1908b03a 	or	r4,r3,r4
   4c4c4:	003ff206 	br	4c490 <__fixdfsi+0xa0>

0004c4c8 <__floatunsidf>:
   4c4c8:	defff204 	addi	sp,sp,-56
   4c4cc:	dfc00d15 	stw	ra,52(sp)
   4c4d0:	ddc00c15 	stw	r23,48(sp)
   4c4d4:	dd800b15 	stw	r22,44(sp)
   4c4d8:	dd400a15 	stw	r21,40(sp)
   4c4dc:	dd000915 	stw	r20,36(sp)
   4c4e0:	dcc00815 	stw	r19,32(sp)
   4c4e4:	dc800715 	stw	r18,28(sp)
   4c4e8:	dc400615 	stw	r17,24(sp)
   4c4ec:	dc000515 	stw	r16,20(sp)
   4c4f0:	d8000115 	stw	zero,4(sp)
   4c4f4:	20000f1e 	bne	r4,zero,4c534 <__floatunsidf+0x6c>
   4c4f8:	00800084 	movi	r2,2
   4c4fc:	d8800015 	stw	r2,0(sp)
   4c500:	d809883a 	mov	r4,sp
   4c504:	00432840 	call	43284 <__pack_d>
   4c508:	dfc00d17 	ldw	ra,52(sp)
   4c50c:	ddc00c17 	ldw	r23,48(sp)
   4c510:	dd800b17 	ldw	r22,44(sp)
   4c514:	dd400a17 	ldw	r21,40(sp)
   4c518:	dd000917 	ldw	r20,36(sp)
   4c51c:	dcc00817 	ldw	r19,32(sp)
   4c520:	dc800717 	ldw	r18,28(sp)
   4c524:	dc400617 	ldw	r17,24(sp)
   4c528:	dc000517 	ldw	r16,20(sp)
   4c52c:	dec00e04 	addi	sp,sp,56
   4c530:	f800283a 	ret
   4c534:	008000c4 	movi	r2,3
   4c538:	00c00f04 	movi	r3,60
   4c53c:	002f883a 	mov	r23,zero
   4c540:	202d883a 	mov	r22,r4
   4c544:	d8800015 	stw	r2,0(sp)
   4c548:	d8c00215 	stw	r3,8(sp)
   4c54c:	d9000315 	stw	r4,12(sp)
   4c550:	ddc00415 	stw	r23,16(sp)
   4c554:	004c65c0 	call	4c65c <__clzsi2>
   4c558:	12400744 	addi	r9,r2,29
   4c55c:	48000b16 	blt	r9,zero,4c58c <__floatunsidf+0xc4>
   4c560:	483fe726 	beq	r9,zero,4c500 <__floatunsidf+0x38>
   4c564:	10bfff44 	addi	r2,r2,-3
   4c568:	10002e16 	blt	r2,zero,4c624 <__floatunsidf+0x15c>
   4c56c:	b0a2983a 	sll	r17,r22,r2
   4c570:	0021883a 	mov	r16,zero
   4c574:	d8800217 	ldw	r2,8(sp)
   4c578:	dc400415 	stw	r17,16(sp)
   4c57c:	dc000315 	stw	r16,12(sp)
   4c580:	1245c83a 	sub	r2,r2,r9
   4c584:	d8800215 	stw	r2,8(sp)
   4c588:	003fdd06 	br	4c500 <__floatunsidf+0x38>
   4c58c:	0255c83a 	sub	r10,zero,r9
   4c590:	51bff804 	addi	r6,r10,-32
   4c594:	30001b16 	blt	r6,zero,4c604 <__floatunsidf+0x13c>
   4c598:	b9a8d83a 	srl	r20,r23,r6
   4c59c:	002b883a 	mov	r21,zero
   4c5a0:	000f883a 	mov	r7,zero
   4c5a4:	01000044 	movi	r4,1
   4c5a8:	0011883a 	mov	r8,zero
   4c5ac:	30002516 	blt	r6,zero,4c644 <__floatunsidf+0x17c>
   4c5b0:	21a6983a 	sll	r19,r4,r6
   4c5b4:	0025883a 	mov	r18,zero
   4c5b8:	00bfffc4 	movi	r2,-1
   4c5bc:	9089883a 	add	r4,r18,r2
   4c5c0:	988b883a 	add	r5,r19,r2
   4c5c4:	248d803a 	cmpltu	r6,r4,r18
   4c5c8:	314b883a 	add	r5,r6,r5
   4c5cc:	b104703a 	and	r2,r22,r4
   4c5d0:	b946703a 	and	r3,r23,r5
   4c5d4:	10c4b03a 	or	r2,r2,r3
   4c5d8:	10000226 	beq	r2,zero,4c5e4 <__floatunsidf+0x11c>
   4c5dc:	01c00044 	movi	r7,1
   4c5e0:	0011883a 	mov	r8,zero
   4c5e4:	d9000217 	ldw	r4,8(sp)
   4c5e8:	a1c4b03a 	or	r2,r20,r7
   4c5ec:	aa06b03a 	or	r3,r21,r8
   4c5f0:	2249c83a 	sub	r4,r4,r9
   4c5f4:	d8c00415 	stw	r3,16(sp)
   4c5f8:	d9000215 	stw	r4,8(sp)
   4c5fc:	d8800315 	stw	r2,12(sp)
   4c600:	003fbf06 	br	4c500 <__floatunsidf+0x38>
   4c604:	bdc7883a 	add	r3,r23,r23
   4c608:	008007c4 	movi	r2,31
   4c60c:	1285c83a 	sub	r2,r2,r10
   4c610:	1886983a 	sll	r3,r3,r2
   4c614:	b2a8d83a 	srl	r20,r22,r10
   4c618:	baaad83a 	srl	r21,r23,r10
   4c61c:	1d28b03a 	or	r20,r3,r20
   4c620:	003fdf06 	br	4c5a0 <__floatunsidf+0xd8>
   4c624:	b006d07a 	srli	r3,r22,1
   4c628:	008007c4 	movi	r2,31
   4c62c:	1245c83a 	sub	r2,r2,r9
   4c630:	1886d83a 	srl	r3,r3,r2
   4c634:	ba62983a 	sll	r17,r23,r9
   4c638:	b260983a 	sll	r16,r22,r9
   4c63c:	1c62b03a 	or	r17,r3,r17
   4c640:	003fcc06 	br	4c574 <__floatunsidf+0xac>
   4c644:	2006d07a 	srli	r3,r4,1
   4c648:	008007c4 	movi	r2,31
   4c64c:	1285c83a 	sub	r2,r2,r10
   4c650:	18a6d83a 	srl	r19,r3,r2
   4c654:	22a4983a 	sll	r18,r4,r10
   4c658:	003fd706 	br	4c5b8 <__floatunsidf+0xf0>

0004c65c <__clzsi2>:
   4c65c:	00bfffd4 	movui	r2,65535
   4c660:	11000e36 	bltu	r2,r4,4c69c <__clzsi2+0x40>
   4c664:	00803fc4 	movi	r2,255
   4c668:	01400204 	movi	r5,8
   4c66c:	0007883a 	mov	r3,zero
   4c670:	11001036 	bltu	r2,r4,4c6b4 <__clzsi2+0x58>
   4c674:	000b883a 	mov	r5,zero
   4c678:	20c6d83a 	srl	r3,r4,r3
   4c67c:	00800174 	movhi	r2,5
   4c680:	10800d04 	addi	r2,r2,52
   4c684:	1887883a 	add	r3,r3,r2
   4c688:	18800003 	ldbu	r2,0(r3)
   4c68c:	00c00804 	movi	r3,32
   4c690:	2885883a 	add	r2,r5,r2
   4c694:	1885c83a 	sub	r2,r3,r2
   4c698:	f800283a 	ret
   4c69c:	01400404 	movi	r5,16
   4c6a0:	00804034 	movhi	r2,256
   4c6a4:	10bfffc4 	addi	r2,r2,-1
   4c6a8:	2807883a 	mov	r3,r5
   4c6ac:	113ff22e 	bgeu	r2,r4,4c678 <__clzsi2+0x1c>
   4c6b0:	01400604 	movi	r5,24
   4c6b4:	2807883a 	mov	r3,r5
   4c6b8:	20c6d83a 	srl	r3,r4,r3
   4c6bc:	00800174 	movhi	r2,5
   4c6c0:	10800d04 	addi	r2,r2,52
   4c6c4:	1887883a 	add	r3,r3,r2
   4c6c8:	18800003 	ldbu	r2,0(r3)
   4c6cc:	00c00804 	movi	r3,32
   4c6d0:	2885883a 	add	r2,r5,r2
   4c6d4:	1885c83a 	sub	r2,r3,r2
   4c6d8:	f800283a 	ret

0004c6dc <__unpack_d>:
   4c6dc:	20c00117 	ldw	r3,4(r4)
   4c6e0:	22400017 	ldw	r9,0(r4)
   4c6e4:	00800434 	movhi	r2,16
   4c6e8:	10bfffc4 	addi	r2,r2,-1
   4c6ec:	1808d53a 	srli	r4,r3,20
   4c6f0:	180cd7fa 	srli	r6,r3,31
   4c6f4:	1894703a 	and	r10,r3,r2
   4c6f8:	2201ffcc 	andi	r8,r4,2047
   4c6fc:	281b883a 	mov	r13,r5
   4c700:	4817883a 	mov	r11,r9
   4c704:	29800115 	stw	r6,4(r5)
   4c708:	5019883a 	mov	r12,r10
   4c70c:	40001e1e 	bne	r8,zero,4c788 <__unpack_d+0xac>
   4c710:	4a84b03a 	or	r2,r9,r10
   4c714:	10001926 	beq	r2,zero,4c77c <__unpack_d+0xa0>
   4c718:	4804d63a 	srli	r2,r9,24
   4c71c:	500c923a 	slli	r6,r10,8
   4c720:	013f0084 	movi	r4,-1022
   4c724:	00c40034 	movhi	r3,4096
   4c728:	18ffffc4 	addi	r3,r3,-1
   4c72c:	118cb03a 	or	r6,r2,r6
   4c730:	008000c4 	movi	r2,3
   4c734:	480a923a 	slli	r5,r9,8
   4c738:	68800015 	stw	r2,0(r13)
   4c73c:	69000215 	stw	r4,8(r13)
   4c740:	19800b36 	bltu	r3,r6,4c770 <__unpack_d+0x94>
   4c744:	200f883a 	mov	r7,r4
   4c748:	1811883a 	mov	r8,r3
   4c74c:	2945883a 	add	r2,r5,r5
   4c750:	1149803a 	cmpltu	r4,r2,r5
   4c754:	3187883a 	add	r3,r6,r6
   4c758:	20c9883a 	add	r4,r4,r3
   4c75c:	100b883a 	mov	r5,r2
   4c760:	200d883a 	mov	r6,r4
   4c764:	39ffffc4 	addi	r7,r7,-1
   4c768:	413ff82e 	bgeu	r8,r4,4c74c <__unpack_d+0x70>
   4c76c:	69c00215 	stw	r7,8(r13)
   4c770:	69800415 	stw	r6,16(r13)
   4c774:	69400315 	stw	r5,12(r13)
   4c778:	f800283a 	ret
   4c77c:	00800084 	movi	r2,2
   4c780:	28800015 	stw	r2,0(r5)
   4c784:	f800283a 	ret
   4c788:	0081ffc4 	movi	r2,2047
   4c78c:	40800f26 	beq	r8,r2,4c7cc <__unpack_d+0xf0>
   4c790:	480cd63a 	srli	r6,r9,24
   4c794:	5006923a 	slli	r3,r10,8
   4c798:	4804923a 	slli	r2,r9,8
   4c79c:	0009883a 	mov	r4,zero
   4c7a0:	30c6b03a 	or	r3,r6,r3
   4c7a4:	01440034 	movhi	r5,4096
   4c7a8:	110cb03a 	or	r6,r2,r4
   4c7ac:	423f0044 	addi	r8,r8,-1023
   4c7b0:	194eb03a 	or	r7,r3,r5
   4c7b4:	008000c4 	movi	r2,3
   4c7b8:	69c00415 	stw	r7,16(r13)
   4c7bc:	6a000215 	stw	r8,8(r13)
   4c7c0:	68800015 	stw	r2,0(r13)
   4c7c4:	69800315 	stw	r6,12(r13)
   4c7c8:	f800283a 	ret
   4c7cc:	4a84b03a 	or	r2,r9,r10
   4c7d0:	1000031e 	bne	r2,zero,4c7e0 <__unpack_d+0x104>
   4c7d4:	00800104 	movi	r2,4
   4c7d8:	28800015 	stw	r2,0(r5)
   4c7dc:	f800283a 	ret
   4c7e0:	0009883a 	mov	r4,zero
   4c7e4:	01400234 	movhi	r5,8
   4c7e8:	4904703a 	and	r2,r9,r4
   4c7ec:	5146703a 	and	r3,r10,r5
   4c7f0:	10c4b03a 	or	r2,r2,r3
   4c7f4:	10000526 	beq	r2,zero,4c80c <__unpack_d+0x130>
   4c7f8:	00800044 	movi	r2,1
   4c7fc:	68800015 	stw	r2,0(r13)
   4c800:	6b000415 	stw	r12,16(r13)
   4c804:	6ac00315 	stw	r11,12(r13)
   4c808:	f800283a 	ret
   4c80c:	68000015 	stw	zero,0(r13)
   4c810:	003ffb06 	br	4c800 <__unpack_d+0x124>

0004c814 <__fpcmp_parts_d>:
   4c814:	21800017 	ldw	r6,0(r4)
   4c818:	00c00044 	movi	r3,1
   4c81c:	19800a2e 	bgeu	r3,r6,4c848 <__fpcmp_parts_d+0x34>
   4c820:	28800017 	ldw	r2,0(r5)
   4c824:	1880082e 	bgeu	r3,r2,4c848 <__fpcmp_parts_d+0x34>
   4c828:	00c00104 	movi	r3,4
   4c82c:	30c02626 	beq	r6,r3,4c8c8 <__fpcmp_parts_d+0xb4>
   4c830:	10c02226 	beq	r2,r3,4c8bc <__fpcmp_parts_d+0xa8>
   4c834:	00c00084 	movi	r3,2
   4c838:	30c00526 	beq	r6,r3,4c850 <__fpcmp_parts_d+0x3c>
   4c83c:	10c0071e 	bne	r2,r3,4c85c <__fpcmp_parts_d+0x48>
   4c840:	20800117 	ldw	r2,4(r4)
   4c844:	1000091e 	bne	r2,zero,4c86c <__fpcmp_parts_d+0x58>
   4c848:	00800044 	movi	r2,1
   4c84c:	f800283a 	ret
   4c850:	10c01a1e 	bne	r2,r3,4c8bc <__fpcmp_parts_d+0xa8>
   4c854:	0005883a 	mov	r2,zero
   4c858:	f800283a 	ret
   4c85c:	22000117 	ldw	r8,4(r4)
   4c860:	28800117 	ldw	r2,4(r5)
   4c864:	40800326 	beq	r8,r2,4c874 <__fpcmp_parts_d+0x60>
   4c868:	403ff726 	beq	r8,zero,4c848 <__fpcmp_parts_d+0x34>
   4c86c:	00bfffc4 	movi	r2,-1
   4c870:	f800283a 	ret
   4c874:	20c00217 	ldw	r3,8(r4)
   4c878:	28800217 	ldw	r2,8(r5)
   4c87c:	10fffa16 	blt	r2,r3,4c868 <__fpcmp_parts_d+0x54>
   4c880:	18800916 	blt	r3,r2,4c8a8 <__fpcmp_parts_d+0x94>
   4c884:	21c00417 	ldw	r7,16(r4)
   4c888:	28c00417 	ldw	r3,16(r5)
   4c88c:	21800317 	ldw	r6,12(r4)
   4c890:	28800317 	ldw	r2,12(r5)
   4c894:	19fff436 	bltu	r3,r7,4c868 <__fpcmp_parts_d+0x54>
   4c898:	38c00526 	beq	r7,r3,4c8b0 <__fpcmp_parts_d+0x9c>
   4c89c:	38c00236 	bltu	r7,r3,4c8a8 <__fpcmp_parts_d+0x94>
   4c8a0:	19ffec1e 	bne	r3,r7,4c854 <__fpcmp_parts_d+0x40>
   4c8a4:	30bfeb2e 	bgeu	r6,r2,4c854 <__fpcmp_parts_d+0x40>
   4c8a8:	403fe71e 	bne	r8,zero,4c848 <__fpcmp_parts_d+0x34>
   4c8ac:	003fef06 	br	4c86c <__fpcmp_parts_d+0x58>
   4c8b0:	11bffa2e 	bgeu	r2,r6,4c89c <__fpcmp_parts_d+0x88>
   4c8b4:	403fe426 	beq	r8,zero,4c848 <__fpcmp_parts_d+0x34>
   4c8b8:	003fec06 	br	4c86c <__fpcmp_parts_d+0x58>
   4c8bc:	28800117 	ldw	r2,4(r5)
   4c8c0:	103fe11e 	bne	r2,zero,4c848 <__fpcmp_parts_d+0x34>
   4c8c4:	003fe906 	br	4c86c <__fpcmp_parts_d+0x58>
   4c8c8:	11bfdd1e 	bne	r2,r6,4c840 <__fpcmp_parts_d+0x2c>
   4c8cc:	28c00117 	ldw	r3,4(r5)
   4c8d0:	20800117 	ldw	r2,4(r4)
   4c8d4:	1885c83a 	sub	r2,r3,r2
   4c8d8:	f800283a 	ret

0004c8dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4c8dc:	defff804 	addi	sp,sp,-32
   4c8e0:	dfc00715 	stw	ra,28(sp)
   4c8e4:	df000615 	stw	fp,24(sp)
   4c8e8:	df000604 	addi	fp,sp,24
   4c8ec:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4c8f0:	e0bffc17 	ldw	r2,-16(fp)
   4c8f4:	1004803a 	cmplt	r2,r2,zero
   4c8f8:	1000081e 	bne	r2,zero,4c91c <close+0x40>
   4c8fc:	e0bffc17 	ldw	r2,-16(fp)
   4c900:	10800324 	muli	r2,r2,12
   4c904:	1007883a 	mov	r3,r2
   4c908:	00800174 	movhi	r2,5
   4c90c:	10828f04 	addi	r2,r2,2620
   4c910:	1887883a 	add	r3,r3,r2
   4c914:	e0ffff15 	stw	r3,-4(fp)
   4c918:	00000106 	br	4c920 <close+0x44>
   4c91c:	e03fff15 	stw	zero,-4(fp)
   4c920:	e0bfff17 	ldw	r2,-4(fp)
   4c924:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   4c928:	e0bffb17 	ldw	r2,-20(fp)
   4c92c:	1005003a 	cmpeq	r2,r2,zero
   4c930:	10001d1e 	bne	r2,zero,4c9a8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4c934:	e0bffb17 	ldw	r2,-20(fp)
   4c938:	10800017 	ldw	r2,0(r2)
   4c93c:	10800417 	ldw	r2,16(r2)
   4c940:	1005003a 	cmpeq	r2,r2,zero
   4c944:	1000071e 	bne	r2,zero,4c964 <close+0x88>
   4c948:	e0bffb17 	ldw	r2,-20(fp)
   4c94c:	10800017 	ldw	r2,0(r2)
   4c950:	10800417 	ldw	r2,16(r2)
   4c954:	e13ffb17 	ldw	r4,-20(fp)
   4c958:	103ee83a 	callr	r2
   4c95c:	e0bffe15 	stw	r2,-8(fp)
   4c960:	00000106 	br	4c968 <close+0x8c>
   4c964:	e03ffe15 	stw	zero,-8(fp)
   4c968:	e0bffe17 	ldw	r2,-8(fp)
   4c96c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4c970:	e13ffc17 	ldw	r4,-16(fp)
   4c974:	004d5a40 	call	4d5a4 <alt_release_fd>
    if (rval < 0)
   4c978:	e0bffa17 	ldw	r2,-24(fp)
   4c97c:	1004403a 	cmpge	r2,r2,zero
   4c980:	1000071e 	bne	r2,zero,4c9a0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   4c984:	004c9d80 	call	4c9d8 <alt_get_errno>
   4c988:	e0fffa17 	ldw	r3,-24(fp)
   4c98c:	00c7c83a 	sub	r3,zero,r3
   4c990:	10c00015 	stw	r3,0(r2)
      return -1;
   4c994:	00bfffc4 	movi	r2,-1
   4c998:	e0bffd15 	stw	r2,-12(fp)
   4c99c:	00000806 	br	4c9c0 <close+0xe4>
    }
    return 0;
   4c9a0:	e03ffd15 	stw	zero,-12(fp)
   4c9a4:	00000606 	br	4c9c0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4c9a8:	004c9d80 	call	4c9d8 <alt_get_errno>
   4c9ac:	1007883a 	mov	r3,r2
   4c9b0:	00801444 	movi	r2,81
   4c9b4:	18800015 	stw	r2,0(r3)
    return -1;
   4c9b8:	00bfffc4 	movi	r2,-1
   4c9bc:	e0bffd15 	stw	r2,-12(fp)
   4c9c0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   4c9c4:	e037883a 	mov	sp,fp
   4c9c8:	dfc00117 	ldw	ra,4(sp)
   4c9cc:	df000017 	ldw	fp,0(sp)
   4c9d0:	dec00204 	addi	sp,sp,8
   4c9d4:	f800283a 	ret

0004c9d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c9d8:	defffd04 	addi	sp,sp,-12
   4c9dc:	dfc00215 	stw	ra,8(sp)
   4c9e0:	df000115 	stw	fp,4(sp)
   4c9e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4c9e8:	00800174 	movhi	r2,5
   4c9ec:	10874f04 	addi	r2,r2,7484
   4c9f0:	10800017 	ldw	r2,0(r2)
   4c9f4:	1005003a 	cmpeq	r2,r2,zero
   4c9f8:	1000061e 	bne	r2,zero,4ca14 <alt_get_errno+0x3c>
   4c9fc:	00800174 	movhi	r2,5
   4ca00:	10874f04 	addi	r2,r2,7484
   4ca04:	10800017 	ldw	r2,0(r2)
   4ca08:	103ee83a 	callr	r2
   4ca0c:	e0bfff15 	stw	r2,-4(fp)
   4ca10:	00000306 	br	4ca20 <alt_get_errno+0x48>
   4ca14:	00800174 	movhi	r2,5
   4ca18:	108e6a04 	addi	r2,r2,14760
   4ca1c:	e0bfff15 	stw	r2,-4(fp)
   4ca20:	e0bfff17 	ldw	r2,-4(fp)
}
   4ca24:	e037883a 	mov	sp,fp
   4ca28:	dfc00117 	ldw	ra,4(sp)
   4ca2c:	df000017 	ldw	fp,0(sp)
   4ca30:	dec00204 	addi	sp,sp,8
   4ca34:	f800283a 	ret

0004ca38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ca38:	defffc04 	addi	sp,sp,-16
   4ca3c:	df000315 	stw	fp,12(sp)
   4ca40:	df000304 	addi	fp,sp,12
   4ca44:	e13ffd15 	stw	r4,-12(fp)
   4ca48:	e17ffe15 	stw	r5,-8(fp)
   4ca4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ca50:	e0bfff17 	ldw	r2,-4(fp)
}
   4ca54:	e037883a 	mov	sp,fp
   4ca58:	df000017 	ldw	fp,0(sp)
   4ca5c:	dec00104 	addi	sp,sp,4
   4ca60:	f800283a 	ret

0004ca64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4ca64:	defff904 	addi	sp,sp,-28
   4ca68:	dfc00615 	stw	ra,24(sp)
   4ca6c:	df000515 	stw	fp,20(sp)
   4ca70:	df000504 	addi	fp,sp,20
   4ca74:	e13ffc15 	stw	r4,-16(fp)
   4ca78:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ca7c:	e0bffc17 	ldw	r2,-16(fp)
   4ca80:	1004803a 	cmplt	r2,r2,zero
   4ca84:	1000081e 	bne	r2,zero,4caa8 <fstat+0x44>
   4ca88:	e0bffc17 	ldw	r2,-16(fp)
   4ca8c:	10800324 	muli	r2,r2,12
   4ca90:	1007883a 	mov	r3,r2
   4ca94:	00800174 	movhi	r2,5
   4ca98:	10828f04 	addi	r2,r2,2620
   4ca9c:	1887883a 	add	r3,r3,r2
   4caa0:	e0ffff15 	stw	r3,-4(fp)
   4caa4:	00000106 	br	4caac <fstat+0x48>
   4caa8:	e03fff15 	stw	zero,-4(fp)
   4caac:	e0bfff17 	ldw	r2,-4(fp)
   4cab0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4cab4:	e0bffb17 	ldw	r2,-20(fp)
   4cab8:	1005003a 	cmpeq	r2,r2,zero
   4cabc:	1000121e 	bne	r2,zero,4cb08 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4cac0:	e0bffb17 	ldw	r2,-20(fp)
   4cac4:	10800017 	ldw	r2,0(r2)
   4cac8:	10800817 	ldw	r2,32(r2)
   4cacc:	1005003a 	cmpeq	r2,r2,zero
   4cad0:	1000081e 	bne	r2,zero,4caf4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   4cad4:	e0bffb17 	ldw	r2,-20(fp)
   4cad8:	10800017 	ldw	r2,0(r2)
   4cadc:	10800817 	ldw	r2,32(r2)
   4cae0:	e13ffb17 	ldw	r4,-20(fp)
   4cae4:	e17ffd17 	ldw	r5,-12(fp)
   4cae8:	103ee83a 	callr	r2
   4caec:	e0bffe15 	stw	r2,-8(fp)
   4caf0:	00000b06 	br	4cb20 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4caf4:	e0fffd17 	ldw	r3,-12(fp)
   4caf8:	00880004 	movi	r2,8192
   4cafc:	18800115 	stw	r2,4(r3)
      return 0;
   4cb00:	e03ffe15 	stw	zero,-8(fp)
   4cb04:	00000606 	br	4cb20 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4cb08:	004cb380 	call	4cb38 <alt_get_errno>
   4cb0c:	1007883a 	mov	r3,r2
   4cb10:	00801444 	movi	r2,81
   4cb14:	18800015 	stw	r2,0(r3)
    return -1;
   4cb18:	00bfffc4 	movi	r2,-1
   4cb1c:	e0bffe15 	stw	r2,-8(fp)
   4cb20:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4cb24:	e037883a 	mov	sp,fp
   4cb28:	dfc00117 	ldw	ra,4(sp)
   4cb2c:	df000017 	ldw	fp,0(sp)
   4cb30:	dec00204 	addi	sp,sp,8
   4cb34:	f800283a 	ret

0004cb38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cb38:	defffd04 	addi	sp,sp,-12
   4cb3c:	dfc00215 	stw	ra,8(sp)
   4cb40:	df000115 	stw	fp,4(sp)
   4cb44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4cb48:	00800174 	movhi	r2,5
   4cb4c:	10874f04 	addi	r2,r2,7484
   4cb50:	10800017 	ldw	r2,0(r2)
   4cb54:	1005003a 	cmpeq	r2,r2,zero
   4cb58:	1000061e 	bne	r2,zero,4cb74 <alt_get_errno+0x3c>
   4cb5c:	00800174 	movhi	r2,5
   4cb60:	10874f04 	addi	r2,r2,7484
   4cb64:	10800017 	ldw	r2,0(r2)
   4cb68:	103ee83a 	callr	r2
   4cb6c:	e0bfff15 	stw	r2,-4(fp)
   4cb70:	00000306 	br	4cb80 <alt_get_errno+0x48>
   4cb74:	00800174 	movhi	r2,5
   4cb78:	108e6a04 	addi	r2,r2,14760
   4cb7c:	e0bfff15 	stw	r2,-4(fp)
   4cb80:	e0bfff17 	ldw	r2,-4(fp)
}
   4cb84:	e037883a 	mov	sp,fp
   4cb88:	dfc00117 	ldw	ra,4(sp)
   4cb8c:	df000017 	ldw	fp,0(sp)
   4cb90:	dec00204 	addi	sp,sp,8
   4cb94:	f800283a 	ret

0004cb98 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   4cb98:	deffef04 	addi	sp,sp,-68
   4cb9c:	df001015 	stw	fp,64(sp)
   4cba0:	df001004 	addi	fp,sp,64
   4cba4:	e13ffc15 	stw	r4,-16(fp)
   4cba8:	e17ffd15 	stw	r5,-12(fp)
   4cbac:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   4cbb0:	00bffa84 	movi	r2,-22
   4cbb4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4cbb8:	e0bffc17 	ldw	r2,-16(fp)
   4cbbc:	10800828 	cmpgeui	r2,r2,32
   4cbc0:	1000601e 	bne	r2,zero,4cd44 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cbc4:	0005303a 	rdctl	r2,status
   4cbc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cbcc:	e0fff917 	ldw	r3,-28(fp)
   4cbd0:	00bfff84 	movi	r2,-2
   4cbd4:	1884703a 	and	r2,r3,r2
   4cbd8:	1001703a 	wrctl	status,r2
  
  return context;
   4cbdc:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   4cbe0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   4cbe4:	e0bffc17 	ldw	r2,-16(fp)
   4cbe8:	00c00174 	movhi	r3,5
   4cbec:	18d50c04 	addi	r3,r3,21552
   4cbf0:	100490fa 	slli	r2,r2,3
   4cbf4:	10c7883a 	add	r3,r2,r3
   4cbf8:	e0bffe17 	ldw	r2,-8(fp)
   4cbfc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   4cc00:	e0bffc17 	ldw	r2,-16(fp)
   4cc04:	00c00174 	movhi	r3,5
   4cc08:	18d50c04 	addi	r3,r3,21552
   4cc0c:	100490fa 	slli	r2,r2,3
   4cc10:	10c5883a 	add	r2,r2,r3
   4cc14:	10c00104 	addi	r3,r2,4
   4cc18:	e0bffd17 	ldw	r2,-12(fp)
   4cc1c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   4cc20:	e0bffe17 	ldw	r2,-8(fp)
   4cc24:	1005003a 	cmpeq	r2,r2,zero
   4cc28:	1000201e 	bne	r2,zero,4ccac <alt_irq_register+0x114>
   4cc2c:	e0bffc17 	ldw	r2,-16(fp)
   4cc30:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cc34:	0005303a 	rdctl	r2,status
   4cc38:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cc3c:	e0fff617 	ldw	r3,-40(fp)
   4cc40:	00bfff84 	movi	r2,-2
   4cc44:	1884703a 	and	r2,r3,r2
   4cc48:	1001703a 	wrctl	status,r2
  
  return context;
   4cc4c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4cc50:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   4cc54:	e0fff717 	ldw	r3,-36(fp)
   4cc58:	00800044 	movi	r2,1
   4cc5c:	10c4983a 	sll	r2,r2,r3
   4cc60:	1007883a 	mov	r3,r2
   4cc64:	00800174 	movhi	r2,5
   4cc68:	108e6b04 	addi	r2,r2,14764
   4cc6c:	10800017 	ldw	r2,0(r2)
   4cc70:	1886b03a 	or	r3,r3,r2
   4cc74:	00800174 	movhi	r2,5
   4cc78:	108e6b04 	addi	r2,r2,14764
   4cc7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4cc80:	00800174 	movhi	r2,5
   4cc84:	108e6b04 	addi	r2,r2,14764
   4cc88:	10800017 	ldw	r2,0(r2)
   4cc8c:	100170fa 	wrctl	ienable,r2
   4cc90:	e0bff817 	ldw	r2,-32(fp)
   4cc94:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cc98:	e0bff517 	ldw	r2,-44(fp)
   4cc9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4cca0:	0005883a 	mov	r2,zero
   4cca4:	e0bfff15 	stw	r2,-4(fp)
   4cca8:	00002006 	br	4cd2c <alt_irq_register+0x194>
   4ccac:	e0bffc17 	ldw	r2,-16(fp)
   4ccb0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ccb4:	0005303a 	rdctl	r2,status
   4ccb8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ccbc:	e0fff217 	ldw	r3,-56(fp)
   4ccc0:	00bfff84 	movi	r2,-2
   4ccc4:	1884703a 	and	r2,r3,r2
   4ccc8:	1001703a 	wrctl	status,r2
  
  return context;
   4cccc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4ccd0:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   4ccd4:	e0fff317 	ldw	r3,-52(fp)
   4ccd8:	00800044 	movi	r2,1
   4ccdc:	10c4983a 	sll	r2,r2,r3
   4cce0:	0084303a 	nor	r2,zero,r2
   4cce4:	1007883a 	mov	r3,r2
   4cce8:	00800174 	movhi	r2,5
   4ccec:	108e6b04 	addi	r2,r2,14764
   4ccf0:	10800017 	ldw	r2,0(r2)
   4ccf4:	1886703a 	and	r3,r3,r2
   4ccf8:	00800174 	movhi	r2,5
   4ccfc:	108e6b04 	addi	r2,r2,14764
   4cd00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4cd04:	00800174 	movhi	r2,5
   4cd08:	108e6b04 	addi	r2,r2,14764
   4cd0c:	10800017 	ldw	r2,0(r2)
   4cd10:	100170fa 	wrctl	ienable,r2
   4cd14:	e0bff417 	ldw	r2,-48(fp)
   4cd18:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cd1c:	e0bff117 	ldw	r2,-60(fp)
   4cd20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4cd24:	0005883a 	mov	r2,zero
   4cd28:	e0bfff15 	stw	r2,-4(fp)
   4cd2c:	e0bfff17 	ldw	r2,-4(fp)
   4cd30:	e0bffb15 	stw	r2,-20(fp)
   4cd34:	e0bffa17 	ldw	r2,-24(fp)
   4cd38:	e0bff015 	stw	r2,-64(fp)
   4cd3c:	e0bff017 	ldw	r2,-64(fp)
   4cd40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   4cd44:	e0bffb17 	ldw	r2,-20(fp)
}
   4cd48:	e037883a 	mov	sp,fp
   4cd4c:	df000017 	ldw	fp,0(sp)
   4cd50:	dec00104 	addi	sp,sp,4
   4cd54:	f800283a 	ret

0004cd58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4cd58:	deffeb04 	addi	sp,sp,-84
   4cd5c:	dfc01415 	stw	ra,80(sp)
   4cd60:	df001315 	stw	fp,76(sp)
   4cd64:	df001304 	addi	fp,sp,76
   4cd68:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4cd6c:	e0bffd17 	ldw	r2,-12(fp)
   4cd70:	1004803a 	cmplt	r2,r2,zero
   4cd74:	1000081e 	bne	r2,zero,4cd98 <isatty+0x40>
   4cd78:	e0bffd17 	ldw	r2,-12(fp)
   4cd7c:	10800324 	muli	r2,r2,12
   4cd80:	1007883a 	mov	r3,r2
   4cd84:	00800174 	movhi	r2,5
   4cd88:	10828f04 	addi	r2,r2,2620
   4cd8c:	1887883a 	add	r3,r3,r2
   4cd90:	e0ffff15 	stw	r3,-4(fp)
   4cd94:	00000106 	br	4cd9c <isatty+0x44>
   4cd98:	e03fff15 	stw	zero,-4(fp)
   4cd9c:	e0bfff17 	ldw	r2,-4(fp)
   4cda0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   4cda4:	e0bfed17 	ldw	r2,-76(fp)
   4cda8:	1005003a 	cmpeq	r2,r2,zero
   4cdac:	10000f1e 	bne	r2,zero,4cdec <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4cdb0:	e0bfed17 	ldw	r2,-76(fp)
   4cdb4:	10800017 	ldw	r2,0(r2)
   4cdb8:	10800817 	ldw	r2,32(r2)
   4cdbc:	1004c03a 	cmpne	r2,r2,zero
   4cdc0:	1000031e 	bne	r2,zero,4cdd0 <isatty+0x78>
    {
      return 1;
   4cdc4:	00800044 	movi	r2,1
   4cdc8:	e0bffe15 	stw	r2,-8(fp)
   4cdcc:	00000c06 	br	4ce00 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4cdd0:	e17fee04 	addi	r5,fp,-72
   4cdd4:	e13ffd17 	ldw	r4,-12(fp)
   4cdd8:	004ca640 	call	4ca64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4cddc:	e0bfef17 	ldw	r2,-68(fp)
   4cde0:	10880020 	cmpeqi	r2,r2,8192
   4cde4:	e0bffe15 	stw	r2,-8(fp)
   4cde8:	00000506 	br	4ce00 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4cdec:	004ce180 	call	4ce18 <alt_get_errno>
   4cdf0:	1007883a 	mov	r3,r2
   4cdf4:	00801444 	movi	r2,81
   4cdf8:	18800015 	stw	r2,0(r3)
    return 0;
   4cdfc:	e03ffe15 	stw	zero,-8(fp)
   4ce00:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4ce04:	e037883a 	mov	sp,fp
   4ce08:	dfc00117 	ldw	ra,4(sp)
   4ce0c:	df000017 	ldw	fp,0(sp)
   4ce10:	dec00204 	addi	sp,sp,8
   4ce14:	f800283a 	ret

0004ce18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ce18:	defffd04 	addi	sp,sp,-12
   4ce1c:	dfc00215 	stw	ra,8(sp)
   4ce20:	df000115 	stw	fp,4(sp)
   4ce24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4ce28:	00800174 	movhi	r2,5
   4ce2c:	10874f04 	addi	r2,r2,7484
   4ce30:	10800017 	ldw	r2,0(r2)
   4ce34:	1005003a 	cmpeq	r2,r2,zero
   4ce38:	1000061e 	bne	r2,zero,4ce54 <alt_get_errno+0x3c>
   4ce3c:	00800174 	movhi	r2,5
   4ce40:	10874f04 	addi	r2,r2,7484
   4ce44:	10800017 	ldw	r2,0(r2)
   4ce48:	103ee83a 	callr	r2
   4ce4c:	e0bfff15 	stw	r2,-4(fp)
   4ce50:	00000306 	br	4ce60 <alt_get_errno+0x48>
   4ce54:	00800174 	movhi	r2,5
   4ce58:	108e6a04 	addi	r2,r2,14760
   4ce5c:	e0bfff15 	stw	r2,-4(fp)
   4ce60:	e0bfff17 	ldw	r2,-4(fp)
}
   4ce64:	e037883a 	mov	sp,fp
   4ce68:	dfc00117 	ldw	ra,4(sp)
   4ce6c:	df000017 	ldw	fp,0(sp)
   4ce70:	dec00204 	addi	sp,sp,8
   4ce74:	f800283a 	ret

0004ce78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4ce78:	defffe04 	addi	sp,sp,-8
   4ce7c:	dfc00115 	stw	ra,4(sp)
   4ce80:	df000015 	stw	fp,0(sp)
   4ce84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4ce88:	01000174 	movhi	r4,5
   4ce8c:	21075404 	addi	r4,r4,7504
   4ce90:	01400174 	movhi	r5,5
   4ce94:	29405b04 	addi	r5,r5,364
   4ce98:	01800174 	movhi	r6,5
   4ce9c:	31875404 	addi	r6,r6,7504
   4cea0:	004cef80 	call	4cef8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4cea4:	01000134 	movhi	r4,4
   4cea8:	21000804 	addi	r4,r4,32
   4ceac:	01400134 	movhi	r5,4
   4ceb0:	29400804 	addi	r5,r5,32
   4ceb4:	01800134 	movhi	r6,4
   4ceb8:	31806d04 	addi	r6,r6,436
   4cebc:	004cef80 	call	4cef8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4cec0:	01000174 	movhi	r4,5
   4cec4:	213f7904 	addi	r4,r4,-540
   4cec8:	01400174 	movhi	r5,5
   4cecc:	297f7904 	addi	r5,r5,-540
   4ced0:	01800174 	movhi	r6,5
   4ced4:	31805b04 	addi	r6,r6,364
   4ced8:	004cef80 	call	4cef8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4cedc:	004eec00 	call	4eec0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4cee0:	004f34c0 	call	4f34c <alt_icache_flush_all>
}
   4cee4:	e037883a 	mov	sp,fp
   4cee8:	dfc00117 	ldw	ra,4(sp)
   4ceec:	df000017 	ldw	fp,0(sp)
   4cef0:	dec00204 	addi	sp,sp,8
   4cef4:	f800283a 	ret

0004cef8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4cef8:	defffc04 	addi	sp,sp,-16
   4cefc:	df000315 	stw	fp,12(sp)
   4cf00:	df000304 	addi	fp,sp,12
   4cf04:	e13ffd15 	stw	r4,-12(fp)
   4cf08:	e17ffe15 	stw	r5,-8(fp)
   4cf0c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4cf10:	e0fffe17 	ldw	r3,-8(fp)
   4cf14:	e0bffd17 	ldw	r2,-12(fp)
   4cf18:	18800e26 	beq	r3,r2,4cf54 <alt_load_section+0x5c>
  {
    while( to != end )
   4cf1c:	00000a06 	br	4cf48 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4cf20:	e0bffd17 	ldw	r2,-12(fp)
   4cf24:	10c00017 	ldw	r3,0(r2)
   4cf28:	e0bffe17 	ldw	r2,-8(fp)
   4cf2c:	10c00015 	stw	r3,0(r2)
   4cf30:	e0bffe17 	ldw	r2,-8(fp)
   4cf34:	10800104 	addi	r2,r2,4
   4cf38:	e0bffe15 	stw	r2,-8(fp)
   4cf3c:	e0bffd17 	ldw	r2,-12(fp)
   4cf40:	10800104 	addi	r2,r2,4
   4cf44:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4cf48:	e0fffe17 	ldw	r3,-8(fp)
   4cf4c:	e0bfff17 	ldw	r2,-4(fp)
   4cf50:	18bff31e 	bne	r3,r2,4cf20 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4cf54:	e037883a 	mov	sp,fp
   4cf58:	df000017 	ldw	fp,0(sp)
   4cf5c:	dec00104 	addi	sp,sp,4
   4cf60:	f800283a 	ret

0004cf64 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4cf64:	defff804 	addi	sp,sp,-32
   4cf68:	dfc00715 	stw	ra,28(sp)
   4cf6c:	df000615 	stw	fp,24(sp)
   4cf70:	df000604 	addi	fp,sp,24
   4cf74:	e13ffc15 	stw	r4,-16(fp)
   4cf78:	e17ffd15 	stw	r5,-12(fp)
   4cf7c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4cf80:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4cf84:	e0bffc17 	ldw	r2,-16(fp)
   4cf88:	1004803a 	cmplt	r2,r2,zero
   4cf8c:	1000081e 	bne	r2,zero,4cfb0 <lseek+0x4c>
   4cf90:	e0bffc17 	ldw	r2,-16(fp)
   4cf94:	10800324 	muli	r2,r2,12
   4cf98:	1007883a 	mov	r3,r2
   4cf9c:	00800174 	movhi	r2,5
   4cfa0:	10828f04 	addi	r2,r2,2620
   4cfa4:	1887883a 	add	r3,r3,r2
   4cfa8:	e0ffff15 	stw	r3,-4(fp)
   4cfac:	00000106 	br	4cfb4 <lseek+0x50>
   4cfb0:	e03fff15 	stw	zero,-4(fp)
   4cfb4:	e0bfff17 	ldw	r2,-4(fp)
   4cfb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4cfbc:	e0bffb17 	ldw	r2,-20(fp)
   4cfc0:	1005003a 	cmpeq	r2,r2,zero
   4cfc4:	1000111e 	bne	r2,zero,4d00c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4cfc8:	e0bffb17 	ldw	r2,-20(fp)
   4cfcc:	10800017 	ldw	r2,0(r2)
   4cfd0:	10800717 	ldw	r2,28(r2)
   4cfd4:	1005003a 	cmpeq	r2,r2,zero
   4cfd8:	1000091e 	bne	r2,zero,4d000 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4cfdc:	e0bffb17 	ldw	r2,-20(fp)
   4cfe0:	10800017 	ldw	r2,0(r2)
   4cfe4:	10800717 	ldw	r2,28(r2)
   4cfe8:	e13ffb17 	ldw	r4,-20(fp)
   4cfec:	e17ffd17 	ldw	r5,-12(fp)
   4cff0:	e1bffe17 	ldw	r6,-8(fp)
   4cff4:	103ee83a 	callr	r2
   4cff8:	e0bffa15 	stw	r2,-24(fp)
   4cffc:	00000506 	br	4d014 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4d000:	00bfde84 	movi	r2,-134
   4d004:	e0bffa15 	stw	r2,-24(fp)
   4d008:	00000206 	br	4d014 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4d00c:	00bfebc4 	movi	r2,-81
   4d010:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   4d014:	e0bffa17 	ldw	r2,-24(fp)
   4d018:	1004403a 	cmpge	r2,r2,zero
   4d01c:	1000071e 	bne	r2,zero,4d03c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4d020:	004d0540 	call	4d054 <alt_get_errno>
   4d024:	1007883a 	mov	r3,r2
   4d028:	e0bffa17 	ldw	r2,-24(fp)
   4d02c:	0085c83a 	sub	r2,zero,r2
   4d030:	18800015 	stw	r2,0(r3)
    rc = -1;
   4d034:	00bfffc4 	movi	r2,-1
   4d038:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   4d03c:	e0bffa17 	ldw	r2,-24(fp)
}
   4d040:	e037883a 	mov	sp,fp
   4d044:	dfc00117 	ldw	ra,4(sp)
   4d048:	df000017 	ldw	fp,0(sp)
   4d04c:	dec00204 	addi	sp,sp,8
   4d050:	f800283a 	ret

0004d054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d054:	defffd04 	addi	sp,sp,-12
   4d058:	dfc00215 	stw	ra,8(sp)
   4d05c:	df000115 	stw	fp,4(sp)
   4d060:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4d064:	00800174 	movhi	r2,5
   4d068:	10874f04 	addi	r2,r2,7484
   4d06c:	10800017 	ldw	r2,0(r2)
   4d070:	1005003a 	cmpeq	r2,r2,zero
   4d074:	1000061e 	bne	r2,zero,4d090 <alt_get_errno+0x3c>
   4d078:	00800174 	movhi	r2,5
   4d07c:	10874f04 	addi	r2,r2,7484
   4d080:	10800017 	ldw	r2,0(r2)
   4d084:	103ee83a 	callr	r2
   4d088:	e0bfff15 	stw	r2,-4(fp)
   4d08c:	00000306 	br	4d09c <alt_get_errno+0x48>
   4d090:	00800174 	movhi	r2,5
   4d094:	108e6a04 	addi	r2,r2,14760
   4d098:	e0bfff15 	stw	r2,-4(fp)
   4d09c:	e0bfff17 	ldw	r2,-4(fp)
}
   4d0a0:	e037883a 	mov	sp,fp
   4d0a4:	dfc00117 	ldw	ra,4(sp)
   4d0a8:	df000017 	ldw	fp,0(sp)
   4d0ac:	dec00204 	addi	sp,sp,8
   4d0b0:	f800283a 	ret

0004d0b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4d0b4:	defffd04 	addi	sp,sp,-12
   4d0b8:	dfc00215 	stw	ra,8(sp)
   4d0bc:	df000115 	stw	fp,4(sp)
   4d0c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4d0c4:	0009883a 	mov	r4,zero
   4d0c8:	004d8400 	call	4d840 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4d0cc:	004d8740 	call	4d874 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4d0d0:	01000174 	movhi	r4,5
   4d0d4:	21005004 	addi	r4,r4,320
   4d0d8:	01400174 	movhi	r5,5
   4d0dc:	29405004 	addi	r5,r5,320
   4d0e0:	01800174 	movhi	r6,5
   4d0e4:	31805004 	addi	r6,r6,320
   4d0e8:	004f70c0 	call	4f70c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4d0ec:	004f0180 	call	4f018 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4d0f0:	01000174 	movhi	r4,5
   4d0f4:	213c1f04 	addi	r4,r4,-3972
   4d0f8:	004f9d80 	call	4f9d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4d0fc:	d1273417 	ldw	r4,-25392(gp)
   4d100:	d1673517 	ldw	r5,-25388(gp)
   4d104:	d1a73617 	ldw	r6,-25384(gp)
   4d108:	00423280 	call	42328 <main>
   4d10c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4d110:	01000044 	movi	r4,1
   4d114:	004c8dc0 	call	4c8dc <close>
  exit (result);
   4d118:	e13fff17 	ldw	r4,-4(fp)
   4d11c:	004f9ec0 	call	4f9ec <exit>

0004d120 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4d120:	defffe04 	addi	sp,sp,-8
   4d124:	df000115 	stw	fp,4(sp)
   4d128:	df000104 	addi	fp,sp,4
   4d12c:	e13fff15 	stw	r4,-4(fp)
}
   4d130:	e037883a 	mov	sp,fp
   4d134:	df000017 	ldw	fp,0(sp)
   4d138:	dec00104 	addi	sp,sp,4
   4d13c:	f800283a 	ret

0004d140 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4d140:	defffe04 	addi	sp,sp,-8
   4d144:	df000115 	stw	fp,4(sp)
   4d148:	df000104 	addi	fp,sp,4
   4d14c:	e13fff15 	stw	r4,-4(fp)
}
   4d150:	e037883a 	mov	sp,fp
   4d154:	df000017 	ldw	fp,0(sp)
   4d158:	dec00104 	addi	sp,sp,4
   4d15c:	f800283a 	ret

0004d160 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4d160:	defffc04 	addi	sp,sp,-16
   4d164:	df000315 	stw	fp,12(sp)
   4d168:	df000304 	addi	fp,sp,12
   4d16c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4d170:	e0bffe17 	ldw	r2,-8(fp)
   4d174:	10800217 	ldw	r2,8(r2)
   4d178:	10d00034 	orhi	r3,r2,16384
   4d17c:	e0bffe17 	ldw	r2,-8(fp)
   4d180:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4d184:	e03ffd15 	stw	zero,-12(fp)
   4d188:	00002006 	br	4d20c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4d18c:	e0bffd17 	ldw	r2,-12(fp)
   4d190:	00c00174 	movhi	r3,5
   4d194:	18c28f04 	addi	r3,r3,2620
   4d198:	10800324 	muli	r2,r2,12
   4d19c:	10c5883a 	add	r2,r2,r3
   4d1a0:	10c00017 	ldw	r3,0(r2)
   4d1a4:	e0bffe17 	ldw	r2,-8(fp)
   4d1a8:	10800017 	ldw	r2,0(r2)
   4d1ac:	1880141e 	bne	r3,r2,4d200 <alt_file_locked+0xa0>
   4d1b0:	e0bffd17 	ldw	r2,-12(fp)
   4d1b4:	00c00174 	movhi	r3,5
   4d1b8:	18c28f04 	addi	r3,r3,2620
   4d1bc:	10800324 	muli	r2,r2,12
   4d1c0:	10c5883a 	add	r2,r2,r3
   4d1c4:	10800204 	addi	r2,r2,8
   4d1c8:	10800017 	ldw	r2,0(r2)
   4d1cc:	1004403a 	cmpge	r2,r2,zero
   4d1d0:	10000b1e 	bne	r2,zero,4d200 <alt_file_locked+0xa0>
   4d1d4:	e0bffd17 	ldw	r2,-12(fp)
   4d1d8:	10800324 	muli	r2,r2,12
   4d1dc:	1007883a 	mov	r3,r2
   4d1e0:	00800174 	movhi	r2,5
   4d1e4:	10828f04 	addi	r2,r2,2620
   4d1e8:	1887883a 	add	r3,r3,r2
   4d1ec:	e0bffe17 	ldw	r2,-8(fp)
   4d1f0:	18800326 	beq	r3,r2,4d200 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4d1f4:	00bffcc4 	movi	r2,-13
   4d1f8:	e0bfff15 	stw	r2,-4(fp)
   4d1fc:	00000a06 	br	4d228 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4d200:	e0bffd17 	ldw	r2,-12(fp)
   4d204:	10800044 	addi	r2,r2,1
   4d208:	e0bffd15 	stw	r2,-12(fp)
   4d20c:	00800174 	movhi	r2,5
   4d210:	10874e04 	addi	r2,r2,7480
   4d214:	10800017 	ldw	r2,0(r2)
   4d218:	1007883a 	mov	r3,r2
   4d21c:	e0bffd17 	ldw	r2,-12(fp)
   4d220:	18bfda2e 	bgeu	r3,r2,4d18c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4d224:	e03fff15 	stw	zero,-4(fp)
   4d228:	e0bfff17 	ldw	r2,-4(fp)
}
   4d22c:	e037883a 	mov	sp,fp
   4d230:	df000017 	ldw	fp,0(sp)
   4d234:	dec00104 	addi	sp,sp,4
   4d238:	f800283a 	ret

0004d23c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4d23c:	defff404 	addi	sp,sp,-48
   4d240:	dfc00b15 	stw	ra,44(sp)
   4d244:	df000a15 	stw	fp,40(sp)
   4d248:	df000a04 	addi	fp,sp,40
   4d24c:	e13ffb15 	stw	r4,-20(fp)
   4d250:	e17ffc15 	stw	r5,-16(fp)
   4d254:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4d258:	00bfffc4 	movi	r2,-1
   4d25c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   4d260:	00bffb44 	movi	r2,-19
   4d264:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   4d268:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4d26c:	e13ffb17 	ldw	r4,-20(fp)
   4d270:	01400174 	movhi	r5,5
   4d274:	29474c04 	addi	r5,r5,7472
   4d278:	004f0e00 	call	4f0e0 <alt_find_dev>
   4d27c:	e0bffa15 	stw	r2,-24(fp)
   4d280:	e0bffa17 	ldw	r2,-24(fp)
   4d284:	1004c03a 	cmpne	r2,r2,zero
   4d288:	1000051e 	bne	r2,zero,4d2a0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4d28c:	e13ffb17 	ldw	r4,-20(fp)
   4d290:	004f1740 	call	4f174 <alt_find_file>
   4d294:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   4d298:	00800044 	movi	r2,1
   4d29c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4d2a0:	e0bffa17 	ldw	r2,-24(fp)
   4d2a4:	1005003a 	cmpeq	r2,r2,zero
   4d2a8:	1000301e 	bne	r2,zero,4d36c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4d2ac:	e13ffa17 	ldw	r4,-24(fp)
   4d2b0:	004f2940 	call	4f294 <alt_get_fd>
   4d2b4:	e0bff815 	stw	r2,-32(fp)
   4d2b8:	e0bff817 	ldw	r2,-32(fp)
   4d2bc:	1004403a 	cmpge	r2,r2,zero
   4d2c0:	1000031e 	bne	r2,zero,4d2d0 <open+0x94>
    {
      status = index;
   4d2c4:	e0bff817 	ldw	r2,-32(fp)
   4d2c8:	e0bff715 	stw	r2,-36(fp)
   4d2cc:	00002906 	br	4d374 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   4d2d0:	e0bff817 	ldw	r2,-32(fp)
   4d2d4:	10800324 	muli	r2,r2,12
   4d2d8:	1007883a 	mov	r3,r2
   4d2dc:	00800174 	movhi	r2,5
   4d2e0:	10828f04 	addi	r2,r2,2620
   4d2e4:	1885883a 	add	r2,r3,r2
   4d2e8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4d2ec:	e0fffc17 	ldw	r3,-16(fp)
   4d2f0:	00900034 	movhi	r2,16384
   4d2f4:	10bfffc4 	addi	r2,r2,-1
   4d2f8:	1886703a 	and	r3,r3,r2
   4d2fc:	e0bff917 	ldw	r2,-28(fp)
   4d300:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4d304:	e0bff617 	ldw	r2,-40(fp)
   4d308:	1004c03a 	cmpne	r2,r2,zero
   4d30c:	1000061e 	bne	r2,zero,4d328 <open+0xec>
   4d310:	e13ff917 	ldw	r4,-28(fp)
   4d314:	004d1600 	call	4d160 <alt_file_locked>
   4d318:	e0bff715 	stw	r2,-36(fp)
   4d31c:	e0bff717 	ldw	r2,-36(fp)
   4d320:	1004803a 	cmplt	r2,r2,zero
   4d324:	1000131e 	bne	r2,zero,4d374 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4d328:	e0bffa17 	ldw	r2,-24(fp)
   4d32c:	10800317 	ldw	r2,12(r2)
   4d330:	1005003a 	cmpeq	r2,r2,zero
   4d334:	1000091e 	bne	r2,zero,4d35c <open+0x120>
   4d338:	e0bffa17 	ldw	r2,-24(fp)
   4d33c:	10800317 	ldw	r2,12(r2)
   4d340:	e13ff917 	ldw	r4,-28(fp)
   4d344:	e17ffb17 	ldw	r5,-20(fp)
   4d348:	e1bffc17 	ldw	r6,-16(fp)
   4d34c:	e1fffd17 	ldw	r7,-12(fp)
   4d350:	103ee83a 	callr	r2
   4d354:	e0bfff15 	stw	r2,-4(fp)
   4d358:	00000106 	br	4d360 <open+0x124>
   4d35c:	e03fff15 	stw	zero,-4(fp)
   4d360:	e0bfff17 	ldw	r2,-4(fp)
   4d364:	e0bff715 	stw	r2,-36(fp)
   4d368:	00000206 	br	4d374 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4d36c:	00bffb44 	movi	r2,-19
   4d370:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4d374:	e0bff717 	ldw	r2,-36(fp)
   4d378:	1004403a 	cmpge	r2,r2,zero
   4d37c:	1000091e 	bne	r2,zero,4d3a4 <open+0x168>
  {
    alt_release_fd (index);  
   4d380:	e13ff817 	ldw	r4,-32(fp)
   4d384:	004d5a40 	call	4d5a4 <alt_release_fd>
    ALT_ERRNO = -status;
   4d388:	004d3c40 	call	4d3c4 <alt_get_errno>
   4d38c:	e0fff717 	ldw	r3,-36(fp)
   4d390:	00c7c83a 	sub	r3,zero,r3
   4d394:	10c00015 	stw	r3,0(r2)
    return -1;
   4d398:	00bfffc4 	movi	r2,-1
   4d39c:	e0bffe15 	stw	r2,-8(fp)
   4d3a0:	00000206 	br	4d3ac <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   4d3a4:	e0bff817 	ldw	r2,-32(fp)
   4d3a8:	e0bffe15 	stw	r2,-8(fp)
   4d3ac:	e0bffe17 	ldw	r2,-8(fp)
}
   4d3b0:	e037883a 	mov	sp,fp
   4d3b4:	dfc00117 	ldw	ra,4(sp)
   4d3b8:	df000017 	ldw	fp,0(sp)
   4d3bc:	dec00204 	addi	sp,sp,8
   4d3c0:	f800283a 	ret

0004d3c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d3c4:	defffd04 	addi	sp,sp,-12
   4d3c8:	dfc00215 	stw	ra,8(sp)
   4d3cc:	df000115 	stw	fp,4(sp)
   4d3d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4d3d4:	00800174 	movhi	r2,5
   4d3d8:	10874f04 	addi	r2,r2,7484
   4d3dc:	10800017 	ldw	r2,0(r2)
   4d3e0:	1005003a 	cmpeq	r2,r2,zero
   4d3e4:	1000061e 	bne	r2,zero,4d400 <alt_get_errno+0x3c>
   4d3e8:	00800174 	movhi	r2,5
   4d3ec:	10874f04 	addi	r2,r2,7484
   4d3f0:	10800017 	ldw	r2,0(r2)
   4d3f4:	103ee83a 	callr	r2
   4d3f8:	e0bfff15 	stw	r2,-4(fp)
   4d3fc:	00000306 	br	4d40c <alt_get_errno+0x48>
   4d400:	00800174 	movhi	r2,5
   4d404:	108e6a04 	addi	r2,r2,14760
   4d408:	e0bfff15 	stw	r2,-4(fp)
   4d40c:	e0bfff17 	ldw	r2,-4(fp)
}
   4d410:	e037883a 	mov	sp,fp
   4d414:	dfc00117 	ldw	ra,4(sp)
   4d418:	df000017 	ldw	fp,0(sp)
   4d41c:	dec00204 	addi	sp,sp,8
   4d420:	f800283a 	ret

0004d424 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4d424:	defff704 	addi	sp,sp,-36
   4d428:	dfc00815 	stw	ra,32(sp)
   4d42c:	df000715 	stw	fp,28(sp)
   4d430:	df000704 	addi	fp,sp,28
   4d434:	e13ffb15 	stw	r4,-20(fp)
   4d438:	e17ffc15 	stw	r5,-16(fp)
   4d43c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d440:	e0bffb17 	ldw	r2,-20(fp)
   4d444:	1004803a 	cmplt	r2,r2,zero
   4d448:	1000081e 	bne	r2,zero,4d46c <read+0x48>
   4d44c:	e0bffb17 	ldw	r2,-20(fp)
   4d450:	10800324 	muli	r2,r2,12
   4d454:	1007883a 	mov	r3,r2
   4d458:	00800174 	movhi	r2,5
   4d45c:	10828f04 	addi	r2,r2,2620
   4d460:	1887883a 	add	r3,r3,r2
   4d464:	e0ffff15 	stw	r3,-4(fp)
   4d468:	00000106 	br	4d470 <read+0x4c>
   4d46c:	e03fff15 	stw	zero,-4(fp)
   4d470:	e0bfff17 	ldw	r2,-4(fp)
   4d474:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4d478:	e0bffa17 	ldw	r2,-24(fp)
   4d47c:	1005003a 	cmpeq	r2,r2,zero
   4d480:	1000241e 	bne	r2,zero,4d514 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4d484:	e0bffa17 	ldw	r2,-24(fp)
   4d488:	10800217 	ldw	r2,8(r2)
   4d48c:	108000cc 	andi	r2,r2,3
   4d490:	10800060 	cmpeqi	r2,r2,1
   4d494:	10001a1e 	bne	r2,zero,4d500 <read+0xdc>
   4d498:	e0bffa17 	ldw	r2,-24(fp)
   4d49c:	10800017 	ldw	r2,0(r2)
   4d4a0:	10800517 	ldw	r2,20(r2)
   4d4a4:	1005003a 	cmpeq	r2,r2,zero
   4d4a8:	1000151e 	bne	r2,zero,4d500 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4d4ac:	e0bffa17 	ldw	r2,-24(fp)
   4d4b0:	10800017 	ldw	r2,0(r2)
   4d4b4:	10800517 	ldw	r2,20(r2)
   4d4b8:	e17ffc17 	ldw	r5,-16(fp)
   4d4bc:	e1bffd17 	ldw	r6,-12(fp)
   4d4c0:	e13ffa17 	ldw	r4,-24(fp)
   4d4c4:	103ee83a 	callr	r2
   4d4c8:	e0bff915 	stw	r2,-28(fp)
   4d4cc:	e0bff917 	ldw	r2,-28(fp)
   4d4d0:	1004403a 	cmpge	r2,r2,zero
   4d4d4:	1000071e 	bne	r2,zero,4d4f4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   4d4d8:	004d5440 	call	4d544 <alt_get_errno>
   4d4dc:	e0fff917 	ldw	r3,-28(fp)
   4d4e0:	00c7c83a 	sub	r3,zero,r3
   4d4e4:	10c00015 	stw	r3,0(r2)
          return -1;
   4d4e8:	00bfffc4 	movi	r2,-1
   4d4ec:	e0bffe15 	stw	r2,-8(fp)
   4d4f0:	00000e06 	br	4d52c <read+0x108>
        }
        return rval;
   4d4f4:	e0bff917 	ldw	r2,-28(fp)
   4d4f8:	e0bffe15 	stw	r2,-8(fp)
   4d4fc:	00000b06 	br	4d52c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4d500:	004d5440 	call	4d544 <alt_get_errno>
   4d504:	1007883a 	mov	r3,r2
   4d508:	00800344 	movi	r2,13
   4d50c:	18800015 	stw	r2,0(r3)
   4d510:	00000406 	br	4d524 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4d514:	004d5440 	call	4d544 <alt_get_errno>
   4d518:	1007883a 	mov	r3,r2
   4d51c:	00801444 	movi	r2,81
   4d520:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4d524:	00bfffc4 	movi	r2,-1
   4d528:	e0bffe15 	stw	r2,-8(fp)
   4d52c:	e0bffe17 	ldw	r2,-8(fp)
}
   4d530:	e037883a 	mov	sp,fp
   4d534:	dfc00117 	ldw	ra,4(sp)
   4d538:	df000017 	ldw	fp,0(sp)
   4d53c:	dec00204 	addi	sp,sp,8
   4d540:	f800283a 	ret

0004d544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d544:	defffd04 	addi	sp,sp,-12
   4d548:	dfc00215 	stw	ra,8(sp)
   4d54c:	df000115 	stw	fp,4(sp)
   4d550:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4d554:	00800174 	movhi	r2,5
   4d558:	10874f04 	addi	r2,r2,7484
   4d55c:	10800017 	ldw	r2,0(r2)
   4d560:	1005003a 	cmpeq	r2,r2,zero
   4d564:	1000061e 	bne	r2,zero,4d580 <alt_get_errno+0x3c>
   4d568:	00800174 	movhi	r2,5
   4d56c:	10874f04 	addi	r2,r2,7484
   4d570:	10800017 	ldw	r2,0(r2)
   4d574:	103ee83a 	callr	r2
   4d578:	e0bfff15 	stw	r2,-4(fp)
   4d57c:	00000306 	br	4d58c <alt_get_errno+0x48>
   4d580:	00800174 	movhi	r2,5
   4d584:	108e6a04 	addi	r2,r2,14760
   4d588:	e0bfff15 	stw	r2,-4(fp)
   4d58c:	e0bfff17 	ldw	r2,-4(fp)
}
   4d590:	e037883a 	mov	sp,fp
   4d594:	dfc00117 	ldw	ra,4(sp)
   4d598:	df000017 	ldw	fp,0(sp)
   4d59c:	dec00204 	addi	sp,sp,8
   4d5a0:	f800283a 	ret

0004d5a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4d5a4:	defffe04 	addi	sp,sp,-8
   4d5a8:	df000115 	stw	fp,4(sp)
   4d5ac:	df000104 	addi	fp,sp,4
   4d5b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4d5b4:	e0bfff17 	ldw	r2,-4(fp)
   4d5b8:	108000d0 	cmplti	r2,r2,3
   4d5bc:	10000d1e 	bne	r2,zero,4d5f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4d5c0:	e0bfff17 	ldw	r2,-4(fp)
   4d5c4:	00c00174 	movhi	r3,5
   4d5c8:	18c28f04 	addi	r3,r3,2620
   4d5cc:	10800324 	muli	r2,r2,12
   4d5d0:	10c5883a 	add	r2,r2,r3
   4d5d4:	10800204 	addi	r2,r2,8
   4d5d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4d5dc:	e0bfff17 	ldw	r2,-4(fp)
   4d5e0:	00c00174 	movhi	r3,5
   4d5e4:	18c28f04 	addi	r3,r3,2620
   4d5e8:	10800324 	muli	r2,r2,12
   4d5ec:	10c5883a 	add	r2,r2,r3
   4d5f0:	10000015 	stw	zero,0(r2)
  }
}
   4d5f4:	e037883a 	mov	sp,fp
   4d5f8:	df000017 	ldw	fp,0(sp)
   4d5fc:	dec00104 	addi	sp,sp,4
   4d600:	f800283a 	ret

0004d604 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4d604:	defff804 	addi	sp,sp,-32
   4d608:	df000715 	stw	fp,28(sp)
   4d60c:	df000704 	addi	fp,sp,28
   4d610:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d614:	0005303a 	rdctl	r2,status
   4d618:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d61c:	e0fffb17 	ldw	r3,-20(fp)
   4d620:	00bfff84 	movi	r2,-2
   4d624:	1884703a 	and	r2,r3,r2
   4d628:	1001703a 	wrctl	status,r2
  
  return context;
   4d62c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4d630:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4d634:	d0a01917 	ldw	r2,-32668(gp)
   4d638:	10c000c4 	addi	r3,r2,3
   4d63c:	00bfff04 	movi	r2,-4
   4d640:	1884703a 	and	r2,r3,r2
   4d644:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4d648:	d0e01917 	ldw	r3,-32668(gp)
   4d64c:	e0bffe17 	ldw	r2,-8(fp)
   4d650:	1887883a 	add	r3,r3,r2
   4d654:	008001f4 	movhi	r2,7
   4d658:	10880004 	addi	r2,r2,8192
   4d65c:	10c0072e 	bgeu	r2,r3,4d67c <sbrk+0x78>
   4d660:	e0bffd17 	ldw	r2,-12(fp)
   4d664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d668:	e0bffa17 	ldw	r2,-24(fp)
   4d66c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4d670:	00bfffc4 	movi	r2,-1
   4d674:	e0bfff15 	stw	r2,-4(fp)
   4d678:	00000c06 	br	4d6ac <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4d67c:	d0a01917 	ldw	r2,-32668(gp)
   4d680:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4d684:	d0e01917 	ldw	r3,-32668(gp)
   4d688:	e0bffe17 	ldw	r2,-8(fp)
   4d68c:	1885883a 	add	r2,r3,r2
   4d690:	d0a01915 	stw	r2,-32668(gp)
   4d694:	e0bffd17 	ldw	r2,-12(fp)
   4d698:	e0bff915 	stw	r2,-28(fp)
   4d69c:	e0bff917 	ldw	r2,-28(fp)
   4d6a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4d6a4:	e0bffc17 	ldw	r2,-16(fp)
   4d6a8:	e0bfff15 	stw	r2,-4(fp)
   4d6ac:	e0bfff17 	ldw	r2,-4(fp)
} 
   4d6b0:	e037883a 	mov	sp,fp
   4d6b4:	df000017 	ldw	fp,0(sp)
   4d6b8:	dec00104 	addi	sp,sp,4
   4d6bc:	f800283a 	ret

0004d6c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4d6c0:	defff704 	addi	sp,sp,-36
   4d6c4:	dfc00815 	stw	ra,32(sp)
   4d6c8:	df000715 	stw	fp,28(sp)
   4d6cc:	df000704 	addi	fp,sp,28
   4d6d0:	e13ffb15 	stw	r4,-20(fp)
   4d6d4:	e17ffc15 	stw	r5,-16(fp)
   4d6d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d6dc:	e0bffb17 	ldw	r2,-20(fp)
   4d6e0:	1004803a 	cmplt	r2,r2,zero
   4d6e4:	1000081e 	bne	r2,zero,4d708 <write+0x48>
   4d6e8:	e0bffb17 	ldw	r2,-20(fp)
   4d6ec:	10800324 	muli	r2,r2,12
   4d6f0:	1007883a 	mov	r3,r2
   4d6f4:	00800174 	movhi	r2,5
   4d6f8:	10828f04 	addi	r2,r2,2620
   4d6fc:	1887883a 	add	r3,r3,r2
   4d700:	e0ffff15 	stw	r3,-4(fp)
   4d704:	00000106 	br	4d70c <write+0x4c>
   4d708:	e03fff15 	stw	zero,-4(fp)
   4d70c:	e0bfff17 	ldw	r2,-4(fp)
   4d710:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4d714:	e0bffa17 	ldw	r2,-24(fp)
   4d718:	1005003a 	cmpeq	r2,r2,zero
   4d71c:	1000241e 	bne	r2,zero,4d7b0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4d720:	e0bffa17 	ldw	r2,-24(fp)
   4d724:	10800217 	ldw	r2,8(r2)
   4d728:	108000cc 	andi	r2,r2,3
   4d72c:	1005003a 	cmpeq	r2,r2,zero
   4d730:	10001a1e 	bne	r2,zero,4d79c <write+0xdc>
   4d734:	e0bffa17 	ldw	r2,-24(fp)
   4d738:	10800017 	ldw	r2,0(r2)
   4d73c:	10800617 	ldw	r2,24(r2)
   4d740:	1005003a 	cmpeq	r2,r2,zero
   4d744:	1000151e 	bne	r2,zero,4d79c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4d748:	e0bffa17 	ldw	r2,-24(fp)
   4d74c:	10800017 	ldw	r2,0(r2)
   4d750:	10800617 	ldw	r2,24(r2)
   4d754:	e17ffc17 	ldw	r5,-16(fp)
   4d758:	e1bffd17 	ldw	r6,-12(fp)
   4d75c:	e13ffa17 	ldw	r4,-24(fp)
   4d760:	103ee83a 	callr	r2
   4d764:	e0bff915 	stw	r2,-28(fp)
   4d768:	e0bff917 	ldw	r2,-28(fp)
   4d76c:	1004403a 	cmpge	r2,r2,zero
   4d770:	1000071e 	bne	r2,zero,4d790 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   4d774:	004d7e00 	call	4d7e0 <alt_get_errno>
   4d778:	e0fff917 	ldw	r3,-28(fp)
   4d77c:	00c7c83a 	sub	r3,zero,r3
   4d780:	10c00015 	stw	r3,0(r2)
        return -1;
   4d784:	00bfffc4 	movi	r2,-1
   4d788:	e0bffe15 	stw	r2,-8(fp)
   4d78c:	00000e06 	br	4d7c8 <write+0x108>
      }
      return rval;
   4d790:	e0bff917 	ldw	r2,-28(fp)
   4d794:	e0bffe15 	stw	r2,-8(fp)
   4d798:	00000b06 	br	4d7c8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4d79c:	004d7e00 	call	4d7e0 <alt_get_errno>
   4d7a0:	1007883a 	mov	r3,r2
   4d7a4:	00800344 	movi	r2,13
   4d7a8:	18800015 	stw	r2,0(r3)
   4d7ac:	00000406 	br	4d7c0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4d7b0:	004d7e00 	call	4d7e0 <alt_get_errno>
   4d7b4:	1007883a 	mov	r3,r2
   4d7b8:	00801444 	movi	r2,81
   4d7bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4d7c0:	00bfffc4 	movi	r2,-1
   4d7c4:	e0bffe15 	stw	r2,-8(fp)
   4d7c8:	e0bffe17 	ldw	r2,-8(fp)
}
   4d7cc:	e037883a 	mov	sp,fp
   4d7d0:	dfc00117 	ldw	ra,4(sp)
   4d7d4:	df000017 	ldw	fp,0(sp)
   4d7d8:	dec00204 	addi	sp,sp,8
   4d7dc:	f800283a 	ret

0004d7e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d7e0:	defffd04 	addi	sp,sp,-12
   4d7e4:	dfc00215 	stw	ra,8(sp)
   4d7e8:	df000115 	stw	fp,4(sp)
   4d7ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4d7f0:	00800174 	movhi	r2,5
   4d7f4:	10874f04 	addi	r2,r2,7484
   4d7f8:	10800017 	ldw	r2,0(r2)
   4d7fc:	1005003a 	cmpeq	r2,r2,zero
   4d800:	1000061e 	bne	r2,zero,4d81c <alt_get_errno+0x3c>
   4d804:	00800174 	movhi	r2,5
   4d808:	10874f04 	addi	r2,r2,7484
   4d80c:	10800017 	ldw	r2,0(r2)
   4d810:	103ee83a 	callr	r2
   4d814:	e0bfff15 	stw	r2,-4(fp)
   4d818:	00000306 	br	4d828 <alt_get_errno+0x48>
   4d81c:	00800174 	movhi	r2,5
   4d820:	108e6a04 	addi	r2,r2,14760
   4d824:	e0bfff15 	stw	r2,-4(fp)
   4d828:	e0bfff17 	ldw	r2,-4(fp)
}
   4d82c:	e037883a 	mov	sp,fp
   4d830:	dfc00117 	ldw	ra,4(sp)
   4d834:	df000017 	ldw	fp,0(sp)
   4d838:	dec00204 	addi	sp,sp,8
   4d83c:	f800283a 	ret

0004d840 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4d840:	defffd04 	addi	sp,sp,-12
   4d844:	dfc00215 	stw	ra,8(sp)
   4d848:	df000115 	stw	fp,4(sp)
   4d84c:	df000104 	addi	fp,sp,4
   4d850:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4d854:	004f9280 	call	4f928 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4d858:	00800044 	movi	r2,1
   4d85c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4d860:	e037883a 	mov	sp,fp
   4d864:	dfc00117 	ldw	ra,4(sp)
   4d868:	df000017 	ldw	fp,0(sp)
   4d86c:	dec00204 	addi	sp,sp,8
   4d870:	f800283a 	ret

0004d874 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4d874:	defffe04 	addi	sp,sp,-8
   4d878:	dfc00115 	stw	ra,4(sp)
   4d87c:	df000015 	stw	fp,0(sp)
   4d880:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4d884:	01000174 	movhi	r4,5
   4d888:	2102f904 	addi	r4,r4,3044
   4d88c:	000b883a 	mov	r5,zero
   4d890:	000d883a 	mov	r6,zero
   4d894:	004da580 	call	4da58 <altera_avalon_jtag_uart_init>
   4d898:	01000174 	movhi	r4,5
   4d89c:	2102ef04 	addi	r4,r4,3004
   4d8a0:	004d8d80 	call	4d8d8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
    ALTERA_AVALON_UART_INIT ( UART, uart);
   4d8a4:	01000174 	movhi	r4,5
   4d8a8:	21071104 	addi	r4,r4,7236
   4d8ac:	000b883a 	mov	r5,zero
   4d8b0:	01800044 	movi	r6,1
   4d8b4:	004e4b40 	call	4e4b4 <altera_avalon_uart_init>
   4d8b8:	01000174 	movhi	r4,5
   4d8bc:	21070704 	addi	r4,r4,7196
   4d8c0:	004d8d80 	call	4d8d8 <alt_dev_reg>
}
   4d8c4:	e037883a 	mov	sp,fp
   4d8c8:	dfc00117 	ldw	ra,4(sp)
   4d8cc:	df000017 	ldw	fp,0(sp)
   4d8d0:	dec00204 	addi	sp,sp,8
   4d8d4:	f800283a 	ret

0004d8d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4d8d8:	defffd04 	addi	sp,sp,-12
   4d8dc:	dfc00215 	stw	ra,8(sp)
   4d8e0:	df000115 	stw	fp,4(sp)
   4d8e4:	df000104 	addi	fp,sp,4
   4d8e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4d8ec:	e13fff17 	ldw	r4,-4(fp)
   4d8f0:	01400174 	movhi	r5,5
   4d8f4:	29474c04 	addi	r5,r5,7472
   4d8f8:	004ef040 	call	4ef04 <alt_dev_llist_insert>
}
   4d8fc:	e037883a 	mov	sp,fp
   4d900:	dfc00117 	ldw	ra,4(sp)
   4d904:	df000017 	ldw	fp,0(sp)
   4d908:	dec00204 	addi	sp,sp,8
   4d90c:	f800283a 	ret

0004d910 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4d910:	defffa04 	addi	sp,sp,-24
   4d914:	dfc00515 	stw	ra,20(sp)
   4d918:	df000415 	stw	fp,16(sp)
   4d91c:	df000404 	addi	fp,sp,16
   4d920:	e13ffd15 	stw	r4,-12(fp)
   4d924:	e17ffe15 	stw	r5,-8(fp)
   4d928:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4d92c:	e0bffd17 	ldw	r2,-12(fp)
   4d930:	10800017 	ldw	r2,0(r2)
   4d934:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4d938:	e0bffc17 	ldw	r2,-16(fp)
   4d93c:	11000a04 	addi	r4,r2,40
   4d940:	e0bffd17 	ldw	r2,-12(fp)
   4d944:	11c00217 	ldw	r7,8(r2)
   4d948:	e17ffe17 	ldw	r5,-8(fp)
   4d94c:	e1bfff17 	ldw	r6,-4(fp)
   4d950:	004df580 	call	4df58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4d954:	e037883a 	mov	sp,fp
   4d958:	dfc00117 	ldw	ra,4(sp)
   4d95c:	df000017 	ldw	fp,0(sp)
   4d960:	dec00204 	addi	sp,sp,8
   4d964:	f800283a 	ret

0004d968 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4d968:	defffa04 	addi	sp,sp,-24
   4d96c:	dfc00515 	stw	ra,20(sp)
   4d970:	df000415 	stw	fp,16(sp)
   4d974:	df000404 	addi	fp,sp,16
   4d978:	e13ffd15 	stw	r4,-12(fp)
   4d97c:	e17ffe15 	stw	r5,-8(fp)
   4d980:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4d984:	e0bffd17 	ldw	r2,-12(fp)
   4d988:	10800017 	ldw	r2,0(r2)
   4d98c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4d990:	e0bffc17 	ldw	r2,-16(fp)
   4d994:	11000a04 	addi	r4,r2,40
   4d998:	e0bffd17 	ldw	r2,-12(fp)
   4d99c:	11c00217 	ldw	r7,8(r2)
   4d9a0:	e17ffe17 	ldw	r5,-8(fp)
   4d9a4:	e1bfff17 	ldw	r6,-4(fp)
   4d9a8:	004e17c0 	call	4e17c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4d9ac:	e037883a 	mov	sp,fp
   4d9b0:	dfc00117 	ldw	ra,4(sp)
   4d9b4:	df000017 	ldw	fp,0(sp)
   4d9b8:	dec00204 	addi	sp,sp,8
   4d9bc:	f800283a 	ret

0004d9c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4d9c0:	defffc04 	addi	sp,sp,-16
   4d9c4:	dfc00315 	stw	ra,12(sp)
   4d9c8:	df000215 	stw	fp,8(sp)
   4d9cc:	df000204 	addi	fp,sp,8
   4d9d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4d9d4:	e0bfff17 	ldw	r2,-4(fp)
   4d9d8:	10800017 	ldw	r2,0(r2)
   4d9dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4d9e0:	e0bffe17 	ldw	r2,-8(fp)
   4d9e4:	11000a04 	addi	r4,r2,40
   4d9e8:	e0bfff17 	ldw	r2,-4(fp)
   4d9ec:	11400217 	ldw	r5,8(r2)
   4d9f0:	004ddf00 	call	4ddf0 <altera_avalon_jtag_uart_close>
}
   4d9f4:	e037883a 	mov	sp,fp
   4d9f8:	dfc00117 	ldw	ra,4(sp)
   4d9fc:	df000017 	ldw	fp,0(sp)
   4da00:	dec00204 	addi	sp,sp,8
   4da04:	f800283a 	ret

0004da08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4da08:	defffa04 	addi	sp,sp,-24
   4da0c:	dfc00515 	stw	ra,20(sp)
   4da10:	df000415 	stw	fp,16(sp)
   4da14:	df000404 	addi	fp,sp,16
   4da18:	e13ffd15 	stw	r4,-12(fp)
   4da1c:	e17ffe15 	stw	r5,-8(fp)
   4da20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4da24:	e0bffd17 	ldw	r2,-12(fp)
   4da28:	10800017 	ldw	r2,0(r2)
   4da2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4da30:	e0bffc17 	ldw	r2,-16(fp)
   4da34:	11000a04 	addi	r4,r2,40
   4da38:	e17ffe17 	ldw	r5,-8(fp)
   4da3c:	e1bfff17 	ldw	r6,-4(fp)
   4da40:	004de640 	call	4de64 <altera_avalon_jtag_uart_ioctl>
}
   4da44:	e037883a 	mov	sp,fp
   4da48:	dfc00117 	ldw	ra,4(sp)
   4da4c:	df000017 	ldw	fp,0(sp)
   4da50:	dec00204 	addi	sp,sp,8
   4da54:	f800283a 	ret

0004da58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4da58:	defffa04 	addi	sp,sp,-24
   4da5c:	dfc00515 	stw	ra,20(sp)
   4da60:	df000415 	stw	fp,16(sp)
   4da64:	df000404 	addi	fp,sp,16
   4da68:	e13ffd15 	stw	r4,-12(fp)
   4da6c:	e17ffe15 	stw	r5,-8(fp)
   4da70:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4da74:	e0fffd17 	ldw	r3,-12(fp)
   4da78:	00800044 	movi	r2,1
   4da7c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4da80:	e0bffd17 	ldw	r2,-12(fp)
   4da84:	10800017 	ldw	r2,0(r2)
   4da88:	11000104 	addi	r4,r2,4
   4da8c:	e0bffd17 	ldw	r2,-12(fp)
   4da90:	10800817 	ldw	r2,32(r2)
   4da94:	1007883a 	mov	r3,r2
   4da98:	2005883a 	mov	r2,r4
   4da9c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4daa0:	e13ffe17 	ldw	r4,-8(fp)
   4daa4:	e17fff17 	ldw	r5,-4(fp)
   4daa8:	d8000015 	stw	zero,0(sp)
   4daac:	01800174 	movhi	r6,5
   4dab0:	31b6c604 	addi	r6,r6,-9448
   4dab4:	e1fffd17 	ldw	r7,-12(fp)
   4dab8:	004f37c0 	call	4f37c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4dabc:	e0bffd17 	ldw	r2,-12(fp)
   4dac0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4dac4:	e0bffd17 	ldw	r2,-12(fp)
   4dac8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4dacc:	00800174 	movhi	r2,5
   4dad0:	108e6f04 	addi	r2,r2,14780
   4dad4:	10800017 	ldw	r2,0(r2)
   4dad8:	100b883a 	mov	r5,r2
   4dadc:	01800174 	movhi	r6,5
   4dae0:	31b75004 	addi	r6,r6,-8896
   4dae4:	e1fffd17 	ldw	r7,-12(fp)
   4dae8:	004ed6c0 	call	4ed6c <alt_alarm_start>
   4daec:	1004403a 	cmpge	r2,r2,zero
   4daf0:	1000041e 	bne	r2,zero,4db04 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4daf4:	e0fffd17 	ldw	r3,-12(fp)
   4daf8:	00a00034 	movhi	r2,32768
   4dafc:	10bfffc4 	addi	r2,r2,-1
   4db00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4db04:	e037883a 	mov	sp,fp
   4db08:	dfc00117 	ldw	ra,4(sp)
   4db0c:	df000017 	ldw	fp,0(sp)
   4db10:	dec00204 	addi	sp,sp,8
   4db14:	f800283a 	ret

0004db18 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4db18:	defff804 	addi	sp,sp,-32
   4db1c:	df000715 	stw	fp,28(sp)
   4db20:	df000704 	addi	fp,sp,28
   4db24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4db28:	e0bfff17 	ldw	r2,-4(fp)
   4db2c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   4db30:	e0bffe17 	ldw	r2,-8(fp)
   4db34:	10800017 	ldw	r2,0(r2)
   4db38:	e0bffd15 	stw	r2,-12(fp)
   4db3c:	00000006 	br	4db40 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4db40:	e0bffd17 	ldw	r2,-12(fp)
   4db44:	10800104 	addi	r2,r2,4
   4db48:	10800037 	ldwio	r2,0(r2)
   4db4c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4db50:	e0bffc17 	ldw	r2,-16(fp)
   4db54:	1080c00c 	andi	r2,r2,768
   4db58:	1005003a 	cmpeq	r2,r2,zero
   4db5c:	1000741e 	bne	r2,zero,4dd30 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4db60:	e0bffc17 	ldw	r2,-16(fp)
   4db64:	1080400c 	andi	r2,r2,256
   4db68:	1005003a 	cmpeq	r2,r2,zero
   4db6c:	1000351e 	bne	r2,zero,4dc44 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4db70:	00800074 	movhi	r2,1
   4db74:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4db78:	e0bffe17 	ldw	r2,-8(fp)
   4db7c:	10800a17 	ldw	r2,40(r2)
   4db80:	10800044 	addi	r2,r2,1
   4db84:	1081ffcc 	andi	r2,r2,2047
   4db88:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4db8c:	e0bffe17 	ldw	r2,-8(fp)
   4db90:	10c00b17 	ldw	r3,44(r2)
   4db94:	e0bffa17 	ldw	r2,-24(fp)
   4db98:	18801626 	beq	r3,r2,4dbf4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4db9c:	e0bffd17 	ldw	r2,-12(fp)
   4dba0:	10800037 	ldwio	r2,0(r2)
   4dba4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4dba8:	e0bffb17 	ldw	r2,-20(fp)
   4dbac:	10a0000c 	andi	r2,r2,32768
   4dbb0:	1005003a 	cmpeq	r2,r2,zero
   4dbb4:	10000f1e 	bne	r2,zero,4dbf4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4dbb8:	e0bffe17 	ldw	r2,-8(fp)
   4dbbc:	10c00a17 	ldw	r3,40(r2)
   4dbc0:	e0bffb17 	ldw	r2,-20(fp)
   4dbc4:	1009883a 	mov	r4,r2
   4dbc8:	e0bffe17 	ldw	r2,-8(fp)
   4dbcc:	1885883a 	add	r2,r3,r2
   4dbd0:	10800e04 	addi	r2,r2,56
   4dbd4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4dbd8:	e0bffe17 	ldw	r2,-8(fp)
   4dbdc:	10800a17 	ldw	r2,40(r2)
   4dbe0:	10800044 	addi	r2,r2,1
   4dbe4:	10c1ffcc 	andi	r3,r2,2047
   4dbe8:	e0bffe17 	ldw	r2,-8(fp)
   4dbec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4dbf0:	003fe106 	br	4db78 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4dbf4:	e0bffb17 	ldw	r2,-20(fp)
   4dbf8:	10bfffec 	andhi	r2,r2,65535
   4dbfc:	1005003a 	cmpeq	r2,r2,zero
   4dc00:	1000101e 	bne	r2,zero,4dc44 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4dc04:	e0bffe17 	ldw	r2,-8(fp)
   4dc08:	10c00817 	ldw	r3,32(r2)
   4dc0c:	00bfff84 	movi	r2,-2
   4dc10:	1886703a 	and	r3,r3,r2
   4dc14:	e0bffe17 	ldw	r2,-8(fp)
   4dc18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4dc1c:	e0bffd17 	ldw	r2,-12(fp)
   4dc20:	11000104 	addi	r4,r2,4
   4dc24:	e0bffe17 	ldw	r2,-8(fp)
   4dc28:	10800817 	ldw	r2,32(r2)
   4dc2c:	1007883a 	mov	r3,r2
   4dc30:	2005883a 	mov	r2,r4
   4dc34:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4dc38:	e0bffd17 	ldw	r2,-12(fp)
   4dc3c:	10800104 	addi	r2,r2,4
   4dc40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4dc44:	e0bffc17 	ldw	r2,-16(fp)
   4dc48:	1080800c 	andi	r2,r2,512
   4dc4c:	1005003a 	cmpeq	r2,r2,zero
   4dc50:	103fbb1e 	bne	r2,zero,4db40 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4dc54:	e0bffc17 	ldw	r2,-16(fp)
   4dc58:	10bfffec 	andhi	r2,r2,65535
   4dc5c:	1004d43a 	srli	r2,r2,16
   4dc60:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4dc64:	00001506 	br	4dcbc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4dc68:	e13ffd17 	ldw	r4,-12(fp)
   4dc6c:	e0bffe17 	ldw	r2,-8(fp)
   4dc70:	10c00d17 	ldw	r3,52(r2)
   4dc74:	e0bffe17 	ldw	r2,-8(fp)
   4dc78:	1885883a 	add	r2,r3,r2
   4dc7c:	10820e04 	addi	r2,r2,2104
   4dc80:	10800003 	ldbu	r2,0(r2)
   4dc84:	10c03fcc 	andi	r3,r2,255
   4dc88:	18c0201c 	xori	r3,r3,128
   4dc8c:	18ffe004 	addi	r3,r3,-128
   4dc90:	2005883a 	mov	r2,r4
   4dc94:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4dc98:	e0bffe17 	ldw	r2,-8(fp)
   4dc9c:	10800d17 	ldw	r2,52(r2)
   4dca0:	10800044 	addi	r2,r2,1
   4dca4:	10c1ffcc 	andi	r3,r2,2047
   4dca8:	e0bffe17 	ldw	r2,-8(fp)
   4dcac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4dcb0:	e0bff917 	ldw	r2,-28(fp)
   4dcb4:	10bfffc4 	addi	r2,r2,-1
   4dcb8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4dcbc:	e0bff917 	ldw	r2,-28(fp)
   4dcc0:	1005003a 	cmpeq	r2,r2,zero
   4dcc4:	1000051e 	bne	r2,zero,4dcdc <altera_avalon_jtag_uart_irq+0x1c4>
   4dcc8:	e0bffe17 	ldw	r2,-8(fp)
   4dccc:	10c00d17 	ldw	r3,52(r2)
   4dcd0:	e0bffe17 	ldw	r2,-8(fp)
   4dcd4:	10800c17 	ldw	r2,48(r2)
   4dcd8:	18bfe31e 	bne	r3,r2,4dc68 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4dcdc:	e0bff917 	ldw	r2,-28(fp)
   4dce0:	1005003a 	cmpeq	r2,r2,zero
   4dce4:	103f961e 	bne	r2,zero,4db40 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4dce8:	e0bffe17 	ldw	r2,-8(fp)
   4dcec:	10c00817 	ldw	r3,32(r2)
   4dcf0:	00bfff44 	movi	r2,-3
   4dcf4:	1886703a 	and	r3,r3,r2
   4dcf8:	e0bffe17 	ldw	r2,-8(fp)
   4dcfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4dd00:	e0bffe17 	ldw	r2,-8(fp)
   4dd04:	10800017 	ldw	r2,0(r2)
   4dd08:	11000104 	addi	r4,r2,4
   4dd0c:	e0bffe17 	ldw	r2,-8(fp)
   4dd10:	10800817 	ldw	r2,32(r2)
   4dd14:	1007883a 	mov	r3,r2
   4dd18:	2005883a 	mov	r2,r4
   4dd1c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4dd20:	e0bffd17 	ldw	r2,-12(fp)
   4dd24:	10800104 	addi	r2,r2,4
   4dd28:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4dd2c:	003f8406 	br	4db40 <altera_avalon_jtag_uart_irq+0x28>
}
   4dd30:	e037883a 	mov	sp,fp
   4dd34:	df000017 	ldw	fp,0(sp)
   4dd38:	dec00104 	addi	sp,sp,4
   4dd3c:	f800283a 	ret

0004dd40 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4dd40:	defffc04 	addi	sp,sp,-16
   4dd44:	df000315 	stw	fp,12(sp)
   4dd48:	df000304 	addi	fp,sp,12
   4dd4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4dd50:	e0bfff17 	ldw	r2,-4(fp)
   4dd54:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4dd58:	e0bffe17 	ldw	r2,-8(fp)
   4dd5c:	10800017 	ldw	r2,0(r2)
   4dd60:	10800104 	addi	r2,r2,4
   4dd64:	10800037 	ldwio	r2,0(r2)
   4dd68:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4dd6c:	e0bffd17 	ldw	r2,-12(fp)
   4dd70:	1081000c 	andi	r2,r2,1024
   4dd74:	1005003a 	cmpeq	r2,r2,zero
   4dd78:	10000c1e 	bne	r2,zero,4ddac <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4dd7c:	e0bffe17 	ldw	r2,-8(fp)
   4dd80:	10800017 	ldw	r2,0(r2)
   4dd84:	11000104 	addi	r4,r2,4
   4dd88:	e0bffe17 	ldw	r2,-8(fp)
   4dd8c:	10800817 	ldw	r2,32(r2)
   4dd90:	10810014 	ori	r2,r2,1024
   4dd94:	1007883a 	mov	r3,r2
   4dd98:	2005883a 	mov	r2,r4
   4dd9c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4dda0:	e0bffe17 	ldw	r2,-8(fp)
   4dda4:	10000915 	stw	zero,36(r2)
   4dda8:	00000a06 	br	4ddd4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4ddac:	e0bffe17 	ldw	r2,-8(fp)
   4ddb0:	10c00917 	ldw	r3,36(r2)
   4ddb4:	00a00034 	movhi	r2,32768
   4ddb8:	10bfff04 	addi	r2,r2,-4
   4ddbc:	10c00536 	bltu	r2,r3,4ddd4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4ddc0:	e0bffe17 	ldw	r2,-8(fp)
   4ddc4:	10800917 	ldw	r2,36(r2)
   4ddc8:	10c00044 	addi	r3,r2,1
   4ddcc:	e0bffe17 	ldw	r2,-8(fp)
   4ddd0:	10c00915 	stw	r3,36(r2)
   4ddd4:	00800174 	movhi	r2,5
   4ddd8:	108e6f04 	addi	r2,r2,14780
   4dddc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4dde0:	e037883a 	mov	sp,fp
   4dde4:	df000017 	ldw	fp,0(sp)
   4dde8:	dec00104 	addi	sp,sp,4
   4ddec:	f800283a 	ret

0004ddf0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4ddf0:	defffc04 	addi	sp,sp,-16
   4ddf4:	df000315 	stw	fp,12(sp)
   4ddf8:	df000304 	addi	fp,sp,12
   4ddfc:	e13ffd15 	stw	r4,-12(fp)
   4de00:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4de04:	00000706 	br	4de24 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4de08:	e0bffe17 	ldw	r2,-8(fp)
   4de0c:	1090000c 	andi	r2,r2,16384
   4de10:	1005003a 	cmpeq	r2,r2,zero
   4de14:	1000031e 	bne	r2,zero,4de24 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4de18:	00bffd44 	movi	r2,-11
   4de1c:	e0bfff15 	stw	r2,-4(fp)
   4de20:	00000b06 	br	4de50 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4de24:	e0bffd17 	ldw	r2,-12(fp)
   4de28:	10c00d17 	ldw	r3,52(r2)
   4de2c:	e0bffd17 	ldw	r2,-12(fp)
   4de30:	10800c17 	ldw	r2,48(r2)
   4de34:	18800526 	beq	r3,r2,4de4c <altera_avalon_jtag_uart_close+0x5c>
   4de38:	e0bffd17 	ldw	r2,-12(fp)
   4de3c:	10c00917 	ldw	r3,36(r2)
   4de40:	e0bffd17 	ldw	r2,-12(fp)
   4de44:	10800117 	ldw	r2,4(r2)
   4de48:	18bfef36 	bltu	r3,r2,4de08 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4de4c:	e03fff15 	stw	zero,-4(fp)
   4de50:	e0bfff17 	ldw	r2,-4(fp)
}
   4de54:	e037883a 	mov	sp,fp
   4de58:	df000017 	ldw	fp,0(sp)
   4de5c:	dec00104 	addi	sp,sp,4
   4de60:	f800283a 	ret

0004de64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4de64:	defff804 	addi	sp,sp,-32
   4de68:	df000715 	stw	fp,28(sp)
   4de6c:	df000704 	addi	fp,sp,28
   4de70:	e13ffb15 	stw	r4,-20(fp)
   4de74:	e17ffc15 	stw	r5,-16(fp)
   4de78:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4de7c:	00bff9c4 	movi	r2,-25
   4de80:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   4de84:	e0bffc17 	ldw	r2,-16(fp)
   4de88:	e0bfff15 	stw	r2,-4(fp)
   4de8c:	e0ffff17 	ldw	r3,-4(fp)
   4de90:	189a8060 	cmpeqi	r2,r3,27137
   4de94:	1000041e 	bne	r2,zero,4dea8 <altera_avalon_jtag_uart_ioctl+0x44>
   4de98:	e0ffff17 	ldw	r3,-4(fp)
   4de9c:	189a80a0 	cmpeqi	r2,r3,27138
   4dea0:	10001b1e 	bne	r2,zero,4df10 <altera_avalon_jtag_uart_ioctl+0xac>
   4dea4:	00002706 	br	4df44 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4dea8:	e0bffb17 	ldw	r2,-20(fp)
   4deac:	10c00117 	ldw	r3,4(r2)
   4deb0:	00a00034 	movhi	r2,32768
   4deb4:	10bfffc4 	addi	r2,r2,-1
   4deb8:	18802226 	beq	r3,r2,4df44 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4debc:	e0bffd17 	ldw	r2,-12(fp)
   4dec0:	10800017 	ldw	r2,0(r2)
   4dec4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4dec8:	e0bff917 	ldw	r2,-28(fp)
   4decc:	10800090 	cmplti	r2,r2,2
   4ded0:	1000071e 	bne	r2,zero,4def0 <altera_avalon_jtag_uart_ioctl+0x8c>
   4ded4:	e0fff917 	ldw	r3,-28(fp)
   4ded8:	00a00034 	movhi	r2,32768
   4dedc:	10bfffc4 	addi	r2,r2,-1
   4dee0:	18800326 	beq	r3,r2,4def0 <altera_avalon_jtag_uart_ioctl+0x8c>
   4dee4:	e0bff917 	ldw	r2,-28(fp)
   4dee8:	e0bffe15 	stw	r2,-8(fp)
   4deec:	00000306 	br	4defc <altera_avalon_jtag_uart_ioctl+0x98>
   4def0:	00e00034 	movhi	r3,32768
   4def4:	18ffff84 	addi	r3,r3,-2
   4def8:	e0fffe15 	stw	r3,-8(fp)
   4defc:	e0bffb17 	ldw	r2,-20(fp)
   4df00:	e0fffe17 	ldw	r3,-8(fp)
   4df04:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4df08:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4df0c:	00000d06 	br	4df44 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4df10:	e0bffb17 	ldw	r2,-20(fp)
   4df14:	10c00117 	ldw	r3,4(r2)
   4df18:	00a00034 	movhi	r2,32768
   4df1c:	10bfffc4 	addi	r2,r2,-1
   4df20:	18800826 	beq	r3,r2,4df44 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4df24:	e13ffd17 	ldw	r4,-12(fp)
   4df28:	e0bffb17 	ldw	r2,-20(fp)
   4df2c:	10c00917 	ldw	r3,36(r2)
   4df30:	e0bffb17 	ldw	r2,-20(fp)
   4df34:	10800117 	ldw	r2,4(r2)
   4df38:	1885803a 	cmpltu	r2,r3,r2
   4df3c:	20800015 	stw	r2,0(r4)
      rc = 0;
   4df40:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   4df44:	e0bffa17 	ldw	r2,-24(fp)
}
   4df48:	e037883a 	mov	sp,fp
   4df4c:	df000017 	ldw	fp,0(sp)
   4df50:	dec00104 	addi	sp,sp,4
   4df54:	f800283a 	ret

0004df58 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4df58:	defff204 	addi	sp,sp,-56
   4df5c:	dfc00d15 	stw	ra,52(sp)
   4df60:	df000c15 	stw	fp,48(sp)
   4df64:	df000c04 	addi	fp,sp,48
   4df68:	e13ffb15 	stw	r4,-20(fp)
   4df6c:	e17ffc15 	stw	r5,-16(fp)
   4df70:	e1bffd15 	stw	r6,-12(fp)
   4df74:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4df78:	e0bffc17 	ldw	r2,-16(fp)
   4df7c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4df80:	00004806 	br	4e0a4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4df84:	e0bffb17 	ldw	r2,-20(fp)
   4df88:	10800a17 	ldw	r2,40(r2)
   4df8c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4df90:	e0bffb17 	ldw	r2,-20(fp)
   4df94:	10800b17 	ldw	r2,44(r2)
   4df98:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4df9c:	e0fff717 	ldw	r3,-36(fp)
   4dfa0:	e0bff617 	ldw	r2,-40(fp)
   4dfa4:	18800536 	bltu	r3,r2,4dfbc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4dfa8:	e0bff717 	ldw	r2,-36(fp)
   4dfac:	e0fff617 	ldw	r3,-40(fp)
   4dfb0:	10c5c83a 	sub	r2,r2,r3
   4dfb4:	e0bff815 	stw	r2,-32(fp)
   4dfb8:	00000406 	br	4dfcc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4dfbc:	00820004 	movi	r2,2048
   4dfc0:	e0fff617 	ldw	r3,-40(fp)
   4dfc4:	10c5c83a 	sub	r2,r2,r3
   4dfc8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4dfcc:	e0bff817 	ldw	r2,-32(fp)
   4dfd0:	1005003a 	cmpeq	r2,r2,zero
   4dfd4:	10001f1e 	bne	r2,zero,4e054 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   4dfd8:	e0fffd17 	ldw	r3,-12(fp)
   4dfdc:	e0bff817 	ldw	r2,-32(fp)
   4dfe0:	1880022e 	bgeu	r3,r2,4dfec <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4dfe4:	e0bffd17 	ldw	r2,-12(fp)
   4dfe8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4dfec:	e0bffb17 	ldw	r2,-20(fp)
   4dff0:	10c00e04 	addi	r3,r2,56
   4dff4:	e0bff617 	ldw	r2,-40(fp)
   4dff8:	1887883a 	add	r3,r3,r2
   4dffc:	e0bffa17 	ldw	r2,-24(fp)
   4e000:	1009883a 	mov	r4,r2
   4e004:	180b883a 	mov	r5,r3
   4e008:	e1bff817 	ldw	r6,-32(fp)
   4e00c:	0048a280 	call	48a28 <memcpy>
      ptr   += n;
   4e010:	e0fff817 	ldw	r3,-32(fp)
   4e014:	e0bffa17 	ldw	r2,-24(fp)
   4e018:	10c5883a 	add	r2,r2,r3
   4e01c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4e020:	e0fffd17 	ldw	r3,-12(fp)
   4e024:	e0bff817 	ldw	r2,-32(fp)
   4e028:	1885c83a 	sub	r2,r3,r2
   4e02c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e030:	e0fff617 	ldw	r3,-40(fp)
   4e034:	e0bff817 	ldw	r2,-32(fp)
   4e038:	1885883a 	add	r2,r3,r2
   4e03c:	10c1ffcc 	andi	r3,r2,2047
   4e040:	e0bffb17 	ldw	r2,-20(fp)
   4e044:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4e048:	e0bffd17 	ldw	r2,-12(fp)
   4e04c:	10800048 	cmpgei	r2,r2,1
   4e050:	103fcc1e 	bne	r2,zero,4df84 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4e054:	e0fffa17 	ldw	r3,-24(fp)
   4e058:	e0bffc17 	ldw	r2,-16(fp)
   4e05c:	1880141e 	bne	r3,r2,4e0b0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4e060:	e0bffe17 	ldw	r2,-8(fp)
   4e064:	1090000c 	andi	r2,r2,16384
   4e068:	1004c03a 	cmpne	r2,r2,zero
   4e06c:	1000101e 	bne	r2,zero,4e0b0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4e070:	e0bffb17 	ldw	r2,-20(fp)
   4e074:	10c00a17 	ldw	r3,40(r2)
   4e078:	e0bff717 	ldw	r2,-36(fp)
   4e07c:	1880051e 	bne	r3,r2,4e094 <altera_avalon_jtag_uart_read+0x13c>
   4e080:	e0bffb17 	ldw	r2,-20(fp)
   4e084:	10c00917 	ldw	r3,36(r2)
   4e088:	e0bffb17 	ldw	r2,-20(fp)
   4e08c:	10800117 	ldw	r2,4(r2)
   4e090:	18bff736 	bltu	r3,r2,4e070 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4e094:	e0bffb17 	ldw	r2,-20(fp)
   4e098:	10c00a17 	ldw	r3,40(r2)
   4e09c:	e0bff717 	ldw	r2,-36(fp)
   4e0a0:	18800326 	beq	r3,r2,4e0b0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e0a4:	e0bffd17 	ldw	r2,-12(fp)
   4e0a8:	10800048 	cmpgei	r2,r2,1
   4e0ac:	103fb51e 	bne	r2,zero,4df84 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4e0b0:	e0fffa17 	ldw	r3,-24(fp)
   4e0b4:	e0bffc17 	ldw	r2,-16(fp)
   4e0b8:	18801926 	beq	r3,r2,4e120 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e0bc:	0005303a 	rdctl	r2,status
   4e0c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e0c4:	e0fff517 	ldw	r3,-44(fp)
   4e0c8:	00bfff84 	movi	r2,-2
   4e0cc:	1884703a 	and	r2,r3,r2
   4e0d0:	1001703a 	wrctl	status,r2
  
  return context;
   4e0d4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4e0d8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e0dc:	e0bffb17 	ldw	r2,-20(fp)
   4e0e0:	10800817 	ldw	r2,32(r2)
   4e0e4:	10c00054 	ori	r3,r2,1
   4e0e8:	e0bffb17 	ldw	r2,-20(fp)
   4e0ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e0f0:	e0bffb17 	ldw	r2,-20(fp)
   4e0f4:	10800017 	ldw	r2,0(r2)
   4e0f8:	11000104 	addi	r4,r2,4
   4e0fc:	e0bffb17 	ldw	r2,-20(fp)
   4e100:	10800817 	ldw	r2,32(r2)
   4e104:	1007883a 	mov	r3,r2
   4e108:	2005883a 	mov	r2,r4
   4e10c:	10c00035 	stwio	r3,0(r2)
   4e110:	e0bff917 	ldw	r2,-28(fp)
   4e114:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e118:	e0bff417 	ldw	r2,-48(fp)
   4e11c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4e120:	e0fffa17 	ldw	r3,-24(fp)
   4e124:	e0bffc17 	ldw	r2,-16(fp)
   4e128:	18800526 	beq	r3,r2,4e140 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   4e12c:	e0fffa17 	ldw	r3,-24(fp)
   4e130:	e0bffc17 	ldw	r2,-16(fp)
   4e134:	1887c83a 	sub	r3,r3,r2
   4e138:	e0ffff15 	stw	r3,-4(fp)
   4e13c:	00000906 	br	4e164 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4e140:	e0bffe17 	ldw	r2,-8(fp)
   4e144:	1090000c 	andi	r2,r2,16384
   4e148:	1005003a 	cmpeq	r2,r2,zero
   4e14c:	1000031e 	bne	r2,zero,4e15c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4e150:	00bffd44 	movi	r2,-11
   4e154:	e0bfff15 	stw	r2,-4(fp)
   4e158:	00000206 	br	4e164 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4e15c:	00bffec4 	movi	r2,-5
   4e160:	e0bfff15 	stw	r2,-4(fp)
   4e164:	e0bfff17 	ldw	r2,-4(fp)
}
   4e168:	e037883a 	mov	sp,fp
   4e16c:	dfc00117 	ldw	ra,4(sp)
   4e170:	df000017 	ldw	fp,0(sp)
   4e174:	dec00204 	addi	sp,sp,8
   4e178:	f800283a 	ret

0004e17c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4e17c:	defff204 	addi	sp,sp,-56
   4e180:	dfc00d15 	stw	ra,52(sp)
   4e184:	df000c15 	stw	fp,48(sp)
   4e188:	df000c04 	addi	fp,sp,48
   4e18c:	e13ffb15 	stw	r4,-20(fp)
   4e190:	e17ffc15 	stw	r5,-16(fp)
   4e194:	e1bffd15 	stw	r6,-12(fp)
   4e198:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4e19c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4e1a0:	e0bffc17 	ldw	r2,-16(fp)
   4e1a4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e1a8:	00003a06 	br	4e294 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4e1ac:	e0bffb17 	ldw	r2,-20(fp)
   4e1b0:	10800c17 	ldw	r2,48(r2)
   4e1b4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   4e1b8:	e0bffb17 	ldw	r2,-20(fp)
   4e1bc:	10800d17 	ldw	r2,52(r2)
   4e1c0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   4e1c4:	e0fffa17 	ldw	r3,-24(fp)
   4e1c8:	e0bff917 	ldw	r2,-28(fp)
   4e1cc:	1880062e 	bgeu	r3,r2,4e1e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4e1d0:	e0fff917 	ldw	r3,-28(fp)
   4e1d4:	e0bffa17 	ldw	r2,-24(fp)
   4e1d8:	1885c83a 	sub	r2,r3,r2
   4e1dc:	10bfffc4 	addi	r2,r2,-1
   4e1e0:	e0bff815 	stw	r2,-32(fp)
   4e1e4:	00000c06 	br	4e218 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4e1e8:	e0bff917 	ldw	r2,-28(fp)
   4e1ec:	1005003a 	cmpeq	r2,r2,zero
   4e1f0:	1000051e 	bne	r2,zero,4e208 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4e1f4:	00820004 	movi	r2,2048
   4e1f8:	e0fffa17 	ldw	r3,-24(fp)
   4e1fc:	10c5c83a 	sub	r2,r2,r3
   4e200:	e0bff815 	stw	r2,-32(fp)
   4e204:	00000406 	br	4e218 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4e208:	0081ffc4 	movi	r2,2047
   4e20c:	e0fffa17 	ldw	r3,-24(fp)
   4e210:	10c5c83a 	sub	r2,r2,r3
   4e214:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4e218:	e0bff817 	ldw	r2,-32(fp)
   4e21c:	1005003a 	cmpeq	r2,r2,zero
   4e220:	10001f1e 	bne	r2,zero,4e2a0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   4e224:	e0fffd17 	ldw	r3,-12(fp)
   4e228:	e0bff817 	ldw	r2,-32(fp)
   4e22c:	1880022e 	bgeu	r3,r2,4e238 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4e230:	e0bffd17 	ldw	r2,-12(fp)
   4e234:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4e238:	e0bffb17 	ldw	r2,-20(fp)
   4e23c:	10c20e04 	addi	r3,r2,2104
   4e240:	e0bffa17 	ldw	r2,-24(fp)
   4e244:	1885883a 	add	r2,r3,r2
   4e248:	e0fffc17 	ldw	r3,-16(fp)
   4e24c:	1009883a 	mov	r4,r2
   4e250:	180b883a 	mov	r5,r3
   4e254:	e1bff817 	ldw	r6,-32(fp)
   4e258:	0048a280 	call	48a28 <memcpy>
      ptr   += n;
   4e25c:	e0fff817 	ldw	r3,-32(fp)
   4e260:	e0bffc17 	ldw	r2,-16(fp)
   4e264:	10c5883a 	add	r2,r2,r3
   4e268:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4e26c:	e0fffd17 	ldw	r3,-12(fp)
   4e270:	e0bff817 	ldw	r2,-32(fp)
   4e274:	1885c83a 	sub	r2,r3,r2
   4e278:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e27c:	e0fffa17 	ldw	r3,-24(fp)
   4e280:	e0bff817 	ldw	r2,-32(fp)
   4e284:	1885883a 	add	r2,r3,r2
   4e288:	10c1ffcc 	andi	r3,r2,2047
   4e28c:	e0bffb17 	ldw	r2,-20(fp)
   4e290:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e294:	e0bffd17 	ldw	r2,-12(fp)
   4e298:	10800048 	cmpgei	r2,r2,1
   4e29c:	103fc31e 	bne	r2,zero,4e1ac <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e2a0:	0005303a 	rdctl	r2,status
   4e2a4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e2a8:	e0fff517 	ldw	r3,-44(fp)
   4e2ac:	00bfff84 	movi	r2,-2
   4e2b0:	1884703a 	and	r2,r3,r2
   4e2b4:	1001703a 	wrctl	status,r2
  
  return context;
   4e2b8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4e2bc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4e2c0:	e0bffb17 	ldw	r2,-20(fp)
   4e2c4:	10800817 	ldw	r2,32(r2)
   4e2c8:	10c00094 	ori	r3,r2,2
   4e2cc:	e0bffb17 	ldw	r2,-20(fp)
   4e2d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e2d4:	e0bffb17 	ldw	r2,-20(fp)
   4e2d8:	10800017 	ldw	r2,0(r2)
   4e2dc:	11000104 	addi	r4,r2,4
   4e2e0:	e0bffb17 	ldw	r2,-20(fp)
   4e2e4:	10800817 	ldw	r2,32(r2)
   4e2e8:	1007883a 	mov	r3,r2
   4e2ec:	2005883a 	mov	r2,r4
   4e2f0:	10c00035 	stwio	r3,0(r2)
   4e2f4:	e0bff717 	ldw	r2,-36(fp)
   4e2f8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e2fc:	e0bff417 	ldw	r2,-48(fp)
   4e300:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4e304:	e0bffd17 	ldw	r2,-12(fp)
   4e308:	10800050 	cmplti	r2,r2,1
   4e30c:	1000111e 	bne	r2,zero,4e354 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4e310:	e0bffe17 	ldw	r2,-8(fp)
   4e314:	1090000c 	andi	r2,r2,16384
   4e318:	1004c03a 	cmpne	r2,r2,zero
   4e31c:	1000101e 	bne	r2,zero,4e360 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4e320:	e0bffb17 	ldw	r2,-20(fp)
   4e324:	10c00d17 	ldw	r3,52(r2)
   4e328:	e0bff917 	ldw	r2,-28(fp)
   4e32c:	1880051e 	bne	r3,r2,4e344 <altera_avalon_jtag_uart_write+0x1c8>
   4e330:	e0bffb17 	ldw	r2,-20(fp)
   4e334:	10c00917 	ldw	r3,36(r2)
   4e338:	e0bffb17 	ldw	r2,-20(fp)
   4e33c:	10800117 	ldw	r2,4(r2)
   4e340:	18bff736 	bltu	r3,r2,4e320 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4e344:	e0bffb17 	ldw	r2,-20(fp)
   4e348:	10c00d17 	ldw	r3,52(r2)
   4e34c:	e0bff917 	ldw	r2,-28(fp)
   4e350:	18800326 	beq	r3,r2,4e360 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   4e354:	e0bffd17 	ldw	r2,-12(fp)
   4e358:	10800048 	cmpgei	r2,r2,1
   4e35c:	103fcd1e 	bne	r2,zero,4e294 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4e360:	e0fffc17 	ldw	r3,-16(fp)
   4e364:	e0bff617 	ldw	r2,-40(fp)
   4e368:	18800526 	beq	r3,r2,4e380 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4e36c:	e0fffc17 	ldw	r3,-16(fp)
   4e370:	e0bff617 	ldw	r2,-40(fp)
   4e374:	1887c83a 	sub	r3,r3,r2
   4e378:	e0ffff15 	stw	r3,-4(fp)
   4e37c:	00000906 	br	4e3a4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   4e380:	e0bffe17 	ldw	r2,-8(fp)
   4e384:	1090000c 	andi	r2,r2,16384
   4e388:	1005003a 	cmpeq	r2,r2,zero
   4e38c:	1000031e 	bne	r2,zero,4e39c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4e390:	00bffd44 	movi	r2,-11
   4e394:	e0bfff15 	stw	r2,-4(fp)
   4e398:	00000206 	br	4e3a4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   4e39c:	00bffec4 	movi	r2,-5
   4e3a0:	e0bfff15 	stw	r2,-4(fp)
   4e3a4:	e0bfff17 	ldw	r2,-4(fp)
}
   4e3a8:	e037883a 	mov	sp,fp
   4e3ac:	dfc00117 	ldw	ra,4(sp)
   4e3b0:	df000017 	ldw	fp,0(sp)
   4e3b4:	dec00204 	addi	sp,sp,8
   4e3b8:	f800283a 	ret

0004e3bc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4e3bc:	defffa04 	addi	sp,sp,-24
   4e3c0:	dfc00515 	stw	ra,20(sp)
   4e3c4:	df000415 	stw	fp,16(sp)
   4e3c8:	df000404 	addi	fp,sp,16
   4e3cc:	e13ffd15 	stw	r4,-12(fp)
   4e3d0:	e17ffe15 	stw	r5,-8(fp)
   4e3d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4e3d8:	e0bffd17 	ldw	r2,-12(fp)
   4e3dc:	10800017 	ldw	r2,0(r2)
   4e3e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   4e3e4:	e0bffc17 	ldw	r2,-16(fp)
   4e3e8:	11000a04 	addi	r4,r2,40
   4e3ec:	e0bffd17 	ldw	r2,-12(fp)
   4e3f0:	11c00217 	ldw	r7,8(r2)
   4e3f4:	e17ffe17 	ldw	r5,-8(fp)
   4e3f8:	e1bfff17 	ldw	r6,-4(fp)
   4e3fc:	004e8b40 	call	4e8b4 <altera_avalon_uart_read>
      fd->fd_flags);
}
   4e400:	e037883a 	mov	sp,fp
   4e404:	dfc00117 	ldw	ra,4(sp)
   4e408:	df000017 	ldw	fp,0(sp)
   4e40c:	dec00204 	addi	sp,sp,8
   4e410:	f800283a 	ret

0004e414 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4e414:	defffa04 	addi	sp,sp,-24
   4e418:	dfc00515 	stw	ra,20(sp)
   4e41c:	df000415 	stw	fp,16(sp)
   4e420:	df000404 	addi	fp,sp,16
   4e424:	e13ffd15 	stw	r4,-12(fp)
   4e428:	e17ffe15 	stw	r5,-8(fp)
   4e42c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4e430:	e0bffd17 	ldw	r2,-12(fp)
   4e434:	10800017 	ldw	r2,0(r2)
   4e438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   4e43c:	e0bffc17 	ldw	r2,-16(fp)
   4e440:	11000a04 	addi	r4,r2,40
   4e444:	e0bffd17 	ldw	r2,-12(fp)
   4e448:	11c00217 	ldw	r7,8(r2)
   4e44c:	e17ffe17 	ldw	r5,-8(fp)
   4e450:	e1bfff17 	ldw	r6,-4(fp)
   4e454:	004eb440 	call	4eb44 <altera_avalon_uart_write>
      fd->fd_flags);
}
   4e458:	e037883a 	mov	sp,fp
   4e45c:	dfc00117 	ldw	ra,4(sp)
   4e460:	df000017 	ldw	fp,0(sp)
   4e464:	dec00204 	addi	sp,sp,8
   4e468:	f800283a 	ret

0004e46c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   4e46c:	defffc04 	addi	sp,sp,-16
   4e470:	dfc00315 	stw	ra,12(sp)
   4e474:	df000215 	stw	fp,8(sp)
   4e478:	df000204 	addi	fp,sp,8
   4e47c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4e480:	e0bfff17 	ldw	r2,-4(fp)
   4e484:	10800017 	ldw	r2,0(r2)
   4e488:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   4e48c:	e0bffe17 	ldw	r2,-8(fp)
   4e490:	11000a04 	addi	r4,r2,40
   4e494:	e0bfff17 	ldw	r2,-4(fp)
   4e498:	11400217 	ldw	r5,8(r2)
   4e49c:	004e8540 	call	4e854 <altera_avalon_uart_close>
}
   4e4a0:	e037883a 	mov	sp,fp
   4e4a4:	dfc00117 	ldw	ra,4(sp)
   4e4a8:	df000017 	ldw	fp,0(sp)
   4e4ac:	dec00204 	addi	sp,sp,8
   4e4b0:	f800283a 	ret

0004e4b4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   4e4b4:	defff704 	addi	sp,sp,-36
   4e4b8:	dfc00815 	stw	ra,32(sp)
   4e4bc:	df000715 	stw	fp,28(sp)
   4e4c0:	df000704 	addi	fp,sp,28
   4e4c4:	e13ffc15 	stw	r4,-16(fp)
   4e4c8:	e17ffd15 	stw	r5,-12(fp)
   4e4cc:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
   4e4d0:	e0bffc17 	ldw	r2,-16(fp)
   4e4d4:	10800017 	ldw	r2,0(r2)
   4e4d8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   4e4dc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4e4e0:	1004c03a 	cmpne	r2,r2,zero
   4e4e4:	1000061e 	bne	r2,zero,4e500 <altera_avalon_uart_init+0x4c>
   4e4e8:	0005883a 	mov	r2,zero
   4e4ec:	1004c03a 	cmpne	r2,r2,zero
   4e4f0:	1000031e 	bne	r2,zero,4e500 <altera_avalon_uart_init+0x4c>
   4e4f4:	0005883a 	mov	r2,zero
   4e4f8:	1005003a 	cmpeq	r2,r2,zero
   4e4fc:	1000031e 	bne	r2,zero,4e50c <altera_avalon_uart_init+0x58>
   4e500:	00800044 	movi	r2,1
   4e504:	e0bfff15 	stw	r2,-4(fp)
   4e508:	00000106 	br	4e510 <altera_avalon_uart_init+0x5c>
   4e50c:	e03fff15 	stw	zero,-4(fp)
   4e510:	e0bfff17 	ldw	r2,-4(fp)
   4e514:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   4e518:	e0bffa17 	ldw	r2,-24(fp)
   4e51c:	1004c03a 	cmpne	r2,r2,zero
   4e520:	1000111e 	bne	r2,zero,4e568 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   4e524:	e0fffc17 	ldw	r3,-16(fp)
   4e528:	00832004 	movi	r2,3200
   4e52c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   4e530:	e0bffb17 	ldw	r2,-20(fp)
   4e534:	11000304 	addi	r4,r2,12
   4e538:	e0bffc17 	ldw	r2,-16(fp)
   4e53c:	10800117 	ldw	r2,4(r2)
   4e540:	1007883a 	mov	r3,r2
   4e544:	2005883a 	mov	r2,r4
   4e548:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   4e54c:	d8000015 	stw	zero,0(sp)
   4e550:	e13ffd17 	ldw	r4,-12(fp)
   4e554:	e17ffe17 	ldw	r5,-8(fp)
   4e558:	01800174 	movhi	r6,5
   4e55c:	31b95f04 	addi	r6,r6,-6788
   4e560:	e1fffc17 	ldw	r7,-16(fp)
   4e564:	004f37c0 	call	4f37c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   4e568:	e037883a 	mov	sp,fp
   4e56c:	dfc00117 	ldw	ra,4(sp)
   4e570:	df000017 	ldw	fp,0(sp)
   4e574:	dec00204 	addi	sp,sp,8
   4e578:	f800283a 	ret

0004e57c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   4e57c:	defffa04 	addi	sp,sp,-24
   4e580:	dfc00515 	stw	ra,20(sp)
   4e584:	df000415 	stw	fp,16(sp)
   4e588:	df000404 	addi	fp,sp,16
   4e58c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   4e590:	e0bfff17 	ldw	r2,-4(fp)
   4e594:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
   4e598:	e0bffd17 	ldw	r2,-12(fp)
   4e59c:	10800017 	ldw	r2,0(r2)
   4e5a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   4e5a4:	e0bffc17 	ldw	r2,-16(fp)
   4e5a8:	10800204 	addi	r2,r2,8
   4e5ac:	10800037 	ldwio	r2,0(r2)
   4e5b0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   4e5b4:	e0bffc17 	ldw	r2,-16(fp)
   4e5b8:	10800204 	addi	r2,r2,8
   4e5bc:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   4e5c0:	e0bffc17 	ldw	r2,-16(fp)
   4e5c4:	10800204 	addi	r2,r2,8
   4e5c8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   4e5cc:	e0bffe17 	ldw	r2,-8(fp)
   4e5d0:	1080200c 	andi	r2,r2,128
   4e5d4:	1005003a 	cmpeq	r2,r2,zero
   4e5d8:	1000031e 	bne	r2,zero,4e5e8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   4e5dc:	e13ffd17 	ldw	r4,-12(fp)
   4e5e0:	e17ffe17 	ldw	r5,-8(fp)
   4e5e4:	004e6180 	call	4e618 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   4e5e8:	e0bffe17 	ldw	r2,-8(fp)
   4e5ec:	1081100c 	andi	r2,r2,1088
   4e5f0:	1005003a 	cmpeq	r2,r2,zero
   4e5f4:	1000031e 	bne	r2,zero,4e604 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   4e5f8:	e13ffd17 	ldw	r4,-12(fp)
   4e5fc:	e17ffe17 	ldw	r5,-8(fp)
   4e600:	004e6f80 	call	4e6f8 <altera_avalon_uart_txirq>
  }
  

}
   4e604:	e037883a 	mov	sp,fp
   4e608:	dfc00117 	ldw	ra,4(sp)
   4e60c:	df000017 	ldw	fp,0(sp)
   4e610:	dec00204 	addi	sp,sp,8
   4e614:	f800283a 	ret

0004e618 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4e618:	defffc04 	addi	sp,sp,-16
   4e61c:	df000315 	stw	fp,12(sp)
   4e620:	df000304 	addi	fp,sp,12
   4e624:	e13ffe15 	stw	r4,-8(fp)
   4e628:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   4e62c:	e0bfff17 	ldw	r2,-4(fp)
   4e630:	108000cc 	andi	r2,r2,3
   4e634:	1004c03a 	cmpne	r2,r2,zero
   4e638:	10002b1e 	bne	r2,zero,4e6e8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   4e63c:	e0bffe17 	ldw	r2,-8(fp)
   4e640:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4e644:	e0bffe17 	ldw	r2,-8(fp)
   4e648:	10800317 	ldw	r2,12(r2)
   4e64c:	10800044 	addi	r2,r2,1
   4e650:	10800fcc 	andi	r2,r2,63
   4e654:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   4e658:	e0bffe17 	ldw	r2,-8(fp)
   4e65c:	11000317 	ldw	r4,12(r2)
   4e660:	e0bffe17 	ldw	r2,-8(fp)
   4e664:	10800017 	ldw	r2,0(r2)
   4e668:	10800037 	ldwio	r2,0(r2)
   4e66c:	1007883a 	mov	r3,r2
   4e670:	e0bffe17 	ldw	r2,-8(fp)
   4e674:	2085883a 	add	r2,r4,r2
   4e678:	10800704 	addi	r2,r2,28
   4e67c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   4e680:	e0fffe17 	ldw	r3,-8(fp)
   4e684:	e0bffd17 	ldw	r2,-12(fp)
   4e688:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4e68c:	e0bffe17 	ldw	r2,-8(fp)
   4e690:	10800317 	ldw	r2,12(r2)
   4e694:	10800044 	addi	r2,r2,1
   4e698:	10800fcc 	andi	r2,r2,63
   4e69c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   4e6a0:	e0bffe17 	ldw	r2,-8(fp)
   4e6a4:	10c00217 	ldw	r3,8(r2)
   4e6a8:	e0bffd17 	ldw	r2,-12(fp)
   4e6ac:	18800e1e 	bne	r3,r2,4e6e8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4e6b0:	e0bffe17 	ldw	r2,-8(fp)
   4e6b4:	10c00117 	ldw	r3,4(r2)
   4e6b8:	00bfdfc4 	movi	r2,-129
   4e6bc:	1886703a 	and	r3,r3,r2
   4e6c0:	e0bffe17 	ldw	r2,-8(fp)
   4e6c4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   4e6c8:	e0bffe17 	ldw	r2,-8(fp)
   4e6cc:	10800017 	ldw	r2,0(r2)
   4e6d0:	11000304 	addi	r4,r2,12
   4e6d4:	e0bffe17 	ldw	r2,-8(fp)
   4e6d8:	10800117 	ldw	r2,4(r2)
   4e6dc:	1007883a 	mov	r3,r2
   4e6e0:	2005883a 	mov	r2,r4
   4e6e4:	10c00035 	stwio	r3,0(r2)
  }   
}
   4e6e8:	e037883a 	mov	sp,fp
   4e6ec:	df000017 	ldw	fp,0(sp)
   4e6f0:	dec00104 	addi	sp,sp,4
   4e6f4:	f800283a 	ret

0004e6f8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4e6f8:	defffd04 	addi	sp,sp,-12
   4e6fc:	df000215 	stw	fp,8(sp)
   4e700:	df000204 	addi	fp,sp,8
   4e704:	e13ffe15 	stw	r4,-8(fp)
   4e708:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   4e70c:	e0bffe17 	ldw	r2,-8(fp)
   4e710:	10c00417 	ldw	r3,16(r2)
   4e714:	e0bffe17 	ldw	r2,-8(fp)
   4e718:	10800517 	ldw	r2,20(r2)
   4e71c:	18803626 	beq	r3,r2,4e7f8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4e720:	e0bffe17 	ldw	r2,-8(fp)
   4e724:	10800617 	ldw	r2,24(r2)
   4e728:	1080008c 	andi	r2,r2,2
   4e72c:	1005003a 	cmpeq	r2,r2,zero
   4e730:	1000041e 	bne	r2,zero,4e744 <altera_avalon_uart_txirq+0x4c>
   4e734:	e0bfff17 	ldw	r2,-4(fp)
   4e738:	1082000c 	andi	r2,r2,2048
   4e73c:	1005003a 	cmpeq	r2,r2,zero
   4e740:	10001e1e 	bne	r2,zero,4e7bc <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   4e744:	e0bffe17 	ldw	r2,-8(fp)
   4e748:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   4e74c:	e0bffe17 	ldw	r2,-8(fp)
   4e750:	10800017 	ldw	r2,0(r2)
   4e754:	11000104 	addi	r4,r2,4
   4e758:	e0bffe17 	ldw	r2,-8(fp)
   4e75c:	10c00417 	ldw	r3,16(r2)
   4e760:	e0bffe17 	ldw	r2,-8(fp)
   4e764:	1885883a 	add	r2,r3,r2
   4e768:	10801704 	addi	r2,r2,92
   4e76c:	10800003 	ldbu	r2,0(r2)
   4e770:	10c03fcc 	andi	r3,r2,255
   4e774:	2005883a 	mov	r2,r4
   4e778:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   4e77c:	e0bffe17 	ldw	r2,-8(fp)
   4e780:	10800417 	ldw	r2,16(r2)
   4e784:	10c00044 	addi	r3,r2,1
   4e788:	e0bffe17 	ldw	r2,-8(fp)
   4e78c:	10c00415 	stw	r3,16(r2)
   4e790:	e0bffe17 	ldw	r2,-8(fp)
   4e794:	10800417 	ldw	r2,16(r2)
   4e798:	10c00fcc 	andi	r3,r2,63
   4e79c:	e0bffe17 	ldw	r2,-8(fp)
   4e7a0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4e7a4:	e0bffe17 	ldw	r2,-8(fp)
   4e7a8:	10800117 	ldw	r2,4(r2)
   4e7ac:	10c01014 	ori	r3,r2,64
   4e7b0:	e0bffe17 	ldw	r2,-8(fp)
   4e7b4:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4e7b8:	00000f06 	br	4e7f8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   4e7bc:	e0bffe17 	ldw	r2,-8(fp)
   4e7c0:	10800017 	ldw	r2,0(r2)
   4e7c4:	10800204 	addi	r2,r2,8
   4e7c8:	10800037 	ldwio	r2,0(r2)
   4e7cc:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4e7d0:	e0bfff17 	ldw	r2,-4(fp)
   4e7d4:	1082000c 	andi	r2,r2,2048
   4e7d8:	1004c03a 	cmpne	r2,r2,zero
   4e7dc:	1000061e 	bne	r2,zero,4e7f8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4e7e0:	e0bffe17 	ldw	r2,-8(fp)
   4e7e4:	10c00117 	ldw	r3,4(r2)
   4e7e8:	00bfefc4 	movi	r2,-65
   4e7ec:	1886703a 	and	r3,r3,r2
   4e7f0:	e0bffe17 	ldw	r2,-8(fp)
   4e7f4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   4e7f8:	e0bffe17 	ldw	r2,-8(fp)
   4e7fc:	10c00417 	ldw	r3,16(r2)
   4e800:	e0bffe17 	ldw	r2,-8(fp)
   4e804:	10800517 	ldw	r2,20(r2)
   4e808:	1880061e 	bne	r3,r2,4e824 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4e80c:	e0bffe17 	ldw	r2,-8(fp)
   4e810:	10c00117 	ldw	r3,4(r2)
   4e814:	00beefc4 	movi	r2,-1089
   4e818:	1886703a 	and	r3,r3,r2
   4e81c:	e0bffe17 	ldw	r2,-8(fp)
   4e820:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4e824:	e0bffe17 	ldw	r2,-8(fp)
   4e828:	10800017 	ldw	r2,0(r2)
   4e82c:	11000304 	addi	r4,r2,12
   4e830:	e0bffe17 	ldw	r2,-8(fp)
   4e834:	10800117 	ldw	r2,4(r2)
   4e838:	1007883a 	mov	r3,r2
   4e83c:	2005883a 	mov	r2,r4
   4e840:	10c00035 	stwio	r3,0(r2)
}
   4e844:	e037883a 	mov	sp,fp
   4e848:	df000017 	ldw	fp,0(sp)
   4e84c:	dec00104 	addi	sp,sp,4
   4e850:	f800283a 	ret

0004e854 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   4e854:	defffc04 	addi	sp,sp,-16
   4e858:	df000315 	stw	fp,12(sp)
   4e85c:	df000304 	addi	fp,sp,12
   4e860:	e13ffd15 	stw	r4,-12(fp)
   4e864:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4e868:	00000706 	br	4e888 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4e86c:	e0bffe17 	ldw	r2,-8(fp)
   4e870:	1090000c 	andi	r2,r2,16384
   4e874:	1005003a 	cmpeq	r2,r2,zero
   4e878:	1000031e 	bne	r2,zero,4e888 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
   4e87c:	00bffd44 	movi	r2,-11
   4e880:	e0bfff15 	stw	r2,-4(fp)
   4e884:	00000606 	br	4e8a0 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4e888:	e0bffd17 	ldw	r2,-12(fp)
   4e88c:	10c00417 	ldw	r3,16(r2)
   4e890:	e0bffd17 	ldw	r2,-12(fp)
   4e894:	10800517 	ldw	r2,20(r2)
   4e898:	18bff41e 	bne	r3,r2,4e86c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4e89c:	e03fff15 	stw	zero,-4(fp)
   4e8a0:	e0bfff17 	ldw	r2,-4(fp)
}
   4e8a4:	e037883a 	mov	sp,fp
   4e8a8:	df000017 	ldw	fp,0(sp)
   4e8ac:	dec00104 	addi	sp,sp,4
   4e8b0:	f800283a 	ret

0004e8b4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   4e8b4:	defff004 	addi	sp,sp,-64
   4e8b8:	dfc00f15 	stw	ra,60(sp)
   4e8bc:	df000e15 	stw	fp,56(sp)
   4e8c0:	df000e04 	addi	fp,sp,56
   4e8c4:	e13ffb15 	stw	r4,-20(fp)
   4e8c8:	e17ffc15 	stw	r5,-16(fp)
   4e8cc:	e1bffd15 	stw	r6,-12(fp)
   4e8d0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   4e8d4:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
   4e8d8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   4e8dc:	e0bffe17 	ldw	r2,-8(fp)
   4e8e0:	1090000c 	andi	r2,r2,16384
   4e8e4:	1005003a 	cmpeq	r2,r2,zero
   4e8e8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   4e8ec:	e0bffb17 	ldw	r2,-20(fp)
   4e8f0:	10800217 	ldw	r2,8(r2)
   4e8f4:	10800044 	addi	r2,r2,1
   4e8f8:	10800fcc 	andi	r2,r2,63
   4e8fc:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4e900:	00001906 	br	4e968 <altera_avalon_uart_read+0xb4>
    {
      count++;
   4e904:	e0bff617 	ldw	r2,-40(fp)
   4e908:	10800044 	addi	r2,r2,1
   4e90c:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   4e910:	e0bffb17 	ldw	r2,-20(fp)
   4e914:	10c00217 	ldw	r3,8(r2)
   4e918:	e0bffb17 	ldw	r2,-20(fp)
   4e91c:	1885883a 	add	r2,r3,r2
   4e920:	10800704 	addi	r2,r2,28
   4e924:	10800003 	ldbu	r2,0(r2)
   4e928:	1007883a 	mov	r3,r2
   4e92c:	e0bffc17 	ldw	r2,-16(fp)
   4e930:	10c00005 	stb	r3,0(r2)
   4e934:	e0bffc17 	ldw	r2,-16(fp)
   4e938:	10800044 	addi	r2,r2,1
   4e93c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   4e940:	e0bffb17 	ldw	r2,-20(fp)
   4e944:	10800217 	ldw	r2,8(r2)
   4e948:	10c00044 	addi	r3,r2,1
   4e94c:	e0bffb17 	ldw	r2,-20(fp)
   4e950:	10c00215 	stw	r3,8(r2)
   4e954:	e0bffb17 	ldw	r2,-20(fp)
   4e958:	10800217 	ldw	r2,8(r2)
   4e95c:	10c00fcc 	andi	r3,r2,63
   4e960:	e0bffb17 	ldw	r2,-20(fp)
   4e964:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4e968:	e0fff617 	ldw	r3,-40(fp)
   4e96c:	e0bffd17 	ldw	r2,-12(fp)
   4e970:	1880050e 	bge	r3,r2,4e988 <altera_avalon_uart_read+0xd4>
   4e974:	e0bffb17 	ldw	r2,-20(fp)
   4e978:	10c00217 	ldw	r3,8(r2)
   4e97c:	e0bffb17 	ldw	r2,-20(fp)
   4e980:	10800317 	ldw	r2,12(r2)
   4e984:	18bfdf1e 	bne	r3,r2,4e904 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   4e988:	e0bff617 	ldw	r2,-40(fp)
   4e98c:	1004c03a 	cmpne	r2,r2,zero
   4e990:	1000271e 	bne	r2,zero,4ea30 <altera_avalon_uart_read+0x17c>
   4e994:	e0bffb17 	ldw	r2,-20(fp)
   4e998:	10c00217 	ldw	r3,8(r2)
   4e99c:	e0bffb17 	ldw	r2,-20(fp)
   4e9a0:	10800317 	ldw	r2,12(r2)
   4e9a4:	1880221e 	bne	r3,r2,4ea30 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
   4e9a8:	e0bff917 	ldw	r2,-28(fp)
   4e9ac:	1004c03a 	cmpne	r2,r2,zero
   4e9b0:	1000061e 	bne	r2,zero,4e9cc <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   4e9b4:	004eae40 	call	4eae4 <alt_get_errno>
   4e9b8:	00c002c4 	movi	r3,11
   4e9bc:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   4e9c0:	00800044 	movi	r2,1
   4e9c4:	e0bff705 	stb	r2,-36(fp)
        break;
   4e9c8:	00001f06 	br	4ea48 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e9cc:	0005303a 	rdctl	r2,status
   4e9d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e9d4:	e0fff517 	ldw	r3,-44(fp)
   4e9d8:	00bfff84 	movi	r2,-2
   4e9dc:	1884703a 	and	r2,r3,r2
   4e9e0:	1001703a 	wrctl	status,r2
  
  return context;
   4e9e4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   4e9e8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4e9ec:	e0bffb17 	ldw	r2,-20(fp)
   4e9f0:	10800117 	ldw	r2,4(r2)
   4e9f4:	10c02014 	ori	r3,r2,128
   4e9f8:	e0bffb17 	ldw	r2,-20(fp)
   4e9fc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4ea00:	e0bffb17 	ldw	r2,-20(fp)
   4ea04:	10800017 	ldw	r2,0(r2)
   4ea08:	11000304 	addi	r4,r2,12
   4ea0c:	e0bffb17 	ldw	r2,-20(fp)
   4ea10:	10800117 	ldw	r2,4(r2)
   4ea14:	1007883a 	mov	r3,r2
   4ea18:	2005883a 	mov	r2,r4
   4ea1c:	10c00035 	stwio	r3,0(r2)
   4ea20:	e0bffa17 	ldw	r2,-24(fp)
   4ea24:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ea28:	e0bff417 	ldw	r2,-48(fp)
   4ea2c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   4ea30:	e0bff617 	ldw	r2,-40(fp)
   4ea34:	1004c03a 	cmpne	r2,r2,zero
   4ea38:	1000031e 	bne	r2,zero,4ea48 <altera_avalon_uart_read+0x194>
   4ea3c:	e0bffd17 	ldw	r2,-12(fp)
   4ea40:	1004c03a 	cmpne	r2,r2,zero
   4ea44:	103fc81e 	bne	r2,zero,4e968 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ea48:	0005303a 	rdctl	r2,status
   4ea4c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ea50:	e0fff317 	ldw	r3,-52(fp)
   4ea54:	00bfff84 	movi	r2,-2
   4ea58:	1884703a 	and	r2,r3,r2
   4ea5c:	1001703a 	wrctl	status,r2
  
  return context;
   4ea60:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   4ea64:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4ea68:	e0bffb17 	ldw	r2,-20(fp)
   4ea6c:	10800117 	ldw	r2,4(r2)
   4ea70:	10c02014 	ori	r3,r2,128
   4ea74:	e0bffb17 	ldw	r2,-20(fp)
   4ea78:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4ea7c:	e0bffb17 	ldw	r2,-20(fp)
   4ea80:	10800017 	ldw	r2,0(r2)
   4ea84:	11000304 	addi	r4,r2,12
   4ea88:	e0bffb17 	ldw	r2,-20(fp)
   4ea8c:	10800117 	ldw	r2,4(r2)
   4ea90:	1007883a 	mov	r3,r2
   4ea94:	2005883a 	mov	r2,r4
   4ea98:	10c00035 	stwio	r3,0(r2)
   4ea9c:	e0bffa17 	ldw	r2,-24(fp)
   4eaa0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4eaa4:	e0bff217 	ldw	r2,-56(fp)
   4eaa8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   4eaac:	e0bff703 	ldbu	r2,-36(fp)
   4eab0:	1005003a 	cmpeq	r2,r2,zero
   4eab4:	1000031e 	bne	r2,zero,4eac4 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
   4eab8:	00bffd04 	movi	r2,-12
   4eabc:	e0bfff15 	stw	r2,-4(fp)
   4eac0:	00000206 	br	4eacc <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
   4eac4:	e0bff617 	ldw	r2,-40(fp)
   4eac8:	e0bfff15 	stw	r2,-4(fp)
   4eacc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4ead0:	e037883a 	mov	sp,fp
   4ead4:	dfc00117 	ldw	ra,4(sp)
   4ead8:	df000017 	ldw	fp,0(sp)
   4eadc:	dec00204 	addi	sp,sp,8
   4eae0:	f800283a 	ret

0004eae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eae4:	defffd04 	addi	sp,sp,-12
   4eae8:	dfc00215 	stw	ra,8(sp)
   4eaec:	df000115 	stw	fp,4(sp)
   4eaf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4eaf4:	00800174 	movhi	r2,5
   4eaf8:	10874f04 	addi	r2,r2,7484
   4eafc:	10800017 	ldw	r2,0(r2)
   4eb00:	1005003a 	cmpeq	r2,r2,zero
   4eb04:	1000061e 	bne	r2,zero,4eb20 <alt_get_errno+0x3c>
   4eb08:	00800174 	movhi	r2,5
   4eb0c:	10874f04 	addi	r2,r2,7484
   4eb10:	10800017 	ldw	r2,0(r2)
   4eb14:	103ee83a 	callr	r2
   4eb18:	e0bfff15 	stw	r2,-4(fp)
   4eb1c:	00000306 	br	4eb2c <alt_get_errno+0x48>
   4eb20:	00800174 	movhi	r2,5
   4eb24:	108e6a04 	addi	r2,r2,14760
   4eb28:	e0bfff15 	stw	r2,-4(fp)
   4eb2c:	e0bfff17 	ldw	r2,-4(fp)
}
   4eb30:	e037883a 	mov	sp,fp
   4eb34:	dfc00117 	ldw	ra,4(sp)
   4eb38:	df000017 	ldw	fp,0(sp)
   4eb3c:	dec00204 	addi	sp,sp,8
   4eb40:	f800283a 	ret

0004eb44 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   4eb44:	defff204 	addi	sp,sp,-56
   4eb48:	dfc00d15 	stw	ra,52(sp)
   4eb4c:	df000c15 	stw	fp,48(sp)
   4eb50:	df000c04 	addi	fp,sp,48
   4eb54:	e13ffc15 	stw	r4,-16(fp)
   4eb58:	e17ffd15 	stw	r5,-12(fp)
   4eb5c:	e1bffe15 	stw	r6,-8(fp)
   4eb60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   4eb64:	e0bffe17 	ldw	r2,-8(fp)
   4eb68:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   4eb6c:	e0bfff17 	ldw	r2,-4(fp)
   4eb70:	1090000c 	andi	r2,r2,16384
   4eb74:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4eb78:	00004006 	br	4ec7c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4eb7c:	e0bffc17 	ldw	r2,-16(fp)
   4eb80:	10800517 	ldw	r2,20(r2)
   4eb84:	10800044 	addi	r2,r2,1
   4eb88:	10800fcc 	andi	r2,r2,63
   4eb8c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   4eb90:	e0bffc17 	ldw	r2,-16(fp)
   4eb94:	10c00417 	ldw	r3,16(r2)
   4eb98:	e0bff917 	ldw	r2,-28(fp)
   4eb9c:	1880251e 	bne	r3,r2,4ec34 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
   4eba0:	e0bffa17 	ldw	r2,-24(fp)
   4eba4:	1005003a 	cmpeq	r2,r2,zero
   4eba8:	1000051e 	bne	r2,zero,4ebc0 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   4ebac:	004ed0c0 	call	4ed0c <alt_get_errno>
   4ebb0:	1007883a 	mov	r3,r2
   4ebb4:	008002c4 	movi	r2,11
   4ebb8:	18800015 	stw	r2,0(r3)
        break;
   4ebbc:	00003206 	br	4ec88 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ebc0:	0005303a 	rdctl	r2,status
   4ebc4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ebc8:	e0fff717 	ldw	r3,-36(fp)
   4ebcc:	00bfff84 	movi	r2,-2
   4ebd0:	1884703a 	and	r2,r3,r2
   4ebd4:	1001703a 	wrctl	status,r2
  
  return context;
   4ebd8:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   4ebdc:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4ebe0:	e0bffc17 	ldw	r2,-16(fp)
   4ebe4:	10800117 	ldw	r2,4(r2)
   4ebe8:	10c11014 	ori	r3,r2,1088
   4ebec:	e0bffc17 	ldw	r2,-16(fp)
   4ebf0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4ebf4:	e0bffc17 	ldw	r2,-16(fp)
   4ebf8:	10800017 	ldw	r2,0(r2)
   4ebfc:	11000304 	addi	r4,r2,12
   4ec00:	e0bffc17 	ldw	r2,-16(fp)
   4ec04:	10800117 	ldw	r2,4(r2)
   4ec08:	1007883a 	mov	r3,r2
   4ec0c:	2005883a 	mov	r2,r4
   4ec10:	10c00035 	stwio	r3,0(r2)
   4ec14:	e0bffb17 	ldw	r2,-20(fp)
   4ec18:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ec1c:	e0bff617 	ldw	r2,-40(fp)
   4ec20:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   4ec24:	e0bffc17 	ldw	r2,-16(fp)
   4ec28:	10c00417 	ldw	r3,16(r2)
   4ec2c:	e0bff917 	ldw	r2,-28(fp)
   4ec30:	18bffc26 	beq	r3,r2,4ec24 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
   4ec34:	e0bff817 	ldw	r2,-32(fp)
   4ec38:	10bfffc4 	addi	r2,r2,-1
   4ec3c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   4ec40:	e0bffc17 	ldw	r2,-16(fp)
   4ec44:	10c00517 	ldw	r3,20(r2)
   4ec48:	e0bffd17 	ldw	r2,-12(fp)
   4ec4c:	10800003 	ldbu	r2,0(r2)
   4ec50:	1009883a 	mov	r4,r2
   4ec54:	e0bffc17 	ldw	r2,-16(fp)
   4ec58:	1885883a 	add	r2,r3,r2
   4ec5c:	10801704 	addi	r2,r2,92
   4ec60:	11000005 	stb	r4,0(r2)
   4ec64:	e0bffd17 	ldw	r2,-12(fp)
   4ec68:	10800044 	addi	r2,r2,1
   4ec6c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   4ec70:	e0fffc17 	ldw	r3,-16(fp)
   4ec74:	e0bff917 	ldw	r2,-28(fp)
   4ec78:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4ec7c:	e0bff817 	ldw	r2,-32(fp)
   4ec80:	1004c03a 	cmpne	r2,r2,zero
   4ec84:	103fbd1e 	bne	r2,zero,4eb7c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ec88:	0005303a 	rdctl	r2,status
   4ec8c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ec90:	e0fff517 	ldw	r3,-44(fp)
   4ec94:	00bfff84 	movi	r2,-2
   4ec98:	1884703a 	and	r2,r3,r2
   4ec9c:	1001703a 	wrctl	status,r2
  
  return context;
   4eca0:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   4eca4:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4eca8:	e0bffc17 	ldw	r2,-16(fp)
   4ecac:	10800117 	ldw	r2,4(r2)
   4ecb0:	10c11014 	ori	r3,r2,1088
   4ecb4:	e0bffc17 	ldw	r2,-16(fp)
   4ecb8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4ecbc:	e0bffc17 	ldw	r2,-16(fp)
   4ecc0:	10800017 	ldw	r2,0(r2)
   4ecc4:	11000304 	addi	r4,r2,12
   4ecc8:	e0bffc17 	ldw	r2,-16(fp)
   4eccc:	10800117 	ldw	r2,4(r2)
   4ecd0:	1007883a 	mov	r3,r2
   4ecd4:	2005883a 	mov	r2,r4
   4ecd8:	10c00035 	stwio	r3,0(r2)
   4ecdc:	e0bffb17 	ldw	r2,-20(fp)
   4ece0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ece4:	e0bff417 	ldw	r2,-48(fp)
   4ece8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   4ecec:	e0fffe17 	ldw	r3,-8(fp)
   4ecf0:	e0bff817 	ldw	r2,-32(fp)
   4ecf4:	1885c83a 	sub	r2,r3,r2
}
   4ecf8:	e037883a 	mov	sp,fp
   4ecfc:	dfc00117 	ldw	ra,4(sp)
   4ed00:	df000017 	ldw	fp,0(sp)
   4ed04:	dec00204 	addi	sp,sp,8
   4ed08:	f800283a 	ret

0004ed0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ed0c:	defffd04 	addi	sp,sp,-12
   4ed10:	dfc00215 	stw	ra,8(sp)
   4ed14:	df000115 	stw	fp,4(sp)
   4ed18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4ed1c:	00800174 	movhi	r2,5
   4ed20:	10874f04 	addi	r2,r2,7484
   4ed24:	10800017 	ldw	r2,0(r2)
   4ed28:	1005003a 	cmpeq	r2,r2,zero
   4ed2c:	1000061e 	bne	r2,zero,4ed48 <alt_get_errno+0x3c>
   4ed30:	00800174 	movhi	r2,5
   4ed34:	10874f04 	addi	r2,r2,7484
   4ed38:	10800017 	ldw	r2,0(r2)
   4ed3c:	103ee83a 	callr	r2
   4ed40:	e0bfff15 	stw	r2,-4(fp)
   4ed44:	00000306 	br	4ed54 <alt_get_errno+0x48>
   4ed48:	00800174 	movhi	r2,5
   4ed4c:	108e6a04 	addi	r2,r2,14760
   4ed50:	e0bfff15 	stw	r2,-4(fp)
   4ed54:	e0bfff17 	ldw	r2,-4(fp)
}
   4ed58:	e037883a 	mov	sp,fp
   4ed5c:	dfc00117 	ldw	ra,4(sp)
   4ed60:	df000017 	ldw	fp,0(sp)
   4ed64:	dec00204 	addi	sp,sp,8
   4ed68:	f800283a 	ret

0004ed6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4ed6c:	defff404 	addi	sp,sp,-48
   4ed70:	df000b15 	stw	fp,44(sp)
   4ed74:	df000b04 	addi	fp,sp,44
   4ed78:	e13ffb15 	stw	r4,-20(fp)
   4ed7c:	e17ffc15 	stw	r5,-16(fp)
   4ed80:	e1bffd15 	stw	r6,-12(fp)
   4ed84:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4ed88:	e03ff915 	stw	zero,-28(fp)
   4ed8c:	00800174 	movhi	r2,5
   4ed90:	108e6f04 	addi	r2,r2,14780
   4ed94:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4ed98:	1005003a 	cmpeq	r2,r2,zero
   4ed9c:	1000411e 	bne	r2,zero,4eea4 <alt_alarm_start+0x138>
  {
    if (alarm)
   4eda0:	e0bffb17 	ldw	r2,-20(fp)
   4eda4:	1005003a 	cmpeq	r2,r2,zero
   4eda8:	10003b1e 	bne	r2,zero,4ee98 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4edac:	e0fffb17 	ldw	r3,-20(fp)
   4edb0:	e0bffd17 	ldw	r2,-12(fp)
   4edb4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4edb8:	e0fffb17 	ldw	r3,-20(fp)
   4edbc:	e0bffe17 	ldw	r2,-8(fp)
   4edc0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4edc4:	0005303a 	rdctl	r2,status
   4edc8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4edcc:	e0fff817 	ldw	r3,-32(fp)
   4edd0:	00bfff84 	movi	r2,-2
   4edd4:	1884703a 	and	r2,r3,r2
   4edd8:	1001703a 	wrctl	status,r2
  
  return context;
   4eddc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4ede0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4ede4:	00800174 	movhi	r2,5
   4ede8:	108e7004 	addi	r2,r2,14784
   4edec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4edf0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4edf4:	e0fffc17 	ldw	r3,-16(fp)
   4edf8:	e0bff917 	ldw	r2,-28(fp)
   4edfc:	1885883a 	add	r2,r3,r2
   4ee00:	10c00044 	addi	r3,r2,1
   4ee04:	e0bffb17 	ldw	r2,-20(fp)
   4ee08:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4ee0c:	e0bffb17 	ldw	r2,-20(fp)
   4ee10:	10c00217 	ldw	r3,8(r2)
   4ee14:	e0bff917 	ldw	r2,-28(fp)
   4ee18:	1880042e 	bgeu	r3,r2,4ee2c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   4ee1c:	e0fffb17 	ldw	r3,-20(fp)
   4ee20:	00800044 	movi	r2,1
   4ee24:	18800405 	stb	r2,16(r3)
   4ee28:	00000206 	br	4ee34 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   4ee2c:	e0bffb17 	ldw	r2,-20(fp)
   4ee30:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4ee34:	e0fffb17 	ldw	r3,-20(fp)
   4ee38:	00800174 	movhi	r2,5
   4ee3c:	10875204 	addi	r2,r2,7496
   4ee40:	e0bff615 	stw	r2,-40(fp)
   4ee44:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ee48:	e0fff717 	ldw	r3,-36(fp)
   4ee4c:	e0bff617 	ldw	r2,-40(fp)
   4ee50:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4ee54:	e0bff617 	ldw	r2,-40(fp)
   4ee58:	10c00017 	ldw	r3,0(r2)
   4ee5c:	e0bff717 	ldw	r2,-36(fp)
   4ee60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ee64:	e0bff617 	ldw	r2,-40(fp)
   4ee68:	10c00017 	ldw	r3,0(r2)
   4ee6c:	e0bff717 	ldw	r2,-36(fp)
   4ee70:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4ee74:	e0fff617 	ldw	r3,-40(fp)
   4ee78:	e0bff717 	ldw	r2,-36(fp)
   4ee7c:	18800015 	stw	r2,0(r3)
   4ee80:	e0bffa17 	ldw	r2,-24(fp)
   4ee84:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ee88:	e0bff517 	ldw	r2,-44(fp)
   4ee8c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4ee90:	e03fff15 	stw	zero,-4(fp)
   4ee94:	00000506 	br	4eeac <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4ee98:	00bffa84 	movi	r2,-22
   4ee9c:	e0bfff15 	stw	r2,-4(fp)
   4eea0:	00000206 	br	4eeac <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   4eea4:	00bfde84 	movi	r2,-134
   4eea8:	e0bfff15 	stw	r2,-4(fp)
   4eeac:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4eeb0:	e037883a 	mov	sp,fp
   4eeb4:	df000017 	ldw	fp,0(sp)
   4eeb8:	dec00104 	addi	sp,sp,4
   4eebc:	f800283a 	ret

0004eec0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4eec0:	defffe04 	addi	sp,sp,-8
   4eec4:	df000115 	stw	fp,4(sp)
   4eec8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4eecc:	e03fff15 	stw	zero,-4(fp)
   4eed0:	00000506 	br	4eee8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4eed4:	e0bfff17 	ldw	r2,-4(fp)
   4eed8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4eedc:	e0bfff17 	ldw	r2,-4(fp)
   4eee0:	10800804 	addi	r2,r2,32
   4eee4:	e0bfff15 	stw	r2,-4(fp)
   4eee8:	e0bfff17 	ldw	r2,-4(fp)
   4eeec:	10820030 	cmpltui	r2,r2,2048
   4eef0:	103ff81e 	bne	r2,zero,4eed4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4eef4:	e037883a 	mov	sp,fp
   4eef8:	df000017 	ldw	fp,0(sp)
   4eefc:	dec00104 	addi	sp,sp,4
   4ef00:	f800283a 	ret

0004ef04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4ef04:	defff904 	addi	sp,sp,-28
   4ef08:	dfc00615 	stw	ra,24(sp)
   4ef0c:	df000515 	stw	fp,20(sp)
   4ef10:	df000504 	addi	fp,sp,20
   4ef14:	e13ffd15 	stw	r4,-12(fp)
   4ef18:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4ef1c:	e0bffd17 	ldw	r2,-12(fp)
   4ef20:	1005003a 	cmpeq	r2,r2,zero
   4ef24:	1000041e 	bne	r2,zero,4ef38 <alt_dev_llist_insert+0x34>
   4ef28:	e0bffd17 	ldw	r2,-12(fp)
   4ef2c:	10800217 	ldw	r2,8(r2)
   4ef30:	1004c03a 	cmpne	r2,r2,zero
   4ef34:	1000071e 	bne	r2,zero,4ef54 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   4ef38:	004efb80 	call	4efb8 <alt_get_errno>
   4ef3c:	1007883a 	mov	r3,r2
   4ef40:	00800584 	movi	r2,22
   4ef44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4ef48:	00bffa84 	movi	r2,-22
   4ef4c:	e0bfff15 	stw	r2,-4(fp)
   4ef50:	00001306 	br	4efa0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4ef54:	e0fffd17 	ldw	r3,-12(fp)
   4ef58:	e0bffe17 	ldw	r2,-8(fp)
   4ef5c:	e0bffb15 	stw	r2,-20(fp)
   4ef60:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ef64:	e0fffc17 	ldw	r3,-16(fp)
   4ef68:	e0bffb17 	ldw	r2,-20(fp)
   4ef6c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4ef70:	e0bffb17 	ldw	r2,-20(fp)
   4ef74:	10c00017 	ldw	r3,0(r2)
   4ef78:	e0bffc17 	ldw	r2,-16(fp)
   4ef7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ef80:	e0bffb17 	ldw	r2,-20(fp)
   4ef84:	10c00017 	ldw	r3,0(r2)
   4ef88:	e0bffc17 	ldw	r2,-16(fp)
   4ef8c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4ef90:	e0fffb17 	ldw	r3,-20(fp)
   4ef94:	e0bffc17 	ldw	r2,-16(fp)
   4ef98:	18800015 	stw	r2,0(r3)

  return 0;  
   4ef9c:	e03fff15 	stw	zero,-4(fp)
   4efa0:	e0bfff17 	ldw	r2,-4(fp)
}
   4efa4:	e037883a 	mov	sp,fp
   4efa8:	dfc00117 	ldw	ra,4(sp)
   4efac:	df000017 	ldw	fp,0(sp)
   4efb0:	dec00204 	addi	sp,sp,8
   4efb4:	f800283a 	ret

0004efb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4efb8:	defffd04 	addi	sp,sp,-12
   4efbc:	dfc00215 	stw	ra,8(sp)
   4efc0:	df000115 	stw	fp,4(sp)
   4efc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4efc8:	00800174 	movhi	r2,5
   4efcc:	10874f04 	addi	r2,r2,7484
   4efd0:	10800017 	ldw	r2,0(r2)
   4efd4:	1005003a 	cmpeq	r2,r2,zero
   4efd8:	1000061e 	bne	r2,zero,4eff4 <alt_get_errno+0x3c>
   4efdc:	00800174 	movhi	r2,5
   4efe0:	10874f04 	addi	r2,r2,7484
   4efe4:	10800017 	ldw	r2,0(r2)
   4efe8:	103ee83a 	callr	r2
   4efec:	e0bfff15 	stw	r2,-4(fp)
   4eff0:	00000306 	br	4f000 <alt_get_errno+0x48>
   4eff4:	00800174 	movhi	r2,5
   4eff8:	108e6a04 	addi	r2,r2,14760
   4effc:	e0bfff15 	stw	r2,-4(fp)
   4f000:	e0bfff17 	ldw	r2,-4(fp)
}
   4f004:	e037883a 	mov	sp,fp
   4f008:	dfc00117 	ldw	ra,4(sp)
   4f00c:	df000017 	ldw	fp,0(sp)
   4f010:	dec00204 	addi	sp,sp,8
   4f014:	f800283a 	ret

0004f018 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4f018:	defffd04 	addi	sp,sp,-12
   4f01c:	dfc00215 	stw	ra,8(sp)
   4f020:	df000115 	stw	fp,4(sp)
   4f024:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4f028:	00bfff04 	movi	r2,-4
   4f02c:	00c00174 	movhi	r3,5
   4f030:	18ff7904 	addi	r3,r3,-540
   4f034:	1885883a 	add	r2,r3,r2
   4f038:	e0bfff15 	stw	r2,-4(fp)
   4f03c:	00000606 	br	4f058 <_do_ctors+0x40>
        (*ctor) (); 
   4f040:	e0bfff17 	ldw	r2,-4(fp)
   4f044:	10800017 	ldw	r2,0(r2)
   4f048:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4f04c:	e0bfff17 	ldw	r2,-4(fp)
   4f050:	10bfff04 	addi	r2,r2,-4
   4f054:	e0bfff15 	stw	r2,-4(fp)
   4f058:	e0ffff17 	ldw	r3,-4(fp)
   4f05c:	00800174 	movhi	r2,5
   4f060:	10bf7804 	addi	r2,r2,-544
   4f064:	18bff62e 	bgeu	r3,r2,4f040 <_do_ctors+0x28>
        (*ctor) (); 
}
   4f068:	e037883a 	mov	sp,fp
   4f06c:	dfc00117 	ldw	ra,4(sp)
   4f070:	df000017 	ldw	fp,0(sp)
   4f074:	dec00204 	addi	sp,sp,8
   4f078:	f800283a 	ret

0004f07c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4f07c:	defffd04 	addi	sp,sp,-12
   4f080:	dfc00215 	stw	ra,8(sp)
   4f084:	df000115 	stw	fp,4(sp)
   4f088:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4f08c:	00bfff04 	movi	r2,-4
   4f090:	00c00174 	movhi	r3,5
   4f094:	18ff7904 	addi	r3,r3,-540
   4f098:	1885883a 	add	r2,r3,r2
   4f09c:	e0bfff15 	stw	r2,-4(fp)
   4f0a0:	00000606 	br	4f0bc <_do_dtors+0x40>
        (*dtor) (); 
   4f0a4:	e0bfff17 	ldw	r2,-4(fp)
   4f0a8:	10800017 	ldw	r2,0(r2)
   4f0ac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4f0b0:	e0bfff17 	ldw	r2,-4(fp)
   4f0b4:	10bfff04 	addi	r2,r2,-4
   4f0b8:	e0bfff15 	stw	r2,-4(fp)
   4f0bc:	e0ffff17 	ldw	r3,-4(fp)
   4f0c0:	00800174 	movhi	r2,5
   4f0c4:	10bf7904 	addi	r2,r2,-540
   4f0c8:	18bff62e 	bgeu	r3,r2,4f0a4 <_do_dtors+0x28>
        (*dtor) (); 
}
   4f0cc:	e037883a 	mov	sp,fp
   4f0d0:	dfc00117 	ldw	ra,4(sp)
   4f0d4:	df000017 	ldw	fp,0(sp)
   4f0d8:	dec00204 	addi	sp,sp,8
   4f0dc:	f800283a 	ret

0004f0e0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4f0e0:	defff904 	addi	sp,sp,-28
   4f0e4:	dfc00615 	stw	ra,24(sp)
   4f0e8:	df000515 	stw	fp,20(sp)
   4f0ec:	df000504 	addi	fp,sp,20
   4f0f0:	e13ffd15 	stw	r4,-12(fp)
   4f0f4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4f0f8:	e0bffe17 	ldw	r2,-8(fp)
   4f0fc:	10800017 	ldw	r2,0(r2)
   4f100:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4f104:	e13ffd17 	ldw	r4,-12(fp)
   4f108:	00437bc0 	call	437bc <strlen>
   4f10c:	10800044 	addi	r2,r2,1
   4f110:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f114:	00000d06 	br	4f14c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4f118:	e0bffc17 	ldw	r2,-16(fp)
   4f11c:	11000217 	ldw	r4,8(r2)
   4f120:	e1bffb17 	ldw	r6,-20(fp)
   4f124:	e17ffd17 	ldw	r5,-12(fp)
   4f128:	004fa240 	call	4fa24 <memcmp>
   4f12c:	1004c03a 	cmpne	r2,r2,zero
   4f130:	1000031e 	bne	r2,zero,4f140 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4f134:	e0bffc17 	ldw	r2,-16(fp)
   4f138:	e0bfff15 	stw	r2,-4(fp)
   4f13c:	00000706 	br	4f15c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4f140:	e0bffc17 	ldw	r2,-16(fp)
   4f144:	10800017 	ldw	r2,0(r2)
   4f148:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f14c:	e0fffe17 	ldw	r3,-8(fp)
   4f150:	e0bffc17 	ldw	r2,-16(fp)
   4f154:	10fff01e 	bne	r2,r3,4f118 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4f158:	e03fff15 	stw	zero,-4(fp)
   4f15c:	e0bfff17 	ldw	r2,-4(fp)
}
   4f160:	e037883a 	mov	sp,fp
   4f164:	dfc00117 	ldw	ra,4(sp)
   4f168:	df000017 	ldw	fp,0(sp)
   4f16c:	dec00204 	addi	sp,sp,8
   4f170:	f800283a 	ret

0004f174 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4f174:	defffa04 	addi	sp,sp,-24
   4f178:	dfc00515 	stw	ra,20(sp)
   4f17c:	df000415 	stw	fp,16(sp)
   4f180:	df000404 	addi	fp,sp,16
   4f184:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4f188:	00800174 	movhi	r2,5
   4f18c:	10874a04 	addi	r2,r2,7464
   4f190:	10800017 	ldw	r2,0(r2)
   4f194:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f198:	00003306 	br	4f268 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   4f19c:	e0bffd17 	ldw	r2,-12(fp)
   4f1a0:	11000217 	ldw	r4,8(r2)
   4f1a4:	00437bc0 	call	437bc <strlen>
   4f1a8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   4f1ac:	e0bffd17 	ldw	r2,-12(fp)
   4f1b0:	10c00217 	ldw	r3,8(r2)
   4f1b4:	e0bffc17 	ldw	r2,-16(fp)
   4f1b8:	1885883a 	add	r2,r3,r2
   4f1bc:	10bfffc4 	addi	r2,r2,-1
   4f1c0:	10800003 	ldbu	r2,0(r2)
   4f1c4:	10803fcc 	andi	r2,r2,255
   4f1c8:	1080201c 	xori	r2,r2,128
   4f1cc:	10bfe004 	addi	r2,r2,-128
   4f1d0:	10800bd8 	cmpnei	r2,r2,47
   4f1d4:	1000031e 	bne	r2,zero,4f1e4 <alt_find_file+0x70>
    {
      len -= 1;
   4f1d8:	e0bffc17 	ldw	r2,-16(fp)
   4f1dc:	10bfffc4 	addi	r2,r2,-1
   4f1e0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4f1e4:	e0bffc17 	ldw	r2,-16(fp)
   4f1e8:	1007883a 	mov	r3,r2
   4f1ec:	e0bffe17 	ldw	r2,-8(fp)
   4f1f0:	1885883a 	add	r2,r3,r2
   4f1f4:	10800003 	ldbu	r2,0(r2)
   4f1f8:	10803fcc 	andi	r2,r2,255
   4f1fc:	1080201c 	xori	r2,r2,128
   4f200:	10bfe004 	addi	r2,r2,-128
   4f204:	10800be0 	cmpeqi	r2,r2,47
   4f208:	10000a1e 	bne	r2,zero,4f234 <alt_find_file+0xc0>
   4f20c:	e0bffc17 	ldw	r2,-16(fp)
   4f210:	1007883a 	mov	r3,r2
   4f214:	e0bffe17 	ldw	r2,-8(fp)
   4f218:	1885883a 	add	r2,r3,r2
   4f21c:	10800003 	ldbu	r2,0(r2)
   4f220:	10803fcc 	andi	r2,r2,255
   4f224:	1080201c 	xori	r2,r2,128
   4f228:	10bfe004 	addi	r2,r2,-128
   4f22c:	1004c03a 	cmpne	r2,r2,zero
   4f230:	10000a1e 	bne	r2,zero,4f25c <alt_find_file+0xe8>
   4f234:	e0bffd17 	ldw	r2,-12(fp)
   4f238:	11000217 	ldw	r4,8(r2)
   4f23c:	e1bffc17 	ldw	r6,-16(fp)
   4f240:	e17ffe17 	ldw	r5,-8(fp)
   4f244:	004fa240 	call	4fa24 <memcmp>
   4f248:	1004c03a 	cmpne	r2,r2,zero
   4f24c:	1000031e 	bne	r2,zero,4f25c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4f250:	e0bffd17 	ldw	r2,-12(fp)
   4f254:	e0bfff15 	stw	r2,-4(fp)
   4f258:	00000806 	br	4f27c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4f25c:	e0bffd17 	ldw	r2,-12(fp)
   4f260:	10800017 	ldw	r2,0(r2)
   4f264:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f268:	00c00174 	movhi	r3,5
   4f26c:	18c74a04 	addi	r3,r3,7464
   4f270:	e0bffd17 	ldw	r2,-12(fp)
   4f274:	10ffc91e 	bne	r2,r3,4f19c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4f278:	e03fff15 	stw	zero,-4(fp)
   4f27c:	e0bfff17 	ldw	r2,-4(fp)
}
   4f280:	e037883a 	mov	sp,fp
   4f284:	dfc00117 	ldw	ra,4(sp)
   4f288:	df000017 	ldw	fp,0(sp)
   4f28c:	dec00204 	addi	sp,sp,8
   4f290:	f800283a 	ret

0004f294 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4f294:	defffc04 	addi	sp,sp,-16
   4f298:	df000315 	stw	fp,12(sp)
   4f29c:	df000304 	addi	fp,sp,12
   4f2a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4f2a4:	00bffa04 	movi	r2,-24
   4f2a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f2ac:	e03ffe15 	stw	zero,-8(fp)
   4f2b0:	00001e06 	br	4f32c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4f2b4:	e0bffe17 	ldw	r2,-8(fp)
   4f2b8:	00c00174 	movhi	r3,5
   4f2bc:	18c28f04 	addi	r3,r3,2620
   4f2c0:	10800324 	muli	r2,r2,12
   4f2c4:	10c5883a 	add	r2,r2,r3
   4f2c8:	10800017 	ldw	r2,0(r2)
   4f2cc:	1004c03a 	cmpne	r2,r2,zero
   4f2d0:	1000131e 	bne	r2,zero,4f320 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4f2d4:	e0bffe17 	ldw	r2,-8(fp)
   4f2d8:	00c00174 	movhi	r3,5
   4f2dc:	18c28f04 	addi	r3,r3,2620
   4f2e0:	10800324 	muli	r2,r2,12
   4f2e4:	10c7883a 	add	r3,r2,r3
   4f2e8:	e0bfff17 	ldw	r2,-4(fp)
   4f2ec:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   4f2f0:	00800174 	movhi	r2,5
   4f2f4:	10874e04 	addi	r2,r2,7480
   4f2f8:	10c00017 	ldw	r3,0(r2)
   4f2fc:	e0bffe17 	ldw	r2,-8(fp)
   4f300:	1880040e 	bge	r3,r2,4f314 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   4f304:	00c00174 	movhi	r3,5
   4f308:	18c74e04 	addi	r3,r3,7480
   4f30c:	e0bffe17 	ldw	r2,-8(fp)
   4f310:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4f314:	e0bffe17 	ldw	r2,-8(fp)
   4f318:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4f31c:	00000606 	br	4f338 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f320:	e0bffe17 	ldw	r2,-8(fp)
   4f324:	10800044 	addi	r2,r2,1
   4f328:	e0bffe15 	stw	r2,-8(fp)
   4f32c:	e0bffe17 	ldw	r2,-8(fp)
   4f330:	10800810 	cmplti	r2,r2,32
   4f334:	103fdf1e 	bne	r2,zero,4f2b4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4f338:	e0bffd17 	ldw	r2,-12(fp)
}
   4f33c:	e037883a 	mov	sp,fp
   4f340:	df000017 	ldw	fp,0(sp)
   4f344:	dec00104 	addi	sp,sp,4
   4f348:	f800283a 	ret

0004f34c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4f34c:	defffe04 	addi	sp,sp,-8
   4f350:	dfc00115 	stw	ra,4(sp)
   4f354:	df000015 	stw	fp,0(sp)
   4f358:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4f35c:	0009883a 	mov	r4,zero
   4f360:	01440004 	movi	r5,4096
   4f364:	004f9480 	call	4f948 <alt_icache_flush>
#endif
}
   4f368:	e037883a 	mov	sp,fp
   4f36c:	dfc00117 	ldw	ra,4(sp)
   4f370:	df000017 	ldw	fp,0(sp)
   4f374:	dec00204 	addi	sp,sp,8
   4f378:	f800283a 	ret

0004f37c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f37c:	defff904 	addi	sp,sp,-28
   4f380:	dfc00615 	stw	ra,24(sp)
   4f384:	df000515 	stw	fp,20(sp)
   4f388:	df000504 	addi	fp,sp,20
   4f38c:	e13ffc15 	stw	r4,-16(fp)
   4f390:	e17ffd15 	stw	r5,-12(fp)
   4f394:	e1bffe15 	stw	r6,-8(fp)
   4f398:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4f39c:	e0800217 	ldw	r2,8(fp)
   4f3a0:	d8800015 	stw	r2,0(sp)
   4f3a4:	e13ffc17 	ldw	r4,-16(fp)
   4f3a8:	e17ffd17 	ldw	r5,-12(fp)
   4f3ac:	e1bffe17 	ldw	r6,-8(fp)
   4f3b0:	e1ffff17 	ldw	r7,-4(fp)
   4f3b4:	004f5500 	call	4f550 <alt_iic_isr_register>
}  
   4f3b8:	e037883a 	mov	sp,fp
   4f3bc:	dfc00117 	ldw	ra,4(sp)
   4f3c0:	df000017 	ldw	fp,0(sp)
   4f3c4:	dec00204 	addi	sp,sp,8
   4f3c8:	f800283a 	ret

0004f3cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4f3cc:	defff904 	addi	sp,sp,-28
   4f3d0:	df000615 	stw	fp,24(sp)
   4f3d4:	df000604 	addi	fp,sp,24
   4f3d8:	e13ffe15 	stw	r4,-8(fp)
   4f3dc:	e17fff15 	stw	r5,-4(fp)
   4f3e0:	e0bfff17 	ldw	r2,-4(fp)
   4f3e4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f3e8:	0005303a 	rdctl	r2,status
   4f3ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f3f0:	e0fffb17 	ldw	r3,-20(fp)
   4f3f4:	00bfff84 	movi	r2,-2
   4f3f8:	1884703a 	and	r2,r3,r2
   4f3fc:	1001703a 	wrctl	status,r2
  
  return context;
   4f400:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4f404:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   4f408:	e0fffc17 	ldw	r3,-16(fp)
   4f40c:	00800044 	movi	r2,1
   4f410:	10c4983a 	sll	r2,r2,r3
   4f414:	1007883a 	mov	r3,r2
   4f418:	00800174 	movhi	r2,5
   4f41c:	108e6b04 	addi	r2,r2,14764
   4f420:	10800017 	ldw	r2,0(r2)
   4f424:	1886b03a 	or	r3,r3,r2
   4f428:	00800174 	movhi	r2,5
   4f42c:	108e6b04 	addi	r2,r2,14764
   4f430:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4f434:	00800174 	movhi	r2,5
   4f438:	108e6b04 	addi	r2,r2,14764
   4f43c:	10800017 	ldw	r2,0(r2)
   4f440:	100170fa 	wrctl	ienable,r2
   4f444:	e0bffd17 	ldw	r2,-12(fp)
   4f448:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f44c:	e0bffa17 	ldw	r2,-24(fp)
   4f450:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4f454:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4f458:	e037883a 	mov	sp,fp
   4f45c:	df000017 	ldw	fp,0(sp)
   4f460:	dec00104 	addi	sp,sp,4
   4f464:	f800283a 	ret

0004f468 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4f468:	defff904 	addi	sp,sp,-28
   4f46c:	df000615 	stw	fp,24(sp)
   4f470:	df000604 	addi	fp,sp,24
   4f474:	e13ffe15 	stw	r4,-8(fp)
   4f478:	e17fff15 	stw	r5,-4(fp)
   4f47c:	e0bfff17 	ldw	r2,-4(fp)
   4f480:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f484:	0005303a 	rdctl	r2,status
   4f488:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f48c:	e0fffb17 	ldw	r3,-20(fp)
   4f490:	00bfff84 	movi	r2,-2
   4f494:	1884703a 	and	r2,r3,r2
   4f498:	1001703a 	wrctl	status,r2
  
  return context;
   4f49c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4f4a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   4f4a4:	e0fffc17 	ldw	r3,-16(fp)
   4f4a8:	00800044 	movi	r2,1
   4f4ac:	10c4983a 	sll	r2,r2,r3
   4f4b0:	0084303a 	nor	r2,zero,r2
   4f4b4:	1007883a 	mov	r3,r2
   4f4b8:	00800174 	movhi	r2,5
   4f4bc:	108e6b04 	addi	r2,r2,14764
   4f4c0:	10800017 	ldw	r2,0(r2)
   4f4c4:	1886703a 	and	r3,r3,r2
   4f4c8:	00800174 	movhi	r2,5
   4f4cc:	108e6b04 	addi	r2,r2,14764
   4f4d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4f4d4:	00800174 	movhi	r2,5
   4f4d8:	108e6b04 	addi	r2,r2,14764
   4f4dc:	10800017 	ldw	r2,0(r2)
   4f4e0:	100170fa 	wrctl	ienable,r2
   4f4e4:	e0bffd17 	ldw	r2,-12(fp)
   4f4e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f4ec:	e0bffa17 	ldw	r2,-24(fp)
   4f4f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4f4f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4f4f8:	e037883a 	mov	sp,fp
   4f4fc:	df000017 	ldw	fp,0(sp)
   4f500:	dec00104 	addi	sp,sp,4
   4f504:	f800283a 	ret

0004f508 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4f508:	defffc04 	addi	sp,sp,-16
   4f50c:	df000315 	stw	fp,12(sp)
   4f510:	df000304 	addi	fp,sp,12
   4f514:	e13ffe15 	stw	r4,-8(fp)
   4f518:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4f51c:	000530fa 	rdctl	r2,ienable
   4f520:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4f524:	e0ffff17 	ldw	r3,-4(fp)
   4f528:	00800044 	movi	r2,1
   4f52c:	10c4983a 	sll	r2,r2,r3
   4f530:	1007883a 	mov	r3,r2
   4f534:	e0bffd17 	ldw	r2,-12(fp)
   4f538:	1884703a 	and	r2,r3,r2
   4f53c:	1004c03a 	cmpne	r2,r2,zero
}
   4f540:	e037883a 	mov	sp,fp
   4f544:	df000017 	ldw	fp,0(sp)
   4f548:	dec00104 	addi	sp,sp,4
   4f54c:	f800283a 	ret

0004f550 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f550:	defff404 	addi	sp,sp,-48
   4f554:	dfc00b15 	stw	ra,44(sp)
   4f558:	df000a15 	stw	fp,40(sp)
   4f55c:	df000a04 	addi	fp,sp,40
   4f560:	e13ffb15 	stw	r4,-20(fp)
   4f564:	e17ffc15 	stw	r5,-16(fp)
   4f568:	e1bffd15 	stw	r6,-12(fp)
   4f56c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   4f570:	00bffa84 	movi	r2,-22
   4f574:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4f578:	e0bffc17 	ldw	r2,-16(fp)
   4f57c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4f580:	e0bff917 	ldw	r2,-28(fp)
   4f584:	10800808 	cmpgei	r2,r2,32
   4f588:	1000291e 	bne	r2,zero,4f630 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f58c:	0005303a 	rdctl	r2,status
   4f590:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f594:	e0fff717 	ldw	r3,-36(fp)
   4f598:	00bfff84 	movi	r2,-2
   4f59c:	1884703a 	and	r2,r3,r2
   4f5a0:	1001703a 	wrctl	status,r2
  
  return context;
   4f5a4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4f5a8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   4f5ac:	e0bff917 	ldw	r2,-28(fp)
   4f5b0:	00c00174 	movhi	r3,5
   4f5b4:	18d50c04 	addi	r3,r3,21552
   4f5b8:	100490fa 	slli	r2,r2,3
   4f5bc:	10c7883a 	add	r3,r2,r3
   4f5c0:	e0bffd17 	ldw	r2,-12(fp)
   4f5c4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   4f5c8:	e0bff917 	ldw	r2,-28(fp)
   4f5cc:	00c00174 	movhi	r3,5
   4f5d0:	18d50c04 	addi	r3,r3,21552
   4f5d4:	100490fa 	slli	r2,r2,3
   4f5d8:	10c5883a 	add	r2,r2,r3
   4f5dc:	10c00104 	addi	r3,r2,4
   4f5e0:	e0bffe17 	ldw	r2,-8(fp)
   4f5e4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4f5e8:	e0bffd17 	ldw	r2,-12(fp)
   4f5ec:	1005003a 	cmpeq	r2,r2,zero
   4f5f0:	1000051e 	bne	r2,zero,4f608 <alt_iic_isr_register+0xb8>
   4f5f4:	e17ff917 	ldw	r5,-28(fp)
   4f5f8:	e13ffb17 	ldw	r4,-20(fp)
   4f5fc:	004f3cc0 	call	4f3cc <alt_ic_irq_enable>
   4f600:	e0bfff15 	stw	r2,-4(fp)
   4f604:	00000406 	br	4f618 <alt_iic_isr_register+0xc8>
   4f608:	e17ff917 	ldw	r5,-28(fp)
   4f60c:	e13ffb17 	ldw	r4,-20(fp)
   4f610:	004f4680 	call	4f468 <alt_ic_irq_disable>
   4f614:	e0bfff15 	stw	r2,-4(fp)
   4f618:	e0bfff17 	ldw	r2,-4(fp)
   4f61c:	e0bffa15 	stw	r2,-24(fp)
   4f620:	e0bff817 	ldw	r2,-32(fp)
   4f624:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f628:	e0bff617 	ldw	r2,-40(fp)
   4f62c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4f630:	e0bffa17 	ldw	r2,-24(fp)
}
   4f634:	e037883a 	mov	sp,fp
   4f638:	dfc00117 	ldw	ra,4(sp)
   4f63c:	df000017 	ldw	fp,0(sp)
   4f640:	dec00204 	addi	sp,sp,8
   4f644:	f800283a 	ret

0004f648 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4f648:	defff904 	addi	sp,sp,-28
   4f64c:	dfc00615 	stw	ra,24(sp)
   4f650:	df000515 	stw	fp,20(sp)
   4f654:	df000504 	addi	fp,sp,20
   4f658:	e13ffc15 	stw	r4,-16(fp)
   4f65c:	e17ffd15 	stw	r5,-12(fp)
   4f660:	e1bffe15 	stw	r6,-8(fp)
   4f664:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4f668:	e13ffd17 	ldw	r4,-12(fp)
   4f66c:	e17ffe17 	ldw	r5,-8(fp)
   4f670:	e1bfff17 	ldw	r6,-4(fp)
   4f674:	004d23c0 	call	4d23c <open>
   4f678:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4f67c:	e0bffb17 	ldw	r2,-20(fp)
   4f680:	1004803a 	cmplt	r2,r2,zero
   4f684:	10001c1e 	bne	r2,zero,4f6f8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   4f688:	e0bffb17 	ldw	r2,-20(fp)
   4f68c:	00c00174 	movhi	r3,5
   4f690:	18c28f04 	addi	r3,r3,2620
   4f694:	10800324 	muli	r2,r2,12
   4f698:	10c5883a 	add	r2,r2,r3
   4f69c:	10c00017 	ldw	r3,0(r2)
   4f6a0:	e0bffc17 	ldw	r2,-16(fp)
   4f6a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4f6a8:	e0bffb17 	ldw	r2,-20(fp)
   4f6ac:	00c00174 	movhi	r3,5
   4f6b0:	18c28f04 	addi	r3,r3,2620
   4f6b4:	10800324 	muli	r2,r2,12
   4f6b8:	10c5883a 	add	r2,r2,r3
   4f6bc:	10800104 	addi	r2,r2,4
   4f6c0:	10c00017 	ldw	r3,0(r2)
   4f6c4:	e0bffc17 	ldw	r2,-16(fp)
   4f6c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4f6cc:	e0bffb17 	ldw	r2,-20(fp)
   4f6d0:	00c00174 	movhi	r3,5
   4f6d4:	18c28f04 	addi	r3,r3,2620
   4f6d8:	10800324 	muli	r2,r2,12
   4f6dc:	10c5883a 	add	r2,r2,r3
   4f6e0:	10800204 	addi	r2,r2,8
   4f6e4:	10c00017 	ldw	r3,0(r2)
   4f6e8:	e0bffc17 	ldw	r2,-16(fp)
   4f6ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4f6f0:	e13ffb17 	ldw	r4,-20(fp)
   4f6f4:	004d5a40 	call	4d5a4 <alt_release_fd>
  }
} 
   4f6f8:	e037883a 	mov	sp,fp
   4f6fc:	dfc00117 	ldw	ra,4(sp)
   4f700:	df000017 	ldw	fp,0(sp)
   4f704:	dec00204 	addi	sp,sp,8
   4f708:	f800283a 	ret

0004f70c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4f70c:	defffb04 	addi	sp,sp,-20
   4f710:	dfc00415 	stw	ra,16(sp)
   4f714:	df000315 	stw	fp,12(sp)
   4f718:	df000304 	addi	fp,sp,12
   4f71c:	e13ffd15 	stw	r4,-12(fp)
   4f720:	e17ffe15 	stw	r5,-8(fp)
   4f724:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4f728:	01000174 	movhi	r4,5
   4f72c:	21029204 	addi	r4,r4,2632
   4f730:	e17ffd17 	ldw	r5,-12(fp)
   4f734:	01800044 	movi	r6,1
   4f738:	01c07fc4 	movi	r7,511
   4f73c:	004f6480 	call	4f648 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4f740:	01000174 	movhi	r4,5
   4f744:	21028f04 	addi	r4,r4,2620
   4f748:	e17ffe17 	ldw	r5,-8(fp)
   4f74c:	000d883a 	mov	r6,zero
   4f750:	01c07fc4 	movi	r7,511
   4f754:	004f6480 	call	4f648 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4f758:	01000174 	movhi	r4,5
   4f75c:	21029504 	addi	r4,r4,2644
   4f760:	e17fff17 	ldw	r5,-4(fp)
   4f764:	01800044 	movi	r6,1
   4f768:	01c07fc4 	movi	r7,511
   4f76c:	004f6480 	call	4f648 <alt_open_fd>
}  
   4f770:	e037883a 	mov	sp,fp
   4f774:	dfc00117 	ldw	ra,4(sp)
   4f778:	df000017 	ldw	fp,0(sp)
   4f77c:	dec00204 	addi	sp,sp,8
   4f780:	f800283a 	ret

0004f784 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4f784:	defffa04 	addi	sp,sp,-24
   4f788:	df000515 	stw	fp,20(sp)
   4f78c:	df000504 	addi	fp,sp,20
   4f790:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f794:	0005303a 	rdctl	r2,status
   4f798:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f79c:	e0fffd17 	ldw	r3,-12(fp)
   4f7a0:	00bfff84 	movi	r2,-2
   4f7a4:	1884703a 	and	r2,r3,r2
   4f7a8:	1001703a 	wrctl	status,r2
  
  return context;
   4f7ac:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4f7b0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   4f7b4:	e0bfff17 	ldw	r2,-4(fp)
   4f7b8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4f7bc:	e0bffc17 	ldw	r2,-16(fp)
   4f7c0:	10c00017 	ldw	r3,0(r2)
   4f7c4:	e0bffc17 	ldw	r2,-16(fp)
   4f7c8:	10800117 	ldw	r2,4(r2)
   4f7cc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   4f7d0:	e0bffc17 	ldw	r2,-16(fp)
   4f7d4:	10c00117 	ldw	r3,4(r2)
   4f7d8:	e0bffc17 	ldw	r2,-16(fp)
   4f7dc:	10800017 	ldw	r2,0(r2)
   4f7e0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4f7e4:	e0fffc17 	ldw	r3,-16(fp)
   4f7e8:	e0bffc17 	ldw	r2,-16(fp)
   4f7ec:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   4f7f0:	e0fffc17 	ldw	r3,-16(fp)
   4f7f4:	e0bffc17 	ldw	r2,-16(fp)
   4f7f8:	18800015 	stw	r2,0(r3)
   4f7fc:	e0bffe17 	ldw	r2,-8(fp)
   4f800:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f804:	e0bffb17 	ldw	r2,-20(fp)
   4f808:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4f80c:	e037883a 	mov	sp,fp
   4f810:	df000017 	ldw	fp,0(sp)
   4f814:	dec00104 	addi	sp,sp,4
   4f818:	f800283a 	ret

0004f81c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4f81c:	defffb04 	addi	sp,sp,-20
   4f820:	dfc00415 	stw	ra,16(sp)
   4f824:	df000315 	stw	fp,12(sp)
   4f828:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4f82c:	d0a01a17 	ldw	r2,-32664(gp)
   4f830:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4f834:	d0a73817 	ldw	r2,-25376(gp)
   4f838:	10800044 	addi	r2,r2,1
   4f83c:	d0a73815 	stw	r2,-25376(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f840:	00003106 	br	4f908 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   4f844:	e0bffe17 	ldw	r2,-8(fp)
   4f848:	10800017 	ldw	r2,0(r2)
   4f84c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4f850:	e0bffe17 	ldw	r2,-8(fp)
   4f854:	10800403 	ldbu	r2,16(r2)
   4f858:	10803fcc 	andi	r2,r2,255
   4f85c:	1005003a 	cmpeq	r2,r2,zero
   4f860:	1000051e 	bne	r2,zero,4f878 <alt_tick+0x5c>
   4f864:	d0a73817 	ldw	r2,-25376(gp)
   4f868:	1004c03a 	cmpne	r2,r2,zero
   4f86c:	1000021e 	bne	r2,zero,4f878 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4f870:	e0bffe17 	ldw	r2,-8(fp)
   4f874:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4f878:	e0bffe17 	ldw	r2,-8(fp)
   4f87c:	10c00217 	ldw	r3,8(r2)
   4f880:	d0a73817 	ldw	r2,-25376(gp)
   4f884:	10c01e36 	bltu	r2,r3,4f900 <alt_tick+0xe4>
   4f888:	e0bffe17 	ldw	r2,-8(fp)
   4f88c:	10800403 	ldbu	r2,16(r2)
   4f890:	10803fcc 	andi	r2,r2,255
   4f894:	1004c03a 	cmpne	r2,r2,zero
   4f898:	1000191e 	bne	r2,zero,4f900 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   4f89c:	e0bffe17 	ldw	r2,-8(fp)
   4f8a0:	10c00317 	ldw	r3,12(r2)
   4f8a4:	e0bffe17 	ldw	r2,-8(fp)
   4f8a8:	11000517 	ldw	r4,20(r2)
   4f8ac:	183ee83a 	callr	r3
   4f8b0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4f8b4:	e0bffd17 	ldw	r2,-12(fp)
   4f8b8:	1004c03a 	cmpne	r2,r2,zero
   4f8bc:	1000031e 	bne	r2,zero,4f8cc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   4f8c0:	e13ffe17 	ldw	r4,-8(fp)
   4f8c4:	004f7840 	call	4f784 <alt_alarm_stop>
   4f8c8:	00000d06 	br	4f900 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4f8cc:	e0bffe17 	ldw	r2,-8(fp)
   4f8d0:	10c00217 	ldw	r3,8(r2)
   4f8d4:	e0bffd17 	ldw	r2,-12(fp)
   4f8d8:	1887883a 	add	r3,r3,r2
   4f8dc:	e0bffe17 	ldw	r2,-8(fp)
   4f8e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4f8e4:	e0bffe17 	ldw	r2,-8(fp)
   4f8e8:	10c00217 	ldw	r3,8(r2)
   4f8ec:	d0a73817 	ldw	r2,-25376(gp)
   4f8f0:	1880032e 	bgeu	r3,r2,4f900 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   4f8f4:	e0fffe17 	ldw	r3,-8(fp)
   4f8f8:	00800044 	movi	r2,1
   4f8fc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   4f900:	e0bfff17 	ldw	r2,-4(fp)
   4f904:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f908:	d0e01a04 	addi	r3,gp,-32664
   4f90c:	e0bffe17 	ldw	r2,-8(fp)
   4f910:	10ffcc1e 	bne	r2,r3,4f844 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4f914:	e037883a 	mov	sp,fp
   4f918:	dfc00117 	ldw	ra,4(sp)
   4f91c:	df000017 	ldw	fp,0(sp)
   4f920:	dec00204 	addi	sp,sp,8
   4f924:	f800283a 	ret

0004f928 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4f928:	deffff04 	addi	sp,sp,-4
   4f92c:	df000015 	stw	fp,0(sp)
   4f930:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4f934:	000170fa 	wrctl	ienable,zero
}
   4f938:	e037883a 	mov	sp,fp
   4f93c:	df000017 	ldw	fp,0(sp)
   4f940:	dec00104 	addi	sp,sp,4
   4f944:	f800283a 	ret

0004f948 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4f948:	defffb04 	addi	sp,sp,-20
   4f94c:	df000415 	stw	fp,16(sp)
   4f950:	df000404 	addi	fp,sp,16
   4f954:	e13ffe15 	stw	r4,-8(fp)
   4f958:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4f95c:	e0bfff17 	ldw	r2,-4(fp)
   4f960:	10840070 	cmpltui	r2,r2,4097
   4f964:	1000021e 	bne	r2,zero,4f970 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4f968:	00840004 	movi	r2,4096
   4f96c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4f970:	e0fffe17 	ldw	r3,-8(fp)
   4f974:	e0bfff17 	ldw	r2,-4(fp)
   4f978:	1885883a 	add	r2,r3,r2
   4f97c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4f980:	e0bffe17 	ldw	r2,-8(fp)
   4f984:	e0bffd15 	stw	r2,-12(fp)
   4f988:	00000506 	br	4f9a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4f98c:	e0bffd17 	ldw	r2,-12(fp)
   4f990:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4f994:	e0bffd17 	ldw	r2,-12(fp)
   4f998:	10800804 	addi	r2,r2,32
   4f99c:	e0bffd15 	stw	r2,-12(fp)
   4f9a0:	e0fffd17 	ldw	r3,-12(fp)
   4f9a4:	e0bffc17 	ldw	r2,-16(fp)
   4f9a8:	18bff836 	bltu	r3,r2,4f98c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4f9ac:	e0bffe17 	ldw	r2,-8(fp)
   4f9b0:	108007cc 	andi	r2,r2,31
   4f9b4:	1005003a 	cmpeq	r2,r2,zero
   4f9b8:	1000021e 	bne	r2,zero,4f9c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4f9bc:	e0bffd17 	ldw	r2,-12(fp)
   4f9c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4f9c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4f9c8:	e037883a 	mov	sp,fp
   4f9cc:	df000017 	ldw	fp,0(sp)
   4f9d0:	dec00104 	addi	sp,sp,4
   4f9d4:	f800283a 	ret

0004f9d8 <atexit>:
   4f9d8:	200b883a 	mov	r5,r4
   4f9dc:	000d883a 	mov	r6,zero
   4f9e0:	0009883a 	mov	r4,zero
   4f9e4:	000f883a 	mov	r7,zero
   4f9e8:	004fa981 	jmpi	4fa98 <__register_exitproc>

0004f9ec <exit>:
   4f9ec:	defffe04 	addi	sp,sp,-8
   4f9f0:	000b883a 	mov	r5,zero
   4f9f4:	dc000015 	stw	r16,0(sp)
   4f9f8:	dfc00115 	stw	ra,4(sp)
   4f9fc:	2021883a 	mov	r16,r4
   4fa00:	004fbd00 	call	4fbd0 <__call_exitprocs>
   4fa04:	00800174 	movhi	r2,5
   4fa08:	10874504 	addi	r2,r2,7444
   4fa0c:	11000017 	ldw	r4,0(r2)
   4fa10:	20800f17 	ldw	r2,60(r4)
   4fa14:	10000126 	beq	r2,zero,4fa1c <exit+0x30>
   4fa18:	103ee83a 	callr	r2
   4fa1c:	8009883a 	mov	r4,r16
   4fa20:	004fdc00 	call	4fdc0 <_exit>

0004fa24 <memcmp>:
   4fa24:	00c000c4 	movi	r3,3
   4fa28:	1980032e 	bgeu	r3,r6,4fa38 <memcmp+0x14>
   4fa2c:	2144b03a 	or	r2,r4,r5
   4fa30:	10c4703a 	and	r2,r2,r3
   4fa34:	10000f26 	beq	r2,zero,4fa74 <memcmp+0x50>
   4fa38:	31ffffc4 	addi	r7,r6,-1
   4fa3c:	3000061e 	bne	r6,zero,4fa58 <memcmp+0x34>
   4fa40:	00000a06 	br	4fa6c <memcmp+0x48>
   4fa44:	39ffffc4 	addi	r7,r7,-1
   4fa48:	00bfffc4 	movi	r2,-1
   4fa4c:	21000044 	addi	r4,r4,1
   4fa50:	29400044 	addi	r5,r5,1
   4fa54:	38800526 	beq	r7,r2,4fa6c <memcmp+0x48>
   4fa58:	20c00003 	ldbu	r3,0(r4)
   4fa5c:	28800003 	ldbu	r2,0(r5)
   4fa60:	18bff826 	beq	r3,r2,4fa44 <memcmp+0x20>
   4fa64:	1885c83a 	sub	r2,r3,r2
   4fa68:	f800283a 	ret
   4fa6c:	0005883a 	mov	r2,zero
   4fa70:	f800283a 	ret
   4fa74:	180f883a 	mov	r7,r3
   4fa78:	20c00017 	ldw	r3,0(r4)
   4fa7c:	28800017 	ldw	r2,0(r5)
   4fa80:	18bfed1e 	bne	r3,r2,4fa38 <memcmp+0x14>
   4fa84:	31bfff04 	addi	r6,r6,-4
   4fa88:	21000104 	addi	r4,r4,4
   4fa8c:	29400104 	addi	r5,r5,4
   4fa90:	39bff936 	bltu	r7,r6,4fa78 <memcmp+0x54>
   4fa94:	003fe806 	br	4fa38 <memcmp+0x14>

0004fa98 <__register_exitproc>:
   4fa98:	defffa04 	addi	sp,sp,-24
   4fa9c:	00800174 	movhi	r2,5
   4faa0:	10874504 	addi	r2,r2,7444
   4faa4:	dc000015 	stw	r16,0(sp)
   4faa8:	14000017 	ldw	r16,0(r2)
   4faac:	dd000415 	stw	r20,16(sp)
   4fab0:	2829883a 	mov	r20,r5
   4fab4:	81405217 	ldw	r5,328(r16)
   4fab8:	dcc00315 	stw	r19,12(sp)
   4fabc:	dc800215 	stw	r18,8(sp)
   4fac0:	dc400115 	stw	r17,4(sp)
   4fac4:	dfc00515 	stw	ra,20(sp)
   4fac8:	2023883a 	mov	r17,r4
   4facc:	3027883a 	mov	r19,r6
   4fad0:	3825883a 	mov	r18,r7
   4fad4:	28002526 	beq	r5,zero,4fb6c <__register_exitproc+0xd4>
   4fad8:	29000117 	ldw	r4,4(r5)
   4fadc:	008007c4 	movi	r2,31
   4fae0:	11002716 	blt	r2,r4,4fb80 <__register_exitproc+0xe8>
   4fae4:	8800101e 	bne	r17,zero,4fb28 <__register_exitproc+0x90>
   4fae8:	2105883a 	add	r2,r4,r4
   4faec:	1085883a 	add	r2,r2,r2
   4faf0:	20c00044 	addi	r3,r4,1
   4faf4:	1145883a 	add	r2,r2,r5
   4faf8:	0009883a 	mov	r4,zero
   4fafc:	15000215 	stw	r20,8(r2)
   4fb00:	28c00115 	stw	r3,4(r5)
   4fb04:	2005883a 	mov	r2,r4
   4fb08:	dfc00517 	ldw	ra,20(sp)
   4fb0c:	dd000417 	ldw	r20,16(sp)
   4fb10:	dcc00317 	ldw	r19,12(sp)
   4fb14:	dc800217 	ldw	r18,8(sp)
   4fb18:	dc400117 	ldw	r17,4(sp)
   4fb1c:	dc000017 	ldw	r16,0(sp)
   4fb20:	dec00604 	addi	sp,sp,24
   4fb24:	f800283a 	ret
   4fb28:	29802204 	addi	r6,r5,136
   4fb2c:	00800044 	movi	r2,1
   4fb30:	110e983a 	sll	r7,r2,r4
   4fb34:	30c04017 	ldw	r3,256(r6)
   4fb38:	2105883a 	add	r2,r4,r4
   4fb3c:	1085883a 	add	r2,r2,r2
   4fb40:	1185883a 	add	r2,r2,r6
   4fb44:	19c6b03a 	or	r3,r3,r7
   4fb48:	14802015 	stw	r18,128(r2)
   4fb4c:	14c00015 	stw	r19,0(r2)
   4fb50:	00800084 	movi	r2,2
   4fb54:	30c04015 	stw	r3,256(r6)
   4fb58:	88bfe31e 	bne	r17,r2,4fae8 <__register_exitproc+0x50>
   4fb5c:	30804117 	ldw	r2,260(r6)
   4fb60:	11c4b03a 	or	r2,r2,r7
   4fb64:	30804115 	stw	r2,260(r6)
   4fb68:	003fdf06 	br	4fae8 <__register_exitproc+0x50>
   4fb6c:	00800174 	movhi	r2,5
   4fb70:	10954c04 	addi	r2,r2,21808
   4fb74:	100b883a 	mov	r5,r2
   4fb78:	80805215 	stw	r2,328(r16)
   4fb7c:	003fd606 	br	4fad8 <__register_exitproc+0x40>
   4fb80:	00800034 	movhi	r2,0
   4fb84:	10800004 	addi	r2,r2,0
   4fb88:	1000021e 	bne	r2,zero,4fb94 <__register_exitproc+0xfc>
   4fb8c:	013fffc4 	movi	r4,-1
   4fb90:	003fdc06 	br	4fb04 <__register_exitproc+0x6c>
   4fb94:	01006404 	movi	r4,400
   4fb98:	103ee83a 	callr	r2
   4fb9c:	1007883a 	mov	r3,r2
   4fba0:	103ffa26 	beq	r2,zero,4fb8c <__register_exitproc+0xf4>
   4fba4:	80805217 	ldw	r2,328(r16)
   4fba8:	180b883a 	mov	r5,r3
   4fbac:	18000115 	stw	zero,4(r3)
   4fbb0:	18800015 	stw	r2,0(r3)
   4fbb4:	80c05215 	stw	r3,328(r16)
   4fbb8:	18006215 	stw	zero,392(r3)
   4fbbc:	18006315 	stw	zero,396(r3)
   4fbc0:	0009883a 	mov	r4,zero
   4fbc4:	883fc826 	beq	r17,zero,4fae8 <__register_exitproc+0x50>
   4fbc8:	003fd706 	br	4fb28 <__register_exitproc+0x90>

0004fbcc <register_fini>:
   4fbcc:	f800283a 	ret

0004fbd0 <__call_exitprocs>:
   4fbd0:	00800174 	movhi	r2,5
   4fbd4:	10874504 	addi	r2,r2,7444
   4fbd8:	10800017 	ldw	r2,0(r2)
   4fbdc:	defff304 	addi	sp,sp,-52
   4fbe0:	df000b15 	stw	fp,44(sp)
   4fbe4:	d8800115 	stw	r2,4(sp)
   4fbe8:	00800034 	movhi	r2,0
   4fbec:	10800004 	addi	r2,r2,0
   4fbf0:	1005003a 	cmpeq	r2,r2,zero
   4fbf4:	d8800215 	stw	r2,8(sp)
   4fbf8:	d8800117 	ldw	r2,4(sp)
   4fbfc:	dd400815 	stw	r21,32(sp)
   4fc00:	dd000715 	stw	r20,28(sp)
   4fc04:	10805204 	addi	r2,r2,328
   4fc08:	dfc00c15 	stw	ra,48(sp)
   4fc0c:	ddc00a15 	stw	r23,40(sp)
   4fc10:	dd800915 	stw	r22,36(sp)
   4fc14:	dcc00615 	stw	r19,24(sp)
   4fc18:	dc800515 	stw	r18,20(sp)
   4fc1c:	dc400415 	stw	r17,16(sp)
   4fc20:	dc000315 	stw	r16,12(sp)
   4fc24:	282b883a 	mov	r21,r5
   4fc28:	2039883a 	mov	fp,r4
   4fc2c:	d8800015 	stw	r2,0(sp)
   4fc30:	2829003a 	cmpeq	r20,r5,zero
   4fc34:	d8800117 	ldw	r2,4(sp)
   4fc38:	14405217 	ldw	r17,328(r2)
   4fc3c:	88001026 	beq	r17,zero,4fc80 <__call_exitprocs+0xb0>
   4fc40:	ddc00017 	ldw	r23,0(sp)
   4fc44:	88800117 	ldw	r2,4(r17)
   4fc48:	8c802204 	addi	r18,r17,136
   4fc4c:	143fffc4 	addi	r16,r2,-1
   4fc50:	80000916 	blt	r16,zero,4fc78 <__call_exitprocs+0xa8>
   4fc54:	05bfffc4 	movi	r22,-1
   4fc58:	a000151e 	bne	r20,zero,4fcb0 <__call_exitprocs+0xe0>
   4fc5c:	8409883a 	add	r4,r16,r16
   4fc60:	2105883a 	add	r2,r4,r4
   4fc64:	1485883a 	add	r2,r2,r18
   4fc68:	10c02017 	ldw	r3,128(r2)
   4fc6c:	a8c01126 	beq	r21,r3,4fcb4 <__call_exitprocs+0xe4>
   4fc70:	843fffc4 	addi	r16,r16,-1
   4fc74:	85bff81e 	bne	r16,r22,4fc58 <__call_exitprocs+0x88>
   4fc78:	d8800217 	ldw	r2,8(sp)
   4fc7c:	10003126 	beq	r2,zero,4fd44 <__call_exitprocs+0x174>
   4fc80:	dfc00c17 	ldw	ra,48(sp)
   4fc84:	df000b17 	ldw	fp,44(sp)
   4fc88:	ddc00a17 	ldw	r23,40(sp)
   4fc8c:	dd800917 	ldw	r22,36(sp)
   4fc90:	dd400817 	ldw	r21,32(sp)
   4fc94:	dd000717 	ldw	r20,28(sp)
   4fc98:	dcc00617 	ldw	r19,24(sp)
   4fc9c:	dc800517 	ldw	r18,20(sp)
   4fca0:	dc400417 	ldw	r17,16(sp)
   4fca4:	dc000317 	ldw	r16,12(sp)
   4fca8:	dec00d04 	addi	sp,sp,52
   4fcac:	f800283a 	ret
   4fcb0:	8409883a 	add	r4,r16,r16
   4fcb4:	88c00117 	ldw	r3,4(r17)
   4fcb8:	2105883a 	add	r2,r4,r4
   4fcbc:	1445883a 	add	r2,r2,r17
   4fcc0:	18ffffc4 	addi	r3,r3,-1
   4fcc4:	11800217 	ldw	r6,8(r2)
   4fcc8:	1c001526 	beq	r3,r16,4fd20 <__call_exitprocs+0x150>
   4fccc:	10000215 	stw	zero,8(r2)
   4fcd0:	303fe726 	beq	r6,zero,4fc70 <__call_exitprocs+0xa0>
   4fcd4:	00c00044 	movi	r3,1
   4fcd8:	1c06983a 	sll	r3,r3,r16
   4fcdc:	90804017 	ldw	r2,256(r18)
   4fce0:	8cc00117 	ldw	r19,4(r17)
   4fce4:	1884703a 	and	r2,r3,r2
   4fce8:	10001426 	beq	r2,zero,4fd3c <__call_exitprocs+0x16c>
   4fcec:	90804117 	ldw	r2,260(r18)
   4fcf0:	1884703a 	and	r2,r3,r2
   4fcf4:	10000c1e 	bne	r2,zero,4fd28 <__call_exitprocs+0x158>
   4fcf8:	2105883a 	add	r2,r4,r4
   4fcfc:	1485883a 	add	r2,r2,r18
   4fd00:	11400017 	ldw	r5,0(r2)
   4fd04:	e009883a 	mov	r4,fp
   4fd08:	303ee83a 	callr	r6
   4fd0c:	88800117 	ldw	r2,4(r17)
   4fd10:	98bfc81e 	bne	r19,r2,4fc34 <__call_exitprocs+0x64>
   4fd14:	b8800017 	ldw	r2,0(r23)
   4fd18:	147fd526 	beq	r2,r17,4fc70 <__call_exitprocs+0xa0>
   4fd1c:	003fc506 	br	4fc34 <__call_exitprocs+0x64>
   4fd20:	8c000115 	stw	r16,4(r17)
   4fd24:	003fea06 	br	4fcd0 <__call_exitprocs+0x100>
   4fd28:	2105883a 	add	r2,r4,r4
   4fd2c:	1485883a 	add	r2,r2,r18
   4fd30:	11000017 	ldw	r4,0(r2)
   4fd34:	303ee83a 	callr	r6
   4fd38:	003ff406 	br	4fd0c <__call_exitprocs+0x13c>
   4fd3c:	303ee83a 	callr	r6
   4fd40:	003ff206 	br	4fd0c <__call_exitprocs+0x13c>
   4fd44:	88800117 	ldw	r2,4(r17)
   4fd48:	1000081e 	bne	r2,zero,4fd6c <__call_exitprocs+0x19c>
   4fd4c:	89000017 	ldw	r4,0(r17)
   4fd50:	20000726 	beq	r4,zero,4fd70 <__call_exitprocs+0x1a0>
   4fd54:	b9000015 	stw	r4,0(r23)
   4fd58:	8809883a 	mov	r4,r17
   4fd5c:	00000000 	call	0 <__reset-0x40000>
   4fd60:	bc400017 	ldw	r17,0(r23)
   4fd64:	883fb71e 	bne	r17,zero,4fc44 <__call_exitprocs+0x74>
   4fd68:	003fc506 	br	4fc80 <__call_exitprocs+0xb0>
   4fd6c:	89000017 	ldw	r4,0(r17)
   4fd70:	882f883a 	mov	r23,r17
   4fd74:	2023883a 	mov	r17,r4
   4fd78:	883fb21e 	bne	r17,zero,4fc44 <__call_exitprocs+0x74>
   4fd7c:	003fc006 	br	4fc80 <__call_exitprocs+0xb0>

0004fd80 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   4fd80:	defffd04 	addi	sp,sp,-12
   4fd84:	df000215 	stw	fp,8(sp)
   4fd88:	df000204 	addi	fp,sp,8
   4fd8c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4fd90:	e0bfff17 	ldw	r2,-4(fp)
   4fd94:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4fd98:	e0bffe17 	ldw	r2,-8(fp)
   4fd9c:	1005003a 	cmpeq	r2,r2,zero
   4fda0:	1000021e 	bne	r2,zero,4fdac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4fda4:	002af070 	cmpltui	zero,zero,43969
   4fda8:	00000106 	br	4fdb0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4fdac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4fdb0:	e037883a 	mov	sp,fp
   4fdb4:	df000017 	ldw	fp,0(sp)
   4fdb8:	dec00104 	addi	sp,sp,4
   4fdbc:	f800283a 	ret

0004fdc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4fdc0:	defffd04 	addi	sp,sp,-12
   4fdc4:	dfc00215 	stw	ra,8(sp)
   4fdc8:	df000115 	stw	fp,4(sp)
   4fdcc:	df000104 	addi	fp,sp,4
   4fdd0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   4fdd4:	e13fff17 	ldw	r4,-4(fp)
   4fdd8:	004fd800 	call	4fd80 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4fddc:	003fff06 	br	4fddc <_exit+0x1c>
   4fde0:	0004fbcc 	andi	zero,zero,5103
