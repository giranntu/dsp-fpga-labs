
skeleton.elf:     file format elf32-littlenios2
skeleton.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0001012c memsz 0x0001012c flags r-x
    LOAD off    0x0001114c vaddr 0x0005014c paddr 0x00051d20 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags rw-
    LOAD off    0x000138f4 vaddr 0x000538f4 paddr 0x000538f4 align 2**12
         filesz 0x00000000 memsz 0x00001988 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fbf8  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a0  0004fdac  0004fdac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd4  0005014c  00051d20  0001114c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001988  000538f4  000538f4  000138f4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  00012d20  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e98  00000000  00000000  00012d70  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c81  00000000  00000000  00013c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027bb3  00000000  00000000  00015889  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008fb9  00000000  00000000  0003d43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000166be  00000000  00000000  000463f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022a8  00000000  00000000  0005cab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022ce  00000000  00000000  0005ed5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d23d  00000000  00000000  0006102a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006e268  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a38  00000000  00000000  0006e298  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072cfd  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00072d00  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072d0a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072d0b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072d0c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072d10  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00072d14  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00072d18  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00072d21  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00072d2a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00072d33  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000022  00000000  00000000  00072d3b  2**0
                  CONTENTS, READONLY
 29 .jdi          00004b68  00000000  00000000  00072d5d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0011026c  00000000  00000000  000778c5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
0004fdac l    d  .rodata	00000000 .rodata
0005014c l    d  .rwdata	00000000 .rwdata
000538f4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 aic23.c
00050178 l     O .rwdata	0000002c aic23_default_config
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 i2s_control.c
00000000 l    df *ABS*	00000000 main.c
00041aa0 l     F .text	00000074 handle_switch0_interrupt
00041b14 l     F .text	00000074 handle_switch1_interrupt
00041b88 l     F .text	0000015c handle_key0_interrupt
00041ce4 l     F .text	0000005c handle_key1_interrupt
00041d40 l     F .text	0000004c handle_key2_interrupt
00041d8c l     F .text	0000005c handle_key3_interrupt
00041e58 l     F .text	00000164 handle_leftready_interrupt_test
00041fbc l     F .text	00000130 handle_rightready_interrupt_test
00000000 l    df *ABS*	00000000 spi_control.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 fp-bit.c
00042810 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00042dc8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000437f8 l     F .text	00000058 __sprint_r
0004fe76 l     O .rodata	00000010 blanks.3452
0004fe66 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0004585c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00047258 l     F .text	00000058 std
00047364 l     F .text	00000008 __fp_lock
0004736c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000501cc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00051cec l     O .rwdata	00000004 charset
0004feac l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004fff4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0004b4f8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004c9a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004ca00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004cb00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004cde0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004cec0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004d01c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004d128 l     F .text	000000dc alt_file_locked
0004d38c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0004d50c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00051d14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004d7a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00050b88 l     O .rwdata	00001060 jtag_uart
00051be8 l     O .rwdata	000000c4 uart
0004d8a0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004dae0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0004dd08 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0004e544 l     F .text	0000009c altera_avalon_uart_irq
0004e5e0 l     F .text	000000e0 altera_avalon_uart_rxirq
0004e6c0 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0004eaac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0004ecd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004ef80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004f610 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004fb94 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0004fd48 l     F .text	00000040 alt_sim_halt
00049014 g     F .text	00000094 _mprec_log10
00049100 g     F .text	00000088 __any_on
0004a80c g     F .text	00000070 _isatty_r
0004ffcc g     O .rodata	00000028 __mprec_tinytens
0004d07c g     F .text	0000006c alt_main
00040f1c g     F .text	00000064 AIC23_format
00040c20 g     F .text	00000068 AIC23_deemp
00043560 g     F .text	000000a0 _puts_r
00054fec g     O .bss	00000100 alt_irq
0004a87c g     F .text	00000078 _lseek_r
00040a14 g     F .text	00000068 AIC23_bypass
00051d20 g       *ABS*	00000000 __flash_rwdata_start
0004c018 g     F .text	00000088 __eqdf2
000501a4 g     O .rwdata	00000028 aic23_demo
0005527c g       *ABS*	00000000 __alt_heap_start
00051cc0 g     O .rwdata	00000004 key1_id
000434e8 g     F .text	00000044 printf
00051cb8 g     O .rwdata	00000004 switch1_id
0004a2d8 g     F .text	00000068 __sseek
000472c0 g     F .text	000000a4 __sinit
00047f98 g     F .text	00000084 _setlocale_r
000473c0 g     F .text	00000068 __sfmoreglue
0004d108 g     F .text	00000020 __malloc_unlock
00042334 g     F .text	00000174 spi_send
000539a8 g     O .bss	00000200 datatest
000405d4 g     F .text	00000064 AIC23_line_rim
00053ba8 g     O .bss	00000036 leftChannelData
00053940 g     O .bss	00000004 setFreqFlag
00048a90 g     F .text	000000e0 memmove
00041de8 g     F .text	0000002c unsigned2signed
000473b0 g     F .text	00000010 _cleanup
00043614 g     F .text	000000bc snprintf
000403d0 g     F .text	0000003c AIC_setFreq
00049188 g     F .text	000000bc _Balloc
00042ca8 g     F .text	00000094 __fixsfsi
00040200 g     F .text	000000ac AIC23_init
0004c128 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00051cb0 g     O .rwdata	00000004 right_on
00040000 g     F .entry	0000001c __reset
00040944 g     F .text	00000068 AIC23_sidetone_add
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004a798 g     F .text	00000074 _fstat_r
00053964 g     O .bss	00000004 errno
00042d90 g     F .text	00000038 __make_dp
000424f8 g     F .text	00000070 uart_sendInt16
00053970 g     O .bss	00000004 alt_argv
00059cac g       *ABS*	00000000 _gp
00040f80 g     F .text	00000068 AIC23_clkin
000429f4 g     F .text	00000070 __subsf3
000402ac g     F .text	00000030 AIC23_reset
00050a08 g     O .rwdata	00000180 alt_fd_list
00040448 g     F .text	00000064 AIC23_line_lrs
00041124 g     F .text	00000064 AIC23_clk_mode
0004f0a8 g     F .text	00000094 alt_find_dev
000489f0 g     F .text	000000a0 memcpy
00040760 g     F .text	00000060 AIC23_head_lhv
000473a4 g     F .text	0000000c _cleanup_r
0004c2c0 g     F .text	000000f8 __floatsidf
0004f6d4 g     F .text	00000078 alt_io_redirect
0004c238 g     F .text	00000088 __ltdf2
0004fdac g       *ABS*	00000000 __DTOR_END__
00043600 g     F .text	00000014 puts
00048f64 g     F .text	000000b0 __ratio
000404ac g     F .text	00000064 AIC23_line_lim
0004df20 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0004352c g     F .text	00000034 _printf_r
00042f04 g     F .text	00000008 __udivsi3
0004cd20 g     F .text	000000c0 isatty
000407c0 g     F .text	00000064 AIC23_head_rls
0004fedc g     O .rodata	000000c8 __mprec_tens
00047f74 g     F .text	00000008 __locale_charset
0004f910 g     F .text	00000090 alt_icache_flush
00053958 g     O .bss	00000004 __malloc_top_pad
00051ce8 g     O .rwdata	00000004 __mb_cur_max
00047f7c g     F .text	0000000c _localeconv_r
00049880 g     F .text	0000003c __i2b
00047958 g     F .text	0000049c __sfvwrite_r
0004a260 g     F .text	00000070 _sbrk_r
00041050 g     F .text	0000006c AIC23_setFreq
0004a8f4 g     F .text	00000078 _read_r
000505cc g     O .rwdata	0000000c __lc_ctype
00051cc4 g     O .rwdata	00000004 key2_id
00051d08 g     O .rwdata	00000004 alt_max_fd
0004c6a4 g     F .text	00000138 __unpack_d
0004a674 g     F .text	00000110 _fclose_r
00047224 g     F .text	00000034 fflush
0005395c g     O .bss	00000004 __malloc_max_sbrked_mem
0004cb60 g     F .text	000001c0 alt_irq_register
00051cd0 g     O .rwdata	00000004 rightready_id
00042d3c g     F .text	00000054 __extendsfdf2
00041e14 g     F .text	00000044 signed2unsigned
00040510 g     F .text	00000060 AIC23_line_liv
0004b988 g     F .text	00000074 __adddf3
00051cd8 g     O .rwdata	00000004 sampleFrequency
00048e44 g     F .text	00000120 __b2d
0005391c g     O .bss	00000004 convIndex
00054fb6 g     O .bss	00000036 DataBufferCopy
0004af48 g     F .text	000005b0 __umoddi3
0004cf2c g     F .text	000000f0 lseek
00051ce4 g     O .rwdata	00000004 _global_impure_ptr
00049bfc g     F .text	000005f4 _realloc_r
0005527c g       *ABS*	00000000 __bss_end
0004f518 g     F .text	000000f8 alt_iic_isr_register
0004f7e4 g     F .text	0000010c alt_tick
00041410 g     F .text	000000d4 I2S_send_left
0004a96c g     F .text	000005dc __udivdi3
0004ffa4 g     O .rodata	00000028 __mprec_bigtens
00049adc g     F .text	00000120 __s2b
0004c490 g     F .text	00000194 __floatunsidf
00048d64 g     F .text	00000060 __mcmp
0004e47c g     F .text	000000c8 altera_avalon_uart_init
00041188 g     F .text	00000030 AIC23_on
0004738c g     F .text	00000018 __fp_lock_all
0004f4d0 g     F .text	00000048 alt_ic_irq_enabled
00040ae8 g     F .text	0000006c AIC23_mic_mute
0004f74c g     F .text	00000098 alt_alarm_stop
00053968 g     O .bss	00000004 alt_irq_active
00041328 g     F .text	000000e8 I2S_collect_right
000400ec g     F .exceptions	000000c8 alt_irq_handler
000509e0 g     O .rwdata	00000028 alt_dev_null
0004310c g     F .text	000000c8 __unpack_f
0004ee88 g     F .text	00000044 alt_dcache_flush_all
00048c30 g     F .text	00000070 __hi0bits
0004c3b8 g     F .text	000000d8 __fixdfsi
00051d20 g       *ABS*	00000000 __ram_rwdata_end
00051d00 g     O .rwdata	00000008 alt_dev_list
00051cac g     O .rwdata	00000004 left_on
0004d688 g     F .text	00000120 write
00053bde g     O .bss	00000400 rx_buffer
00040638 g     F .text	00000060 AIC23_line_riv
000410bc g     F .text	00000068 AIC23_bosr
0005014c g       *ABS*	00000000 __ram_rodata_end
0004ca2c g     F .text	000000d4 fstat
0004123c g     F .text	000000ec I2S_collect_left
000499bc g     F .text	00000120 __pow5mult
0005394c g     O .bss	00000004 __nlocale_changed
00042f0c g     F .text	00000008 __umodsi3
00040c88 g     F .text	00000064 AIC23_adc_highpass
0005527c g       *ABS*	00000000 end
00042fac g     F .text	00000160 __pack_f
000414e4 g     F .text	000000d8 I2S_send_right
00053930 g     O .bss	00000004 leftBufferFull
0004eb0c g     F .text	000001c8 altera_avalon_uart_write
000538fc g     O .bss	00000004 key0
00053900 g     O .bss	00000004 key1
0004da20 g     F .text	000000c0 altera_avalon_jtag_uart_init
000426ac g     F .text	000000cc uart_SendTestBuff
0004fda8 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
0004e3dc g     F .text	00000058 altera_avalon_uart_write_fd
0004c624 g     F .text	00000080 __clzsi2
000436d0 g     F .text	000000b4 _snprintf_r
0004e434 g     F .text	00000048 altera_avalon_uart_close_fd
0004e144 g     F .text	00000240 altera_avalon_jtag_uart_write
000472b0 g     F .text	00000004 __sfp_lock_acquire
0004890c g     F .text	000000e4 memchr
00043850 g     F .text	00001eac ___vfprintf_internal_r
00047644 g     F .text	00000314 _free_r
0004fb98 g     F .text	000001b0 __call_exitprocs
00053fe0 g     O .bss	00000fa0 convResultBuffer
00040de0 g     F .text	00000068 AIC23_lr_swap
00040d78 g     F .text	00000068 AIC23_mode
00053950 g     O .bss	00000004 __mlocale_changed
0004032c g     F .text	000000a4 AIC23_demo
00051cf4 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000004c _start
00053924 g     O .bss	00000004 leftCount
00053978 g     O .bss	00000004 _alt_tick_rate
0004954c g     F .text	0000014c __lshift
0005397c g     O .bss	00000004 _alt_nticks
0004d3ec g     F .text	00000120 read
0004d83c g     F .text	00000064 alt_sys_init
00040d30 g     F .text	00000048 AIC23_power_off
0004fa60 g     F .text	00000134 __register_exitproc
00049698 g     F .text	000001e8 __multiply
0004ddb8 g     F .text	00000074 altera_avalon_jtag_uart_close
0005014c g       *ABS*	00000000 __ram_rwdata_start
0004fdac g       *ABS*	00000000 __ram_rodata_start
00053980 g     O .bss	00000028 __malloc_current_mallinfo
00053938 g     O .bss	00000004 uartStartRecvFlag
00049244 g     F .text	0000017c __d2b
00053928 g     O .bss	00000004 lefttestCount
00040fe8 g     F .text	00000068 AIC23_clkout
00040a7c g     F .text	0000006c AIC23_input
0004d8d8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00042778 g     F .text	00000098 uart_SendConvBuff
0004f25c g     F .text	000000b8 alt_get_fd
000420ec g     F .text	00000210 system_initialization
0004c7dc g     F .text	000000c8 __fpcmp_parts_d
0004a604 g     F .text	00000070 _close_r
000411b8 g     F .text	00000030 AIC23_off
00051cbc g     O .rwdata	00000004 key0_id
0004f9ec g     F .text	00000074 memcmp
0004d988 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0005527c g       *ABS*	00000000 __alt_stack_base
0004d9d0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00040b54 g     F .text	00000064 AIC23_mic_boost
00040e48 g     F .text	00000068 AIC23_lr_phase
00045720 g     F .text	0000013c __swsetup_r
0005390c g     O .bss	00000004 leftready
0004bdc0 g     F .text	00000258 __divdf3
00047428 g     F .text	000000f0 __sfp
00053934 g     O .bss	00000004 uartStartSendFlag
000490a8 g     F .text	00000058 __copybits
000505d8 g     O .rwdata	00000408 __malloc_av_
000472bc g     F .text	00000004 __sinit_lock_release
0004b9fc g     F .text	000003c4 __muldf3
0004a3bc g     F .text	00000060 __sread
00053948 g     O .bss	00000004 counter
0004fdf4 g     O .rodata	00000010 __thenan_sf
0004f13c g     F .text	00000120 alt_find_file
0004eecc g     F .text	000000b4 alt_dev_llist_insert
0004d0e8 g     F .text	00000020 __malloc_lock
0004d5cc g     F .text	000000bc sbrk
00040824 g     F .text	00000068 AIC23_head_rzc
00047028 g     F .text	000001fc _fflush_r
0004a550 g     F .text	000000b4 _calloc_r
000538f4 g       *ABS*	00000000 __bss_start
00048b70 g     F .text	00000098 memset
00051cd4 g     O .rwdata	00000004 uart_id
000422fc g     F .text	00000038 main
00051cb4 g     O .rwdata	00000004 switch0_id
00053974 g     O .bss	00000004 alt_envp
00053960 g     O .bss	00000004 __malloc_max_total_mem
0004d930 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00040698 g     F .text	00000064 AIC23_head_lrs
0004a2d0 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
0004a784 g     F .text	00000014 fclose
000550ec g     O .bss	00000190 _atexit0
00045a74 g     F .text	000015b4 _dtoa_r
000481cc g     F .text	00000740 _malloc_r
00051d0c g     O .rwdata	00000004 alt_errno
00047ebc g     F .text	000000b8 _fwalk
00042e44 g     F .text	00000060 __divsi3
00050000 g     O .rodata	00000014 __thenan_df
00047518 g     F .text	0000012c _malloc_trim_r
0004fdac g       *ABS*	00000000 __CTOR_END__
00042ac8 g     F .text	000001e0 __mulsf3
00051cc8 g     O .rwdata	00000004 key3_id
0004a41c g     F .text	000000bc strcmp
0004fdac g       *ABS*	00000000 __flash_rodata_start
0004fdac g       *ABS*	00000000 __DTOR_LIST__
00042568 g     F .text	000000b8 uart_sendFloat
00053908 g     O .bss	00000004 key3
000411e8 g     F .text	00000054 delay
0004c0a0 g     F .text	00000088 __nedf2
0004d808 g     F .text	00000034 alt_irq_init
0004d56c g     F .text	00000060 alt_release_fd
0004088c g     F .text	00000060 AIC23_head_rhv
000408ec g     F .text	00000058 AIC23_sidetone_disable
00050014 g     O .rodata	00000100 __clz_tab
00053954 g     O .bss	00000004 _PathLocale
000538f8 g     O .bss	00000004 switch1
0004f9a0 g     F .text	00000014 atexit
00040cec g     F .text	00000044 AIC23_power_on
0004a4d8 g     F .text	00000078 _write_r
0004801c g     F .text	0000001c setlocale
00051ccc g     O .rwdata	00000004 leftready_id
0005014c g     O .rwdata	0000002c aic23_config
00051ce0 g     O .rwdata	00000004 _impure_ptr
0005396c g     O .bss	00000004 alt_argc
00040bb8 g     F .text	00000068 AIC23_dac_mute
0004f044 g     F .text	00000064 _do_dtors
00053920 g     O .bss	00000002 RxHead
00040020 g       .exceptions	00000000 alt_irq_entry
00048dc4 g     F .text	00000080 __ulp
0004a1f0 g     F .text	00000040 __isinfd
00047374 g     F .text	00000018 __fp_unlock_all
00040570 g     F .text	00000064 AIC23_line_rls
000415f8 g     F .text	000004a8 fft
00051cf8 g     O .rwdata	00000008 alt_fs_list
000424a8 g     F .text	00000050 uart_sendByte
00040eb0 g     F .text	0000006c AIC23_input_len
00040020 g       *ABS*	00000000 __ram_exceptions_start
00047f88 g     F .text	00000010 localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00042620 g     F .text	0000008c uart_SendLeftBuff
000409ac g     F .text	00000068 AIC23_dac_select
000406fc g     F .text	00000064 AIC23_head_lzc
00051cdc g     O .rwdata	00000004 calBuffersize
0004f344 g     F .text	00000050 alt_ic_isr_register
00051d20 g       *ABS*	00000000 _edata
0004e384 g     F .text	00000058 altera_avalon_uart_read_fd
0005527c g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
0004de2c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00053904 g     O .bss	00000004 key2
00053918 g     O .bss	00000004 rightChannel
00053910 g     O .bss	00000004 rightready
0004f430 g     F .text	000000a0 alt_ic_irq_disable
0004a340 g     F .text	0000007c __swrite
00051cf0 g     O .rwdata	00000004 __malloc_trim_threshold
0004f8f0 g     F .text	00000020 altera_nios2_qsys_irq_init
0004f9b4 g     F .text	00000038 exit
00047df4 g     F .text	000000c8 _fwalk_reent
000493c0 g     F .text	0000018c __mdiff
00042ea4 g     F .text	00000060 __modsi3
000402dc g     F .text	00000050 AIC23_config
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00053944 g     O .bss	00000004 uart
000472b4 g     F .text	00000004 __sfp_lock_release
00053914 g     O .bss	00000004 leftChannel
0004e81c g     F .text	00000060 altera_avalon_uart_close
0004fd88 g     F .text	00000020 _exit
0004a230 g     F .text	00000030 __isnand
0004ed34 g     F .text	00000154 alt_alarm_start
00042f14 g     F .text	00000098 __muldi3
000415bc g     F .text	0000003c I2S_send_lr
00048038 g     F .text	00000194 __smakebuf_r
00043784 g     F .text	00000074 strlen
0004d204 g     F .text	00000188 open
0004c1b0 g     F .text	00000088 __gedf2
0004f314 g     F .text	00000030 alt_icache_flush_all
0005393c g     O .bss	00000004 sr
0004040c g     F .text	0000003c AIC23_read
00051d10 g     O .rwdata	00000004 alt_priority_mask
0004f394 g     F .text	0000009c alt_ic_irq_enable
000456fc g     F .text	00000024 __vfprintf_internal
0004e87c g     F .text	00000230 altera_avalon_uart_read
00054f80 g     O .bss	00000036 rightChannelData
0004b908 g     F .text	00000080 __subdf3
00048ca0 g     F .text	000000c4 __lo0bits
000538f4 g     O .bss	00000004 switch0
00051d18 g     O .rwdata	00000008 alt_alarm_list
0004efe0 g     F .text	00000064 _do_ctors
0004c8a4 g     F .text	000000fc close
00042a64 g     F .text	00000064 __addsf3
0004ce40 g     F .text	00000080 alt_load
000431d4 g     F .text	00000314 __pack_d
0005392c g     O .bss	00000004 rightCount
00000000  w      *UND*	00000000 free
000472b8 g     F .text	00000004 __sinit_lock_acquire
000498bc g     F .text	00000100 __multadd
00048c08 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00174 	movhi	r3,5
   40134:	18d3fb04 	addi	r3,r3,20460
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00174 	movhi	r3,5
   4014c:	18d3fb04 	addi	r3,r3,20460
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401d0:	d6a72b14 	ori	gp,gp,40108
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401d8:	108e3d14 	ori	r2,r2,14580

    movhi r3, %hi(__bss_end)
   401dc:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401e0:	18d49f14 	ori	r3,r3,21116

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	004ce400 	call	4ce40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	004d07c0 	call	4d07c <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <AIC23_init>:
//AIC Master Mode                                                           0130     0A00    0C00    0E5E   (0001->48k,0019->32k, 0023->44.1k, 001D->96k)
extern unsigned int aic23_demo[10];    // = {0x0017, 0x0017, 0x01f9, 0x01f9, 0x0012, 0x0000, 0x0000, 0x0042, 0x0001, 0x0001};;


// Initializes AIC to default
void AIC23_init(){
   40200:	defffd04 	addi	sp,sp,-12
   40204:	dfc00215 	stw	ra,8(sp)
   40208:	df000115 	stw	fp,4(sp)
   4020c:	df000104 	addi	fp,sp,4
	int i = 0;
   40210:	e03fff15 	stw	zero,-4(fp)
	for(i = 0; i < 11; i++){
   40214:	e03fff15 	stw	zero,-4(fp)
   40218:	00001c06 	br	4028c <AIC23_init+0x8c>
		spi_send(i, aic23_default_config[i]);
   4021c:	e13fff17 	ldw	r4,-4(fp)
   40220:	e0bfff17 	ldw	r2,-4(fp)
   40224:	00c00174 	movhi	r3,5
   40228:	18c05e04 	addi	r3,r3,376
   4022c:	1085883a 	add	r2,r2,r2
   40230:	1085883a 	add	r2,r2,r2
   40234:	10c5883a 	add	r2,r2,r3
   40238:	10800017 	ldw	r2,0(r2)
   4023c:	100b883a 	mov	r5,r2
   40240:	00423340 	call	42334 <spi_send>
		aic23_config[i] = aic23_default_config[i];
   40244:	e17fff17 	ldw	r5,-4(fp)
   40248:	e0bfff17 	ldw	r2,-4(fp)
   4024c:	00c00174 	movhi	r3,5
   40250:	18c05e04 	addi	r3,r3,376
   40254:	1085883a 	add	r2,r2,r2
   40258:	1085883a 	add	r2,r2,r2
   4025c:	10c5883a 	add	r2,r2,r3
   40260:	10800017 	ldw	r2,0(r2)
   40264:	1009883a 	mov	r4,r2
   40268:	00c00174 	movhi	r3,5
   4026c:	18c05304 	addi	r3,r3,332
   40270:	2945883a 	add	r2,r5,r5
   40274:	1085883a 	add	r2,r2,r2
   40278:	10c5883a 	add	r2,r2,r3
   4027c:	11000015 	stw	r4,0(r2)


// Initializes AIC to default
void AIC23_init(){
	int i = 0;
	for(i = 0; i < 11; i++){
   40280:	e0bfff17 	ldw	r2,-4(fp)
   40284:	10800044 	addi	r2,r2,1
   40288:	e0bfff15 	stw	r2,-4(fp)
   4028c:	e0bfff17 	ldw	r2,-4(fp)
   40290:	108002d0 	cmplti	r2,r2,11
   40294:	103fe11e 	bne	r2,zero,4021c <AIC23_init+0x1c>
		spi_send(i, aic23_default_config[i]);
		aic23_config[i] = aic23_default_config[i];
	}
}
   40298:	e037883a 	mov	sp,fp
   4029c:	dfc00117 	ldw	ra,4(sp)
   402a0:	df000017 	ldw	fp,0(sp)
   402a4:	dec00204 	addi	sp,sp,8
   402a8:	f800283a 	ret

000402ac <AIC23_reset>:

void AIC23_reset(){
   402ac:	defffe04 	addi	sp,sp,-8
   402b0:	dfc00115 	stw	ra,4(sp)
   402b4:	df000015 	stw	fp,0(sp)
   402b8:	d839883a 	mov	fp,sp
	spi_send(0x0F, 0x00);
   402bc:	010003c4 	movi	r4,15
   402c0:	000b883a 	mov	r5,zero
   402c4:	00423340 	call	42334 <spi_send>
}
   402c8:	e037883a 	mov	sp,fp
   402cc:	dfc00117 	ldw	ra,4(sp)
   402d0:	df000017 	ldw	fp,0(sp)
   402d4:	dec00204 	addi	sp,sp,8
   402d8:	f800283a 	ret

000402dc <AIC23_config>:

void AIC23_config(int address, int setting){
   402dc:	defffc04 	addi	sp,sp,-16
   402e0:	dfc00315 	stw	ra,12(sp)
   402e4:	df000215 	stw	fp,8(sp)
   402e8:	df000204 	addi	fp,sp,8
   402ec:	e13ffe15 	stw	r4,-8(fp)
   402f0:	e17fff15 	stw	r5,-4(fp)
	aic23_demo[address] = setting;
   402f4:	e0bffe17 	ldw	r2,-8(fp)
   402f8:	e13fff17 	ldw	r4,-4(fp)
   402fc:	00c00174 	movhi	r3,5
   40300:	18c06904 	addi	r3,r3,420
   40304:	1085883a 	add	r2,r2,r2
   40308:	1085883a 	add	r2,r2,r2
   4030c:	10c5883a 	add	r2,r2,r3
   40310:	11000015 	stw	r4,0(r2)
	AIC23_demo();
   40314:	004032c0 	call	4032c <AIC23_demo>
}
   40318:	e037883a 	mov	sp,fp
   4031c:	dfc00117 	ldw	ra,4(sp)
   40320:	df000017 	ldw	fp,0(sp)
   40324:	dec00204 	addi	sp,sp,8
   40328:	f800283a 	ret

0004032c <AIC23_demo>:

/*AIC configuration function: Update all control registers*/
void AIC23_demo(){
   4032c:	defffd04 	addi	sp,sp,-12
   40330:	dfc00215 	stw	ra,8(sp)
   40334:	df000115 	stw	fp,4(sp)
   40338:	df000104 	addi	fp,sp,4
	int i = 0;
   4033c:	e03fff15 	stw	zero,-4(fp)
	for(i = 0; i < 10; i++){
   40340:	e03fff15 	stw	zero,-4(fp)
   40344:	00001a06 	br	403b0 <AIC23_demo+0x84>
		spi_send(i, aic23_demo[i]);
   40348:	e13fff17 	ldw	r4,-4(fp)
   4034c:	e0bfff17 	ldw	r2,-4(fp)
   40350:	00c00174 	movhi	r3,5
   40354:	18c06904 	addi	r3,r3,420
   40358:	1085883a 	add	r2,r2,r2
   4035c:	1085883a 	add	r2,r2,r2
   40360:	10c5883a 	add	r2,r2,r3
   40364:	11400017 	ldw	r5,0(r2)
   40368:	00423340 	call	42334 <spi_send>
		aic23_config[i] = aic23_demo[i];
   4036c:	e17fff17 	ldw	r5,-4(fp)
   40370:	e0bfff17 	ldw	r2,-4(fp)
   40374:	00c00174 	movhi	r3,5
   40378:	18c06904 	addi	r3,r3,420
   4037c:	1085883a 	add	r2,r2,r2
   40380:	1085883a 	add	r2,r2,r2
   40384:	10c5883a 	add	r2,r2,r3
   40388:	11000017 	ldw	r4,0(r2)
   4038c:	00c00174 	movhi	r3,5
   40390:	18c05304 	addi	r3,r3,332
   40394:	2945883a 	add	r2,r5,r5
   40398:	1085883a 	add	r2,r2,r2
   4039c:	10c5883a 	add	r2,r2,r3
   403a0:	11000015 	stw	r4,0(r2)
}

/*AIC configuration function: Update all control registers*/
void AIC23_demo(){
	int i = 0;
	for(i = 0; i < 10; i++){
   403a4:	e0bfff17 	ldw	r2,-4(fp)
   403a8:	10800044 	addi	r2,r2,1
   403ac:	e0bfff15 	stw	r2,-4(fp)
   403b0:	e0bfff17 	ldw	r2,-4(fp)
   403b4:	10800290 	cmplti	r2,r2,10
   403b8:	103fe31e 	bne	r2,zero,40348 <AIC23_demo+0x1c>
		spi_send(i, aic23_demo[i]);
		aic23_config[i] = aic23_demo[i];
	}
}
   403bc:	e037883a 	mov	sp,fp
   403c0:	dfc00117 	ldw	ra,4(sp)
   403c4:	df000017 	ldw	fp,0(sp)
   403c8:	dec00204 	addi	sp,sp,8
   403cc:	f800283a 	ret

000403d0 <AIC_setFreq>:



void AIC_setFreq(int sampleRate){
   403d0:	defffd04 	addi	sp,sp,-12
   403d4:	dfc00215 	stw	ra,8(sp)
   403d8:	df000115 	stw	fp,4(sp)
   403dc:	df000104 	addi	fp,sp,4
   403e0:	e13fff15 	stw	r4,-4(fp)
	aic23_demo[8] = sampleRate;
   403e4:	e0ffff17 	ldw	r3,-4(fp)
   403e8:	00800174 	movhi	r2,5
   403ec:	10806904 	addi	r2,r2,420
   403f0:	10c00815 	stw	r3,32(r2)
	AIC23_demo();
   403f4:	004032c0 	call	4032c <AIC23_demo>
}
   403f8:	e037883a 	mov	sp,fp
   403fc:	dfc00117 	ldw	ra,4(sp)
   40400:	df000017 	ldw	fp,0(sp)
   40404:	dec00204 	addi	sp,sp,8
   40408:	f800283a 	ret

0004040c <AIC23_read>:
	POWER_DOWN
	DIGITAL_AUDIO_INTERFACE
	SAMPLE_RATE
	DIGITAL_INTERFACE_ACTIVATION
 */
unsigned int AIC23_read(unsigned char address){
   4040c:	defffe04 	addi	sp,sp,-8
   40410:	df000115 	stw	fp,4(sp)
   40414:	df000104 	addi	fp,sp,4
   40418:	e13fff05 	stb	r4,-4(fp)
	return aic23_config[address];
   4041c:	e0bfff03 	ldbu	r2,-4(fp)
   40420:	00c00174 	movhi	r3,5
   40424:	18c05304 	addi	r3,r3,332
   40428:	1085883a 	add	r2,r2,r2
   4042c:	1085883a 	add	r2,r2,r2
   40430:	10c5883a 	add	r2,r2,r3
   40434:	10800017 	ldw	r2,0(r2)
}
   40438:	e037883a 	mov	sp,fp
   4043c:	df000017 	ldw	fp,0(sp)
   40440:	dec00104 	addi	sp,sp,4
   40444:	f800283a 	ret

00040448 <AIC23_line_lrs>:
/* Left/right line simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_line_lrs(unsigned int simultaneous_update){
   40448:	defffd04 	addi	sp,sp,-12
   4044c:	dfc00215 	stw	ra,8(sp)
   40450:	df000115 	stw	fp,4(sp)
   40454:	df000104 	addi	fp,sp,4
   40458:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x00FF) | (simultaneous_update << 8);
   4045c:	00800174 	movhi	r2,5
   40460:	10805304 	addi	r2,r2,332
   40464:	10800017 	ldw	r2,0(r2)
   40468:	10c03fcc 	andi	r3,r2,255
   4046c:	e0bfff17 	ldw	r2,-4(fp)
   40470:	1004923a 	slli	r2,r2,8
   40474:	1886b03a 	or	r3,r3,r2
   40478:	00800174 	movhi	r2,5
   4047c:	10805304 	addi	r2,r2,332
   40480:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40484:	00800174 	movhi	r2,5
   40488:	10805304 	addi	r2,r2,332
   4048c:	11400017 	ldw	r5,0(r2)
   40490:	0009883a 	mov	r4,zero
   40494:	00423340 	call	42334 <spi_send>
}
   40498:	e037883a 	mov	sp,fp
   4049c:	dfc00117 	ldw	ra,4(sp)
   404a0:	df000017 	ldw	fp,0(sp)
   404a4:	dec00204 	addi	sp,sp,8
   404a8:	f800283a 	ret

000404ac <AIC23_line_lim>:
/* Left line input mute
   Valid inputs:
		NORMAL
		MUTED
*/
void AIC23_line_lim(unsigned int mute){
   404ac:	defffd04 	addi	sp,sp,-12
   404b0:	dfc00215 	stw	ra,8(sp)
   404b4:	df000115 	stw	fp,4(sp)
   404b8:	df000104 	addi	fp,sp,4
   404bc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x017F) | (mute << 7);
   404c0:	00800174 	movhi	r2,5
   404c4:	10805304 	addi	r2,r2,332
   404c8:	10800017 	ldw	r2,0(r2)
   404cc:	10c05fcc 	andi	r3,r2,383
   404d0:	e0bfff17 	ldw	r2,-4(fp)
   404d4:	100491fa 	slli	r2,r2,7
   404d8:	1886b03a 	or	r3,r3,r2
   404dc:	00800174 	movhi	r2,5
   404e0:	10805304 	addi	r2,r2,332
   404e4:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   404e8:	00800174 	movhi	r2,5
   404ec:	10805304 	addi	r2,r2,332
   404f0:	11400017 	ldw	r5,0(r2)
   404f4:	0009883a 	mov	r4,zero
   404f8:	00423340 	call	42334 <spi_send>
}
   404fc:	e037883a 	mov	sp,fp
   40500:	dfc00117 	ldw	ra,4(sp)
   40504:	df000017 	ldw	fp,0(sp)
   40508:	dec00204 	addi	sp,sp,8
   4050c:	f800283a 	ret

00040510 <AIC23_line_liv>:
/* Left line input volume control
   Valid inputs:
		0b10111 = 0dB default
		0b11111 = +12 dB down to 0b00000 = -34.5dB in 1.5dB steps
*/
void AIC23_line_liv(unsigned int volume){
   40510:	defffd04 	addi	sp,sp,-12
   40514:	dfc00215 	stw	ra,8(sp)
   40518:	df000115 	stw	fp,4(sp)
   4051c:	df000104 	addi	fp,sp,4
   40520:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x01E0) | (volume);
   40524:	00800174 	movhi	r2,5
   40528:	10805304 	addi	r2,r2,332
   4052c:	10800017 	ldw	r2,0(r2)
   40530:	10c0780c 	andi	r3,r2,480
   40534:	e0bfff17 	ldw	r2,-4(fp)
   40538:	1886b03a 	or	r3,r3,r2
   4053c:	00800174 	movhi	r2,5
   40540:	10805304 	addi	r2,r2,332
   40544:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40548:	00800174 	movhi	r2,5
   4054c:	10805304 	addi	r2,r2,332
   40550:	11400017 	ldw	r5,0(r2)
   40554:	0009883a 	mov	r4,zero
   40558:	00423340 	call	42334 <spi_send>
}
   4055c:	e037883a 	mov	sp,fp
   40560:	dfc00117 	ldw	ra,4(sp)
   40564:	df000017 	ldw	fp,0(sp)
   40568:	dec00204 	addi	sp,sp,8
   4056c:	f800283a 	ret

00040570 <AIC23_line_rls>:
/* Right/left line simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_line_rls(unsigned int simultaneous_update){
   40570:	defffd04 	addi	sp,sp,-12
   40574:	dfc00215 	stw	ra,8(sp)
   40578:	df000115 	stw	fp,4(sp)
   4057c:	df000104 	addi	fp,sp,4
   40580:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x00FF) | (simultaneous_update << 8);
   40584:	00800174 	movhi	r2,5
   40588:	10805304 	addi	r2,r2,332
   4058c:	10800117 	ldw	r2,4(r2)
   40590:	10c03fcc 	andi	r3,r2,255
   40594:	e0bfff17 	ldw	r2,-4(fp)
   40598:	1004923a 	slli	r2,r2,8
   4059c:	1886b03a 	or	r3,r3,r2
   405a0:	00800174 	movhi	r2,5
   405a4:	10805304 	addi	r2,r2,332
   405a8:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   405ac:	00800174 	movhi	r2,5
   405b0:	10805304 	addi	r2,r2,332
   405b4:	11400117 	ldw	r5,4(r2)
   405b8:	01000044 	movi	r4,1
   405bc:	00423340 	call	42334 <spi_send>
}
   405c0:	e037883a 	mov	sp,fp
   405c4:	dfc00117 	ldw	ra,4(sp)
   405c8:	df000017 	ldw	fp,0(sp)
   405cc:	dec00204 	addi	sp,sp,8
   405d0:	f800283a 	ret

000405d4 <AIC23_line_rim>:
/* Right line input mute
   Valid inputs:
		NORMAL
		MUTED
*/
void AIC23_line_rim(unsigned int mute){
   405d4:	defffd04 	addi	sp,sp,-12
   405d8:	dfc00215 	stw	ra,8(sp)
   405dc:	df000115 	stw	fp,4(sp)
   405e0:	df000104 	addi	fp,sp,4
   405e4:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x017F) | (mute << 7);
   405e8:	00800174 	movhi	r2,5
   405ec:	10805304 	addi	r2,r2,332
   405f0:	10800117 	ldw	r2,4(r2)
   405f4:	10c05fcc 	andi	r3,r2,383
   405f8:	e0bfff17 	ldw	r2,-4(fp)
   405fc:	100491fa 	slli	r2,r2,7
   40600:	1886b03a 	or	r3,r3,r2
   40604:	00800174 	movhi	r2,5
   40608:	10805304 	addi	r2,r2,332
   4060c:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   40610:	00800174 	movhi	r2,5
   40614:	10805304 	addi	r2,r2,332
   40618:	11400117 	ldw	r5,4(r2)
   4061c:	01000044 	movi	r4,1
   40620:	00423340 	call	42334 <spi_send>
}
   40624:	e037883a 	mov	sp,fp
   40628:	dfc00117 	ldw	ra,4(sp)
   4062c:	df000017 	ldw	fp,0(sp)
   40630:	dec00204 	addi	sp,sp,8
   40634:	f800283a 	ret

00040638 <AIC23_line_riv>:
/* Right line input volume control
   Valid inputs:
		0b10111 = 0dB default
		0b11111 = +12 dB down to 0b00000 = -34.5dB in 1.5dB steps
*/
void AIC23_line_riv(unsigned int volume){
   40638:	defffd04 	addi	sp,sp,-12
   4063c:	dfc00215 	stw	ra,8(sp)
   40640:	df000115 	stw	fp,4(sp)
   40644:	df000104 	addi	fp,sp,4
   40648:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x01E0) | (volume);
   4064c:	00800174 	movhi	r2,5
   40650:	10805304 	addi	r2,r2,332
   40654:	10800117 	ldw	r2,4(r2)
   40658:	10c0780c 	andi	r3,r2,480
   4065c:	e0bfff17 	ldw	r2,-4(fp)
   40660:	1886b03a 	or	r3,r3,r2
   40664:	00800174 	movhi	r2,5
   40668:	10805304 	addi	r2,r2,332
   4066c:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   40670:	00800174 	movhi	r2,5
   40674:	10805304 	addi	r2,r2,332
   40678:	11400117 	ldw	r5,4(r2)
   4067c:	01000044 	movi	r4,1
   40680:	00423340 	call	42334 <spi_send>
}
   40684:	e037883a 	mov	sp,fp
   40688:	dfc00117 	ldw	ra,4(sp)
   4068c:	df000017 	ldw	fp,0(sp)
   40690:	dec00204 	addi	sp,sp,8
   40694:	f800283a 	ret

00040698 <AIC23_head_lrs>:
/* Left/right headphone simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_head_lrs(unsigned int simultaneous_update){
   40698:	defffd04 	addi	sp,sp,-12
   4069c:	dfc00215 	stw	ra,8(sp)
   406a0:	df000115 	stw	fp,4(sp)
   406a4:	df000104 	addi	fp,sp,4
   406a8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x00FF) | (simultaneous_update << 8);
   406ac:	00800174 	movhi	r2,5
   406b0:	10805304 	addi	r2,r2,332
   406b4:	10800217 	ldw	r2,8(r2)
   406b8:	10c03fcc 	andi	r3,r2,255
   406bc:	e0bfff17 	ldw	r2,-4(fp)
   406c0:	1004923a 	slli	r2,r2,8
   406c4:	1886b03a 	or	r3,r3,r2
   406c8:	00800174 	movhi	r2,5
   406cc:	10805304 	addi	r2,r2,332
   406d0:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   406d4:	00800174 	movhi	r2,5
   406d8:	10805304 	addi	r2,r2,332
   406dc:	11400217 	ldw	r5,8(r2)
   406e0:	01000084 	movi	r4,2
   406e4:	00423340 	call	42334 <spi_send>
}
   406e8:	e037883a 	mov	sp,fp
   406ec:	dfc00117 	ldw	ra,4(sp)
   406f0:	df000017 	ldw	fp,0(sp)
   406f4:	dec00204 	addi	sp,sp,8
   406f8:	f800283a 	ret

000406fc <AIC23_head_lzc>:
/* Left Channel Zero-Cross Detect
   Valid inputs:
		ON
		OFF
*/
void AIC23_head_lzc(unsigned int zero){
   406fc:	defffd04 	addi	sp,sp,-12
   40700:	dfc00215 	stw	ra,8(sp)
   40704:	df000115 	stw	fp,4(sp)
   40708:	df000104 	addi	fp,sp,4
   4070c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x017F) | (zero << 7);
   40710:	00800174 	movhi	r2,5
   40714:	10805304 	addi	r2,r2,332
   40718:	10800217 	ldw	r2,8(r2)
   4071c:	10c05fcc 	andi	r3,r2,383
   40720:	e0bfff17 	ldw	r2,-4(fp)
   40724:	100491fa 	slli	r2,r2,7
   40728:	1886b03a 	or	r3,r3,r2
   4072c:	00800174 	movhi	r2,5
   40730:	10805304 	addi	r2,r2,332
   40734:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   40738:	00800174 	movhi	r2,5
   4073c:	10805304 	addi	r2,r2,332
   40740:	11400217 	ldw	r5,8(r2)
   40744:	01000084 	movi	r4,2
   40748:	00423340 	call	42334 <spi_send>
}
   4074c:	e037883a 	mov	sp,fp
   40750:	dfc00117 	ldw	ra,4(sp)
   40754:	df000017 	ldw	fp,0(sp)
   40758:	dec00204 	addi	sp,sp,8
   4075c:	f800283a 	ret

00040760 <AIC23_head_lhv>:
   Valid Inputs:
   	   0b1111001 = 0dB default
   	   0b1111111 = +6dB down to 0b0110000 = -73dB mute in 1dB increments
   	   Anything lower than -73dB is still mute. 79 steps in between max/min.
 */
void AIC23_head_lhv(unsigned int volume){
   40760:	defffd04 	addi	sp,sp,-12
   40764:	dfc00215 	stw	ra,8(sp)
   40768:	df000115 	stw	fp,4(sp)
   4076c:	df000104 	addi	fp,sp,4
   40770:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x0180) | volume;
   40774:	00800174 	movhi	r2,5
   40778:	10805304 	addi	r2,r2,332
   4077c:	10800217 	ldw	r2,8(r2)
   40780:	10c0600c 	andi	r3,r2,384
   40784:	e0bfff17 	ldw	r2,-4(fp)
   40788:	1886b03a 	or	r3,r3,r2
   4078c:	00800174 	movhi	r2,5
   40790:	10805304 	addi	r2,r2,332
   40794:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   40798:	00800174 	movhi	r2,5
   4079c:	10805304 	addi	r2,r2,332
   407a0:	11400217 	ldw	r5,8(r2)
   407a4:	01000084 	movi	r4,2
   407a8:	00423340 	call	42334 <spi_send>
}
   407ac:	e037883a 	mov	sp,fp
   407b0:	dfc00117 	ldw	ra,4(sp)
   407b4:	df000017 	ldw	fp,0(sp)
   407b8:	dec00204 	addi	sp,sp,8
   407bc:	f800283a 	ret

000407c0 <AIC23_head_rls>:
/* Right/left headphone simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_head_rls(unsigned int simultaneous_update){
   407c0:	defffd04 	addi	sp,sp,-12
   407c4:	dfc00215 	stw	ra,8(sp)
   407c8:	df000115 	stw	fp,4(sp)
   407cc:	df000104 	addi	fp,sp,4
   407d0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x00FF) | (simultaneous_update << 8);
   407d4:	00800174 	movhi	r2,5
   407d8:	10805304 	addi	r2,r2,332
   407dc:	10800317 	ldw	r2,12(r2)
   407e0:	10c03fcc 	andi	r3,r2,255
   407e4:	e0bfff17 	ldw	r2,-4(fp)
   407e8:	1004923a 	slli	r2,r2,8
   407ec:	1886b03a 	or	r3,r3,r2
   407f0:	00800174 	movhi	r2,5
   407f4:	10805304 	addi	r2,r2,332
   407f8:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   407fc:	00800174 	movhi	r2,5
   40800:	10805304 	addi	r2,r2,332
   40804:	11400317 	ldw	r5,12(r2)
   40808:	010000c4 	movi	r4,3
   4080c:	00423340 	call	42334 <spi_send>
}
   40810:	e037883a 	mov	sp,fp
   40814:	dfc00117 	ldw	ra,4(sp)
   40818:	df000017 	ldw	fp,0(sp)
   4081c:	dec00204 	addi	sp,sp,8
   40820:	f800283a 	ret

00040824 <AIC23_head_rzc>:
/* Right Channel Zero-Cross Detect
   Valid inputs:
		ON
		OFF
*/
void AIC23_head_rzc(unsigned int zero){
   40824:	defffd04 	addi	sp,sp,-12
   40828:	dfc00215 	stw	ra,8(sp)
   4082c:	df000115 	stw	fp,4(sp)
   40830:	df000104 	addi	fp,sp,4
   40834:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x017F) | ((zero & 0x01) << 7);
   40838:	00800174 	movhi	r2,5
   4083c:	10805304 	addi	r2,r2,332
   40840:	10800317 	ldw	r2,12(r2)
   40844:	10c05fcc 	andi	r3,r2,383
   40848:	e0bfff17 	ldw	r2,-4(fp)
   4084c:	1080004c 	andi	r2,r2,1
   40850:	100491fa 	slli	r2,r2,7
   40854:	1886b03a 	or	r3,r3,r2
   40858:	00800174 	movhi	r2,5
   4085c:	10805304 	addi	r2,r2,332
   40860:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   40864:	00800174 	movhi	r2,5
   40868:	10805304 	addi	r2,r2,332
   4086c:	11400317 	ldw	r5,12(r2)
   40870:	010000c4 	movi	r4,3
   40874:	00423340 	call	42334 <spi_send>
}
   40878:	e037883a 	mov	sp,fp
   4087c:	dfc00117 	ldw	ra,4(sp)
   40880:	df000017 	ldw	fp,0(sp)
   40884:	dec00204 	addi	sp,sp,8
   40888:	f800283a 	ret

0004088c <AIC23_head_rhv>:
   Valid Inputs:
   	   0b1111001 = 0dB default
   	   0b1111111 = +6dB down to 0b0110000 = -73dB mute in 1dB increments
   	   Anything lower than -73dB is still mute. 79 steps in between max/min.
 */
void AIC23_head_rhv(unsigned int volume){
   4088c:	defffd04 	addi	sp,sp,-12
   40890:	dfc00215 	stw	ra,8(sp)
   40894:	df000115 	stw	fp,4(sp)
   40898:	df000104 	addi	fp,sp,4
   4089c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x0180) | volume;
   408a0:	00800174 	movhi	r2,5
   408a4:	10805304 	addi	r2,r2,332
   408a8:	10800317 	ldw	r2,12(r2)
   408ac:	10c0600c 	andi	r3,r2,384
   408b0:	e0bfff17 	ldw	r2,-4(fp)
   408b4:	1886b03a 	or	r3,r3,r2
   408b8:	00800174 	movhi	r2,5
   408bc:	10805304 	addi	r2,r2,332
   408c0:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   408c4:	00800174 	movhi	r2,5
   408c8:	10805304 	addi	r2,r2,332
   408cc:	11400317 	ldw	r5,12(r2)
   408d0:	010000c4 	movi	r4,3
   408d4:	00423340 	call	42334 <spi_send>
}
   408d8:	e037883a 	mov	sp,fp
   408dc:	dfc00117 	ldw	ra,4(sp)
   408e0:	df000017 	ldw	fp,0(sp)
   408e4:	dec00204 	addi	sp,sp,8
   408e8:	f800283a 	ret

000408ec <AIC23_sidetone_disable>:
//
// 					Analog Audio Path Control
//
/////////////////////////////////////////////////////////////////

void AIC23_sidetone_disable(unsigned int sidetone){
   408ec:	defffd04 	addi	sp,sp,-12
   408f0:	dfc00215 	stw	ra,8(sp)
   408f4:	df000115 	stw	fp,4(sp)
   408f8:	df000104 	addi	fp,sp,4
   408fc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = aic23_config[4] & 0x01DF;
   40900:	00800174 	movhi	r2,5
   40904:	10805304 	addi	r2,r2,332
   40908:	10800417 	ldw	r2,16(r2)
   4090c:	10c077cc 	andi	r3,r2,479
   40910:	00800174 	movhi	r2,5
   40914:	10805304 	addi	r2,r2,332
   40918:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   4091c:	00800174 	movhi	r2,5
   40920:	10805304 	addi	r2,r2,332
   40924:	11400417 	ldw	r5,16(r2)
   40928:	01000104 	movi	r4,4
   4092c:	00423340 	call	42334 <spi_send>
}
   40930:	e037883a 	mov	sp,fp
   40934:	dfc00117 	ldw	ra,4(sp)
   40938:	df000017 	ldw	fp,0(sp)
   4093c:	dec00204 	addi	sp,sp,8
   40940:	f800283a 	ret

00040944 <AIC23_sidetone_add>:

void AIC23_sidetone_add(unsigned int add){
   40944:	defffd04 	addi	sp,sp,-12
   40948:	dfc00215 	stw	ra,8(sp)
   4094c:	df000115 	stw	fp,4(sp)
   40950:	df000104 	addi	fp,sp,4
   40954:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1F) | ((add & 0x0F) << 5);
   40958:	00800174 	movhi	r2,5
   4095c:	10805304 	addi	r2,r2,332
   40960:	10800417 	ldw	r2,16(r2)
   40964:	10c007cc 	andi	r3,r2,31
   40968:	e0bfff17 	ldw	r2,-4(fp)
   4096c:	108003cc 	andi	r2,r2,15
   40970:	1004917a 	slli	r2,r2,5
   40974:	1886b03a 	or	r3,r3,r2
   40978:	00800174 	movhi	r2,5
   4097c:	10805304 	addi	r2,r2,332
   40980:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40984:	00800174 	movhi	r2,5
   40988:	10805304 	addi	r2,r2,332
   4098c:	11400417 	ldw	r5,16(r2)
   40990:	01000104 	movi	r4,4
   40994:	00423340 	call	42334 <spi_send>
}
   40998:	e037883a 	mov	sp,fp
   4099c:	dfc00117 	ldw	ra,4(sp)
   409a0:	df000017 	ldw	fp,0(sp)
   409a4:	dec00204 	addi	sp,sp,8
   409a8:	f800283a 	ret

000409ac <AIC23_dac_select>:

void AIC23_dac_select(unsigned int dac){
   409ac:	defffd04 	addi	sp,sp,-12
   409b0:	dfc00215 	stw	ra,8(sp)
   409b4:	df000115 	stw	fp,4(sp)
   409b8:	df000104 	addi	fp,sp,4
   409bc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1EF) | ((dac & 0x01) << 4);
   409c0:	00800174 	movhi	r2,5
   409c4:	10805304 	addi	r2,r2,332
   409c8:	10800417 	ldw	r2,16(r2)
   409cc:	10c07bcc 	andi	r3,r2,495
   409d0:	e0bfff17 	ldw	r2,-4(fp)
   409d4:	1080004c 	andi	r2,r2,1
   409d8:	1004913a 	slli	r2,r2,4
   409dc:	1886b03a 	or	r3,r3,r2
   409e0:	00800174 	movhi	r2,5
   409e4:	10805304 	addi	r2,r2,332
   409e8:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   409ec:	00800174 	movhi	r2,5
   409f0:	10805304 	addi	r2,r2,332
   409f4:	11400417 	ldw	r5,16(r2)
   409f8:	01000104 	movi	r4,4
   409fc:	00423340 	call	42334 <spi_send>
}
   40a00:	e037883a 	mov	sp,fp
   40a04:	dfc00117 	ldw	ra,4(sp)
   40a08:	df000017 	ldw	fp,0(sp)
   40a0c:	dec00204 	addi	sp,sp,8
   40a10:	f800283a 	ret

00040a14 <AIC23_bypass>:
/* Bypass
   Valid Inputs:
   	   ENABLED
   	   DISABLED
 */
void AIC23_bypass(unsigned int bypass){
   40a14:	defffd04 	addi	sp,sp,-12
   40a18:	dfc00215 	stw	ra,8(sp)
   40a1c:	df000115 	stw	fp,4(sp)
   40a20:	df000104 	addi	fp,sp,4
   40a24:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1F7) | ((bypass & 0x01) << 3);
   40a28:	00800174 	movhi	r2,5
   40a2c:	10805304 	addi	r2,r2,332
   40a30:	10800417 	ldw	r2,16(r2)
   40a34:	10c07dcc 	andi	r3,r2,503
   40a38:	e0bfff17 	ldw	r2,-4(fp)
   40a3c:	1080004c 	andi	r2,r2,1
   40a40:	100490fa 	slli	r2,r2,3
   40a44:	1886b03a 	or	r3,r3,r2
   40a48:	00800174 	movhi	r2,5
   40a4c:	10805304 	addi	r2,r2,332
   40a50:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40a54:	00800174 	movhi	r2,5
   40a58:	10805304 	addi	r2,r2,332
   40a5c:	11400417 	ldw	r5,16(r2)
   40a60:	01000104 	movi	r4,4
   40a64:	00423340 	call	42334 <spi_send>
}
   40a68:	e037883a 	mov	sp,fp
   40a6c:	dfc00117 	ldw	ra,4(sp)
   40a70:	df000017 	ldw	fp,0(sp)
   40a74:	dec00204 	addi	sp,sp,8
   40a78:	f800283a 	ret

00040a7c <AIC23_input>:

void AIC23_input(unsigned int input){
   40a7c:	defffd04 	addi	sp,sp,-12
   40a80:	dfc00215 	stw	ra,8(sp)
   40a84:	df000115 	stw	fp,4(sp)
   40a88:	df000104 	addi	fp,sp,4
   40a8c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FB) | ((input & 0x01) << 2);
   40a90:	00800174 	movhi	r2,5
   40a94:	10805304 	addi	r2,r2,332
   40a98:	10800417 	ldw	r2,16(r2)
   40a9c:	10c07ecc 	andi	r3,r2,507
   40aa0:	e0bfff17 	ldw	r2,-4(fp)
   40aa4:	1080004c 	andi	r2,r2,1
   40aa8:	1085883a 	add	r2,r2,r2
   40aac:	1085883a 	add	r2,r2,r2
   40ab0:	1886b03a 	or	r3,r3,r2
   40ab4:	00800174 	movhi	r2,5
   40ab8:	10805304 	addi	r2,r2,332
   40abc:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40ac0:	00800174 	movhi	r2,5
   40ac4:	10805304 	addi	r2,r2,332
   40ac8:	11400417 	ldw	r5,16(r2)
   40acc:	01000104 	movi	r4,4
   40ad0:	00423340 	call	42334 <spi_send>
}
   40ad4:	e037883a 	mov	sp,fp
   40ad8:	dfc00117 	ldw	ra,4(sp)
   40adc:	df000017 	ldw	fp,0(sp)
   40ae0:	dec00204 	addi	sp,sp,8
   40ae4:	f800283a 	ret

00040ae8 <AIC23_mic_mute>:

void AIC23_mic_mute(unsigned int mute){
   40ae8:	defffd04 	addi	sp,sp,-12
   40aec:	dfc00215 	stw	ra,8(sp)
   40af0:	df000115 	stw	fp,4(sp)
   40af4:	df000104 	addi	fp,sp,4
   40af8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FD) | ((mute & 0x01) << 2);
   40afc:	00800174 	movhi	r2,5
   40b00:	10805304 	addi	r2,r2,332
   40b04:	10800417 	ldw	r2,16(r2)
   40b08:	10c07f4c 	andi	r3,r2,509
   40b0c:	e0bfff17 	ldw	r2,-4(fp)
   40b10:	1080004c 	andi	r2,r2,1
   40b14:	1085883a 	add	r2,r2,r2
   40b18:	1085883a 	add	r2,r2,r2
   40b1c:	1886b03a 	or	r3,r3,r2
   40b20:	00800174 	movhi	r2,5
   40b24:	10805304 	addi	r2,r2,332
   40b28:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40b2c:	00800174 	movhi	r2,5
   40b30:	10805304 	addi	r2,r2,332
   40b34:	11400417 	ldw	r5,16(r2)
   40b38:	01000104 	movi	r4,4
   40b3c:	00423340 	call	42334 <spi_send>
}
   40b40:	e037883a 	mov	sp,fp
   40b44:	dfc00117 	ldw	ra,4(sp)
   40b48:	df000017 	ldw	fp,0(sp)
   40b4c:	dec00204 	addi	sp,sp,8
   40b50:	f800283a 	ret

00040b54 <AIC23_mic_boost>:

void AIC23_mic_boost(unsigned int boost){
   40b54:	defffd04 	addi	sp,sp,-12
   40b58:	dfc00215 	stw	ra,8(sp)
   40b5c:	df000115 	stw	fp,4(sp)
   40b60:	df000104 	addi	fp,sp,4
   40b64:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FE) | (boost & 0x01);
   40b68:	00800174 	movhi	r2,5
   40b6c:	10805304 	addi	r2,r2,332
   40b70:	10800417 	ldw	r2,16(r2)
   40b74:	10c07f8c 	andi	r3,r2,510
   40b78:	e0bfff17 	ldw	r2,-4(fp)
   40b7c:	1080004c 	andi	r2,r2,1
   40b80:	1886b03a 	or	r3,r3,r2
   40b84:	00800174 	movhi	r2,5
   40b88:	10805304 	addi	r2,r2,332
   40b8c:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40b90:	00800174 	movhi	r2,5
   40b94:	10805304 	addi	r2,r2,332
   40b98:	11400417 	ldw	r5,16(r2)
   40b9c:	01000104 	movi	r4,4
   40ba0:	00423340 	call	42334 <spi_send>
}
   40ba4:	e037883a 	mov	sp,fp
   40ba8:	dfc00117 	ldw	ra,4(sp)
   40bac:	df000017 	ldw	fp,0(sp)
   40bb0:	dec00204 	addi	sp,sp,8
   40bb4:	f800283a 	ret

00040bb8 <AIC23_dac_mute>:
//
// 					Digital Audio Path Control
//
/////////////////////////////////////////////////////////////////

void AIC23_dac_mute(unsigned int mute){
   40bb8:	defffd04 	addi	sp,sp,-12
   40bbc:	dfc00215 	stw	ra,8(sp)
   40bc0:	df000115 	stw	fp,4(sp)
   40bc4:	df000104 	addi	fp,sp,4
   40bc8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x1F7) | ((mute & 0x01) << 3);
   40bcc:	00800174 	movhi	r2,5
   40bd0:	10805304 	addi	r2,r2,332
   40bd4:	10800517 	ldw	r2,20(r2)
   40bd8:	10c07dcc 	andi	r3,r2,503
   40bdc:	e0bfff17 	ldw	r2,-4(fp)
   40be0:	1080004c 	andi	r2,r2,1
   40be4:	100490fa 	slli	r2,r2,3
   40be8:	1886b03a 	or	r3,r3,r2
   40bec:	00800174 	movhi	r2,5
   40bf0:	10805304 	addi	r2,r2,332
   40bf4:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40bf8:	00800174 	movhi	r2,5
   40bfc:	10805304 	addi	r2,r2,332
   40c00:	11400517 	ldw	r5,20(r2)
   40c04:	01000144 	movi	r4,5
   40c08:	00423340 	call	42334 <spi_send>
}
   40c0c:	e037883a 	mov	sp,fp
   40c10:	dfc00117 	ldw	ra,4(sp)
   40c14:	df000017 	ldw	fp,0(sp)
   40c18:	dec00204 	addi	sp,sp,8
   40c1c:	f800283a 	ret

00040c20 <AIC23_deemp>:

void AIC23_deemp(unsigned int deemphasis){
   40c20:	defffd04 	addi	sp,sp,-12
   40c24:	dfc00215 	stw	ra,8(sp)
   40c28:	df000115 	stw	fp,4(sp)
   40c2c:	df000104 	addi	fp,sp,4
   40c30:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x01F9) | ((deemphasis & 0x03) << 1);
   40c34:	00800174 	movhi	r2,5
   40c38:	10805304 	addi	r2,r2,332
   40c3c:	10800517 	ldw	r2,20(r2)
   40c40:	10c07e4c 	andi	r3,r2,505
   40c44:	e0bfff17 	ldw	r2,-4(fp)
   40c48:	108000cc 	andi	r2,r2,3
   40c4c:	1085883a 	add	r2,r2,r2
   40c50:	1886b03a 	or	r3,r3,r2
   40c54:	00800174 	movhi	r2,5
   40c58:	10805304 	addi	r2,r2,332
   40c5c:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40c60:	00800174 	movhi	r2,5
   40c64:	10805304 	addi	r2,r2,332
   40c68:	11400517 	ldw	r5,20(r2)
   40c6c:	01000144 	movi	r4,5
   40c70:	00423340 	call	42334 <spi_send>
}
   40c74:	e037883a 	mov	sp,fp
   40c78:	dfc00117 	ldw	ra,4(sp)
   40c7c:	df000017 	ldw	fp,0(sp)
   40c80:	dec00204 	addi	sp,sp,8
   40c84:	f800283a 	ret

00040c88 <AIC23_adc_highpass>:

void AIC23_adc_highpass(unsigned int highpass){
   40c88:	defffd04 	addi	sp,sp,-12
   40c8c:	dfc00215 	stw	ra,8(sp)
   40c90:	df000115 	stw	fp,4(sp)
   40c94:	df000104 	addi	fp,sp,4
   40c98:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x01FE) | (highpass & 0x01);
   40c9c:	00800174 	movhi	r2,5
   40ca0:	10805304 	addi	r2,r2,332
   40ca4:	10800517 	ldw	r2,20(r2)
   40ca8:	10c07f8c 	andi	r3,r2,510
   40cac:	e0bfff17 	ldw	r2,-4(fp)
   40cb0:	1080004c 	andi	r2,r2,1
   40cb4:	1886b03a 	or	r3,r3,r2
   40cb8:	00800174 	movhi	r2,5
   40cbc:	10805304 	addi	r2,r2,332
   40cc0:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40cc4:	00800174 	movhi	r2,5
   40cc8:	10805304 	addi	r2,r2,332
   40ccc:	11400517 	ldw	r5,20(r2)
   40cd0:	01000144 	movi	r4,5
   40cd4:	00423340 	call	42334 <spi_send>
}
   40cd8:	e037883a 	mov	sp,fp
   40cdc:	dfc00117 	ldw	ra,4(sp)
   40ce0:	df000017 	ldw	fp,0(sp)
   40ce4:	dec00204 	addi	sp,sp,8
   40ce8:	f800283a 	ret

00040cec <AIC23_power_on>:
//
// 						Power Down Control
//
/////////////////////////////////////////////////////////////////

void AIC23_power_on(){
   40cec:	defffe04 	addi	sp,sp,-8
   40cf0:	dfc00115 	stw	ra,4(sp)
   40cf4:	df000015 	stw	fp,0(sp)
   40cf8:	d839883a 	mov	fp,sp
	aic23_config[6] = 0x00;
   40cfc:	00800174 	movhi	r2,5
   40d00:	10805304 	addi	r2,r2,332
   40d04:	10000615 	stw	zero,24(r2)
	spi_send(0x06, aic23_config[6]);
   40d08:	00800174 	movhi	r2,5
   40d0c:	10805304 	addi	r2,r2,332
   40d10:	11400617 	ldw	r5,24(r2)
   40d14:	01000184 	movi	r4,6
   40d18:	00423340 	call	42334 <spi_send>
}
   40d1c:	e037883a 	mov	sp,fp
   40d20:	dfc00117 	ldw	ra,4(sp)
   40d24:	df000017 	ldw	fp,0(sp)
   40d28:	dec00204 	addi	sp,sp,8
   40d2c:	f800283a 	ret

00040d30 <AIC23_power_off>:

void AIC23_power_off(){
   40d30:	defffe04 	addi	sp,sp,-8
   40d34:	dfc00115 	stw	ra,4(sp)
   40d38:	df000015 	stw	fp,0(sp)
   40d3c:	d839883a 	mov	fp,sp
	aic23_config[6] = 0xFF;
   40d40:	00c00174 	movhi	r3,5
   40d44:	18c05304 	addi	r3,r3,332
   40d48:	00803fc4 	movi	r2,255
   40d4c:	18800615 	stw	r2,24(r3)
	spi_send(0x06, aic23_config[6]);
   40d50:	00800174 	movhi	r2,5
   40d54:	10805304 	addi	r2,r2,332
   40d58:	11400617 	ldw	r5,24(r2)
   40d5c:	01000184 	movi	r4,6
   40d60:	00423340 	call	42334 <spi_send>
}
   40d64:	e037883a 	mov	sp,fp
   40d68:	dfc00117 	ldw	ra,4(sp)
   40d6c:	df000017 	ldw	fp,0(sp)
   40d70:	dec00204 	addi	sp,sp,8
   40d74:	f800283a 	ret

00040d78 <AIC23_mode>:
//
// 				Digital Audio Interface Format
//
/////////////////////////////////////////////////////////////////

void AIC23_mode(unsigned int mode){
   40d78:	defffd04 	addi	sp,sp,-12
   40d7c:	dfc00215 	stw	ra,8(sp)
   40d80:	df000115 	stw	fp,4(sp)
   40d84:	df000104 	addi	fp,sp,4
   40d88:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01BF) | ((mode & 0x01) << 6);
   40d8c:	00800174 	movhi	r2,5
   40d90:	10805304 	addi	r2,r2,332
   40d94:	10800717 	ldw	r2,28(r2)
   40d98:	10c06fcc 	andi	r3,r2,447
   40d9c:	e0bfff17 	ldw	r2,-4(fp)
   40da0:	1080004c 	andi	r2,r2,1
   40da4:	100491ba 	slli	r2,r2,6
   40da8:	1886b03a 	or	r3,r3,r2
   40dac:	00800174 	movhi	r2,5
   40db0:	10805304 	addi	r2,r2,332
   40db4:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40db8:	00800174 	movhi	r2,5
   40dbc:	10805304 	addi	r2,r2,332
   40dc0:	11400717 	ldw	r5,28(r2)
   40dc4:	010001c4 	movi	r4,7
   40dc8:	00423340 	call	42334 <spi_send>
}
   40dcc:	e037883a 	mov	sp,fp
   40dd0:	dfc00117 	ldw	ra,4(sp)
   40dd4:	df000017 	ldw	fp,0(sp)
   40dd8:	dec00204 	addi	sp,sp,8
   40ddc:	f800283a 	ret

00040de0 <AIC23_lr_swap>:

void AIC23_lr_swap(unsigned int swap){
   40de0:	defffd04 	addi	sp,sp,-12
   40de4:	dfc00215 	stw	ra,8(sp)
   40de8:	df000115 	stw	fp,4(sp)
   40dec:	df000104 	addi	fp,sp,4
   40df0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01DF) | ((swap & 0x01) << 5);
   40df4:	00800174 	movhi	r2,5
   40df8:	10805304 	addi	r2,r2,332
   40dfc:	10800717 	ldw	r2,28(r2)
   40e00:	10c077cc 	andi	r3,r2,479
   40e04:	e0bfff17 	ldw	r2,-4(fp)
   40e08:	1080004c 	andi	r2,r2,1
   40e0c:	1004917a 	slli	r2,r2,5
   40e10:	1886b03a 	or	r3,r3,r2
   40e14:	00800174 	movhi	r2,5
   40e18:	10805304 	addi	r2,r2,332
   40e1c:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40e20:	00800174 	movhi	r2,5
   40e24:	10805304 	addi	r2,r2,332
   40e28:	11400717 	ldw	r5,28(r2)
   40e2c:	010001c4 	movi	r4,7
   40e30:	00423340 	call	42334 <spi_send>

}
   40e34:	e037883a 	mov	sp,fp
   40e38:	dfc00117 	ldw	ra,4(sp)
   40e3c:	df000017 	ldw	fp,0(sp)
   40e40:	dec00204 	addi	sp,sp,8
   40e44:	f800283a 	ret

00040e48 <AIC23_lr_phase>:

void AIC23_lr_phase(unsigned int phase){
   40e48:	defffd04 	addi	sp,sp,-12
   40e4c:	dfc00215 	stw	ra,8(sp)
   40e50:	df000115 	stw	fp,4(sp)
   40e54:	df000104 	addi	fp,sp,4
   40e58:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01EF) | ((phase & 0x01) << 4);
   40e5c:	00800174 	movhi	r2,5
   40e60:	10805304 	addi	r2,r2,332
   40e64:	10800717 	ldw	r2,28(r2)
   40e68:	10c07bcc 	andi	r3,r2,495
   40e6c:	e0bfff17 	ldw	r2,-4(fp)
   40e70:	1080004c 	andi	r2,r2,1
   40e74:	1004913a 	slli	r2,r2,4
   40e78:	1886b03a 	or	r3,r3,r2
   40e7c:	00800174 	movhi	r2,5
   40e80:	10805304 	addi	r2,r2,332
   40e84:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40e88:	00800174 	movhi	r2,5
   40e8c:	10805304 	addi	r2,r2,332
   40e90:	11400717 	ldw	r5,28(r2)
   40e94:	010001c4 	movi	r4,7
   40e98:	00423340 	call	42334 <spi_send>
}
   40e9c:	e037883a 	mov	sp,fp
   40ea0:	dfc00117 	ldw	ra,4(sp)
   40ea4:	df000017 	ldw	fp,0(sp)
   40ea8:	dec00204 	addi	sp,sp,8
   40eac:	f800283a 	ret

00040eb0 <AIC23_input_len>:

void AIC23_input_len(unsigned int length){
   40eb0:	defffd04 	addi	sp,sp,-12
   40eb4:	dfc00215 	stw	ra,8(sp)
   40eb8:	df000115 	stw	fp,4(sp)
   40ebc:	df000104 	addi	fp,sp,4
   40ec0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01F3) | ((length & 0x03) << 2);
   40ec4:	00800174 	movhi	r2,5
   40ec8:	10805304 	addi	r2,r2,332
   40ecc:	10800717 	ldw	r2,28(r2)
   40ed0:	10c07ccc 	andi	r3,r2,499
   40ed4:	e0bfff17 	ldw	r2,-4(fp)
   40ed8:	108000cc 	andi	r2,r2,3
   40edc:	1085883a 	add	r2,r2,r2
   40ee0:	1085883a 	add	r2,r2,r2
   40ee4:	1886b03a 	or	r3,r3,r2
   40ee8:	00800174 	movhi	r2,5
   40eec:	10805304 	addi	r2,r2,332
   40ef0:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40ef4:	00800174 	movhi	r2,5
   40ef8:	10805304 	addi	r2,r2,332
   40efc:	11400717 	ldw	r5,28(r2)
   40f00:	010001c4 	movi	r4,7
   40f04:	00423340 	call	42334 <spi_send>
}
   40f08:	e037883a 	mov	sp,fp
   40f0c:	dfc00117 	ldw	ra,4(sp)
   40f10:	df000017 	ldw	fp,0(sp)
   40f14:	dec00204 	addi	sp,sp,8
   40f18:	f800283a 	ret

00040f1c <AIC23_format>:

void AIC23_format(unsigned int format){
   40f1c:	defffd04 	addi	sp,sp,-12
   40f20:	dfc00215 	stw	ra,8(sp)
   40f24:	df000115 	stw	fp,4(sp)
   40f28:	df000104 	addi	fp,sp,4
   40f2c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01FC) | (format & 0x03);
   40f30:	00800174 	movhi	r2,5
   40f34:	10805304 	addi	r2,r2,332
   40f38:	10800717 	ldw	r2,28(r2)
   40f3c:	10c07f0c 	andi	r3,r2,508
   40f40:	e0bfff17 	ldw	r2,-4(fp)
   40f44:	108000cc 	andi	r2,r2,3
   40f48:	1886b03a 	or	r3,r3,r2
   40f4c:	00800174 	movhi	r2,5
   40f50:	10805304 	addi	r2,r2,332
   40f54:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40f58:	00800174 	movhi	r2,5
   40f5c:	10805304 	addi	r2,r2,332
   40f60:	11400717 	ldw	r5,28(r2)
   40f64:	010001c4 	movi	r4,7
   40f68:	00423340 	call	42334 <spi_send>
}
   40f6c:	e037883a 	mov	sp,fp
   40f70:	dfc00117 	ldw	ra,4(sp)
   40f74:	df000017 	ldw	fp,0(sp)
   40f78:	dec00204 	addi	sp,sp,8
   40f7c:	f800283a 	ret

00040f80 <AIC23_clkin>:
//
// 						Sample Rate Control
//
/////////////////////////////////////////////////////////////////

void AIC23_clkin(unsigned int clock){
   40f80:	defffd04 	addi	sp,sp,-12
   40f84:	dfc00215 	stw	ra,8(sp)
   40f88:	df000115 	stw	fp,4(sp)
   40f8c:	df000104 	addi	fp,sp,4
   40f90:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x01BF) | ((clock & 0x01) << 6);
   40f94:	00800174 	movhi	r2,5
   40f98:	10805304 	addi	r2,r2,332
   40f9c:	10800817 	ldw	r2,32(r2)
   40fa0:	10c06fcc 	andi	r3,r2,447
   40fa4:	e0bfff17 	ldw	r2,-4(fp)
   40fa8:	1080004c 	andi	r2,r2,1
   40fac:	100491ba 	slli	r2,r2,6
   40fb0:	1886b03a 	or	r3,r3,r2
   40fb4:	00800174 	movhi	r2,5
   40fb8:	10805304 	addi	r2,r2,332
   40fbc:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   40fc0:	00800174 	movhi	r2,5
   40fc4:	10805304 	addi	r2,r2,332
   40fc8:	11400817 	ldw	r5,32(r2)
   40fcc:	01000204 	movi	r4,8
   40fd0:	00423340 	call	42334 <spi_send>
}
   40fd4:	e037883a 	mov	sp,fp
   40fd8:	dfc00117 	ldw	ra,4(sp)
   40fdc:	df000017 	ldw	fp,0(sp)
   40fe0:	dec00204 	addi	sp,sp,8
   40fe4:	f800283a 	ret

00040fe8 <AIC23_clkout>:

void AIC23_clkout(unsigned int clock){
   40fe8:	defffd04 	addi	sp,sp,-12
   40fec:	dfc00215 	stw	ra,8(sp)
   40ff0:	df000115 	stw	fp,4(sp)
   40ff4:	df000104 	addi	fp,sp,4
   40ff8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x017F) | ((clock & 0x01) << 7);
   40ffc:	00800174 	movhi	r2,5
   41000:	10805304 	addi	r2,r2,332
   41004:	10800817 	ldw	r2,32(r2)
   41008:	10c05fcc 	andi	r3,r2,383
   4100c:	e0bfff17 	ldw	r2,-4(fp)
   41010:	1080004c 	andi	r2,r2,1
   41014:	100491fa 	slli	r2,r2,7
   41018:	1886b03a 	or	r3,r3,r2
   4101c:	00800174 	movhi	r2,5
   41020:	10805304 	addi	r2,r2,332
   41024:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41028:	00800174 	movhi	r2,5
   4102c:	10805304 	addi	r2,r2,332
   41030:	11400817 	ldw	r5,32(r2)
   41034:	01000204 	movi	r4,8
   41038:	00423340 	call	42334 <spi_send>
}
   4103c:	e037883a 	mov	sp,fp
   41040:	dfc00117 	ldw	ra,4(sp)
   41044:	df000017 	ldw	fp,0(sp)
   41048:	dec00204 	addi	sp,sp,8
   4104c:	f800283a 	ret

00041050 <AIC23_setFreq>:
	 AIC23_FREQ_32KHZ 0x0c	// 32000 Hz
	 AIC23_FREQ_44KHZ 0x11	// 44100 Hz
	 AIC23_FREQ_48KHZ 0x00	// 48000 Hz
	 AIC23_FREQ_96KHZ 0x0e	// 96000 Hz
 */
void AIC23_setFreq(unsigned int frequency){
   41050:	defffd04 	addi	sp,sp,-12
   41054:	dfc00215 	stw	ra,8(sp)
   41058:	df000115 	stw	fp,4(sp)
   4105c:	df000104 	addi	fp,sp,4
   41060:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1C3) | ((frequency & 0x0F) << 2);
   41064:	00800174 	movhi	r2,5
   41068:	10805304 	addi	r2,r2,332
   4106c:	10800817 	ldw	r2,32(r2)
   41070:	10c070cc 	andi	r3,r2,451
   41074:	e0bfff17 	ldw	r2,-4(fp)
   41078:	108003cc 	andi	r2,r2,15
   4107c:	1085883a 	add	r2,r2,r2
   41080:	1085883a 	add	r2,r2,r2
   41084:	1886b03a 	or	r3,r3,r2
   41088:	00800174 	movhi	r2,5
   4108c:	10805304 	addi	r2,r2,332
   41090:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41094:	00800174 	movhi	r2,5
   41098:	10805304 	addi	r2,r2,332
   4109c:	11400817 	ldw	r5,32(r2)
   410a0:	01000204 	movi	r4,8
   410a4:	00423340 	call	42334 <spi_send>
}
   410a8:	e037883a 	mov	sp,fp
   410ac:	dfc00117 	ldw	ra,4(sp)
   410b0:	df000017 	ldw	fp,0(sp)
   410b4:	dec00204 	addi	sp,sp,8
   410b8:	f800283a 	ret

000410bc <AIC23_bosr>:

void AIC23_bosr(unsigned int frequency){
   410bc:	defffd04 	addi	sp,sp,-12
   410c0:	dfc00215 	stw	ra,8(sp)
   410c4:	df000115 	stw	fp,4(sp)
   410c8:	df000104 	addi	fp,sp,4
   410cc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1FD) | ((frequency & 0x01) << 1);
   410d0:	00800174 	movhi	r2,5
   410d4:	10805304 	addi	r2,r2,332
   410d8:	10800817 	ldw	r2,32(r2)
   410dc:	10c07f4c 	andi	r3,r2,509
   410e0:	e0bfff17 	ldw	r2,-4(fp)
   410e4:	1080004c 	andi	r2,r2,1
   410e8:	1085883a 	add	r2,r2,r2
   410ec:	1886b03a 	or	r3,r3,r2
   410f0:	00800174 	movhi	r2,5
   410f4:	10805304 	addi	r2,r2,332
   410f8:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   410fc:	00800174 	movhi	r2,5
   41100:	10805304 	addi	r2,r2,332
   41104:	11400817 	ldw	r5,32(r2)
   41108:	01000204 	movi	r4,8
   4110c:	00423340 	call	42334 <spi_send>
}
   41110:	e037883a 	mov	sp,fp
   41114:	dfc00117 	ldw	ra,4(sp)
   41118:	df000017 	ldw	fp,0(sp)
   4111c:	dec00204 	addi	sp,sp,8
   41120:	f800283a 	ret

00041124 <AIC23_clk_mode>:

void AIC23_clk_mode(unsigned int mode){
   41124:	defffd04 	addi	sp,sp,-12
   41128:	dfc00215 	stw	ra,8(sp)
   4112c:	df000115 	stw	fp,4(sp)
   41130:	df000104 	addi	fp,sp,4
   41134:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1FE) | (mode & 0x01);
   41138:	00800174 	movhi	r2,5
   4113c:	10805304 	addi	r2,r2,332
   41140:	10800817 	ldw	r2,32(r2)
   41144:	10c07f8c 	andi	r3,r2,510
   41148:	e0bfff17 	ldw	r2,-4(fp)
   4114c:	1080004c 	andi	r2,r2,1
   41150:	1886b03a 	or	r3,r3,r2
   41154:	00800174 	movhi	r2,5
   41158:	10805304 	addi	r2,r2,332
   4115c:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41160:	00800174 	movhi	r2,5
   41164:	10805304 	addi	r2,r2,332
   41168:	11400817 	ldw	r5,32(r2)
   4116c:	01000204 	movi	r4,8
   41170:	00423340 	call	42334 <spi_send>
}
   41174:	e037883a 	mov	sp,fp
   41178:	dfc00117 	ldw	ra,4(sp)
   4117c:	df000017 	ldw	fp,0(sp)
   41180:	dec00204 	addi	sp,sp,8
   41184:	f800283a 	ret

00041188 <AIC23_on>:
// 					Digital Interface Activation
//
/////////////////////////////////////////////////////////////////

// Turns the AIC23 on
void AIC23_on(){
   41188:	defffe04 	addi	sp,sp,-8
   4118c:	dfc00115 	stw	ra,4(sp)
   41190:	df000015 	stw	fp,0(sp)
   41194:	d839883a 	mov	fp,sp
	spi_send(0x06, 0x00);
   41198:	01000184 	movi	r4,6
   4119c:	000b883a 	mov	r5,zero
   411a0:	00423340 	call	42334 <spi_send>
}
   411a4:	e037883a 	mov	sp,fp
   411a8:	dfc00117 	ldw	ra,4(sp)
   411ac:	df000017 	ldw	fp,0(sp)
   411b0:	dec00204 	addi	sp,sp,8
   411b4:	f800283a 	ret

000411b8 <AIC23_off>:

// Turns the AIC23 off
void AIC23_off(){
   411b8:	defffe04 	addi	sp,sp,-8
   411bc:	dfc00115 	stw	ra,4(sp)
   411c0:	df000015 	stw	fp,0(sp)
   411c4:	d839883a 	mov	fp,sp
	spi_send(0x06, 0x80);
   411c8:	01000184 	movi	r4,6
   411cc:	01402004 	movi	r5,128
   411d0:	00423340 	call	42334 <spi_send>
}
   411d4:	e037883a 	mov	sp,fp
   411d8:	dfc00117 	ldw	ra,4(sp)
   411dc:	df000017 	ldw	fp,0(sp)
   411e0:	dec00204 	addi	sp,sp,8
   411e4:	f800283a 	ret

000411e8 <delay>:
   411e8:	defffc04 	addi	sp,sp,-16
   411ec:	df000315 	stw	fp,12(sp)
   411f0:	df000304 	addi	fp,sp,12
   411f4:	e13fff15 	stw	r4,-4(fp)
   411f8:	e03ffe15 	stw	zero,-8(fp)
   411fc:	e03ffd15 	stw	zero,-12(fp)
   41200:	e03ffe15 	stw	zero,-8(fp)
   41204:	00000606 	br	41220 <delay+0x38>
   41208:	e0bffd17 	ldw	r2,-12(fp)
   4120c:	10800044 	addi	r2,r2,1
   41210:	e0bffd15 	stw	r2,-12(fp)
   41214:	e0bffe17 	ldw	r2,-8(fp)
   41218:	10800044 	addi	r2,r2,1
   4121c:	e0bffe15 	stw	r2,-8(fp)
   41220:	e0fffe17 	ldw	r3,-8(fp)
   41224:	e0bfff17 	ldw	r2,-4(fp)
   41228:	18bff716 	blt	r3,r2,41208 <delay+0x20>
   4122c:	e037883a 	mov	sp,fp
   41230:	df000017 	ldw	fp,0(sp)
   41234:	dec00104 	addi	sp,sp,4
   41238:	f800283a 	ret

0004123c <I2S_collect_left>:
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "delay.h"

int I2S_collect_left(){
   4123c:	defffc04 	addi	sp,sp,-16
   41240:	dfc00315 	stw	ra,12(sp)
   41244:	df000215 	stw	fp,8(sp)
   41248:	df000204 	addi	fp,sp,8
	int k = 0;
   4124c:	e03fff15 	stw	zero,-4(fp)
	int leftChannel = 0;
   41250:	e03ffe15 	stw	zero,-8(fp)

	//Left channel LRCOUT = 0
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 0);
   41254:	00800234 	movhi	r2,8
   41258:	10846004 	addi	r2,r2,4480
   4125c:	10000035 	stwio	zero,0(r2)
    delay(3);
   41260:	010000c4 	movi	r4,3
   41264:	00411e80 	call	411e8 <delay>
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41268:	00800234 	movhi	r2,8
   4126c:	10845804 	addi	r2,r2,4448
   41270:	10000035 	stwio	zero,0(r2)
	delay(3);
   41274:	010000c4 	movi	r4,3
   41278:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   4127c:	00c00234 	movhi	r3,8
   41280:	18c45804 	addi	r3,r3,4448
   41284:	00800044 	movi	r2,1
   41288:	18800035 	stwio	r2,0(r3)
	delay(3);
   4128c:	010000c4 	movi	r4,3
   41290:	00411e80 	call	411e8 <delay>
	for(k = 0; k < 16; k++){
   41294:	e03fff15 	stw	zero,-4(fp)
   41298:	00001a06 	br	41304 <I2S_collect_left+0xc8>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   4129c:	00800234 	movhi	r2,8
   412a0:	10845804 	addi	r2,r2,4448
   412a4:	10000035 	stwio	zero,0(r2)
		delay(3);
   412a8:	010000c4 	movi	r4,3
   412ac:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   412b0:	00c00234 	movhi	r3,8
   412b4:	18c45804 	addi	r3,r3,4448
   412b8:	00800044 	movi	r2,1
   412bc:	18800035 	stwio	r2,0(r3)
		delay(3);
   412c0:	010000c4 	movi	r4,3
   412c4:	00411e80 	call	411e8 <delay>
		//printf("%i", IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE));
		leftChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
   412c8:	00800234 	movhi	r2,8
   412cc:	10845c04 	addi	r2,r2,4464
   412d0:	10c00037 	ldwio	r3,0(r2)
   412d4:	e0bffe17 	ldw	r2,-8(fp)
   412d8:	10c4b03a 	or	r2,r2,r3
   412dc:	e0bffe15 	stw	r2,-8(fp)
		if(k < 15)
   412e0:	e0bfff17 	ldw	r2,-4(fp)
   412e4:	108003c8 	cmpgei	r2,r2,15
   412e8:	1000031e 	bne	r2,zero,412f8 <I2S_collect_left+0xbc>
			leftChannel <<= 1;
   412ec:	e0bffe17 	ldw	r2,-8(fp)
   412f0:	1085883a 	add	r2,r2,r2
   412f4:	e0bffe15 	stw	r2,-8(fp)
    delay(3);
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
	delay(3);
	for(k = 0; k < 16; k++){
   412f8:	e0bfff17 	ldw	r2,-4(fp)
   412fc:	10800044 	addi	r2,r2,1
   41300:	e0bfff15 	stw	r2,-4(fp)
   41304:	e0bfff17 	ldw	r2,-4(fp)
   41308:	10800410 	cmplti	r2,r2,16
   4130c:	103fe31e 	bne	r2,zero,4129c <I2S_collect_left+0x60>
		leftChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
		if(k < 15)
			leftChannel <<= 1;

	}
	return leftChannel;
   41310:	e0bffe17 	ldw	r2,-8(fp)
}
   41314:	e037883a 	mov	sp,fp
   41318:	dfc00117 	ldw	ra,4(sp)
   4131c:	df000017 	ldw	fp,0(sp)
   41320:	dec00204 	addi	sp,sp,8
   41324:	f800283a 	ret

00041328 <I2S_collect_right>:

int I2S_collect_right(){
   41328:	defffc04 	addi	sp,sp,-16
   4132c:	dfc00315 	stw	ra,12(sp)
   41330:	df000215 	stw	fp,8(sp)
   41334:	df000204 	addi	fp,sp,8
	int l = 0;
   41338:	e03fff15 	stw	zero,-4(fp)
	int rightChannel = 0;
   4133c:	e03ffe15 	stw	zero,-8(fp)
	//right channel LRCOUT = 1
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 1);
   41340:	00c00234 	movhi	r3,8
   41344:	18c46004 	addi	r3,r3,4480
   41348:	00800044 	movi	r2,1
   4134c:	18800035 	stwio	r2,0(r3)
    delay(3);
   41350:	010000c4 	movi	r4,3
   41354:	00411e80 	call	411e8 <delay>
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41358:	00800234 	movhi	r2,8
   4135c:	10845804 	addi	r2,r2,4448
   41360:	10000035 	stwio	zero,0(r2)
	delay(3);
   41364:	010000c4 	movi	r4,3
   41368:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   4136c:	00c00234 	movhi	r3,8
   41370:	18c45804 	addi	r3,r3,4448
   41374:	00800044 	movi	r2,1
   41378:	18800035 	stwio	r2,0(r3)
	for(l = 0; l < 16; l++){
   4137c:	e03fff15 	stw	zero,-4(fp)
   41380:	00001a06 	br	413ec <I2S_collect_right+0xc4>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41384:	00800234 	movhi	r2,8
   41388:	10845804 	addi	r2,r2,4448
   4138c:	10000035 	stwio	zero,0(r2)
		delay(3);
   41390:	010000c4 	movi	r4,3
   41394:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41398:	00c00234 	movhi	r3,8
   4139c:	18c45804 	addi	r3,r3,4448
   413a0:	00800044 	movi	r2,1
   413a4:	18800035 	stwio	r2,0(r3)
		delay(3);
   413a8:	010000c4 	movi	r4,3
   413ac:	00411e80 	call	411e8 <delay>
		rightChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
   413b0:	00800234 	movhi	r2,8
   413b4:	10845c04 	addi	r2,r2,4464
   413b8:	10c00037 	ldwio	r3,0(r2)
   413bc:	e0bffe17 	ldw	r2,-8(fp)
   413c0:	10c4b03a 	or	r2,r2,r3
   413c4:	e0bffe15 	stw	r2,-8(fp)
		if(l < 15)
   413c8:	e0bfff17 	ldw	r2,-4(fp)
   413cc:	108003c8 	cmpgei	r2,r2,15
   413d0:	1000031e 	bne	r2,zero,413e0 <I2S_collect_right+0xb8>
			rightChannel <<= 1;
   413d4:	e0bffe17 	ldw	r2,-8(fp)
   413d8:	1085883a 	add	r2,r2,r2
   413dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 1);
    delay(3);
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
	for(l = 0; l < 16; l++){
   413e0:	e0bfff17 	ldw	r2,-4(fp)
   413e4:	10800044 	addi	r2,r2,1
   413e8:	e0bfff15 	stw	r2,-4(fp)
   413ec:	e0bfff17 	ldw	r2,-4(fp)
   413f0:	10800410 	cmplti	r2,r2,16
   413f4:	103fe31e 	bne	r2,zero,41384 <I2S_collect_right+0x5c>
		rightChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
		if(l < 15)
			rightChannel <<= 1;
	}

	return rightChannel;
   413f8:	e0bffe17 	ldw	r2,-8(fp)

}
   413fc:	e037883a 	mov	sp,fp
   41400:	dfc00117 	ldw	ra,4(sp)
   41404:	df000017 	ldw	fp,0(sp)
   41408:	dec00204 	addi	sp,sp,8
   4140c:	f800283a 	ret

00041410 <I2S_send_left>:


void I2S_send_left(int leftdata){
   41410:	defffc04 	addi	sp,sp,-16
   41414:	dfc00315 	stw	ra,12(sp)
   41418:	df000215 	stw	fp,8(sp)
   4141c:	df000204 	addi	fp,sp,8
   41420:	e13fff15 	stw	r4,-4(fp)
	int temp = 0;
   41424:	e03ffe15 	stw	zero,-8(fp)

	//Toggle LRCIN to 0
	IOWR_ALTERA_AVALON_PIO_DATA(LRCIN_BASE, 0);
   41428:	00800234 	movhi	r2,8
   4142c:	10845404 	addi	r2,r2,4432
   41430:	10000035 	stwio	zero,0(r2)
	delay(3);
   41434:	010000c4 	movi	r4,3
   41438:	00411e80 	call	411e8 <delay>

	//first Bclk cycle
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   4143c:	00800234 	movhi	r2,8
   41440:	10845804 	addi	r2,r2,4448
   41444:	10000035 	stwio	zero,0(r2)
	delay(3);
   41448:	010000c4 	movi	r4,3
   4144c:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41450:	00c00234 	movhi	r3,8
   41454:	18c45804 	addi	r3,r3,4448
   41458:	00800044 	movi	r2,1
   4145c:	18800035 	stwio	r2,0(r3)

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41460:	e03ffe15 	stw	zero,-8(fp)
   41464:	00001706 	br	414c4 <I2S_send_left+0xb4>
		//Insert the data to DIN_BASE
		IOWR_ALTERA_AVALON_PIO_DATA(DIN_BASE, !!(leftdata&0x1000));
   41468:	e0bfff17 	ldw	r2,-4(fp)
   4146c:	1084000c 	andi	r2,r2,4096
   41470:	1006c03a 	cmpne	r3,r2,zero
   41474:	00800234 	movhi	r2,8
   41478:	10846804 	addi	r2,r2,4512
   4147c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41480:	00800234 	movhi	r2,8
   41484:	10845804 	addi	r2,r2,4448
   41488:	10000035 	stwio	zero,0(r2)
		delay(3);
   4148c:	010000c4 	movi	r4,3
   41490:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41494:	00c00234 	movhi	r3,8
   41498:	18c45804 	addi	r3,r3,4448
   4149c:	00800044 	movi	r2,1
   414a0:	18800035 	stwio	r2,0(r3)
		delay(3);
   414a4:	010000c4 	movi	r4,3
   414a8:	00411e80 	call	411e8 <delay>
		leftdata <<= 1;
   414ac:	e0bfff17 	ldw	r2,-4(fp)
   414b0:	1085883a 	add	r2,r2,r2
   414b4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   414b8:	e0bffe17 	ldw	r2,-8(fp)
   414bc:	10800044 	addi	r2,r2,1
   414c0:	e0bffe15 	stw	r2,-8(fp)
   414c4:	e0bffe17 	ldw	r2,-8(fp)
   414c8:	10800410 	cmplti	r2,r2,16
   414cc:	103fe61e 	bne	r2,zero,41468 <I2S_send_left+0x58>
		delay(3);
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
		delay(3);
		leftdata <<= 1;
	}
}
   414d0:	e037883a 	mov	sp,fp
   414d4:	dfc00117 	ldw	ra,4(sp)
   414d8:	df000017 	ldw	fp,0(sp)
   414dc:	dec00204 	addi	sp,sp,8
   414e0:	f800283a 	ret

000414e4 <I2S_send_right>:


void I2S_send_right(int rightdata){
   414e4:	defffc04 	addi	sp,sp,-16
   414e8:	dfc00315 	stw	ra,12(sp)
   414ec:	df000215 	stw	fp,8(sp)
   414f0:	df000204 	addi	fp,sp,8
   414f4:	e13fff15 	stw	r4,-4(fp)
	int temp = 0;
   414f8:	e03ffe15 	stw	zero,-8(fp)
	//Toggle LRCIN to 0
	IOWR_ALTERA_AVALON_PIO_DATA(0x81060, 1);
   414fc:	00c00234 	movhi	r3,8
   41500:	18c41804 	addi	r3,r3,4192
   41504:	00800044 	movi	r2,1
   41508:	18800035 	stwio	r2,0(r3)
	delay(3);
   4150c:	010000c4 	movi	r4,3
   41510:	00411e80 	call	411e8 <delay>

	//first Bclk cycle
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41514:	00800234 	movhi	r2,8
   41518:	10845804 	addi	r2,r2,4448
   4151c:	10000035 	stwio	zero,0(r2)
	delay(3);
   41520:	010000c4 	movi	r4,3
   41524:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41528:	00c00234 	movhi	r3,8
   4152c:	18c45804 	addi	r3,r3,4448
   41530:	00800044 	movi	r2,1
   41534:	18800035 	stwio	r2,0(r3)

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41538:	e03ffe15 	stw	zero,-8(fp)
   4153c:	00001706 	br	4159c <I2S_send_right+0xb8>
		//Insert the data to DIN_BASE
		IOWR_ALTERA_AVALON_PIO_DATA(DIN_BASE, !!(rightdata&0x1000));
   41540:	e0bfff17 	ldw	r2,-4(fp)
   41544:	1084000c 	andi	r2,r2,4096
   41548:	1006c03a 	cmpne	r3,r2,zero
   4154c:	00800234 	movhi	r2,8
   41550:	10846804 	addi	r2,r2,4512
   41554:	10c00035 	stwio	r3,0(r2)

		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41558:	00800234 	movhi	r2,8
   4155c:	10845804 	addi	r2,r2,4448
   41560:	10000035 	stwio	zero,0(r2)
		delay(3);
   41564:	010000c4 	movi	r4,3
   41568:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   4156c:	00c00234 	movhi	r3,8
   41570:	18c45804 	addi	r3,r3,4448
   41574:	00800044 	movi	r2,1
   41578:	18800035 	stwio	r2,0(r3)
		delay(3);
   4157c:	010000c4 	movi	r4,3
   41580:	00411e80 	call	411e8 <delay>
		rightdata <<= 1;
   41584:	e0bfff17 	ldw	r2,-4(fp)
   41588:	1085883a 	add	r2,r2,r2
   4158c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41590:	e0bffe17 	ldw	r2,-8(fp)
   41594:	10800044 	addi	r2,r2,1
   41598:	e0bffe15 	stw	r2,-8(fp)
   4159c:	e0bffe17 	ldw	r2,-8(fp)
   415a0:	10800410 	cmplti	r2,r2,16
   415a4:	103fe61e 	bne	r2,zero,41540 <I2S_send_right+0x5c>
		delay(3);
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
		delay(3);
		rightdata <<= 1;
	}
}
   415a8:	e037883a 	mov	sp,fp
   415ac:	dfc00117 	ldw	ra,4(sp)
   415b0:	df000017 	ldw	fp,0(sp)
   415b4:	dec00204 	addi	sp,sp,8
   415b8:	f800283a 	ret

000415bc <I2S_send_lr>:


void I2S_send_lr(int left, int right){
   415bc:	defffc04 	addi	sp,sp,-16
   415c0:	dfc00315 	stw	ra,12(sp)
   415c4:	df000215 	stw	fp,8(sp)
   415c8:	df000204 	addi	fp,sp,8
   415cc:	e13ffe15 	stw	r4,-8(fp)
   415d0:	e17fff15 	stw	r5,-4(fp)
	I2S_send_left(left);
   415d4:	e13ffe17 	ldw	r4,-8(fp)
   415d8:	00414100 	call	41410 <I2S_send_left>
	I2S_send_right(right);
   415dc:	e13fff17 	ldw	r4,-4(fp)
   415e0:	00414e40 	call	414e4 <I2S_send_right>
}
   415e4:	e037883a 	mov	sp,fp
   415e8:	dfc00117 	ldw	ra,4(sp)
   415ec:	df000017 	ldw	fp,0(sp)
   415f0:	dec00204 	addi	sp,sp,8
   415f4:	f800283a 	ret

000415f8 <fft>:
    float imag;
    };
typedef struct cmpx COMPLEX;

void fft(COMPLEX *Y, int M, COMPLEX *w)       //input sample array, number of points
{
   415f8:	deffec04 	addi	sp,sp,-80
   415fc:	dfc01315 	stw	ra,76(sp)
   41600:	df001215 	stw	fp,72(sp)
   41604:	dc401115 	stw	r17,68(sp)
   41608:	dc001015 	stw	r16,64(sp)
   4160c:	df001004 	addi	fp,sp,64
   41610:	e13ffd15 	stw	r4,-12(fp)
   41614:	e17ffe15 	stw	r5,-8(fp)
   41618:	e1bfff15 	stw	r6,-4(fp)
  COMPLEX temp1,temp2;            //temporary storage variables
  int i,j,k;                      //loop counter variables
  int upper_leg, lower_leg;       //index of upper/lower butterfly leg
  int leg_diff;                   //difference between upper/lower leg
  int num_stages=0;               //number of FFT stages, or iterations
   4161c:	e03ff215 	stw	zero,-56(fp)
  int index, step;                //index and step between twiddle factor
  i=1;                            //log(base 2) of # of points = # of stages
   41620:	00800044 	movi	r2,1
   41624:	e0bff815 	stw	r2,-32(fp)
  do
  {
    num_stages+=1;
   41628:	e0bff217 	ldw	r2,-56(fp)
   4162c:	10800044 	addi	r2,r2,1
   41630:	e0bff215 	stw	r2,-56(fp)
    i=i*2;
   41634:	e0bff817 	ldw	r2,-32(fp)
   41638:	1085883a 	add	r2,r2,r2
   4163c:	e0bff815 	stw	r2,-32(fp)
  } while (i!=M);
   41640:	e0fff817 	ldw	r3,-32(fp)
   41644:	e0bffe17 	ldw	r2,-8(fp)
   41648:	18bff71e 	bne	r3,r2,41628 <fft+0x30>

  leg_diff=M/2;                 //starting difference between upper & lower legs
   4164c:	e0fffe17 	ldw	r3,-8(fp)
   41650:	1804d7fa 	srli	r2,r3,31
   41654:	10c5883a 	add	r2,r2,r3
   41658:	1005d07a 	srai	r2,r2,1
   4165c:	e0bff315 	stw	r2,-52(fp)
  step=2;                     //step between values in twiddle.h              
   41660:	00800084 	movi	r2,2
   41664:	e0bff015 	stw	r2,-64(fp)
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
   41668:	e03ff815 	stw	zero,-32(fp)
   4166c:	0000aa06 	br	41918 <fft+0x320>
  {
    index=0;
   41670:	e03ff115 	stw	zero,-60(fp)
    for (j=0;j<leg_diff;j++)
   41674:	e03ff715 	stw	zero,-36(fp)
   41678:	00009906 	br	418e0 <fft+0x2e8>
    {
      for (upper_leg=j;upper_leg<M;upper_leg+=(2*leg_diff))
   4167c:	e0bff717 	ldw	r2,-36(fp)
   41680:	e0bff515 	stw	r2,-44(fp)
   41684:	00008c06 	br	418b8 <fft+0x2c0>
      {
        lower_leg=upper_leg+leg_diff;
   41688:	e0fff517 	ldw	r3,-44(fp)
   4168c:	e0bff317 	ldw	r2,-52(fp)
   41690:	1885883a 	add	r2,r3,r2
   41694:	e0bff415 	stw	r2,-48(fp)
        temp1.real=(Y[upper_leg]).real + (Y[lower_leg]).real;
   41698:	e0bff517 	ldw	r2,-44(fp)
   4169c:	100490fa 	slli	r2,r2,3
   416a0:	1007883a 	mov	r3,r2
   416a4:	e0bffd17 	ldw	r2,-12(fp)
   416a8:	1885883a 	add	r2,r3,r2
   416ac:	11000017 	ldw	r4,0(r2)
   416b0:	e0bff417 	ldw	r2,-48(fp)
   416b4:	100490fa 	slli	r2,r2,3
   416b8:	1007883a 	mov	r3,r2
   416bc:	e0bffd17 	ldw	r2,-12(fp)
   416c0:	1885883a 	add	r2,r3,r2
   416c4:	10800017 	ldw	r2,0(r2)
   416c8:	100b883a 	mov	r5,r2
   416cc:	0042a640 	call	42a64 <__addsf3>
   416d0:	e0bff915 	stw	r2,-28(fp)
        temp1.imag=(Y[upper_leg]).imag + (Y[lower_leg]).imag;
   416d4:	e0bff517 	ldw	r2,-44(fp)
   416d8:	100490fa 	slli	r2,r2,3
   416dc:	1007883a 	mov	r3,r2
   416e0:	e0bffd17 	ldw	r2,-12(fp)
   416e4:	1885883a 	add	r2,r3,r2
   416e8:	11000117 	ldw	r4,4(r2)
   416ec:	e0bff417 	ldw	r2,-48(fp)
   416f0:	100490fa 	slli	r2,r2,3
   416f4:	1007883a 	mov	r3,r2
   416f8:	e0bffd17 	ldw	r2,-12(fp)
   416fc:	1885883a 	add	r2,r3,r2
   41700:	10800117 	ldw	r2,4(r2)
   41704:	100b883a 	mov	r5,r2
   41708:	0042a640 	call	42a64 <__addsf3>
   4170c:	e0bffa15 	stw	r2,-24(fp)
        temp2.real=(Y[upper_leg]).real - (Y[lower_leg]).real;
   41710:	e0bff517 	ldw	r2,-44(fp)
   41714:	100490fa 	slli	r2,r2,3
   41718:	1007883a 	mov	r3,r2
   4171c:	e0bffd17 	ldw	r2,-12(fp)
   41720:	1885883a 	add	r2,r3,r2
   41724:	11000017 	ldw	r4,0(r2)
   41728:	e0bff417 	ldw	r2,-48(fp)
   4172c:	100490fa 	slli	r2,r2,3
   41730:	1007883a 	mov	r3,r2
   41734:	e0bffd17 	ldw	r2,-12(fp)
   41738:	1885883a 	add	r2,r3,r2
   4173c:	10800017 	ldw	r2,0(r2)
   41740:	100b883a 	mov	r5,r2
   41744:	00429f40 	call	429f4 <__subsf3>
   41748:	e0bffb15 	stw	r2,-20(fp)
        temp2.imag=(Y[upper_leg]).imag - (Y[lower_leg]).imag;
   4174c:	e0bff517 	ldw	r2,-44(fp)
   41750:	100490fa 	slli	r2,r2,3
   41754:	1007883a 	mov	r3,r2
   41758:	e0bffd17 	ldw	r2,-12(fp)
   4175c:	1885883a 	add	r2,r3,r2
   41760:	11000117 	ldw	r4,4(r2)
   41764:	e0bff417 	ldw	r2,-48(fp)
   41768:	100490fa 	slli	r2,r2,3
   4176c:	1007883a 	mov	r3,r2
   41770:	e0bffd17 	ldw	r2,-12(fp)
   41774:	1885883a 	add	r2,r3,r2
   41778:	10800117 	ldw	r2,4(r2)
   4177c:	100b883a 	mov	r5,r2
   41780:	00429f40 	call	429f4 <__subsf3>
   41784:	e0bffc15 	stw	r2,-16(fp)
        (Y[lower_leg]).real=((temp2.real*(w[index]).real-temp2.imag*(w[index]).imag));
   41788:	e0bff417 	ldw	r2,-48(fp)
   4178c:	100490fa 	slli	r2,r2,3
   41790:	1007883a 	mov	r3,r2
   41794:	e0bffd17 	ldw	r2,-12(fp)
   41798:	18a1883a 	add	r16,r3,r2
   4179c:	e13ffb17 	ldw	r4,-20(fp)
   417a0:	e0bff117 	ldw	r2,-60(fp)
   417a4:	100490fa 	slli	r2,r2,3
   417a8:	1007883a 	mov	r3,r2
   417ac:	e0bfff17 	ldw	r2,-4(fp)
   417b0:	1885883a 	add	r2,r3,r2
   417b4:	10800017 	ldw	r2,0(r2)
   417b8:	100b883a 	mov	r5,r2
   417bc:	0042ac80 	call	42ac8 <__mulsf3>
   417c0:	1023883a 	mov	r17,r2
   417c4:	e13ffc17 	ldw	r4,-16(fp)
   417c8:	e0bff117 	ldw	r2,-60(fp)
   417cc:	100490fa 	slli	r2,r2,3
   417d0:	1007883a 	mov	r3,r2
   417d4:	e0bfff17 	ldw	r2,-4(fp)
   417d8:	1885883a 	add	r2,r3,r2
   417dc:	10800117 	ldw	r2,4(r2)
   417e0:	100b883a 	mov	r5,r2
   417e4:	0042ac80 	call	42ac8 <__mulsf3>
   417e8:	8809883a 	mov	r4,r17
   417ec:	100b883a 	mov	r5,r2
   417f0:	00429f40 	call	429f4 <__subsf3>
   417f4:	80800015 	stw	r2,0(r16)
        (Y[lower_leg]).imag=((temp2.real*(w[index]).imag+temp2.imag*(w[index]).real));
   417f8:	e0bff417 	ldw	r2,-48(fp)
   417fc:	100490fa 	slli	r2,r2,3
   41800:	1007883a 	mov	r3,r2
   41804:	e0bffd17 	ldw	r2,-12(fp)
   41808:	18a1883a 	add	r16,r3,r2
   4180c:	e13ffb17 	ldw	r4,-20(fp)
   41810:	e0bff117 	ldw	r2,-60(fp)
   41814:	100490fa 	slli	r2,r2,3
   41818:	1007883a 	mov	r3,r2
   4181c:	e0bfff17 	ldw	r2,-4(fp)
   41820:	1885883a 	add	r2,r3,r2
   41824:	10800117 	ldw	r2,4(r2)
   41828:	100b883a 	mov	r5,r2
   4182c:	0042ac80 	call	42ac8 <__mulsf3>
   41830:	1023883a 	mov	r17,r2
   41834:	e13ffc17 	ldw	r4,-16(fp)
   41838:	e0bff117 	ldw	r2,-60(fp)
   4183c:	100490fa 	slli	r2,r2,3
   41840:	1007883a 	mov	r3,r2
   41844:	e0bfff17 	ldw	r2,-4(fp)
   41848:	1885883a 	add	r2,r3,r2
   4184c:	10800017 	ldw	r2,0(r2)
   41850:	100b883a 	mov	r5,r2
   41854:	0042ac80 	call	42ac8 <__mulsf3>
   41858:	8809883a 	mov	r4,r17
   4185c:	100b883a 	mov	r5,r2
   41860:	0042a640 	call	42a64 <__addsf3>
   41864:	80800115 	stw	r2,4(r16)
        (Y[upper_leg]).real=temp1.real;
   41868:	e0bff517 	ldw	r2,-44(fp)
   4186c:	100490fa 	slli	r2,r2,3
   41870:	1007883a 	mov	r3,r2
   41874:	e0bffd17 	ldw	r2,-12(fp)
   41878:	1887883a 	add	r3,r3,r2
   4187c:	e0bff917 	ldw	r2,-28(fp)
   41880:	18800015 	stw	r2,0(r3)
        (Y[upper_leg]).imag=temp1.imag;
   41884:	e0bff517 	ldw	r2,-44(fp)
   41888:	100490fa 	slli	r2,r2,3
   4188c:	1007883a 	mov	r3,r2
   41890:	e0bffd17 	ldw	r2,-12(fp)
   41894:	1887883a 	add	r3,r3,r2
   41898:	e0bffa17 	ldw	r2,-24(fp)
   4189c:	18800115 	stw	r2,4(r3)
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
  {
    index=0;
    for (j=0;j<leg_diff;j++)
    {
      for (upper_leg=j;upper_leg<M;upper_leg+=(2*leg_diff))
   418a0:	e0bff317 	ldw	r2,-52(fp)
   418a4:	1085883a 	add	r2,r2,r2
   418a8:	1007883a 	mov	r3,r2
   418ac:	e0bff517 	ldw	r2,-44(fp)
   418b0:	10c5883a 	add	r2,r2,r3
   418b4:	e0bff515 	stw	r2,-44(fp)
   418b8:	e0fff517 	ldw	r3,-44(fp)
   418bc:	e0bffe17 	ldw	r2,-8(fp)
   418c0:	18bf7116 	blt	r3,r2,41688 <fft+0x90>
        (Y[lower_leg]).real=((temp2.real*(w[index]).real-temp2.imag*(w[index]).imag));
        (Y[lower_leg]).imag=((temp2.real*(w[index]).imag+temp2.imag*(w[index]).real));
        (Y[upper_leg]).real=temp1.real;
        (Y[upper_leg]).imag=temp1.imag;
      }
      index+=step;
   418c4:	e0fff117 	ldw	r3,-60(fp)
   418c8:	e0bff017 	ldw	r2,-64(fp)
   418cc:	1885883a 	add	r2,r3,r2
   418d0:	e0bff115 	stw	r2,-60(fp)
  leg_diff=M/2;                 //starting difference between upper & lower legs
  step=2;                     //step between values in twiddle.h              
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
  {
    index=0;
    for (j=0;j<leg_diff;j++)
   418d4:	e0bff717 	ldw	r2,-36(fp)
   418d8:	10800044 	addi	r2,r2,1
   418dc:	e0bff715 	stw	r2,-36(fp)
   418e0:	e0fff717 	ldw	r3,-36(fp)
   418e4:	e0bff317 	ldw	r2,-52(fp)
   418e8:	18bf6416 	blt	r3,r2,4167c <fft+0x84>
        (Y[upper_leg]).real=temp1.real;
        (Y[upper_leg]).imag=temp1.imag;
      }
      index+=step;
    }
    leg_diff=leg_diff/2;
   418ec:	e0fff317 	ldw	r3,-52(fp)
   418f0:	1804d7fa 	srli	r2,r3,31
   418f4:	10c5883a 	add	r2,r2,r3
   418f8:	1005d07a 	srai	r2,r2,1
   418fc:	e0bff315 	stw	r2,-52(fp)
    step*=2;
   41900:	e0bff017 	ldw	r2,-64(fp)
   41904:	1085883a 	add	r2,r2,r2
   41908:	e0bff015 	stw	r2,-64(fp)
    i=i*2;
  } while (i!=M);

  leg_diff=M/2;                 //starting difference between upper & lower legs
  step=2;                     //step between values in twiddle.h              
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
   4190c:	e0bff817 	ldw	r2,-32(fp)
   41910:	10800044 	addi	r2,r2,1
   41914:	e0bff815 	stw	r2,-32(fp)
   41918:	e0fff817 	ldw	r3,-32(fp)
   4191c:	e0bff217 	ldw	r2,-56(fp)
   41920:	18bf5316 	blt	r3,r2,41670 <fft+0x78>
    }
    leg_diff=leg_diff/2;
    step*=2;
  }

  j=0;
   41924:	e03ff715 	stw	zero,-36(fp)
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
   41928:	00800044 	movi	r2,1
   4192c:	e0bff815 	stw	r2,-32(fp)
   41930:	00005006 	br	41a74 <fft+0x47c>
  {
    k=M/2;
   41934:	e0fffe17 	ldw	r3,-8(fp)
   41938:	1804d7fa 	srli	r2,r3,31
   4193c:	10c5883a 	add	r2,r2,r3
   41940:	1005d07a 	srai	r2,r2,1
   41944:	e0bff615 	stw	r2,-40(fp)
    while (k<=j)
   41948:	00000906 	br	41970 <fft+0x378>
    {
      j=j-k;
   4194c:	e0fff717 	ldw	r3,-36(fp)
   41950:	e0bff617 	ldw	r2,-40(fp)
   41954:	1885c83a 	sub	r2,r3,r2
   41958:	e0bff715 	stw	r2,-36(fp)
      k=k/2;
   4195c:	e0fff617 	ldw	r3,-40(fp)
   41960:	1804d7fa 	srli	r2,r3,31
   41964:	10c5883a 	add	r2,r2,r3
   41968:	1005d07a 	srai	r2,r2,1
   4196c:	e0bff615 	stw	r2,-40(fp)

  j=0;
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
  {
    k=M/2;
    while (k<=j)
   41970:	e0fff617 	ldw	r3,-40(fp)
   41974:	e0bff717 	ldw	r2,-36(fp)
   41978:	10fff40e 	bge	r2,r3,4194c <fft+0x354>
    {
      j=j-k;
      k=k/2;
    }
    j=j+k;
   4197c:	e0fff717 	ldw	r3,-36(fp)
   41980:	e0bff617 	ldw	r2,-40(fp)
   41984:	1885883a 	add	r2,r3,r2
   41988:	e0bff715 	stw	r2,-36(fp)
    if (i<j)
   4198c:	e0fff817 	ldw	r3,-32(fp)
   41990:	e0bff717 	ldw	r2,-36(fp)
   41994:	1880340e 	bge	r3,r2,41a68 <fft+0x470>
    {
      temp1.real=(Y[j]).real;
   41998:	e0bff717 	ldw	r2,-36(fp)
   4199c:	100490fa 	slli	r2,r2,3
   419a0:	1007883a 	mov	r3,r2
   419a4:	e0bffd17 	ldw	r2,-12(fp)
   419a8:	1885883a 	add	r2,r3,r2
   419ac:	10800017 	ldw	r2,0(r2)
   419b0:	e0bff915 	stw	r2,-28(fp)
      temp1.imag=(Y[j]).imag;
   419b4:	e0bff717 	ldw	r2,-36(fp)
   419b8:	100490fa 	slli	r2,r2,3
   419bc:	1007883a 	mov	r3,r2
   419c0:	e0bffd17 	ldw	r2,-12(fp)
   419c4:	1885883a 	add	r2,r3,r2
   419c8:	10800117 	ldw	r2,4(r2)
   419cc:	e0bffa15 	stw	r2,-24(fp)
      (Y[j]).real=(Y[i]).real;
   419d0:	e0bff717 	ldw	r2,-36(fp)
   419d4:	100490fa 	slli	r2,r2,3
   419d8:	1007883a 	mov	r3,r2
   419dc:	e0bffd17 	ldw	r2,-12(fp)
   419e0:	1889883a 	add	r4,r3,r2
   419e4:	e0bff817 	ldw	r2,-32(fp)
   419e8:	100490fa 	slli	r2,r2,3
   419ec:	1007883a 	mov	r3,r2
   419f0:	e0bffd17 	ldw	r2,-12(fp)
   419f4:	1885883a 	add	r2,r3,r2
   419f8:	10800017 	ldw	r2,0(r2)
   419fc:	20800015 	stw	r2,0(r4)
      (Y[j]).imag=(Y[i]).imag;
   41a00:	e0bff717 	ldw	r2,-36(fp)
   41a04:	100490fa 	slli	r2,r2,3
   41a08:	1007883a 	mov	r3,r2
   41a0c:	e0bffd17 	ldw	r2,-12(fp)
   41a10:	1889883a 	add	r4,r3,r2
   41a14:	e0bff817 	ldw	r2,-32(fp)
   41a18:	100490fa 	slli	r2,r2,3
   41a1c:	1007883a 	mov	r3,r2
   41a20:	e0bffd17 	ldw	r2,-12(fp)
   41a24:	1885883a 	add	r2,r3,r2
   41a28:	10800117 	ldw	r2,4(r2)
   41a2c:	20800115 	stw	r2,4(r4)
      (Y[i]).real=temp1.real;
   41a30:	e0bff817 	ldw	r2,-32(fp)
   41a34:	100490fa 	slli	r2,r2,3
   41a38:	1007883a 	mov	r3,r2
   41a3c:	e0bffd17 	ldw	r2,-12(fp)
   41a40:	1887883a 	add	r3,r3,r2
   41a44:	e0bff917 	ldw	r2,-28(fp)
   41a48:	18800015 	stw	r2,0(r3)
      (Y[i]).imag=temp1.imag;
   41a4c:	e0bff817 	ldw	r2,-32(fp)
   41a50:	100490fa 	slli	r2,r2,3
   41a54:	1007883a 	mov	r3,r2
   41a58:	e0bffd17 	ldw	r2,-12(fp)
   41a5c:	1887883a 	add	r3,r3,r2
   41a60:	e0bffa17 	ldw	r2,-24(fp)
   41a64:	18800115 	stw	r2,4(r3)
    leg_diff=leg_diff/2;
    step*=2;
  }

  j=0;
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
   41a68:	e0bff817 	ldw	r2,-32(fp)
   41a6c:	10800044 	addi	r2,r2,1
   41a70:	e0bff815 	stw	r2,-32(fp)
   41a74:	e0bffe17 	ldw	r2,-8(fp)
   41a78:	10ffffc4 	addi	r3,r2,-1
   41a7c:	e0bff817 	ldw	r2,-32(fp)
   41a80:	10ffac16 	blt	r2,r3,41934 <fft+0x33c>
      (Y[i]).imag=temp1.imag;
    }
  }

  return;
}                                 //end of fft()
   41a84:	e037883a 	mov	sp,fp
   41a88:	dfc00317 	ldw	ra,12(sp)
   41a8c:	df000217 	ldw	fp,8(sp)
   41a90:	dc400117 	ldw	r17,4(sp)
   41a94:	dc000017 	ldw	r16,0(sp)
   41a98:	dec00404 	addi	sp,sp,16
   41a9c:	f800283a 	ret

00041aa0 <handle_switch0_interrupt>:
/*uart object*/
extern int uart;

//RIGHT CHANNEL SWITCH
int left_on = 1;
static void handle_switch0_interrupt(void* context, alt_u32 id) {
   41aa0:	defffb04 	addi	sp,sp,-20
   41aa4:	dfc00415 	stw	ra,16(sp)
   41aa8:	df000315 	stw	fp,12(sp)
   41aac:	df000304 	addi	fp,sp,12
   41ab0:	e13ffe15 	stw	r4,-8(fp)
   41ab4:	e17fff15 	stw	r5,-4(fp)
	 volatile int* switch0ptr = (volatile int *)context;
   41ab8:	e0bffe17 	ldw	r2,-8(fp)
   41abc:	e0bffd15 	stw	r2,-12(fp)
	 *switch0ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE);
   41ac0:	00800234 	movhi	r2,8
   41ac4:	10848304 	addi	r2,r2,4620
   41ac8:	10c00037 	ldwio	r3,0(r2)
   41acc:	e0bffd17 	ldw	r2,-12(fp)
   41ad0:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0);
   41ad4:	00800234 	movhi	r2,8
   41ad8:	10848304 	addi	r2,r2,4620
   41adc:	10000035 	stwio	zero,0(r2)

	 // Set mute state
	 left_on = IORD_ALTERA_AVALON_PIO_DATA(SWITCH0_BASE);
   41ae0:	00800234 	movhi	r2,8
   41ae4:	10848004 	addi	r2,r2,4608
   41ae8:	10800037 	ldwio	r2,0(r2)
   41aec:	d0a00015 	stw	r2,-32768(gp)
	 printf("Right : %d\n", left_on);
   41af0:	d1600017 	ldw	r5,-32768(gp)
   41af4:	01000174 	movhi	r4,5
   41af8:	213f6b04 	addi	r4,r4,-596
   41afc:	00434e80 	call	434e8 <printf>
}
   41b00:	e037883a 	mov	sp,fp
   41b04:	dfc00117 	ldw	ra,4(sp)
   41b08:	df000017 	ldw	fp,0(sp)
   41b0c:	dec00204 	addi	sp,sp,8
   41b10:	f800283a 	ret

00041b14 <handle_switch1_interrupt>:

//LEFT CHANNEL SWITCH
int right_on = 1;
static void handle_switch1_interrupt(void* context, alt_u32 id) {
   41b14:	defffb04 	addi	sp,sp,-20
   41b18:	dfc00415 	stw	ra,16(sp)
   41b1c:	df000315 	stw	fp,12(sp)
   41b20:	df000304 	addi	fp,sp,12
   41b24:	e13ffe15 	stw	r4,-8(fp)
   41b28:	e17fff15 	stw	r5,-4(fp)
	 volatile int* switch1ptr = (volatile int *)context;
   41b2c:	e0bffe17 	ldw	r2,-8(fp)
   41b30:	e0bffd15 	stw	r2,-12(fp)
	 *switch1ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE);
   41b34:	00800234 	movhi	r2,8
   41b38:	10844704 	addi	r2,r2,4380
   41b3c:	10c00037 	ldwio	r3,0(r2)
   41b40:	e0bffd17 	ldw	r2,-12(fp)
   41b44:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE, 0);
   41b48:	00800234 	movhi	r2,8
   41b4c:	10844704 	addi	r2,r2,4380
   41b50:	10000035 	stwio	zero,0(r2)

	 // Set mute state
	 right_on = IORD_ALTERA_AVALON_PIO_DATA(SWITCH1_BASE);
   41b54:	00800234 	movhi	r2,8
   41b58:	10844404 	addi	r2,r2,4368
   41b5c:	10800037 	ldwio	r2,0(r2)
   41b60:	d0a00115 	stw	r2,-32764(gp)
	 printf("Left : %d\n", right_on);
   41b64:	d1600117 	ldw	r5,-32764(gp)
   41b68:	01000174 	movhi	r4,5
   41b6c:	213f6e04 	addi	r4,r4,-584
   41b70:	00434e80 	call	434e8 <printf>

}
   41b74:	e037883a 	mov	sp,fp
   41b78:	dfc00117 	ldw	ra,4(sp)
   41b7c:	df000017 	ldw	fp,0(sp)
   41b80:	dec00204 	addi	sp,sp,8
   41b84:	f800283a 	ret

00041b88 <handle_key0_interrupt>:

/* Enable the flag to send recent
 * channel buffer to host computer.
 */
static void handle_key0_interrupt(void* context, alt_u32 id) {
   41b88:	defff404 	addi	sp,sp,-48
   41b8c:	df000b15 	stw	fp,44(sp)
   41b90:	df000b04 	addi	fp,sp,44
   41b94:	e13ffe15 	stw	r4,-8(fp)
   41b98:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key0ptr = (volatile int *)context;
   41b9c:	e0bffe17 	ldw	r2,-8(fp)
   41ba0:	e0bffd15 	stw	r2,-12(fp)
	 *key0ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE);
   41ba4:	00800234 	movhi	r2,8
   41ba8:	10847f04 	addi	r2,r2,4604
   41bac:	10c00037 	ldwio	r3,0(r2)
   41bb0:	e0bffd17 	ldw	r2,-12(fp)
   41bb4:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE, 0);
   41bb8:	00800234 	movhi	r2,8
   41bbc:	10847f04 	addi	r2,r2,4604
   41bc0:	10000035 	stwio	zero,0(r2)

	 uartStartSendFlag = 1;
   41bc4:	00c00174 	movhi	r3,5
   41bc8:	18ce4d04 	addi	r3,r3,14644
   41bcc:	00800044 	movi	r2,1
   41bd0:	18800015 	stw	r2,0(r3)
	 alt_irq_disable(leftready_id);
   41bd4:	00800174 	movhi	r2,5
   41bd8:	10873304 	addi	r2,r2,7372
   41bdc:	10800017 	ldw	r2,0(r2)
   41be0:	e0bffb15 	stw	r2,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41be4:	0005303a 	rdctl	r2,status
   41be8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41bec:	e0fffa17 	ldw	r3,-24(fp)
   41bf0:	00bfff84 	movi	r2,-2
   41bf4:	1884703a 	and	r2,r3,r2
   41bf8:	1001703a 	wrctl	status,r2
  
  return context;
   41bfc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41c00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   41c04:	e0fffb17 	ldw	r3,-20(fp)
   41c08:	00800044 	movi	r2,1
   41c0c:	10c4983a 	sll	r2,r2,r3
   41c10:	0084303a 	nor	r2,zero,r2
   41c14:	1007883a 	mov	r3,r2
   41c18:	00800174 	movhi	r2,5
   41c1c:	108e5a04 	addi	r2,r2,14696
   41c20:	10800017 	ldw	r2,0(r2)
   41c24:	1886703a 	and	r3,r3,r2
   41c28:	00800174 	movhi	r2,5
   41c2c:	108e5a04 	addi	r2,r2,14696
   41c30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41c34:	00800174 	movhi	r2,5
   41c38:	108e5a04 	addi	r2,r2,14696
   41c3c:	10800017 	ldw	r2,0(r2)
   41c40:	100170fa 	wrctl	ienable,r2
   41c44:	e0bffc17 	ldw	r2,-16(fp)
   41c48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41c4c:	e0bff917 	ldw	r2,-28(fp)
   41c50:	1001703a 	wrctl	status,r2
	 alt_irq_disable(rightready_id);
   41c54:	00800174 	movhi	r2,5
   41c58:	10873404 	addi	r2,r2,7376
   41c5c:	10800017 	ldw	r2,0(r2)
   41c60:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41c64:	0005303a 	rdctl	r2,status
   41c68:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41c6c:	e0fff617 	ldw	r3,-40(fp)
   41c70:	00bfff84 	movi	r2,-2
   41c74:	1884703a 	and	r2,r3,r2
   41c78:	1001703a 	wrctl	status,r2
  
  return context;
   41c7c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41c80:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active &= ~(1 << id);
   41c84:	e0fff717 	ldw	r3,-36(fp)
   41c88:	00800044 	movi	r2,1
   41c8c:	10c4983a 	sll	r2,r2,r3
   41c90:	0084303a 	nor	r2,zero,r2
   41c94:	1007883a 	mov	r3,r2
   41c98:	00800174 	movhi	r2,5
   41c9c:	108e5a04 	addi	r2,r2,14696
   41ca0:	10800017 	ldw	r2,0(r2)
   41ca4:	1886703a 	and	r3,r3,r2
   41ca8:	00800174 	movhi	r2,5
   41cac:	108e5a04 	addi	r2,r2,14696
   41cb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41cb4:	00800174 	movhi	r2,5
   41cb8:	108e5a04 	addi	r2,r2,14696
   41cbc:	10800017 	ldw	r2,0(r2)
   41cc0:	100170fa 	wrctl	ienable,r2
   41cc4:	e0bff817 	ldw	r2,-32(fp)
   41cc8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41ccc:	e0bff517 	ldw	r2,-44(fp)
   41cd0:	1001703a 	wrctl	status,r2
}
   41cd4:	e037883a 	mov	sp,fp
   41cd8:	df000017 	ldw	fp,0(sp)
   41cdc:	dec00104 	addi	sp,sp,4
   41ce0:	f800283a 	ret

00041ce4 <handle_key1_interrupt>:

/* Enable the flag to update the
 * ADC sampling frequency on AIC23.
 */
static void handle_key1_interrupt(void* context, alt_u32 id) {
   41ce4:	defffc04 	addi	sp,sp,-16
   41ce8:	df000315 	stw	fp,12(sp)
   41cec:	df000304 	addi	fp,sp,12
   41cf0:	e13ffe15 	stw	r4,-8(fp)
   41cf4:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key1ptr = (volatile int *)context;
   41cf8:	e0bffe17 	ldw	r2,-8(fp)
   41cfc:	e0bffd15 	stw	r2,-12(fp)
	 *key1ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE);
   41d00:	00800234 	movhi	r2,8
   41d04:	10847f04 	addi	r2,r2,4604
   41d08:	10c00037 	ldwio	r3,0(r2)
   41d0c:	e0bffd17 	ldw	r2,-12(fp)
   41d10:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY1_BASE, 0);
   41d14:	00800234 	movhi	r2,8
   41d18:	10845304 	addi	r2,r2,4428
   41d1c:	10000035 	stwio	zero,0(r2)

	 //IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH1_BASE, 0x01);
	 setFreqFlag = 1;
   41d20:	00c00174 	movhi	r3,5
   41d24:	18ce5004 	addi	r3,r3,14656
   41d28:	00800044 	movi	r2,1
   41d2c:	18800015 	stw	r2,0(r3)
}
   41d30:	e037883a 	mov	sp,fp
   41d34:	df000017 	ldw	fp,0(sp)
   41d38:	dec00104 	addi	sp,sp,4
   41d3c:	f800283a 	ret

00041d40 <handle_key2_interrupt>:

static void handle_key2_interrupt(void* context, alt_u32 id) {
   41d40:	defffc04 	addi	sp,sp,-16
   41d44:	df000315 	stw	fp,12(sp)
   41d48:	df000304 	addi	fp,sp,12
   41d4c:	e13ffe15 	stw	r4,-8(fp)
   41d50:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key2ptr = (volatile int *)context;
   41d54:	e0bffe17 	ldw	r2,-8(fp)
   41d58:	e0bffd15 	stw	r2,-12(fp)
	 *key2ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE);
   41d5c:	00800234 	movhi	r2,8
   41d60:	10844f04 	addi	r2,r2,4412
   41d64:	10c00037 	ldwio	r3,0(r2)
   41d68:	e0bffd17 	ldw	r2,-12(fp)
   41d6c:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE, 0);
   41d70:	00800234 	movhi	r2,8
   41d74:	10844f04 	addi	r2,r2,4412
   41d78:	10000035 	stwio	zero,0(r2)

}
   41d7c:	e037883a 	mov	sp,fp
   41d80:	df000017 	ldw	fp,0(sp)
   41d84:	dec00104 	addi	sp,sp,4
   41d88:	f800283a 	ret

00041d8c <handle_key3_interrupt>:

static void handle_key3_interrupt(void* context, alt_u32 id) {
   41d8c:	defffc04 	addi	sp,sp,-16
   41d90:	df000315 	stw	fp,12(sp)
   41d94:	df000304 	addi	fp,sp,12
   41d98:	e13ffe15 	stw	r4,-8(fp)
   41d9c:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key3ptr = (volatile int *)context;
   41da0:	e0bffe17 	ldw	r2,-8(fp)
   41da4:	e0bffd15 	stw	r2,-12(fp)
	 *key3ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE);
   41da8:	00800234 	movhi	r2,8
   41dac:	10844b04 	addi	r2,r2,4396
   41db0:	10c00037 	ldwio	r3,0(r2)
   41db4:	e0bffd17 	ldw	r2,-12(fp)
   41db8:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE, 0);
   41dbc:	00800234 	movhi	r2,8
   41dc0:	10844b04 	addi	r2,r2,4396
   41dc4:	10000035 	stwio	zero,0(r2)

	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x10);
   41dc8:	00c00234 	movhi	r3,8
   41dcc:	18c48404 	addi	r3,r3,4624
   41dd0:	00800404 	movi	r2,16
   41dd4:	18800035 	stwio	r2,0(r3)
}
   41dd8:	e037883a 	mov	sp,fp
   41ddc:	df000017 	ldw	fp,0(sp)
   41de0:	dec00104 	addi	sp,sp,4
   41de4:	f800283a 	ret

00041de8 <unsigned2signed>:
 *  store in buffer,
 *  instantly play back.
 *
 */

int unsigned2signed(alt_16 unsign){
   41de8:	defffd04 	addi	sp,sp,-12
   41dec:	df000215 	stw	fp,8(sp)
   41df0:	df000204 	addi	fp,sp,8
   41df4:	e13fff0d 	sth	r4,-4(fp)
	int result;
	if(unsign>32767)
		result = unsign - 65536;
	else
		result = unsign;
   41df8:	e0bfff0f 	ldh	r2,-4(fp)
   41dfc:	e0bffe15 	stw	r2,-8(fp)
	return result;
   41e00:	e0bffe17 	ldw	r2,-8(fp)
}
   41e04:	e037883a 	mov	sp,fp
   41e08:	df000017 	ldw	fp,0(sp)
   41e0c:	dec00104 	addi	sp,sp,4
   41e10:	f800283a 	ret

00041e14 <signed2unsigned>:

alt_16 signed2unsigned(int sign){
   41e14:	defffd04 	addi	sp,sp,-12
   41e18:	df000215 	stw	fp,8(sp)
   41e1c:	df000204 	addi	fp,sp,8
   41e20:	e13fff15 	stw	r4,-4(fp)
	alt_16 result;
	if(sign<0)
   41e24:	e0bfff17 	ldw	r2,-4(fp)
   41e28:	1004403a 	cmpge	r2,r2,zero
   41e2c:	1000031e 	bne	r2,zero,41e3c <signed2unsigned+0x28>
		result = sign + 65536;
   41e30:	e0bfff17 	ldw	r2,-4(fp)
   41e34:	e0bffe0d 	sth	r2,-8(fp)
   41e38:	00000206 	br	41e44 <signed2unsigned+0x30>
	else
		result = sign;
   41e3c:	e0bfff17 	ldw	r2,-4(fp)
   41e40:	e0bffe0d 	sth	r2,-8(fp)
	return result;
   41e44:	e0bffe0f 	ldh	r2,-8(fp)
}
   41e48:	e037883a 	mov	sp,fp
   41e4c:	df000017 	ldw	fp,0(sp)
   41e50:	dec00104 	addi	sp,sp,4
   41e54:	f800283a 	ret

00041e58 <handle_leftready_interrupt_test>:

static void handle_leftready_interrupt_test(void* context, alt_u32 id) {
   41e58:	defffb04 	addi	sp,sp,-20
   41e5c:	df000415 	stw	fp,16(sp)
   41e60:	df000404 	addi	fp,sp,16
   41e64:	e13ffd15 	stw	r4,-12(fp)
   41e68:	e17ffe15 	stw	r5,-8(fp)
	 volatile int* leftreadyptr = (volatile int *)context;
   41e6c:	e0bffd17 	ldw	r2,-12(fp)
   41e70:	e0bffc15 	stw	r2,-16(fp)
	 *leftreadyptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE);
   41e74:	00800234 	movhi	r2,8
   41e78:	10842b04 	addi	r2,r2,4268
   41e7c:	10c00037 	ldwio	r3,0(r2)
   41e80:	e0bffc17 	ldw	r2,-16(fp)
   41e84:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE, 0);
   41e88:	00800234 	movhi	r2,8
   41e8c:	10842b04 	addi	r2,r2,4268
   41e90:	10000035 	stwio	zero,0(r2)
	 /*******Read, playback, store data*******/
	 leftChannel = IORD_ALTERA_AVALON_PIO_DATA(LEFTDATA_BASE);
   41e94:	00800234 	movhi	r2,8
   41e98:	10843004 	addi	r2,r2,4288
   41e9c:	10c00037 	ldwio	r3,0(r2)
   41ea0:	00800174 	movhi	r2,5
   41ea4:	108e4504 	addi	r2,r2,14612
   41ea8:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(LEFTSENDDATA_BASE, left_on*leftChannel);
   41eac:	d0e00017 	ldw	r3,-32768(gp)
   41eb0:	00800174 	movhi	r2,5
   41eb4:	108e4504 	addi	r2,r2,14612
   41eb8:	10800017 	ldw	r2,0(r2)
   41ebc:	1887383a 	mul	r3,r3,r2
   41ec0:	00800234 	movhi	r2,8
   41ec4:	10842004 	addi	r2,r2,4224
   41ec8:	10c00035 	stwio	r3,0(r2)
	 datatest[leftCount] = leftChannel;
   41ecc:	00800174 	movhi	r2,5
   41ed0:	108e4904 	addi	r2,r2,14628
   41ed4:	11000017 	ldw	r4,0(r2)
   41ed8:	00800174 	movhi	r2,5
   41edc:	108e4504 	addi	r2,r2,14612
   41ee0:	10800017 	ldw	r2,0(r2)
   41ee4:	100b883a 	mov	r5,r2
   41ee8:	00c00174 	movhi	r3,5
   41eec:	18ce6a04 	addi	r3,r3,14760
   41ef0:	2105883a 	add	r2,r4,r4
   41ef4:	10c5883a 	add	r2,r2,r3
   41ef8:	1140000d 	sth	r5,0(r2)
	 if (left_on) {
   41efc:	d0a00017 	ldw	r2,-32768(gp)
   41f00:	1005003a 	cmpeq	r2,r2,zero
   41f04:	1000081e 	bne	r2,zero,41f28 <handle_leftready_interrupt_test+0xd0>
		 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) | 0x01); // LED ON
   41f08:	00800234 	movhi	r2,8
   41f0c:	10848404 	addi	r2,r2,4624
   41f10:	10800037 	ldwio	r2,0(r2)
   41f14:	10c00054 	ori	r3,r2,1
   41f18:	00800234 	movhi	r2,8
   41f1c:	10848404 	addi	r2,r2,4624
   41f20:	10c00035 	stwio	r3,0(r2)
   41f24:	00000806 	br	41f48 <handle_leftready_interrupt_test+0xf0>
	 } else {
		 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) & ~0x01); // LED OFF
   41f28:	00800234 	movhi	r2,8
   41f2c:	10848404 	addi	r2,r2,4624
   41f30:	10c00037 	ldwio	r3,0(r2)
   41f34:	00bfff84 	movi	r2,-2
   41f38:	1886703a 	and	r3,r3,r2
   41f3c:	00800234 	movhi	r2,8
   41f40:	10848404 	addi	r2,r2,4624
   41f44:	10c00035 	stwio	r3,0(r2)
	 }
	 leftCount = (leftCount+1)%256;
   41f48:	00800174 	movhi	r2,5
   41f4c:	108e4904 	addi	r2,r2,14628
   41f50:	10800017 	ldw	r2,0(r2)
   41f54:	10c00044 	addi	r3,r2,1
   41f58:	00a00034 	movhi	r2,32768
   41f5c:	10803fc4 	addi	r2,r2,255
   41f60:	1886703a 	and	r3,r3,r2
   41f64:	e0ffff15 	stw	r3,-4(fp)
   41f68:	e0ffff17 	ldw	r3,-4(fp)
   41f6c:	1804403a 	cmpge	r2,r3,zero
   41f70:	10000a1e 	bne	r2,zero,41f9c <handle_leftready_interrupt_test+0x144>
   41f74:	e0bfff17 	ldw	r2,-4(fp)
   41f78:	10bfffc4 	addi	r2,r2,-1
   41f7c:	e0bfff15 	stw	r2,-4(fp)
   41f80:	00bfc004 	movi	r2,-256
   41f84:	e0ffff17 	ldw	r3,-4(fp)
   41f88:	1886b03a 	or	r3,r3,r2
   41f8c:	e0ffff15 	stw	r3,-4(fp)
   41f90:	e0bfff17 	ldw	r2,-4(fp)
   41f94:	10800044 	addi	r2,r2,1
   41f98:	e0bfff15 	stw	r2,-4(fp)
   41f9c:	e0ffff17 	ldw	r3,-4(fp)
   41fa0:	00800174 	movhi	r2,5
   41fa4:	108e4904 	addi	r2,r2,14628
   41fa8:	10c00015 	stw	r3,0(r2)
//	 /****************************************/

}
   41fac:	e037883a 	mov	sp,fp
   41fb0:	df000017 	ldw	fp,0(sp)
   41fb4:	dec00104 	addi	sp,sp,4
   41fb8:	f800283a 	ret

00041fbc <handle_rightready_interrupt_test>:
/*  Detect right channel ready interrupt and do:
 *  Collect data,
 *  store in buffer,
 *  instantly play back.
 */
static void handle_rightready_interrupt_test(void* context, alt_u32 id) {
   41fbc:	defffb04 	addi	sp,sp,-20
   41fc0:	dfc00415 	stw	ra,16(sp)
   41fc4:	df000315 	stw	fp,12(sp)
   41fc8:	df000304 	addi	fp,sp,12
   41fcc:	e13ffe15 	stw	r4,-8(fp)
   41fd0:	e17fff15 	stw	r5,-4(fp)
	 volatile int* rightreadyptr = (volatile int *)context;
   41fd4:	e0bffe17 	ldw	r2,-8(fp)
   41fd8:	e0bffd15 	stw	r2,-12(fp)
	 *rightreadyptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE);
   41fdc:	00800234 	movhi	r2,8
   41fe0:	10842704 	addi	r2,r2,4252
   41fe4:	10c00037 	ldwio	r3,0(r2)
   41fe8:	e0bffd17 	ldw	r2,-12(fp)
   41fec:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE, 0);
   41ff0:	00800234 	movhi	r2,8
   41ff4:	10842704 	addi	r2,r2,4252
   41ff8:	10000035 	stwio	zero,0(r2)
	 /*******Read, playback, store data*******/
	 rightChannel = IORD_ALTERA_AVALON_PIO_DATA(RIGHTDATA_BASE);
   41ffc:	00800234 	movhi	r2,8
   42000:	10842c04 	addi	r2,r2,4272
   42004:	10c00037 	ldwio	r3,0(r2)
   42008:	00800174 	movhi	r2,5
   4200c:	108e4604 	addi	r2,r2,14616
   42010:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(RIGHTSENDDATA_BASE, right_on*rightChannel);
   42014:	d0e00117 	ldw	r3,-32764(gp)
   42018:	00800174 	movhi	r2,5
   4201c:	108e4604 	addi	r2,r2,14616
   42020:	10800017 	ldw	r2,0(r2)
   42024:	1887383a 	mul	r3,r3,r2
   42028:	00800234 	movhi	r2,8
   4202c:	10841c04 	addi	r2,r2,4208
   42030:	10c00035 	stwio	r3,0(r2)
	 rightChannelData[rightCount] = rightChannel;
   42034:	00800174 	movhi	r2,5
   42038:	108e4b04 	addi	r2,r2,14636
   4203c:	11000017 	ldw	r4,0(r2)
   42040:	00800174 	movhi	r2,5
   42044:	108e4604 	addi	r2,r2,14616
   42048:	10800017 	ldw	r2,0(r2)
   4204c:	100b883a 	mov	r5,r2
   42050:	00c00174 	movhi	r3,5
   42054:	18d3e004 	addi	r3,r3,20352
   42058:	2105883a 	add	r2,r4,r4
   4205c:	10c5883a 	add	r2,r2,r3
   42060:	1140000d 	sth	r5,0(r2)
	 if (right_on) {
   42064:	d0a00117 	ldw	r2,-32764(gp)
   42068:	1005003a 	cmpeq	r2,r2,zero
   4206c:	1000081e 	bne	r2,zero,42090 <handle_rightready_interrupt_test+0xd4>
		 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) | 0x02); // LED ON
   42070:	00800234 	movhi	r2,8
   42074:	10848404 	addi	r2,r2,4624
   42078:	10800037 	ldwio	r2,0(r2)
   4207c:	10c00094 	ori	r3,r2,2
   42080:	00800234 	movhi	r2,8
   42084:	10848404 	addi	r2,r2,4624
   42088:	10c00035 	stwio	r3,0(r2)
   4208c:	00000806 	br	420b0 <handle_rightready_interrupt_test+0xf4>
	 } else {
		 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) & ~0x02); // LED OFF
   42090:	00800234 	movhi	r2,8
   42094:	10848404 	addi	r2,r2,4624
   42098:	10c00037 	ldwio	r3,0(r2)
   4209c:	00bfff44 	movi	r2,-3
   420a0:	1886703a 	and	r3,r3,r2
   420a4:	00800234 	movhi	r2,8
   420a8:	10848404 	addi	r2,r2,4624
   420ac:	10c00035 	stwio	r3,0(r2)
	 }
	 rightCount = (rightCount+1) % BUFFERSIZE;
   420b0:	00800174 	movhi	r2,5
   420b4:	108e4b04 	addi	r2,r2,14636
   420b8:	10800017 	ldw	r2,0(r2)
   420bc:	11000044 	addi	r4,r2,1
   420c0:	014006c4 	movi	r5,27
   420c4:	0042ea40 	call	42ea4 <__modsi3>
   420c8:	1007883a 	mov	r3,r2
   420cc:	00800174 	movhi	r2,5
   420d0:	108e4b04 	addi	r2,r2,14636
   420d4:	10c00015 	stw	r3,0(r2)
	 /****************************************/
}
   420d8:	e037883a 	mov	sp,fp
   420dc:	dfc00117 	ldw	ra,4(sp)
   420e0:	df000017 	ldw	fp,0(sp)
   420e4:	dec00204 	addi	sp,sp,8
   420e8:	f800283a 	ret

000420ec <system_initialization>:

/*uart object*/
int uart;

/*System initialization function. Should be called before your while(1)*/
void system_initialization(){
   420ec:	defffe04 	addi	sp,sp,-8
   420f0:	dfc00115 	stw	ra,4(sp)
   420f4:	df000015 	stw	fp,0(sp)
   420f8:	d839883a 	mov	fp,sp
	/*Hard-code to 1 right here, you can use ISR
	 *to change the value by yourself
	*/
	uartStartRecvFlag = 1;
   420fc:	00800044 	movi	r2,1
   42100:	d0a72315 	stw	r2,-25460(gp)

	 /*Open Uart port and ready to transmit and receive*/
	 uart = open(UART_NAME, O_ACCMODE);
   42104:	01000174 	movhi	r4,5
   42108:	213f7104 	addi	r4,r4,-572
   4210c:	014000c4 	movi	r5,3
   42110:	004d2040 	call	4d204 <open>
   42114:	d0a72615 	stw	r2,-25448(gp)
	 if(!uart){
   42118:	d0a72617 	ldw	r2,-25448(gp)
   4211c:	1004c03a 	cmpne	r2,r2,zero
   42120:	1000041e 	bne	r2,zero,42134 <system_initialization+0x48>
		 printf("failed to open uart\n");
   42124:	01000174 	movhi	r4,5
   42128:	213f7404 	addi	r4,r4,-560
   4212c:	00436000 	call	43600 <puts>
   42130:	00000306 	br	42140 <system_initialization+0x54>
		 //return 0;
	 } else {
		 printf("Uart ready!\n");
   42134:	01000174 	movhi	r4,5
   42138:	213f7904 	addi	r4,r4,-540
   4213c:	00436000 	call	43600 <puts>
	 }

	 //Interrupts Registrations
	 alt_irq_register(switch0_id, (void *)&switch0, handle_switch0_interrupt);
   42140:	d1200217 	ldw	r4,-32760(gp)
   42144:	01800134 	movhi	r6,4
   42148:	3186a804 	addi	r6,r6,6816
   4214c:	d1671204 	addi	r5,gp,-25528
   42150:	004cb600 	call	4cb60 <alt_irq_register>
	 alt_irq_register(switch1_id, (void *)&switch1, handle_switch1_interrupt);
   42154:	d1200317 	ldw	r4,-32756(gp)
   42158:	01800134 	movhi	r6,4
   4215c:	3186c504 	addi	r6,r6,6932
   42160:	d1671304 	addi	r5,gp,-25524
   42164:	004cb600 	call	4cb60 <alt_irq_register>
	 alt_irq_register(key0_id, (void *)&key0, handle_key0_interrupt);
   42168:	d1200417 	ldw	r4,-32752(gp)
   4216c:	01800134 	movhi	r6,4
   42170:	3186e204 	addi	r6,r6,7048
   42174:	d1671404 	addi	r5,gp,-25520
   42178:	004cb600 	call	4cb60 <alt_irq_register>
	 alt_irq_register(key1_id, (void *)&key1, handle_key1_interrupt);
   4217c:	d1200517 	ldw	r4,-32748(gp)
   42180:	01800134 	movhi	r6,4
   42184:	31873904 	addi	r6,r6,7396
   42188:	d1671504 	addi	r5,gp,-25516
   4218c:	004cb600 	call	4cb60 <alt_irq_register>
	 alt_irq_register(key2_id, (void *)&key2, handle_key2_interrupt);
   42190:	d1200617 	ldw	r4,-32744(gp)
   42194:	01800134 	movhi	r6,4
   42198:	31875004 	addi	r6,r6,7488
   4219c:	d1671604 	addi	r5,gp,-25512
   421a0:	004cb600 	call	4cb60 <alt_irq_register>
	 alt_irq_register(key3_id, (void *)&key3, handle_key3_interrupt);
   421a4:	d1200717 	ldw	r4,-32740(gp)
   421a8:	01800134 	movhi	r6,4
   421ac:	31876304 	addi	r6,r6,7564
   421b0:	d1671704 	addi	r5,gp,-25508
   421b4:	004cb600 	call	4cb60 <alt_irq_register>
	 alt_irq_register(leftready_id, (void *)&leftready, handle_leftready_interrupt_test);
   421b8:	d1200817 	ldw	r4,-32736(gp)
   421bc:	01800134 	movhi	r6,4
   421c0:	31879604 	addi	r6,r6,7768
   421c4:	d1671804 	addi	r5,gp,-25504
   421c8:	004cb600 	call	4cb60 <alt_irq_register>
	 alt_irq_register(rightready_id, (void *)&rightready, handle_rightready_interrupt_test);
   421cc:	d1200917 	ldw	r4,-32732(gp)
   421d0:	01800134 	movhi	r6,4
   421d4:	3187ef04 	addi	r6,r6,8124
   421d8:	d1671904 	addi	r5,gp,-25500
   421dc:	004cb600 	call	4cb60 <alt_irq_register>

	 /*Interrupt enable -> mask to enable it*/
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH0_BASE, 1);
   421e0:	00c00234 	movhi	r3,8
   421e4:	18c48204 	addi	r3,r3,4616
   421e8:	00800044 	movi	r2,1
   421ec:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH1_BASE, 1);
   421f0:	00c00234 	movhi	r3,8
   421f4:	18c44604 	addi	r3,r3,4376
   421f8:	00800044 	movi	r2,1
   421fc:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY0_BASE, 1);
   42200:	00c00234 	movhi	r3,8
   42204:	18c47e04 	addi	r3,r3,4600
   42208:	00800044 	movi	r2,1
   4220c:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY1_BASE, 1);
   42210:	00c00234 	movhi	r3,8
   42214:	18c45204 	addi	r3,r3,4424
   42218:	00800044 	movi	r2,1
   4221c:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY2_BASE, 1);
   42220:	00c00234 	movhi	r3,8
   42224:	18c44e04 	addi	r3,r3,4408
   42228:	00800044 	movi	r2,1
   4222c:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY3_BASE, 1);
   42230:	00c00234 	movhi	r3,8
   42234:	18c44a04 	addi	r3,r3,4392
   42238:	00800044 	movi	r2,1
   4223c:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(LEFTREADY_BASE, 1);
   42240:	00c00234 	movhi	r3,8
   42244:	18c42a04 	addi	r3,r3,4264
   42248:	00800044 	movi	r2,1
   4224c:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(RIGHTREADY_BASE, 1);
   42250:	00c00234 	movhi	r3,8
   42254:	18c42604 	addi	r3,r3,4248
   42258:	00800044 	movi	r2,1
   4225c:	18800035 	stwio	r2,0(r3)

	 /*Reset edge capture bit*/
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0);
   42260:	00800234 	movhi	r2,8
   42264:	10848304 	addi	r2,r2,4620
   42268:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE, 0);
   4226c:	00800234 	movhi	r2,8
   42270:	10844704 	addi	r2,r2,4380
   42274:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE, 0);
   42278:	00800234 	movhi	r2,8
   4227c:	10847f04 	addi	r2,r2,4604
   42280:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY1_BASE, 0);
   42284:	00800234 	movhi	r2,8
   42288:	10845304 	addi	r2,r2,4428
   4228c:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE, 0);
   42290:	00800234 	movhi	r2,8
   42294:	10844f04 	addi	r2,r2,4412
   42298:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE, 0);
   4229c:	00800234 	movhi	r2,8
   422a0:	10844b04 	addi	r2,r2,4396
   422a4:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE, 0);
   422a8:	00800234 	movhi	r2,8
   422ac:	10842b04 	addi	r2,r2,4268
   422b0:	10000035 	stwio	zero,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE, 0);
   422b4:	00800234 	movhi	r2,8
   422b8:	10842704 	addi	r2,r2,4252
   422bc:	10000035 	stwio	zero,0(r2)

	 /*turn off all LEDs*/
	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   422c0:	00800234 	movhi	r2,8
   422c4:	10848404 	addi	r2,r2,4624
   422c8:	10000035 	stwio	zero,0(r2)

	 /*initialize SPI transmission*/
	 IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 1); // ~CS low
   422cc:	00c00234 	movhi	r3,8
   422d0:	18c47404 	addi	r3,r3,4560
   422d4:	00800044 	movi	r2,1
   422d8:	18800035 	stwio	r2,0(r3)
	 IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0); // Initialize SCLK to high
   422dc:	00800234 	movhi	r2,8
   422e0:	10847004 	addi	r2,r2,4544
   422e4:	10000035 	stwio	zero,0(r2)
}
   422e8:	e037883a 	mov	sp,fp
   422ec:	dfc00117 	ldw	ra,4(sp)
   422f0:	df000017 	ldw	fp,0(sp)
   422f4:	dec00204 	addi	sp,sp,8
   422f8:	f800283a 	ret

000422fc <main>:


int main(void) {
   422fc:	defffe04 	addi	sp,sp,-8
   42300:	dfc00115 	stw	ra,4(sp)
   42304:	df000015 	stw	fp,0(sp)
   42308:	d839883a 	mov	fp,sp
	 system_initialization();
   4230c:	00420ec0 	call	420ec <system_initialization>
     // set frequency
	 //sampleFrequency = 0x000C; //8k
	 //sampleFrequency = 0x0019; //32k
	 sampleFrequency = 0x0023; //44.1k
   42310:	008008c4 	movi	r2,35
   42314:	d0a00b15 	stw	r2,-32724(gp)
	 //sampleFrequency = 0x0001; //48k
	 aic23_demo[8] = sampleFrequency;
   42318:	d0a00b17 	ldw	r2,-32724(gp)
   4231c:	1007883a 	mov	r3,r2
   42320:	00800174 	movhi	r2,5
   42324:	10806904 	addi	r2,r2,420
   42328:	10c00815 	stw	r3,32(r2)
	 AIC23_demo();
   4232c:	004032c0 	call	4032c <AIC23_demo>


	 /*Your main infinity while loop*/
	 while(1);
   42330:	003fff06 	br	42330 <main+0x34>

00042334 <spi_send>:

#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "delay.h"

void spi_send(unsigned int address, unsigned int data){
   42334:	defffb04 	addi	sp,sp,-20
   42338:	dfc00415 	stw	ra,16(sp)
   4233c:	df000315 	stw	fp,12(sp)
   42340:	df000304 	addi	fp,sp,12
   42344:	e13ffe15 	stw	r4,-8(fp)
   42348:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
   4234c:	e03ffd15 	stw	zero,-12(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 0); // Begin
   42350:	00800234 	movhi	r2,8
   42354:	10847404 	addi	r2,r2,4560
   42358:	10000035 	stwio	zero,0(r2)
	delay(150);
   4235c:	01002584 	movi	r4,150
   42360:	00411e80 	call	411e8 <delay>
	for(i = 0; i < 7; i++){
   42364:	e03ffd15 	stw	zero,-12(fp)
   42368:	00001f06 	br	423e8 <spi_send+0xb4>
		if((address & 0x40) != 0){
   4236c:	e0bffe17 	ldw	r2,-8(fp)
   42370:	1080100c 	andi	r2,r2,64
   42374:	1005003a 	cmpeq	r2,r2,zero
   42378:	1000051e 	bne	r2,zero,42390 <spi_send+0x5c>
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 1);
   4237c:	00c00234 	movhi	r3,8
   42380:	18c46c04 	addi	r3,r3,4528
   42384:	00800044 	movi	r2,1
   42388:	18800035 	stwio	r2,0(r3)
   4238c:	00000306 	br	4239c <spi_send+0x68>
			//printf("1");
		}else{
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 0);
   42390:	00800234 	movhi	r2,8
   42394:	10846c04 	addi	r2,r2,4528
   42398:	10000035 	stwio	zero,0(r2)
			//printf("0");
		}
		delay(1000);
   4239c:	0100fa04 	movi	r4,1000
   423a0:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
   423a4:	00c00234 	movhi	r3,8
   423a8:	18c47004 	addi	r3,r3,4544
   423ac:	00800044 	movi	r2,1
   423b0:	18800035 	stwio	r2,0(r3)
		delay(1000);
   423b4:	0100fa04 	movi	r4,1000
   423b8:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0);
   423bc:	00800234 	movhi	r2,8
   423c0:	10847004 	addi	r2,r2,4544
   423c4:	10000035 	stwio	zero,0(r2)
		delay(1000);
   423c8:	0100fa04 	movi	r4,1000
   423cc:	00411e80 	call	411e8 <delay>

		address <<= 1;
   423d0:	e0bffe17 	ldw	r2,-8(fp)
   423d4:	1085883a 	add	r2,r2,r2
   423d8:	e0bffe15 	stw	r2,-8(fp)
void spi_send(unsigned int address, unsigned int data){
	int i = 0;

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 0); // Begin
	delay(150);
	for(i = 0; i < 7; i++){
   423dc:	e0bffd17 	ldw	r2,-12(fp)
   423e0:	10800044 	addi	r2,r2,1
   423e4:	e0bffd15 	stw	r2,-12(fp)
   423e8:	e0bffd17 	ldw	r2,-12(fp)
   423ec:	108001d0 	cmplti	r2,r2,7
   423f0:	103fde1e 	bne	r2,zero,4236c <spi_send+0x38>
		delay(1000);

		address <<= 1;
	}

	for(i = 0; i < 9; i++){
   423f4:	e03ffd15 	stw	zero,-12(fp)
   423f8:	00001f06 	br	42478 <spi_send+0x144>
		if((data & 0x100) != 0){
   423fc:	e0bfff17 	ldw	r2,-4(fp)
   42400:	1080400c 	andi	r2,r2,256
   42404:	1005003a 	cmpeq	r2,r2,zero
   42408:	1000051e 	bne	r2,zero,42420 <spi_send+0xec>
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 1);
   4240c:	00c00234 	movhi	r3,8
   42410:	18c46c04 	addi	r3,r3,4528
   42414:	00800044 	movi	r2,1
   42418:	18800035 	stwio	r2,0(r3)
   4241c:	00000306 	br	4242c <spi_send+0xf8>
			//printf("1");
		}else{
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 0);
   42420:	00800234 	movhi	r2,8
   42424:	10846c04 	addi	r2,r2,4528
   42428:	10000035 	stwio	zero,0(r2)
			//printf("0");
		}
		delay(1000);
   4242c:	0100fa04 	movi	r4,1000
   42430:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
   42434:	00c00234 	movhi	r3,8
   42438:	18c47004 	addi	r3,r3,4544
   4243c:	00800044 	movi	r2,1
   42440:	18800035 	stwio	r2,0(r3)
		delay(1000);
   42444:	0100fa04 	movi	r4,1000
   42448:	00411e80 	call	411e8 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0);
   4244c:	00800234 	movhi	r2,8
   42450:	10847004 	addi	r2,r2,4544
   42454:	10000035 	stwio	zero,0(r2)
		delay(1000);
   42458:	0100fa04 	movi	r4,1000
   4245c:	00411e80 	call	411e8 <delay>

		data <<= 1;
   42460:	e0bfff17 	ldw	r2,-4(fp)
   42464:	1085883a 	add	r2,r2,r2
   42468:	e0bfff15 	stw	r2,-4(fp)
		delay(1000);

		address <<= 1;
	}

	for(i = 0; i < 9; i++){
   4246c:	e0bffd17 	ldw	r2,-12(fp)
   42470:	10800044 	addi	r2,r2,1
   42474:	e0bffd15 	stw	r2,-12(fp)
   42478:	e0bffd17 	ldw	r2,-12(fp)
   4247c:	10800250 	cmplti	r2,r2,9
   42480:	103fde1e 	bne	r2,zero,423fc <spi_send+0xc8>
		delay(1000);

		data <<= 1;
	}

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 1); // Latches word to AIC
   42484:	00c00234 	movhi	r3,8
   42488:	18c47404 	addi	r3,r3,4560
   4248c:	00800044 	movi	r2,1
   42490:	18800035 	stwio	r2,0(r3)
	//IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
}
   42494:	e037883a 	mov	sp,fp
   42498:	dfc00117 	ldw	ra,4(sp)
   4249c:	df000017 	ldw	fp,0(sp)
   424a0:	dec00204 	addi	sp,sp,8
   424a4:	f800283a 	ret

000424a8 <uart_sendByte>:

int counter = 0;

/*-------------------------- Send data---------------------------*/
/*Send integer value through UART*/
void uart_sendByte(char data){
   424a8:	defffd04 	addi	sp,sp,-12
   424ac:	dfc00215 	stw	ra,8(sp)
   424b0:	df000115 	stw	fp,4(sp)
   424b4:	df000104 	addi	fp,sp,4
   424b8:	e13fff05 	stb	r4,-4(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data);
   424bc:	e0ffff07 	ldb	r3,-4(fp)
   424c0:	00800234 	movhi	r2,8
   424c4:	10840104 	addi	r2,r2,4100
   424c8:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY); //not sure about delay parameter
   424cc:	0100e104 	movi	r4,900
   424d0:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, '\n');
   424d4:	00c00234 	movhi	r3,8
   424d8:	18c40104 	addi	r3,r3,4100
   424dc:	00800284 	movi	r2,10
   424e0:	18800035 	stwio	r2,0(r3)
}
   424e4:	e037883a 	mov	sp,fp
   424e8:	dfc00117 	ldw	ra,4(sp)
   424ec:	df000017 	ldw	fp,0(sp)
   424f0:	dec00204 	addi	sp,sp,8
   424f4:	f800283a 	ret

000424f8 <uart_sendInt16>:

/*Send integer value through UART  -> Higher 8 bits first */
void uart_sendInt16(alt_16 data){
   424f8:	defffd04 	addi	sp,sp,-12
   424fc:	dfc00215 	stw	ra,8(sp)
   42500:	df000115 	stw	fp,4(sp)
   42504:	df000104 	addi	fp,sp,4
   42508:	e13fff0d 	sth	r4,-4(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data & 0xFF);
   4250c:	e0bfff0b 	ldhu	r2,-4(fp)
   42510:	10bfffcc 	andi	r2,r2,65535
   42514:	10c03fcc 	andi	r3,r2,255
   42518:	00800234 	movhi	r2,8
   4251c:	10840104 	addi	r2,r2,4100
   42520:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY);
   42524:	0100e104 	movi	r4,900
   42528:	00411e80 	call	411e8 <delay>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data >> 8);
   4252c:	e0bfff0f 	ldh	r2,-4(fp)
   42530:	1005d23a 	srai	r2,r2,8
   42534:	10ffffcc 	andi	r3,r2,65535
   42538:	18e0001c 	xori	r3,r3,32768
   4253c:	18e00004 	addi	r3,r3,-32768
   42540:	00800234 	movhi	r2,8
   42544:	10840104 	addi	r2,r2,4100
   42548:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY);
   4254c:	0100e104 	movi	r4,900
   42550:	00411e80 	call	411e8 <delay>

}
   42554:	e037883a 	mov	sp,fp
   42558:	dfc00117 	ldw	ra,4(sp)
   4255c:	df000017 	ldw	fp,0(sp)
   42560:	dec00204 	addi	sp,sp,8
   42564:	f800283a 	ret

00042568 <uart_sendFloat>:



void uart_sendFloat(float data){
   42568:	defff804 	addi	sp,sp,-32
   4256c:	dfc00715 	stw	ra,28(sp)
   42570:	df000615 	stw	fp,24(sp)
   42574:	df000604 	addi	fp,sp,24
   42578:	e13fff15 	stw	r4,-4(fp)
	char number[10];
	int i = 0;
   4257c:	e03ffb15 	stw	zero,-20(fp)
	snprintf(number, sizeof(number), "%f", data);
   42580:	e13fff17 	ldw	r4,-4(fp)
   42584:	0042d3c0 	call	42d3c <__extendsfdf2>
   42588:	1009883a 	mov	r4,r2
   4258c:	180b883a 	mov	r5,r3
   42590:	e0bffc04 	addi	r2,fp,-16
   42594:	d9400015 	stw	r5,0(sp)
   42598:	200f883a 	mov	r7,r4
   4259c:	1009883a 	mov	r4,r2
   425a0:	01400284 	movi	r5,10
   425a4:	01800174 	movhi	r6,5
   425a8:	31bf7c04 	addi	r6,r6,-528
   425ac:	00436140 	call	43614 <snprintf>
	while(i < 10){
   425b0:	00000f06 	br	425f0 <uart_sendFloat+0x88>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, number[i]);
   425b4:	e0fffb17 	ldw	r3,-20(fp)
   425b8:	e0bffc04 	addi	r2,fp,-16
   425bc:	10c5883a 	add	r2,r2,r3
   425c0:	10800003 	ldbu	r2,0(r2)
   425c4:	10c03fcc 	andi	r3,r2,255
   425c8:	18c0201c 	xori	r3,r3,128
   425cc:	18ffe004 	addi	r3,r3,-128
   425d0:	00800234 	movhi	r2,8
   425d4:	10840104 	addi	r2,r2,4100
   425d8:	10c00035 	stwio	r3,0(r2)
		delay(UART_SEND_DELAY); //not sure about delay parameter
   425dc:	0100e104 	movi	r4,900
   425e0:	00411e80 	call	411e8 <delay>
		i++;
   425e4:	e0bffb17 	ldw	r2,-20(fp)
   425e8:	10800044 	addi	r2,r2,1
   425ec:	e0bffb15 	stw	r2,-20(fp)

void uart_sendFloat(float data){
	char number[10];
	int i = 0;
	snprintf(number, sizeof(number), "%f", data);
	while(i < 10){
   425f0:	e0bffb17 	ldw	r2,-20(fp)
   425f4:	10800290 	cmplti	r2,r2,10
   425f8:	103fee1e 	bne	r2,zero,425b4 <uart_sendFloat+0x4c>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, number[i]);
		delay(UART_SEND_DELAY); //not sure about delay parameter
		i++;
	}
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, '\n');
   425fc:	00c00234 	movhi	r3,8
   42600:	18c40104 	addi	r3,r3,4100
   42604:	00800284 	movi	r2,10
   42608:	18800035 	stwio	r2,0(r3)

}
   4260c:	e037883a 	mov	sp,fp
   42610:	dfc00117 	ldw	ra,4(sp)
   42614:	df000017 	ldw	fp,0(sp)
   42618:	dec00204 	addi	sp,sp,8
   4261c:	f800283a 	ret

00042620 <uart_SendLeftBuff>:
//		if (++RxHead > (RX_BUFFER_SIZE-1)) RxHead = 0;
//	}
//}

/*Send the whole buffer to the PC through UART*/
void uart_SendLeftBuff(void){
   42620:	defffd04 	addi	sp,sp,-12
   42624:	dfc00215 	stw	ra,8(sp)
   42628:	df000115 	stw	fp,4(sp)
   4262c:	df000104 	addi	fp,sp,4
	int temp;
	temp = leftCount;
   42630:	00800174 	movhi	r2,5
   42634:	108e4904 	addi	r2,r2,14628
   42638:	10800017 	ldw	r2,0(r2)
   4263c:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (BUFFERSIZE + temp); counter++){
   42640:	e0bfff17 	ldw	r2,-4(fp)
   42644:	d0a72715 	stw	r2,-25444(gp)
   42648:	00000f06 	br	42688 <uart_SendLeftBuff+0x68>
		uart_sendInt16(leftChannelData[(counter % BUFFERSIZE)]);
   4264c:	d1272717 	ldw	r4,-25444(gp)
   42650:	014006c4 	movi	r5,27
   42654:	0042ea40 	call	42ea4 <__modsi3>
   42658:	00c00174 	movhi	r3,5
   4265c:	18ceea04 	addi	r3,r3,15272
   42660:	1085883a 	add	r2,r2,r2
   42664:	10c5883a 	add	r2,r2,r3
   42668:	1080000b 	ldhu	r2,0(r2)
   4266c:	113fffcc 	andi	r4,r2,65535
   42670:	2120001c 	xori	r4,r4,32768
   42674:	21200004 	addi	r4,r4,-32768
   42678:	00424f80 	call	424f8 <uart_sendInt16>

/*Send the whole buffer to the PC through UART*/
void uart_SendLeftBuff(void){
	int temp;
	temp = leftCount;
	for (counter = temp; counter < (BUFFERSIZE + temp); counter++){
   4267c:	d0a72717 	ldw	r2,-25444(gp)
   42680:	10800044 	addi	r2,r2,1
   42684:	d0a72715 	stw	r2,-25444(gp)
   42688:	e0bfff17 	ldw	r2,-4(fp)
   4268c:	10c006c4 	addi	r3,r2,27
   42690:	d0a72717 	ldw	r2,-25444(gp)
   42694:	10ffed16 	blt	r2,r3,4264c <uart_SendLeftBuff+0x2c>
		uart_sendInt16(leftChannelData[(counter % BUFFERSIZE)]);
	}
}
   42698:	e037883a 	mov	sp,fp
   4269c:	dfc00117 	ldw	ra,4(sp)
   426a0:	df000017 	ldw	fp,0(sp)
   426a4:	dec00204 	addi	sp,sp,8
   426a8:	f800283a 	ret

000426ac <uart_SendTestBuff>:

/*Send the whole testing 1000 data buffer to the PC through UART*/
void uart_SendTestBuff(void){
   426ac:	defffc04 	addi	sp,sp,-16
   426b0:	dfc00315 	stw	ra,12(sp)
   426b4:	df000215 	stw	fp,8(sp)
   426b8:	df000204 	addi	fp,sp,8
	int temp;
	temp = lefttestCount;
   426bc:	00800174 	movhi	r2,5
   426c0:	108e4a04 	addi	r2,r2,14632
   426c4:	10800017 	ldw	r2,0(r2)
   426c8:	e0bffe15 	stw	r2,-8(fp)
	for (counter = temp; counter < (256 + temp); counter++){
   426cc:	e0bffe17 	ldw	r2,-8(fp)
   426d0:	d0a72715 	stw	r2,-25444(gp)
   426d4:	00001f06 	br	42754 <uart_SendTestBuff+0xa8>
		uart_sendInt16(datatest[counter % 256]);
   426d8:	d0a72717 	ldw	r2,-25444(gp)
   426dc:	00e00034 	movhi	r3,32768
   426e0:	18c03fc4 	addi	r3,r3,255
   426e4:	10c4703a 	and	r2,r2,r3
   426e8:	e0bfff15 	stw	r2,-4(fp)
   426ec:	e0ffff17 	ldw	r3,-4(fp)
   426f0:	1804403a 	cmpge	r2,r3,zero
   426f4:	10000a1e 	bne	r2,zero,42720 <uart_SendTestBuff+0x74>
   426f8:	e0bfff17 	ldw	r2,-4(fp)
   426fc:	10bfffc4 	addi	r2,r2,-1
   42700:	e0bfff15 	stw	r2,-4(fp)
   42704:	00bfc004 	movi	r2,-256
   42708:	e0ffff17 	ldw	r3,-4(fp)
   4270c:	1886b03a 	or	r3,r3,r2
   42710:	e0ffff15 	stw	r3,-4(fp)
   42714:	e0bfff17 	ldw	r2,-4(fp)
   42718:	10800044 	addi	r2,r2,1
   4271c:	e0bfff15 	stw	r2,-4(fp)
   42720:	e0bfff17 	ldw	r2,-4(fp)
   42724:	00c00174 	movhi	r3,5
   42728:	18ce6a04 	addi	r3,r3,14760
   4272c:	1085883a 	add	r2,r2,r2
   42730:	10c5883a 	add	r2,r2,r3
   42734:	1080000b 	ldhu	r2,0(r2)
   42738:	113fffcc 	andi	r4,r2,65535
   4273c:	2120001c 	xori	r4,r4,32768
   42740:	21200004 	addi	r4,r4,-32768
   42744:	00424f80 	call	424f8 <uart_sendInt16>

/*Send the whole testing 1000 data buffer to the PC through UART*/
void uart_SendTestBuff(void){
	int temp;
	temp = lefttestCount;
	for (counter = temp; counter < (256 + temp); counter++){
   42748:	d0a72717 	ldw	r2,-25444(gp)
   4274c:	10800044 	addi	r2,r2,1
   42750:	d0a72715 	stw	r2,-25444(gp)
   42754:	e0bffe17 	ldw	r2,-8(fp)
   42758:	10c04004 	addi	r3,r2,256
   4275c:	d0a72717 	ldw	r2,-25444(gp)
   42760:	10ffdd16 	blt	r2,r3,426d8 <uart_SendTestBuff+0x2c>
		uart_sendInt16(datatest[counter % 256]);
	}
}
   42764:	e037883a 	mov	sp,fp
   42768:	dfc00117 	ldw	ra,4(sp)
   4276c:	df000017 	ldw	fp,0(sp)
   42770:	dec00204 	addi	sp,sp,8
   42774:	f800283a 	ret

00042778 <uart_SendConvBuff>:

/*Send the whole buffer to the PC through UART*/
void uart_SendConvBuff(void){
   42778:	defffd04 	addi	sp,sp,-12
   4277c:	dfc00215 	stw	ra,8(sp)
   42780:	df000115 	stw	fp,4(sp)
   42784:	df000104 	addi	fp,sp,4
	int temp;
	temp = convIndex;
   42788:	00800174 	movhi	r2,5
   4278c:	108e4704 	addi	r2,r2,14620
   42790:	10800017 	ldw	r2,0(r2)
   42794:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (CONVBUFFSIZE + temp); counter++){
   42798:	e0bfff17 	ldw	r2,-4(fp)
   4279c:	d0a72715 	stw	r2,-25444(gp)
   427a0:	00001206 	br	427ec <uart_SendConvBuff+0x74>
		uart_sendInt16((alt_16)convResultBuffer[counter % (CONVBUFFSIZE)]);
   427a4:	d1272717 	ldw	r4,-25444(gp)
   427a8:	0140fa04 	movi	r5,1000
   427ac:	0042ea40 	call	42ea4 <__modsi3>
   427b0:	00c00174 	movhi	r3,5
   427b4:	18cff804 	addi	r3,r3,16352
   427b8:	1085883a 	add	r2,r2,r2
   427bc:	1085883a 	add	r2,r2,r2
   427c0:	10c5883a 	add	r2,r2,r3
   427c4:	10800017 	ldw	r2,0(r2)
   427c8:	1009883a 	mov	r4,r2
   427cc:	0042ca80 	call	42ca8 <__fixsfsi>
   427d0:	113fffcc 	andi	r4,r2,65535
   427d4:	2120001c 	xori	r4,r4,32768
   427d8:	21200004 	addi	r4,r4,-32768
   427dc:	00424f80 	call	424f8 <uart_sendInt16>

/*Send the whole buffer to the PC through UART*/
void uart_SendConvBuff(void){
	int temp;
	temp = convIndex;
	for (counter = temp; counter < (CONVBUFFSIZE + temp); counter++){
   427e0:	d0a72717 	ldw	r2,-25444(gp)
   427e4:	10800044 	addi	r2,r2,1
   427e8:	d0a72715 	stw	r2,-25444(gp)
   427ec:	e0bfff17 	ldw	r2,-4(fp)
   427f0:	10c0fa04 	addi	r3,r2,1000
   427f4:	d0a72717 	ldw	r2,-25444(gp)
   427f8:	10ffea16 	blt	r2,r3,427a4 <uart_SendConvBuff+0x2c>
		uart_sendInt16((alt_16)convResultBuffer[counter % (CONVBUFFSIZE)]);
	}
}
   427fc:	e037883a 	mov	sp,fp
   42800:	dfc00117 	ldw	ra,4(sp)
   42804:	df000017 	ldw	fp,0(sp)
   42808:	dec00204 	addi	sp,sp,8
   4280c:	f800283a 	ret

00042810 <_fpadd_parts>:
   42810:	21c00017 	ldw	r7,0(r4)
   42814:	02000044 	movi	r8,1
   42818:	41c0332e 	bgeu	r8,r7,428e8 <_fpadd_parts+0xd8>
   4281c:	28800017 	ldw	r2,0(r5)
   42820:	4080462e 	bgeu	r8,r2,4293c <_fpadd_parts+0x12c>
   42824:	00c00104 	movi	r3,4
   42828:	38c06b26 	beq	r7,r3,429d8 <_fpadd_parts+0x1c8>
   4282c:	10c04326 	beq	r2,r3,4293c <_fpadd_parts+0x12c>
   42830:	00c00084 	movi	r3,2
   42834:	10c02e26 	beq	r2,r3,428f0 <_fpadd_parts+0xe0>
   42838:	38c04026 	beq	r7,r3,4293c <_fpadd_parts+0x12c>
   4283c:	22800217 	ldw	r10,8(r4)
   42840:	28c00217 	ldw	r3,8(r5)
   42844:	23000317 	ldw	r12,12(r4)
   42848:	2a400317 	ldw	r9,12(r5)
   4284c:	50cfc83a 	sub	r7,r10,r3
   42850:	3817883a 	mov	r11,r7
   42854:	38004f16 	blt	r7,zero,42994 <_fpadd_parts+0x184>
   42858:	008007c4 	movi	r2,31
   4285c:	11c03316 	blt	r2,r7,4292c <_fpadd_parts+0x11c>
   42860:	02c0540e 	bge	zero,r11,429b4 <_fpadd_parts+0x1a4>
   42864:	41c4983a 	sll	r2,r8,r7
   42868:	49c6d83a 	srl	r3,r9,r7
   4286c:	10bfffc4 	addi	r2,r2,-1
   42870:	4884703a 	and	r2,r9,r2
   42874:	1004c03a 	cmpne	r2,r2,zero
   42878:	1892b03a 	or	r9,r3,r2
   4287c:	20c00117 	ldw	r3,4(r4)
   42880:	28800117 	ldw	r2,4(r5)
   42884:	18803c26 	beq	r3,r2,42978 <_fpadd_parts+0x168>
   42888:	18002f26 	beq	r3,zero,42948 <_fpadd_parts+0x138>
   4288c:	4b05c83a 	sub	r2,r9,r12
   42890:	10004216 	blt	r2,zero,4299c <_fpadd_parts+0x18c>
   42894:	32800215 	stw	r10,8(r6)
   42898:	30800315 	stw	r2,12(r6)
   4289c:	30000115 	stw	zero,4(r6)
   428a0:	31000317 	ldw	r4,12(r6)
   428a4:	01d00034 	movhi	r7,16384
   428a8:	39ffff84 	addi	r7,r7,-2
   428ac:	20bfffc4 	addi	r2,r4,-1
   428b0:	2007883a 	mov	r3,r4
   428b4:	38800836 	bltu	r7,r2,428d8 <_fpadd_parts+0xc8>
   428b8:	31400217 	ldw	r5,8(r6)
   428bc:	18c9883a 	add	r4,r3,r3
   428c0:	20bfffc4 	addi	r2,r4,-1
   428c4:	297fffc4 	addi	r5,r5,-1
   428c8:	2007883a 	mov	r3,r4
   428cc:	38bffb2e 	bgeu	r7,r2,428bc <_fpadd_parts+0xac>
   428d0:	31400215 	stw	r5,8(r6)
   428d4:	31000315 	stw	r4,12(r6)
   428d8:	008000c4 	movi	r2,3
   428dc:	30800015 	stw	r2,0(r6)
   428e0:	20001b16 	blt	r4,zero,42950 <_fpadd_parts+0x140>
   428e4:	3009883a 	mov	r4,r6
   428e8:	2005883a 	mov	r2,r4
   428ec:	f800283a 	ret
   428f0:	38fffd1e 	bne	r7,r3,428e8 <_fpadd_parts+0xd8>
   428f4:	31c00015 	stw	r7,0(r6)
   428f8:	20800117 	ldw	r2,4(r4)
   428fc:	30800115 	stw	r2,4(r6)
   42900:	20c00217 	ldw	r3,8(r4)
   42904:	30c00215 	stw	r3,8(r6)
   42908:	20800317 	ldw	r2,12(r4)
   4290c:	30800315 	stw	r2,12(r6)
   42910:	20c00117 	ldw	r3,4(r4)
   42914:	28800117 	ldw	r2,4(r5)
   42918:	3009883a 	mov	r4,r6
   4291c:	1886703a 	and	r3,r3,r2
   42920:	2005883a 	mov	r2,r4
   42924:	30c00115 	stw	r3,4(r6)
   42928:	f800283a 	ret
   4292c:	1a801716 	blt	r3,r10,4298c <_fpadd_parts+0x17c>
   42930:	1815883a 	mov	r10,r3
   42934:	0019883a 	mov	r12,zero
   42938:	003fd006 	br	4287c <_fpadd_parts+0x6c>
   4293c:	2809883a 	mov	r4,r5
   42940:	2005883a 	mov	r2,r4
   42944:	f800283a 	ret
   42948:	6245c83a 	sub	r2,r12,r9
   4294c:	003fd006 	br	42890 <_fpadd_parts+0x80>
   42950:	30800217 	ldw	r2,8(r6)
   42954:	2006d07a 	srli	r3,r4,1
   42958:	2100004c 	andi	r4,r4,1
   4295c:	10800044 	addi	r2,r2,1
   42960:	1906b03a 	or	r3,r3,r4
   42964:	3009883a 	mov	r4,r6
   42968:	30800215 	stw	r2,8(r6)
   4296c:	2005883a 	mov	r2,r4
   42970:	30c00315 	stw	r3,12(r6)
   42974:	f800283a 	ret
   42978:	4b09883a 	add	r4,r9,r12
   4297c:	30c00115 	stw	r3,4(r6)
   42980:	32800215 	stw	r10,8(r6)
   42984:	31000315 	stw	r4,12(r6)
   42988:	003fd306 	br	428d8 <_fpadd_parts+0xc8>
   4298c:	0013883a 	mov	r9,zero
   42990:	003fba06 	br	4287c <_fpadd_parts+0x6c>
   42994:	01cfc83a 	sub	r7,zero,r7
   42998:	003faf06 	br	42858 <_fpadd_parts+0x48>
   4299c:	0089c83a 	sub	r4,zero,r2
   429a0:	00800044 	movi	r2,1
   429a4:	30800115 	stw	r2,4(r6)
   429a8:	32800215 	stw	r10,8(r6)
   429ac:	31000315 	stw	r4,12(r6)
   429b0:	003fbb06 	br	428a0 <_fpadd_parts+0x90>
   429b4:	583fb126 	beq	r11,zero,4287c <_fpadd_parts+0x6c>
   429b8:	41c4983a 	sll	r2,r8,r7
   429bc:	61c6d83a 	srl	r3,r12,r7
   429c0:	51d5883a 	add	r10,r10,r7
   429c4:	10bfffc4 	addi	r2,r2,-1
   429c8:	6084703a 	and	r2,r12,r2
   429cc:	1004c03a 	cmpne	r2,r2,zero
   429d0:	1898b03a 	or	r12,r3,r2
   429d4:	003fa906 	br	4287c <_fpadd_parts+0x6c>
   429d8:	11ffc31e 	bne	r2,r7,428e8 <_fpadd_parts+0xd8>
   429dc:	28c00117 	ldw	r3,4(r5)
   429e0:	20800117 	ldw	r2,4(r4)
   429e4:	10ffc026 	beq	r2,r3,428e8 <_fpadd_parts+0xd8>
   429e8:	01000174 	movhi	r4,5
   429ec:	213f7d04 	addi	r4,r4,-524
   429f0:	003fbd06 	br	428e8 <_fpadd_parts+0xd8>

000429f4 <__subsf3>:
   429f4:	deffef04 	addi	sp,sp,-68
   429f8:	dcc00f15 	stw	r19,60(sp)
   429fc:	dcc00204 	addi	r19,sp,8
   42a00:	dc400e15 	stw	r17,56(sp)
   42a04:	d9000015 	stw	r4,0(sp)
   42a08:	d9400115 	stw	r5,4(sp)
   42a0c:	d809883a 	mov	r4,sp
   42a10:	980b883a 	mov	r5,r19
   42a14:	dc400604 	addi	r17,sp,24
   42a18:	dfc01015 	stw	ra,64(sp)
   42a1c:	004310c0 	call	4310c <__unpack_f>
   42a20:	d9000104 	addi	r4,sp,4
   42a24:	880b883a 	mov	r5,r17
   42a28:	004310c0 	call	4310c <__unpack_f>
   42a2c:	d8800717 	ldw	r2,28(sp)
   42a30:	9809883a 	mov	r4,r19
   42a34:	880b883a 	mov	r5,r17
   42a38:	d9800a04 	addi	r6,sp,40
   42a3c:	1080005c 	xori	r2,r2,1
   42a40:	d8800715 	stw	r2,28(sp)
   42a44:	00428100 	call	42810 <_fpadd_parts>
   42a48:	1009883a 	mov	r4,r2
   42a4c:	0042fac0 	call	42fac <__pack_f>
   42a50:	dfc01017 	ldw	ra,64(sp)
   42a54:	dcc00f17 	ldw	r19,60(sp)
   42a58:	dc400e17 	ldw	r17,56(sp)
   42a5c:	dec01104 	addi	sp,sp,68
   42a60:	f800283a 	ret

00042a64 <__addsf3>:
   42a64:	deffef04 	addi	sp,sp,-68
   42a68:	dcc00f15 	stw	r19,60(sp)
   42a6c:	dcc00204 	addi	r19,sp,8
   42a70:	dc400e15 	stw	r17,56(sp)
   42a74:	d9000015 	stw	r4,0(sp)
   42a78:	d9400115 	stw	r5,4(sp)
   42a7c:	d809883a 	mov	r4,sp
   42a80:	980b883a 	mov	r5,r19
   42a84:	dc400604 	addi	r17,sp,24
   42a88:	dfc01015 	stw	ra,64(sp)
   42a8c:	004310c0 	call	4310c <__unpack_f>
   42a90:	d9000104 	addi	r4,sp,4
   42a94:	880b883a 	mov	r5,r17
   42a98:	004310c0 	call	4310c <__unpack_f>
   42a9c:	d9800a04 	addi	r6,sp,40
   42aa0:	9809883a 	mov	r4,r19
   42aa4:	880b883a 	mov	r5,r17
   42aa8:	00428100 	call	42810 <_fpadd_parts>
   42aac:	1009883a 	mov	r4,r2
   42ab0:	0042fac0 	call	42fac <__pack_f>
   42ab4:	dfc01017 	ldw	ra,64(sp)
   42ab8:	dcc00f17 	ldw	r19,60(sp)
   42abc:	dc400e17 	ldw	r17,56(sp)
   42ac0:	dec01104 	addi	sp,sp,68
   42ac4:	f800283a 	ret

00042ac8 <__mulsf3>:
   42ac8:	deffef04 	addi	sp,sp,-68
   42acc:	dc400f15 	stw	r17,60(sp)
   42ad0:	dc400204 	addi	r17,sp,8
   42ad4:	dc000e15 	stw	r16,56(sp)
   42ad8:	d9000015 	stw	r4,0(sp)
   42adc:	d9400115 	stw	r5,4(sp)
   42ae0:	d809883a 	mov	r4,sp
   42ae4:	880b883a 	mov	r5,r17
   42ae8:	dc000604 	addi	r16,sp,24
   42aec:	dfc01015 	stw	ra,64(sp)
   42af0:	004310c0 	call	4310c <__unpack_f>
   42af4:	d9000104 	addi	r4,sp,4
   42af8:	800b883a 	mov	r5,r16
   42afc:	004310c0 	call	4310c <__unpack_f>
   42b00:	d9000217 	ldw	r4,8(sp)
   42b04:	00800044 	movi	r2,1
   42b08:	01400104 	movi	r5,4
   42b0c:	1100142e 	bgeu	r2,r4,42b60 <__mulsf3+0x98>
   42b10:	d8c00617 	ldw	r3,24(sp)
   42b14:	10c0052e 	bgeu	r2,r3,42b2c <__mulsf3+0x64>
   42b18:	21400f26 	beq	r4,r5,42b58 <__mulsf3+0x90>
   42b1c:	19405d26 	beq	r3,r5,42c94 <__mulsf3+0x1cc>
   42b20:	00800084 	movi	r2,2
   42b24:	20800e26 	beq	r4,r2,42b60 <__mulsf3+0x98>
   42b28:	1880181e 	bne	r3,r2,42b8c <__mulsf3+0xc4>
   42b2c:	d8c00717 	ldw	r3,28(sp)
   42b30:	d8800317 	ldw	r2,12(sp)
   42b34:	8009883a 	mov	r4,r16
   42b38:	10c4c03a 	cmpne	r2,r2,r3
   42b3c:	d8800715 	stw	r2,28(sp)
   42b40:	0042fac0 	call	42fac <__pack_f>
   42b44:	dfc01017 	ldw	ra,64(sp)
   42b48:	dc400f17 	ldw	r17,60(sp)
   42b4c:	dc000e17 	ldw	r16,56(sp)
   42b50:	dec01104 	addi	sp,sp,68
   42b54:	f800283a 	ret
   42b58:	00800084 	movi	r2,2
   42b5c:	18804f26 	beq	r3,r2,42c9c <__mulsf3+0x1d4>
   42b60:	d8800317 	ldw	r2,12(sp)
   42b64:	d8c00717 	ldw	r3,28(sp)
   42b68:	8809883a 	mov	r4,r17
   42b6c:	10c4c03a 	cmpne	r2,r2,r3
   42b70:	d8800315 	stw	r2,12(sp)
   42b74:	0042fac0 	call	42fac <__pack_f>
   42b78:	dfc01017 	ldw	ra,64(sp)
   42b7c:	dc400f17 	ldw	r17,60(sp)
   42b80:	dc000e17 	ldw	r16,56(sp)
   42b84:	dec01104 	addi	sp,sp,68
   42b88:	f800283a 	ret
   42b8c:	d8800517 	ldw	r2,20(sp)
   42b90:	da000917 	ldw	r8,36(sp)
   42b94:	0013883a 	mov	r9,zero
   42b98:	0007883a 	mov	r3,zero
   42b9c:	480f883a 	mov	r7,r9
   42ba0:	180b883a 	mov	r5,r3
   42ba4:	400d883a 	mov	r6,r8
   42ba8:	1009883a 	mov	r4,r2
   42bac:	0042f140 	call	42f14 <__muldi3>
   42bb0:	da800417 	ldw	r10,16(sp)
   42bb4:	d9800817 	ldw	r6,32(sp)
   42bb8:	da400317 	ldw	r9,12(sp)
   42bbc:	52800084 	addi	r10,r10,2
   42bc0:	3295883a 	add	r10,r6,r10
   42bc4:	d9800717 	ldw	r6,28(sp)
   42bc8:	180b883a 	mov	r5,r3
   42bcc:	180f883a 	mov	r7,r3
   42bd0:	4992c03a 	cmpne	r9,r9,r6
   42bd4:	da400b15 	stw	r9,44(sp)
   42bd8:	1007883a 	mov	r3,r2
   42bdc:	da800c15 	stw	r10,48(sp)
   42be0:	2800070e 	bge	r5,zero,42c00 <__mulsf3+0x138>
   42be4:	2880004c 	andi	r2,r5,1
   42be8:	1005003a 	cmpeq	r2,r2,zero
   42bec:	500d883a 	mov	r6,r10
   42bf0:	10001e26 	beq	r2,zero,42c6c <__mulsf3+0x1a4>
   42bf4:	380ed07a 	srli	r7,r7,1
   42bf8:	31800044 	addi	r6,r6,1
   42bfc:	d9800c15 	stw	r6,48(sp)
   42c00:	01100034 	movhi	r4,16384
   42c04:	213fffc4 	addi	r4,r4,-1
   42c08:	21c00b36 	bltu	r4,r7,42c38 <__mulsf3+0x170>
   42c0c:	d8800c17 	ldw	r2,48(sp)
   42c10:	00000206 	br	42c1c <__mulsf3+0x154>
   42c14:	18c7883a 	add	r3,r3,r3
   42c18:	21c00636 	bltu	r4,r7,42c34 <__mulsf3+0x16c>
   42c1c:	10bfffc4 	addi	r2,r2,-1
   42c20:	39cf883a 	add	r7,r7,r7
   42c24:	183ffb0e 	bge	r3,zero,42c14 <__mulsf3+0x14c>
   42c28:	39c00054 	ori	r7,r7,1
   42c2c:	18c7883a 	add	r3,r3,r3
   42c30:	21fffa2e 	bgeu	r4,r7,42c1c <__mulsf3+0x154>
   42c34:	d8800c15 	stw	r2,48(sp)
   42c38:	39001fcc 	andi	r4,r7,127
   42c3c:	00801004 	movi	r2,64
   42c40:	20800d26 	beq	r4,r2,42c78 <__mulsf3+0x1b0>
   42c44:	008000c4 	movi	r2,3
   42c48:	d9000a04 	addi	r4,sp,40
   42c4c:	d9c00d15 	stw	r7,52(sp)
   42c50:	d8800a15 	stw	r2,40(sp)
   42c54:	0042fac0 	call	42fac <__pack_f>
   42c58:	dfc01017 	ldw	ra,64(sp)
   42c5c:	dc400f17 	ldw	r17,60(sp)
   42c60:	dc000e17 	ldw	r16,56(sp)
   42c64:	dec01104 	addi	sp,sp,68
   42c68:	f800283a 	ret
   42c6c:	1804d07a 	srli	r2,r3,1
   42c70:	10e00034 	orhi	r3,r2,32768
   42c74:	003fdf06 	br	42bf4 <__mulsf3+0x12c>
   42c78:	3880200c 	andi	r2,r7,128
   42c7c:	103ff11e 	bne	r2,zero,42c44 <__mulsf3+0x17c>
   42c80:	183ff026 	beq	r3,zero,42c44 <__mulsf3+0x17c>
   42c84:	3907883a 	add	r3,r7,r4
   42c88:	00bfe004 	movi	r2,-128
   42c8c:	188e703a 	and	r7,r3,r2
   42c90:	003fec06 	br	42c44 <__mulsf3+0x17c>
   42c94:	00800084 	movi	r2,2
   42c98:	20bfa41e 	bne	r4,r2,42b2c <__mulsf3+0x64>
   42c9c:	01000174 	movhi	r4,5
   42ca0:	213f7d04 	addi	r4,r4,-524
   42ca4:	003fb306 	br	42b74 <__mulsf3+0xac>

00042ca8 <__fixsfsi>:
   42ca8:	defffa04 	addi	sp,sp,-24
   42cac:	d9000015 	stw	r4,0(sp)
   42cb0:	d9400104 	addi	r5,sp,4
   42cb4:	d809883a 	mov	r4,sp
   42cb8:	dfc00515 	stw	ra,20(sp)
   42cbc:	004310c0 	call	4310c <__unpack_f>
   42cc0:	d8c00117 	ldw	r3,4(sp)
   42cc4:	00800084 	movi	r2,2
   42cc8:	1880041e 	bne	r3,r2,42cdc <__fixsfsi+0x34>
   42ccc:	0005883a 	mov	r2,zero
   42cd0:	dfc00517 	ldw	ra,20(sp)
   42cd4:	dec00604 	addi	sp,sp,24
   42cd8:	f800283a 	ret
   42cdc:	00800044 	movi	r2,1
   42ce0:	10fffa2e 	bgeu	r2,r3,42ccc <__fixsfsi+0x24>
   42ce4:	00800104 	movi	r2,4
   42ce8:	18800426 	beq	r3,r2,42cfc <__fixsfsi+0x54>
   42cec:	d8800317 	ldw	r2,12(sp)
   42cf0:	103ff616 	blt	r2,zero,42ccc <__fixsfsi+0x24>
   42cf4:	00c00784 	movi	r3,30
   42cf8:	1880070e 	bge	r3,r2,42d18 <__fixsfsi+0x70>
   42cfc:	d8800217 	ldw	r2,8(sp)
   42d00:	10000c1e 	bne	r2,zero,42d34 <__fixsfsi+0x8c>
   42d04:	00a00034 	movhi	r2,32768
   42d08:	10bfffc4 	addi	r2,r2,-1
   42d0c:	dfc00517 	ldw	ra,20(sp)
   42d10:	dec00604 	addi	sp,sp,24
   42d14:	f800283a 	ret
   42d18:	1885c83a 	sub	r2,r3,r2
   42d1c:	d9000217 	ldw	r4,8(sp)
   42d20:	d8c00417 	ldw	r3,16(sp)
   42d24:	1884d83a 	srl	r2,r3,r2
   42d28:	203fe926 	beq	r4,zero,42cd0 <__fixsfsi+0x28>
   42d2c:	0085c83a 	sub	r2,zero,r2
   42d30:	003fe706 	br	42cd0 <__fixsfsi+0x28>
   42d34:	00a00034 	movhi	r2,32768
   42d38:	003fe506 	br	42cd0 <__fixsfsi+0x28>

00042d3c <__extendsfdf2>:
   42d3c:	defff904 	addi	sp,sp,-28
   42d40:	d9000115 	stw	r4,4(sp)
   42d44:	d9400204 	addi	r5,sp,8
   42d48:	d9000104 	addi	r4,sp,4
   42d4c:	dfc00615 	stw	ra,24(sp)
   42d50:	004310c0 	call	4310c <__unpack_f>
   42d54:	d9c00517 	ldw	r7,20(sp)
   42d58:	0011883a 	mov	r8,zero
   42d5c:	400697ba 	slli	r3,r8,30
   42d60:	3812d0ba 	srli	r9,r7,2
   42d64:	380497ba 	slli	r2,r7,30
   42d68:	d9000217 	ldw	r4,8(sp)
   42d6c:	d9400317 	ldw	r5,12(sp)
   42d70:	d9800417 	ldw	r6,16(sp)
   42d74:	48c6b03a 	or	r3,r9,r3
   42d78:	100f883a 	mov	r7,r2
   42d7c:	d8c00015 	stw	r3,0(sp)
   42d80:	0042d900 	call	42d90 <__make_dp>
   42d84:	dfc00617 	ldw	ra,24(sp)
   42d88:	dec00704 	addi	sp,sp,28
   42d8c:	f800283a 	ret

00042d90 <__make_dp>:
   42d90:	defff904 	addi	sp,sp,-28
   42d94:	d8c00717 	ldw	r3,28(sp)
   42d98:	d9000015 	stw	r4,0(sp)
   42d9c:	d809883a 	mov	r4,sp
   42da0:	dfc00515 	stw	ra,20(sp)
   42da4:	d9c00615 	stw	r7,24(sp)
   42da8:	d9400115 	stw	r5,4(sp)
   42dac:	d9800215 	stw	r6,8(sp)
   42db0:	d8c00415 	stw	r3,16(sp)
   42db4:	d9c00315 	stw	r7,12(sp)
   42db8:	00431d40 	call	431d4 <__pack_d>
   42dbc:	dfc00517 	ldw	ra,20(sp)
   42dc0:	dec00704 	addi	sp,sp,28
   42dc4:	f800283a 	ret

00042dc8 <udivmodsi4>:
   42dc8:	29001b2e 	bgeu	r5,r4,42e38 <udivmodsi4+0x70>
   42dcc:	28001a16 	blt	r5,zero,42e38 <udivmodsi4+0x70>
   42dd0:	00800044 	movi	r2,1
   42dd4:	0007883a 	mov	r3,zero
   42dd8:	01c007c4 	movi	r7,31
   42ddc:	00000306 	br	42dec <udivmodsi4+0x24>
   42de0:	19c01326 	beq	r3,r7,42e30 <udivmodsi4+0x68>
   42de4:	18c00044 	addi	r3,r3,1
   42de8:	28000416 	blt	r5,zero,42dfc <udivmodsi4+0x34>
   42dec:	294b883a 	add	r5,r5,r5
   42df0:	1085883a 	add	r2,r2,r2
   42df4:	293ffa36 	bltu	r5,r4,42de0 <udivmodsi4+0x18>
   42df8:	10000d26 	beq	r2,zero,42e30 <udivmodsi4+0x68>
   42dfc:	0007883a 	mov	r3,zero
   42e00:	21400236 	bltu	r4,r5,42e0c <udivmodsi4+0x44>
   42e04:	2149c83a 	sub	r4,r4,r5
   42e08:	1886b03a 	or	r3,r3,r2
   42e0c:	1004d07a 	srli	r2,r2,1
   42e10:	280ad07a 	srli	r5,r5,1
   42e14:	103ffa1e 	bne	r2,zero,42e00 <udivmodsi4+0x38>
   42e18:	30000226 	beq	r6,zero,42e24 <udivmodsi4+0x5c>
   42e1c:	2005883a 	mov	r2,r4
   42e20:	f800283a 	ret
   42e24:	1809883a 	mov	r4,r3
   42e28:	2005883a 	mov	r2,r4
   42e2c:	f800283a 	ret
   42e30:	0007883a 	mov	r3,zero
   42e34:	003ff806 	br	42e18 <udivmodsi4+0x50>
   42e38:	00800044 	movi	r2,1
   42e3c:	0007883a 	mov	r3,zero
   42e40:	003fef06 	br	42e00 <udivmodsi4+0x38>

00042e44 <__divsi3>:
   42e44:	defffe04 	addi	sp,sp,-8
   42e48:	dc000015 	stw	r16,0(sp)
   42e4c:	dfc00115 	stw	ra,4(sp)
   42e50:	0021883a 	mov	r16,zero
   42e54:	20000c16 	blt	r4,zero,42e88 <__divsi3+0x44>
   42e58:	000d883a 	mov	r6,zero
   42e5c:	28000e16 	blt	r5,zero,42e98 <__divsi3+0x54>
   42e60:	0042dc80 	call	42dc8 <udivmodsi4>
   42e64:	1007883a 	mov	r3,r2
   42e68:	8005003a 	cmpeq	r2,r16,zero
   42e6c:	1000011e 	bne	r2,zero,42e74 <__divsi3+0x30>
   42e70:	00c7c83a 	sub	r3,zero,r3
   42e74:	1805883a 	mov	r2,r3
   42e78:	dfc00117 	ldw	ra,4(sp)
   42e7c:	dc000017 	ldw	r16,0(sp)
   42e80:	dec00204 	addi	sp,sp,8
   42e84:	f800283a 	ret
   42e88:	0109c83a 	sub	r4,zero,r4
   42e8c:	04000044 	movi	r16,1
   42e90:	000d883a 	mov	r6,zero
   42e94:	283ff20e 	bge	r5,zero,42e60 <__divsi3+0x1c>
   42e98:	014bc83a 	sub	r5,zero,r5
   42e9c:	8021003a 	cmpeq	r16,r16,zero
   42ea0:	003fef06 	br	42e60 <__divsi3+0x1c>

00042ea4 <__modsi3>:
   42ea4:	deffff04 	addi	sp,sp,-4
   42ea8:	dfc00015 	stw	ra,0(sp)
   42eac:	01800044 	movi	r6,1
   42eb0:	2807883a 	mov	r3,r5
   42eb4:	20000416 	blt	r4,zero,42ec8 <__modsi3+0x24>
   42eb8:	28000c16 	blt	r5,zero,42eec <__modsi3+0x48>
   42ebc:	dfc00017 	ldw	ra,0(sp)
   42ec0:	dec00104 	addi	sp,sp,4
   42ec4:	0042dc81 	jmpi	42dc8 <udivmodsi4>
   42ec8:	0109c83a 	sub	r4,zero,r4
   42ecc:	28000b16 	blt	r5,zero,42efc <__modsi3+0x58>
   42ed0:	180b883a 	mov	r5,r3
   42ed4:	01800044 	movi	r6,1
   42ed8:	0042dc80 	call	42dc8 <udivmodsi4>
   42edc:	0085c83a 	sub	r2,zero,r2
   42ee0:	dfc00017 	ldw	ra,0(sp)
   42ee4:	dec00104 	addi	sp,sp,4
   42ee8:	f800283a 	ret
   42eec:	014bc83a 	sub	r5,zero,r5
   42ef0:	dfc00017 	ldw	ra,0(sp)
   42ef4:	dec00104 	addi	sp,sp,4
   42ef8:	0042dc81 	jmpi	42dc8 <udivmodsi4>
   42efc:	0147c83a 	sub	r3,zero,r5
   42f00:	003ff306 	br	42ed0 <__modsi3+0x2c>

00042f04 <__udivsi3>:
   42f04:	000d883a 	mov	r6,zero
   42f08:	0042dc81 	jmpi	42dc8 <udivmodsi4>

00042f0c <__umodsi3>:
   42f0c:	01800044 	movi	r6,1
   42f10:	0042dc81 	jmpi	42dc8 <udivmodsi4>

00042f14 <__muldi3>:
   42f14:	2011883a 	mov	r8,r4
   42f18:	427fffcc 	andi	r9,r8,65535
   42f1c:	4018d43a 	srli	r12,r8,16
   42f20:	32bfffcc 	andi	r10,r6,65535
   42f24:	3016d43a 	srli	r11,r6,16
   42f28:	4a85383a 	mul	r2,r9,r10
   42f2c:	6295383a 	mul	r10,r12,r10
   42f30:	4ad3383a 	mul	r9,r9,r11
   42f34:	113fffcc 	andi	r4,r2,65535
   42f38:	1004d43a 	srli	r2,r2,16
   42f3c:	4a93883a 	add	r9,r9,r10
   42f40:	3807883a 	mov	r3,r7
   42f44:	1245883a 	add	r2,r2,r9
   42f48:	280f883a 	mov	r7,r5
   42f4c:	180b883a 	mov	r5,r3
   42f50:	1006943a 	slli	r3,r2,16
   42f54:	defffd04 	addi	sp,sp,-12
   42f58:	dc800215 	stw	r18,8(sp)
   42f5c:	1907883a 	add	r3,r3,r4
   42f60:	dc400115 	stw	r17,4(sp)
   42f64:	dc000015 	stw	r16,0(sp)
   42f68:	4165383a 	mul	r18,r8,r5
   42f6c:	31e3383a 	mul	r17,r6,r7
   42f70:	1012d43a 	srli	r9,r2,16
   42f74:	62d9383a 	mul	r12,r12,r11
   42f78:	181f883a 	mov	r15,r3
   42f7c:	1280022e 	bgeu	r2,r10,42f88 <__muldi3+0x74>
   42f80:	00800074 	movhi	r2,1
   42f84:	6099883a 	add	r12,r12,r2
   42f88:	624d883a 	add	r6,r12,r9
   42f8c:	9187883a 	add	r3,r18,r6
   42f90:	88c7883a 	add	r3,r17,r3
   42f94:	7805883a 	mov	r2,r15
   42f98:	dc800217 	ldw	r18,8(sp)
   42f9c:	dc400117 	ldw	r17,4(sp)
   42fa0:	dc000017 	ldw	r16,0(sp)
   42fa4:	dec00304 	addi	sp,sp,12
   42fa8:	f800283a 	ret

00042fac <__pack_f>:
   42fac:	20c00017 	ldw	r3,0(r4)
   42fb0:	01c00044 	movi	r7,1
   42fb4:	21800317 	ldw	r6,12(r4)
   42fb8:	21400117 	ldw	r5,4(r4)
   42fbc:	38c02d2e 	bgeu	r7,r3,43074 <__pack_f+0xc8>
   42fc0:	00800104 	movi	r2,4
   42fc4:	18802826 	beq	r3,r2,43068 <__pack_f+0xbc>
   42fc8:	00800084 	movi	r2,2
   42fcc:	18800126 	beq	r3,r2,42fd4 <__pack_f+0x28>
   42fd0:	3000101e 	bne	r6,zero,43014 <__pack_f+0x68>
   42fd4:	000d883a 	mov	r6,zero
   42fd8:	0007883a 	mov	r3,zero
   42fdc:	19003fcc 	andi	r4,r3,255
   42fe0:	200895fa 	slli	r4,r4,23
   42fe4:	00c02034 	movhi	r3,128
   42fe8:	18ffffc4 	addi	r3,r3,-1
   42fec:	30c6703a 	and	r3,r6,r3
   42ff0:	10a0002c 	andhi	r2,r2,32768
   42ff4:	10c4b03a 	or	r2,r2,r3
   42ff8:	280a97fa 	slli	r5,r5,31
   42ffc:	1104b03a 	or	r2,r2,r4
   43000:	00e00034 	movhi	r3,32768
   43004:	18ffffc4 	addi	r3,r3,-1
   43008:	10c4703a 	and	r2,r2,r3
   4300c:	1144b03a 	or	r2,r2,r5
   43010:	f800283a 	ret
   43014:	21000217 	ldw	r4,8(r4)
   43018:	00bfe084 	movi	r2,-126
   4301c:	20801b16 	blt	r4,r2,4308c <__pack_f+0xe0>
   43020:	00801fc4 	movi	r2,127
   43024:	11001016 	blt	r2,r4,43068 <__pack_f+0xbc>
   43028:	308e703a 	and	r7,r6,r2
   4302c:	2087883a 	add	r3,r4,r2
   43030:	00801004 	movi	r2,64
   43034:	38800526 	beq	r7,r2,4304c <__pack_f+0xa0>
   43038:	31800fc4 	addi	r6,r6,63
   4303c:	30000716 	blt	r6,zero,4305c <__pack_f+0xb0>
   43040:	300490ba 	slli	r2,r6,2
   43044:	100cd27a 	srli	r6,r2,9
   43048:	003fe406 	br	42fdc <__pack_f+0x30>
   4304c:	3080200c 	andi	r2,r6,128
   43050:	103ffa26 	beq	r2,zero,4303c <__pack_f+0x90>
   43054:	31cd883a 	add	r6,r6,r7
   43058:	003ff806 	br	4303c <__pack_f+0x90>
   4305c:	300cd07a 	srli	r6,r6,1
   43060:	18c00044 	addi	r3,r3,1
   43064:	003ff606 	br	43040 <__pack_f+0x94>
   43068:	000d883a 	mov	r6,zero
   4306c:	00ffffc4 	movi	r3,-1
   43070:	003fda06 	br	42fdc <__pack_f+0x30>
   43074:	31800434 	orhi	r6,r6,16
   43078:	00802034 	movhi	r2,128
   4307c:	10bfffc4 	addi	r2,r2,-1
   43080:	308c703a 	and	r6,r6,r2
   43084:	00ffffc4 	movi	r3,-1
   43088:	003fd406 	br	42fdc <__pack_f+0x30>
   4308c:	1109c83a 	sub	r4,r2,r4
   43090:	00800644 	movi	r2,25
   43094:	11001216 	blt	r2,r4,430e0 <__pack_f+0x134>
   43098:	3904983a 	sll	r2,r7,r4
   4309c:	3106d83a 	srl	r3,r6,r4
   430a0:	10bfffc4 	addi	r2,r2,-1
   430a4:	3084703a 	and	r2,r6,r2
   430a8:	1004c03a 	cmpne	r2,r2,zero
   430ac:	1886b03a 	or	r3,r3,r2
   430b0:	19001fcc 	andi	r4,r3,127
   430b4:	00801004 	movi	r2,64
   430b8:	20800c26 	beq	r4,r2,430ec <__pack_f+0x140>
   430bc:	18c00fc4 	addi	r3,r3,63
   430c0:	00900034 	movhi	r2,16384
   430c4:	10bfffc4 	addi	r2,r2,-1
   430c8:	180cd1fa 	srli	r6,r3,7
   430cc:	10c7803a 	cmpltu	r3,r2,r3
   430d0:	00802034 	movhi	r2,128
   430d4:	10bfffc4 	addi	r2,r2,-1
   430d8:	308c703a 	and	r6,r6,r2
   430dc:	003fbf06 	br	42fdc <__pack_f+0x30>
   430e0:	0007883a 	mov	r3,zero
   430e4:	000d883a 	mov	r6,zero
   430e8:	003ff906 	br	430d0 <__pack_f+0x124>
   430ec:	1880200c 	andi	r2,r3,128
   430f0:	10000126 	beq	r2,zero,430f8 <__pack_f+0x14c>
   430f4:	1907883a 	add	r3,r3,r4
   430f8:	180cd1fa 	srli	r6,r3,7
   430fc:	00900034 	movhi	r2,16384
   43100:	10bfffc4 	addi	r2,r2,-1
   43104:	10c7803a 	cmpltu	r3,r2,r3
   43108:	003ff106 	br	430d0 <__pack_f+0x124>

0004310c <__unpack_f>:
   4310c:	21800017 	ldw	r6,0(r4)
   43110:	00c02034 	movhi	r3,128
   43114:	18ffffc4 	addi	r3,r3,-1
   43118:	3004d5fa 	srli	r2,r6,23
   4311c:	3008d7fa 	srli	r4,r6,31
   43120:	30ce703a 	and	r7,r6,r3
   43124:	10c03fcc 	andi	r3,r2,255
   43128:	29000115 	stw	r4,4(r5)
   4312c:	1800131e 	bne	r3,zero,4317c <__unpack_f+0x70>
   43130:	38000f26 	beq	r7,zero,43170 <__unpack_f+0x64>
   43134:	380691fa 	slli	r3,r7,7
   43138:	01bfe084 	movi	r6,-126
   4313c:	008000c4 	movi	r2,3
   43140:	01100034 	movhi	r4,16384
   43144:	213fffc4 	addi	r4,r4,-1
   43148:	28800015 	stw	r2,0(r5)
   4314c:	29800215 	stw	r6,8(r5)
   43150:	20c00536 	bltu	r4,r3,43168 <__unpack_f+0x5c>
   43154:	3005883a 	mov	r2,r6
   43158:	18c7883a 	add	r3,r3,r3
   4315c:	10bfffc4 	addi	r2,r2,-1
   43160:	20fffd2e 	bgeu	r4,r3,43158 <__unpack_f+0x4c>
   43164:	28800215 	stw	r2,8(r5)
   43168:	28c00315 	stw	r3,12(r5)
   4316c:	f800283a 	ret
   43170:	00800084 	movi	r2,2
   43174:	28800015 	stw	r2,0(r5)
   43178:	f800283a 	ret
   4317c:	00803fc4 	movi	r2,255
   43180:	18800826 	beq	r3,r2,431a4 <__unpack_f+0x98>
   43184:	380491fa 	slli	r2,r7,7
   43188:	18ffe044 	addi	r3,r3,-127
   4318c:	28c00215 	stw	r3,8(r5)
   43190:	10900034 	orhi	r2,r2,16384
   43194:	28800315 	stw	r2,12(r5)
   43198:	008000c4 	movi	r2,3
   4319c:	28800015 	stw	r2,0(r5)
   431a0:	f800283a 	ret
   431a4:	3800031e 	bne	r7,zero,431b4 <__unpack_f+0xa8>
   431a8:	00800104 	movi	r2,4
   431ac:	28800015 	stw	r2,0(r5)
   431b0:	f800283a 	ret
   431b4:	3080042c 	andhi	r2,r6,16
   431b8:	10000426 	beq	r2,zero,431cc <__unpack_f+0xc0>
   431bc:	00800044 	movi	r2,1
   431c0:	28800015 	stw	r2,0(r5)
   431c4:	29c00315 	stw	r7,12(r5)
   431c8:	f800283a 	ret
   431cc:	28000015 	stw	zero,0(r5)
   431d0:	003ffc06 	br	431c4 <__unpack_f+0xb8>

000431d4 <__pack_d>:
   431d4:	20c00017 	ldw	r3,0(r4)
   431d8:	defffd04 	addi	sp,sp,-12
   431dc:	dc000015 	stw	r16,0(sp)
   431e0:	dc800215 	stw	r18,8(sp)
   431e4:	dc400115 	stw	r17,4(sp)
   431e8:	00800044 	movi	r2,1
   431ec:	22000317 	ldw	r8,12(r4)
   431f0:	001f883a 	mov	r15,zero
   431f4:	22400417 	ldw	r9,16(r4)
   431f8:	24000117 	ldw	r16,4(r4)
   431fc:	10c0552e 	bgeu	r2,r3,43354 <__pack_d+0x180>
   43200:	00800104 	movi	r2,4
   43204:	18804f26 	beq	r3,r2,43344 <__pack_d+0x170>
   43208:	00800084 	movi	r2,2
   4320c:	18800226 	beq	r3,r2,43218 <__pack_d+0x44>
   43210:	4244b03a 	or	r2,r8,r9
   43214:	10001a1e 	bne	r2,zero,43280 <__pack_d+0xac>
   43218:	000d883a 	mov	r6,zero
   4321c:	000f883a 	mov	r7,zero
   43220:	0011883a 	mov	r8,zero
   43224:	00800434 	movhi	r2,16
   43228:	10bfffc4 	addi	r2,r2,-1
   4322c:	301d883a 	mov	r14,r6
   43230:	3884703a 	and	r2,r7,r2
   43234:	400a953a 	slli	r5,r8,20
   43238:	79bffc2c 	andhi	r6,r15,65520
   4323c:	308cb03a 	or	r6,r6,r2
   43240:	00e00434 	movhi	r3,32784
   43244:	18ffffc4 	addi	r3,r3,-1
   43248:	800497fa 	slli	r2,r16,31
   4324c:	30c6703a 	and	r3,r6,r3
   43250:	1946b03a 	or	r3,r3,r5
   43254:	01600034 	movhi	r5,32768
   43258:	297fffc4 	addi	r5,r5,-1
   4325c:	194a703a 	and	r5,r3,r5
   43260:	288ab03a 	or	r5,r5,r2
   43264:	2807883a 	mov	r3,r5
   43268:	7005883a 	mov	r2,r14
   4326c:	dc800217 	ldw	r18,8(sp)
   43270:	dc400117 	ldw	r17,4(sp)
   43274:	dc000017 	ldw	r16,0(sp)
   43278:	dec00304 	addi	sp,sp,12
   4327c:	f800283a 	ret
   43280:	21000217 	ldw	r4,8(r4)
   43284:	00bf0084 	movi	r2,-1022
   43288:	20803f16 	blt	r4,r2,43388 <__pack_d+0x1b4>
   4328c:	0080ffc4 	movi	r2,1023
   43290:	11002c16 	blt	r2,r4,43344 <__pack_d+0x170>
   43294:	00803fc4 	movi	r2,255
   43298:	408c703a 	and	r6,r8,r2
   4329c:	00802004 	movi	r2,128
   432a0:	0007883a 	mov	r3,zero
   432a4:	000f883a 	mov	r7,zero
   432a8:	2280ffc4 	addi	r10,r4,1023
   432ac:	30801e26 	beq	r6,r2,43328 <__pack_d+0x154>
   432b0:	00801fc4 	movi	r2,127
   432b4:	4089883a 	add	r4,r8,r2
   432b8:	220d803a 	cmpltu	r6,r4,r8
   432bc:	324d883a 	add	r6,r6,r9
   432c0:	2011883a 	mov	r8,r4
   432c4:	3013883a 	mov	r9,r6
   432c8:	00880034 	movhi	r2,8192
   432cc:	10bfffc4 	addi	r2,r2,-1
   432d0:	12400d36 	bltu	r2,r9,43308 <__pack_d+0x134>
   432d4:	4804963a 	slli	r2,r9,24
   432d8:	400cd23a 	srli	r6,r8,8
   432dc:	480ed23a 	srli	r7,r9,8
   432e0:	013fffc4 	movi	r4,-1
   432e4:	118cb03a 	or	r6,r2,r6
   432e8:	01400434 	movhi	r5,16
   432ec:	297fffc4 	addi	r5,r5,-1
   432f0:	3104703a 	and	r2,r6,r4
   432f4:	3946703a 	and	r3,r7,r5
   432f8:	5201ffcc 	andi	r8,r10,2047
   432fc:	100d883a 	mov	r6,r2
   43300:	180f883a 	mov	r7,r3
   43304:	003fc706 	br	43224 <__pack_d+0x50>
   43308:	480897fa 	slli	r4,r9,31
   4330c:	4004d07a 	srli	r2,r8,1
   43310:	4806d07a 	srli	r3,r9,1
   43314:	52800044 	addi	r10,r10,1
   43318:	2084b03a 	or	r2,r4,r2
   4331c:	1011883a 	mov	r8,r2
   43320:	1813883a 	mov	r9,r3
   43324:	003feb06 	br	432d4 <__pack_d+0x100>
   43328:	383fe11e 	bne	r7,zero,432b0 <__pack_d+0xdc>
   4332c:	01004004 	movi	r4,256
   43330:	4104703a 	and	r2,r8,r4
   43334:	10c4b03a 	or	r2,r2,r3
   43338:	103fe326 	beq	r2,zero,432c8 <__pack_d+0xf4>
   4333c:	3005883a 	mov	r2,r6
   43340:	003fdc06 	br	432b4 <__pack_d+0xe0>
   43344:	000d883a 	mov	r6,zero
   43348:	000f883a 	mov	r7,zero
   4334c:	0201ffc4 	movi	r8,2047
   43350:	003fb406 	br	43224 <__pack_d+0x50>
   43354:	0005883a 	mov	r2,zero
   43358:	00c00234 	movhi	r3,8
   4335c:	408cb03a 	or	r6,r8,r2
   43360:	48ceb03a 	or	r7,r9,r3
   43364:	013fffc4 	movi	r4,-1
   43368:	01400434 	movhi	r5,16
   4336c:	297fffc4 	addi	r5,r5,-1
   43370:	3104703a 	and	r2,r6,r4
   43374:	3946703a 	and	r3,r7,r5
   43378:	100d883a 	mov	r6,r2
   4337c:	180f883a 	mov	r7,r3
   43380:	0201ffc4 	movi	r8,2047
   43384:	003fa706 	br	43224 <__pack_d+0x50>
   43388:	1109c83a 	sub	r4,r2,r4
   4338c:	00800e04 	movi	r2,56
   43390:	11004316 	blt	r2,r4,434a0 <__pack_d+0x2cc>
   43394:	21fff804 	addi	r7,r4,-32
   43398:	38004516 	blt	r7,zero,434b0 <__pack_d+0x2dc>
   4339c:	49d8d83a 	srl	r12,r9,r7
   433a0:	001b883a 	mov	r13,zero
   433a4:	0023883a 	mov	r17,zero
   433a8:	01400044 	movi	r5,1
   433ac:	0025883a 	mov	r18,zero
   433b0:	38004716 	blt	r7,zero,434d0 <__pack_d+0x2fc>
   433b4:	29d6983a 	sll	r11,r5,r7
   433b8:	0015883a 	mov	r10,zero
   433bc:	00bfffc4 	movi	r2,-1
   433c0:	5089883a 	add	r4,r10,r2
   433c4:	588b883a 	add	r5,r11,r2
   433c8:	228d803a 	cmpltu	r6,r4,r10
   433cc:	314b883a 	add	r5,r6,r5
   433d0:	4104703a 	and	r2,r8,r4
   433d4:	4946703a 	and	r3,r9,r5
   433d8:	10c4b03a 	or	r2,r2,r3
   433dc:	10000226 	beq	r2,zero,433e8 <__pack_d+0x214>
   433e0:	04400044 	movi	r17,1
   433e4:	0025883a 	mov	r18,zero
   433e8:	00803fc4 	movi	r2,255
   433ec:	644eb03a 	or	r7,r12,r17
   433f0:	3892703a 	and	r9,r7,r2
   433f4:	00802004 	movi	r2,128
   433f8:	6c90b03a 	or	r8,r13,r18
   433fc:	0015883a 	mov	r10,zero
   43400:	48801626 	beq	r9,r2,4345c <__pack_d+0x288>
   43404:	01001fc4 	movi	r4,127
   43408:	3905883a 	add	r2,r7,r4
   4340c:	11cd803a 	cmpltu	r6,r2,r7
   43410:	320d883a 	add	r6,r6,r8
   43414:	100f883a 	mov	r7,r2
   43418:	00840034 	movhi	r2,4096
   4341c:	10bfffc4 	addi	r2,r2,-1
   43420:	3011883a 	mov	r8,r6
   43424:	0007883a 	mov	r3,zero
   43428:	11801b36 	bltu	r2,r6,43498 <__pack_d+0x2c4>
   4342c:	4004963a 	slli	r2,r8,24
   43430:	3808d23a 	srli	r4,r7,8
   43434:	400ad23a 	srli	r5,r8,8
   43438:	1813883a 	mov	r9,r3
   4343c:	1108b03a 	or	r4,r2,r4
   43440:	00bfffc4 	movi	r2,-1
   43444:	00c00434 	movhi	r3,16
   43448:	18ffffc4 	addi	r3,r3,-1
   4344c:	208c703a 	and	r6,r4,r2
   43450:	28ce703a 	and	r7,r5,r3
   43454:	4a01ffcc 	andi	r8,r9,2047
   43458:	003f7206 	br	43224 <__pack_d+0x50>
   4345c:	503fe91e 	bne	r10,zero,43404 <__pack_d+0x230>
   43460:	01004004 	movi	r4,256
   43464:	3904703a 	and	r2,r7,r4
   43468:	0007883a 	mov	r3,zero
   4346c:	10c4b03a 	or	r2,r2,r3
   43470:	10000626 	beq	r2,zero,4348c <__pack_d+0x2b8>
   43474:	3a45883a 	add	r2,r7,r9
   43478:	11cd803a 	cmpltu	r6,r2,r7
   4347c:	320d883a 	add	r6,r6,r8
   43480:	100f883a 	mov	r7,r2
   43484:	3011883a 	mov	r8,r6
   43488:	0007883a 	mov	r3,zero
   4348c:	00840034 	movhi	r2,4096
   43490:	10bfffc4 	addi	r2,r2,-1
   43494:	123fe52e 	bgeu	r2,r8,4342c <__pack_d+0x258>
   43498:	00c00044 	movi	r3,1
   4349c:	003fe306 	br	4342c <__pack_d+0x258>
   434a0:	0009883a 	mov	r4,zero
   434a4:	0013883a 	mov	r9,zero
   434a8:	000b883a 	mov	r5,zero
   434ac:	003fe406 	br	43440 <__pack_d+0x26c>
   434b0:	4a47883a 	add	r3,r9,r9
   434b4:	008007c4 	movi	r2,31
   434b8:	1105c83a 	sub	r2,r2,r4
   434bc:	1886983a 	sll	r3,r3,r2
   434c0:	4118d83a 	srl	r12,r8,r4
   434c4:	491ad83a 	srl	r13,r9,r4
   434c8:	1b18b03a 	or	r12,r3,r12
   434cc:	003fb506 	br	433a4 <__pack_d+0x1d0>
   434d0:	2806d07a 	srli	r3,r5,1
   434d4:	008007c4 	movi	r2,31
   434d8:	1105c83a 	sub	r2,r2,r4
   434dc:	1896d83a 	srl	r11,r3,r2
   434e0:	2914983a 	sll	r10,r5,r4
   434e4:	003fb506 	br	433bc <__pack_d+0x1e8>

000434e8 <printf>:
   434e8:	defffb04 	addi	sp,sp,-20
   434ec:	dfc00115 	stw	ra,4(sp)
   434f0:	d9400215 	stw	r5,8(sp)
   434f4:	d9800315 	stw	r6,12(sp)
   434f8:	d9c00415 	stw	r7,16(sp)
   434fc:	00800174 	movhi	r2,5
   43500:	10873804 	addi	r2,r2,7392
   43504:	10c00017 	ldw	r3,0(r2)
   43508:	200b883a 	mov	r5,r4
   4350c:	d8800204 	addi	r2,sp,8
   43510:	19000217 	ldw	r4,8(r3)
   43514:	100d883a 	mov	r6,r2
   43518:	d8800015 	stw	r2,0(sp)
   4351c:	00456fc0 	call	456fc <__vfprintf_internal>
   43520:	dfc00117 	ldw	ra,4(sp)
   43524:	dec00504 	addi	sp,sp,20
   43528:	f800283a 	ret

0004352c <_printf_r>:
   4352c:	defffc04 	addi	sp,sp,-16
   43530:	dfc00115 	stw	ra,4(sp)
   43534:	d9800215 	stw	r6,8(sp)
   43538:	d9c00315 	stw	r7,12(sp)
   4353c:	280d883a 	mov	r6,r5
   43540:	21400217 	ldw	r5,8(r4)
   43544:	d8c00204 	addi	r3,sp,8
   43548:	180f883a 	mov	r7,r3
   4354c:	d8c00015 	stw	r3,0(sp)
   43550:	00438500 	call	43850 <___vfprintf_internal_r>
   43554:	dfc00117 	ldw	ra,4(sp)
   43558:	dec00404 	addi	sp,sp,16
   4355c:	f800283a 	ret

00043560 <_puts_r>:
   43560:	defff604 	addi	sp,sp,-40
   43564:	dc400715 	stw	r17,28(sp)
   43568:	2023883a 	mov	r17,r4
   4356c:	2809883a 	mov	r4,r5
   43570:	dfc00915 	stw	ra,36(sp)
   43574:	dcc00815 	stw	r19,32(sp)
   43578:	2827883a 	mov	r19,r5
   4357c:	00437840 	call	43784 <strlen>
   43580:	89400217 	ldw	r5,8(r17)
   43584:	00c00174 	movhi	r3,5
   43588:	18ff8104 	addi	r3,r3,-508
   4358c:	01c00044 	movi	r7,1
   43590:	12000044 	addi	r8,r2,1
   43594:	d8c00515 	stw	r3,20(sp)
   43598:	d9c00615 	stw	r7,24(sp)
   4359c:	d8c00304 	addi	r3,sp,12
   435a0:	01c00084 	movi	r7,2
   435a4:	8809883a 	mov	r4,r17
   435a8:	d80d883a 	mov	r6,sp
   435ac:	d8c00015 	stw	r3,0(sp)
   435b0:	dcc00315 	stw	r19,12(sp)
   435b4:	da000215 	stw	r8,8(sp)
   435b8:	d9c00115 	stw	r7,4(sp)
   435bc:	d8800415 	stw	r2,16(sp)
   435c0:	00479580 	call	47958 <__sfvwrite_r>
   435c4:	00ffffc4 	movi	r3,-1
   435c8:	10000626 	beq	r2,zero,435e4 <_puts_r+0x84>
   435cc:	1805883a 	mov	r2,r3
   435d0:	dfc00917 	ldw	ra,36(sp)
   435d4:	dcc00817 	ldw	r19,32(sp)
   435d8:	dc400717 	ldw	r17,28(sp)
   435dc:	dec00a04 	addi	sp,sp,40
   435e0:	f800283a 	ret
   435e4:	00c00284 	movi	r3,10
   435e8:	1805883a 	mov	r2,r3
   435ec:	dfc00917 	ldw	ra,36(sp)
   435f0:	dcc00817 	ldw	r19,32(sp)
   435f4:	dc400717 	ldw	r17,28(sp)
   435f8:	dec00a04 	addi	sp,sp,40
   435fc:	f800283a 	ret

00043600 <puts>:
   43600:	00800174 	movhi	r2,5
   43604:	10873804 	addi	r2,r2,7392
   43608:	200b883a 	mov	r5,r4
   4360c:	11000017 	ldw	r4,0(r2)
   43610:	00435601 	jmpi	43560 <_puts_r>

00043614 <snprintf>:
   43614:	deffe404 	addi	sp,sp,-112
   43618:	dc001815 	stw	r16,96(sp)
   4361c:	2011883a 	mov	r8,r4
   43620:	2821883a 	mov	r16,r5
   43624:	dfc01a15 	stw	ra,104(sp)
   43628:	dc401915 	stw	r17,100(sp)
   4362c:	d9c01b15 	stw	r7,108(sp)
   43630:	01000174 	movhi	r4,5
   43634:	21073804 	addi	r4,r4,7392
   43638:	00ffffc4 	movi	r3,-1
   4363c:	24400017 	ldw	r17,0(r4)
   43640:	28002016 	blt	r5,zero,436c4 <snprintf+0xb0>
   43644:	0007883a 	mov	r3,zero
   43648:	28000126 	beq	r5,zero,43650 <snprintf+0x3c>
   4364c:	28ffffc4 	addi	r3,r5,-1
   43650:	d8801b04 	addi	r2,sp,108
   43654:	21000017 	ldw	r4,0(r4)
   43658:	d8800015 	stw	r2,0(sp)
   4365c:	100f883a 	mov	r7,r2
   43660:	00808204 	movi	r2,520
   43664:	d880040d 	sth	r2,16(sp)
   43668:	d9400104 	addi	r5,sp,4
   4366c:	00bfffc4 	movi	r2,-1
   43670:	d8c00615 	stw	r3,24(sp)
   43674:	d8c00315 	stw	r3,12(sp)
   43678:	da000515 	stw	r8,20(sp)
   4367c:	d880048d 	sth	r2,18(sp)
   43680:	da000115 	stw	r8,4(sp)
   43684:	00438500 	call	43850 <___vfprintf_internal_r>
   43688:	1007883a 	mov	r3,r2
   4368c:	00bfffc4 	movi	r2,-1
   43690:	18800916 	blt	r3,r2,436b8 <snprintf+0xa4>
   43694:	80000226 	beq	r16,zero,436a0 <snprintf+0x8c>
   43698:	d8800117 	ldw	r2,4(sp)
   4369c:	10000005 	stb	zero,0(r2)
   436a0:	1805883a 	mov	r2,r3
   436a4:	dfc01a17 	ldw	ra,104(sp)
   436a8:	dc401917 	ldw	r17,100(sp)
   436ac:	dc001817 	ldw	r16,96(sp)
   436b0:	dec01c04 	addi	sp,sp,112
   436b4:	f800283a 	ret
   436b8:	008022c4 	movi	r2,139
   436bc:	88800015 	stw	r2,0(r17)
   436c0:	003ff406 	br	43694 <snprintf+0x80>
   436c4:	008022c4 	movi	r2,139
   436c8:	88800015 	stw	r2,0(r17)
   436cc:	003ff406 	br	436a0 <snprintf+0x8c>

000436d0 <_snprintf_r>:
   436d0:	deffe504 	addi	sp,sp,-108
   436d4:	dc401915 	stw	r17,100(sp)
   436d8:	dc001815 	stw	r16,96(sp)
   436dc:	dfc01a15 	stw	ra,104(sp)
   436e0:	3021883a 	mov	r16,r6
   436e4:	00ffffc4 	movi	r3,-1
   436e8:	2023883a 	mov	r17,r4
   436ec:	2811883a 	mov	r8,r5
   436f0:	30002116 	blt	r6,zero,43778 <_snprintf_r+0xa8>
   436f4:	0007883a 	mov	r3,zero
   436f8:	30000126 	beq	r6,zero,43700 <_snprintf_r+0x30>
   436fc:	30ffffc4 	addi	r3,r6,-1
   43700:	d8801b04 	addi	r2,sp,108
   43704:	d8800015 	stw	r2,0(sp)
   43708:	380d883a 	mov	r6,r7
   4370c:	100f883a 	mov	r7,r2
   43710:	00808204 	movi	r2,520
   43714:	d880040d 	sth	r2,16(sp)
   43718:	8809883a 	mov	r4,r17
   4371c:	00bfffc4 	movi	r2,-1
   43720:	d9400104 	addi	r5,sp,4
   43724:	d8c00615 	stw	r3,24(sp)
   43728:	d8c00315 	stw	r3,12(sp)
   4372c:	da000515 	stw	r8,20(sp)
   43730:	d880048d 	sth	r2,18(sp)
   43734:	da000115 	stw	r8,4(sp)
   43738:	00438500 	call	43850 <___vfprintf_internal_r>
   4373c:	1007883a 	mov	r3,r2
   43740:	00bfffc4 	movi	r2,-1
   43744:	18800916 	blt	r3,r2,4376c <_snprintf_r+0x9c>
   43748:	80000226 	beq	r16,zero,43754 <_snprintf_r+0x84>
   4374c:	d8800117 	ldw	r2,4(sp)
   43750:	10000005 	stb	zero,0(r2)
   43754:	1805883a 	mov	r2,r3
   43758:	dfc01a17 	ldw	ra,104(sp)
   4375c:	dc401917 	ldw	r17,100(sp)
   43760:	dc001817 	ldw	r16,96(sp)
   43764:	dec01b04 	addi	sp,sp,108
   43768:	f800283a 	ret
   4376c:	008022c4 	movi	r2,139
   43770:	88800015 	stw	r2,0(r17)
   43774:	003ff406 	br	43748 <_snprintf_r+0x78>
   43778:	008022c4 	movi	r2,139
   4377c:	20800015 	stw	r2,0(r4)
   43780:	003ff406 	br	43754 <_snprintf_r+0x84>

00043784 <strlen>:
   43784:	208000cc 	andi	r2,r4,3
   43788:	2011883a 	mov	r8,r4
   4378c:	1000161e 	bne	r2,zero,437e8 <strlen+0x64>
   43790:	20c00017 	ldw	r3,0(r4)
   43794:	017fbff4 	movhi	r5,65279
   43798:	297fbfc4 	addi	r5,r5,-257
   4379c:	01e02074 	movhi	r7,32897
   437a0:	39e02004 	addi	r7,r7,-32640
   437a4:	1945883a 	add	r2,r3,r5
   437a8:	11c4703a 	and	r2,r2,r7
   437ac:	00c6303a 	nor	r3,zero,r3
   437b0:	1886703a 	and	r3,r3,r2
   437b4:	18000c1e 	bne	r3,zero,437e8 <strlen+0x64>
   437b8:	280d883a 	mov	r6,r5
   437bc:	380b883a 	mov	r5,r7
   437c0:	21000104 	addi	r4,r4,4
   437c4:	20800017 	ldw	r2,0(r4)
   437c8:	1187883a 	add	r3,r2,r6
   437cc:	1946703a 	and	r3,r3,r5
   437d0:	0084303a 	nor	r2,zero,r2
   437d4:	10c4703a 	and	r2,r2,r3
   437d8:	103ff926 	beq	r2,zero,437c0 <strlen+0x3c>
   437dc:	20800007 	ldb	r2,0(r4)
   437e0:	10000326 	beq	r2,zero,437f0 <strlen+0x6c>
   437e4:	21000044 	addi	r4,r4,1
   437e8:	20800007 	ldb	r2,0(r4)
   437ec:	103ffd1e 	bne	r2,zero,437e4 <strlen+0x60>
   437f0:	2205c83a 	sub	r2,r4,r8
   437f4:	f800283a 	ret

000437f8 <__sprint_r>:
   437f8:	30800217 	ldw	r2,8(r6)
   437fc:	defffe04 	addi	sp,sp,-8
   43800:	dc000015 	stw	r16,0(sp)
   43804:	dfc00115 	stw	ra,4(sp)
   43808:	3021883a 	mov	r16,r6
   4380c:	0007883a 	mov	r3,zero
   43810:	1000061e 	bne	r2,zero,4382c <__sprint_r+0x34>
   43814:	1805883a 	mov	r2,r3
   43818:	30000115 	stw	zero,4(r6)
   4381c:	dfc00117 	ldw	ra,4(sp)
   43820:	dc000017 	ldw	r16,0(sp)
   43824:	dec00204 	addi	sp,sp,8
   43828:	f800283a 	ret
   4382c:	00479580 	call	47958 <__sfvwrite_r>
   43830:	1007883a 	mov	r3,r2
   43834:	1805883a 	mov	r2,r3
   43838:	80000115 	stw	zero,4(r16)
   4383c:	80000215 	stw	zero,8(r16)
   43840:	dfc00117 	ldw	ra,4(sp)
   43844:	dc000017 	ldw	r16,0(sp)
   43848:	dec00204 	addi	sp,sp,8
   4384c:	f800283a 	ret

00043850 <___vfprintf_internal_r>:
   43850:	defea404 	addi	sp,sp,-1392
   43854:	dd815815 	stw	r22,1376(sp)
   43858:	dc015215 	stw	r16,1352(sp)
   4385c:	d9c15115 	stw	r7,1348(sp)
   43860:	dfc15b15 	stw	ra,1388(sp)
   43864:	df015a15 	stw	fp,1384(sp)
   43868:	ddc15915 	stw	r23,1380(sp)
   4386c:	dd415715 	stw	r21,1372(sp)
   43870:	dd015615 	stw	r20,1368(sp)
   43874:	dcc15515 	stw	r19,1364(sp)
   43878:	dc815415 	stw	r18,1360(sp)
   4387c:	dc415315 	stw	r17,1356(sp)
   43880:	282d883a 	mov	r22,r5
   43884:	3021883a 	mov	r16,r6
   43888:	d9014f15 	stw	r4,1340(sp)
   4388c:	0047f7c0 	call	47f7c <_localeconv_r>
   43890:	10800017 	ldw	r2,0(r2)
   43894:	d9c15117 	ldw	r7,1348(sp)
   43898:	d8814915 	stw	r2,1316(sp)
   4389c:	d8814f17 	ldw	r2,1340(sp)
   438a0:	10000226 	beq	r2,zero,438ac <___vfprintf_internal_r+0x5c>
   438a4:	10800e17 	ldw	r2,56(r2)
   438a8:	10020d26 	beq	r2,zero,440e0 <___vfprintf_internal_r+0x890>
   438ac:	b080030b 	ldhu	r2,12(r22)
   438b0:	1080020c 	andi	r2,r2,8
   438b4:	10020e26 	beq	r2,zero,440f0 <___vfprintf_internal_r+0x8a0>
   438b8:	b0800417 	ldw	r2,16(r22)
   438bc:	10020c26 	beq	r2,zero,440f0 <___vfprintf_internal_r+0x8a0>
   438c0:	b200030b 	ldhu	r8,12(r22)
   438c4:	00800284 	movi	r2,10
   438c8:	40c0068c 	andi	r3,r8,26
   438cc:	18802f1e 	bne	r3,r2,4398c <___vfprintf_internal_r+0x13c>
   438d0:	b080038f 	ldh	r2,14(r22)
   438d4:	10002d16 	blt	r2,zero,4398c <___vfprintf_internal_r+0x13c>
   438d8:	b240038b 	ldhu	r9,14(r22)
   438dc:	b2800717 	ldw	r10,28(r22)
   438e0:	b2c00917 	ldw	r11,36(r22)
   438e4:	d9014f17 	ldw	r4,1340(sp)
   438e8:	dc402904 	addi	r17,sp,164
   438ec:	d8804004 	addi	r2,sp,256
   438f0:	00c10004 	movi	r3,1024
   438f4:	423fff4c 	andi	r8,r8,65533
   438f8:	800d883a 	mov	r6,r16
   438fc:	880b883a 	mov	r5,r17
   43900:	da002c0d 	sth	r8,176(sp)
   43904:	da402c8d 	sth	r9,178(sp)
   43908:	da803015 	stw	r10,192(sp)
   4390c:	dac03215 	stw	r11,200(sp)
   43910:	d8802d15 	stw	r2,180(sp)
   43914:	d8c02e15 	stw	r3,184(sp)
   43918:	d8802915 	stw	r2,164(sp)
   4391c:	d8c02b15 	stw	r3,172(sp)
   43920:	d8002f15 	stw	zero,188(sp)
   43924:	00438500 	call	43850 <___vfprintf_internal_r>
   43928:	d8814b15 	stw	r2,1324(sp)
   4392c:	10000416 	blt	r2,zero,43940 <___vfprintf_internal_r+0xf0>
   43930:	d9014f17 	ldw	r4,1340(sp)
   43934:	880b883a 	mov	r5,r17
   43938:	00470280 	call	47028 <_fflush_r>
   4393c:	1002321e 	bne	r2,zero,44208 <___vfprintf_internal_r+0x9b8>
   43940:	d8802c0b 	ldhu	r2,176(sp)
   43944:	1080100c 	andi	r2,r2,64
   43948:	10000326 	beq	r2,zero,43958 <___vfprintf_internal_r+0x108>
   4394c:	b080030b 	ldhu	r2,12(r22)
   43950:	10801014 	ori	r2,r2,64
   43954:	b080030d 	sth	r2,12(r22)
   43958:	d8814b17 	ldw	r2,1324(sp)
   4395c:	dfc15b17 	ldw	ra,1388(sp)
   43960:	df015a17 	ldw	fp,1384(sp)
   43964:	ddc15917 	ldw	r23,1380(sp)
   43968:	dd815817 	ldw	r22,1376(sp)
   4396c:	dd415717 	ldw	r21,1372(sp)
   43970:	dd015617 	ldw	r20,1368(sp)
   43974:	dcc15517 	ldw	r19,1364(sp)
   43978:	dc815417 	ldw	r18,1360(sp)
   4397c:	dc415317 	ldw	r17,1356(sp)
   43980:	dc015217 	ldw	r16,1352(sp)
   43984:	dec15c04 	addi	sp,sp,1392
   43988:	f800283a 	ret
   4398c:	0005883a 	mov	r2,zero
   43990:	0007883a 	mov	r3,zero
   43994:	dd401904 	addi	r21,sp,100
   43998:	d8814215 	stw	r2,1288(sp)
   4399c:	802f883a 	mov	r23,r16
   439a0:	d8c14315 	stw	r3,1292(sp)
   439a4:	d8014b15 	stw	zero,1324(sp)
   439a8:	d8014815 	stw	zero,1312(sp)
   439ac:	d8014415 	stw	zero,1296(sp)
   439b0:	d8014715 	stw	zero,1308(sp)
   439b4:	dd400c15 	stw	r21,48(sp)
   439b8:	d8000e15 	stw	zero,56(sp)
   439bc:	d8000d15 	stw	zero,52(sp)
   439c0:	b8800007 	ldb	r2,0(r23)
   439c4:	10001926 	beq	r2,zero,43a2c <___vfprintf_internal_r+0x1dc>
   439c8:	00c00944 	movi	r3,37
   439cc:	10c01726 	beq	r2,r3,43a2c <___vfprintf_internal_r+0x1dc>
   439d0:	b821883a 	mov	r16,r23
   439d4:	00000106 	br	439dc <___vfprintf_internal_r+0x18c>
   439d8:	10c00326 	beq	r2,r3,439e8 <___vfprintf_internal_r+0x198>
   439dc:	84000044 	addi	r16,r16,1
   439e0:	80800007 	ldb	r2,0(r16)
   439e4:	103ffc1e 	bne	r2,zero,439d8 <___vfprintf_internal_r+0x188>
   439e8:	85e7c83a 	sub	r19,r16,r23
   439ec:	98000e26 	beq	r19,zero,43a28 <___vfprintf_internal_r+0x1d8>
   439f0:	dc800e17 	ldw	r18,56(sp)
   439f4:	dc400d17 	ldw	r17,52(sp)
   439f8:	008001c4 	movi	r2,7
   439fc:	94e5883a 	add	r18,r18,r19
   43a00:	8c400044 	addi	r17,r17,1
   43a04:	adc00015 	stw	r23,0(r21)
   43a08:	dc800e15 	stw	r18,56(sp)
   43a0c:	acc00115 	stw	r19,4(r21)
   43a10:	dc400d15 	stw	r17,52(sp)
   43a14:	14428b16 	blt	r2,r17,44444 <___vfprintf_internal_r+0xbf4>
   43a18:	ad400204 	addi	r21,r21,8
   43a1c:	d9014b17 	ldw	r4,1324(sp)
   43a20:	24c9883a 	add	r4,r4,r19
   43a24:	d9014b15 	stw	r4,1324(sp)
   43a28:	802f883a 	mov	r23,r16
   43a2c:	b8800007 	ldb	r2,0(r23)
   43a30:	10013c26 	beq	r2,zero,43f24 <___vfprintf_internal_r+0x6d4>
   43a34:	bdc00044 	addi	r23,r23,1
   43a38:	d8000405 	stb	zero,16(sp)
   43a3c:	b8c00007 	ldb	r3,0(r23)
   43a40:	04ffffc4 	movi	r19,-1
   43a44:	d8014c15 	stw	zero,1328(sp)
   43a48:	d8014a15 	stw	zero,1320(sp)
   43a4c:	d8c14d15 	stw	r3,1332(sp)
   43a50:	bdc00044 	addi	r23,r23,1
   43a54:	d9414d17 	ldw	r5,1332(sp)
   43a58:	00801604 	movi	r2,88
   43a5c:	28fff804 	addi	r3,r5,-32
   43a60:	10c06036 	bltu	r2,r3,43be4 <___vfprintf_internal_r+0x394>
   43a64:	18c5883a 	add	r2,r3,r3
   43a68:	1085883a 	add	r2,r2,r2
   43a6c:	00c00134 	movhi	r3,4
   43a70:	18cea004 	addi	r3,r3,14976
   43a74:	10c5883a 	add	r2,r2,r3
   43a78:	11000017 	ldw	r4,0(r2)
   43a7c:	2000683a 	jmp	r4
   43a80:	000449f4 	movhi	zero,4391
   43a84:	00043be4 	muli	zero,zero,4335
   43a88:	00043be4 	muli	zero,zero,4335
   43a8c:	000449e0 	cmpeqi	zero,zero,4391
   43a90:	00043be4 	muli	zero,zero,4335
   43a94:	00043be4 	muli	zero,zero,4335
   43a98:	00043be4 	muli	zero,zero,4335
   43a9c:	00043be4 	muli	zero,zero,4335
   43aa0:	00043be4 	muli	zero,zero,4335
   43aa4:	00043be4 	muli	zero,zero,4335
   43aa8:	000447c0 	call	447c <__reset-0x3bb84>
   43aac:	000449d0 	cmplti	zero,zero,4391
   43ab0:	00043be4 	muli	zero,zero,4335
   43ab4:	000447d8 	cmpnei	zero,zero,4383
   43ab8:	00044a6c 	andhi	zero,zero,4393
   43abc:	00043be4 	muli	zero,zero,4335
   43ac0:	00044a58 	cmpnei	zero,zero,4393
   43ac4:	00044a20 	cmpeqi	zero,zero,4392
   43ac8:	00044a20 	cmpeqi	zero,zero,4392
   43acc:	00044a20 	cmpeqi	zero,zero,4392
   43ad0:	00044a20 	cmpeqi	zero,zero,4392
   43ad4:	00044a20 	cmpeqi	zero,zero,4392
   43ad8:	00044a20 	cmpeqi	zero,zero,4392
   43adc:	00044a20 	cmpeqi	zero,zero,4392
   43ae0:	00044a20 	cmpeqi	zero,zero,4392
   43ae4:	00044a20 	cmpeqi	zero,zero,4392
   43ae8:	00043be4 	muli	zero,zero,4335
   43aec:	00043be4 	muli	zero,zero,4335
   43af0:	00043be4 	muli	zero,zero,4335
   43af4:	00043be4 	muli	zero,zero,4335
   43af8:	00043be4 	muli	zero,zero,4335
   43afc:	00043be4 	muli	zero,zero,4335
   43b00:	00043be4 	muli	zero,zero,4335
   43b04:	00043be4 	muli	zero,zero,4335
   43b08:	00043be4 	muli	zero,zero,4335
   43b0c:	00043be4 	muli	zero,zero,4335
   43b10:	0004423c 	xorhi	zero,zero,4360
   43b14:	000448a8 	cmpgeui	zero,zero,4386
   43b18:	00043be4 	muli	zero,zero,4335
   43b1c:	000448a8 	cmpgeui	zero,zero,4386
   43b20:	00043be4 	muli	zero,zero,4335
   43b24:	00043be4 	muli	zero,zero,4335
   43b28:	00043be4 	muli	zero,zero,4335
   43b2c:	00043be4 	muli	zero,zero,4335
   43b30:	00044a0c 	andi	zero,zero,4392
   43b34:	00043be4 	muli	zero,zero,4335
   43b38:	00043be4 	muli	zero,zero,4335
   43b3c:	000442f0 	cmpltui	zero,zero,4363
   43b40:	00043be4 	muli	zero,zero,4335
   43b44:	00043be4 	muli	zero,zero,4335
   43b48:	00043be4 	muli	zero,zero,4335
   43b4c:	00043be4 	muli	zero,zero,4335
   43b50:	00043be4 	muli	zero,zero,4335
   43b54:	0004433c 	xorhi	zero,zero,4364
   43b58:	00043be4 	muli	zero,zero,4335
   43b5c:	00043be4 	muli	zero,zero,4335
   43b60:	0004495c 	xori	zero,zero,4389
   43b64:	00043be4 	muli	zero,zero,4335
   43b68:	00043be4 	muli	zero,zero,4335
   43b6c:	00043be4 	muli	zero,zero,4335
   43b70:	00043be4 	muli	zero,zero,4335
   43b74:	00043be4 	muli	zero,zero,4335
   43b78:	00043be4 	muli	zero,zero,4335
   43b7c:	00043be4 	muli	zero,zero,4335
   43b80:	00043be4 	muli	zero,zero,4335
   43b84:	00043be4 	muli	zero,zero,4335
   43b88:	00043be4 	muli	zero,zero,4335
   43b8c:	00044930 	cmpltui	zero,zero,4388
   43b90:	00044248 	cmpgei	zero,zero,4361
   43b94:	000448a8 	cmpgeui	zero,zero,4386
   43b98:	000448a8 	cmpgeui	zero,zero,4386
   43b9c:	000448a8 	cmpgeui	zero,zero,4386
   43ba0:	00044894 	movui	zero,4386
   43ba4:	00044248 	cmpgei	zero,zero,4361
   43ba8:	00043be4 	muli	zero,zero,4335
   43bac:	00043be4 	muli	zero,zero,4335
   43bb0:	0004481c 	xori	zero,zero,4384
   43bb4:	00043be4 	muli	zero,zero,4335
   43bb8:	000447ec 	andhi	zero,zero,4383
   43bbc:	000442fc 	xorhi	zero,zero,4363
   43bc0:	0004484c 	andi	zero,zero,4385
   43bc4:	00044838 	rdprs	zero,zero,4384
   43bc8:	00043be4 	muli	zero,zero,4335
   43bcc:	00044ac8 	cmpgei	zero,zero,4395
   43bd0:	00043be4 	muli	zero,zero,4335
   43bd4:	00044348 	cmpgei	zero,zero,4365
   43bd8:	00043be4 	muli	zero,zero,4335
   43bdc:	00043be4 	muli	zero,zero,4335
   43be0:	000449c0 	call	449c <__reset-0x3bb64>
   43be4:	d9014d17 	ldw	r4,1332(sp)
   43be8:	2000ce26 	beq	r4,zero,43f24 <___vfprintf_internal_r+0x6d4>
   43bec:	01400044 	movi	r5,1
   43bf0:	d9800f04 	addi	r6,sp,60
   43bf4:	d9c14015 	stw	r7,1280(sp)
   43bf8:	d9414515 	stw	r5,1300(sp)
   43bfc:	d9814115 	stw	r6,1284(sp)
   43c00:	280f883a 	mov	r7,r5
   43c04:	d9000f05 	stb	r4,60(sp)
   43c08:	d8000405 	stb	zero,16(sp)
   43c0c:	d8014615 	stw	zero,1304(sp)
   43c10:	d8c14c17 	ldw	r3,1328(sp)
   43c14:	1880008c 	andi	r2,r3,2
   43c18:	1005003a 	cmpeq	r2,r2,zero
   43c1c:	d8815015 	stw	r2,1344(sp)
   43c20:	1000031e 	bne	r2,zero,43c30 <___vfprintf_internal_r+0x3e0>
   43c24:	d9014517 	ldw	r4,1300(sp)
   43c28:	21000084 	addi	r4,r4,2
   43c2c:	d9014515 	stw	r4,1300(sp)
   43c30:	d9414c17 	ldw	r5,1328(sp)
   43c34:	2940210c 	andi	r5,r5,132
   43c38:	d9414e15 	stw	r5,1336(sp)
   43c3c:	28002d1e 	bne	r5,zero,43cf4 <___vfprintf_internal_r+0x4a4>
   43c40:	d9814a17 	ldw	r6,1320(sp)
   43c44:	d8814517 	ldw	r2,1300(sp)
   43c48:	30a1c83a 	sub	r16,r6,r2
   43c4c:	0400290e 	bge	zero,r16,43cf4 <___vfprintf_internal_r+0x4a4>
   43c50:	00800404 	movi	r2,16
   43c54:	1404580e 	bge	r2,r16,44db8 <___vfprintf_internal_r+0x1568>
   43c58:	dc800e17 	ldw	r18,56(sp)
   43c5c:	dc400d17 	ldw	r17,52(sp)
   43c60:	1027883a 	mov	r19,r2
   43c64:	07000174 	movhi	fp,5
   43c68:	e73f9d84 	addi	fp,fp,-394
   43c6c:	050001c4 	movi	r20,7
   43c70:	00000306 	br	43c80 <___vfprintf_internal_r+0x430>
   43c74:	843ffc04 	addi	r16,r16,-16
   43c78:	ad400204 	addi	r21,r21,8
   43c7c:	9c00130e 	bge	r19,r16,43ccc <___vfprintf_internal_r+0x47c>
   43c80:	94800404 	addi	r18,r18,16
   43c84:	8c400044 	addi	r17,r17,1
   43c88:	af000015 	stw	fp,0(r21)
   43c8c:	acc00115 	stw	r19,4(r21)
   43c90:	dc800e15 	stw	r18,56(sp)
   43c94:	dc400d15 	stw	r17,52(sp)
   43c98:	a47ff60e 	bge	r20,r17,43c74 <___vfprintf_internal_r+0x424>
   43c9c:	d9014f17 	ldw	r4,1340(sp)
   43ca0:	b00b883a 	mov	r5,r22
   43ca4:	d9800c04 	addi	r6,sp,48
   43ca8:	d9c15115 	stw	r7,1348(sp)
   43cac:	00437f80 	call	437f8 <__sprint_r>
   43cb0:	d9c15117 	ldw	r7,1348(sp)
   43cb4:	10009e1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   43cb8:	843ffc04 	addi	r16,r16,-16
   43cbc:	dc800e17 	ldw	r18,56(sp)
   43cc0:	dc400d17 	ldw	r17,52(sp)
   43cc4:	dd401904 	addi	r21,sp,100
   43cc8:	9c3fed16 	blt	r19,r16,43c80 <___vfprintf_internal_r+0x430>
   43ccc:	9425883a 	add	r18,r18,r16
   43cd0:	8c400044 	addi	r17,r17,1
   43cd4:	008001c4 	movi	r2,7
   43cd8:	af000015 	stw	fp,0(r21)
   43cdc:	ac000115 	stw	r16,4(r21)
   43ce0:	dc800e15 	stw	r18,56(sp)
   43ce4:	dc400d15 	stw	r17,52(sp)
   43ce8:	1441f516 	blt	r2,r17,444c0 <___vfprintf_internal_r+0xc70>
   43cec:	ad400204 	addi	r21,r21,8
   43cf0:	00000206 	br	43cfc <___vfprintf_internal_r+0x4ac>
   43cf4:	dc800e17 	ldw	r18,56(sp)
   43cf8:	dc400d17 	ldw	r17,52(sp)
   43cfc:	d8800407 	ldb	r2,16(sp)
   43d00:	10000b26 	beq	r2,zero,43d30 <___vfprintf_internal_r+0x4e0>
   43d04:	00800044 	movi	r2,1
   43d08:	94800044 	addi	r18,r18,1
   43d0c:	8c400044 	addi	r17,r17,1
   43d10:	a8800115 	stw	r2,4(r21)
   43d14:	d8c00404 	addi	r3,sp,16
   43d18:	008001c4 	movi	r2,7
   43d1c:	a8c00015 	stw	r3,0(r21)
   43d20:	dc800e15 	stw	r18,56(sp)
   43d24:	dc400d15 	stw	r17,52(sp)
   43d28:	1441da16 	blt	r2,r17,44494 <___vfprintf_internal_r+0xc44>
   43d2c:	ad400204 	addi	r21,r21,8
   43d30:	d9015017 	ldw	r4,1344(sp)
   43d34:	20000b1e 	bne	r4,zero,43d64 <___vfprintf_internal_r+0x514>
   43d38:	d8800444 	addi	r2,sp,17
   43d3c:	94800084 	addi	r18,r18,2
   43d40:	8c400044 	addi	r17,r17,1
   43d44:	a8800015 	stw	r2,0(r21)
   43d48:	00c00084 	movi	r3,2
   43d4c:	008001c4 	movi	r2,7
   43d50:	a8c00115 	stw	r3,4(r21)
   43d54:	dc800e15 	stw	r18,56(sp)
   43d58:	dc400d15 	stw	r17,52(sp)
   43d5c:	1441c216 	blt	r2,r17,44468 <___vfprintf_internal_r+0xc18>
   43d60:	ad400204 	addi	r21,r21,8
   43d64:	d9414e17 	ldw	r5,1336(sp)
   43d68:	00802004 	movi	r2,128
   43d6c:	2880b126 	beq	r5,r2,44034 <___vfprintf_internal_r+0x7e4>
   43d70:	d8c14617 	ldw	r3,1304(sp)
   43d74:	19e1c83a 	sub	r16,r3,r7
   43d78:	0400260e 	bge	zero,r16,43e14 <___vfprintf_internal_r+0x5c4>
   43d7c:	00800404 	movi	r2,16
   43d80:	1403c90e 	bge	r2,r16,44ca8 <___vfprintf_internal_r+0x1458>
   43d84:	1027883a 	mov	r19,r2
   43d88:	07000174 	movhi	fp,5
   43d8c:	e73f9984 	addi	fp,fp,-410
   43d90:	050001c4 	movi	r20,7
   43d94:	00000306 	br	43da4 <___vfprintf_internal_r+0x554>
   43d98:	843ffc04 	addi	r16,r16,-16
   43d9c:	ad400204 	addi	r21,r21,8
   43da0:	9c00130e 	bge	r19,r16,43df0 <___vfprintf_internal_r+0x5a0>
   43da4:	94800404 	addi	r18,r18,16
   43da8:	8c400044 	addi	r17,r17,1
   43dac:	af000015 	stw	fp,0(r21)
   43db0:	acc00115 	stw	r19,4(r21)
   43db4:	dc800e15 	stw	r18,56(sp)
   43db8:	dc400d15 	stw	r17,52(sp)
   43dbc:	a47ff60e 	bge	r20,r17,43d98 <___vfprintf_internal_r+0x548>
   43dc0:	d9014f17 	ldw	r4,1340(sp)
   43dc4:	b00b883a 	mov	r5,r22
   43dc8:	d9800c04 	addi	r6,sp,48
   43dcc:	d9c15115 	stw	r7,1348(sp)
   43dd0:	00437f80 	call	437f8 <__sprint_r>
   43dd4:	d9c15117 	ldw	r7,1348(sp)
   43dd8:	1000551e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   43ddc:	843ffc04 	addi	r16,r16,-16
   43de0:	dc800e17 	ldw	r18,56(sp)
   43de4:	dc400d17 	ldw	r17,52(sp)
   43de8:	dd401904 	addi	r21,sp,100
   43dec:	9c3fed16 	blt	r19,r16,43da4 <___vfprintf_internal_r+0x554>
   43df0:	9425883a 	add	r18,r18,r16
   43df4:	8c400044 	addi	r17,r17,1
   43df8:	008001c4 	movi	r2,7
   43dfc:	af000015 	stw	fp,0(r21)
   43e00:	ac000115 	stw	r16,4(r21)
   43e04:	dc800e15 	stw	r18,56(sp)
   43e08:	dc400d15 	stw	r17,52(sp)
   43e0c:	14418216 	blt	r2,r17,44418 <___vfprintf_internal_r+0xbc8>
   43e10:	ad400204 	addi	r21,r21,8
   43e14:	d9014c17 	ldw	r4,1328(sp)
   43e18:	2080400c 	andi	r2,r4,256
   43e1c:	10004a1e 	bne	r2,zero,43f48 <___vfprintf_internal_r+0x6f8>
   43e20:	d9414117 	ldw	r5,1284(sp)
   43e24:	91e5883a 	add	r18,r18,r7
   43e28:	8c400044 	addi	r17,r17,1
   43e2c:	008001c4 	movi	r2,7
   43e30:	a9400015 	stw	r5,0(r21)
   43e34:	a9c00115 	stw	r7,4(r21)
   43e38:	dc800e15 	stw	r18,56(sp)
   43e3c:	dc400d15 	stw	r17,52(sp)
   43e40:	14416716 	blt	r2,r17,443e0 <___vfprintf_internal_r+0xb90>
   43e44:	a8c00204 	addi	r3,r21,8
   43e48:	d9814c17 	ldw	r6,1328(sp)
   43e4c:	3080010c 	andi	r2,r6,4
   43e50:	10002826 	beq	r2,zero,43ef4 <___vfprintf_internal_r+0x6a4>
   43e54:	d8814a17 	ldw	r2,1320(sp)
   43e58:	d9014517 	ldw	r4,1300(sp)
   43e5c:	1121c83a 	sub	r16,r2,r4
   43e60:	0400240e 	bge	zero,r16,43ef4 <___vfprintf_internal_r+0x6a4>
   43e64:	00800404 	movi	r2,16
   43e68:	14044f0e 	bge	r2,r16,44fa8 <___vfprintf_internal_r+0x1758>
   43e6c:	dc400d17 	ldw	r17,52(sp)
   43e70:	1027883a 	mov	r19,r2
   43e74:	07000174 	movhi	fp,5
   43e78:	e73f9d84 	addi	fp,fp,-394
   43e7c:	050001c4 	movi	r20,7
   43e80:	00000306 	br	43e90 <___vfprintf_internal_r+0x640>
   43e84:	843ffc04 	addi	r16,r16,-16
   43e88:	18c00204 	addi	r3,r3,8
   43e8c:	9c00110e 	bge	r19,r16,43ed4 <___vfprintf_internal_r+0x684>
   43e90:	94800404 	addi	r18,r18,16
   43e94:	8c400044 	addi	r17,r17,1
   43e98:	1f000015 	stw	fp,0(r3)
   43e9c:	1cc00115 	stw	r19,4(r3)
   43ea0:	dc800e15 	stw	r18,56(sp)
   43ea4:	dc400d15 	stw	r17,52(sp)
   43ea8:	a47ff60e 	bge	r20,r17,43e84 <___vfprintf_internal_r+0x634>
   43eac:	d9014f17 	ldw	r4,1340(sp)
   43eb0:	b00b883a 	mov	r5,r22
   43eb4:	d9800c04 	addi	r6,sp,48
   43eb8:	00437f80 	call	437f8 <__sprint_r>
   43ebc:	10001c1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   43ec0:	843ffc04 	addi	r16,r16,-16
   43ec4:	dc800e17 	ldw	r18,56(sp)
   43ec8:	dc400d17 	ldw	r17,52(sp)
   43ecc:	d8c01904 	addi	r3,sp,100
   43ed0:	9c3fef16 	blt	r19,r16,43e90 <___vfprintf_internal_r+0x640>
   43ed4:	9425883a 	add	r18,r18,r16
   43ed8:	8c400044 	addi	r17,r17,1
   43edc:	008001c4 	movi	r2,7
   43ee0:	1f000015 	stw	fp,0(r3)
   43ee4:	1c000115 	stw	r16,4(r3)
   43ee8:	dc800e15 	stw	r18,56(sp)
   43eec:	dc400d15 	stw	r17,52(sp)
   43ef0:	1440cb16 	blt	r2,r17,44220 <___vfprintf_internal_r+0x9d0>
   43ef4:	d8814a17 	ldw	r2,1320(sp)
   43ef8:	d9414517 	ldw	r5,1300(sp)
   43efc:	1140010e 	bge	r2,r5,43f04 <___vfprintf_internal_r+0x6b4>
   43f00:	2805883a 	mov	r2,r5
   43f04:	d9814b17 	ldw	r6,1324(sp)
   43f08:	308d883a 	add	r6,r6,r2
   43f0c:	d9814b15 	stw	r6,1324(sp)
   43f10:	90013b1e 	bne	r18,zero,44400 <___vfprintf_internal_r+0xbb0>
   43f14:	d9c14017 	ldw	r7,1280(sp)
   43f18:	dd401904 	addi	r21,sp,100
   43f1c:	d8000d15 	stw	zero,52(sp)
   43f20:	003ea706 	br	439c0 <___vfprintf_internal_r+0x170>
   43f24:	d8800e17 	ldw	r2,56(sp)
   43f28:	10053f1e 	bne	r2,zero,45428 <___vfprintf_internal_r+0x1bd8>
   43f2c:	d8000d15 	stw	zero,52(sp)
   43f30:	b080030b 	ldhu	r2,12(r22)
   43f34:	1080100c 	andi	r2,r2,64
   43f38:	103e8726 	beq	r2,zero,43958 <___vfprintf_internal_r+0x108>
   43f3c:	00bfffc4 	movi	r2,-1
   43f40:	d8814b15 	stw	r2,1324(sp)
   43f44:	003e8406 	br	43958 <___vfprintf_internal_r+0x108>
   43f48:	d9814d17 	ldw	r6,1332(sp)
   43f4c:	00801944 	movi	r2,101
   43f50:	11806e16 	blt	r2,r6,4410c <___vfprintf_internal_r+0x8bc>
   43f54:	d9414717 	ldw	r5,1308(sp)
   43f58:	00c00044 	movi	r3,1
   43f5c:	1943430e 	bge	r3,r5,44c6c <___vfprintf_internal_r+0x141c>
   43f60:	d8814117 	ldw	r2,1284(sp)
   43f64:	94800044 	addi	r18,r18,1
   43f68:	8c400044 	addi	r17,r17,1
   43f6c:	a8800015 	stw	r2,0(r21)
   43f70:	008001c4 	movi	r2,7
   43f74:	a8c00115 	stw	r3,4(r21)
   43f78:	dc800e15 	stw	r18,56(sp)
   43f7c:	dc400d15 	stw	r17,52(sp)
   43f80:	1441ca16 	blt	r2,r17,446ac <___vfprintf_internal_r+0xe5c>
   43f84:	a8c00204 	addi	r3,r21,8
   43f88:	d9014917 	ldw	r4,1316(sp)
   43f8c:	00800044 	movi	r2,1
   43f90:	94800044 	addi	r18,r18,1
   43f94:	8c400044 	addi	r17,r17,1
   43f98:	18800115 	stw	r2,4(r3)
   43f9c:	008001c4 	movi	r2,7
   43fa0:	19000015 	stw	r4,0(r3)
   43fa4:	dc800e15 	stw	r18,56(sp)
   43fa8:	dc400d15 	stw	r17,52(sp)
   43fac:	1441b616 	blt	r2,r17,44688 <___vfprintf_internal_r+0xe38>
   43fb0:	1cc00204 	addi	r19,r3,8
   43fb4:	d9014217 	ldw	r4,1288(sp)
   43fb8:	d9414317 	ldw	r5,1292(sp)
   43fbc:	000d883a 	mov	r6,zero
   43fc0:	000f883a 	mov	r7,zero
   43fc4:	004c0a00 	call	4c0a0 <__nedf2>
   43fc8:	10017426 	beq	r2,zero,4459c <___vfprintf_internal_r+0xd4c>
   43fcc:	d9414717 	ldw	r5,1308(sp)
   43fd0:	d9814117 	ldw	r6,1284(sp)
   43fd4:	8c400044 	addi	r17,r17,1
   43fd8:	2c85883a 	add	r2,r5,r18
   43fdc:	14bfffc4 	addi	r18,r2,-1
   43fe0:	28bfffc4 	addi	r2,r5,-1
   43fe4:	30c00044 	addi	r3,r6,1
   43fe8:	98800115 	stw	r2,4(r19)
   43fec:	008001c4 	movi	r2,7
   43ff0:	98c00015 	stw	r3,0(r19)
   43ff4:	dc800e15 	stw	r18,56(sp)
   43ff8:	dc400d15 	stw	r17,52(sp)
   43ffc:	14418e16 	blt	r2,r17,44638 <___vfprintf_internal_r+0xde8>
   44000:	9cc00204 	addi	r19,r19,8
   44004:	d9414817 	ldw	r5,1312(sp)
   44008:	d8800804 	addi	r2,sp,32
   4400c:	8c400044 	addi	r17,r17,1
   44010:	9165883a 	add	r18,r18,r5
   44014:	98800015 	stw	r2,0(r19)
   44018:	008001c4 	movi	r2,7
   4401c:	99400115 	stw	r5,4(r19)
   44020:	dc800e15 	stw	r18,56(sp)
   44024:	dc400d15 	stw	r17,52(sp)
   44028:	1440ed16 	blt	r2,r17,443e0 <___vfprintf_internal_r+0xb90>
   4402c:	98c00204 	addi	r3,r19,8
   44030:	003f8506 	br	43e48 <___vfprintf_internal_r+0x5f8>
   44034:	d9814a17 	ldw	r6,1320(sp)
   44038:	d8814517 	ldw	r2,1300(sp)
   4403c:	30a1c83a 	sub	r16,r6,r2
   44040:	043f4b0e 	bge	zero,r16,43d70 <___vfprintf_internal_r+0x520>
   44044:	00800404 	movi	r2,16
   44048:	1404340e 	bge	r2,r16,4511c <___vfprintf_internal_r+0x18cc>
   4404c:	1027883a 	mov	r19,r2
   44050:	07000174 	movhi	fp,5
   44054:	e73f9984 	addi	fp,fp,-410
   44058:	050001c4 	movi	r20,7
   4405c:	00000306 	br	4406c <___vfprintf_internal_r+0x81c>
   44060:	843ffc04 	addi	r16,r16,-16
   44064:	ad400204 	addi	r21,r21,8
   44068:	9c00130e 	bge	r19,r16,440b8 <___vfprintf_internal_r+0x868>
   4406c:	94800404 	addi	r18,r18,16
   44070:	8c400044 	addi	r17,r17,1
   44074:	af000015 	stw	fp,0(r21)
   44078:	acc00115 	stw	r19,4(r21)
   4407c:	dc800e15 	stw	r18,56(sp)
   44080:	dc400d15 	stw	r17,52(sp)
   44084:	a47ff60e 	bge	r20,r17,44060 <___vfprintf_internal_r+0x810>
   44088:	d9014f17 	ldw	r4,1340(sp)
   4408c:	b00b883a 	mov	r5,r22
   44090:	d9800c04 	addi	r6,sp,48
   44094:	d9c15115 	stw	r7,1348(sp)
   44098:	00437f80 	call	437f8 <__sprint_r>
   4409c:	d9c15117 	ldw	r7,1348(sp)
   440a0:	103fa31e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   440a4:	843ffc04 	addi	r16,r16,-16
   440a8:	dc800e17 	ldw	r18,56(sp)
   440ac:	dc400d17 	ldw	r17,52(sp)
   440b0:	dd401904 	addi	r21,sp,100
   440b4:	9c3fed16 	blt	r19,r16,4406c <___vfprintf_internal_r+0x81c>
   440b8:	9425883a 	add	r18,r18,r16
   440bc:	8c400044 	addi	r17,r17,1
   440c0:	008001c4 	movi	r2,7
   440c4:	af000015 	stw	fp,0(r21)
   440c8:	ac000115 	stw	r16,4(r21)
   440cc:	dc800e15 	stw	r18,56(sp)
   440d0:	dc400d15 	stw	r17,52(sp)
   440d4:	14416116 	blt	r2,r17,4465c <___vfprintf_internal_r+0xe0c>
   440d8:	ad400204 	addi	r21,r21,8
   440dc:	003f2406 	br	43d70 <___vfprintf_internal_r+0x520>
   440e0:	d9014f17 	ldw	r4,1340(sp)
   440e4:	00472c00 	call	472c0 <__sinit>
   440e8:	d9c15117 	ldw	r7,1348(sp)
   440ec:	003def06 	br	438ac <___vfprintf_internal_r+0x5c>
   440f0:	d9014f17 	ldw	r4,1340(sp)
   440f4:	b00b883a 	mov	r5,r22
   440f8:	d9c15115 	stw	r7,1348(sp)
   440fc:	00457200 	call	45720 <__swsetup_r>
   44100:	d9c15117 	ldw	r7,1348(sp)
   44104:	103dee26 	beq	r2,zero,438c0 <___vfprintf_internal_r+0x70>
   44108:	003f8c06 	br	43f3c <___vfprintf_internal_r+0x6ec>
   4410c:	d9014217 	ldw	r4,1288(sp)
   44110:	d9414317 	ldw	r5,1292(sp)
   44114:	000d883a 	mov	r6,zero
   44118:	000f883a 	mov	r7,zero
   4411c:	004c0180 	call	4c018 <__eqdf2>
   44120:	1000f21e 	bne	r2,zero,444ec <___vfprintf_internal_r+0xc9c>
   44124:	00800174 	movhi	r2,5
   44128:	10bf9904 	addi	r2,r2,-412
   4412c:	94800044 	addi	r18,r18,1
   44130:	8c400044 	addi	r17,r17,1
   44134:	a8800015 	stw	r2,0(r21)
   44138:	00c00044 	movi	r3,1
   4413c:	008001c4 	movi	r2,7
   44140:	a8c00115 	stw	r3,4(r21)
   44144:	dc800e15 	stw	r18,56(sp)
   44148:	dc400d15 	stw	r17,52(sp)
   4414c:	1442fa16 	blt	r2,r17,44d38 <___vfprintf_internal_r+0x14e8>
   44150:	a8c00204 	addi	r3,r21,8
   44154:	d8800517 	ldw	r2,20(sp)
   44158:	d9014717 	ldw	r4,1308(sp)
   4415c:	11015c0e 	bge	r2,r4,446d0 <___vfprintf_internal_r+0xe80>
   44160:	dc400d17 	ldw	r17,52(sp)
   44164:	d9814917 	ldw	r6,1316(sp)
   44168:	00800044 	movi	r2,1
   4416c:	94800044 	addi	r18,r18,1
   44170:	8c400044 	addi	r17,r17,1
   44174:	18800115 	stw	r2,4(r3)
   44178:	008001c4 	movi	r2,7
   4417c:	19800015 	stw	r6,0(r3)
   44180:	dc800e15 	stw	r18,56(sp)
   44184:	dc400d15 	stw	r17,52(sp)
   44188:	14431016 	blt	r2,r17,44dcc <___vfprintf_internal_r+0x157c>
   4418c:	18c00204 	addi	r3,r3,8
   44190:	d8814717 	ldw	r2,1308(sp)
   44194:	143fffc4 	addi	r16,r2,-1
   44198:	043f2b0e 	bge	zero,r16,43e48 <___vfprintf_internal_r+0x5f8>
   4419c:	00800404 	movi	r2,16
   441a0:	1402a20e 	bge	r2,r16,44c2c <___vfprintf_internal_r+0x13dc>
   441a4:	dc400d17 	ldw	r17,52(sp)
   441a8:	1027883a 	mov	r19,r2
   441ac:	07000174 	movhi	fp,5
   441b0:	e73f9984 	addi	fp,fp,-410
   441b4:	050001c4 	movi	r20,7
   441b8:	00000306 	br	441c8 <___vfprintf_internal_r+0x978>
   441bc:	18c00204 	addi	r3,r3,8
   441c0:	843ffc04 	addi	r16,r16,-16
   441c4:	9c029c0e 	bge	r19,r16,44c38 <___vfprintf_internal_r+0x13e8>
   441c8:	94800404 	addi	r18,r18,16
   441cc:	8c400044 	addi	r17,r17,1
   441d0:	1f000015 	stw	fp,0(r3)
   441d4:	1cc00115 	stw	r19,4(r3)
   441d8:	dc800e15 	stw	r18,56(sp)
   441dc:	dc400d15 	stw	r17,52(sp)
   441e0:	a47ff60e 	bge	r20,r17,441bc <___vfprintf_internal_r+0x96c>
   441e4:	d9014f17 	ldw	r4,1340(sp)
   441e8:	b00b883a 	mov	r5,r22
   441ec:	d9800c04 	addi	r6,sp,48
   441f0:	00437f80 	call	437f8 <__sprint_r>
   441f4:	103f4e1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   441f8:	dc800e17 	ldw	r18,56(sp)
   441fc:	dc400d17 	ldw	r17,52(sp)
   44200:	d8c01904 	addi	r3,sp,100
   44204:	003fee06 	br	441c0 <___vfprintf_internal_r+0x970>
   44208:	d8802c0b 	ldhu	r2,176(sp)
   4420c:	00ffffc4 	movi	r3,-1
   44210:	d8c14b15 	stw	r3,1324(sp)
   44214:	1080100c 	andi	r2,r2,64
   44218:	103dcc1e 	bne	r2,zero,4394c <___vfprintf_internal_r+0xfc>
   4421c:	003dce06 	br	43958 <___vfprintf_internal_r+0x108>
   44220:	d9014f17 	ldw	r4,1340(sp)
   44224:	b00b883a 	mov	r5,r22
   44228:	d9800c04 	addi	r6,sp,48
   4422c:	00437f80 	call	437f8 <__sprint_r>
   44230:	103f3f1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44234:	dc800e17 	ldw	r18,56(sp)
   44238:	003f2e06 	br	43ef4 <___vfprintf_internal_r+0x6a4>
   4423c:	d9414c17 	ldw	r5,1328(sp)
   44240:	29400414 	ori	r5,r5,16
   44244:	d9414c15 	stw	r5,1328(sp)
   44248:	d9814c17 	ldw	r6,1328(sp)
   4424c:	3080080c 	andi	r2,r6,32
   44250:	10014f1e 	bne	r2,zero,44790 <___vfprintf_internal_r+0xf40>
   44254:	d8c14c17 	ldw	r3,1328(sp)
   44258:	1880040c 	andi	r2,r3,16
   4425c:	1002ea1e 	bne	r2,zero,44e08 <___vfprintf_internal_r+0x15b8>
   44260:	d9014c17 	ldw	r4,1328(sp)
   44264:	2080100c 	andi	r2,r4,64
   44268:	1002e726 	beq	r2,zero,44e08 <___vfprintf_internal_r+0x15b8>
   4426c:	3880000f 	ldh	r2,0(r7)
   44270:	39c00104 	addi	r7,r7,4
   44274:	d9c14015 	stw	r7,1280(sp)
   44278:	1023d7fa 	srai	r17,r2,31
   4427c:	1021883a 	mov	r16,r2
   44280:	88037216 	blt	r17,zero,4504c <___vfprintf_internal_r+0x17fc>
   44284:	01000044 	movi	r4,1
   44288:	98000416 	blt	r19,zero,4429c <___vfprintf_internal_r+0xa4c>
   4428c:	d8c14c17 	ldw	r3,1328(sp)
   44290:	00bfdfc4 	movi	r2,-129
   44294:	1886703a 	and	r3,r3,r2
   44298:	d8c14c15 	stw	r3,1328(sp)
   4429c:	8444b03a 	or	r2,r16,r17
   442a0:	1002261e 	bne	r2,zero,44b3c <___vfprintf_internal_r+0x12ec>
   442a4:	9802251e 	bne	r19,zero,44b3c <___vfprintf_internal_r+0x12ec>
   442a8:	20803fcc 	andi	r2,r4,255
   442ac:	10029b26 	beq	r2,zero,44d1c <___vfprintf_internal_r+0x14cc>
   442b0:	d8c01904 	addi	r3,sp,100
   442b4:	dd000f04 	addi	r20,sp,60
   442b8:	d8c14115 	stw	r3,1284(sp)
   442bc:	d8c14117 	ldw	r3,1284(sp)
   442c0:	dcc14515 	stw	r19,1300(sp)
   442c4:	a0c5c83a 	sub	r2,r20,r3
   442c8:	11c00a04 	addi	r7,r2,40
   442cc:	99c0010e 	bge	r19,r7,442d4 <___vfprintf_internal_r+0xa84>
   442d0:	d9c14515 	stw	r7,1300(sp)
   442d4:	dcc14615 	stw	r19,1304(sp)
   442d8:	d8800407 	ldb	r2,16(sp)
   442dc:	103e4c26 	beq	r2,zero,43c10 <___vfprintf_internal_r+0x3c0>
   442e0:	d8814517 	ldw	r2,1300(sp)
   442e4:	10800044 	addi	r2,r2,1
   442e8:	d8814515 	stw	r2,1300(sp)
   442ec:	003e4806 	br	43c10 <___vfprintf_internal_r+0x3c0>
   442f0:	d9814c17 	ldw	r6,1328(sp)
   442f4:	31800414 	ori	r6,r6,16
   442f8:	d9814c15 	stw	r6,1328(sp)
   442fc:	d8c14c17 	ldw	r3,1328(sp)
   44300:	1880080c 	andi	r2,r3,32
   44304:	1001271e 	bne	r2,zero,447a4 <___vfprintf_internal_r+0xf54>
   44308:	d9414c17 	ldw	r5,1328(sp)
   4430c:	2880040c 	andi	r2,r5,16
   44310:	1002b61e 	bne	r2,zero,44dec <___vfprintf_internal_r+0x159c>
   44314:	d9814c17 	ldw	r6,1328(sp)
   44318:	3080100c 	andi	r2,r6,64
   4431c:	1002b326 	beq	r2,zero,44dec <___vfprintf_internal_r+0x159c>
   44320:	3c00000b 	ldhu	r16,0(r7)
   44324:	0009883a 	mov	r4,zero
   44328:	39c00104 	addi	r7,r7,4
   4432c:	0023883a 	mov	r17,zero
   44330:	d9c14015 	stw	r7,1280(sp)
   44334:	d8000405 	stb	zero,16(sp)
   44338:	003fd306 	br	44288 <___vfprintf_internal_r+0xa38>
   4433c:	d9014c17 	ldw	r4,1328(sp)
   44340:	21000414 	ori	r4,r4,16
   44344:	d9014c15 	stw	r4,1328(sp)
   44348:	d9414c17 	ldw	r5,1328(sp)
   4434c:	2880080c 	andi	r2,r5,32
   44350:	1001081e 	bne	r2,zero,44774 <___vfprintf_internal_r+0xf24>
   44354:	d8c14c17 	ldw	r3,1328(sp)
   44358:	1880040c 	andi	r2,r3,16
   4435c:	1002b01e 	bne	r2,zero,44e20 <___vfprintf_internal_r+0x15d0>
   44360:	d9014c17 	ldw	r4,1328(sp)
   44364:	2080100c 	andi	r2,r4,64
   44368:	1002ad26 	beq	r2,zero,44e20 <___vfprintf_internal_r+0x15d0>
   4436c:	3c00000b 	ldhu	r16,0(r7)
   44370:	01000044 	movi	r4,1
   44374:	39c00104 	addi	r7,r7,4
   44378:	0023883a 	mov	r17,zero
   4437c:	d9c14015 	stw	r7,1280(sp)
   44380:	d8000405 	stb	zero,16(sp)
   44384:	003fc006 	br	44288 <___vfprintf_internal_r+0xa38>
   44388:	d9014f17 	ldw	r4,1340(sp)
   4438c:	b00b883a 	mov	r5,r22
   44390:	d9800c04 	addi	r6,sp,48
   44394:	00437f80 	call	437f8 <__sprint_r>
   44398:	103ee51e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   4439c:	dc800e17 	ldw	r18,56(sp)
   443a0:	d8c01904 	addi	r3,sp,100
   443a4:	d9814c17 	ldw	r6,1328(sp)
   443a8:	3080004c 	andi	r2,r6,1
   443ac:	1005003a 	cmpeq	r2,r2,zero
   443b0:	103ea51e 	bne	r2,zero,43e48 <___vfprintf_internal_r+0x5f8>
   443b4:	00800044 	movi	r2,1
   443b8:	dc400d17 	ldw	r17,52(sp)
   443bc:	18800115 	stw	r2,4(r3)
   443c0:	d8814917 	ldw	r2,1316(sp)
   443c4:	94800044 	addi	r18,r18,1
   443c8:	8c400044 	addi	r17,r17,1
   443cc:	18800015 	stw	r2,0(r3)
   443d0:	008001c4 	movi	r2,7
   443d4:	dc800e15 	stw	r18,56(sp)
   443d8:	dc400d15 	stw	r17,52(sp)
   443dc:	14421e0e 	bge	r2,r17,44c58 <___vfprintf_internal_r+0x1408>
   443e0:	d9014f17 	ldw	r4,1340(sp)
   443e4:	b00b883a 	mov	r5,r22
   443e8:	d9800c04 	addi	r6,sp,48
   443ec:	00437f80 	call	437f8 <__sprint_r>
   443f0:	103ecf1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   443f4:	dc800e17 	ldw	r18,56(sp)
   443f8:	d8c01904 	addi	r3,sp,100
   443fc:	003e9206 	br	43e48 <___vfprintf_internal_r+0x5f8>
   44400:	d9014f17 	ldw	r4,1340(sp)
   44404:	b00b883a 	mov	r5,r22
   44408:	d9800c04 	addi	r6,sp,48
   4440c:	00437f80 	call	437f8 <__sprint_r>
   44410:	103ec026 	beq	r2,zero,43f14 <___vfprintf_internal_r+0x6c4>
   44414:	003ec606 	br	43f30 <___vfprintf_internal_r+0x6e0>
   44418:	d9014f17 	ldw	r4,1340(sp)
   4441c:	b00b883a 	mov	r5,r22
   44420:	d9800c04 	addi	r6,sp,48
   44424:	d9c15115 	stw	r7,1348(sp)
   44428:	00437f80 	call	437f8 <__sprint_r>
   4442c:	d9c15117 	ldw	r7,1348(sp)
   44430:	103ebf1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44434:	dc800e17 	ldw	r18,56(sp)
   44438:	dc400d17 	ldw	r17,52(sp)
   4443c:	dd401904 	addi	r21,sp,100
   44440:	003e7406 	br	43e14 <___vfprintf_internal_r+0x5c4>
   44444:	d9014f17 	ldw	r4,1340(sp)
   44448:	b00b883a 	mov	r5,r22
   4444c:	d9800c04 	addi	r6,sp,48
   44450:	d9c15115 	stw	r7,1348(sp)
   44454:	00437f80 	call	437f8 <__sprint_r>
   44458:	d9c15117 	ldw	r7,1348(sp)
   4445c:	103eb41e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44460:	dd401904 	addi	r21,sp,100
   44464:	003d6d06 	br	43a1c <___vfprintf_internal_r+0x1cc>
   44468:	d9014f17 	ldw	r4,1340(sp)
   4446c:	b00b883a 	mov	r5,r22
   44470:	d9800c04 	addi	r6,sp,48
   44474:	d9c15115 	stw	r7,1348(sp)
   44478:	00437f80 	call	437f8 <__sprint_r>
   4447c:	d9c15117 	ldw	r7,1348(sp)
   44480:	103eab1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44484:	dc800e17 	ldw	r18,56(sp)
   44488:	dc400d17 	ldw	r17,52(sp)
   4448c:	dd401904 	addi	r21,sp,100
   44490:	003e3406 	br	43d64 <___vfprintf_internal_r+0x514>
   44494:	d9014f17 	ldw	r4,1340(sp)
   44498:	b00b883a 	mov	r5,r22
   4449c:	d9800c04 	addi	r6,sp,48
   444a0:	d9c15115 	stw	r7,1348(sp)
   444a4:	00437f80 	call	437f8 <__sprint_r>
   444a8:	d9c15117 	ldw	r7,1348(sp)
   444ac:	103ea01e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   444b0:	dc800e17 	ldw	r18,56(sp)
   444b4:	dc400d17 	ldw	r17,52(sp)
   444b8:	dd401904 	addi	r21,sp,100
   444bc:	003e1c06 	br	43d30 <___vfprintf_internal_r+0x4e0>
   444c0:	d9014f17 	ldw	r4,1340(sp)
   444c4:	b00b883a 	mov	r5,r22
   444c8:	d9800c04 	addi	r6,sp,48
   444cc:	d9c15115 	stw	r7,1348(sp)
   444d0:	00437f80 	call	437f8 <__sprint_r>
   444d4:	d9c15117 	ldw	r7,1348(sp)
   444d8:	103e951e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   444dc:	dc800e17 	ldw	r18,56(sp)
   444e0:	dc400d17 	ldw	r17,52(sp)
   444e4:	dd401904 	addi	r21,sp,100
   444e8:	003e0406 	br	43cfc <___vfprintf_internal_r+0x4ac>
   444ec:	d9000517 	ldw	r4,20(sp)
   444f0:	0102520e 	bge	zero,r4,44e3c <___vfprintf_internal_r+0x15ec>
   444f4:	d9814717 	ldw	r6,1308(sp)
   444f8:	21807a16 	blt	r4,r6,446e4 <___vfprintf_internal_r+0xe94>
   444fc:	d8814117 	ldw	r2,1284(sp)
   44500:	91a5883a 	add	r18,r18,r6
   44504:	8c400044 	addi	r17,r17,1
   44508:	a8800015 	stw	r2,0(r21)
   4450c:	008001c4 	movi	r2,7
   44510:	a9800115 	stw	r6,4(r21)
   44514:	dc800e15 	stw	r18,56(sp)
   44518:	dc400d15 	stw	r17,52(sp)
   4451c:	1442f616 	blt	r2,r17,450f8 <___vfprintf_internal_r+0x18a8>
   44520:	a8c00204 	addi	r3,r21,8
   44524:	d9414717 	ldw	r5,1308(sp)
   44528:	2161c83a 	sub	r16,r4,r5
   4452c:	043f9d0e 	bge	zero,r16,443a4 <___vfprintf_internal_r+0xb54>
   44530:	00800404 	movi	r2,16
   44534:	1402130e 	bge	r2,r16,44d84 <___vfprintf_internal_r+0x1534>
   44538:	dc400d17 	ldw	r17,52(sp)
   4453c:	1027883a 	mov	r19,r2
   44540:	07000174 	movhi	fp,5
   44544:	e73f9984 	addi	fp,fp,-410
   44548:	050001c4 	movi	r20,7
   4454c:	00000306 	br	4455c <___vfprintf_internal_r+0xd0c>
   44550:	18c00204 	addi	r3,r3,8
   44554:	843ffc04 	addi	r16,r16,-16
   44558:	9c020d0e 	bge	r19,r16,44d90 <___vfprintf_internal_r+0x1540>
   4455c:	94800404 	addi	r18,r18,16
   44560:	8c400044 	addi	r17,r17,1
   44564:	1f000015 	stw	fp,0(r3)
   44568:	1cc00115 	stw	r19,4(r3)
   4456c:	dc800e15 	stw	r18,56(sp)
   44570:	dc400d15 	stw	r17,52(sp)
   44574:	a47ff60e 	bge	r20,r17,44550 <___vfprintf_internal_r+0xd00>
   44578:	d9014f17 	ldw	r4,1340(sp)
   4457c:	b00b883a 	mov	r5,r22
   44580:	d9800c04 	addi	r6,sp,48
   44584:	00437f80 	call	437f8 <__sprint_r>
   44588:	103e691e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   4458c:	dc800e17 	ldw	r18,56(sp)
   44590:	dc400d17 	ldw	r17,52(sp)
   44594:	d8c01904 	addi	r3,sp,100
   44598:	003fee06 	br	44554 <___vfprintf_internal_r+0xd04>
   4459c:	d8814717 	ldw	r2,1308(sp)
   445a0:	143fffc4 	addi	r16,r2,-1
   445a4:	043e970e 	bge	zero,r16,44004 <___vfprintf_internal_r+0x7b4>
   445a8:	00800404 	movi	r2,16
   445ac:	1400180e 	bge	r2,r16,44610 <___vfprintf_internal_r+0xdc0>
   445b0:	1029883a 	mov	r20,r2
   445b4:	07000174 	movhi	fp,5
   445b8:	e73f9984 	addi	fp,fp,-410
   445bc:	054001c4 	movi	r21,7
   445c0:	00000306 	br	445d0 <___vfprintf_internal_r+0xd80>
   445c4:	9cc00204 	addi	r19,r19,8
   445c8:	843ffc04 	addi	r16,r16,-16
   445cc:	a400120e 	bge	r20,r16,44618 <___vfprintf_internal_r+0xdc8>
   445d0:	94800404 	addi	r18,r18,16
   445d4:	8c400044 	addi	r17,r17,1
   445d8:	9f000015 	stw	fp,0(r19)
   445dc:	9d000115 	stw	r20,4(r19)
   445e0:	dc800e15 	stw	r18,56(sp)
   445e4:	dc400d15 	stw	r17,52(sp)
   445e8:	ac7ff60e 	bge	r21,r17,445c4 <___vfprintf_internal_r+0xd74>
   445ec:	d9014f17 	ldw	r4,1340(sp)
   445f0:	b00b883a 	mov	r5,r22
   445f4:	d9800c04 	addi	r6,sp,48
   445f8:	00437f80 	call	437f8 <__sprint_r>
   445fc:	103e4c1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44600:	dc800e17 	ldw	r18,56(sp)
   44604:	dc400d17 	ldw	r17,52(sp)
   44608:	dcc01904 	addi	r19,sp,100
   4460c:	003fee06 	br	445c8 <___vfprintf_internal_r+0xd78>
   44610:	07000174 	movhi	fp,5
   44614:	e73f9984 	addi	fp,fp,-410
   44618:	9425883a 	add	r18,r18,r16
   4461c:	8c400044 	addi	r17,r17,1
   44620:	008001c4 	movi	r2,7
   44624:	9f000015 	stw	fp,0(r19)
   44628:	9c000115 	stw	r16,4(r19)
   4462c:	dc800e15 	stw	r18,56(sp)
   44630:	dc400d15 	stw	r17,52(sp)
   44634:	147e720e 	bge	r2,r17,44000 <___vfprintf_internal_r+0x7b0>
   44638:	d9014f17 	ldw	r4,1340(sp)
   4463c:	b00b883a 	mov	r5,r22
   44640:	d9800c04 	addi	r6,sp,48
   44644:	00437f80 	call	437f8 <__sprint_r>
   44648:	103e391e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   4464c:	dc800e17 	ldw	r18,56(sp)
   44650:	dc400d17 	ldw	r17,52(sp)
   44654:	dcc01904 	addi	r19,sp,100
   44658:	003e6a06 	br	44004 <___vfprintf_internal_r+0x7b4>
   4465c:	d9014f17 	ldw	r4,1340(sp)
   44660:	b00b883a 	mov	r5,r22
   44664:	d9800c04 	addi	r6,sp,48
   44668:	d9c15115 	stw	r7,1348(sp)
   4466c:	00437f80 	call	437f8 <__sprint_r>
   44670:	d9c15117 	ldw	r7,1348(sp)
   44674:	103e2e1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44678:	dc800e17 	ldw	r18,56(sp)
   4467c:	dc400d17 	ldw	r17,52(sp)
   44680:	dd401904 	addi	r21,sp,100
   44684:	003dba06 	br	43d70 <___vfprintf_internal_r+0x520>
   44688:	d9014f17 	ldw	r4,1340(sp)
   4468c:	b00b883a 	mov	r5,r22
   44690:	d9800c04 	addi	r6,sp,48
   44694:	00437f80 	call	437f8 <__sprint_r>
   44698:	103e251e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   4469c:	dc800e17 	ldw	r18,56(sp)
   446a0:	dc400d17 	ldw	r17,52(sp)
   446a4:	dcc01904 	addi	r19,sp,100
   446a8:	003e4206 	br	43fb4 <___vfprintf_internal_r+0x764>
   446ac:	d9014f17 	ldw	r4,1340(sp)
   446b0:	b00b883a 	mov	r5,r22
   446b4:	d9800c04 	addi	r6,sp,48
   446b8:	00437f80 	call	437f8 <__sprint_r>
   446bc:	103e1c1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   446c0:	dc800e17 	ldw	r18,56(sp)
   446c4:	dc400d17 	ldw	r17,52(sp)
   446c8:	d8c01904 	addi	r3,sp,100
   446cc:	003e2e06 	br	43f88 <___vfprintf_internal_r+0x738>
   446d0:	d9414c17 	ldw	r5,1328(sp)
   446d4:	2880004c 	andi	r2,r5,1
   446d8:	1005003a 	cmpeq	r2,r2,zero
   446dc:	103dda1e 	bne	r2,zero,43e48 <___vfprintf_internal_r+0x5f8>
   446e0:	003e9f06 	br	44160 <___vfprintf_internal_r+0x910>
   446e4:	d8c14117 	ldw	r3,1284(sp)
   446e8:	9125883a 	add	r18,r18,r4
   446ec:	8c400044 	addi	r17,r17,1
   446f0:	008001c4 	movi	r2,7
   446f4:	a8c00015 	stw	r3,0(r21)
   446f8:	a9000115 	stw	r4,4(r21)
   446fc:	dc800e15 	stw	r18,56(sp)
   44700:	dc400d15 	stw	r17,52(sp)
   44704:	14426616 	blt	r2,r17,450a0 <___vfprintf_internal_r+0x1850>
   44708:	a8c00204 	addi	r3,r21,8
   4470c:	d9414917 	ldw	r5,1316(sp)
   44710:	00800044 	movi	r2,1
   44714:	94800044 	addi	r18,r18,1
   44718:	8c400044 	addi	r17,r17,1
   4471c:	18800115 	stw	r2,4(r3)
   44720:	008001c4 	movi	r2,7
   44724:	19400015 	stw	r5,0(r3)
   44728:	dc800e15 	stw	r18,56(sp)
   4472c:	dc400d15 	stw	r17,52(sp)
   44730:	2021883a 	mov	r16,r4
   44734:	14425016 	blt	r2,r17,45078 <___vfprintf_internal_r+0x1828>
   44738:	19400204 	addi	r5,r3,8
   4473c:	d9814717 	ldw	r6,1308(sp)
   44740:	8c400044 	addi	r17,r17,1
   44744:	dc400d15 	stw	r17,52(sp)
   44748:	3107c83a 	sub	r3,r6,r4
   4474c:	d9014117 	ldw	r4,1284(sp)
   44750:	90e5883a 	add	r18,r18,r3
   44754:	28c00115 	stw	r3,4(r5)
   44758:	8105883a 	add	r2,r16,r4
   4475c:	28800015 	stw	r2,0(r5)
   44760:	008001c4 	movi	r2,7
   44764:	dc800e15 	stw	r18,56(sp)
   44768:	147f1d16 	blt	r2,r17,443e0 <___vfprintf_internal_r+0xb90>
   4476c:	28c00204 	addi	r3,r5,8
   44770:	003db506 	br	43e48 <___vfprintf_internal_r+0x5f8>
   44774:	3c000017 	ldw	r16,0(r7)
   44778:	3c400117 	ldw	r17,4(r7)
   4477c:	39800204 	addi	r6,r7,8
   44780:	01000044 	movi	r4,1
   44784:	d9814015 	stw	r6,1280(sp)
   44788:	d8000405 	stb	zero,16(sp)
   4478c:	003ebe06 	br	44288 <___vfprintf_internal_r+0xa38>
   44790:	3c000017 	ldw	r16,0(r7)
   44794:	3c400117 	ldw	r17,4(r7)
   44798:	38800204 	addi	r2,r7,8
   4479c:	d8814015 	stw	r2,1280(sp)
   447a0:	003eb706 	br	44280 <___vfprintf_internal_r+0xa30>
   447a4:	3c000017 	ldw	r16,0(r7)
   447a8:	3c400117 	ldw	r17,4(r7)
   447ac:	39000204 	addi	r4,r7,8
   447b0:	d9014015 	stw	r4,1280(sp)
   447b4:	0009883a 	mov	r4,zero
   447b8:	d8000405 	stb	zero,16(sp)
   447bc:	003eb206 	br	44288 <___vfprintf_internal_r+0xa38>
   447c0:	38c00017 	ldw	r3,0(r7)
   447c4:	39c00104 	addi	r7,r7,4
   447c8:	d8c14a15 	stw	r3,1320(sp)
   447cc:	1800d10e 	bge	r3,zero,44b14 <___vfprintf_internal_r+0x12c4>
   447d0:	00c7c83a 	sub	r3,zero,r3
   447d4:	d8c14a15 	stw	r3,1320(sp)
   447d8:	d9014c17 	ldw	r4,1328(sp)
   447dc:	b8c00007 	ldb	r3,0(r23)
   447e0:	21000114 	ori	r4,r4,4
   447e4:	d9014c15 	stw	r4,1328(sp)
   447e8:	003c9806 	br	43a4c <___vfprintf_internal_r+0x1fc>
   447ec:	d9814c17 	ldw	r6,1328(sp)
   447f0:	3080080c 	andi	r2,r6,32
   447f4:	1001f026 	beq	r2,zero,44fb8 <___vfprintf_internal_r+0x1768>
   447f8:	d9014b17 	ldw	r4,1324(sp)
   447fc:	38800017 	ldw	r2,0(r7)
   44800:	39c00104 	addi	r7,r7,4
   44804:	d9c14015 	stw	r7,1280(sp)
   44808:	2007d7fa 	srai	r3,r4,31
   4480c:	d9c14017 	ldw	r7,1280(sp)
   44810:	11000015 	stw	r4,0(r2)
   44814:	10c00115 	stw	r3,4(r2)
   44818:	003c6906 	br	439c0 <___vfprintf_internal_r+0x170>
   4481c:	b8c00007 	ldb	r3,0(r23)
   44820:	00801b04 	movi	r2,108
   44824:	18824f26 	beq	r3,r2,45164 <___vfprintf_internal_r+0x1914>
   44828:	d9414c17 	ldw	r5,1328(sp)
   4482c:	29400414 	ori	r5,r5,16
   44830:	d9414c15 	stw	r5,1328(sp)
   44834:	003c8506 	br	43a4c <___vfprintf_internal_r+0x1fc>
   44838:	d9814c17 	ldw	r6,1328(sp)
   4483c:	b8c00007 	ldb	r3,0(r23)
   44840:	31800814 	ori	r6,r6,32
   44844:	d9814c15 	stw	r6,1328(sp)
   44848:	003c8006 	br	43a4c <___vfprintf_internal_r+0x1fc>
   4484c:	d8814c17 	ldw	r2,1328(sp)
   44850:	3c000017 	ldw	r16,0(r7)
   44854:	00c01e04 	movi	r3,120
   44858:	10800094 	ori	r2,r2,2
   4485c:	d8814c15 	stw	r2,1328(sp)
   44860:	39c00104 	addi	r7,r7,4
   44864:	01400174 	movhi	r5,5
   44868:	297f8204 	addi	r5,r5,-504
   4486c:	00800c04 	movi	r2,48
   44870:	0023883a 	mov	r17,zero
   44874:	01000084 	movi	r4,2
   44878:	d9c14015 	stw	r7,1280(sp)
   4487c:	d8c14d15 	stw	r3,1332(sp)
   44880:	d9414415 	stw	r5,1296(sp)
   44884:	d8800445 	stb	r2,17(sp)
   44888:	d8c00485 	stb	r3,18(sp)
   4488c:	d8000405 	stb	zero,16(sp)
   44890:	003e7d06 	br	44288 <___vfprintf_internal_r+0xa38>
   44894:	d8814c17 	ldw	r2,1328(sp)
   44898:	b8c00007 	ldb	r3,0(r23)
   4489c:	10801014 	ori	r2,r2,64
   448a0:	d8814c15 	stw	r2,1328(sp)
   448a4:	003c6906 	br	43a4c <___vfprintf_internal_r+0x1fc>
   448a8:	d9414c17 	ldw	r5,1328(sp)
   448ac:	2880020c 	andi	r2,r5,8
   448b0:	1001df26 	beq	r2,zero,45030 <___vfprintf_internal_r+0x17e0>
   448b4:	39800017 	ldw	r6,0(r7)
   448b8:	38800204 	addi	r2,r7,8
   448bc:	d8814015 	stw	r2,1280(sp)
   448c0:	d9814215 	stw	r6,1288(sp)
   448c4:	39c00117 	ldw	r7,4(r7)
   448c8:	d9c14315 	stw	r7,1292(sp)
   448cc:	d9014217 	ldw	r4,1288(sp)
   448d0:	d9414317 	ldw	r5,1292(sp)
   448d4:	004a1f00 	call	4a1f0 <__isinfd>
   448d8:	10021726 	beq	r2,zero,45138 <___vfprintf_internal_r+0x18e8>
   448dc:	d9014217 	ldw	r4,1288(sp)
   448e0:	d9414317 	ldw	r5,1292(sp)
   448e4:	000d883a 	mov	r6,zero
   448e8:	000f883a 	mov	r7,zero
   448ec:	004c2380 	call	4c238 <__ltdf2>
   448f0:	1002ca16 	blt	r2,zero,4541c <___vfprintf_internal_r+0x1bcc>
   448f4:	d9414d17 	ldw	r5,1332(sp)
   448f8:	008011c4 	movi	r2,71
   448fc:	11420a16 	blt	r2,r5,45128 <___vfprintf_internal_r+0x18d8>
   44900:	01800174 	movhi	r6,5
   44904:	31bf8704 	addi	r6,r6,-484
   44908:	d9814115 	stw	r6,1284(sp)
   4490c:	d9014c17 	ldw	r4,1328(sp)
   44910:	00c000c4 	movi	r3,3
   44914:	00bfdfc4 	movi	r2,-129
   44918:	2088703a 	and	r4,r4,r2
   4491c:	180f883a 	mov	r7,r3
   44920:	d8c14515 	stw	r3,1300(sp)
   44924:	d9014c15 	stw	r4,1328(sp)
   44928:	d8014615 	stw	zero,1304(sp)
   4492c:	003e6a06 	br	442d8 <___vfprintf_internal_r+0xa88>
   44930:	38800017 	ldw	r2,0(r7)
   44934:	00c00044 	movi	r3,1
   44938:	39c00104 	addi	r7,r7,4
   4493c:	d9c14015 	stw	r7,1280(sp)
   44940:	d9000f04 	addi	r4,sp,60
   44944:	180f883a 	mov	r7,r3
   44948:	d8c14515 	stw	r3,1300(sp)
   4494c:	d9014115 	stw	r4,1284(sp)
   44950:	d8800f05 	stb	r2,60(sp)
   44954:	d8000405 	stb	zero,16(sp)
   44958:	003cac06 	br	43c0c <___vfprintf_internal_r+0x3bc>
   4495c:	01400174 	movhi	r5,5
   44960:	297f8d04 	addi	r5,r5,-460
   44964:	d9414415 	stw	r5,1296(sp)
   44968:	d9814c17 	ldw	r6,1328(sp)
   4496c:	3080080c 	andi	r2,r6,32
   44970:	1000f926 	beq	r2,zero,44d58 <___vfprintf_internal_r+0x1508>
   44974:	3c000017 	ldw	r16,0(r7)
   44978:	3c400117 	ldw	r17,4(r7)
   4497c:	38800204 	addi	r2,r7,8
   44980:	d8814015 	stw	r2,1280(sp)
   44984:	d9414c17 	ldw	r5,1328(sp)
   44988:	2880004c 	andi	r2,r5,1
   4498c:	1005003a 	cmpeq	r2,r2,zero
   44990:	1000b31e 	bne	r2,zero,44c60 <___vfprintf_internal_r+0x1410>
   44994:	8444b03a 	or	r2,r16,r17
   44998:	1000b126 	beq	r2,zero,44c60 <___vfprintf_internal_r+0x1410>
   4499c:	d9814d17 	ldw	r6,1332(sp)
   449a0:	29400094 	ori	r5,r5,2
   449a4:	00800c04 	movi	r2,48
   449a8:	01000084 	movi	r4,2
   449ac:	d9414c15 	stw	r5,1328(sp)
   449b0:	d8800445 	stb	r2,17(sp)
   449b4:	d9800485 	stb	r6,18(sp)
   449b8:	d8000405 	stb	zero,16(sp)
   449bc:	003e3206 	br	44288 <___vfprintf_internal_r+0xa38>
   449c0:	01800174 	movhi	r6,5
   449c4:	31bf8204 	addi	r6,r6,-504
   449c8:	d9814415 	stw	r6,1296(sp)
   449cc:	003fe606 	br	44968 <___vfprintf_internal_r+0x1118>
   449d0:	00800ac4 	movi	r2,43
   449d4:	d8800405 	stb	r2,16(sp)
   449d8:	b8c00007 	ldb	r3,0(r23)
   449dc:	003c1b06 	br	43a4c <___vfprintf_internal_r+0x1fc>
   449e0:	d8814c17 	ldw	r2,1328(sp)
   449e4:	b8c00007 	ldb	r3,0(r23)
   449e8:	10800054 	ori	r2,r2,1
   449ec:	d8814c15 	stw	r2,1328(sp)
   449f0:	003c1606 	br	43a4c <___vfprintf_internal_r+0x1fc>
   449f4:	d8800407 	ldb	r2,16(sp)
   449f8:	1000461e 	bne	r2,zero,44b14 <___vfprintf_internal_r+0x12c4>
   449fc:	00800804 	movi	r2,32
   44a00:	d8800405 	stb	r2,16(sp)
   44a04:	b8c00007 	ldb	r3,0(r23)
   44a08:	003c1006 	br	43a4c <___vfprintf_internal_r+0x1fc>
   44a0c:	d9814c17 	ldw	r6,1328(sp)
   44a10:	b8c00007 	ldb	r3,0(r23)
   44a14:	31800214 	ori	r6,r6,8
   44a18:	d9814c15 	stw	r6,1328(sp)
   44a1c:	003c0b06 	br	43a4c <___vfprintf_internal_r+0x1fc>
   44a20:	0007883a 	mov	r3,zero
   44a24:	01000244 	movi	r4,9
   44a28:	188002a4 	muli	r2,r3,10
   44a2c:	b8c00007 	ldb	r3,0(r23)
   44a30:	d9814d17 	ldw	r6,1332(sp)
   44a34:	bdc00044 	addi	r23,r23,1
   44a38:	d8c14d15 	stw	r3,1332(sp)
   44a3c:	d9414d17 	ldw	r5,1332(sp)
   44a40:	3085883a 	add	r2,r6,r2
   44a44:	10fff404 	addi	r3,r2,-48
   44a48:	28bff404 	addi	r2,r5,-48
   44a4c:	20bff62e 	bgeu	r4,r2,44a28 <___vfprintf_internal_r+0x11d8>
   44a50:	d8c14a15 	stw	r3,1320(sp)
   44a54:	003bff06 	br	43a54 <___vfprintf_internal_r+0x204>
   44a58:	d9414c17 	ldw	r5,1328(sp)
   44a5c:	b8c00007 	ldb	r3,0(r23)
   44a60:	29402014 	ori	r5,r5,128
   44a64:	d9414c15 	stw	r5,1328(sp)
   44a68:	003bf806 	br	43a4c <___vfprintf_internal_r+0x1fc>
   44a6c:	b8c00007 	ldb	r3,0(r23)
   44a70:	00800a84 	movi	r2,42
   44a74:	bdc00044 	addi	r23,r23,1
   44a78:	18831526 	beq	r3,r2,456d0 <___vfprintf_internal_r+0x1e80>
   44a7c:	d8c14d15 	stw	r3,1332(sp)
   44a80:	18bff404 	addi	r2,r3,-48
   44a84:	00c00244 	movi	r3,9
   44a88:	18827836 	bltu	r3,r2,4546c <___vfprintf_internal_r+0x1c1c>
   44a8c:	000d883a 	mov	r6,zero
   44a90:	308002a4 	muli	r2,r6,10
   44a94:	b9800007 	ldb	r6,0(r23)
   44a98:	d9414d17 	ldw	r5,1332(sp)
   44a9c:	bdc00044 	addi	r23,r23,1
   44aa0:	d9814d15 	stw	r6,1332(sp)
   44aa4:	d9014d17 	ldw	r4,1332(sp)
   44aa8:	1145883a 	add	r2,r2,r5
   44aac:	11bff404 	addi	r6,r2,-48
   44ab0:	20bff404 	addi	r2,r4,-48
   44ab4:	18bff62e 	bgeu	r3,r2,44a90 <___vfprintf_internal_r+0x1240>
   44ab8:	3027883a 	mov	r19,r6
   44abc:	303be50e 	bge	r6,zero,43a54 <___vfprintf_internal_r+0x204>
   44ac0:	04ffffc4 	movi	r19,-1
   44ac4:	003be306 	br	43a54 <___vfprintf_internal_r+0x204>
   44ac8:	d8000405 	stb	zero,16(sp)
   44acc:	39800017 	ldw	r6,0(r7)
   44ad0:	39c00104 	addi	r7,r7,4
   44ad4:	d9c14015 	stw	r7,1280(sp)
   44ad8:	d9814115 	stw	r6,1284(sp)
   44adc:	3001c926 	beq	r6,zero,45204 <___vfprintf_internal_r+0x19b4>
   44ae0:	98000e16 	blt	r19,zero,44b1c <___vfprintf_internal_r+0x12cc>
   44ae4:	d9014117 	ldw	r4,1284(sp)
   44ae8:	000b883a 	mov	r5,zero
   44aec:	980d883a 	mov	r6,r19
   44af0:	004890c0 	call	4890c <memchr>
   44af4:	10025926 	beq	r2,zero,4545c <___vfprintf_internal_r+0x1c0c>
   44af8:	d8c14117 	ldw	r3,1284(sp)
   44afc:	10cfc83a 	sub	r7,r2,r3
   44b00:	99c19e16 	blt	r19,r7,4517c <___vfprintf_internal_r+0x192c>
   44b04:	d9c14515 	stw	r7,1300(sp)
   44b08:	38000916 	blt	r7,zero,44b30 <___vfprintf_internal_r+0x12e0>
   44b0c:	d8014615 	stw	zero,1304(sp)
   44b10:	003df106 	br	442d8 <___vfprintf_internal_r+0xa88>
   44b14:	b8c00007 	ldb	r3,0(r23)
   44b18:	003bcc06 	br	43a4c <___vfprintf_internal_r+0x1fc>
   44b1c:	d9014117 	ldw	r4,1284(sp)
   44b20:	00437840 	call	43784 <strlen>
   44b24:	d8814515 	stw	r2,1300(sp)
   44b28:	100f883a 	mov	r7,r2
   44b2c:	103ff70e 	bge	r2,zero,44b0c <___vfprintf_internal_r+0x12bc>
   44b30:	d8014515 	stw	zero,1300(sp)
   44b34:	d8014615 	stw	zero,1304(sp)
   44b38:	003de706 	br	442d8 <___vfprintf_internal_r+0xa88>
   44b3c:	20c03fcc 	andi	r3,r4,255
   44b40:	00800044 	movi	r2,1
   44b44:	18802d26 	beq	r3,r2,44bfc <___vfprintf_internal_r+0x13ac>
   44b48:	18800e36 	bltu	r3,r2,44b84 <___vfprintf_internal_r+0x1334>
   44b4c:	00800084 	movi	r2,2
   44b50:	1880fa26 	beq	r3,r2,44f3c <___vfprintf_internal_r+0x16ec>
   44b54:	01000174 	movhi	r4,5
   44b58:	213f9204 	addi	r4,r4,-440
   44b5c:	00437840 	call	43784 <strlen>
   44b60:	100f883a 	mov	r7,r2
   44b64:	dcc14515 	stw	r19,1300(sp)
   44b68:	9880010e 	bge	r19,r2,44b70 <___vfprintf_internal_r+0x1320>
   44b6c:	d8814515 	stw	r2,1300(sp)
   44b70:	00800174 	movhi	r2,5
   44b74:	10bf9204 	addi	r2,r2,-440
   44b78:	dcc14615 	stw	r19,1304(sp)
   44b7c:	d8814115 	stw	r2,1284(sp)
   44b80:	003dd506 	br	442d8 <___vfprintf_internal_r+0xa88>
   44b84:	d9401904 	addi	r5,sp,100
   44b88:	dd000f04 	addi	r20,sp,60
   44b8c:	d9414115 	stw	r5,1284(sp)
   44b90:	880a977a 	slli	r5,r17,29
   44b94:	d9814117 	ldw	r6,1284(sp)
   44b98:	8004d0fa 	srli	r2,r16,3
   44b9c:	8806d0fa 	srli	r3,r17,3
   44ba0:	810001cc 	andi	r4,r16,7
   44ba4:	2884b03a 	or	r2,r5,r2
   44ba8:	31bfffc4 	addi	r6,r6,-1
   44bac:	21000c04 	addi	r4,r4,48
   44bb0:	d9814115 	stw	r6,1284(sp)
   44bb4:	10cab03a 	or	r5,r2,r3
   44bb8:	31000005 	stb	r4,0(r6)
   44bbc:	1021883a 	mov	r16,r2
   44bc0:	1823883a 	mov	r17,r3
   44bc4:	283ff21e 	bne	r5,zero,44b90 <___vfprintf_internal_r+0x1340>
   44bc8:	d8c14c17 	ldw	r3,1328(sp)
   44bcc:	1880004c 	andi	r2,r3,1
   44bd0:	1005003a 	cmpeq	r2,r2,zero
   44bd4:	103db91e 	bne	r2,zero,442bc <___vfprintf_internal_r+0xa6c>
   44bd8:	20803fcc 	andi	r2,r4,255
   44bdc:	1080201c 	xori	r2,r2,128
   44be0:	10bfe004 	addi	r2,r2,-128
   44be4:	00c00c04 	movi	r3,48
   44be8:	10fdb426 	beq	r2,r3,442bc <___vfprintf_internal_r+0xa6c>
   44bec:	31bfffc4 	addi	r6,r6,-1
   44bf0:	d9814115 	stw	r6,1284(sp)
   44bf4:	30c00005 	stb	r3,0(r6)
   44bf8:	003db006 	br	442bc <___vfprintf_internal_r+0xa6c>
   44bfc:	88800068 	cmpgeui	r2,r17,1
   44c00:	10002c1e 	bne	r2,zero,44cb4 <___vfprintf_internal_r+0x1464>
   44c04:	8800021e 	bne	r17,zero,44c10 <___vfprintf_internal_r+0x13c0>
   44c08:	00800244 	movi	r2,9
   44c0c:	14002936 	bltu	r2,r16,44cb4 <___vfprintf_internal_r+0x1464>
   44c10:	d90018c4 	addi	r4,sp,99
   44c14:	dd000f04 	addi	r20,sp,60
   44c18:	d9014115 	stw	r4,1284(sp)
   44c1c:	d9014117 	ldw	r4,1284(sp)
   44c20:	80800c04 	addi	r2,r16,48
   44c24:	20800005 	stb	r2,0(r4)
   44c28:	003da406 	br	442bc <___vfprintf_internal_r+0xa6c>
   44c2c:	dc400d17 	ldw	r17,52(sp)
   44c30:	07000174 	movhi	fp,5
   44c34:	e73f9984 	addi	fp,fp,-410
   44c38:	9425883a 	add	r18,r18,r16
   44c3c:	8c400044 	addi	r17,r17,1
   44c40:	008001c4 	movi	r2,7
   44c44:	1f000015 	stw	fp,0(r3)
   44c48:	1c000115 	stw	r16,4(r3)
   44c4c:	dc800e15 	stw	r18,56(sp)
   44c50:	dc400d15 	stw	r17,52(sp)
   44c54:	147de216 	blt	r2,r17,443e0 <___vfprintf_internal_r+0xb90>
   44c58:	18c00204 	addi	r3,r3,8
   44c5c:	003c7a06 	br	43e48 <___vfprintf_internal_r+0x5f8>
   44c60:	01000084 	movi	r4,2
   44c64:	d8000405 	stb	zero,16(sp)
   44c68:	003d8706 	br	44288 <___vfprintf_internal_r+0xa38>
   44c6c:	d9814c17 	ldw	r6,1328(sp)
   44c70:	30c4703a 	and	r2,r6,r3
   44c74:	1005003a 	cmpeq	r2,r2,zero
   44c78:	103cb926 	beq	r2,zero,43f60 <___vfprintf_internal_r+0x710>
   44c7c:	d9014117 	ldw	r4,1284(sp)
   44c80:	94800044 	addi	r18,r18,1
   44c84:	8c400044 	addi	r17,r17,1
   44c88:	008001c4 	movi	r2,7
   44c8c:	a9000015 	stw	r4,0(r21)
   44c90:	a8c00115 	stw	r3,4(r21)
   44c94:	dc800e15 	stw	r18,56(sp)
   44c98:	dc400d15 	stw	r17,52(sp)
   44c9c:	147e6616 	blt	r2,r17,44638 <___vfprintf_internal_r+0xde8>
   44ca0:	acc00204 	addi	r19,r21,8
   44ca4:	003cd706 	br	44004 <___vfprintf_internal_r+0x7b4>
   44ca8:	07000174 	movhi	fp,5
   44cac:	e73f9984 	addi	fp,fp,-410
   44cb0:	003c4f06 	br	43df0 <___vfprintf_internal_r+0x5a0>
   44cb4:	dd000f04 	addi	r20,sp,60
   44cb8:	dc801904 	addi	r18,sp,100
   44cbc:	8009883a 	mov	r4,r16
   44cc0:	880b883a 	mov	r5,r17
   44cc4:	01800284 	movi	r6,10
   44cc8:	000f883a 	mov	r7,zero
   44ccc:	004af480 	call	4af48 <__umoddi3>
   44cd0:	12000c04 	addi	r8,r2,48
   44cd4:	94bfffc4 	addi	r18,r18,-1
   44cd8:	8009883a 	mov	r4,r16
   44cdc:	880b883a 	mov	r5,r17
   44ce0:	01800284 	movi	r6,10
   44ce4:	000f883a 	mov	r7,zero
   44ce8:	92000005 	stb	r8,0(r18)
   44cec:	004a96c0 	call	4a96c <__udivdi3>
   44cf0:	1009883a 	mov	r4,r2
   44cf4:	1021883a 	mov	r16,r2
   44cf8:	18800068 	cmpgeui	r2,r3,1
   44cfc:	1823883a 	mov	r17,r3
   44d00:	103fee1e 	bne	r2,zero,44cbc <___vfprintf_internal_r+0x146c>
   44d04:	1800021e 	bne	r3,zero,44d10 <___vfprintf_internal_r+0x14c0>
   44d08:	00800244 	movi	r2,9
   44d0c:	113feb36 	bltu	r2,r4,44cbc <___vfprintf_internal_r+0x146c>
   44d10:	94bfffc4 	addi	r18,r18,-1
   44d14:	dc814115 	stw	r18,1284(sp)
   44d18:	003fc006 	br	44c1c <___vfprintf_internal_r+0x13cc>
   44d1c:	d9014c17 	ldw	r4,1328(sp)
   44d20:	2080004c 	andi	r2,r4,1
   44d24:	10009a1e 	bne	r2,zero,44f90 <___vfprintf_internal_r+0x1740>
   44d28:	d9401904 	addi	r5,sp,100
   44d2c:	dd000f04 	addi	r20,sp,60
   44d30:	d9414115 	stw	r5,1284(sp)
   44d34:	003d6106 	br	442bc <___vfprintf_internal_r+0xa6c>
   44d38:	d9014f17 	ldw	r4,1340(sp)
   44d3c:	b00b883a 	mov	r5,r22
   44d40:	d9800c04 	addi	r6,sp,48
   44d44:	00437f80 	call	437f8 <__sprint_r>
   44d48:	103c791e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44d4c:	dc800e17 	ldw	r18,56(sp)
   44d50:	d8c01904 	addi	r3,sp,100
   44d54:	003cff06 	br	44154 <___vfprintf_internal_r+0x904>
   44d58:	d8c14c17 	ldw	r3,1328(sp)
   44d5c:	1880040c 	andi	r2,r3,16
   44d60:	1000711e 	bne	r2,zero,44f28 <___vfprintf_internal_r+0x16d8>
   44d64:	d9014c17 	ldw	r4,1328(sp)
   44d68:	2080100c 	andi	r2,r4,64
   44d6c:	10006e26 	beq	r2,zero,44f28 <___vfprintf_internal_r+0x16d8>
   44d70:	3c00000b 	ldhu	r16,0(r7)
   44d74:	0023883a 	mov	r17,zero
   44d78:	39c00104 	addi	r7,r7,4
   44d7c:	d9c14015 	stw	r7,1280(sp)
   44d80:	003f0006 	br	44984 <___vfprintf_internal_r+0x1134>
   44d84:	dc400d17 	ldw	r17,52(sp)
   44d88:	07000174 	movhi	fp,5
   44d8c:	e73f9984 	addi	fp,fp,-410
   44d90:	9425883a 	add	r18,r18,r16
   44d94:	8c400044 	addi	r17,r17,1
   44d98:	008001c4 	movi	r2,7
   44d9c:	1f000015 	stw	fp,0(r3)
   44da0:	1c000115 	stw	r16,4(r3)
   44da4:	dc800e15 	stw	r18,56(sp)
   44da8:	dc400d15 	stw	r17,52(sp)
   44dac:	147d7616 	blt	r2,r17,44388 <___vfprintf_internal_r+0xb38>
   44db0:	18c00204 	addi	r3,r3,8
   44db4:	003d7b06 	br	443a4 <___vfprintf_internal_r+0xb54>
   44db8:	dc800e17 	ldw	r18,56(sp)
   44dbc:	dc400d17 	ldw	r17,52(sp)
   44dc0:	07000174 	movhi	fp,5
   44dc4:	e73f9d84 	addi	fp,fp,-394
   44dc8:	003bc006 	br	43ccc <___vfprintf_internal_r+0x47c>
   44dcc:	d9014f17 	ldw	r4,1340(sp)
   44dd0:	b00b883a 	mov	r5,r22
   44dd4:	d9800c04 	addi	r6,sp,48
   44dd8:	00437f80 	call	437f8 <__sprint_r>
   44ddc:	103c541e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44de0:	dc800e17 	ldw	r18,56(sp)
   44de4:	d8c01904 	addi	r3,sp,100
   44de8:	003ce906 	br	44190 <___vfprintf_internal_r+0x940>
   44dec:	3c000017 	ldw	r16,0(r7)
   44df0:	0009883a 	mov	r4,zero
   44df4:	39c00104 	addi	r7,r7,4
   44df8:	0023883a 	mov	r17,zero
   44dfc:	d9c14015 	stw	r7,1280(sp)
   44e00:	d8000405 	stb	zero,16(sp)
   44e04:	003d2006 	br	44288 <___vfprintf_internal_r+0xa38>
   44e08:	38800017 	ldw	r2,0(r7)
   44e0c:	39c00104 	addi	r7,r7,4
   44e10:	d9c14015 	stw	r7,1280(sp)
   44e14:	1023d7fa 	srai	r17,r2,31
   44e18:	1021883a 	mov	r16,r2
   44e1c:	003d1806 	br	44280 <___vfprintf_internal_r+0xa30>
   44e20:	3c000017 	ldw	r16,0(r7)
   44e24:	01000044 	movi	r4,1
   44e28:	39c00104 	addi	r7,r7,4
   44e2c:	0023883a 	mov	r17,zero
   44e30:	d9c14015 	stw	r7,1280(sp)
   44e34:	d8000405 	stb	zero,16(sp)
   44e38:	003d1306 	br	44288 <___vfprintf_internal_r+0xa38>
   44e3c:	00800174 	movhi	r2,5
   44e40:	10bf9904 	addi	r2,r2,-412
   44e44:	94800044 	addi	r18,r18,1
   44e48:	8c400044 	addi	r17,r17,1
   44e4c:	a8800015 	stw	r2,0(r21)
   44e50:	00c00044 	movi	r3,1
   44e54:	008001c4 	movi	r2,7
   44e58:	a8c00115 	stw	r3,4(r21)
   44e5c:	dc800e15 	stw	r18,56(sp)
   44e60:	dc400d15 	stw	r17,52(sp)
   44e64:	1440ca16 	blt	r2,r17,45190 <___vfprintf_internal_r+0x1940>
   44e68:	a8c00204 	addi	r3,r21,8
   44e6c:	2000061e 	bne	r4,zero,44e88 <___vfprintf_internal_r+0x1638>
   44e70:	d9414717 	ldw	r5,1308(sp)
   44e74:	2800041e 	bne	r5,zero,44e88 <___vfprintf_internal_r+0x1638>
   44e78:	d9814c17 	ldw	r6,1328(sp)
   44e7c:	3080004c 	andi	r2,r6,1
   44e80:	1005003a 	cmpeq	r2,r2,zero
   44e84:	103bf01e 	bne	r2,zero,43e48 <___vfprintf_internal_r+0x5f8>
   44e88:	00800044 	movi	r2,1
   44e8c:	dc400d17 	ldw	r17,52(sp)
   44e90:	18800115 	stw	r2,4(r3)
   44e94:	d8814917 	ldw	r2,1316(sp)
   44e98:	94800044 	addi	r18,r18,1
   44e9c:	8c400044 	addi	r17,r17,1
   44ea0:	18800015 	stw	r2,0(r3)
   44ea4:	008001c4 	movi	r2,7
   44ea8:	dc800e15 	stw	r18,56(sp)
   44eac:	dc400d15 	stw	r17,52(sp)
   44eb0:	1440ca16 	blt	r2,r17,451dc <___vfprintf_internal_r+0x198c>
   44eb4:	18c00204 	addi	r3,r3,8
   44eb8:	0121c83a 	sub	r16,zero,r4
   44ebc:	0400500e 	bge	zero,r16,45000 <___vfprintf_internal_r+0x17b0>
   44ec0:	00800404 	movi	r2,16
   44ec4:	1400800e 	bge	r2,r16,450c8 <___vfprintf_internal_r+0x1878>
   44ec8:	1027883a 	mov	r19,r2
   44ecc:	07000174 	movhi	fp,5
   44ed0:	e73f9984 	addi	fp,fp,-410
   44ed4:	050001c4 	movi	r20,7
   44ed8:	00000306 	br	44ee8 <___vfprintf_internal_r+0x1698>
   44edc:	18c00204 	addi	r3,r3,8
   44ee0:	843ffc04 	addi	r16,r16,-16
   44ee4:	9c007a0e 	bge	r19,r16,450d0 <___vfprintf_internal_r+0x1880>
   44ee8:	94800404 	addi	r18,r18,16
   44eec:	8c400044 	addi	r17,r17,1
   44ef0:	1f000015 	stw	fp,0(r3)
   44ef4:	1cc00115 	stw	r19,4(r3)
   44ef8:	dc800e15 	stw	r18,56(sp)
   44efc:	dc400d15 	stw	r17,52(sp)
   44f00:	a47ff60e 	bge	r20,r17,44edc <___vfprintf_internal_r+0x168c>
   44f04:	d9014f17 	ldw	r4,1340(sp)
   44f08:	b00b883a 	mov	r5,r22
   44f0c:	d9800c04 	addi	r6,sp,48
   44f10:	00437f80 	call	437f8 <__sprint_r>
   44f14:	103c061e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44f18:	dc800e17 	ldw	r18,56(sp)
   44f1c:	dc400d17 	ldw	r17,52(sp)
   44f20:	d8c01904 	addi	r3,sp,100
   44f24:	003fee06 	br	44ee0 <___vfprintf_internal_r+0x1690>
   44f28:	3c000017 	ldw	r16,0(r7)
   44f2c:	0023883a 	mov	r17,zero
   44f30:	39c00104 	addi	r7,r7,4
   44f34:	d9c14015 	stw	r7,1280(sp)
   44f38:	003e9206 	br	44984 <___vfprintf_internal_r+0x1134>
   44f3c:	d9401904 	addi	r5,sp,100
   44f40:	dd000f04 	addi	r20,sp,60
   44f44:	d9414115 	stw	r5,1284(sp)
   44f48:	d9814417 	ldw	r6,1296(sp)
   44f4c:	880a973a 	slli	r5,r17,28
   44f50:	8004d13a 	srli	r2,r16,4
   44f54:	810003cc 	andi	r4,r16,15
   44f58:	3109883a 	add	r4,r6,r4
   44f5c:	2884b03a 	or	r2,r5,r2
   44f60:	21400003 	ldbu	r5,0(r4)
   44f64:	d9014117 	ldw	r4,1284(sp)
   44f68:	8806d13a 	srli	r3,r17,4
   44f6c:	1021883a 	mov	r16,r2
   44f70:	213fffc4 	addi	r4,r4,-1
   44f74:	d9014115 	stw	r4,1284(sp)
   44f78:	d9814117 	ldw	r6,1284(sp)
   44f7c:	10c8b03a 	or	r4,r2,r3
   44f80:	1823883a 	mov	r17,r3
   44f84:	31400005 	stb	r5,0(r6)
   44f88:	203fef1e 	bne	r4,zero,44f48 <___vfprintf_internal_r+0x16f8>
   44f8c:	003ccb06 	br	442bc <___vfprintf_internal_r+0xa6c>
   44f90:	00800c04 	movi	r2,48
   44f94:	d98018c4 	addi	r6,sp,99
   44f98:	dd000f04 	addi	r20,sp,60
   44f9c:	d88018c5 	stb	r2,99(sp)
   44fa0:	d9814115 	stw	r6,1284(sp)
   44fa4:	003cc506 	br	442bc <___vfprintf_internal_r+0xa6c>
   44fa8:	dc400d17 	ldw	r17,52(sp)
   44fac:	07000174 	movhi	fp,5
   44fb0:	e73f9d84 	addi	fp,fp,-394
   44fb4:	003bc706 	br	43ed4 <___vfprintf_internal_r+0x684>
   44fb8:	d9414c17 	ldw	r5,1328(sp)
   44fbc:	2880040c 	andi	r2,r5,16
   44fc0:	10007c26 	beq	r2,zero,451b4 <___vfprintf_internal_r+0x1964>
   44fc4:	38800017 	ldw	r2,0(r7)
   44fc8:	39c00104 	addi	r7,r7,4
   44fcc:	d9c14015 	stw	r7,1280(sp)
   44fd0:	d9814b17 	ldw	r6,1324(sp)
   44fd4:	d9c14017 	ldw	r7,1280(sp)
   44fd8:	11800015 	stw	r6,0(r2)
   44fdc:	003a7806 	br	439c0 <___vfprintf_internal_r+0x170>
   44fe0:	d9014f17 	ldw	r4,1340(sp)
   44fe4:	b00b883a 	mov	r5,r22
   44fe8:	d9800c04 	addi	r6,sp,48
   44fec:	00437f80 	call	437f8 <__sprint_r>
   44ff0:	103bcf1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   44ff4:	dc800e17 	ldw	r18,56(sp)
   44ff8:	dc400d17 	ldw	r17,52(sp)
   44ffc:	d8c01904 	addi	r3,sp,100
   45000:	d9014717 	ldw	r4,1308(sp)
   45004:	d9414117 	ldw	r5,1284(sp)
   45008:	8c400044 	addi	r17,r17,1
   4500c:	9125883a 	add	r18,r18,r4
   45010:	008001c4 	movi	r2,7
   45014:	19400015 	stw	r5,0(r3)
   45018:	19000115 	stw	r4,4(r3)
   4501c:	dc800e15 	stw	r18,56(sp)
   45020:	dc400d15 	stw	r17,52(sp)
   45024:	147cee16 	blt	r2,r17,443e0 <___vfprintf_internal_r+0xb90>
   45028:	18c00204 	addi	r3,r3,8
   4502c:	003b8606 	br	43e48 <___vfprintf_internal_r+0x5f8>
   45030:	38c00017 	ldw	r3,0(r7)
   45034:	39000204 	addi	r4,r7,8
   45038:	d9014015 	stw	r4,1280(sp)
   4503c:	d8c14215 	stw	r3,1288(sp)
   45040:	39c00117 	ldw	r7,4(r7)
   45044:	d9c14315 	stw	r7,1292(sp)
   45048:	003e2006 	br	448cc <___vfprintf_internal_r+0x107c>
   4504c:	0005883a 	mov	r2,zero
   45050:	1409c83a 	sub	r4,r2,r16
   45054:	1105803a 	cmpltu	r2,r2,r4
   45058:	044bc83a 	sub	r5,zero,r17
   4505c:	2885c83a 	sub	r2,r5,r2
   45060:	2021883a 	mov	r16,r4
   45064:	1023883a 	mov	r17,r2
   45068:	01000044 	movi	r4,1
   4506c:	00800b44 	movi	r2,45
   45070:	d8800405 	stb	r2,16(sp)
   45074:	003c8406 	br	44288 <___vfprintf_internal_r+0xa38>
   45078:	d9014f17 	ldw	r4,1340(sp)
   4507c:	b00b883a 	mov	r5,r22
   45080:	d9800c04 	addi	r6,sp,48
   45084:	00437f80 	call	437f8 <__sprint_r>
   45088:	103ba91e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   4508c:	dc800e17 	ldw	r18,56(sp)
   45090:	dc400d17 	ldw	r17,52(sp)
   45094:	d9000517 	ldw	r4,20(sp)
   45098:	d9401904 	addi	r5,sp,100
   4509c:	003da706 	br	4473c <___vfprintf_internal_r+0xeec>
   450a0:	d9014f17 	ldw	r4,1340(sp)
   450a4:	b00b883a 	mov	r5,r22
   450a8:	d9800c04 	addi	r6,sp,48
   450ac:	00437f80 	call	437f8 <__sprint_r>
   450b0:	103b9f1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   450b4:	dc800e17 	ldw	r18,56(sp)
   450b8:	dc400d17 	ldw	r17,52(sp)
   450bc:	d9000517 	ldw	r4,20(sp)
   450c0:	d8c01904 	addi	r3,sp,100
   450c4:	003d9106 	br	4470c <___vfprintf_internal_r+0xebc>
   450c8:	07000174 	movhi	fp,5
   450cc:	e73f9984 	addi	fp,fp,-410
   450d0:	9425883a 	add	r18,r18,r16
   450d4:	8c400044 	addi	r17,r17,1
   450d8:	008001c4 	movi	r2,7
   450dc:	1f000015 	stw	fp,0(r3)
   450e0:	1c000115 	stw	r16,4(r3)
   450e4:	dc800e15 	stw	r18,56(sp)
   450e8:	dc400d15 	stw	r17,52(sp)
   450ec:	147fbc16 	blt	r2,r17,44fe0 <___vfprintf_internal_r+0x1790>
   450f0:	18c00204 	addi	r3,r3,8
   450f4:	003fc206 	br	45000 <___vfprintf_internal_r+0x17b0>
   450f8:	d9014f17 	ldw	r4,1340(sp)
   450fc:	b00b883a 	mov	r5,r22
   45100:	d9800c04 	addi	r6,sp,48
   45104:	00437f80 	call	437f8 <__sprint_r>
   45108:	103b891e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   4510c:	dc800e17 	ldw	r18,56(sp)
   45110:	d9000517 	ldw	r4,20(sp)
   45114:	d8c01904 	addi	r3,sp,100
   45118:	003d0206 	br	44524 <___vfprintf_internal_r+0xcd4>
   4511c:	07000174 	movhi	fp,5
   45120:	e73f9984 	addi	fp,fp,-410
   45124:	003be406 	br	440b8 <___vfprintf_internal_r+0x868>
   45128:	00800174 	movhi	r2,5
   4512c:	10bf8804 	addi	r2,r2,-480
   45130:	d8814115 	stw	r2,1284(sp)
   45134:	003df506 	br	4490c <___vfprintf_internal_r+0x10bc>
   45138:	d9014217 	ldw	r4,1288(sp)
   4513c:	d9414317 	ldw	r5,1292(sp)
   45140:	004a2300 	call	4a230 <__isnand>
   45144:	10003926 	beq	r2,zero,4522c <___vfprintf_internal_r+0x19dc>
   45148:	d9414d17 	ldw	r5,1332(sp)
   4514c:	008011c4 	movi	r2,71
   45150:	1140ce16 	blt	r2,r5,4548c <___vfprintf_internal_r+0x1c3c>
   45154:	01800174 	movhi	r6,5
   45158:	31bf8904 	addi	r6,r6,-476
   4515c:	d9814115 	stw	r6,1284(sp)
   45160:	003dea06 	br	4490c <___vfprintf_internal_r+0x10bc>
   45164:	d9014c17 	ldw	r4,1328(sp)
   45168:	bdc00044 	addi	r23,r23,1
   4516c:	b8c00007 	ldb	r3,0(r23)
   45170:	21000814 	ori	r4,r4,32
   45174:	d9014c15 	stw	r4,1328(sp)
   45178:	003a3406 	br	43a4c <___vfprintf_internal_r+0x1fc>
   4517c:	dcc14515 	stw	r19,1300(sp)
   45180:	98011016 	blt	r19,zero,455c4 <___vfprintf_internal_r+0x1d74>
   45184:	980f883a 	mov	r7,r19
   45188:	d8014615 	stw	zero,1304(sp)
   4518c:	003c5206 	br	442d8 <___vfprintf_internal_r+0xa88>
   45190:	d9014f17 	ldw	r4,1340(sp)
   45194:	b00b883a 	mov	r5,r22
   45198:	d9800c04 	addi	r6,sp,48
   4519c:	00437f80 	call	437f8 <__sprint_r>
   451a0:	103b631e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   451a4:	dc800e17 	ldw	r18,56(sp)
   451a8:	d9000517 	ldw	r4,20(sp)
   451ac:	d8c01904 	addi	r3,sp,100
   451b0:	003f2e06 	br	44e6c <___vfprintf_internal_r+0x161c>
   451b4:	d8c14c17 	ldw	r3,1328(sp)
   451b8:	1880100c 	andi	r2,r3,64
   451bc:	1000a026 	beq	r2,zero,45440 <___vfprintf_internal_r+0x1bf0>
   451c0:	38800017 	ldw	r2,0(r7)
   451c4:	39c00104 	addi	r7,r7,4
   451c8:	d9c14015 	stw	r7,1280(sp)
   451cc:	d9014b17 	ldw	r4,1324(sp)
   451d0:	d9c14017 	ldw	r7,1280(sp)
   451d4:	1100000d 	sth	r4,0(r2)
   451d8:	0039f906 	br	439c0 <___vfprintf_internal_r+0x170>
   451dc:	d9014f17 	ldw	r4,1340(sp)
   451e0:	b00b883a 	mov	r5,r22
   451e4:	d9800c04 	addi	r6,sp,48
   451e8:	00437f80 	call	437f8 <__sprint_r>
   451ec:	103b501e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   451f0:	dc800e17 	ldw	r18,56(sp)
   451f4:	dc400d17 	ldw	r17,52(sp)
   451f8:	d9000517 	ldw	r4,20(sp)
   451fc:	d8c01904 	addi	r3,sp,100
   45200:	003f2d06 	br	44eb8 <___vfprintf_internal_r+0x1668>
   45204:	00800184 	movi	r2,6
   45208:	14c09a36 	bltu	r2,r19,45474 <___vfprintf_internal_r+0x1c24>
   4520c:	dcc14515 	stw	r19,1300(sp)
   45210:	9800010e 	bge	r19,zero,45218 <___vfprintf_internal_r+0x19c8>
   45214:	d8014515 	stw	zero,1300(sp)
   45218:	00800174 	movhi	r2,5
   4521c:	10bf8b04 	addi	r2,r2,-468
   45220:	980f883a 	mov	r7,r19
   45224:	d8814115 	stw	r2,1284(sp)
   45228:	003a7806 	br	43c0c <___vfprintf_internal_r+0x3bc>
   4522c:	00bfffc4 	movi	r2,-1
   45230:	9880e226 	beq	r19,r2,455bc <___vfprintf_internal_r+0x1d6c>
   45234:	d9414d17 	ldw	r5,1332(sp)
   45238:	008019c4 	movi	r2,103
   4523c:	2880dc26 	beq	r5,r2,455b0 <___vfprintf_internal_r+0x1d60>
   45240:	008011c4 	movi	r2,71
   45244:	2880da26 	beq	r5,r2,455b0 <___vfprintf_internal_r+0x1d60>
   45248:	d9414c17 	ldw	r5,1328(sp)
   4524c:	d9014317 	ldw	r4,1292(sp)
   45250:	d9814217 	ldw	r6,1288(sp)
   45254:	29404014 	ori	r5,r5,256
   45258:	d9414c15 	stw	r5,1328(sp)
   4525c:	2000cc16 	blt	r4,zero,45590 <___vfprintf_internal_r+0x1d40>
   45260:	3021883a 	mov	r16,r6
   45264:	2023883a 	mov	r17,r4
   45268:	0039883a 	mov	fp,zero
   4526c:	d9414d17 	ldw	r5,1332(sp)
   45270:	00801984 	movi	r2,102
   45274:	2880b726 	beq	r5,r2,45554 <___vfprintf_internal_r+0x1d04>
   45278:	00801184 	movi	r2,70
   4527c:	2880b526 	beq	r5,r2,45554 <___vfprintf_internal_r+0x1d04>
   45280:	00801944 	movi	r2,101
   45284:	2880c826 	beq	r5,r2,455a8 <___vfprintf_internal_r+0x1d58>
   45288:	00801144 	movi	r2,69
   4528c:	2880c626 	beq	r5,r2,455a8 <___vfprintf_internal_r+0x1d58>
   45290:	9829883a 	mov	r20,r19
   45294:	d9014f17 	ldw	r4,1340(sp)
   45298:	d8800504 	addi	r2,sp,20
   4529c:	880d883a 	mov	r6,r17
   452a0:	d8800115 	stw	r2,4(sp)
   452a4:	d8c00604 	addi	r3,sp,24
   452a8:	d8800704 	addi	r2,sp,28
   452ac:	800b883a 	mov	r5,r16
   452b0:	01c00084 	movi	r7,2
   452b4:	d8c00215 	stw	r3,8(sp)
   452b8:	d8800315 	stw	r2,12(sp)
   452bc:	dd000015 	stw	r20,0(sp)
   452c0:	0045a740 	call	45a74 <_dtoa_r>
   452c4:	d9814d17 	ldw	r6,1332(sp)
   452c8:	d8814115 	stw	r2,1284(sp)
   452cc:	008019c4 	movi	r2,103
   452d0:	30809526 	beq	r6,r2,45528 <___vfprintf_internal_r+0x1cd8>
   452d4:	d8c14d17 	ldw	r3,1332(sp)
   452d8:	008011c4 	movi	r2,71
   452dc:	18809226 	beq	r3,r2,45528 <___vfprintf_internal_r+0x1cd8>
   452e0:	d9414117 	ldw	r5,1284(sp)
   452e4:	d9814d17 	ldw	r6,1332(sp)
   452e8:	00801984 	movi	r2,102
   452ec:	2d25883a 	add	r18,r5,r20
   452f0:	30808626 	beq	r6,r2,4550c <___vfprintf_internal_r+0x1cbc>
   452f4:	00801184 	movi	r2,70
   452f8:	30808426 	beq	r6,r2,4550c <___vfprintf_internal_r+0x1cbc>
   452fc:	000d883a 	mov	r6,zero
   45300:	000f883a 	mov	r7,zero
   45304:	880b883a 	mov	r5,r17
   45308:	8009883a 	mov	r4,r16
   4530c:	004c0180 	call	4c018 <__eqdf2>
   45310:	1000751e 	bne	r2,zero,454e8 <___vfprintf_internal_r+0x1c98>
   45314:	9005883a 	mov	r2,r18
   45318:	dc800715 	stw	r18,28(sp)
   4531c:	d9014117 	ldw	r4,1284(sp)
   45320:	d9414d17 	ldw	r5,1332(sp)
   45324:	00c019c4 	movi	r3,103
   45328:	1125c83a 	sub	r18,r2,r4
   4532c:	28c06826 	beq	r5,r3,454d0 <___vfprintf_internal_r+0x1c80>
   45330:	008011c4 	movi	r2,71
   45334:	28806626 	beq	r5,r2,454d0 <___vfprintf_internal_r+0x1c80>
   45338:	d9000517 	ldw	r4,20(sp)
   4533c:	d8c14d17 	ldw	r3,1332(sp)
   45340:	00801944 	movi	r2,101
   45344:	10c05516 	blt	r2,r3,4549c <___vfprintf_internal_r+0x1c4c>
   45348:	213fffc4 	addi	r4,r4,-1
   4534c:	d9000515 	stw	r4,20(sp)
   45350:	d8c00805 	stb	r3,32(sp)
   45354:	2021883a 	mov	r16,r4
   45358:	2000c116 	blt	r4,zero,45660 <___vfprintf_internal_r+0x1e10>
   4535c:	00800ac4 	movi	r2,43
   45360:	d8800845 	stb	r2,33(sp)
   45364:	00800244 	movi	r2,9
   45368:	1400af0e 	bge	r2,r16,45628 <___vfprintf_internal_r+0x1dd8>
   4536c:	1027883a 	mov	r19,r2
   45370:	dc400b84 	addi	r17,sp,46
   45374:	8009883a 	mov	r4,r16
   45378:	01400284 	movi	r5,10
   4537c:	0042ea40 	call	42ea4 <__modsi3>
   45380:	10800c04 	addi	r2,r2,48
   45384:	8c7fffc4 	addi	r17,r17,-1
   45388:	8009883a 	mov	r4,r16
   4538c:	01400284 	movi	r5,10
   45390:	88800005 	stb	r2,0(r17)
   45394:	0042e440 	call	42e44 <__divsi3>
   45398:	1021883a 	mov	r16,r2
   4539c:	98bff516 	blt	r19,r2,45374 <___vfprintf_internal_r+0x1b24>
   453a0:	10c00c04 	addi	r3,r2,48
   453a4:	d88009c4 	addi	r2,sp,39
   453a8:	108001c4 	addi	r2,r2,7
   453ac:	897fffc4 	addi	r5,r17,-1
   453b0:	88ffffc5 	stb	r3,-1(r17)
   453b4:	2880a72e 	bgeu	r5,r2,45654 <___vfprintf_internal_r+0x1e04>
   453b8:	1009883a 	mov	r4,r2
   453bc:	d9800804 	addi	r6,sp,32
   453c0:	d8c00884 	addi	r3,sp,34
   453c4:	28800003 	ldbu	r2,0(r5)
   453c8:	29400044 	addi	r5,r5,1
   453cc:	18800005 	stb	r2,0(r3)
   453d0:	18c00044 	addi	r3,r3,1
   453d4:	293ffb36 	bltu	r5,r4,453c4 <___vfprintf_internal_r+0x1b74>
   453d8:	1987c83a 	sub	r3,r3,r6
   453dc:	00800044 	movi	r2,1
   453e0:	d8c14815 	stw	r3,1312(sp)
   453e4:	90cf883a 	add	r7,r18,r3
   453e8:	1480960e 	bge	r2,r18,45644 <___vfprintf_internal_r+0x1df4>
   453ec:	39c00044 	addi	r7,r7,1
   453f0:	d9c14515 	stw	r7,1300(sp)
   453f4:	38003416 	blt	r7,zero,454c8 <___vfprintf_internal_r+0x1c78>
   453f8:	e0803fcc 	andi	r2,fp,255
   453fc:	1080201c 	xori	r2,r2,128
   45400:	10bfe004 	addi	r2,r2,-128
   45404:	10004e26 	beq	r2,zero,45540 <___vfprintf_internal_r+0x1cf0>
   45408:	00800b44 	movi	r2,45
   4540c:	dc814715 	stw	r18,1308(sp)
   45410:	d8014615 	stw	zero,1304(sp)
   45414:	d8800405 	stb	r2,16(sp)
   45418:	003bb106 	br	442e0 <___vfprintf_internal_r+0xa90>
   4541c:	00800b44 	movi	r2,45
   45420:	d8800405 	stb	r2,16(sp)
   45424:	003d3306 	br	448f4 <___vfprintf_internal_r+0x10a4>
   45428:	d9014f17 	ldw	r4,1340(sp)
   4542c:	b00b883a 	mov	r5,r22
   45430:	d9800c04 	addi	r6,sp,48
   45434:	00437f80 	call	437f8 <__sprint_r>
   45438:	103abd1e 	bne	r2,zero,43f30 <___vfprintf_internal_r+0x6e0>
   4543c:	003abb06 	br	43f2c <___vfprintf_internal_r+0x6dc>
   45440:	38800017 	ldw	r2,0(r7)
   45444:	39c00104 	addi	r7,r7,4
   45448:	d9c14015 	stw	r7,1280(sp)
   4544c:	d9414b17 	ldw	r5,1324(sp)
   45450:	d9c14017 	ldw	r7,1280(sp)
   45454:	11400015 	stw	r5,0(r2)
   45458:	00395906 	br	439c0 <___vfprintf_internal_r+0x170>
   4545c:	980f883a 	mov	r7,r19
   45460:	dcc14515 	stw	r19,1300(sp)
   45464:	d8014615 	stw	zero,1304(sp)
   45468:	003b9b06 	br	442d8 <___vfprintf_internal_r+0xa88>
   4546c:	0027883a 	mov	r19,zero
   45470:	00397806 	br	43a54 <___vfprintf_internal_r+0x204>
   45474:	00c00174 	movhi	r3,5
   45478:	18ff8b04 	addi	r3,r3,-468
   4547c:	100f883a 	mov	r7,r2
   45480:	d8814515 	stw	r2,1300(sp)
   45484:	d8c14115 	stw	r3,1284(sp)
   45488:	0039e006 	br	43c0c <___vfprintf_internal_r+0x3bc>
   4548c:	00800174 	movhi	r2,5
   45490:	10bf8a04 	addi	r2,r2,-472
   45494:	d8814115 	stw	r2,1284(sp)
   45498:	003d1c06 	br	4490c <___vfprintf_internal_r+0x10bc>
   4549c:	d9414d17 	ldw	r5,1332(sp)
   454a0:	00801984 	movi	r2,102
   454a4:	28804926 	beq	r5,r2,455cc <___vfprintf_internal_r+0x1d7c>
   454a8:	200f883a 	mov	r7,r4
   454ac:	24805716 	blt	r4,r18,4560c <___vfprintf_internal_r+0x1dbc>
   454b0:	d9414c17 	ldw	r5,1328(sp)
   454b4:	2880004c 	andi	r2,r5,1
   454b8:	10000126 	beq	r2,zero,454c0 <___vfprintf_internal_r+0x1c70>
   454bc:	21c00044 	addi	r7,r4,1
   454c0:	d9c14515 	stw	r7,1300(sp)
   454c4:	383fcc0e 	bge	r7,zero,453f8 <___vfprintf_internal_r+0x1ba8>
   454c8:	d8014515 	stw	zero,1300(sp)
   454cc:	003fca06 	br	453f8 <___vfprintf_internal_r+0x1ba8>
   454d0:	d9000517 	ldw	r4,20(sp)
   454d4:	00bfff04 	movi	r2,-4
   454d8:	1100480e 	bge	r2,r4,455fc <___vfprintf_internal_r+0x1dac>
   454dc:	99004716 	blt	r19,r4,455fc <___vfprintf_internal_r+0x1dac>
   454e0:	d8c14d15 	stw	r3,1332(sp)
   454e4:	003ff006 	br	454a8 <___vfprintf_internal_r+0x1c58>
   454e8:	d8800717 	ldw	r2,28(sp)
   454ec:	14bf8b2e 	bgeu	r2,r18,4531c <___vfprintf_internal_r+0x1acc>
   454f0:	9007883a 	mov	r3,r18
   454f4:	01000c04 	movi	r4,48
   454f8:	11000005 	stb	r4,0(r2)
   454fc:	10800044 	addi	r2,r2,1
   45500:	d8800715 	stw	r2,28(sp)
   45504:	18bffc1e 	bne	r3,r2,454f8 <___vfprintf_internal_r+0x1ca8>
   45508:	003f8406 	br	4531c <___vfprintf_internal_r+0x1acc>
   4550c:	d8814117 	ldw	r2,1284(sp)
   45510:	10c00007 	ldb	r3,0(r2)
   45514:	00800c04 	movi	r2,48
   45518:	18805b26 	beq	r3,r2,45688 <___vfprintf_internal_r+0x1e38>
   4551c:	d9000517 	ldw	r4,20(sp)
   45520:	9125883a 	add	r18,r18,r4
   45524:	003f7506 	br	452fc <___vfprintf_internal_r+0x1aac>
   45528:	d9014c17 	ldw	r4,1328(sp)
   4552c:	2080004c 	andi	r2,r4,1
   45530:	1005003a 	cmpeq	r2,r2,zero
   45534:	103f6a26 	beq	r2,zero,452e0 <___vfprintf_internal_r+0x1a90>
   45538:	d8800717 	ldw	r2,28(sp)
   4553c:	003f7706 	br	4531c <___vfprintf_internal_r+0x1acc>
   45540:	d9c14515 	stw	r7,1300(sp)
   45544:	38004d16 	blt	r7,zero,4567c <___vfprintf_internal_r+0x1e2c>
   45548:	dc814715 	stw	r18,1308(sp)
   4554c:	d8014615 	stw	zero,1304(sp)
   45550:	003b6106 	br	442d8 <___vfprintf_internal_r+0xa88>
   45554:	d9014f17 	ldw	r4,1340(sp)
   45558:	d8800504 	addi	r2,sp,20
   4555c:	d8800115 	stw	r2,4(sp)
   45560:	d8c00604 	addi	r3,sp,24
   45564:	d8800704 	addi	r2,sp,28
   45568:	800b883a 	mov	r5,r16
   4556c:	880d883a 	mov	r6,r17
   45570:	01c000c4 	movi	r7,3
   45574:	d8c00215 	stw	r3,8(sp)
   45578:	d8800315 	stw	r2,12(sp)
   4557c:	dcc00015 	stw	r19,0(sp)
   45580:	9829883a 	mov	r20,r19
   45584:	0045a740 	call	45a74 <_dtoa_r>
   45588:	d8814115 	stw	r2,1284(sp)
   4558c:	003f5106 	br	452d4 <___vfprintf_internal_r+0x1a84>
   45590:	d8c14217 	ldw	r3,1288(sp)
   45594:	d9014317 	ldw	r4,1292(sp)
   45598:	07000b44 	movi	fp,45
   4559c:	1821883a 	mov	r16,r3
   455a0:	2460003c 	xorhi	r17,r4,32768
   455a4:	003f3106 	br	4526c <___vfprintf_internal_r+0x1a1c>
   455a8:	9d000044 	addi	r20,r19,1
   455ac:	003f3906 	br	45294 <___vfprintf_internal_r+0x1a44>
   455b0:	983f251e 	bne	r19,zero,45248 <___vfprintf_internal_r+0x19f8>
   455b4:	04c00044 	movi	r19,1
   455b8:	003f2306 	br	45248 <___vfprintf_internal_r+0x19f8>
   455bc:	04c00184 	movi	r19,6
   455c0:	003f2106 	br	45248 <___vfprintf_internal_r+0x19f8>
   455c4:	d8014515 	stw	zero,1300(sp)
   455c8:	003eee06 	br	45184 <___vfprintf_internal_r+0x1934>
   455cc:	200f883a 	mov	r7,r4
   455d0:	0100370e 	bge	zero,r4,456b0 <___vfprintf_internal_r+0x1e60>
   455d4:	9800031e 	bne	r19,zero,455e4 <___vfprintf_internal_r+0x1d94>
   455d8:	d9814c17 	ldw	r6,1328(sp)
   455dc:	3080004c 	andi	r2,r6,1
   455e0:	103fb726 	beq	r2,zero,454c0 <___vfprintf_internal_r+0x1c70>
   455e4:	20800044 	addi	r2,r4,1
   455e8:	98a7883a 	add	r19,r19,r2
   455ec:	dcc14515 	stw	r19,1300(sp)
   455f0:	980f883a 	mov	r7,r19
   455f4:	983f800e 	bge	r19,zero,453f8 <___vfprintf_internal_r+0x1ba8>
   455f8:	003fb306 	br	454c8 <___vfprintf_internal_r+0x1c78>
   455fc:	d9814d17 	ldw	r6,1332(sp)
   45600:	31bfff84 	addi	r6,r6,-2
   45604:	d9814d15 	stw	r6,1332(sp)
   45608:	003f4c06 	br	4533c <___vfprintf_internal_r+0x1aec>
   4560c:	0100180e 	bge	zero,r4,45670 <___vfprintf_internal_r+0x1e20>
   45610:	00800044 	movi	r2,1
   45614:	1485883a 	add	r2,r2,r18
   45618:	d8814515 	stw	r2,1300(sp)
   4561c:	100f883a 	mov	r7,r2
   45620:	103f750e 	bge	r2,zero,453f8 <___vfprintf_internal_r+0x1ba8>
   45624:	003fa806 	br	454c8 <___vfprintf_internal_r+0x1c78>
   45628:	80c00c04 	addi	r3,r16,48
   4562c:	00800c04 	movi	r2,48
   45630:	d8c008c5 	stb	r3,35(sp)
   45634:	d9800804 	addi	r6,sp,32
   45638:	d8c00904 	addi	r3,sp,36
   4563c:	d8800885 	stb	r2,34(sp)
   45640:	003f6506 	br	453d8 <___vfprintf_internal_r+0x1b88>
   45644:	d9014c17 	ldw	r4,1328(sp)
   45648:	2084703a 	and	r2,r4,r2
   4564c:	103f9c26 	beq	r2,zero,454c0 <___vfprintf_internal_r+0x1c70>
   45650:	003f6606 	br	453ec <___vfprintf_internal_r+0x1b9c>
   45654:	d9800804 	addi	r6,sp,32
   45658:	d8c00884 	addi	r3,sp,34
   4565c:	003f5e06 	br	453d8 <___vfprintf_internal_r+0x1b88>
   45660:	00800b44 	movi	r2,45
   45664:	0121c83a 	sub	r16,zero,r4
   45668:	d8800845 	stb	r2,33(sp)
   4566c:	003f3d06 	br	45364 <___vfprintf_internal_r+0x1b14>
   45670:	00800084 	movi	r2,2
   45674:	1105c83a 	sub	r2,r2,r4
   45678:	003fe606 	br	45614 <___vfprintf_internal_r+0x1dc4>
   4567c:	d8014515 	stw	zero,1300(sp)
   45680:	dc814715 	stw	r18,1308(sp)
   45684:	003fb106 	br	4554c <___vfprintf_internal_r+0x1cfc>
   45688:	000d883a 	mov	r6,zero
   4568c:	000f883a 	mov	r7,zero
   45690:	8009883a 	mov	r4,r16
   45694:	880b883a 	mov	r5,r17
   45698:	004c0a00 	call	4c0a0 <__nedf2>
   4569c:	103f9f26 	beq	r2,zero,4551c <___vfprintf_internal_r+0x1ccc>
   456a0:	00800044 	movi	r2,1
   456a4:	1509c83a 	sub	r4,r2,r20
   456a8:	d9000515 	stw	r4,20(sp)
   456ac:	003f9b06 	br	4551c <___vfprintf_internal_r+0x1ccc>
   456b0:	98000d1e 	bne	r19,zero,456e8 <___vfprintf_internal_r+0x1e98>
   456b4:	d8c14c17 	ldw	r3,1328(sp)
   456b8:	1880004c 	andi	r2,r3,1
   456bc:	10000a1e 	bne	r2,zero,456e8 <___vfprintf_internal_r+0x1e98>
   456c0:	01000044 	movi	r4,1
   456c4:	200f883a 	mov	r7,r4
   456c8:	d9014515 	stw	r4,1300(sp)
   456cc:	003f4a06 	br	453f8 <___vfprintf_internal_r+0x1ba8>
   456d0:	3cc00017 	ldw	r19,0(r7)
   456d4:	39c00104 	addi	r7,r7,4
   456d8:	983d0e0e 	bge	r19,zero,44b14 <___vfprintf_internal_r+0x12c4>
   456dc:	b8c00007 	ldb	r3,0(r23)
   456e0:	04ffffc4 	movi	r19,-1
   456e4:	0038d906 	br	43a4c <___vfprintf_internal_r+0x1fc>
   456e8:	9cc00084 	addi	r19,r19,2
   456ec:	dcc14515 	stw	r19,1300(sp)
   456f0:	980f883a 	mov	r7,r19
   456f4:	983f400e 	bge	r19,zero,453f8 <___vfprintf_internal_r+0x1ba8>
   456f8:	003f7306 	br	454c8 <___vfprintf_internal_r+0x1c78>

000456fc <__vfprintf_internal>:
   456fc:	00800174 	movhi	r2,5
   45700:	10873804 	addi	r2,r2,7392
   45704:	2013883a 	mov	r9,r4
   45708:	11000017 	ldw	r4,0(r2)
   4570c:	2805883a 	mov	r2,r5
   45710:	300f883a 	mov	r7,r6
   45714:	480b883a 	mov	r5,r9
   45718:	100d883a 	mov	r6,r2
   4571c:	00438501 	jmpi	43850 <___vfprintf_internal_r>

00045720 <__swsetup_r>:
   45720:	00800174 	movhi	r2,5
   45724:	10873804 	addi	r2,r2,7392
   45728:	10c00017 	ldw	r3,0(r2)
   4572c:	defffd04 	addi	sp,sp,-12
   45730:	dc400115 	stw	r17,4(sp)
   45734:	dc000015 	stw	r16,0(sp)
   45738:	dfc00215 	stw	ra,8(sp)
   4573c:	2023883a 	mov	r17,r4
   45740:	2821883a 	mov	r16,r5
   45744:	18000226 	beq	r3,zero,45750 <__swsetup_r+0x30>
   45748:	18800e17 	ldw	r2,56(r3)
   4574c:	10001f26 	beq	r2,zero,457cc <__swsetup_r+0xac>
   45750:	8100030b 	ldhu	r4,12(r16)
   45754:	2080020c 	andi	r2,r4,8
   45758:	10002826 	beq	r2,zero,457fc <__swsetup_r+0xdc>
   4575c:	81400417 	ldw	r5,16(r16)
   45760:	28001d26 	beq	r5,zero,457d8 <__swsetup_r+0xb8>
   45764:	2080004c 	andi	r2,r4,1
   45768:	1005003a 	cmpeq	r2,r2,zero
   4576c:	10000b26 	beq	r2,zero,4579c <__swsetup_r+0x7c>
   45770:	2080008c 	andi	r2,r4,2
   45774:	10001226 	beq	r2,zero,457c0 <__swsetup_r+0xa0>
   45778:	0005883a 	mov	r2,zero
   4577c:	80800215 	stw	r2,8(r16)
   45780:	28000b26 	beq	r5,zero,457b0 <__swsetup_r+0x90>
   45784:	0005883a 	mov	r2,zero
   45788:	dfc00217 	ldw	ra,8(sp)
   4578c:	dc400117 	ldw	r17,4(sp)
   45790:	dc000017 	ldw	r16,0(sp)
   45794:	dec00304 	addi	sp,sp,12
   45798:	f800283a 	ret
   4579c:	80800517 	ldw	r2,20(r16)
   457a0:	80000215 	stw	zero,8(r16)
   457a4:	0085c83a 	sub	r2,zero,r2
   457a8:	80800615 	stw	r2,24(r16)
   457ac:	283ff51e 	bne	r5,zero,45784 <__swsetup_r+0x64>
   457b0:	2080200c 	andi	r2,r4,128
   457b4:	103ff326 	beq	r2,zero,45784 <__swsetup_r+0x64>
   457b8:	00bfffc4 	movi	r2,-1
   457bc:	003ff206 	br	45788 <__swsetup_r+0x68>
   457c0:	80800517 	ldw	r2,20(r16)
   457c4:	80800215 	stw	r2,8(r16)
   457c8:	003fed06 	br	45780 <__swsetup_r+0x60>
   457cc:	1809883a 	mov	r4,r3
   457d0:	00472c00 	call	472c0 <__sinit>
   457d4:	003fde06 	br	45750 <__swsetup_r+0x30>
   457d8:	20c0a00c 	andi	r3,r4,640
   457dc:	00808004 	movi	r2,512
   457e0:	18bfe026 	beq	r3,r2,45764 <__swsetup_r+0x44>
   457e4:	8809883a 	mov	r4,r17
   457e8:	800b883a 	mov	r5,r16
   457ec:	00480380 	call	48038 <__smakebuf_r>
   457f0:	8100030b 	ldhu	r4,12(r16)
   457f4:	81400417 	ldw	r5,16(r16)
   457f8:	003fda06 	br	45764 <__swsetup_r+0x44>
   457fc:	2080040c 	andi	r2,r4,16
   45800:	103fed26 	beq	r2,zero,457b8 <__swsetup_r+0x98>
   45804:	2080010c 	andi	r2,r4,4
   45808:	10001226 	beq	r2,zero,45854 <__swsetup_r+0x134>
   4580c:	81400c17 	ldw	r5,48(r16)
   45810:	28000526 	beq	r5,zero,45828 <__swsetup_r+0x108>
   45814:	80801004 	addi	r2,r16,64
   45818:	28800226 	beq	r5,r2,45824 <__swsetup_r+0x104>
   4581c:	8809883a 	mov	r4,r17
   45820:	00476440 	call	47644 <_free_r>
   45824:	80000c15 	stw	zero,48(r16)
   45828:	8080030b 	ldhu	r2,12(r16)
   4582c:	81400417 	ldw	r5,16(r16)
   45830:	80000115 	stw	zero,4(r16)
   45834:	10bff6cc 	andi	r2,r2,65499
   45838:	8080030d 	sth	r2,12(r16)
   4583c:	81400015 	stw	r5,0(r16)
   45840:	8080030b 	ldhu	r2,12(r16)
   45844:	10800214 	ori	r2,r2,8
   45848:	113fffcc 	andi	r4,r2,65535
   4584c:	8080030d 	sth	r2,12(r16)
   45850:	003fc306 	br	45760 <__swsetup_r+0x40>
   45854:	81400417 	ldw	r5,16(r16)
   45858:	003ff906 	br	45840 <__swsetup_r+0x120>

0004585c <quorem>:
   4585c:	28c00417 	ldw	r3,16(r5)
   45860:	20800417 	ldw	r2,16(r4)
   45864:	defff604 	addi	sp,sp,-40
   45868:	ddc00715 	stw	r23,28(sp)
   4586c:	dd400515 	stw	r21,20(sp)
   45870:	dfc00915 	stw	ra,36(sp)
   45874:	df000815 	stw	fp,32(sp)
   45878:	dd800615 	stw	r22,24(sp)
   4587c:	dd000415 	stw	r20,16(sp)
   45880:	dcc00315 	stw	r19,12(sp)
   45884:	dc800215 	stw	r18,8(sp)
   45888:	dc400115 	stw	r17,4(sp)
   4588c:	dc000015 	stw	r16,0(sp)
   45890:	202f883a 	mov	r23,r4
   45894:	282b883a 	mov	r21,r5
   45898:	10c07416 	blt	r2,r3,45a6c <quorem+0x210>
   4589c:	1c7fffc4 	addi	r17,r3,-1
   458a0:	8c45883a 	add	r2,r17,r17
   458a4:	1085883a 	add	r2,r2,r2
   458a8:	2c000504 	addi	r16,r5,20
   458ac:	24c00504 	addi	r19,r4,20
   458b0:	14ed883a 	add	r22,r2,r19
   458b4:	80a5883a 	add	r18,r16,r2
   458b8:	b7000017 	ldw	fp,0(r22)
   458bc:	91400017 	ldw	r5,0(r18)
   458c0:	e009883a 	mov	r4,fp
   458c4:	29400044 	addi	r5,r5,1
   458c8:	0042f040 	call	42f04 <__udivsi3>
   458cc:	1029883a 	mov	r20,r2
   458d0:	10003c1e 	bne	r2,zero,459c4 <quorem+0x168>
   458d4:	a80b883a 	mov	r5,r21
   458d8:	b809883a 	mov	r4,r23
   458dc:	0048d640 	call	48d64 <__mcmp>
   458e0:	10002b16 	blt	r2,zero,45990 <quorem+0x134>
   458e4:	a5000044 	addi	r20,r20,1
   458e8:	980f883a 	mov	r7,r19
   458ec:	0011883a 	mov	r8,zero
   458f0:	0009883a 	mov	r4,zero
   458f4:	81400017 	ldw	r5,0(r16)
   458f8:	38c00017 	ldw	r3,0(r7)
   458fc:	84000104 	addi	r16,r16,4
   45900:	28bfffcc 	andi	r2,r5,65535
   45904:	2085883a 	add	r2,r4,r2
   45908:	11bfffcc 	andi	r6,r2,65535
   4590c:	193fffcc 	andi	r4,r3,65535
   45910:	1004d43a 	srli	r2,r2,16
   45914:	280ad43a 	srli	r5,r5,16
   45918:	2189c83a 	sub	r4,r4,r6
   4591c:	2209883a 	add	r4,r4,r8
   45920:	1806d43a 	srli	r3,r3,16
   45924:	288b883a 	add	r5,r5,r2
   45928:	200dd43a 	srai	r6,r4,16
   4592c:	28bfffcc 	andi	r2,r5,65535
   45930:	1887c83a 	sub	r3,r3,r2
   45934:	1987883a 	add	r3,r3,r6
   45938:	3900000d 	sth	r4,0(r7)
   4593c:	38c0008d 	sth	r3,2(r7)
   45940:	2808d43a 	srli	r4,r5,16
   45944:	39c00104 	addi	r7,r7,4
   45948:	1811d43a 	srai	r8,r3,16
   4594c:	943fe92e 	bgeu	r18,r16,458f4 <quorem+0x98>
   45950:	8c45883a 	add	r2,r17,r17
   45954:	1085883a 	add	r2,r2,r2
   45958:	9885883a 	add	r2,r19,r2
   4595c:	10c00017 	ldw	r3,0(r2)
   45960:	18000b1e 	bne	r3,zero,45990 <quorem+0x134>
   45964:	113fff04 	addi	r4,r2,-4
   45968:	9900082e 	bgeu	r19,r4,4598c <quorem+0x130>
   4596c:	10bfff17 	ldw	r2,-4(r2)
   45970:	10000326 	beq	r2,zero,45980 <quorem+0x124>
   45974:	00000506 	br	4598c <quorem+0x130>
   45978:	20800017 	ldw	r2,0(r4)
   4597c:	1000031e 	bne	r2,zero,4598c <quorem+0x130>
   45980:	213fff04 	addi	r4,r4,-4
   45984:	8c7fffc4 	addi	r17,r17,-1
   45988:	993ffb36 	bltu	r19,r4,45978 <quorem+0x11c>
   4598c:	bc400415 	stw	r17,16(r23)
   45990:	a005883a 	mov	r2,r20
   45994:	dfc00917 	ldw	ra,36(sp)
   45998:	df000817 	ldw	fp,32(sp)
   4599c:	ddc00717 	ldw	r23,28(sp)
   459a0:	dd800617 	ldw	r22,24(sp)
   459a4:	dd400517 	ldw	r21,20(sp)
   459a8:	dd000417 	ldw	r20,16(sp)
   459ac:	dcc00317 	ldw	r19,12(sp)
   459b0:	dc800217 	ldw	r18,8(sp)
   459b4:	dc400117 	ldw	r17,4(sp)
   459b8:	dc000017 	ldw	r16,0(sp)
   459bc:	dec00a04 	addi	sp,sp,40
   459c0:	f800283a 	ret
   459c4:	980f883a 	mov	r7,r19
   459c8:	8011883a 	mov	r8,r16
   459cc:	0013883a 	mov	r9,zero
   459d0:	000d883a 	mov	r6,zero
   459d4:	40c00017 	ldw	r3,0(r8)
   459d8:	39000017 	ldw	r4,0(r7)
   459dc:	42000104 	addi	r8,r8,4
   459e0:	18bfffcc 	andi	r2,r3,65535
   459e4:	a085383a 	mul	r2,r20,r2
   459e8:	1806d43a 	srli	r3,r3,16
   459ec:	217fffcc 	andi	r5,r4,65535
   459f0:	3085883a 	add	r2,r6,r2
   459f4:	11bfffcc 	andi	r6,r2,65535
   459f8:	a0c7383a 	mul	r3,r20,r3
   459fc:	1004d43a 	srli	r2,r2,16
   45a00:	298bc83a 	sub	r5,r5,r6
   45a04:	2a4b883a 	add	r5,r5,r9
   45a08:	2008d43a 	srli	r4,r4,16
   45a0c:	1887883a 	add	r3,r3,r2
   45a10:	280dd43a 	srai	r6,r5,16
   45a14:	18bfffcc 	andi	r2,r3,65535
   45a18:	2089c83a 	sub	r4,r4,r2
   45a1c:	2189883a 	add	r4,r4,r6
   45a20:	3900008d 	sth	r4,2(r7)
   45a24:	3940000d 	sth	r5,0(r7)
   45a28:	180cd43a 	srli	r6,r3,16
   45a2c:	39c00104 	addi	r7,r7,4
   45a30:	2013d43a 	srai	r9,r4,16
   45a34:	923fe72e 	bgeu	r18,r8,459d4 <quorem+0x178>
   45a38:	e03fa61e 	bne	fp,zero,458d4 <quorem+0x78>
   45a3c:	b0ffff04 	addi	r3,r22,-4
   45a40:	98c0082e 	bgeu	r19,r3,45a64 <quorem+0x208>
   45a44:	b0bfff17 	ldw	r2,-4(r22)
   45a48:	10000326 	beq	r2,zero,45a58 <quorem+0x1fc>
   45a4c:	00000506 	br	45a64 <quorem+0x208>
   45a50:	18800017 	ldw	r2,0(r3)
   45a54:	1000031e 	bne	r2,zero,45a64 <quorem+0x208>
   45a58:	18ffff04 	addi	r3,r3,-4
   45a5c:	8c7fffc4 	addi	r17,r17,-1
   45a60:	98fffb36 	bltu	r19,r3,45a50 <quorem+0x1f4>
   45a64:	bc400415 	stw	r17,16(r23)
   45a68:	003f9a06 	br	458d4 <quorem+0x78>
   45a6c:	0005883a 	mov	r2,zero
   45a70:	003fc806 	br	45994 <quorem+0x138>

00045a74 <_dtoa_r>:
   45a74:	22001017 	ldw	r8,64(r4)
   45a78:	deffda04 	addi	sp,sp,-152
   45a7c:	dd402115 	stw	r21,132(sp)
   45a80:	dd002015 	stw	r20,128(sp)
   45a84:	dc801e15 	stw	r18,120(sp)
   45a88:	dc401d15 	stw	r17,116(sp)
   45a8c:	dfc02515 	stw	ra,148(sp)
   45a90:	df002415 	stw	fp,144(sp)
   45a94:	ddc02315 	stw	r23,140(sp)
   45a98:	dd802215 	stw	r22,136(sp)
   45a9c:	dcc01f15 	stw	r19,124(sp)
   45aa0:	dc001c15 	stw	r16,112(sp)
   45aa4:	d9001615 	stw	r4,88(sp)
   45aa8:	3023883a 	mov	r17,r6
   45aac:	2829883a 	mov	r20,r5
   45ab0:	d9c01715 	stw	r7,92(sp)
   45ab4:	dc802817 	ldw	r18,160(sp)
   45ab8:	302b883a 	mov	r21,r6
   45abc:	40000a26 	beq	r8,zero,45ae8 <_dtoa_r+0x74>
   45ac0:	20801117 	ldw	r2,68(r4)
   45ac4:	400b883a 	mov	r5,r8
   45ac8:	40800115 	stw	r2,4(r8)
   45acc:	20c01117 	ldw	r3,68(r4)
   45ad0:	00800044 	movi	r2,1
   45ad4:	10c4983a 	sll	r2,r2,r3
   45ad8:	40800215 	stw	r2,8(r8)
   45adc:	0048c080 	call	48c08 <_Bfree>
   45ae0:	d8c01617 	ldw	r3,88(sp)
   45ae4:	18001015 	stw	zero,64(r3)
   45ae8:	8800a316 	blt	r17,zero,45d78 <_dtoa_r+0x304>
   45aec:	90000015 	stw	zero,0(r18)
   45af0:	a8dffc2c 	andhi	r3,r21,32752
   45af4:	009ffc34 	movhi	r2,32752
   45af8:	18809126 	beq	r3,r2,45d40 <_dtoa_r+0x2cc>
   45afc:	000d883a 	mov	r6,zero
   45b00:	000f883a 	mov	r7,zero
   45b04:	a009883a 	mov	r4,r20
   45b08:	a80b883a 	mov	r5,r21
   45b0c:	dd001215 	stw	r20,72(sp)
   45b10:	dd401315 	stw	r21,76(sp)
   45b14:	004c0a00 	call	4c0a0 <__nedf2>
   45b18:	1000171e 	bne	r2,zero,45b78 <_dtoa_r+0x104>
   45b1c:	d9802717 	ldw	r6,156(sp)
   45b20:	00800044 	movi	r2,1
   45b24:	30800015 	stw	r2,0(r6)
   45b28:	d8802917 	ldw	r2,164(sp)
   45b2c:	10029b26 	beq	r2,zero,4659c <_dtoa_r+0xb28>
   45b30:	d9002917 	ldw	r4,164(sp)
   45b34:	00800174 	movhi	r2,5
   45b38:	10bf9944 	addi	r2,r2,-411
   45b3c:	10ffffc4 	addi	r3,r2,-1
   45b40:	20800015 	stw	r2,0(r4)
   45b44:	1805883a 	mov	r2,r3
   45b48:	dfc02517 	ldw	ra,148(sp)
   45b4c:	df002417 	ldw	fp,144(sp)
   45b50:	ddc02317 	ldw	r23,140(sp)
   45b54:	dd802217 	ldw	r22,136(sp)
   45b58:	dd402117 	ldw	r21,132(sp)
   45b5c:	dd002017 	ldw	r20,128(sp)
   45b60:	dcc01f17 	ldw	r19,124(sp)
   45b64:	dc801e17 	ldw	r18,120(sp)
   45b68:	dc401d17 	ldw	r17,116(sp)
   45b6c:	dc001c17 	ldw	r16,112(sp)
   45b70:	dec02604 	addi	sp,sp,152
   45b74:	f800283a 	ret
   45b78:	d9001617 	ldw	r4,88(sp)
   45b7c:	d9401217 	ldw	r5,72(sp)
   45b80:	d8800104 	addi	r2,sp,4
   45b84:	a80d883a 	mov	r6,r21
   45b88:	d9c00204 	addi	r7,sp,8
   45b8c:	d8800015 	stw	r2,0(sp)
   45b90:	00492440 	call	49244 <__d2b>
   45b94:	d8800715 	stw	r2,28(sp)
   45b98:	a804d53a 	srli	r2,r21,20
   45b9c:	1101ffcc 	andi	r4,r2,2047
   45ba0:	20008626 	beq	r4,zero,45dbc <_dtoa_r+0x348>
   45ba4:	d8c01217 	ldw	r3,72(sp)
   45ba8:	00800434 	movhi	r2,16
   45bac:	10bfffc4 	addi	r2,r2,-1
   45bb0:	ddc00117 	ldw	r23,4(sp)
   45bb4:	a884703a 	and	r2,r21,r2
   45bb8:	1811883a 	mov	r8,r3
   45bbc:	124ffc34 	orhi	r9,r2,16368
   45bc0:	25bf0044 	addi	r22,r4,-1023
   45bc4:	d8000815 	stw	zero,32(sp)
   45bc8:	0005883a 	mov	r2,zero
   45bcc:	00cffe34 	movhi	r3,16376
   45bd0:	480b883a 	mov	r5,r9
   45bd4:	4009883a 	mov	r4,r8
   45bd8:	180f883a 	mov	r7,r3
   45bdc:	100d883a 	mov	r6,r2
   45be0:	004b9080 	call	4b908 <__subdf3>
   45be4:	0218dbf4 	movhi	r8,25455
   45be8:	4210d844 	addi	r8,r8,17249
   45bec:	024ff4f4 	movhi	r9,16339
   45bf0:	4a61e9c4 	addi	r9,r9,-30809
   45bf4:	480f883a 	mov	r7,r9
   45bf8:	400d883a 	mov	r6,r8
   45bfc:	180b883a 	mov	r5,r3
   45c00:	1009883a 	mov	r4,r2
   45c04:	004b9fc0 	call	4b9fc <__muldf3>
   45c08:	0222d874 	movhi	r8,35681
   45c0c:	42322cc4 	addi	r8,r8,-14157
   45c10:	024ff1f4 	movhi	r9,16327
   45c14:	4a628a04 	addi	r9,r9,-30168
   45c18:	480f883a 	mov	r7,r9
   45c1c:	400d883a 	mov	r6,r8
   45c20:	180b883a 	mov	r5,r3
   45c24:	1009883a 	mov	r4,r2
   45c28:	004b9880 	call	4b988 <__adddf3>
   45c2c:	b009883a 	mov	r4,r22
   45c30:	1021883a 	mov	r16,r2
   45c34:	1823883a 	mov	r17,r3
   45c38:	004c2c00 	call	4c2c0 <__floatsidf>
   45c3c:	021427f4 	movhi	r8,20639
   45c40:	421e7ec4 	addi	r8,r8,31227
   45c44:	024ff4f4 	movhi	r9,16339
   45c48:	4a5104c4 	addi	r9,r9,17427
   45c4c:	480f883a 	mov	r7,r9
   45c50:	400d883a 	mov	r6,r8
   45c54:	180b883a 	mov	r5,r3
   45c58:	1009883a 	mov	r4,r2
   45c5c:	004b9fc0 	call	4b9fc <__muldf3>
   45c60:	180f883a 	mov	r7,r3
   45c64:	880b883a 	mov	r5,r17
   45c68:	100d883a 	mov	r6,r2
   45c6c:	8009883a 	mov	r4,r16
   45c70:	004b9880 	call	4b988 <__adddf3>
   45c74:	1009883a 	mov	r4,r2
   45c78:	180b883a 	mov	r5,r3
   45c7c:	1021883a 	mov	r16,r2
   45c80:	1823883a 	mov	r17,r3
   45c84:	004c3b80 	call	4c3b8 <__fixdfsi>
   45c88:	000d883a 	mov	r6,zero
   45c8c:	000f883a 	mov	r7,zero
   45c90:	8009883a 	mov	r4,r16
   45c94:	880b883a 	mov	r5,r17
   45c98:	d8800d15 	stw	r2,52(sp)
   45c9c:	004c2380 	call	4c238 <__ltdf2>
   45ca0:	10031716 	blt	r2,zero,46900 <_dtoa_r+0xe8c>
   45ca4:	d8c00d17 	ldw	r3,52(sp)
   45ca8:	00800584 	movi	r2,22
   45cac:	10c1482e 	bgeu	r2,r3,461d0 <_dtoa_r+0x75c>
   45cb0:	01000044 	movi	r4,1
   45cb4:	d9000c15 	stw	r4,48(sp)
   45cb8:	bd85c83a 	sub	r2,r23,r22
   45cbc:	11bfffc4 	addi	r6,r2,-1
   45cc0:	30030b16 	blt	r6,zero,468f0 <_dtoa_r+0xe7c>
   45cc4:	d9800a15 	stw	r6,40(sp)
   45cc8:	d8001115 	stw	zero,68(sp)
   45ccc:	d8c00d17 	ldw	r3,52(sp)
   45cd0:	1802ff16 	blt	r3,zero,468d0 <_dtoa_r+0xe5c>
   45cd4:	d9000a17 	ldw	r4,40(sp)
   45cd8:	d8c00915 	stw	r3,36(sp)
   45cdc:	d8001015 	stw	zero,64(sp)
   45ce0:	20c9883a 	add	r4,r4,r3
   45ce4:	d9000a15 	stw	r4,40(sp)
   45ce8:	d9001717 	ldw	r4,92(sp)
   45cec:	00800244 	movi	r2,9
   45cf0:	11004636 	bltu	r2,r4,45e0c <_dtoa_r+0x398>
   45cf4:	00800144 	movi	r2,5
   45cf8:	11020416 	blt	r2,r4,4650c <_dtoa_r+0xa98>
   45cfc:	04400044 	movi	r17,1
   45d00:	d8c01717 	ldw	r3,92(sp)
   45d04:	00800144 	movi	r2,5
   45d08:	10c1ed36 	bltu	r2,r3,464c0 <_dtoa_r+0xa4c>
   45d0c:	18c5883a 	add	r2,r3,r3
   45d10:	1085883a 	add	r2,r2,r2
   45d14:	00c00134 	movhi	r3,4
   45d18:	18d74a04 	addi	r3,r3,23848
   45d1c:	10c5883a 	add	r2,r2,r3
   45d20:	11000017 	ldw	r4,0(r2)
   45d24:	2000683a 	jmp	r4
   45d28:	00045e14 	movui	zero,4472
   45d2c:	00045e14 	movui	zero,4472
   45d30:	00046814 	movui	zero,4512
   45d34:	000467ec 	andhi	zero,zero,4511
   45d38:	00046830 	cmpltui	zero,zero,4512
   45d3c:	0004683c 	xorhi	zero,zero,4512
   45d40:	d9002717 	ldw	r4,156(sp)
   45d44:	0089c3c4 	movi	r2,9999
   45d48:	20800015 	stw	r2,0(r4)
   45d4c:	a0001026 	beq	r20,zero,45d90 <_dtoa_r+0x31c>
   45d50:	00c00174 	movhi	r3,5
   45d54:	18ffa504 	addi	r3,r3,-364
   45d58:	d9802917 	ldw	r6,164(sp)
   45d5c:	303f7926 	beq	r6,zero,45b44 <_dtoa_r+0xd0>
   45d60:	188000c7 	ldb	r2,3(r3)
   45d64:	190000c4 	addi	r4,r3,3
   45d68:	1000101e 	bne	r2,zero,45dac <_dtoa_r+0x338>
   45d6c:	d8802917 	ldw	r2,164(sp)
   45d70:	11000015 	stw	r4,0(r2)
   45d74:	003f7306 	br	45b44 <_dtoa_r+0xd0>
   45d78:	00a00034 	movhi	r2,32768
   45d7c:	10bfffc4 	addi	r2,r2,-1
   45d80:	00c00044 	movi	r3,1
   45d84:	88aa703a 	and	r21,r17,r2
   45d88:	90c00015 	stw	r3,0(r18)
   45d8c:	003f5806 	br	45af0 <_dtoa_r+0x7c>
   45d90:	00800434 	movhi	r2,16
   45d94:	10bfffc4 	addi	r2,r2,-1
   45d98:	a884703a 	and	r2,r21,r2
   45d9c:	103fec1e 	bne	r2,zero,45d50 <_dtoa_r+0x2dc>
   45da0:	00c00174 	movhi	r3,5
   45da4:	18ffa204 	addi	r3,r3,-376
   45da8:	003feb06 	br	45d58 <_dtoa_r+0x2e4>
   45dac:	d8802917 	ldw	r2,164(sp)
   45db0:	19000204 	addi	r4,r3,8
   45db4:	11000015 	stw	r4,0(r2)
   45db8:	003f6206 	br	45b44 <_dtoa_r+0xd0>
   45dbc:	ddc00117 	ldw	r23,4(sp)
   45dc0:	d8800217 	ldw	r2,8(sp)
   45dc4:	01000804 	movi	r4,32
   45dc8:	b8c10c84 	addi	r3,r23,1074
   45dcc:	18a3883a 	add	r17,r3,r2
   45dd0:	2441b80e 	bge	r4,r17,464b4 <_dtoa_r+0xa40>
   45dd4:	00c01004 	movi	r3,64
   45dd8:	1c47c83a 	sub	r3,r3,r17
   45ddc:	88bff804 	addi	r2,r17,-32
   45de0:	a8c6983a 	sll	r3,r21,r3
   45de4:	a084d83a 	srl	r2,r20,r2
   45de8:	1888b03a 	or	r4,r3,r2
   45dec:	004c4900 	call	4c490 <__floatunsidf>
   45df0:	1011883a 	mov	r8,r2
   45df4:	00bf8434 	movhi	r2,65040
   45df8:	01000044 	movi	r4,1
   45dfc:	10d3883a 	add	r9,r2,r3
   45e00:	8dbef344 	addi	r22,r17,-1075
   45e04:	d9000815 	stw	r4,32(sp)
   45e08:	003f6f06 	br	45bc8 <_dtoa_r+0x154>
   45e0c:	d8001715 	stw	zero,92(sp)
   45e10:	04400044 	movi	r17,1
   45e14:	00bfffc4 	movi	r2,-1
   45e18:	00c00044 	movi	r3,1
   45e1c:	d8800e15 	stw	r2,56(sp)
   45e20:	d8002615 	stw	zero,152(sp)
   45e24:	d8800f15 	stw	r2,60(sp)
   45e28:	d8c00b15 	stw	r3,44(sp)
   45e2c:	1021883a 	mov	r16,r2
   45e30:	d8801617 	ldw	r2,88(sp)
   45e34:	10001115 	stw	zero,68(r2)
   45e38:	d8801617 	ldw	r2,88(sp)
   45e3c:	11401117 	ldw	r5,68(r2)
   45e40:	1009883a 	mov	r4,r2
   45e44:	00491880 	call	49188 <_Balloc>
   45e48:	d8c01617 	ldw	r3,88(sp)
   45e4c:	d8800515 	stw	r2,20(sp)
   45e50:	18801015 	stw	r2,64(r3)
   45e54:	00800384 	movi	r2,14
   45e58:	14006836 	bltu	r2,r16,45ffc <_dtoa_r+0x588>
   45e5c:	8805003a 	cmpeq	r2,r17,zero
   45e60:	1000661e 	bne	r2,zero,45ffc <_dtoa_r+0x588>
   45e64:	d9000d17 	ldw	r4,52(sp)
   45e68:	0102300e 	bge	zero,r4,4672c <_dtoa_r+0xcb8>
   45e6c:	208003cc 	andi	r2,r4,15
   45e70:	100490fa 	slli	r2,r2,3
   45e74:	2025d13a 	srai	r18,r4,4
   45e78:	00c00174 	movhi	r3,5
   45e7c:	18ffb704 	addi	r3,r3,-292
   45e80:	10c5883a 	add	r2,r2,r3
   45e84:	90c0040c 	andi	r3,r18,16
   45e88:	14000017 	ldw	r16,0(r2)
   45e8c:	14400117 	ldw	r17,4(r2)
   45e90:	18036a1e 	bne	r3,zero,46c3c <_dtoa_r+0x11c8>
   45e94:	05800084 	movi	r22,2
   45e98:	90001026 	beq	r18,zero,45edc <_dtoa_r+0x468>
   45e9c:	04c00174 	movhi	r19,5
   45ea0:	9cffe904 	addi	r19,r19,-92
   45ea4:	9080004c 	andi	r2,r18,1
   45ea8:	1005003a 	cmpeq	r2,r2,zero
   45eac:	1000081e 	bne	r2,zero,45ed0 <_dtoa_r+0x45c>
   45eb0:	99800017 	ldw	r6,0(r19)
   45eb4:	99c00117 	ldw	r7,4(r19)
   45eb8:	880b883a 	mov	r5,r17
   45ebc:	8009883a 	mov	r4,r16
   45ec0:	004b9fc0 	call	4b9fc <__muldf3>
   45ec4:	1021883a 	mov	r16,r2
   45ec8:	b5800044 	addi	r22,r22,1
   45ecc:	1823883a 	mov	r17,r3
   45ed0:	9025d07a 	srai	r18,r18,1
   45ed4:	9cc00204 	addi	r19,r19,8
   45ed8:	903ff21e 	bne	r18,zero,45ea4 <_dtoa_r+0x430>
   45edc:	a80b883a 	mov	r5,r21
   45ee0:	a009883a 	mov	r4,r20
   45ee4:	880f883a 	mov	r7,r17
   45ee8:	800d883a 	mov	r6,r16
   45eec:	004bdc00 	call	4bdc0 <__divdf3>
   45ef0:	1029883a 	mov	r20,r2
   45ef4:	182b883a 	mov	r21,r3
   45ef8:	d8c00c17 	ldw	r3,48(sp)
   45efc:	1805003a 	cmpeq	r2,r3,zero
   45f00:	1000081e 	bne	r2,zero,45f24 <_dtoa_r+0x4b0>
   45f04:	0005883a 	mov	r2,zero
   45f08:	00cffc34 	movhi	r3,16368
   45f0c:	180f883a 	mov	r7,r3
   45f10:	a009883a 	mov	r4,r20
   45f14:	a80b883a 	mov	r5,r21
   45f18:	100d883a 	mov	r6,r2
   45f1c:	004c2380 	call	4c238 <__ltdf2>
   45f20:	1003fe16 	blt	r2,zero,46f1c <_dtoa_r+0x14a8>
   45f24:	b009883a 	mov	r4,r22
   45f28:	004c2c00 	call	4c2c0 <__floatsidf>
   45f2c:	180b883a 	mov	r5,r3
   45f30:	1009883a 	mov	r4,r2
   45f34:	a00d883a 	mov	r6,r20
   45f38:	a80f883a 	mov	r7,r21
   45f3c:	004b9fc0 	call	4b9fc <__muldf3>
   45f40:	0011883a 	mov	r8,zero
   45f44:	02500734 	movhi	r9,16412
   45f48:	1009883a 	mov	r4,r2
   45f4c:	180b883a 	mov	r5,r3
   45f50:	480f883a 	mov	r7,r9
   45f54:	400d883a 	mov	r6,r8
   45f58:	004b9880 	call	4b988 <__adddf3>
   45f5c:	d9000f17 	ldw	r4,60(sp)
   45f60:	102d883a 	mov	r22,r2
   45f64:	00bf3034 	movhi	r2,64704
   45f68:	18b9883a 	add	fp,r3,r2
   45f6c:	e02f883a 	mov	r23,fp
   45f70:	20028f1e 	bne	r4,zero,469b0 <_dtoa_r+0xf3c>
   45f74:	0005883a 	mov	r2,zero
   45f78:	00d00534 	movhi	r3,16404
   45f7c:	a009883a 	mov	r4,r20
   45f80:	a80b883a 	mov	r5,r21
   45f84:	180f883a 	mov	r7,r3
   45f88:	100d883a 	mov	r6,r2
   45f8c:	004b9080 	call	4b908 <__subdf3>
   45f90:	1009883a 	mov	r4,r2
   45f94:	e00f883a 	mov	r7,fp
   45f98:	180b883a 	mov	r5,r3
   45f9c:	b00d883a 	mov	r6,r22
   45fa0:	1025883a 	mov	r18,r2
   45fa4:	1827883a 	mov	r19,r3
   45fa8:	004c1280 	call	4c128 <__gtdf2>
   45fac:	00834f16 	blt	zero,r2,46cec <_dtoa_r+0x1278>
   45fb0:	e0e0003c 	xorhi	r3,fp,32768
   45fb4:	9009883a 	mov	r4,r18
   45fb8:	980b883a 	mov	r5,r19
   45fbc:	180f883a 	mov	r7,r3
   45fc0:	b00d883a 	mov	r6,r22
   45fc4:	004c2380 	call	4c238 <__ltdf2>
   45fc8:	1000080e 	bge	r2,zero,45fec <_dtoa_r+0x578>
   45fcc:	0027883a 	mov	r19,zero
   45fd0:	0025883a 	mov	r18,zero
   45fd4:	d8802617 	ldw	r2,152(sp)
   45fd8:	df000517 	ldw	fp,20(sp)
   45fdc:	d8000615 	stw	zero,24(sp)
   45fe0:	0084303a 	nor	r2,zero,r2
   45fe4:	d8800d15 	stw	r2,52(sp)
   45fe8:	00019b06 	br	46658 <_dtoa_r+0xbe4>
   45fec:	d9801217 	ldw	r6,72(sp)
   45ff0:	d8801317 	ldw	r2,76(sp)
   45ff4:	3029883a 	mov	r20,r6
   45ff8:	102b883a 	mov	r21,r2
   45ffc:	d8c00217 	ldw	r3,8(sp)
   46000:	18008516 	blt	r3,zero,46218 <_dtoa_r+0x7a4>
   46004:	d9000d17 	ldw	r4,52(sp)
   46008:	00800384 	movi	r2,14
   4600c:	11008216 	blt	r2,r4,46218 <_dtoa_r+0x7a4>
   46010:	200490fa 	slli	r2,r4,3
   46014:	d9802617 	ldw	r6,152(sp)
   46018:	00c00174 	movhi	r3,5
   4601c:	18ffb704 	addi	r3,r3,-292
   46020:	10c5883a 	add	r2,r2,r3
   46024:	14800017 	ldw	r18,0(r2)
   46028:	14c00117 	ldw	r19,4(r2)
   4602c:	30031e16 	blt	r6,zero,46ca8 <_dtoa_r+0x1234>
   46030:	d9000517 	ldw	r4,20(sp)
   46034:	d8c00f17 	ldw	r3,60(sp)
   46038:	a823883a 	mov	r17,r21
   4603c:	a021883a 	mov	r16,r20
   46040:	192b883a 	add	r21,r3,r4
   46044:	2039883a 	mov	fp,r4
   46048:	00000f06 	br	46088 <_dtoa_r+0x614>
   4604c:	0005883a 	mov	r2,zero
   46050:	00d00934 	movhi	r3,16420
   46054:	5009883a 	mov	r4,r10
   46058:	580b883a 	mov	r5,r11
   4605c:	180f883a 	mov	r7,r3
   46060:	100d883a 	mov	r6,r2
   46064:	004b9fc0 	call	4b9fc <__muldf3>
   46068:	180b883a 	mov	r5,r3
   4606c:	000d883a 	mov	r6,zero
   46070:	000f883a 	mov	r7,zero
   46074:	1009883a 	mov	r4,r2
   46078:	1021883a 	mov	r16,r2
   4607c:	1823883a 	mov	r17,r3
   46080:	004c0a00 	call	4c0a0 <__nedf2>
   46084:	10004526 	beq	r2,zero,4619c <_dtoa_r+0x728>
   46088:	900d883a 	mov	r6,r18
   4608c:	980f883a 	mov	r7,r19
   46090:	8009883a 	mov	r4,r16
   46094:	880b883a 	mov	r5,r17
   46098:	004bdc00 	call	4bdc0 <__divdf3>
   4609c:	180b883a 	mov	r5,r3
   460a0:	1009883a 	mov	r4,r2
   460a4:	004c3b80 	call	4c3b8 <__fixdfsi>
   460a8:	1009883a 	mov	r4,r2
   460ac:	1029883a 	mov	r20,r2
   460b0:	004c2c00 	call	4c2c0 <__floatsidf>
   460b4:	180f883a 	mov	r7,r3
   460b8:	9009883a 	mov	r4,r18
   460bc:	980b883a 	mov	r5,r19
   460c0:	100d883a 	mov	r6,r2
   460c4:	004b9fc0 	call	4b9fc <__muldf3>
   460c8:	180f883a 	mov	r7,r3
   460cc:	880b883a 	mov	r5,r17
   460d0:	8009883a 	mov	r4,r16
   460d4:	100d883a 	mov	r6,r2
   460d8:	004b9080 	call	4b908 <__subdf3>
   460dc:	1015883a 	mov	r10,r2
   460e0:	a0800c04 	addi	r2,r20,48
   460e4:	e0800005 	stb	r2,0(fp)
   460e8:	e7000044 	addi	fp,fp,1
   460ec:	1817883a 	mov	r11,r3
   460f0:	e57fd61e 	bne	fp,r21,4604c <_dtoa_r+0x5d8>
   460f4:	500d883a 	mov	r6,r10
   460f8:	180f883a 	mov	r7,r3
   460fc:	5009883a 	mov	r4,r10
   46100:	180b883a 	mov	r5,r3
   46104:	004b9880 	call	4b988 <__adddf3>
   46108:	100d883a 	mov	r6,r2
   4610c:	9009883a 	mov	r4,r18
   46110:	980b883a 	mov	r5,r19
   46114:	180f883a 	mov	r7,r3
   46118:	1021883a 	mov	r16,r2
   4611c:	1823883a 	mov	r17,r3
   46120:	004c2380 	call	4c238 <__ltdf2>
   46124:	10000816 	blt	r2,zero,46148 <_dtoa_r+0x6d4>
   46128:	980b883a 	mov	r5,r19
   4612c:	800d883a 	mov	r6,r16
   46130:	880f883a 	mov	r7,r17
   46134:	9009883a 	mov	r4,r18
   46138:	004c0180 	call	4c018 <__eqdf2>
   4613c:	1000171e 	bne	r2,zero,4619c <_dtoa_r+0x728>
   46140:	a080004c 	andi	r2,r20,1
   46144:	10001526 	beq	r2,zero,4619c <_dtoa_r+0x728>
   46148:	d8800d17 	ldw	r2,52(sp)
   4614c:	d8800415 	stw	r2,16(sp)
   46150:	e009883a 	mov	r4,fp
   46154:	213fffc4 	addi	r4,r4,-1
   46158:	20c00007 	ldb	r3,0(r4)
   4615c:	00800e44 	movi	r2,57
   46160:	1880081e 	bne	r3,r2,46184 <_dtoa_r+0x710>
   46164:	d8800517 	ldw	r2,20(sp)
   46168:	113ffa1e 	bne	r2,r4,46154 <_dtoa_r+0x6e0>
   4616c:	d8c00417 	ldw	r3,16(sp)
   46170:	d9800517 	ldw	r6,20(sp)
   46174:	00800c04 	movi	r2,48
   46178:	18c00044 	addi	r3,r3,1
   4617c:	d8c00415 	stw	r3,16(sp)
   46180:	30800005 	stb	r2,0(r6)
   46184:	20800003 	ldbu	r2,0(r4)
   46188:	d8c00417 	ldw	r3,16(sp)
   4618c:	27000044 	addi	fp,r4,1
   46190:	10800044 	addi	r2,r2,1
   46194:	d8c00d15 	stw	r3,52(sp)
   46198:	20800005 	stb	r2,0(r4)
   4619c:	d9001617 	ldw	r4,88(sp)
   461a0:	d9400717 	ldw	r5,28(sp)
   461a4:	0048c080 	call	48c08 <_Bfree>
   461a8:	e0000005 	stb	zero,0(fp)
   461ac:	d9800d17 	ldw	r6,52(sp)
   461b0:	d8c02717 	ldw	r3,156(sp)
   461b4:	d9002917 	ldw	r4,164(sp)
   461b8:	30800044 	addi	r2,r6,1
   461bc:	18800015 	stw	r2,0(r3)
   461c0:	20029c26 	beq	r4,zero,46c34 <_dtoa_r+0x11c0>
   461c4:	d8c00517 	ldw	r3,20(sp)
   461c8:	27000015 	stw	fp,0(r4)
   461cc:	003e5d06 	br	45b44 <_dtoa_r+0xd0>
   461d0:	d9800d17 	ldw	r6,52(sp)
   461d4:	00c00174 	movhi	r3,5
   461d8:	18ffb704 	addi	r3,r3,-292
   461dc:	d9001217 	ldw	r4,72(sp)
   461e0:	300490fa 	slli	r2,r6,3
   461e4:	d9401317 	ldw	r5,76(sp)
   461e8:	10c5883a 	add	r2,r2,r3
   461ec:	12000017 	ldw	r8,0(r2)
   461f0:	12400117 	ldw	r9,4(r2)
   461f4:	400d883a 	mov	r6,r8
   461f8:	480f883a 	mov	r7,r9
   461fc:	004c2380 	call	4c238 <__ltdf2>
   46200:	1000030e 	bge	r2,zero,46210 <_dtoa_r+0x79c>
   46204:	d8800d17 	ldw	r2,52(sp)
   46208:	10bfffc4 	addi	r2,r2,-1
   4620c:	d8800d15 	stw	r2,52(sp)
   46210:	d8000c15 	stw	zero,48(sp)
   46214:	003ea806 	br	45cb8 <_dtoa_r+0x244>
   46218:	d9000b17 	ldw	r4,44(sp)
   4621c:	202cc03a 	cmpne	r22,r4,zero
   46220:	b000c71e 	bne	r22,zero,46540 <_dtoa_r+0xacc>
   46224:	dc001117 	ldw	r16,68(sp)
   46228:	dc801017 	ldw	r18,64(sp)
   4622c:	0027883a 	mov	r19,zero
   46230:	04000b0e 	bge	zero,r16,46260 <_dtoa_r+0x7ec>
   46234:	d8c00a17 	ldw	r3,40(sp)
   46238:	00c0090e 	bge	zero,r3,46260 <_dtoa_r+0x7ec>
   4623c:	8005883a 	mov	r2,r16
   46240:	1c011316 	blt	r3,r16,46690 <_dtoa_r+0xc1c>
   46244:	d9000a17 	ldw	r4,40(sp)
   46248:	d9801117 	ldw	r6,68(sp)
   4624c:	80a1c83a 	sub	r16,r16,r2
   46250:	2089c83a 	sub	r4,r4,r2
   46254:	308dc83a 	sub	r6,r6,r2
   46258:	d9000a15 	stw	r4,40(sp)
   4625c:	d9801115 	stw	r6,68(sp)
   46260:	d8801017 	ldw	r2,64(sp)
   46264:	0080150e 	bge	zero,r2,462bc <_dtoa_r+0x848>
   46268:	d8c00b17 	ldw	r3,44(sp)
   4626c:	1805003a 	cmpeq	r2,r3,zero
   46270:	1001c91e 	bne	r2,zero,46998 <_dtoa_r+0xf24>
   46274:	04800e0e 	bge	zero,r18,462b0 <_dtoa_r+0x83c>
   46278:	d9001617 	ldw	r4,88(sp)
   4627c:	980b883a 	mov	r5,r19
   46280:	900d883a 	mov	r6,r18
   46284:	00499bc0 	call	499bc <__pow5mult>
   46288:	d9001617 	ldw	r4,88(sp)
   4628c:	d9800717 	ldw	r6,28(sp)
   46290:	100b883a 	mov	r5,r2
   46294:	1027883a 	mov	r19,r2
   46298:	00496980 	call	49698 <__multiply>
   4629c:	d9001617 	ldw	r4,88(sp)
   462a0:	d9400717 	ldw	r5,28(sp)
   462a4:	1023883a 	mov	r17,r2
   462a8:	0048c080 	call	48c08 <_Bfree>
   462ac:	dc400715 	stw	r17,28(sp)
   462b0:	d9001017 	ldw	r4,64(sp)
   462b4:	248dc83a 	sub	r6,r4,r18
   462b8:	30010e1e 	bne	r6,zero,466f4 <_dtoa_r+0xc80>
   462bc:	d9001617 	ldw	r4,88(sp)
   462c0:	04400044 	movi	r17,1
   462c4:	880b883a 	mov	r5,r17
   462c8:	00498800 	call	49880 <__i2b>
   462cc:	d9800917 	ldw	r6,36(sp)
   462d0:	1025883a 	mov	r18,r2
   462d4:	0180040e 	bge	zero,r6,462e8 <_dtoa_r+0x874>
   462d8:	d9001617 	ldw	r4,88(sp)
   462dc:	100b883a 	mov	r5,r2
   462e0:	00499bc0 	call	499bc <__pow5mult>
   462e4:	1025883a 	mov	r18,r2
   462e8:	d8801717 	ldw	r2,92(sp)
   462ec:	8880f30e 	bge	r17,r2,466bc <_dtoa_r+0xc48>
   462f0:	0023883a 	mov	r17,zero
   462f4:	d9800917 	ldw	r6,36(sp)
   462f8:	30019e1e 	bne	r6,zero,46974 <_dtoa_r+0xf00>
   462fc:	00c00044 	movi	r3,1
   46300:	d9000a17 	ldw	r4,40(sp)
   46304:	20c5883a 	add	r2,r4,r3
   46308:	10c007cc 	andi	r3,r2,31
   4630c:	1800841e 	bne	r3,zero,46520 <_dtoa_r+0xaac>
   46310:	00800704 	movi	r2,28
   46314:	d9000a17 	ldw	r4,40(sp)
   46318:	d9801117 	ldw	r6,68(sp)
   4631c:	80a1883a 	add	r16,r16,r2
   46320:	2089883a 	add	r4,r4,r2
   46324:	308d883a 	add	r6,r6,r2
   46328:	d9000a15 	stw	r4,40(sp)
   4632c:	d9801115 	stw	r6,68(sp)
   46330:	d8801117 	ldw	r2,68(sp)
   46334:	0080050e 	bge	zero,r2,4634c <_dtoa_r+0x8d8>
   46338:	d9400717 	ldw	r5,28(sp)
   4633c:	d9001617 	ldw	r4,88(sp)
   46340:	100d883a 	mov	r6,r2
   46344:	004954c0 	call	4954c <__lshift>
   46348:	d8800715 	stw	r2,28(sp)
   4634c:	d8c00a17 	ldw	r3,40(sp)
   46350:	00c0050e 	bge	zero,r3,46368 <_dtoa_r+0x8f4>
   46354:	d9001617 	ldw	r4,88(sp)
   46358:	900b883a 	mov	r5,r18
   4635c:	180d883a 	mov	r6,r3
   46360:	004954c0 	call	4954c <__lshift>
   46364:	1025883a 	mov	r18,r2
   46368:	d9000c17 	ldw	r4,48(sp)
   4636c:	2005003a 	cmpeq	r2,r4,zero
   46370:	10016f26 	beq	r2,zero,46930 <_dtoa_r+0xebc>
   46374:	d9000f17 	ldw	r4,60(sp)
   46378:	0102170e 	bge	zero,r4,46bd8 <_dtoa_r+0x1164>
   4637c:	d9800b17 	ldw	r6,44(sp)
   46380:	3005003a 	cmpeq	r2,r6,zero
   46384:	1000881e 	bne	r2,zero,465a8 <_dtoa_r+0xb34>
   46388:	0400050e 	bge	zero,r16,463a0 <_dtoa_r+0x92c>
   4638c:	d9001617 	ldw	r4,88(sp)
   46390:	980b883a 	mov	r5,r19
   46394:	800d883a 	mov	r6,r16
   46398:	004954c0 	call	4954c <__lshift>
   4639c:	1027883a 	mov	r19,r2
   463a0:	8804c03a 	cmpne	r2,r17,zero
   463a4:	1002541e 	bne	r2,zero,46cf8 <_dtoa_r+0x1284>
   463a8:	980b883a 	mov	r5,r19
   463ac:	dd800517 	ldw	r22,20(sp)
   463b0:	dcc00615 	stw	r19,24(sp)
   463b4:	a700004c 	andi	fp,r20,1
   463b8:	2827883a 	mov	r19,r5
   463bc:	d9000717 	ldw	r4,28(sp)
   463c0:	900b883a 	mov	r5,r18
   463c4:	004585c0 	call	4585c <quorem>
   463c8:	d9000717 	ldw	r4,28(sp)
   463cc:	d9400617 	ldw	r5,24(sp)
   463d0:	1023883a 	mov	r17,r2
   463d4:	8dc00c04 	addi	r23,r17,48
   463d8:	0048d640 	call	48d64 <__mcmp>
   463dc:	d9001617 	ldw	r4,88(sp)
   463e0:	900b883a 	mov	r5,r18
   463e4:	980d883a 	mov	r6,r19
   463e8:	1029883a 	mov	r20,r2
   463ec:	00493c00 	call	493c0 <__mdiff>
   463f0:	102b883a 	mov	r21,r2
   463f4:	10800317 	ldw	r2,12(r2)
   463f8:	1001281e 	bne	r2,zero,4689c <_dtoa_r+0xe28>
   463fc:	d9000717 	ldw	r4,28(sp)
   46400:	a80b883a 	mov	r5,r21
   46404:	0048d640 	call	48d64 <__mcmp>
   46408:	d9001617 	ldw	r4,88(sp)
   4640c:	1021883a 	mov	r16,r2
   46410:	a80b883a 	mov	r5,r21
   46414:	0048c080 	call	48c08 <_Bfree>
   46418:	8000041e 	bne	r16,zero,4642c <_dtoa_r+0x9b8>
   4641c:	d8801717 	ldw	r2,92(sp)
   46420:	1000021e 	bne	r2,zero,4642c <_dtoa_r+0x9b8>
   46424:	e004c03a 	cmpne	r2,fp,zero
   46428:	10011726 	beq	r2,zero,46888 <_dtoa_r+0xe14>
   4642c:	a0010616 	blt	r20,zero,46848 <_dtoa_r+0xdd4>
   46430:	a000041e 	bne	r20,zero,46444 <_dtoa_r+0x9d0>
   46434:	d8c01717 	ldw	r3,92(sp)
   46438:	1800021e 	bne	r3,zero,46444 <_dtoa_r+0x9d0>
   4643c:	e004c03a 	cmpne	r2,fp,zero
   46440:	10010126 	beq	r2,zero,46848 <_dtoa_r+0xdd4>
   46444:	04023d16 	blt	zero,r16,46d3c <_dtoa_r+0x12c8>
   46448:	b5c00005 	stb	r23,0(r22)
   4644c:	d9800517 	ldw	r6,20(sp)
   46450:	d9000f17 	ldw	r4,60(sp)
   46454:	b5800044 	addi	r22,r22,1
   46458:	3105883a 	add	r2,r6,r4
   4645c:	b0806526 	beq	r22,r2,465f4 <_dtoa_r+0xb80>
   46460:	d9400717 	ldw	r5,28(sp)
   46464:	d9001617 	ldw	r4,88(sp)
   46468:	01800284 	movi	r6,10
   4646c:	000f883a 	mov	r7,zero
   46470:	00498bc0 	call	498bc <__multadd>
   46474:	d8800715 	stw	r2,28(sp)
   46478:	d8800617 	ldw	r2,24(sp)
   4647c:	14c10c26 	beq	r2,r19,468b0 <_dtoa_r+0xe3c>
   46480:	d9400617 	ldw	r5,24(sp)
   46484:	d9001617 	ldw	r4,88(sp)
   46488:	01800284 	movi	r6,10
   4648c:	000f883a 	mov	r7,zero
   46490:	00498bc0 	call	498bc <__multadd>
   46494:	d9001617 	ldw	r4,88(sp)
   46498:	980b883a 	mov	r5,r19
   4649c:	01800284 	movi	r6,10
   464a0:	000f883a 	mov	r7,zero
   464a4:	d8800615 	stw	r2,24(sp)
   464a8:	00498bc0 	call	498bc <__multadd>
   464ac:	1027883a 	mov	r19,r2
   464b0:	003fc206 	br	463bc <_dtoa_r+0x948>
   464b4:	2445c83a 	sub	r2,r4,r17
   464b8:	a088983a 	sll	r4,r20,r2
   464bc:	003e4b06 	br	45dec <_dtoa_r+0x378>
   464c0:	01bfffc4 	movi	r6,-1
   464c4:	00800044 	movi	r2,1
   464c8:	d9800e15 	stw	r6,56(sp)
   464cc:	d9800f15 	stw	r6,60(sp)
   464d0:	d8800b15 	stw	r2,44(sp)
   464d4:	d8c01617 	ldw	r3,88(sp)
   464d8:	008005c4 	movi	r2,23
   464dc:	18001115 	stw	zero,68(r3)
   464e0:	1580082e 	bgeu	r2,r22,46504 <_dtoa_r+0xa90>
   464e4:	00c00104 	movi	r3,4
   464e8:	0009883a 	mov	r4,zero
   464ec:	18c7883a 	add	r3,r3,r3
   464f0:	18800504 	addi	r2,r3,20
   464f4:	21000044 	addi	r4,r4,1
   464f8:	b0bffc2e 	bgeu	r22,r2,464ec <_dtoa_r+0xa78>
   464fc:	d9801617 	ldw	r6,88(sp)
   46500:	31001115 	stw	r4,68(r6)
   46504:	dc000f17 	ldw	r16,60(sp)
   46508:	003e4b06 	br	45e38 <_dtoa_r+0x3c4>
   4650c:	d9801717 	ldw	r6,92(sp)
   46510:	0023883a 	mov	r17,zero
   46514:	31bfff04 	addi	r6,r6,-4
   46518:	d9801715 	stw	r6,92(sp)
   4651c:	003df806 	br	45d00 <_dtoa_r+0x28c>
   46520:	00800804 	movi	r2,32
   46524:	10c9c83a 	sub	r4,r2,r3
   46528:	00c00104 	movi	r3,4
   4652c:	19005a16 	blt	r3,r4,46698 <_dtoa_r+0xc24>
   46530:	008000c4 	movi	r2,3
   46534:	113f7e16 	blt	r2,r4,46330 <_dtoa_r+0x8bc>
   46538:	20800704 	addi	r2,r4,28
   4653c:	003f7506 	br	46314 <_dtoa_r+0x8a0>
   46540:	d9801717 	ldw	r6,92(sp)
   46544:	00800044 	movi	r2,1
   46548:	1180a10e 	bge	r2,r6,467d0 <_dtoa_r+0xd5c>
   4654c:	d9800f17 	ldw	r6,60(sp)
   46550:	d8c01017 	ldw	r3,64(sp)
   46554:	30bfffc4 	addi	r2,r6,-1
   46558:	1881c616 	blt	r3,r2,46c74 <_dtoa_r+0x1200>
   4655c:	18a5c83a 	sub	r18,r3,r2
   46560:	d8800f17 	ldw	r2,60(sp)
   46564:	10026216 	blt	r2,zero,46ef0 <_dtoa_r+0x147c>
   46568:	dc001117 	ldw	r16,68(sp)
   4656c:	1007883a 	mov	r3,r2
   46570:	d9800a17 	ldw	r6,40(sp)
   46574:	d8801117 	ldw	r2,68(sp)
   46578:	d9001617 	ldw	r4,88(sp)
   4657c:	30cd883a 	add	r6,r6,r3
   46580:	10c5883a 	add	r2,r2,r3
   46584:	01400044 	movi	r5,1
   46588:	d9800a15 	stw	r6,40(sp)
   4658c:	d8801115 	stw	r2,68(sp)
   46590:	00498800 	call	49880 <__i2b>
   46594:	1027883a 	mov	r19,r2
   46598:	003f2506 	br	46230 <_dtoa_r+0x7bc>
   4659c:	00c00174 	movhi	r3,5
   465a0:	18ff9904 	addi	r3,r3,-412
   465a4:	003d6706 	br	45b44 <_dtoa_r+0xd0>
   465a8:	dd800517 	ldw	r22,20(sp)
   465ac:	04000044 	movi	r16,1
   465b0:	00000706 	br	465d0 <_dtoa_r+0xb5c>
   465b4:	d9400717 	ldw	r5,28(sp)
   465b8:	d9001617 	ldw	r4,88(sp)
   465bc:	01800284 	movi	r6,10
   465c0:	000f883a 	mov	r7,zero
   465c4:	00498bc0 	call	498bc <__multadd>
   465c8:	d8800715 	stw	r2,28(sp)
   465cc:	84000044 	addi	r16,r16,1
   465d0:	d9000717 	ldw	r4,28(sp)
   465d4:	900b883a 	mov	r5,r18
   465d8:	004585c0 	call	4585c <quorem>
   465dc:	15c00c04 	addi	r23,r2,48
   465e0:	b5c00005 	stb	r23,0(r22)
   465e4:	d8c00f17 	ldw	r3,60(sp)
   465e8:	b5800044 	addi	r22,r22,1
   465ec:	80fff116 	blt	r16,r3,465b4 <_dtoa_r+0xb40>
   465f0:	d8000615 	stw	zero,24(sp)
   465f4:	d9400717 	ldw	r5,28(sp)
   465f8:	d9001617 	ldw	r4,88(sp)
   465fc:	01800044 	movi	r6,1
   46600:	004954c0 	call	4954c <__lshift>
   46604:	1009883a 	mov	r4,r2
   46608:	900b883a 	mov	r5,r18
   4660c:	d8800715 	stw	r2,28(sp)
   46610:	0048d640 	call	48d64 <__mcmp>
   46614:	00803c0e 	bge	zero,r2,46708 <_dtoa_r+0xc94>
   46618:	b009883a 	mov	r4,r22
   4661c:	213fffc4 	addi	r4,r4,-1
   46620:	21400003 	ldbu	r5,0(r4)
   46624:	00800e44 	movi	r2,57
   46628:	28c03fcc 	andi	r3,r5,255
   4662c:	18c0201c 	xori	r3,r3,128
   46630:	18ffe004 	addi	r3,r3,-128
   46634:	1881981e 	bne	r3,r2,46c98 <_dtoa_r+0x1224>
   46638:	d9800517 	ldw	r6,20(sp)
   4663c:	21bff71e 	bne	r4,r6,4661c <_dtoa_r+0xba8>
   46640:	d8800d17 	ldw	r2,52(sp)
   46644:	37000044 	addi	fp,r6,1
   46648:	10800044 	addi	r2,r2,1
   4664c:	d8800d15 	stw	r2,52(sp)
   46650:	00800c44 	movi	r2,49
   46654:	30800005 	stb	r2,0(r6)
   46658:	d9001617 	ldw	r4,88(sp)
   4665c:	900b883a 	mov	r5,r18
   46660:	0048c080 	call	48c08 <_Bfree>
   46664:	983ecd26 	beq	r19,zero,4619c <_dtoa_r+0x728>
   46668:	d8c00617 	ldw	r3,24(sp)
   4666c:	18000426 	beq	r3,zero,46680 <_dtoa_r+0xc0c>
   46670:	1cc00326 	beq	r3,r19,46680 <_dtoa_r+0xc0c>
   46674:	d9001617 	ldw	r4,88(sp)
   46678:	180b883a 	mov	r5,r3
   4667c:	0048c080 	call	48c08 <_Bfree>
   46680:	d9001617 	ldw	r4,88(sp)
   46684:	980b883a 	mov	r5,r19
   46688:	0048c080 	call	48c08 <_Bfree>
   4668c:	003ec306 	br	4619c <_dtoa_r+0x728>
   46690:	1805883a 	mov	r2,r3
   46694:	003eeb06 	br	46244 <_dtoa_r+0x7d0>
   46698:	d9800a17 	ldw	r6,40(sp)
   4669c:	d8c01117 	ldw	r3,68(sp)
   466a0:	20bfff04 	addi	r2,r4,-4
   466a4:	308d883a 	add	r6,r6,r2
   466a8:	1887883a 	add	r3,r3,r2
   466ac:	80a1883a 	add	r16,r16,r2
   466b0:	d9800a15 	stw	r6,40(sp)
   466b4:	d8c01115 	stw	r3,68(sp)
   466b8:	003f1d06 	br	46330 <_dtoa_r+0x8bc>
   466bc:	a03f0c1e 	bne	r20,zero,462f0 <_dtoa_r+0x87c>
   466c0:	00800434 	movhi	r2,16
   466c4:	10bfffc4 	addi	r2,r2,-1
   466c8:	a884703a 	and	r2,r21,r2
   466cc:	103f081e 	bne	r2,zero,462f0 <_dtoa_r+0x87c>
   466d0:	a89ffc2c 	andhi	r2,r21,32752
   466d4:	103f0626 	beq	r2,zero,462f0 <_dtoa_r+0x87c>
   466d8:	d8c01117 	ldw	r3,68(sp)
   466dc:	d9000a17 	ldw	r4,40(sp)
   466e0:	18c00044 	addi	r3,r3,1
   466e4:	21000044 	addi	r4,r4,1
   466e8:	d8c01115 	stw	r3,68(sp)
   466ec:	d9000a15 	stw	r4,40(sp)
   466f0:	003f0006 	br	462f4 <_dtoa_r+0x880>
   466f4:	d9400717 	ldw	r5,28(sp)
   466f8:	d9001617 	ldw	r4,88(sp)
   466fc:	00499bc0 	call	499bc <__pow5mult>
   46700:	d8800715 	stw	r2,28(sp)
   46704:	003eed06 	br	462bc <_dtoa_r+0x848>
   46708:	1000021e 	bne	r2,zero,46714 <_dtoa_r+0xca0>
   4670c:	b880004c 	andi	r2,r23,1
   46710:	103fc11e 	bne	r2,zero,46618 <_dtoa_r+0xba4>
   46714:	b5bfffc4 	addi	r22,r22,-1
   46718:	b0c00007 	ldb	r3,0(r22)
   4671c:	00800c04 	movi	r2,48
   46720:	18bffc26 	beq	r3,r2,46714 <_dtoa_r+0xca0>
   46724:	b7000044 	addi	fp,r22,1
   46728:	003fcb06 	br	46658 <_dtoa_r+0xbe4>
   4672c:	d9800d17 	ldw	r6,52(sp)
   46730:	018fc83a 	sub	r7,zero,r6
   46734:	3801f726 	beq	r7,zero,46f14 <_dtoa_r+0x14a0>
   46738:	398003cc 	andi	r6,r7,15
   4673c:	300c90fa 	slli	r6,r6,3
   46740:	01400174 	movhi	r5,5
   46744:	297fb704 	addi	r5,r5,-292
   46748:	d9001217 	ldw	r4,72(sp)
   4674c:	314d883a 	add	r6,r6,r5
   46750:	30c00117 	ldw	r3,4(r6)
   46754:	30800017 	ldw	r2,0(r6)
   46758:	d9401317 	ldw	r5,76(sp)
   4675c:	3821d13a 	srai	r16,r7,4
   46760:	100d883a 	mov	r6,r2
   46764:	180f883a 	mov	r7,r3
   46768:	004b9fc0 	call	4b9fc <__muldf3>
   4676c:	1011883a 	mov	r8,r2
   46770:	1813883a 	mov	r9,r3
   46774:	1029883a 	mov	r20,r2
   46778:	182b883a 	mov	r21,r3
   4677c:	8001e526 	beq	r16,zero,46f14 <_dtoa_r+0x14a0>
   46780:	05800084 	movi	r22,2
   46784:	04400174 	movhi	r17,5
   46788:	8c7fe904 	addi	r17,r17,-92
   4678c:	8080004c 	andi	r2,r16,1
   46790:	1005003a 	cmpeq	r2,r2,zero
   46794:	1000081e 	bne	r2,zero,467b8 <_dtoa_r+0xd44>
   46798:	89800017 	ldw	r6,0(r17)
   4679c:	89c00117 	ldw	r7,4(r17)
   467a0:	480b883a 	mov	r5,r9
   467a4:	4009883a 	mov	r4,r8
   467a8:	004b9fc0 	call	4b9fc <__muldf3>
   467ac:	1011883a 	mov	r8,r2
   467b0:	b5800044 	addi	r22,r22,1
   467b4:	1813883a 	mov	r9,r3
   467b8:	8021d07a 	srai	r16,r16,1
   467bc:	8c400204 	addi	r17,r17,8
   467c0:	803ff21e 	bne	r16,zero,4678c <_dtoa_r+0xd18>
   467c4:	4029883a 	mov	r20,r8
   467c8:	482b883a 	mov	r21,r9
   467cc:	003dca06 	br	45ef8 <_dtoa_r+0x484>
   467d0:	d9000817 	ldw	r4,32(sp)
   467d4:	2005003a 	cmpeq	r2,r4,zero
   467d8:	1001f61e 	bne	r2,zero,46fb4 <_dtoa_r+0x1540>
   467dc:	dc001117 	ldw	r16,68(sp)
   467e0:	dc801017 	ldw	r18,64(sp)
   467e4:	18c10cc4 	addi	r3,r3,1075
   467e8:	003f6106 	br	46570 <_dtoa_r+0xafc>
   467ec:	d8000b15 	stw	zero,44(sp)
   467f0:	d9802617 	ldw	r6,152(sp)
   467f4:	d8c00d17 	ldw	r3,52(sp)
   467f8:	30800044 	addi	r2,r6,1
   467fc:	18ad883a 	add	r22,r3,r2
   46800:	b13fffc4 	addi	r4,r22,-1
   46804:	d9000e15 	stw	r4,56(sp)
   46808:	0581f60e 	bge	zero,r22,46fe4 <_dtoa_r+0x1570>
   4680c:	dd800f15 	stw	r22,60(sp)
   46810:	003f3006 	br	464d4 <_dtoa_r+0xa60>
   46814:	d8000b15 	stw	zero,44(sp)
   46818:	d9002617 	ldw	r4,152(sp)
   4681c:	0101eb0e 	bge	zero,r4,46fcc <_dtoa_r+0x1558>
   46820:	202d883a 	mov	r22,r4
   46824:	d9000e15 	stw	r4,56(sp)
   46828:	d9000f15 	stw	r4,60(sp)
   4682c:	003f2906 	br	464d4 <_dtoa_r+0xa60>
   46830:	01800044 	movi	r6,1
   46834:	d9800b15 	stw	r6,44(sp)
   46838:	003ff706 	br	46818 <_dtoa_r+0xda4>
   4683c:	01000044 	movi	r4,1
   46840:	d9000b15 	stw	r4,44(sp)
   46844:	003fea06 	br	467f0 <_dtoa_r+0xd7c>
   46848:	04000c0e 	bge	zero,r16,4687c <_dtoa_r+0xe08>
   4684c:	d9400717 	ldw	r5,28(sp)
   46850:	d9001617 	ldw	r4,88(sp)
   46854:	01800044 	movi	r6,1
   46858:	004954c0 	call	4954c <__lshift>
   4685c:	1009883a 	mov	r4,r2
   46860:	900b883a 	mov	r5,r18
   46864:	d8800715 	stw	r2,28(sp)
   46868:	0048d640 	call	48d64 <__mcmp>
   4686c:	0081e00e 	bge	zero,r2,46ff0 <_dtoa_r+0x157c>
   46870:	bdc00044 	addi	r23,r23,1
   46874:	00800e84 	movi	r2,58
   46878:	b881a226 	beq	r23,r2,46f04 <_dtoa_r+0x1490>
   4687c:	b7000044 	addi	fp,r22,1
   46880:	b5c00005 	stb	r23,0(r22)
   46884:	003f7406 	br	46658 <_dtoa_r+0xbe4>
   46888:	00800e44 	movi	r2,57
   4688c:	b8819d26 	beq	r23,r2,46f04 <_dtoa_r+0x1490>
   46890:	053ffa0e 	bge	zero,r20,4687c <_dtoa_r+0xe08>
   46894:	8dc00c44 	addi	r23,r17,49
   46898:	003ff806 	br	4687c <_dtoa_r+0xe08>
   4689c:	d9001617 	ldw	r4,88(sp)
   468a0:	a80b883a 	mov	r5,r21
   468a4:	04000044 	movi	r16,1
   468a8:	0048c080 	call	48c08 <_Bfree>
   468ac:	003edf06 	br	4642c <_dtoa_r+0x9b8>
   468b0:	d9001617 	ldw	r4,88(sp)
   468b4:	980b883a 	mov	r5,r19
   468b8:	01800284 	movi	r6,10
   468bc:	000f883a 	mov	r7,zero
   468c0:	00498bc0 	call	498bc <__multadd>
   468c4:	1027883a 	mov	r19,r2
   468c8:	d8800615 	stw	r2,24(sp)
   468cc:	003ebb06 	br	463bc <_dtoa_r+0x948>
   468d0:	d9801117 	ldw	r6,68(sp)
   468d4:	d8800d17 	ldw	r2,52(sp)
   468d8:	d8000915 	stw	zero,36(sp)
   468dc:	308dc83a 	sub	r6,r6,r2
   468e0:	0087c83a 	sub	r3,zero,r2
   468e4:	d9801115 	stw	r6,68(sp)
   468e8:	d8c01015 	stw	r3,64(sp)
   468ec:	003cfe06 	br	45ce8 <_dtoa_r+0x274>
   468f0:	018dc83a 	sub	r6,zero,r6
   468f4:	d9801115 	stw	r6,68(sp)
   468f8:	d8000a15 	stw	zero,40(sp)
   468fc:	003cf306 	br	45ccc <_dtoa_r+0x258>
   46900:	d9000d17 	ldw	r4,52(sp)
   46904:	004c2c00 	call	4c2c0 <__floatsidf>
   46908:	880b883a 	mov	r5,r17
   4690c:	8009883a 	mov	r4,r16
   46910:	180f883a 	mov	r7,r3
   46914:	100d883a 	mov	r6,r2
   46918:	004c0a00 	call	4c0a0 <__nedf2>
   4691c:	103ce126 	beq	r2,zero,45ca4 <_dtoa_r+0x230>
   46920:	d9800d17 	ldw	r6,52(sp)
   46924:	31bfffc4 	addi	r6,r6,-1
   46928:	d9800d15 	stw	r6,52(sp)
   4692c:	003cdd06 	br	45ca4 <_dtoa_r+0x230>
   46930:	d9000717 	ldw	r4,28(sp)
   46934:	900b883a 	mov	r5,r18
   46938:	0048d640 	call	48d64 <__mcmp>
   4693c:	103e8d0e 	bge	r2,zero,46374 <_dtoa_r+0x900>
   46940:	d9400717 	ldw	r5,28(sp)
   46944:	d9001617 	ldw	r4,88(sp)
   46948:	01800284 	movi	r6,10
   4694c:	000f883a 	mov	r7,zero
   46950:	00498bc0 	call	498bc <__multadd>
   46954:	d9800d17 	ldw	r6,52(sp)
   46958:	d8800715 	stw	r2,28(sp)
   4695c:	31bfffc4 	addi	r6,r6,-1
   46960:	d9800d15 	stw	r6,52(sp)
   46964:	b001a71e 	bne	r22,zero,47004 <_dtoa_r+0x1590>
   46968:	d8800e17 	ldw	r2,56(sp)
   4696c:	d8800f15 	stw	r2,60(sp)
   46970:	003e8006 	br	46374 <_dtoa_r+0x900>
   46974:	90800417 	ldw	r2,16(r18)
   46978:	1085883a 	add	r2,r2,r2
   4697c:	1085883a 	add	r2,r2,r2
   46980:	1485883a 	add	r2,r2,r18
   46984:	11000417 	ldw	r4,16(r2)
   46988:	0048c300 	call	48c30 <__hi0bits>
   4698c:	00c00804 	movi	r3,32
   46990:	1887c83a 	sub	r3,r3,r2
   46994:	003e5a06 	br	46300 <_dtoa_r+0x88c>
   46998:	d9400717 	ldw	r5,28(sp)
   4699c:	d9801017 	ldw	r6,64(sp)
   469a0:	d9001617 	ldw	r4,88(sp)
   469a4:	00499bc0 	call	499bc <__pow5mult>
   469a8:	d8800715 	stw	r2,28(sp)
   469ac:	003e4306 	br	462bc <_dtoa_r+0x848>
   469b0:	d9800f17 	ldw	r6,60(sp)
   469b4:	d8800d17 	ldw	r2,52(sp)
   469b8:	d9800315 	stw	r6,12(sp)
   469bc:	d8800415 	stw	r2,16(sp)
   469c0:	d8c00b17 	ldw	r3,44(sp)
   469c4:	1805003a 	cmpeq	r2,r3,zero
   469c8:	1000e21e 	bne	r2,zero,46d54 <_dtoa_r+0x12e0>
   469cc:	d9000317 	ldw	r4,12(sp)
   469d0:	0005883a 	mov	r2,zero
   469d4:	00cff834 	movhi	r3,16352
   469d8:	200c90fa 	slli	r6,r4,3
   469dc:	01000174 	movhi	r4,5
   469e0:	213fb704 	addi	r4,r4,-292
   469e4:	180b883a 	mov	r5,r3
   469e8:	310d883a 	add	r6,r6,r4
   469ec:	327fff17 	ldw	r9,-4(r6)
   469f0:	323ffe17 	ldw	r8,-8(r6)
   469f4:	1009883a 	mov	r4,r2
   469f8:	480f883a 	mov	r7,r9
   469fc:	400d883a 	mov	r6,r8
   46a00:	004bdc00 	call	4bdc0 <__divdf3>
   46a04:	180b883a 	mov	r5,r3
   46a08:	b00d883a 	mov	r6,r22
   46a0c:	b80f883a 	mov	r7,r23
   46a10:	1009883a 	mov	r4,r2
   46a14:	004b9080 	call	4b908 <__subdf3>
   46a18:	a80b883a 	mov	r5,r21
   46a1c:	a009883a 	mov	r4,r20
   46a20:	d8c01915 	stw	r3,100(sp)
   46a24:	d8801815 	stw	r2,96(sp)
   46a28:	004c3b80 	call	4c3b8 <__fixdfsi>
   46a2c:	1009883a 	mov	r4,r2
   46a30:	1027883a 	mov	r19,r2
   46a34:	004c2c00 	call	4c2c0 <__floatsidf>
   46a38:	a80b883a 	mov	r5,r21
   46a3c:	a009883a 	mov	r4,r20
   46a40:	180f883a 	mov	r7,r3
   46a44:	100d883a 	mov	r6,r2
   46a48:	004b9080 	call	4b908 <__subdf3>
   46a4c:	d9801817 	ldw	r6,96(sp)
   46a50:	1823883a 	mov	r17,r3
   46a54:	d8801415 	stw	r2,80(sp)
   46a58:	302d883a 	mov	r22,r6
   46a5c:	d9800517 	ldw	r6,20(sp)
   46a60:	9cc00c04 	addi	r19,r19,48
   46a64:	dc401515 	stw	r17,84(sp)
   46a68:	d8c01917 	ldw	r3,100(sp)
   46a6c:	34c00005 	stb	r19,0(r6)
   46a70:	d8800517 	ldw	r2,20(sp)
   46a74:	d9401917 	ldw	r5,100(sp)
   46a78:	d9801417 	ldw	r6,80(sp)
   46a7c:	b009883a 	mov	r4,r22
   46a80:	880f883a 	mov	r7,r17
   46a84:	182f883a 	mov	r23,r3
   46a88:	17000044 	addi	fp,r2,1
   46a8c:	004c1280 	call	4c128 <__gtdf2>
   46a90:	00804e16 	blt	zero,r2,46bcc <_dtoa_r+0x1158>
   46a94:	d9801417 	ldw	r6,80(sp)
   46a98:	0005883a 	mov	r2,zero
   46a9c:	00cffc34 	movhi	r3,16368
   46aa0:	180b883a 	mov	r5,r3
   46aa4:	880f883a 	mov	r7,r17
   46aa8:	1009883a 	mov	r4,r2
   46aac:	004b9080 	call	4b908 <__subdf3>
   46ab0:	d9401917 	ldw	r5,100(sp)
   46ab4:	180f883a 	mov	r7,r3
   46ab8:	b009883a 	mov	r4,r22
   46abc:	100d883a 	mov	r6,r2
   46ac0:	004c1280 	call	4c128 <__gtdf2>
   46ac4:	00bda216 	blt	zero,r2,46150 <_dtoa_r+0x6dc>
   46ac8:	d8c00317 	ldw	r3,12(sp)
   46acc:	00800044 	movi	r2,1
   46ad0:	10c01216 	blt	r2,r3,46b1c <_dtoa_r+0x10a8>
   46ad4:	003d4506 	br	45fec <_dtoa_r+0x578>
   46ad8:	d9801417 	ldw	r6,80(sp)
   46adc:	0005883a 	mov	r2,zero
   46ae0:	00cffc34 	movhi	r3,16368
   46ae4:	180b883a 	mov	r5,r3
   46ae8:	880f883a 	mov	r7,r17
   46aec:	1009883a 	mov	r4,r2
   46af0:	004b9080 	call	4b908 <__subdf3>
   46af4:	d9c01b17 	ldw	r7,108(sp)
   46af8:	180b883a 	mov	r5,r3
   46afc:	1009883a 	mov	r4,r2
   46b00:	b00d883a 	mov	r6,r22
   46b04:	004c2380 	call	4c238 <__ltdf2>
   46b08:	103d9116 	blt	r2,zero,46150 <_dtoa_r+0x6dc>
   46b0c:	d9800517 	ldw	r6,20(sp)
   46b10:	d9000317 	ldw	r4,12(sp)
   46b14:	3105883a 	add	r2,r6,r4
   46b18:	e0bd3426 	beq	fp,r2,45fec <_dtoa_r+0x578>
   46b1c:	04500934 	movhi	r17,16420
   46b20:	0021883a 	mov	r16,zero
   46b24:	b80b883a 	mov	r5,r23
   46b28:	b009883a 	mov	r4,r22
   46b2c:	800d883a 	mov	r6,r16
   46b30:	880f883a 	mov	r7,r17
   46b34:	004b9fc0 	call	4b9fc <__muldf3>
   46b38:	d9401517 	ldw	r5,84(sp)
   46b3c:	d9001417 	ldw	r4,80(sp)
   46b40:	880f883a 	mov	r7,r17
   46b44:	000d883a 	mov	r6,zero
   46b48:	d8801a15 	stw	r2,104(sp)
   46b4c:	d8c01b15 	stw	r3,108(sp)
   46b50:	004b9fc0 	call	4b9fc <__muldf3>
   46b54:	180b883a 	mov	r5,r3
   46b58:	1009883a 	mov	r4,r2
   46b5c:	1823883a 	mov	r17,r3
   46b60:	1021883a 	mov	r16,r2
   46b64:	004c3b80 	call	4c3b8 <__fixdfsi>
   46b68:	1009883a 	mov	r4,r2
   46b6c:	102b883a 	mov	r21,r2
   46b70:	004c2c00 	call	4c2c0 <__floatsidf>
   46b74:	880b883a 	mov	r5,r17
   46b78:	8009883a 	mov	r4,r16
   46b7c:	180f883a 	mov	r7,r3
   46b80:	100d883a 	mov	r6,r2
   46b84:	004b9080 	call	4b908 <__subdf3>
   46b88:	1021883a 	mov	r16,r2
   46b8c:	d9001b17 	ldw	r4,108(sp)
   46b90:	1823883a 	mov	r17,r3
   46b94:	dc001415 	stw	r16,80(sp)
   46b98:	ad400c04 	addi	r21,r21,48
   46b9c:	dc401515 	stw	r17,84(sp)
   46ba0:	d8801a17 	ldw	r2,104(sp)
   46ba4:	e5400005 	stb	r21,0(fp)
   46ba8:	202f883a 	mov	r23,r4
   46bac:	d9c01b17 	ldw	r7,108(sp)
   46bb0:	d9001417 	ldw	r4,80(sp)
   46bb4:	880b883a 	mov	r5,r17
   46bb8:	100d883a 	mov	r6,r2
   46bbc:	102d883a 	mov	r22,r2
   46bc0:	e7000044 	addi	fp,fp,1
   46bc4:	004c2380 	call	4c238 <__ltdf2>
   46bc8:	103fc30e 	bge	r2,zero,46ad8 <_dtoa_r+0x1064>
   46bcc:	d9000417 	ldw	r4,16(sp)
   46bd0:	d9000d15 	stw	r4,52(sp)
   46bd4:	003d7106 	br	4619c <_dtoa_r+0x728>
   46bd8:	d9801717 	ldw	r6,92(sp)
   46bdc:	00800084 	movi	r2,2
   46be0:	11bde60e 	bge	r2,r6,4637c <_dtoa_r+0x908>
   46be4:	203cfb1e 	bne	r4,zero,45fd4 <_dtoa_r+0x560>
   46be8:	d9001617 	ldw	r4,88(sp)
   46bec:	900b883a 	mov	r5,r18
   46bf0:	01800144 	movi	r6,5
   46bf4:	000f883a 	mov	r7,zero
   46bf8:	00498bc0 	call	498bc <__multadd>
   46bfc:	d9000717 	ldw	r4,28(sp)
   46c00:	100b883a 	mov	r5,r2
   46c04:	1025883a 	mov	r18,r2
   46c08:	0048d640 	call	48d64 <__mcmp>
   46c0c:	00bcf10e 	bge	zero,r2,45fd4 <_dtoa_r+0x560>
   46c10:	d8c00d17 	ldw	r3,52(sp)
   46c14:	d9000517 	ldw	r4,20(sp)
   46c18:	d8000615 	stw	zero,24(sp)
   46c1c:	18c00044 	addi	r3,r3,1
   46c20:	d8c00d15 	stw	r3,52(sp)
   46c24:	00800c44 	movi	r2,49
   46c28:	27000044 	addi	fp,r4,1
   46c2c:	20800005 	stb	r2,0(r4)
   46c30:	003e8906 	br	46658 <_dtoa_r+0xbe4>
   46c34:	d8c00517 	ldw	r3,20(sp)
   46c38:	003bc206 	br	45b44 <_dtoa_r+0xd0>
   46c3c:	01800174 	movhi	r6,5
   46c40:	31bfe904 	addi	r6,r6,-92
   46c44:	30c00917 	ldw	r3,36(r6)
   46c48:	30800817 	ldw	r2,32(r6)
   46c4c:	d9001217 	ldw	r4,72(sp)
   46c50:	d9401317 	ldw	r5,76(sp)
   46c54:	180f883a 	mov	r7,r3
   46c58:	100d883a 	mov	r6,r2
   46c5c:	004bdc00 	call	4bdc0 <__divdf3>
   46c60:	948003cc 	andi	r18,r18,15
   46c64:	058000c4 	movi	r22,3
   46c68:	1029883a 	mov	r20,r2
   46c6c:	182b883a 	mov	r21,r3
   46c70:	003c8906 	br	45e98 <_dtoa_r+0x424>
   46c74:	d9001017 	ldw	r4,64(sp)
   46c78:	d9800917 	ldw	r6,36(sp)
   46c7c:	0025883a 	mov	r18,zero
   46c80:	1105c83a 	sub	r2,r2,r4
   46c84:	2089883a 	add	r4,r4,r2
   46c88:	308d883a 	add	r6,r6,r2
   46c8c:	d9001015 	stw	r4,64(sp)
   46c90:	d9800915 	stw	r6,36(sp)
   46c94:	003e3206 	br	46560 <_dtoa_r+0xaec>
   46c98:	28800044 	addi	r2,r5,1
   46c9c:	27000044 	addi	fp,r4,1
   46ca0:	20800005 	stb	r2,0(r4)
   46ca4:	003e6c06 	br	46658 <_dtoa_r+0xbe4>
   46ca8:	d8800f17 	ldw	r2,60(sp)
   46cac:	00bce016 	blt	zero,r2,46030 <_dtoa_r+0x5bc>
   46cb0:	d9800f17 	ldw	r6,60(sp)
   46cb4:	303cc51e 	bne	r6,zero,45fcc <_dtoa_r+0x558>
   46cb8:	0005883a 	mov	r2,zero
   46cbc:	00d00534 	movhi	r3,16404
   46cc0:	980b883a 	mov	r5,r19
   46cc4:	180f883a 	mov	r7,r3
   46cc8:	9009883a 	mov	r4,r18
   46ccc:	100d883a 	mov	r6,r2
   46cd0:	004b9fc0 	call	4b9fc <__muldf3>
   46cd4:	180b883a 	mov	r5,r3
   46cd8:	a80f883a 	mov	r7,r21
   46cdc:	1009883a 	mov	r4,r2
   46ce0:	a00d883a 	mov	r6,r20
   46ce4:	004c1b00 	call	4c1b0 <__gedf2>
   46ce8:	103cb80e 	bge	r2,zero,45fcc <_dtoa_r+0x558>
   46cec:	0027883a 	mov	r19,zero
   46cf0:	0025883a 	mov	r18,zero
   46cf4:	003fc606 	br	46c10 <_dtoa_r+0x119c>
   46cf8:	99400117 	ldw	r5,4(r19)
   46cfc:	d9001617 	ldw	r4,88(sp)
   46d00:	00491880 	call	49188 <_Balloc>
   46d04:	99800417 	ldw	r6,16(r19)
   46d08:	11000304 	addi	r4,r2,12
   46d0c:	99400304 	addi	r5,r19,12
   46d10:	318d883a 	add	r6,r6,r6
   46d14:	318d883a 	add	r6,r6,r6
   46d18:	31800204 	addi	r6,r6,8
   46d1c:	1023883a 	mov	r17,r2
   46d20:	00489f00 	call	489f0 <memcpy>
   46d24:	d9001617 	ldw	r4,88(sp)
   46d28:	880b883a 	mov	r5,r17
   46d2c:	01800044 	movi	r6,1
   46d30:	004954c0 	call	4954c <__lshift>
   46d34:	100b883a 	mov	r5,r2
   46d38:	003d9c06 	br	463ac <_dtoa_r+0x938>
   46d3c:	00800e44 	movi	r2,57
   46d40:	b8807026 	beq	r23,r2,46f04 <_dtoa_r+0x1490>
   46d44:	b8800044 	addi	r2,r23,1
   46d48:	b7000044 	addi	fp,r22,1
   46d4c:	b0800005 	stb	r2,0(r22)
   46d50:	003e4106 	br	46658 <_dtoa_r+0xbe4>
   46d54:	d8800317 	ldw	r2,12(sp)
   46d58:	01800174 	movhi	r6,5
   46d5c:	31bfb704 	addi	r6,r6,-292
   46d60:	b009883a 	mov	r4,r22
   46d64:	100e90fa 	slli	r7,r2,3
   46d68:	b80b883a 	mov	r5,r23
   46d6c:	398f883a 	add	r7,r7,r6
   46d70:	38bffe17 	ldw	r2,-8(r7)
   46d74:	d9800517 	ldw	r6,20(sp)
   46d78:	38ffff17 	ldw	r3,-4(r7)
   46d7c:	37000044 	addi	fp,r6,1
   46d80:	180f883a 	mov	r7,r3
   46d84:	100d883a 	mov	r6,r2
   46d88:	004b9fc0 	call	4b9fc <__muldf3>
   46d8c:	a80b883a 	mov	r5,r21
   46d90:	a009883a 	mov	r4,r20
   46d94:	182f883a 	mov	r23,r3
   46d98:	102d883a 	mov	r22,r2
   46d9c:	004c3b80 	call	4c3b8 <__fixdfsi>
   46da0:	1009883a 	mov	r4,r2
   46da4:	1027883a 	mov	r19,r2
   46da8:	004c2c00 	call	4c2c0 <__floatsidf>
   46dac:	a80b883a 	mov	r5,r21
   46db0:	a009883a 	mov	r4,r20
   46db4:	180f883a 	mov	r7,r3
   46db8:	100d883a 	mov	r6,r2
   46dbc:	004b9080 	call	4b908 <__subdf3>
   46dc0:	180b883a 	mov	r5,r3
   46dc4:	d8c00517 	ldw	r3,20(sp)
   46dc8:	9cc00c04 	addi	r19,r19,48
   46dcc:	1009883a 	mov	r4,r2
   46dd0:	1cc00005 	stb	r19,0(r3)
   46dd4:	2021883a 	mov	r16,r4
   46dd8:	d9000317 	ldw	r4,12(sp)
   46ddc:	00800044 	movi	r2,1
   46de0:	2823883a 	mov	r17,r5
   46de4:	20802226 	beq	r4,r2,46e70 <_dtoa_r+0x13fc>
   46de8:	1029883a 	mov	r20,r2
   46dec:	0005883a 	mov	r2,zero
   46df0:	00d00934 	movhi	r3,16420
   46df4:	180f883a 	mov	r7,r3
   46df8:	100d883a 	mov	r6,r2
   46dfc:	880b883a 	mov	r5,r17
   46e00:	8009883a 	mov	r4,r16
   46e04:	004b9fc0 	call	4b9fc <__muldf3>
   46e08:	180b883a 	mov	r5,r3
   46e0c:	1009883a 	mov	r4,r2
   46e10:	1823883a 	mov	r17,r3
   46e14:	1021883a 	mov	r16,r2
   46e18:	004c3b80 	call	4c3b8 <__fixdfsi>
   46e1c:	1009883a 	mov	r4,r2
   46e20:	102b883a 	mov	r21,r2
   46e24:	004c2c00 	call	4c2c0 <__floatsidf>
   46e28:	880b883a 	mov	r5,r17
   46e2c:	8009883a 	mov	r4,r16
   46e30:	180f883a 	mov	r7,r3
   46e34:	100d883a 	mov	r6,r2
   46e38:	004b9080 	call	4b908 <__subdf3>
   46e3c:	180b883a 	mov	r5,r3
   46e40:	d8c00517 	ldw	r3,20(sp)
   46e44:	1009883a 	mov	r4,r2
   46e48:	ad400c04 	addi	r21,r21,48
   46e4c:	1d05883a 	add	r2,r3,r20
   46e50:	15400005 	stb	r21,0(r2)
   46e54:	2021883a 	mov	r16,r4
   46e58:	d9000317 	ldw	r4,12(sp)
   46e5c:	a5000044 	addi	r20,r20,1
   46e60:	2823883a 	mov	r17,r5
   46e64:	a13fe11e 	bne	r20,r4,46dec <_dtoa_r+0x1378>
   46e68:	e505883a 	add	r2,fp,r20
   46e6c:	173fffc4 	addi	fp,r2,-1
   46e70:	0025883a 	mov	r18,zero
   46e74:	04cff834 	movhi	r19,16352
   46e78:	b009883a 	mov	r4,r22
   46e7c:	b80b883a 	mov	r5,r23
   46e80:	900d883a 	mov	r6,r18
   46e84:	980f883a 	mov	r7,r19
   46e88:	004b9880 	call	4b988 <__adddf3>
   46e8c:	180b883a 	mov	r5,r3
   46e90:	1009883a 	mov	r4,r2
   46e94:	800d883a 	mov	r6,r16
   46e98:	880f883a 	mov	r7,r17
   46e9c:	004c2380 	call	4c238 <__ltdf2>
   46ea0:	103cab16 	blt	r2,zero,46150 <_dtoa_r+0x6dc>
   46ea4:	0009883a 	mov	r4,zero
   46ea8:	980b883a 	mov	r5,r19
   46eac:	b80f883a 	mov	r7,r23
   46eb0:	b00d883a 	mov	r6,r22
   46eb4:	004b9080 	call	4b908 <__subdf3>
   46eb8:	180b883a 	mov	r5,r3
   46ebc:	880f883a 	mov	r7,r17
   46ec0:	1009883a 	mov	r4,r2
   46ec4:	800d883a 	mov	r6,r16
   46ec8:	004c1280 	call	4c128 <__gtdf2>
   46ecc:	00bc470e 	bge	zero,r2,45fec <_dtoa_r+0x578>
   46ed0:	00c00c04 	movi	r3,48
   46ed4:	e73fffc4 	addi	fp,fp,-1
   46ed8:	e0800007 	ldb	r2,0(fp)
   46edc:	10fffd26 	beq	r2,r3,46ed4 <_dtoa_r+0x1460>
   46ee0:	d9800417 	ldw	r6,16(sp)
   46ee4:	e7000044 	addi	fp,fp,1
   46ee8:	d9800d15 	stw	r6,52(sp)
   46eec:	003cab06 	br	4619c <_dtoa_r+0x728>
   46ef0:	d8c00f17 	ldw	r3,60(sp)
   46ef4:	d9001117 	ldw	r4,68(sp)
   46ef8:	20e1c83a 	sub	r16,r4,r3
   46efc:	0007883a 	mov	r3,zero
   46f00:	003d9b06 	br	46570 <_dtoa_r+0xafc>
   46f04:	00800e44 	movi	r2,57
   46f08:	b0800005 	stb	r2,0(r22)
   46f0c:	b5800044 	addi	r22,r22,1
   46f10:	003dc106 	br	46618 <_dtoa_r+0xba4>
   46f14:	05800084 	movi	r22,2
   46f18:	003bf706 	br	45ef8 <_dtoa_r+0x484>
   46f1c:	d9000f17 	ldw	r4,60(sp)
   46f20:	013c000e 	bge	zero,r4,45f24 <_dtoa_r+0x4b0>
   46f24:	d9800e17 	ldw	r6,56(sp)
   46f28:	01bc300e 	bge	zero,r6,45fec <_dtoa_r+0x578>
   46f2c:	0005883a 	mov	r2,zero
   46f30:	00d00934 	movhi	r3,16420
   46f34:	a80b883a 	mov	r5,r21
   46f38:	180f883a 	mov	r7,r3
   46f3c:	a009883a 	mov	r4,r20
   46f40:	100d883a 	mov	r6,r2
   46f44:	004b9fc0 	call	4b9fc <__muldf3>
   46f48:	b1000044 	addi	r4,r22,1
   46f4c:	1021883a 	mov	r16,r2
   46f50:	1823883a 	mov	r17,r3
   46f54:	004c2c00 	call	4c2c0 <__floatsidf>
   46f58:	880b883a 	mov	r5,r17
   46f5c:	8009883a 	mov	r4,r16
   46f60:	180f883a 	mov	r7,r3
   46f64:	100d883a 	mov	r6,r2
   46f68:	004b9fc0 	call	4b9fc <__muldf3>
   46f6c:	0011883a 	mov	r8,zero
   46f70:	02500734 	movhi	r9,16412
   46f74:	180b883a 	mov	r5,r3
   46f78:	480f883a 	mov	r7,r9
   46f7c:	1009883a 	mov	r4,r2
   46f80:	400d883a 	mov	r6,r8
   46f84:	004b9880 	call	4b988 <__adddf3>
   46f88:	102d883a 	mov	r22,r2
   46f8c:	00bf3034 	movhi	r2,64704
   46f90:	10ef883a 	add	r23,r2,r3
   46f94:	d8800d17 	ldw	r2,52(sp)
   46f98:	d8c00e17 	ldw	r3,56(sp)
   46f9c:	8029883a 	mov	r20,r16
   46fa0:	10bfffc4 	addi	r2,r2,-1
   46fa4:	882b883a 	mov	r21,r17
   46fa8:	d8800415 	stw	r2,16(sp)
   46fac:	d8c00315 	stw	r3,12(sp)
   46fb0:	003e8306 	br	469c0 <_dtoa_r+0xf4c>
   46fb4:	d8800117 	ldw	r2,4(sp)
   46fb8:	dc001117 	ldw	r16,68(sp)
   46fbc:	dc801017 	ldw	r18,64(sp)
   46fc0:	00c00d84 	movi	r3,54
   46fc4:	1887c83a 	sub	r3,r3,r2
   46fc8:	003d6906 	br	46570 <_dtoa_r+0xafc>
   46fcc:	01800044 	movi	r6,1
   46fd0:	3021883a 	mov	r16,r6
   46fd4:	d9800f15 	stw	r6,60(sp)
   46fd8:	d9802615 	stw	r6,152(sp)
   46fdc:	d9800e15 	stw	r6,56(sp)
   46fe0:	003b9306 	br	45e30 <_dtoa_r+0x3bc>
   46fe4:	b021883a 	mov	r16,r22
   46fe8:	dd800f15 	stw	r22,60(sp)
   46fec:	003b9006 	br	45e30 <_dtoa_r+0x3bc>
   46ff0:	103e221e 	bne	r2,zero,4687c <_dtoa_r+0xe08>
   46ff4:	b880004c 	andi	r2,r23,1
   46ff8:	1005003a 	cmpeq	r2,r2,zero
   46ffc:	103e1f1e 	bne	r2,zero,4687c <_dtoa_r+0xe08>
   47000:	003e1b06 	br	46870 <_dtoa_r+0xdfc>
   47004:	d9001617 	ldw	r4,88(sp)
   47008:	980b883a 	mov	r5,r19
   4700c:	01800284 	movi	r6,10
   47010:	000f883a 	mov	r7,zero
   47014:	00498bc0 	call	498bc <__multadd>
   47018:	d8c00e17 	ldw	r3,56(sp)
   4701c:	1027883a 	mov	r19,r2
   47020:	d8c00f15 	stw	r3,60(sp)
   47024:	003cd306 	br	46374 <_dtoa_r+0x900>

00047028 <_fflush_r>:
   47028:	defffb04 	addi	sp,sp,-20
   4702c:	dcc00315 	stw	r19,12(sp)
   47030:	dc800215 	stw	r18,8(sp)
   47034:	dfc00415 	stw	ra,16(sp)
   47038:	dc400115 	stw	r17,4(sp)
   4703c:	dc000015 	stw	r16,0(sp)
   47040:	2027883a 	mov	r19,r4
   47044:	2825883a 	mov	r18,r5
   47048:	20000226 	beq	r4,zero,47054 <_fflush_r+0x2c>
   4704c:	20800e17 	ldw	r2,56(r4)
   47050:	10005626 	beq	r2,zero,471ac <_fflush_r+0x184>
   47054:	9100030b 	ldhu	r4,12(r18)
   47058:	20ffffcc 	andi	r3,r4,65535
   4705c:	18e0001c 	xori	r3,r3,32768
   47060:	18e00004 	addi	r3,r3,-32768
   47064:	1880020c 	andi	r2,r3,8
   47068:	1000261e 	bne	r2,zero,47104 <_fflush_r+0xdc>
   4706c:	90c00117 	ldw	r3,4(r18)
   47070:	20820014 	ori	r2,r4,2048
   47074:	9080030d 	sth	r2,12(r18)
   47078:	1009883a 	mov	r4,r2
   4707c:	00c0400e 	bge	zero,r3,47180 <_fflush_r+0x158>
   47080:	92000a17 	ldw	r8,40(r18)
   47084:	40004026 	beq	r8,zero,47188 <_fflush_r+0x160>
   47088:	2084000c 	andi	r2,r4,4096
   4708c:	10005326 	beq	r2,zero,471dc <_fflush_r+0x1b4>
   47090:	94001417 	ldw	r16,80(r18)
   47094:	9080030b 	ldhu	r2,12(r18)
   47098:	1080010c 	andi	r2,r2,4
   4709c:	1000481e 	bne	r2,zero,471c0 <_fflush_r+0x198>
   470a0:	91400717 	ldw	r5,28(r18)
   470a4:	9809883a 	mov	r4,r19
   470a8:	800d883a 	mov	r6,r16
   470ac:	000f883a 	mov	r7,zero
   470b0:	403ee83a 	callr	r8
   470b4:	8080261e 	bne	r16,r2,47150 <_fflush_r+0x128>
   470b8:	9080030b 	ldhu	r2,12(r18)
   470bc:	91000417 	ldw	r4,16(r18)
   470c0:	90000115 	stw	zero,4(r18)
   470c4:	10bdffcc 	andi	r2,r2,63487
   470c8:	10ffffcc 	andi	r3,r2,65535
   470cc:	18c4000c 	andi	r3,r3,4096
   470d0:	9080030d 	sth	r2,12(r18)
   470d4:	91000015 	stw	r4,0(r18)
   470d8:	18002b26 	beq	r3,zero,47188 <_fflush_r+0x160>
   470dc:	0007883a 	mov	r3,zero
   470e0:	1805883a 	mov	r2,r3
   470e4:	94001415 	stw	r16,80(r18)
   470e8:	dfc00417 	ldw	ra,16(sp)
   470ec:	dcc00317 	ldw	r19,12(sp)
   470f0:	dc800217 	ldw	r18,8(sp)
   470f4:	dc400117 	ldw	r17,4(sp)
   470f8:	dc000017 	ldw	r16,0(sp)
   470fc:	dec00504 	addi	sp,sp,20
   47100:	f800283a 	ret
   47104:	94400417 	ldw	r17,16(r18)
   47108:	88001f26 	beq	r17,zero,47188 <_fflush_r+0x160>
   4710c:	90800017 	ldw	r2,0(r18)
   47110:	18c000cc 	andi	r3,r3,3
   47114:	94400015 	stw	r17,0(r18)
   47118:	1461c83a 	sub	r16,r2,r17
   4711c:	18002526 	beq	r3,zero,471b4 <_fflush_r+0x18c>
   47120:	0005883a 	mov	r2,zero
   47124:	90800215 	stw	r2,8(r18)
   47128:	0400170e 	bge	zero,r16,47188 <_fflush_r+0x160>
   4712c:	90c00917 	ldw	r3,36(r18)
   47130:	91400717 	ldw	r5,28(r18)
   47134:	880d883a 	mov	r6,r17
   47138:	800f883a 	mov	r7,r16
   4713c:	9809883a 	mov	r4,r19
   47140:	183ee83a 	callr	r3
   47144:	88a3883a 	add	r17,r17,r2
   47148:	80a1c83a 	sub	r16,r16,r2
   4714c:	00bff616 	blt	zero,r2,47128 <_fflush_r+0x100>
   47150:	9080030b 	ldhu	r2,12(r18)
   47154:	00ffffc4 	movi	r3,-1
   47158:	10801014 	ori	r2,r2,64
   4715c:	9080030d 	sth	r2,12(r18)
   47160:	1805883a 	mov	r2,r3
   47164:	dfc00417 	ldw	ra,16(sp)
   47168:	dcc00317 	ldw	r19,12(sp)
   4716c:	dc800217 	ldw	r18,8(sp)
   47170:	dc400117 	ldw	r17,4(sp)
   47174:	dc000017 	ldw	r16,0(sp)
   47178:	dec00504 	addi	sp,sp,20
   4717c:	f800283a 	ret
   47180:	90800f17 	ldw	r2,60(r18)
   47184:	00bfbe16 	blt	zero,r2,47080 <_fflush_r+0x58>
   47188:	0007883a 	mov	r3,zero
   4718c:	1805883a 	mov	r2,r3
   47190:	dfc00417 	ldw	ra,16(sp)
   47194:	dcc00317 	ldw	r19,12(sp)
   47198:	dc800217 	ldw	r18,8(sp)
   4719c:	dc400117 	ldw	r17,4(sp)
   471a0:	dc000017 	ldw	r16,0(sp)
   471a4:	dec00504 	addi	sp,sp,20
   471a8:	f800283a 	ret
   471ac:	00472c00 	call	472c0 <__sinit>
   471b0:	003fa806 	br	47054 <_fflush_r+0x2c>
   471b4:	90800517 	ldw	r2,20(r18)
   471b8:	90800215 	stw	r2,8(r18)
   471bc:	003fda06 	br	47128 <_fflush_r+0x100>
   471c0:	90800117 	ldw	r2,4(r18)
   471c4:	90c00c17 	ldw	r3,48(r18)
   471c8:	80a1c83a 	sub	r16,r16,r2
   471cc:	183fb426 	beq	r3,zero,470a0 <_fflush_r+0x78>
   471d0:	90800f17 	ldw	r2,60(r18)
   471d4:	80a1c83a 	sub	r16,r16,r2
   471d8:	003fb106 	br	470a0 <_fflush_r+0x78>
   471dc:	91400717 	ldw	r5,28(r18)
   471e0:	9809883a 	mov	r4,r19
   471e4:	000d883a 	mov	r6,zero
   471e8:	01c00044 	movi	r7,1
   471ec:	403ee83a 	callr	r8
   471f0:	1021883a 	mov	r16,r2
   471f4:	00bfffc4 	movi	r2,-1
   471f8:	80800226 	beq	r16,r2,47204 <_fflush_r+0x1dc>
   471fc:	92000a17 	ldw	r8,40(r18)
   47200:	003fa406 	br	47094 <_fflush_r+0x6c>
   47204:	98c00017 	ldw	r3,0(r19)
   47208:	00800744 	movi	r2,29
   4720c:	18bfde26 	beq	r3,r2,47188 <_fflush_r+0x160>
   47210:	9080030b 	ldhu	r2,12(r18)
   47214:	8007883a 	mov	r3,r16
   47218:	10801014 	ori	r2,r2,64
   4721c:	9080030d 	sth	r2,12(r18)
   47220:	003fcf06 	br	47160 <_fflush_r+0x138>

00047224 <fflush>:
   47224:	01400134 	movhi	r5,4
   47228:	295c0a04 	addi	r5,r5,28712
   4722c:	2007883a 	mov	r3,r4
   47230:	20000526 	beq	r4,zero,47248 <fflush+0x24>
   47234:	00800174 	movhi	r2,5
   47238:	10873804 	addi	r2,r2,7392
   4723c:	11000017 	ldw	r4,0(r2)
   47240:	180b883a 	mov	r5,r3
   47244:	00470281 	jmpi	47028 <_fflush_r>
   47248:	00800174 	movhi	r2,5
   4724c:	10873904 	addi	r2,r2,7396
   47250:	11000017 	ldw	r4,0(r2)
   47254:	0047df41 	jmpi	47df4 <_fwalk_reent>

00047258 <std>:
   47258:	00800174 	movhi	r2,5
   4725c:	10a8b404 	addi	r2,r2,-23856
   47260:	20800b15 	stw	r2,44(r4)
   47264:	00800174 	movhi	r2,5
   47268:	10a8ef04 	addi	r2,r2,-23620
   4726c:	20800815 	stw	r2,32(r4)
   47270:	00c00174 	movhi	r3,5
   47274:	18e8d004 	addi	r3,r3,-23744
   47278:	00800174 	movhi	r2,5
   4727c:	10a8b604 	addi	r2,r2,-23848
   47280:	2140030d 	sth	r5,12(r4)
   47284:	2180038d 	sth	r6,14(r4)
   47288:	20c00915 	stw	r3,36(r4)
   4728c:	20800a15 	stw	r2,40(r4)
   47290:	20000015 	stw	zero,0(r4)
   47294:	20000115 	stw	zero,4(r4)
   47298:	20000215 	stw	zero,8(r4)
   4729c:	20000415 	stw	zero,16(r4)
   472a0:	20000515 	stw	zero,20(r4)
   472a4:	20000615 	stw	zero,24(r4)
   472a8:	21000715 	stw	r4,28(r4)
   472ac:	f800283a 	ret

000472b0 <__sfp_lock_acquire>:
   472b0:	f800283a 	ret

000472b4 <__sfp_lock_release>:
   472b4:	f800283a 	ret

000472b8 <__sinit_lock_acquire>:
   472b8:	f800283a 	ret

000472bc <__sinit_lock_release>:
   472bc:	f800283a 	ret

000472c0 <__sinit>:
   472c0:	20800e17 	ldw	r2,56(r4)
   472c4:	defffd04 	addi	sp,sp,-12
   472c8:	dc400115 	stw	r17,4(sp)
   472cc:	dc000015 	stw	r16,0(sp)
   472d0:	dfc00215 	stw	ra,8(sp)
   472d4:	04400044 	movi	r17,1
   472d8:	01400104 	movi	r5,4
   472dc:	000d883a 	mov	r6,zero
   472e0:	2021883a 	mov	r16,r4
   472e4:	2200bb04 	addi	r8,r4,748
   472e8:	200f883a 	mov	r7,r4
   472ec:	10000526 	beq	r2,zero,47304 <__sinit+0x44>
   472f0:	dfc00217 	ldw	ra,8(sp)
   472f4:	dc400117 	ldw	r17,4(sp)
   472f8:	dc000017 	ldw	r16,0(sp)
   472fc:	dec00304 	addi	sp,sp,12
   47300:	f800283a 	ret
   47304:	21000117 	ldw	r4,4(r4)
   47308:	00800134 	movhi	r2,4
   4730c:	109ce904 	addi	r2,r2,29604
   47310:	00c000c4 	movi	r3,3
   47314:	80800f15 	stw	r2,60(r16)
   47318:	80c0b915 	stw	r3,740(r16)
   4731c:	8200ba15 	stw	r8,744(r16)
   47320:	84400e15 	stw	r17,56(r16)
   47324:	8000b815 	stw	zero,736(r16)
   47328:	00472580 	call	47258 <std>
   4732c:	81000217 	ldw	r4,8(r16)
   47330:	880d883a 	mov	r6,r17
   47334:	800f883a 	mov	r7,r16
   47338:	01400284 	movi	r5,10
   4733c:	00472580 	call	47258 <std>
   47340:	81000317 	ldw	r4,12(r16)
   47344:	800f883a 	mov	r7,r16
   47348:	01400484 	movi	r5,18
   4734c:	01800084 	movi	r6,2
   47350:	dfc00217 	ldw	ra,8(sp)
   47354:	dc400117 	ldw	r17,4(sp)
   47358:	dc000017 	ldw	r16,0(sp)
   4735c:	dec00304 	addi	sp,sp,12
   47360:	00472581 	jmpi	47258 <std>

00047364 <__fp_lock>:
   47364:	0005883a 	mov	r2,zero
   47368:	f800283a 	ret

0004736c <__fp_unlock>:
   4736c:	0005883a 	mov	r2,zero
   47370:	f800283a 	ret

00047374 <__fp_unlock_all>:
   47374:	00800174 	movhi	r2,5
   47378:	10873804 	addi	r2,r2,7392
   4737c:	11000017 	ldw	r4,0(r2)
   47380:	01400134 	movhi	r5,4
   47384:	295cdb04 	addi	r5,r5,29548
   47388:	0047ebc1 	jmpi	47ebc <_fwalk>

0004738c <__fp_lock_all>:
   4738c:	00800174 	movhi	r2,5
   47390:	10873804 	addi	r2,r2,7392
   47394:	11000017 	ldw	r4,0(r2)
   47398:	01400134 	movhi	r5,4
   4739c:	295cd904 	addi	r5,r5,29540
   473a0:	0047ebc1 	jmpi	47ebc <_fwalk>

000473a4 <_cleanup_r>:
   473a4:	01400174 	movhi	r5,5
   473a8:	2969e104 	addi	r5,r5,-22652
   473ac:	0047ebc1 	jmpi	47ebc <_fwalk>

000473b0 <_cleanup>:
   473b0:	00800174 	movhi	r2,5
   473b4:	10873904 	addi	r2,r2,7396
   473b8:	11000017 	ldw	r4,0(r2)
   473bc:	00473a41 	jmpi	473a4 <_cleanup_r>

000473c0 <__sfmoreglue>:
   473c0:	defffc04 	addi	sp,sp,-16
   473c4:	dc400115 	stw	r17,4(sp)
   473c8:	2c401724 	muli	r17,r5,92
   473cc:	dc800215 	stw	r18,8(sp)
   473d0:	2825883a 	mov	r18,r5
   473d4:	89400304 	addi	r5,r17,12
   473d8:	dc000015 	stw	r16,0(sp)
   473dc:	dfc00315 	stw	ra,12(sp)
   473e0:	00481cc0 	call	481cc <_malloc_r>
   473e4:	0021883a 	mov	r16,zero
   473e8:	880d883a 	mov	r6,r17
   473ec:	000b883a 	mov	r5,zero
   473f0:	10000626 	beq	r2,zero,4740c <__sfmoreglue+0x4c>
   473f4:	11000304 	addi	r4,r2,12
   473f8:	14800115 	stw	r18,4(r2)
   473fc:	10000015 	stw	zero,0(r2)
   47400:	11000215 	stw	r4,8(r2)
   47404:	1021883a 	mov	r16,r2
   47408:	0048b700 	call	48b70 <memset>
   4740c:	8005883a 	mov	r2,r16
   47410:	dfc00317 	ldw	ra,12(sp)
   47414:	dc800217 	ldw	r18,8(sp)
   47418:	dc400117 	ldw	r17,4(sp)
   4741c:	dc000017 	ldw	r16,0(sp)
   47420:	dec00404 	addi	sp,sp,16
   47424:	f800283a 	ret

00047428 <__sfp>:
   47428:	defffd04 	addi	sp,sp,-12
   4742c:	00800174 	movhi	r2,5
   47430:	10873904 	addi	r2,r2,7396
   47434:	dc000015 	stw	r16,0(sp)
   47438:	14000017 	ldw	r16,0(r2)
   4743c:	dc400115 	stw	r17,4(sp)
   47440:	dfc00215 	stw	ra,8(sp)
   47444:	80800e17 	ldw	r2,56(r16)
   47448:	2023883a 	mov	r17,r4
   4744c:	10002626 	beq	r2,zero,474e8 <__sfp+0xc0>
   47450:	8400b804 	addi	r16,r16,736
   47454:	80800117 	ldw	r2,4(r16)
   47458:	81000217 	ldw	r4,8(r16)
   4745c:	10ffffc4 	addi	r3,r2,-1
   47460:	18000916 	blt	r3,zero,47488 <__sfp+0x60>
   47464:	2080030f 	ldh	r2,12(r4)
   47468:	10000b26 	beq	r2,zero,47498 <__sfp+0x70>
   4746c:	017fffc4 	movi	r5,-1
   47470:	00000206 	br	4747c <__sfp+0x54>
   47474:	2080030f 	ldh	r2,12(r4)
   47478:	10000726 	beq	r2,zero,47498 <__sfp+0x70>
   4747c:	18ffffc4 	addi	r3,r3,-1
   47480:	21001704 	addi	r4,r4,92
   47484:	197ffb1e 	bne	r3,r5,47474 <__sfp+0x4c>
   47488:	80800017 	ldw	r2,0(r16)
   4748c:	10001926 	beq	r2,zero,474f4 <__sfp+0xcc>
   47490:	1021883a 	mov	r16,r2
   47494:	003fef06 	br	47454 <__sfp+0x2c>
   47498:	00bfffc4 	movi	r2,-1
   4749c:	00c00044 	movi	r3,1
   474a0:	2080038d 	sth	r2,14(r4)
   474a4:	20c0030d 	sth	r3,12(r4)
   474a8:	20000015 	stw	zero,0(r4)
   474ac:	20000215 	stw	zero,8(r4)
   474b0:	20000115 	stw	zero,4(r4)
   474b4:	20000415 	stw	zero,16(r4)
   474b8:	20000515 	stw	zero,20(r4)
   474bc:	20000615 	stw	zero,24(r4)
   474c0:	20000c15 	stw	zero,48(r4)
   474c4:	20000d15 	stw	zero,52(r4)
   474c8:	20001115 	stw	zero,68(r4)
   474cc:	20001215 	stw	zero,72(r4)
   474d0:	2005883a 	mov	r2,r4
   474d4:	dfc00217 	ldw	ra,8(sp)
   474d8:	dc400117 	ldw	r17,4(sp)
   474dc:	dc000017 	ldw	r16,0(sp)
   474e0:	dec00304 	addi	sp,sp,12
   474e4:	f800283a 	ret
   474e8:	8009883a 	mov	r4,r16
   474ec:	00472c00 	call	472c0 <__sinit>
   474f0:	003fd706 	br	47450 <__sfp+0x28>
   474f4:	8809883a 	mov	r4,r17
   474f8:	01400104 	movi	r5,4
   474fc:	00473c00 	call	473c0 <__sfmoreglue>
   47500:	80800015 	stw	r2,0(r16)
   47504:	103fe21e 	bne	r2,zero,47490 <__sfp+0x68>
   47508:	00800304 	movi	r2,12
   4750c:	0009883a 	mov	r4,zero
   47510:	88800015 	stw	r2,0(r17)
   47514:	003fee06 	br	474d0 <__sfp+0xa8>

00047518 <_malloc_trim_r>:
   47518:	defffb04 	addi	sp,sp,-20
   4751c:	dcc00315 	stw	r19,12(sp)
   47520:	04c00174 	movhi	r19,5
   47524:	9cc17604 	addi	r19,r19,1496
   47528:	dc800215 	stw	r18,8(sp)
   4752c:	dc400115 	stw	r17,4(sp)
   47530:	dc000015 	stw	r16,0(sp)
   47534:	2823883a 	mov	r17,r5
   47538:	2025883a 	mov	r18,r4
   4753c:	dfc00415 	stw	ra,16(sp)
   47540:	004d0e80 	call	4d0e8 <__malloc_lock>
   47544:	98800217 	ldw	r2,8(r19)
   47548:	9009883a 	mov	r4,r18
   4754c:	000b883a 	mov	r5,zero
   47550:	10c00117 	ldw	r3,4(r2)
   47554:	00bfff04 	movi	r2,-4
   47558:	18a0703a 	and	r16,r3,r2
   4755c:	8463c83a 	sub	r17,r16,r17
   47560:	8c43fbc4 	addi	r17,r17,4079
   47564:	8822d33a 	srli	r17,r17,12
   47568:	0083ffc4 	movi	r2,4095
   4756c:	8c7fffc4 	addi	r17,r17,-1
   47570:	8822933a 	slli	r17,r17,12
   47574:	1440060e 	bge	r2,r17,47590 <_malloc_trim_r+0x78>
   47578:	004a2600 	call	4a260 <_sbrk_r>
   4757c:	98c00217 	ldw	r3,8(r19)
   47580:	9009883a 	mov	r4,r18
   47584:	044bc83a 	sub	r5,zero,r17
   47588:	80c7883a 	add	r3,r16,r3
   4758c:	10c00926 	beq	r2,r3,475b4 <_malloc_trim_r+0x9c>
   47590:	004d1080 	call	4d108 <__malloc_unlock>
   47594:	0005883a 	mov	r2,zero
   47598:	dfc00417 	ldw	ra,16(sp)
   4759c:	dcc00317 	ldw	r19,12(sp)
   475a0:	dc800217 	ldw	r18,8(sp)
   475a4:	dc400117 	ldw	r17,4(sp)
   475a8:	dc000017 	ldw	r16,0(sp)
   475ac:	dec00504 	addi	sp,sp,20
   475b0:	f800283a 	ret
   475b4:	9009883a 	mov	r4,r18
   475b8:	004a2600 	call	4a260 <_sbrk_r>
   475bc:	844dc83a 	sub	r6,r16,r17
   475c0:	00ffffc4 	movi	r3,-1
   475c4:	9009883a 	mov	r4,r18
   475c8:	000b883a 	mov	r5,zero
   475cc:	01c00174 	movhi	r7,5
   475d0:	39ce6004 	addi	r7,r7,14720
   475d4:	31800054 	ori	r6,r6,1
   475d8:	10c00926 	beq	r2,r3,47600 <_malloc_trim_r+0xe8>
   475dc:	38800017 	ldw	r2,0(r7)
   475e0:	98c00217 	ldw	r3,8(r19)
   475e4:	9009883a 	mov	r4,r18
   475e8:	1445c83a 	sub	r2,r2,r17
   475ec:	38800015 	stw	r2,0(r7)
   475f0:	19800115 	stw	r6,4(r3)
   475f4:	004d1080 	call	4d108 <__malloc_unlock>
   475f8:	00800044 	movi	r2,1
   475fc:	003fe606 	br	47598 <_malloc_trim_r+0x80>
   47600:	004a2600 	call	4a260 <_sbrk_r>
   47604:	99800217 	ldw	r6,8(r19)
   47608:	100f883a 	mov	r7,r2
   4760c:	9009883a 	mov	r4,r18
   47610:	1187c83a 	sub	r3,r2,r6
   47614:	008003c4 	movi	r2,15
   47618:	19400054 	ori	r5,r3,1
   4761c:	10ffdc0e 	bge	r2,r3,47590 <_malloc_trim_r+0x78>
   47620:	00800174 	movhi	r2,5
   47624:	10873d04 	addi	r2,r2,7412
   47628:	10c00017 	ldw	r3,0(r2)
   4762c:	00800174 	movhi	r2,5
   47630:	108e6004 	addi	r2,r2,14720
   47634:	31400115 	stw	r5,4(r6)
   47638:	38c7c83a 	sub	r3,r7,r3
   4763c:	10c00015 	stw	r3,0(r2)
   47640:	003fd306 	br	47590 <_malloc_trim_r+0x78>

00047644 <_free_r>:
   47644:	defffd04 	addi	sp,sp,-12
   47648:	dc400115 	stw	r17,4(sp)
   4764c:	dc000015 	stw	r16,0(sp)
   47650:	dfc00215 	stw	ra,8(sp)
   47654:	2821883a 	mov	r16,r5
   47658:	2023883a 	mov	r17,r4
   4765c:	28005a26 	beq	r5,zero,477c8 <_free_r+0x184>
   47660:	004d0e80 	call	4d0e8 <__malloc_lock>
   47664:	823ffe04 	addi	r8,r16,-8
   47668:	41400117 	ldw	r5,4(r8)
   4766c:	00bfff84 	movi	r2,-2
   47670:	02800174 	movhi	r10,5
   47674:	52817604 	addi	r10,r10,1496
   47678:	288e703a 	and	r7,r5,r2
   4767c:	41cd883a 	add	r6,r8,r7
   47680:	30c00117 	ldw	r3,4(r6)
   47684:	51000217 	ldw	r4,8(r10)
   47688:	00bfff04 	movi	r2,-4
   4768c:	1892703a 	and	r9,r3,r2
   47690:	5017883a 	mov	r11,r10
   47694:	31006726 	beq	r6,r4,47834 <_free_r+0x1f0>
   47698:	2880004c 	andi	r2,r5,1
   4769c:	1005003a 	cmpeq	r2,r2,zero
   476a0:	32400115 	stw	r9,4(r6)
   476a4:	10001a1e 	bne	r2,zero,47710 <_free_r+0xcc>
   476a8:	000b883a 	mov	r5,zero
   476ac:	3247883a 	add	r3,r6,r9
   476b0:	18800117 	ldw	r2,4(r3)
   476b4:	1080004c 	andi	r2,r2,1
   476b8:	1000231e 	bne	r2,zero,47748 <_free_r+0x104>
   476bc:	280ac03a 	cmpne	r5,r5,zero
   476c0:	3a4f883a 	add	r7,r7,r9
   476c4:	2800451e 	bne	r5,zero,477dc <_free_r+0x198>
   476c8:	31000217 	ldw	r4,8(r6)
   476cc:	00800174 	movhi	r2,5
   476d0:	10817804 	addi	r2,r2,1504
   476d4:	20807b26 	beq	r4,r2,478c4 <_free_r+0x280>
   476d8:	30800317 	ldw	r2,12(r6)
   476dc:	3a07883a 	add	r3,r7,r8
   476e0:	19c00015 	stw	r7,0(r3)
   476e4:	11000215 	stw	r4,8(r2)
   476e8:	20800315 	stw	r2,12(r4)
   476ec:	38800054 	ori	r2,r7,1
   476f0:	40800115 	stw	r2,4(r8)
   476f4:	28001a26 	beq	r5,zero,47760 <_free_r+0x11c>
   476f8:	8809883a 	mov	r4,r17
   476fc:	dfc00217 	ldw	ra,8(sp)
   47700:	dc400117 	ldw	r17,4(sp)
   47704:	dc000017 	ldw	r16,0(sp)
   47708:	dec00304 	addi	sp,sp,12
   4770c:	004d1081 	jmpi	4d108 <__malloc_unlock>
   47710:	80bffe17 	ldw	r2,-8(r16)
   47714:	50c00204 	addi	r3,r10,8
   47718:	4091c83a 	sub	r8,r8,r2
   4771c:	41000217 	ldw	r4,8(r8)
   47720:	388f883a 	add	r7,r7,r2
   47724:	20c06126 	beq	r4,r3,478ac <_free_r+0x268>
   47728:	40800317 	ldw	r2,12(r8)
   4772c:	3247883a 	add	r3,r6,r9
   47730:	000b883a 	mov	r5,zero
   47734:	11000215 	stw	r4,8(r2)
   47738:	20800315 	stw	r2,12(r4)
   4773c:	18800117 	ldw	r2,4(r3)
   47740:	1080004c 	andi	r2,r2,1
   47744:	103fdd26 	beq	r2,zero,476bc <_free_r+0x78>
   47748:	38800054 	ori	r2,r7,1
   4774c:	3a07883a 	add	r3,r7,r8
   47750:	280ac03a 	cmpne	r5,r5,zero
   47754:	40800115 	stw	r2,4(r8)
   47758:	19c00015 	stw	r7,0(r3)
   4775c:	283fe61e 	bne	r5,zero,476f8 <_free_r+0xb4>
   47760:	00807fc4 	movi	r2,511
   47764:	11c01f2e 	bgeu	r2,r7,477e4 <_free_r+0x1a0>
   47768:	3806d27a 	srli	r3,r7,9
   4776c:	1800481e 	bne	r3,zero,47890 <_free_r+0x24c>
   47770:	3804d0fa 	srli	r2,r7,3
   47774:	100690fa 	slli	r3,r2,3
   47778:	1acd883a 	add	r6,r3,r11
   4777c:	31400217 	ldw	r5,8(r6)
   47780:	31405926 	beq	r6,r5,478e8 <_free_r+0x2a4>
   47784:	28800117 	ldw	r2,4(r5)
   47788:	00ffff04 	movi	r3,-4
   4778c:	10c4703a 	and	r2,r2,r3
   47790:	3880022e 	bgeu	r7,r2,4779c <_free_r+0x158>
   47794:	29400217 	ldw	r5,8(r5)
   47798:	317ffa1e 	bne	r6,r5,47784 <_free_r+0x140>
   4779c:	29800317 	ldw	r6,12(r5)
   477a0:	41800315 	stw	r6,12(r8)
   477a4:	41400215 	stw	r5,8(r8)
   477a8:	8809883a 	mov	r4,r17
   477ac:	2a000315 	stw	r8,12(r5)
   477b0:	32000215 	stw	r8,8(r6)
   477b4:	dfc00217 	ldw	ra,8(sp)
   477b8:	dc400117 	ldw	r17,4(sp)
   477bc:	dc000017 	ldw	r16,0(sp)
   477c0:	dec00304 	addi	sp,sp,12
   477c4:	004d1081 	jmpi	4d108 <__malloc_unlock>
   477c8:	dfc00217 	ldw	ra,8(sp)
   477cc:	dc400117 	ldw	r17,4(sp)
   477d0:	dc000017 	ldw	r16,0(sp)
   477d4:	dec00304 	addi	sp,sp,12
   477d8:	f800283a 	ret
   477dc:	31000217 	ldw	r4,8(r6)
   477e0:	003fbd06 	br	476d8 <_free_r+0x94>
   477e4:	3806d0fa 	srli	r3,r7,3
   477e8:	00800044 	movi	r2,1
   477ec:	51400117 	ldw	r5,4(r10)
   477f0:	180890fa 	slli	r4,r3,3
   477f4:	1807d0ba 	srai	r3,r3,2
   477f8:	22c9883a 	add	r4,r4,r11
   477fc:	21800217 	ldw	r6,8(r4)
   47800:	10c4983a 	sll	r2,r2,r3
   47804:	41000315 	stw	r4,12(r8)
   47808:	41800215 	stw	r6,8(r8)
   4780c:	288ab03a 	or	r5,r5,r2
   47810:	22000215 	stw	r8,8(r4)
   47814:	8809883a 	mov	r4,r17
   47818:	51400115 	stw	r5,4(r10)
   4781c:	32000315 	stw	r8,12(r6)
   47820:	dfc00217 	ldw	ra,8(sp)
   47824:	dc400117 	ldw	r17,4(sp)
   47828:	dc000017 	ldw	r16,0(sp)
   4782c:	dec00304 	addi	sp,sp,12
   47830:	004d1081 	jmpi	4d108 <__malloc_unlock>
   47834:	2880004c 	andi	r2,r5,1
   47838:	3a4d883a 	add	r6,r7,r9
   4783c:	1000071e 	bne	r2,zero,4785c <_free_r+0x218>
   47840:	80bffe17 	ldw	r2,-8(r16)
   47844:	4091c83a 	sub	r8,r8,r2
   47848:	41000317 	ldw	r4,12(r8)
   4784c:	40c00217 	ldw	r3,8(r8)
   47850:	308d883a 	add	r6,r6,r2
   47854:	20c00215 	stw	r3,8(r4)
   47858:	19000315 	stw	r4,12(r3)
   4785c:	00800174 	movhi	r2,5
   47860:	10873c04 	addi	r2,r2,7408
   47864:	11000017 	ldw	r4,0(r2)
   47868:	30c00054 	ori	r3,r6,1
   4786c:	52000215 	stw	r8,8(r10)
   47870:	40c00115 	stw	r3,4(r8)
   47874:	313fa036 	bltu	r6,r4,476f8 <_free_r+0xb4>
   47878:	00800174 	movhi	r2,5
   4787c:	108e5604 	addi	r2,r2,14680
   47880:	11400017 	ldw	r5,0(r2)
   47884:	8809883a 	mov	r4,r17
   47888:	00475180 	call	47518 <_malloc_trim_r>
   4788c:	003f9a06 	br	476f8 <_free_r+0xb4>
   47890:	00800104 	movi	r2,4
   47894:	10c0072e 	bgeu	r2,r3,478b4 <_free_r+0x270>
   47898:	00800504 	movi	r2,20
   4789c:	10c01936 	bltu	r2,r3,47904 <_free_r+0x2c0>
   478a0:	188016c4 	addi	r2,r3,91
   478a4:	100690fa 	slli	r3,r2,3
   478a8:	003fb306 	br	47778 <_free_r+0x134>
   478ac:	01400044 	movi	r5,1
   478b0:	003f7e06 	br	476ac <_free_r+0x68>
   478b4:	3804d1ba 	srli	r2,r7,6
   478b8:	10800e04 	addi	r2,r2,56
   478bc:	100690fa 	slli	r3,r2,3
   478c0:	003fad06 	br	47778 <_free_r+0x134>
   478c4:	22000315 	stw	r8,12(r4)
   478c8:	22000215 	stw	r8,8(r4)
   478cc:	3a05883a 	add	r2,r7,r8
   478d0:	38c00054 	ori	r3,r7,1
   478d4:	11c00015 	stw	r7,0(r2)
   478d8:	41000215 	stw	r4,8(r8)
   478dc:	40c00115 	stw	r3,4(r8)
   478e0:	41000315 	stw	r4,12(r8)
   478e4:	003f8406 	br	476f8 <_free_r+0xb4>
   478e8:	1005d0ba 	srai	r2,r2,2
   478ec:	00c00044 	movi	r3,1
   478f0:	51000117 	ldw	r4,4(r10)
   478f4:	1886983a 	sll	r3,r3,r2
   478f8:	20c8b03a 	or	r4,r4,r3
   478fc:	51000115 	stw	r4,4(r10)
   47900:	003fa706 	br	477a0 <_free_r+0x15c>
   47904:	00801504 	movi	r2,84
   47908:	10c00436 	bltu	r2,r3,4791c <_free_r+0x2d8>
   4790c:	3804d33a 	srli	r2,r7,12
   47910:	10801b84 	addi	r2,r2,110
   47914:	100690fa 	slli	r3,r2,3
   47918:	003f9706 	br	47778 <_free_r+0x134>
   4791c:	00805504 	movi	r2,340
   47920:	10c00436 	bltu	r2,r3,47934 <_free_r+0x2f0>
   47924:	3804d3fa 	srli	r2,r7,15
   47928:	10801dc4 	addi	r2,r2,119
   4792c:	100690fa 	slli	r3,r2,3
   47930:	003f9106 	br	47778 <_free_r+0x134>
   47934:	00815504 	movi	r2,1364
   47938:	10c0032e 	bgeu	r2,r3,47948 <_free_r+0x304>
   4793c:	00801f84 	movi	r2,126
   47940:	00c0fc04 	movi	r3,1008
   47944:	003f8c06 	br	47778 <_free_r+0x134>
   47948:	3804d4ba 	srli	r2,r7,18
   4794c:	10801f04 	addi	r2,r2,124
   47950:	100690fa 	slli	r3,r2,3
   47954:	003f8806 	br	47778 <_free_r+0x134>

00047958 <__sfvwrite_r>:
   47958:	30800217 	ldw	r2,8(r6)
   4795c:	defff504 	addi	sp,sp,-44
   47960:	df000915 	stw	fp,36(sp)
   47964:	dd800715 	stw	r22,28(sp)
   47968:	dc800315 	stw	r18,12(sp)
   4796c:	dfc00a15 	stw	ra,40(sp)
   47970:	ddc00815 	stw	r23,32(sp)
   47974:	dd400615 	stw	r21,24(sp)
   47978:	dd000515 	stw	r20,20(sp)
   4797c:	dcc00415 	stw	r19,16(sp)
   47980:	dc400215 	stw	r17,8(sp)
   47984:	dc000115 	stw	r16,4(sp)
   47988:	302d883a 	mov	r22,r6
   4798c:	2039883a 	mov	fp,r4
   47990:	2825883a 	mov	r18,r5
   47994:	10001c26 	beq	r2,zero,47a08 <__sfvwrite_r+0xb0>
   47998:	29c0030b 	ldhu	r7,12(r5)
   4799c:	3880020c 	andi	r2,r7,8
   479a0:	10002726 	beq	r2,zero,47a40 <__sfvwrite_r+0xe8>
   479a4:	28800417 	ldw	r2,16(r5)
   479a8:	10002526 	beq	r2,zero,47a40 <__sfvwrite_r+0xe8>
   479ac:	3880008c 	andi	r2,r7,2
   479b0:	b5400017 	ldw	r21,0(r22)
   479b4:	10002826 	beq	r2,zero,47a58 <__sfvwrite_r+0x100>
   479b8:	0021883a 	mov	r16,zero
   479bc:	0023883a 	mov	r17,zero
   479c0:	880d883a 	mov	r6,r17
   479c4:	e009883a 	mov	r4,fp
   479c8:	00810004 	movi	r2,1024
   479cc:	80006e26 	beq	r16,zero,47b88 <__sfvwrite_r+0x230>
   479d0:	800f883a 	mov	r7,r16
   479d4:	91400717 	ldw	r5,28(r18)
   479d8:	1400012e 	bgeu	r2,r16,479e0 <__sfvwrite_r+0x88>
   479dc:	100f883a 	mov	r7,r2
   479e0:	90c00917 	ldw	r3,36(r18)
   479e4:	183ee83a 	callr	r3
   479e8:	1007883a 	mov	r3,r2
   479ec:	80a1c83a 	sub	r16,r16,r2
   479f0:	88a3883a 	add	r17,r17,r2
   479f4:	00806d0e 	bge	zero,r2,47bac <__sfvwrite_r+0x254>
   479f8:	b0800217 	ldw	r2,8(r22)
   479fc:	10c5c83a 	sub	r2,r2,r3
   47a00:	b0800215 	stw	r2,8(r22)
   47a04:	103fee1e 	bne	r2,zero,479c0 <__sfvwrite_r+0x68>
   47a08:	0009883a 	mov	r4,zero
   47a0c:	2005883a 	mov	r2,r4
   47a10:	dfc00a17 	ldw	ra,40(sp)
   47a14:	df000917 	ldw	fp,36(sp)
   47a18:	ddc00817 	ldw	r23,32(sp)
   47a1c:	dd800717 	ldw	r22,28(sp)
   47a20:	dd400617 	ldw	r21,24(sp)
   47a24:	dd000517 	ldw	r20,20(sp)
   47a28:	dcc00417 	ldw	r19,16(sp)
   47a2c:	dc800317 	ldw	r18,12(sp)
   47a30:	dc400217 	ldw	r17,8(sp)
   47a34:	dc000117 	ldw	r16,4(sp)
   47a38:	dec00b04 	addi	sp,sp,44
   47a3c:	f800283a 	ret
   47a40:	00457200 	call	45720 <__swsetup_r>
   47a44:	1000e41e 	bne	r2,zero,47dd8 <__sfvwrite_r+0x480>
   47a48:	91c0030b 	ldhu	r7,12(r18)
   47a4c:	b5400017 	ldw	r21,0(r22)
   47a50:	3880008c 	andi	r2,r7,2
   47a54:	103fd81e 	bne	r2,zero,479b8 <__sfvwrite_r+0x60>
   47a58:	3880004c 	andi	r2,r7,1
   47a5c:	1005003a 	cmpeq	r2,r2,zero
   47a60:	10005726 	beq	r2,zero,47bc0 <__sfvwrite_r+0x268>
   47a64:	0029883a 	mov	r20,zero
   47a68:	002f883a 	mov	r23,zero
   47a6c:	a0004226 	beq	r20,zero,47b78 <__sfvwrite_r+0x220>
   47a70:	3880800c 	andi	r2,r7,512
   47a74:	94000217 	ldw	r16,8(r18)
   47a78:	10008b26 	beq	r2,zero,47ca8 <__sfvwrite_r+0x350>
   47a7c:	800d883a 	mov	r6,r16
   47a80:	a400a536 	bltu	r20,r16,47d18 <__sfvwrite_r+0x3c0>
   47a84:	3881200c 	andi	r2,r7,1152
   47a88:	10002726 	beq	r2,zero,47b28 <__sfvwrite_r+0x1d0>
   47a8c:	90800517 	ldw	r2,20(r18)
   47a90:	92000417 	ldw	r8,16(r18)
   47a94:	91400017 	ldw	r5,0(r18)
   47a98:	1087883a 	add	r3,r2,r2
   47a9c:	1887883a 	add	r3,r3,r2
   47aa0:	1808d7fa 	srli	r4,r3,31
   47aa4:	2a21c83a 	sub	r16,r5,r8
   47aa8:	80800044 	addi	r2,r16,1
   47aac:	20c9883a 	add	r4,r4,r3
   47ab0:	2027d07a 	srai	r19,r4,1
   47ab4:	a085883a 	add	r2,r20,r2
   47ab8:	980d883a 	mov	r6,r19
   47abc:	9880022e 	bgeu	r19,r2,47ac8 <__sfvwrite_r+0x170>
   47ac0:	1027883a 	mov	r19,r2
   47ac4:	100d883a 	mov	r6,r2
   47ac8:	3881000c 	andi	r2,r7,1024
   47acc:	1000b826 	beq	r2,zero,47db0 <__sfvwrite_r+0x458>
   47ad0:	300b883a 	mov	r5,r6
   47ad4:	e009883a 	mov	r4,fp
   47ad8:	00481cc0 	call	481cc <_malloc_r>
   47adc:	10003126 	beq	r2,zero,47ba4 <__sfvwrite_r+0x24c>
   47ae0:	91400417 	ldw	r5,16(r18)
   47ae4:	1009883a 	mov	r4,r2
   47ae8:	800d883a 	mov	r6,r16
   47aec:	1023883a 	mov	r17,r2
   47af0:	00489f00 	call	489f0 <memcpy>
   47af4:	90c0030b 	ldhu	r3,12(r18)
   47af8:	00beffc4 	movi	r2,-1025
   47afc:	1886703a 	and	r3,r3,r2
   47b00:	18c02014 	ori	r3,r3,128
   47b04:	90c0030d 	sth	r3,12(r18)
   47b08:	9c07c83a 	sub	r3,r19,r16
   47b0c:	8c05883a 	add	r2,r17,r16
   47b10:	a00d883a 	mov	r6,r20
   47b14:	a021883a 	mov	r16,r20
   47b18:	90800015 	stw	r2,0(r18)
   47b1c:	90c00215 	stw	r3,8(r18)
   47b20:	94400415 	stw	r17,16(r18)
   47b24:	94c00515 	stw	r19,20(r18)
   47b28:	91000017 	ldw	r4,0(r18)
   47b2c:	b80b883a 	mov	r5,r23
   47b30:	a023883a 	mov	r17,r20
   47b34:	0048a900 	call	48a90 <memmove>
   47b38:	90c00217 	ldw	r3,8(r18)
   47b3c:	90800017 	ldw	r2,0(r18)
   47b40:	a027883a 	mov	r19,r20
   47b44:	1c07c83a 	sub	r3,r3,r16
   47b48:	1405883a 	add	r2,r2,r16
   47b4c:	90c00215 	stw	r3,8(r18)
   47b50:	a021883a 	mov	r16,r20
   47b54:	90800015 	stw	r2,0(r18)
   47b58:	b0800217 	ldw	r2,8(r22)
   47b5c:	1405c83a 	sub	r2,r2,r16
   47b60:	b0800215 	stw	r2,8(r22)
   47b64:	103fa826 	beq	r2,zero,47a08 <__sfvwrite_r+0xb0>
   47b68:	a469c83a 	sub	r20,r20,r17
   47b6c:	91c0030b 	ldhu	r7,12(r18)
   47b70:	bcef883a 	add	r23,r23,r19
   47b74:	a03fbe1e 	bne	r20,zero,47a70 <__sfvwrite_r+0x118>
   47b78:	adc00017 	ldw	r23,0(r21)
   47b7c:	ad000117 	ldw	r20,4(r21)
   47b80:	ad400204 	addi	r21,r21,8
   47b84:	003fb906 	br	47a6c <__sfvwrite_r+0x114>
   47b88:	ac400017 	ldw	r17,0(r21)
   47b8c:	ac000117 	ldw	r16,4(r21)
   47b90:	ad400204 	addi	r21,r21,8
   47b94:	003f8a06 	br	479c0 <__sfvwrite_r+0x68>
   47b98:	91400417 	ldw	r5,16(r18)
   47b9c:	e009883a 	mov	r4,fp
   47ba0:	00476440 	call	47644 <_free_r>
   47ba4:	00800304 	movi	r2,12
   47ba8:	e0800015 	stw	r2,0(fp)
   47bac:	9080030b 	ldhu	r2,12(r18)
   47bb0:	013fffc4 	movi	r4,-1
   47bb4:	10801014 	ori	r2,r2,64
   47bb8:	9080030d 	sth	r2,12(r18)
   47bbc:	003f9306 	br	47a0c <__sfvwrite_r+0xb4>
   47bc0:	0027883a 	mov	r19,zero
   47bc4:	002f883a 	mov	r23,zero
   47bc8:	d8000015 	stw	zero,0(sp)
   47bcc:	0029883a 	mov	r20,zero
   47bd0:	98001e26 	beq	r19,zero,47c4c <__sfvwrite_r+0x2f4>
   47bd4:	d8c00017 	ldw	r3,0(sp)
   47bd8:	1804c03a 	cmpne	r2,r3,zero
   47bdc:	10005e26 	beq	r2,zero,47d58 <__sfvwrite_r+0x400>
   47be0:	9821883a 	mov	r16,r19
   47be4:	a4c0012e 	bgeu	r20,r19,47bec <__sfvwrite_r+0x294>
   47be8:	a021883a 	mov	r16,r20
   47bec:	91000017 	ldw	r4,0(r18)
   47bf0:	90800417 	ldw	r2,16(r18)
   47bf4:	91800217 	ldw	r6,8(r18)
   47bf8:	91c00517 	ldw	r7,20(r18)
   47bfc:	1100022e 	bgeu	r2,r4,47c08 <__sfvwrite_r+0x2b0>
   47c00:	31e3883a 	add	r17,r6,r7
   47c04:	8c001616 	blt	r17,r16,47c60 <__sfvwrite_r+0x308>
   47c08:	81c03816 	blt	r16,r7,47cec <__sfvwrite_r+0x394>
   47c0c:	90c00917 	ldw	r3,36(r18)
   47c10:	91400717 	ldw	r5,28(r18)
   47c14:	e009883a 	mov	r4,fp
   47c18:	b80d883a 	mov	r6,r23
   47c1c:	183ee83a 	callr	r3
   47c20:	1023883a 	mov	r17,r2
   47c24:	00bfe10e 	bge	zero,r2,47bac <__sfvwrite_r+0x254>
   47c28:	a469c83a 	sub	r20,r20,r17
   47c2c:	a0001826 	beq	r20,zero,47c90 <__sfvwrite_r+0x338>
   47c30:	b0800217 	ldw	r2,8(r22)
   47c34:	1445c83a 	sub	r2,r2,r17
   47c38:	b0800215 	stw	r2,8(r22)
   47c3c:	103f7226 	beq	r2,zero,47a08 <__sfvwrite_r+0xb0>
   47c40:	9c67c83a 	sub	r19,r19,r17
   47c44:	bc6f883a 	add	r23,r23,r17
   47c48:	983fe21e 	bne	r19,zero,47bd4 <__sfvwrite_r+0x27c>
   47c4c:	adc00017 	ldw	r23,0(r21)
   47c50:	acc00117 	ldw	r19,4(r21)
   47c54:	ad400204 	addi	r21,r21,8
   47c58:	d8000015 	stw	zero,0(sp)
   47c5c:	003fdc06 	br	47bd0 <__sfvwrite_r+0x278>
   47c60:	b80b883a 	mov	r5,r23
   47c64:	880d883a 	mov	r6,r17
   47c68:	0048a900 	call	48a90 <memmove>
   47c6c:	90c00017 	ldw	r3,0(r18)
   47c70:	e009883a 	mov	r4,fp
   47c74:	900b883a 	mov	r5,r18
   47c78:	1c47883a 	add	r3,r3,r17
   47c7c:	90c00015 	stw	r3,0(r18)
   47c80:	00470280 	call	47028 <_fflush_r>
   47c84:	103fc91e 	bne	r2,zero,47bac <__sfvwrite_r+0x254>
   47c88:	a469c83a 	sub	r20,r20,r17
   47c8c:	a03fe81e 	bne	r20,zero,47c30 <__sfvwrite_r+0x2d8>
   47c90:	e009883a 	mov	r4,fp
   47c94:	900b883a 	mov	r5,r18
   47c98:	00470280 	call	47028 <_fflush_r>
   47c9c:	103fc31e 	bne	r2,zero,47bac <__sfvwrite_r+0x254>
   47ca0:	d8000015 	stw	zero,0(sp)
   47ca4:	003fe206 	br	47c30 <__sfvwrite_r+0x2d8>
   47ca8:	91000017 	ldw	r4,0(r18)
   47cac:	90800417 	ldw	r2,16(r18)
   47cb0:	1100022e 	bgeu	r2,r4,47cbc <__sfvwrite_r+0x364>
   47cb4:	8023883a 	mov	r17,r16
   47cb8:	85003136 	bltu	r16,r20,47d80 <__sfvwrite_r+0x428>
   47cbc:	91c00517 	ldw	r7,20(r18)
   47cc0:	a1c01836 	bltu	r20,r7,47d24 <__sfvwrite_r+0x3cc>
   47cc4:	90c00917 	ldw	r3,36(r18)
   47cc8:	91400717 	ldw	r5,28(r18)
   47ccc:	e009883a 	mov	r4,fp
   47cd0:	b80d883a 	mov	r6,r23
   47cd4:	183ee83a 	callr	r3
   47cd8:	1021883a 	mov	r16,r2
   47cdc:	00bfb30e 	bge	zero,r2,47bac <__sfvwrite_r+0x254>
   47ce0:	1023883a 	mov	r17,r2
   47ce4:	1027883a 	mov	r19,r2
   47ce8:	003f9b06 	br	47b58 <__sfvwrite_r+0x200>
   47cec:	b80b883a 	mov	r5,r23
   47cf0:	800d883a 	mov	r6,r16
   47cf4:	0048a900 	call	48a90 <memmove>
   47cf8:	90c00217 	ldw	r3,8(r18)
   47cfc:	90800017 	ldw	r2,0(r18)
   47d00:	8023883a 	mov	r17,r16
   47d04:	1c07c83a 	sub	r3,r3,r16
   47d08:	1405883a 	add	r2,r2,r16
   47d0c:	90c00215 	stw	r3,8(r18)
   47d10:	90800015 	stw	r2,0(r18)
   47d14:	003fc406 	br	47c28 <__sfvwrite_r+0x2d0>
   47d18:	a00d883a 	mov	r6,r20
   47d1c:	a021883a 	mov	r16,r20
   47d20:	003f8106 	br	47b28 <__sfvwrite_r+0x1d0>
   47d24:	b80b883a 	mov	r5,r23
   47d28:	a00d883a 	mov	r6,r20
   47d2c:	0048a900 	call	48a90 <memmove>
   47d30:	90c00217 	ldw	r3,8(r18)
   47d34:	90800017 	ldw	r2,0(r18)
   47d38:	a021883a 	mov	r16,r20
   47d3c:	1d07c83a 	sub	r3,r3,r20
   47d40:	1505883a 	add	r2,r2,r20
   47d44:	a023883a 	mov	r17,r20
   47d48:	a027883a 	mov	r19,r20
   47d4c:	90c00215 	stw	r3,8(r18)
   47d50:	90800015 	stw	r2,0(r18)
   47d54:	003f8006 	br	47b58 <__sfvwrite_r+0x200>
   47d58:	b809883a 	mov	r4,r23
   47d5c:	01400284 	movi	r5,10
   47d60:	980d883a 	mov	r6,r19
   47d64:	004890c0 	call	4890c <memchr>
   47d68:	10001726 	beq	r2,zero,47dc8 <__sfvwrite_r+0x470>
   47d6c:	15c5c83a 	sub	r2,r2,r23
   47d70:	15000044 	addi	r20,r2,1
   47d74:	00800044 	movi	r2,1
   47d78:	d8800015 	stw	r2,0(sp)
   47d7c:	003f9806 	br	47be0 <__sfvwrite_r+0x288>
   47d80:	b80b883a 	mov	r5,r23
   47d84:	800d883a 	mov	r6,r16
   47d88:	0048a900 	call	48a90 <memmove>
   47d8c:	90c00017 	ldw	r3,0(r18)
   47d90:	e009883a 	mov	r4,fp
   47d94:	900b883a 	mov	r5,r18
   47d98:	1c07883a 	add	r3,r3,r16
   47d9c:	90c00015 	stw	r3,0(r18)
   47da0:	8027883a 	mov	r19,r16
   47da4:	00470280 	call	47028 <_fflush_r>
   47da8:	103f6b26 	beq	r2,zero,47b58 <__sfvwrite_r+0x200>
   47dac:	003f7f06 	br	47bac <__sfvwrite_r+0x254>
   47db0:	400b883a 	mov	r5,r8
   47db4:	e009883a 	mov	r4,fp
   47db8:	0049bfc0 	call	49bfc <_realloc_r>
   47dbc:	103f7626 	beq	r2,zero,47b98 <__sfvwrite_r+0x240>
   47dc0:	1023883a 	mov	r17,r2
   47dc4:	003f5006 	br	47b08 <__sfvwrite_r+0x1b0>
   47dc8:	00c00044 	movi	r3,1
   47dcc:	9d000044 	addi	r20,r19,1
   47dd0:	d8c00015 	stw	r3,0(sp)
   47dd4:	003f8206 	br	47be0 <__sfvwrite_r+0x288>
   47dd8:	9080030b 	ldhu	r2,12(r18)
   47ddc:	00c00244 	movi	r3,9
   47de0:	013fffc4 	movi	r4,-1
   47de4:	10801014 	ori	r2,r2,64
   47de8:	9080030d 	sth	r2,12(r18)
   47dec:	e0c00015 	stw	r3,0(fp)
   47df0:	003f0606 	br	47a0c <__sfvwrite_r+0xb4>

00047df4 <_fwalk_reent>:
   47df4:	defff704 	addi	sp,sp,-36
   47df8:	dcc00315 	stw	r19,12(sp)
   47dfc:	24c0b804 	addi	r19,r4,736
   47e00:	dd800615 	stw	r22,24(sp)
   47e04:	dd400515 	stw	r21,20(sp)
   47e08:	dfc00815 	stw	ra,32(sp)
   47e0c:	ddc00715 	stw	r23,28(sp)
   47e10:	dd000415 	stw	r20,16(sp)
   47e14:	dc800215 	stw	r18,8(sp)
   47e18:	dc400115 	stw	r17,4(sp)
   47e1c:	dc000015 	stw	r16,0(sp)
   47e20:	202b883a 	mov	r21,r4
   47e24:	282d883a 	mov	r22,r5
   47e28:	00472b00 	call	472b0 <__sfp_lock_acquire>
   47e2c:	98002126 	beq	r19,zero,47eb4 <_fwalk_reent+0xc0>
   47e30:	002f883a 	mov	r23,zero
   47e34:	9c800117 	ldw	r18,4(r19)
   47e38:	9c000217 	ldw	r16,8(r19)
   47e3c:	90bfffc4 	addi	r2,r18,-1
   47e40:	10000d16 	blt	r2,zero,47e78 <_fwalk_reent+0x84>
   47e44:	0023883a 	mov	r17,zero
   47e48:	053fffc4 	movi	r20,-1
   47e4c:	8080030f 	ldh	r2,12(r16)
   47e50:	8c400044 	addi	r17,r17,1
   47e54:	10000626 	beq	r2,zero,47e70 <_fwalk_reent+0x7c>
   47e58:	8080038f 	ldh	r2,14(r16)
   47e5c:	800b883a 	mov	r5,r16
   47e60:	a809883a 	mov	r4,r21
   47e64:	15000226 	beq	r2,r20,47e70 <_fwalk_reent+0x7c>
   47e68:	b03ee83a 	callr	r22
   47e6c:	b8aeb03a 	or	r23,r23,r2
   47e70:	84001704 	addi	r16,r16,92
   47e74:	947ff51e 	bne	r18,r17,47e4c <_fwalk_reent+0x58>
   47e78:	9cc00017 	ldw	r19,0(r19)
   47e7c:	983fed1e 	bne	r19,zero,47e34 <_fwalk_reent+0x40>
   47e80:	00472b40 	call	472b4 <__sfp_lock_release>
   47e84:	b805883a 	mov	r2,r23
   47e88:	dfc00817 	ldw	ra,32(sp)
   47e8c:	ddc00717 	ldw	r23,28(sp)
   47e90:	dd800617 	ldw	r22,24(sp)
   47e94:	dd400517 	ldw	r21,20(sp)
   47e98:	dd000417 	ldw	r20,16(sp)
   47e9c:	dcc00317 	ldw	r19,12(sp)
   47ea0:	dc800217 	ldw	r18,8(sp)
   47ea4:	dc400117 	ldw	r17,4(sp)
   47ea8:	dc000017 	ldw	r16,0(sp)
   47eac:	dec00904 	addi	sp,sp,36
   47eb0:	f800283a 	ret
   47eb4:	002f883a 	mov	r23,zero
   47eb8:	003ff106 	br	47e80 <_fwalk_reent+0x8c>

00047ebc <_fwalk>:
   47ebc:	defff804 	addi	sp,sp,-32
   47ec0:	dcc00315 	stw	r19,12(sp)
   47ec4:	24c0b804 	addi	r19,r4,736
   47ec8:	dd400515 	stw	r21,20(sp)
   47ecc:	dfc00715 	stw	ra,28(sp)
   47ed0:	dd800615 	stw	r22,24(sp)
   47ed4:	dd000415 	stw	r20,16(sp)
   47ed8:	dc800215 	stw	r18,8(sp)
   47edc:	dc400115 	stw	r17,4(sp)
   47ee0:	dc000015 	stw	r16,0(sp)
   47ee4:	282b883a 	mov	r21,r5
   47ee8:	00472b00 	call	472b0 <__sfp_lock_acquire>
   47eec:	98001f26 	beq	r19,zero,47f6c <_fwalk+0xb0>
   47ef0:	002d883a 	mov	r22,zero
   47ef4:	9c800117 	ldw	r18,4(r19)
   47ef8:	9c000217 	ldw	r16,8(r19)
   47efc:	90bfffc4 	addi	r2,r18,-1
   47f00:	10000c16 	blt	r2,zero,47f34 <_fwalk+0x78>
   47f04:	0023883a 	mov	r17,zero
   47f08:	053fffc4 	movi	r20,-1
   47f0c:	8080030f 	ldh	r2,12(r16)
   47f10:	8c400044 	addi	r17,r17,1
   47f14:	10000526 	beq	r2,zero,47f2c <_fwalk+0x70>
   47f18:	8080038f 	ldh	r2,14(r16)
   47f1c:	8009883a 	mov	r4,r16
   47f20:	15000226 	beq	r2,r20,47f2c <_fwalk+0x70>
   47f24:	a83ee83a 	callr	r21
   47f28:	b0acb03a 	or	r22,r22,r2
   47f2c:	84001704 	addi	r16,r16,92
   47f30:	947ff61e 	bne	r18,r17,47f0c <_fwalk+0x50>
   47f34:	9cc00017 	ldw	r19,0(r19)
   47f38:	983fee1e 	bne	r19,zero,47ef4 <_fwalk+0x38>
   47f3c:	00472b40 	call	472b4 <__sfp_lock_release>
   47f40:	b005883a 	mov	r2,r22
   47f44:	dfc00717 	ldw	ra,28(sp)
   47f48:	dd800617 	ldw	r22,24(sp)
   47f4c:	dd400517 	ldw	r21,20(sp)
   47f50:	dd000417 	ldw	r20,16(sp)
   47f54:	dcc00317 	ldw	r19,12(sp)
   47f58:	dc800217 	ldw	r18,8(sp)
   47f5c:	dc400117 	ldw	r17,4(sp)
   47f60:	dc000017 	ldw	r16,0(sp)
   47f64:	dec00804 	addi	sp,sp,32
   47f68:	f800283a 	ret
   47f6c:	002d883a 	mov	r22,zero
   47f70:	003ff206 	br	47f3c <_fwalk+0x80>

00047f74 <__locale_charset>:
   47f74:	d0a01017 	ldw	r2,-32704(gp)
   47f78:	f800283a 	ret

00047f7c <_localeconv_r>:
   47f7c:	00800174 	movhi	r2,5
   47f80:	10bfab04 	addi	r2,r2,-340
   47f84:	f800283a 	ret

00047f88 <localeconv>:
   47f88:	00800174 	movhi	r2,5
   47f8c:	10873804 	addi	r2,r2,7392
   47f90:	11000017 	ldw	r4,0(r2)
   47f94:	0047f7c1 	jmpi	47f7c <_localeconv_r>

00047f98 <_setlocale_r>:
   47f98:	defffc04 	addi	sp,sp,-16
   47f9c:	00c00174 	movhi	r3,5
   47fa0:	18ffa604 	addi	r3,r3,-360
   47fa4:	dc800215 	stw	r18,8(sp)
   47fa8:	dc400115 	stw	r17,4(sp)
   47fac:	dc000015 	stw	r16,0(sp)
   47fb0:	2023883a 	mov	r17,r4
   47fb4:	2825883a 	mov	r18,r5
   47fb8:	dfc00315 	stw	ra,12(sp)
   47fbc:	3021883a 	mov	r16,r6
   47fc0:	3009883a 	mov	r4,r6
   47fc4:	180b883a 	mov	r5,r3
   47fc8:	30000926 	beq	r6,zero,47ff0 <_setlocale_r+0x58>
   47fcc:	004a41c0 	call	4a41c <strcmp>
   47fd0:	8009883a 	mov	r4,r16
   47fd4:	01400174 	movhi	r5,5
   47fd8:	297f9104 	addi	r5,r5,-444
   47fdc:	10000b1e 	bne	r2,zero,4800c <_setlocale_r+0x74>
   47fe0:	8c000d15 	stw	r16,52(r17)
   47fe4:	8c800c15 	stw	r18,48(r17)
   47fe8:	00c00174 	movhi	r3,5
   47fec:	18ffa604 	addi	r3,r3,-360
   47ff0:	1805883a 	mov	r2,r3
   47ff4:	dfc00317 	ldw	ra,12(sp)
   47ff8:	dc800217 	ldw	r18,8(sp)
   47ffc:	dc400117 	ldw	r17,4(sp)
   48000:	dc000017 	ldw	r16,0(sp)
   48004:	dec00404 	addi	sp,sp,16
   48008:	f800283a 	ret
   4800c:	004a41c0 	call	4a41c <strcmp>
   48010:	0007883a 	mov	r3,zero
   48014:	103ff226 	beq	r2,zero,47fe0 <_setlocale_r+0x48>
   48018:	003ff506 	br	47ff0 <_setlocale_r+0x58>

0004801c <setlocale>:
   4801c:	01800174 	movhi	r6,5
   48020:	31873804 	addi	r6,r6,7392
   48024:	2007883a 	mov	r3,r4
   48028:	31000017 	ldw	r4,0(r6)
   4802c:	280d883a 	mov	r6,r5
   48030:	180b883a 	mov	r5,r3
   48034:	0047f981 	jmpi	47f98 <_setlocale_r>

00048038 <__smakebuf_r>:
   48038:	2880030b 	ldhu	r2,12(r5)
   4803c:	deffed04 	addi	sp,sp,-76
   48040:	dc401015 	stw	r17,64(sp)
   48044:	1080008c 	andi	r2,r2,2
   48048:	dc000f15 	stw	r16,60(sp)
   4804c:	dfc01215 	stw	ra,72(sp)
   48050:	dc801115 	stw	r18,68(sp)
   48054:	2821883a 	mov	r16,r5
   48058:	2023883a 	mov	r17,r4
   4805c:	10000b26 	beq	r2,zero,4808c <__smakebuf_r+0x54>
   48060:	28c010c4 	addi	r3,r5,67
   48064:	00800044 	movi	r2,1
   48068:	28800515 	stw	r2,20(r5)
   4806c:	28c00415 	stw	r3,16(r5)
   48070:	28c00015 	stw	r3,0(r5)
   48074:	dfc01217 	ldw	ra,72(sp)
   48078:	dc801117 	ldw	r18,68(sp)
   4807c:	dc401017 	ldw	r17,64(sp)
   48080:	dc000f17 	ldw	r16,60(sp)
   48084:	dec01304 	addi	sp,sp,76
   48088:	f800283a 	ret
   4808c:	2940038f 	ldh	r5,14(r5)
   48090:	28002116 	blt	r5,zero,48118 <__smakebuf_r+0xe0>
   48094:	d80d883a 	mov	r6,sp
   48098:	004a7980 	call	4a798 <_fstat_r>
   4809c:	10001e16 	blt	r2,zero,48118 <__smakebuf_r+0xe0>
   480a0:	d8800117 	ldw	r2,4(sp)
   480a4:	00e00014 	movui	r3,32768
   480a8:	113c000c 	andi	r4,r2,61440
   480ac:	20c03126 	beq	r4,r3,48174 <__smakebuf_r+0x13c>
   480b0:	8080030b 	ldhu	r2,12(r16)
   480b4:	00c80004 	movi	r3,8192
   480b8:	10820014 	ori	r2,r2,2048
   480bc:	8080030d 	sth	r2,12(r16)
   480c0:	20c01e26 	beq	r4,r3,4813c <__smakebuf_r+0x104>
   480c4:	04810004 	movi	r18,1024
   480c8:	8809883a 	mov	r4,r17
   480cc:	900b883a 	mov	r5,r18
   480d0:	00481cc0 	call	481cc <_malloc_r>
   480d4:	1009883a 	mov	r4,r2
   480d8:	10003126 	beq	r2,zero,481a0 <__smakebuf_r+0x168>
   480dc:	80c0030b 	ldhu	r3,12(r16)
   480e0:	00800134 	movhi	r2,4
   480e4:	109ce904 	addi	r2,r2,29604
   480e8:	88800f15 	stw	r2,60(r17)
   480ec:	18c02014 	ori	r3,r3,128
   480f0:	84800515 	stw	r18,20(r16)
   480f4:	80c0030d 	sth	r3,12(r16)
   480f8:	81000415 	stw	r4,16(r16)
   480fc:	81000015 	stw	r4,0(r16)
   48100:	dfc01217 	ldw	ra,72(sp)
   48104:	dc801117 	ldw	r18,68(sp)
   48108:	dc401017 	ldw	r17,64(sp)
   4810c:	dc000f17 	ldw	r16,60(sp)
   48110:	dec01304 	addi	sp,sp,76
   48114:	f800283a 	ret
   48118:	80c0030b 	ldhu	r3,12(r16)
   4811c:	1880200c 	andi	r2,r3,128
   48120:	10000426 	beq	r2,zero,48134 <__smakebuf_r+0xfc>
   48124:	04801004 	movi	r18,64
   48128:	18820014 	ori	r2,r3,2048
   4812c:	8080030d 	sth	r2,12(r16)
   48130:	003fe506 	br	480c8 <__smakebuf_r+0x90>
   48134:	04810004 	movi	r18,1024
   48138:	003ffb06 	br	48128 <__smakebuf_r+0xf0>
   4813c:	8140038f 	ldh	r5,14(r16)
   48140:	8809883a 	mov	r4,r17
   48144:	004a80c0 	call	4a80c <_isatty_r>
   48148:	103fde26 	beq	r2,zero,480c4 <__smakebuf_r+0x8c>
   4814c:	8080030b 	ldhu	r2,12(r16)
   48150:	80c010c4 	addi	r3,r16,67
   48154:	04810004 	movi	r18,1024
   48158:	10800054 	ori	r2,r2,1
   4815c:	8080030d 	sth	r2,12(r16)
   48160:	00800044 	movi	r2,1
   48164:	80c00415 	stw	r3,16(r16)
   48168:	80800515 	stw	r2,20(r16)
   4816c:	80c00015 	stw	r3,0(r16)
   48170:	003fd506 	br	480c8 <__smakebuf_r+0x90>
   48174:	80c00a17 	ldw	r3,40(r16)
   48178:	00800174 	movhi	r2,5
   4817c:	10a8b604 	addi	r2,r2,-23848
   48180:	18bfcb1e 	bne	r3,r2,480b0 <__smakebuf_r+0x78>
   48184:	8080030b 	ldhu	r2,12(r16)
   48188:	00c10004 	movi	r3,1024
   4818c:	1825883a 	mov	r18,r3
   48190:	10c4b03a 	or	r2,r2,r3
   48194:	8080030d 	sth	r2,12(r16)
   48198:	80c01315 	stw	r3,76(r16)
   4819c:	003fca06 	br	480c8 <__smakebuf_r+0x90>
   481a0:	8100030b 	ldhu	r4,12(r16)
   481a4:	2080800c 	andi	r2,r4,512
   481a8:	103fb21e 	bne	r2,zero,48074 <__smakebuf_r+0x3c>
   481ac:	80c010c4 	addi	r3,r16,67
   481b0:	21000094 	ori	r4,r4,2
   481b4:	00800044 	movi	r2,1
   481b8:	80800515 	stw	r2,20(r16)
   481bc:	8100030d 	sth	r4,12(r16)
   481c0:	80c00415 	stw	r3,16(r16)
   481c4:	80c00015 	stw	r3,0(r16)
   481c8:	003faa06 	br	48074 <__smakebuf_r+0x3c>

000481cc <_malloc_r>:
   481cc:	defff604 	addi	sp,sp,-40
   481d0:	28c002c4 	addi	r3,r5,11
   481d4:	00800584 	movi	r2,22
   481d8:	dc800215 	stw	r18,8(sp)
   481dc:	dfc00915 	stw	ra,36(sp)
   481e0:	df000815 	stw	fp,32(sp)
   481e4:	ddc00715 	stw	r23,28(sp)
   481e8:	dd800615 	stw	r22,24(sp)
   481ec:	dd400515 	stw	r21,20(sp)
   481f0:	dd000415 	stw	r20,16(sp)
   481f4:	dcc00315 	stw	r19,12(sp)
   481f8:	dc400115 	stw	r17,4(sp)
   481fc:	dc000015 	stw	r16,0(sp)
   48200:	2025883a 	mov	r18,r4
   48204:	10c01236 	bltu	r2,r3,48250 <_malloc_r+0x84>
   48208:	04400404 	movi	r17,16
   4820c:	8940142e 	bgeu	r17,r5,48260 <_malloc_r+0x94>
   48210:	00800304 	movi	r2,12
   48214:	0007883a 	mov	r3,zero
   48218:	90800015 	stw	r2,0(r18)
   4821c:	1805883a 	mov	r2,r3
   48220:	dfc00917 	ldw	ra,36(sp)
   48224:	df000817 	ldw	fp,32(sp)
   48228:	ddc00717 	ldw	r23,28(sp)
   4822c:	dd800617 	ldw	r22,24(sp)
   48230:	dd400517 	ldw	r21,20(sp)
   48234:	dd000417 	ldw	r20,16(sp)
   48238:	dcc00317 	ldw	r19,12(sp)
   4823c:	dc800217 	ldw	r18,8(sp)
   48240:	dc400117 	ldw	r17,4(sp)
   48244:	dc000017 	ldw	r16,0(sp)
   48248:	dec00a04 	addi	sp,sp,40
   4824c:	f800283a 	ret
   48250:	00bffe04 	movi	r2,-8
   48254:	18a2703a 	and	r17,r3,r2
   48258:	883fed16 	blt	r17,zero,48210 <_malloc_r+0x44>
   4825c:	897fec36 	bltu	r17,r5,48210 <_malloc_r+0x44>
   48260:	9009883a 	mov	r4,r18
   48264:	004d0e80 	call	4d0e8 <__malloc_lock>
   48268:	00807dc4 	movi	r2,503
   4826c:	14402b2e 	bgeu	r2,r17,4831c <_malloc_r+0x150>
   48270:	8806d27a 	srli	r3,r17,9
   48274:	18003f1e 	bne	r3,zero,48374 <_malloc_r+0x1a8>
   48278:	880cd0fa 	srli	r6,r17,3
   4827c:	300490fa 	slli	r2,r6,3
   48280:	02c00174 	movhi	r11,5
   48284:	5ac17604 	addi	r11,r11,1496
   48288:	12cb883a 	add	r5,r2,r11
   4828c:	2c000317 	ldw	r16,12(r5)
   48290:	580f883a 	mov	r7,r11
   48294:	2c00041e 	bne	r5,r16,482a8 <_malloc_r+0xdc>
   48298:	00000a06 	br	482c4 <_malloc_r+0xf8>
   4829c:	1800860e 	bge	r3,zero,484b8 <_malloc_r+0x2ec>
   482a0:	84000317 	ldw	r16,12(r16)
   482a4:	2c000726 	beq	r5,r16,482c4 <_malloc_r+0xf8>
   482a8:	80800117 	ldw	r2,4(r16)
   482ac:	00ffff04 	movi	r3,-4
   482b0:	10c8703a 	and	r4,r2,r3
   482b4:	2447c83a 	sub	r3,r4,r17
   482b8:	008003c4 	movi	r2,15
   482bc:	10fff70e 	bge	r2,r3,4829c <_malloc_r+0xd0>
   482c0:	31bfffc4 	addi	r6,r6,-1
   482c4:	32400044 	addi	r9,r6,1
   482c8:	02800174 	movhi	r10,5
   482cc:	52817804 	addi	r10,r10,1504
   482d0:	54000217 	ldw	r16,8(r10)
   482d4:	8280a026 	beq	r16,r10,48558 <_malloc_r+0x38c>
   482d8:	80800117 	ldw	r2,4(r16)
   482dc:	00ffff04 	movi	r3,-4
   482e0:	10ca703a 	and	r5,r2,r3
   482e4:	2c4dc83a 	sub	r6,r5,r17
   482e8:	008003c4 	movi	r2,15
   482ec:	11808316 	blt	r2,r6,484fc <_malloc_r+0x330>
   482f0:	52800315 	stw	r10,12(r10)
   482f4:	52800215 	stw	r10,8(r10)
   482f8:	30002916 	blt	r6,zero,483a0 <_malloc_r+0x1d4>
   482fc:	8147883a 	add	r3,r16,r5
   48300:	18800117 	ldw	r2,4(r3)
   48304:	9009883a 	mov	r4,r18
   48308:	10800054 	ori	r2,r2,1
   4830c:	18800115 	stw	r2,4(r3)
   48310:	004d1080 	call	4d108 <__malloc_unlock>
   48314:	80c00204 	addi	r3,r16,8
   48318:	003fc006 	br	4821c <_malloc_r+0x50>
   4831c:	02c00174 	movhi	r11,5
   48320:	5ac17604 	addi	r11,r11,1496
   48324:	8ac5883a 	add	r2,r17,r11
   48328:	14000317 	ldw	r16,12(r2)
   4832c:	580f883a 	mov	r7,r11
   48330:	8806d0fa 	srli	r3,r17,3
   48334:	14006c26 	beq	r2,r16,484e8 <_malloc_r+0x31c>
   48338:	80c00117 	ldw	r3,4(r16)
   4833c:	00bfff04 	movi	r2,-4
   48340:	81800317 	ldw	r6,12(r16)
   48344:	1886703a 	and	r3,r3,r2
   48348:	80c7883a 	add	r3,r16,r3
   4834c:	18800117 	ldw	r2,4(r3)
   48350:	81400217 	ldw	r5,8(r16)
   48354:	9009883a 	mov	r4,r18
   48358:	10800054 	ori	r2,r2,1
   4835c:	18800115 	stw	r2,4(r3)
   48360:	31400215 	stw	r5,8(r6)
   48364:	29800315 	stw	r6,12(r5)
   48368:	004d1080 	call	4d108 <__malloc_unlock>
   4836c:	80c00204 	addi	r3,r16,8
   48370:	003faa06 	br	4821c <_malloc_r+0x50>
   48374:	00800104 	movi	r2,4
   48378:	10c0052e 	bgeu	r2,r3,48390 <_malloc_r+0x1c4>
   4837c:	00800504 	movi	r2,20
   48380:	10c07836 	bltu	r2,r3,48564 <_malloc_r+0x398>
   48384:	198016c4 	addi	r6,r3,91
   48388:	300490fa 	slli	r2,r6,3
   4838c:	003fbc06 	br	48280 <_malloc_r+0xb4>
   48390:	8804d1ba 	srli	r2,r17,6
   48394:	11800e04 	addi	r6,r2,56
   48398:	300490fa 	slli	r2,r6,3
   4839c:	003fb806 	br	48280 <_malloc_r+0xb4>
   483a0:	00807fc4 	movi	r2,511
   483a4:	1140bb36 	bltu	r2,r5,48694 <_malloc_r+0x4c8>
   483a8:	2806d0fa 	srli	r3,r5,3
   483ac:	573ffe04 	addi	fp,r10,-8
   483b0:	00800044 	movi	r2,1
   483b4:	180890fa 	slli	r4,r3,3
   483b8:	1807d0ba 	srai	r3,r3,2
   483bc:	e1c00117 	ldw	r7,4(fp)
   483c0:	5909883a 	add	r4,r11,r4
   483c4:	21400217 	ldw	r5,8(r4)
   483c8:	10c4983a 	sll	r2,r2,r3
   483cc:	81000315 	stw	r4,12(r16)
   483d0:	81400215 	stw	r5,8(r16)
   483d4:	388eb03a 	or	r7,r7,r2
   483d8:	2c000315 	stw	r16,12(r5)
   483dc:	24000215 	stw	r16,8(r4)
   483e0:	e1c00115 	stw	r7,4(fp)
   483e4:	4807883a 	mov	r3,r9
   483e8:	4800cd16 	blt	r9,zero,48720 <_malloc_r+0x554>
   483ec:	1807d0ba 	srai	r3,r3,2
   483f0:	00800044 	movi	r2,1
   483f4:	10c8983a 	sll	r4,r2,r3
   483f8:	39004436 	bltu	r7,r4,4850c <_malloc_r+0x340>
   483fc:	21c4703a 	and	r2,r4,r7
   48400:	10000a1e 	bne	r2,zero,4842c <_malloc_r+0x260>
   48404:	2109883a 	add	r4,r4,r4
   48408:	00bfff04 	movi	r2,-4
   4840c:	4884703a 	and	r2,r9,r2
   48410:	3906703a 	and	r3,r7,r4
   48414:	12400104 	addi	r9,r2,4
   48418:	1800041e 	bne	r3,zero,4842c <_malloc_r+0x260>
   4841c:	2109883a 	add	r4,r4,r4
   48420:	3904703a 	and	r2,r7,r4
   48424:	4a400104 	addi	r9,r9,4
   48428:	103ffc26 	beq	r2,zero,4841c <_malloc_r+0x250>
   4842c:	480490fa 	slli	r2,r9,3
   48430:	4819883a 	mov	r12,r9
   48434:	023fff04 	movi	r8,-4
   48438:	589b883a 	add	r13,r11,r2
   4843c:	6807883a 	mov	r3,r13
   48440:	014003c4 	movi	r5,15
   48444:	1c000317 	ldw	r16,12(r3)
   48448:	1c00041e 	bne	r3,r16,4845c <_malloc_r+0x290>
   4844c:	0000a706 	br	486ec <_malloc_r+0x520>
   48450:	3000ab0e 	bge	r6,zero,48700 <_malloc_r+0x534>
   48454:	84000317 	ldw	r16,12(r16)
   48458:	1c00a426 	beq	r3,r16,486ec <_malloc_r+0x520>
   4845c:	80800117 	ldw	r2,4(r16)
   48460:	1204703a 	and	r2,r2,r8
   48464:	144dc83a 	sub	r6,r2,r17
   48468:	29bff90e 	bge	r5,r6,48450 <_malloc_r+0x284>
   4846c:	81000317 	ldw	r4,12(r16)
   48470:	80c00217 	ldw	r3,8(r16)
   48474:	89400054 	ori	r5,r17,1
   48478:	8445883a 	add	r2,r16,r17
   4847c:	20c00215 	stw	r3,8(r4)
   48480:	19000315 	stw	r4,12(r3)
   48484:	81400115 	stw	r5,4(r16)
   48488:	1187883a 	add	r3,r2,r6
   4848c:	31000054 	ori	r4,r6,1
   48490:	50800315 	stw	r2,12(r10)
   48494:	50800215 	stw	r2,8(r10)
   48498:	19800015 	stw	r6,0(r3)
   4849c:	11000115 	stw	r4,4(r2)
   484a0:	12800215 	stw	r10,8(r2)
   484a4:	12800315 	stw	r10,12(r2)
   484a8:	9009883a 	mov	r4,r18
   484ac:	004d1080 	call	4d108 <__malloc_unlock>
   484b0:	80c00204 	addi	r3,r16,8
   484b4:	003f5906 	br	4821c <_malloc_r+0x50>
   484b8:	8109883a 	add	r4,r16,r4
   484bc:	20800117 	ldw	r2,4(r4)
   484c0:	80c00217 	ldw	r3,8(r16)
   484c4:	81400317 	ldw	r5,12(r16)
   484c8:	10800054 	ori	r2,r2,1
   484cc:	20800115 	stw	r2,4(r4)
   484d0:	28c00215 	stw	r3,8(r5)
   484d4:	19400315 	stw	r5,12(r3)
   484d8:	9009883a 	mov	r4,r18
   484dc:	004d1080 	call	4d108 <__malloc_unlock>
   484e0:	80c00204 	addi	r3,r16,8
   484e4:	003f4d06 	br	4821c <_malloc_r+0x50>
   484e8:	80800204 	addi	r2,r16,8
   484ec:	14000317 	ldw	r16,12(r2)
   484f0:	143f911e 	bne	r2,r16,48338 <_malloc_r+0x16c>
   484f4:	1a400084 	addi	r9,r3,2
   484f8:	003f7306 	br	482c8 <_malloc_r+0xfc>
   484fc:	88c00054 	ori	r3,r17,1
   48500:	8445883a 	add	r2,r16,r17
   48504:	80c00115 	stw	r3,4(r16)
   48508:	003fdf06 	br	48488 <_malloc_r+0x2bc>
   4850c:	e4000217 	ldw	r16,8(fp)
   48510:	00bfff04 	movi	r2,-4
   48514:	80c00117 	ldw	r3,4(r16)
   48518:	802d883a 	mov	r22,r16
   4851c:	18aa703a 	and	r21,r3,r2
   48520:	ac401636 	bltu	r21,r17,4857c <_malloc_r+0x3b0>
   48524:	ac49c83a 	sub	r4,r21,r17
   48528:	008003c4 	movi	r2,15
   4852c:	1100130e 	bge	r2,r4,4857c <_malloc_r+0x3b0>
   48530:	88800054 	ori	r2,r17,1
   48534:	8447883a 	add	r3,r16,r17
   48538:	80800115 	stw	r2,4(r16)
   4853c:	20800054 	ori	r2,r4,1
   48540:	18800115 	stw	r2,4(r3)
   48544:	e0c00215 	stw	r3,8(fp)
   48548:	9009883a 	mov	r4,r18
   4854c:	004d1080 	call	4d108 <__malloc_unlock>
   48550:	80c00204 	addi	r3,r16,8
   48554:	003f3106 	br	4821c <_malloc_r+0x50>
   48558:	39c00117 	ldw	r7,4(r7)
   4855c:	573ffe04 	addi	fp,r10,-8
   48560:	003fa006 	br	483e4 <_malloc_r+0x218>
   48564:	00801504 	movi	r2,84
   48568:	10c06736 	bltu	r2,r3,48708 <_malloc_r+0x53c>
   4856c:	8804d33a 	srli	r2,r17,12
   48570:	11801b84 	addi	r6,r2,110
   48574:	300490fa 	slli	r2,r6,3
   48578:	003f4106 	br	48280 <_malloc_r+0xb4>
   4857c:	d0a72b17 	ldw	r2,-25428(gp)
   48580:	d0e01217 	ldw	r3,-32696(gp)
   48584:	053fffc4 	movi	r20,-1
   48588:	10800404 	addi	r2,r2,16
   4858c:	88a7883a 	add	r19,r17,r2
   48590:	1d000326 	beq	r3,r20,485a0 <_malloc_r+0x3d4>
   48594:	98c3ffc4 	addi	r3,r19,4095
   48598:	00bc0004 	movi	r2,-4096
   4859c:	18a6703a 	and	r19,r3,r2
   485a0:	9009883a 	mov	r4,r18
   485a4:	980b883a 	mov	r5,r19
   485a8:	004a2600 	call	4a260 <_sbrk_r>
   485ac:	1009883a 	mov	r4,r2
   485b0:	15000426 	beq	r2,r20,485c4 <_malloc_r+0x3f8>
   485b4:	854b883a 	add	r5,r16,r21
   485b8:	1029883a 	mov	r20,r2
   485bc:	11405a2e 	bgeu	r2,r5,48728 <_malloc_r+0x55c>
   485c0:	87000c26 	beq	r16,fp,485f4 <_malloc_r+0x428>
   485c4:	e4000217 	ldw	r16,8(fp)
   485c8:	80c00117 	ldw	r3,4(r16)
   485cc:	00bfff04 	movi	r2,-4
   485d0:	1884703a 	and	r2,r3,r2
   485d4:	14400336 	bltu	r2,r17,485e4 <_malloc_r+0x418>
   485d8:	1449c83a 	sub	r4,r2,r17
   485dc:	008003c4 	movi	r2,15
   485e0:	113fd316 	blt	r2,r4,48530 <_malloc_r+0x364>
   485e4:	9009883a 	mov	r4,r18
   485e8:	004d1080 	call	4d108 <__malloc_unlock>
   485ec:	0007883a 	mov	r3,zero
   485f0:	003f0a06 	br	4821c <_malloc_r+0x50>
   485f4:	05c00174 	movhi	r23,5
   485f8:	bdce6004 	addi	r23,r23,14720
   485fc:	b8800017 	ldw	r2,0(r23)
   48600:	988d883a 	add	r6,r19,r2
   48604:	b9800015 	stw	r6,0(r23)
   48608:	d0e01217 	ldw	r3,-32696(gp)
   4860c:	00bfffc4 	movi	r2,-1
   48610:	18808e26 	beq	r3,r2,4884c <_malloc_r+0x680>
   48614:	2145c83a 	sub	r2,r4,r5
   48618:	3085883a 	add	r2,r6,r2
   4861c:	b8800015 	stw	r2,0(r23)
   48620:	20c001cc 	andi	r3,r4,7
   48624:	18005f1e 	bne	r3,zero,487a4 <_malloc_r+0x5d8>
   48628:	000b883a 	mov	r5,zero
   4862c:	a4c5883a 	add	r2,r20,r19
   48630:	1083ffcc 	andi	r2,r2,4095
   48634:	00c40004 	movi	r3,4096
   48638:	1887c83a 	sub	r3,r3,r2
   4863c:	28e7883a 	add	r19,r5,r3
   48640:	9009883a 	mov	r4,r18
   48644:	980b883a 	mov	r5,r19
   48648:	004a2600 	call	4a260 <_sbrk_r>
   4864c:	1007883a 	mov	r3,r2
   48650:	00bfffc4 	movi	r2,-1
   48654:	18807a26 	beq	r3,r2,48840 <_malloc_r+0x674>
   48658:	1d05c83a 	sub	r2,r3,r20
   4865c:	9885883a 	add	r2,r19,r2
   48660:	10c00054 	ori	r3,r2,1
   48664:	b8800017 	ldw	r2,0(r23)
   48668:	a021883a 	mov	r16,r20
   4866c:	a0c00115 	stw	r3,4(r20)
   48670:	9885883a 	add	r2,r19,r2
   48674:	b8800015 	stw	r2,0(r23)
   48678:	e5000215 	stw	r20,8(fp)
   4867c:	b7003626 	beq	r22,fp,48758 <_malloc_r+0x58c>
   48680:	018003c4 	movi	r6,15
   48684:	35404b36 	bltu	r6,r21,487b4 <_malloc_r+0x5e8>
   48688:	00800044 	movi	r2,1
   4868c:	a0800115 	stw	r2,4(r20)
   48690:	003fcd06 	br	485c8 <_malloc_r+0x3fc>
   48694:	2808d27a 	srli	r4,r5,9
   48698:	2000371e 	bne	r4,zero,48778 <_malloc_r+0x5ac>
   4869c:	2808d0fa 	srli	r4,r5,3
   486a0:	200690fa 	slli	r3,r4,3
   486a4:	1ad1883a 	add	r8,r3,r11
   486a8:	41800217 	ldw	r6,8(r8)
   486ac:	41805b26 	beq	r8,r6,4881c <_malloc_r+0x650>
   486b0:	30800117 	ldw	r2,4(r6)
   486b4:	00ffff04 	movi	r3,-4
   486b8:	10c4703a 	and	r2,r2,r3
   486bc:	2880022e 	bgeu	r5,r2,486c8 <_malloc_r+0x4fc>
   486c0:	31800217 	ldw	r6,8(r6)
   486c4:	41bffa1e 	bne	r8,r6,486b0 <_malloc_r+0x4e4>
   486c8:	32000317 	ldw	r8,12(r6)
   486cc:	39c00117 	ldw	r7,4(r7)
   486d0:	82000315 	stw	r8,12(r16)
   486d4:	81800215 	stw	r6,8(r16)
   486d8:	07000174 	movhi	fp,5
   486dc:	e7017604 	addi	fp,fp,1496
   486e0:	34000315 	stw	r16,12(r6)
   486e4:	44000215 	stw	r16,8(r8)
   486e8:	003f3e06 	br	483e4 <_malloc_r+0x218>
   486ec:	63000044 	addi	r12,r12,1
   486f0:	608000cc 	andi	r2,r12,3
   486f4:	10005d26 	beq	r2,zero,4886c <_malloc_r+0x6a0>
   486f8:	18c00204 	addi	r3,r3,8
   486fc:	003f5106 	br	48444 <_malloc_r+0x278>
   48700:	8089883a 	add	r4,r16,r2
   48704:	003f6d06 	br	484bc <_malloc_r+0x2f0>
   48708:	00805504 	movi	r2,340
   4870c:	10c02036 	bltu	r2,r3,48790 <_malloc_r+0x5c4>
   48710:	8804d3fa 	srli	r2,r17,15
   48714:	11801dc4 	addi	r6,r2,119
   48718:	300490fa 	slli	r2,r6,3
   4871c:	003ed806 	br	48280 <_malloc_r+0xb4>
   48720:	48c000c4 	addi	r3,r9,3
   48724:	003f3106 	br	483ec <_malloc_r+0x220>
   48728:	05c00174 	movhi	r23,5
   4872c:	bdce6004 	addi	r23,r23,14720
   48730:	b8800017 	ldw	r2,0(r23)
   48734:	988d883a 	add	r6,r19,r2
   48738:	b9800015 	stw	r6,0(r23)
   4873c:	293fb21e 	bne	r5,r4,48608 <_malloc_r+0x43c>
   48740:	2083ffcc 	andi	r2,r4,4095
   48744:	103fb01e 	bne	r2,zero,48608 <_malloc_r+0x43c>
   48748:	e4000217 	ldw	r16,8(fp)
   4874c:	9d45883a 	add	r2,r19,r21
   48750:	10800054 	ori	r2,r2,1
   48754:	80800115 	stw	r2,4(r16)
   48758:	b8c00017 	ldw	r3,0(r23)
   4875c:	d0a72c17 	ldw	r2,-25424(gp)
   48760:	10c0012e 	bgeu	r2,r3,48768 <_malloc_r+0x59c>
   48764:	d0e72c15 	stw	r3,-25424(gp)
   48768:	d0a72d17 	ldw	r2,-25420(gp)
   4876c:	10ff962e 	bgeu	r2,r3,485c8 <_malloc_r+0x3fc>
   48770:	d0e72d15 	stw	r3,-25420(gp)
   48774:	003f9406 	br	485c8 <_malloc_r+0x3fc>
   48778:	00800104 	movi	r2,4
   4877c:	11001e36 	bltu	r2,r4,487f8 <_malloc_r+0x62c>
   48780:	2804d1ba 	srli	r2,r5,6
   48784:	11000e04 	addi	r4,r2,56
   48788:	200690fa 	slli	r3,r4,3
   4878c:	003fc506 	br	486a4 <_malloc_r+0x4d8>
   48790:	00815504 	movi	r2,1364
   48794:	10c01d2e 	bgeu	r2,r3,4880c <_malloc_r+0x640>
   48798:	01801f84 	movi	r6,126
   4879c:	0080fc04 	movi	r2,1008
   487a0:	003eb706 	br	48280 <_malloc_r+0xb4>
   487a4:	00800204 	movi	r2,8
   487a8:	10cbc83a 	sub	r5,r2,r3
   487ac:	2169883a 	add	r20,r4,r5
   487b0:	003f9e06 	br	4862c <_malloc_r+0x460>
   487b4:	00bffe04 	movi	r2,-8
   487b8:	a93ffd04 	addi	r4,r21,-12
   487bc:	2088703a 	and	r4,r4,r2
   487c0:	b10b883a 	add	r5,r22,r4
   487c4:	00c00144 	movi	r3,5
   487c8:	28c00215 	stw	r3,8(r5)
   487cc:	28c00115 	stw	r3,4(r5)
   487d0:	b0800117 	ldw	r2,4(r22)
   487d4:	1080004c 	andi	r2,r2,1
   487d8:	2084b03a 	or	r2,r4,r2
   487dc:	b0800115 	stw	r2,4(r22)
   487e0:	313fdd2e 	bgeu	r6,r4,48758 <_malloc_r+0x58c>
   487e4:	b1400204 	addi	r5,r22,8
   487e8:	9009883a 	mov	r4,r18
   487ec:	00476440 	call	47644 <_free_r>
   487f0:	e4000217 	ldw	r16,8(fp)
   487f4:	003fd806 	br	48758 <_malloc_r+0x58c>
   487f8:	00800504 	movi	r2,20
   487fc:	11001536 	bltu	r2,r4,48854 <_malloc_r+0x688>
   48800:	210016c4 	addi	r4,r4,91
   48804:	200690fa 	slli	r3,r4,3
   48808:	003fa606 	br	486a4 <_malloc_r+0x4d8>
   4880c:	8804d4ba 	srli	r2,r17,18
   48810:	11801f04 	addi	r6,r2,124
   48814:	300490fa 	slli	r2,r6,3
   48818:	003e9906 	br	48280 <_malloc_r+0xb4>
   4881c:	2009d0ba 	srai	r4,r4,2
   48820:	01400174 	movhi	r5,5
   48824:	29417604 	addi	r5,r5,1496
   48828:	00c00044 	movi	r3,1
   4882c:	28800117 	ldw	r2,4(r5)
   48830:	1906983a 	sll	r3,r3,r4
   48834:	10c4b03a 	or	r2,r2,r3
   48838:	28800115 	stw	r2,4(r5)
   4883c:	003fa306 	br	486cc <_malloc_r+0x500>
   48840:	0027883a 	mov	r19,zero
   48844:	00c00044 	movi	r3,1
   48848:	003f8606 	br	48664 <_malloc_r+0x498>
   4884c:	d1201215 	stw	r4,-32696(gp)
   48850:	003f7306 	br	48620 <_malloc_r+0x454>
   48854:	00801504 	movi	r2,84
   48858:	11001936 	bltu	r2,r4,488c0 <_malloc_r+0x6f4>
   4885c:	2804d33a 	srli	r2,r5,12
   48860:	11001b84 	addi	r4,r2,110
   48864:	200690fa 	slli	r3,r4,3
   48868:	003f8e06 	br	486a4 <_malloc_r+0x4d8>
   4886c:	480b883a 	mov	r5,r9
   48870:	6807883a 	mov	r3,r13
   48874:	288000cc 	andi	r2,r5,3
   48878:	18fffe04 	addi	r3,r3,-8
   4887c:	297fffc4 	addi	r5,r5,-1
   48880:	10001526 	beq	r2,zero,488d8 <_malloc_r+0x70c>
   48884:	18800217 	ldw	r2,8(r3)
   48888:	10fffa26 	beq	r2,r3,48874 <_malloc_r+0x6a8>
   4888c:	2109883a 	add	r4,r4,r4
   48890:	393f1e36 	bltu	r7,r4,4850c <_malloc_r+0x340>
   48894:	203f1d26 	beq	r4,zero,4850c <_malloc_r+0x340>
   48898:	21c4703a 	and	r2,r4,r7
   4889c:	10000226 	beq	r2,zero,488a8 <_malloc_r+0x6dc>
   488a0:	6013883a 	mov	r9,r12
   488a4:	003ee106 	br	4842c <_malloc_r+0x260>
   488a8:	2109883a 	add	r4,r4,r4
   488ac:	3904703a 	and	r2,r7,r4
   488b0:	63000104 	addi	r12,r12,4
   488b4:	103ffc26 	beq	r2,zero,488a8 <_malloc_r+0x6dc>
   488b8:	6013883a 	mov	r9,r12
   488bc:	003edb06 	br	4842c <_malloc_r+0x260>
   488c0:	00805504 	movi	r2,340
   488c4:	11000836 	bltu	r2,r4,488e8 <_malloc_r+0x71c>
   488c8:	2804d3fa 	srli	r2,r5,15
   488cc:	11001dc4 	addi	r4,r2,119
   488d0:	200690fa 	slli	r3,r4,3
   488d4:	003f7306 	br	486a4 <_malloc_r+0x4d8>
   488d8:	0104303a 	nor	r2,zero,r4
   488dc:	388e703a 	and	r7,r7,r2
   488e0:	e1c00115 	stw	r7,4(fp)
   488e4:	003fe906 	br	4888c <_malloc_r+0x6c0>
   488e8:	00815504 	movi	r2,1364
   488ec:	1100032e 	bgeu	r2,r4,488fc <_malloc_r+0x730>
   488f0:	01001f84 	movi	r4,126
   488f4:	00c0fc04 	movi	r3,1008
   488f8:	003f6a06 	br	486a4 <_malloc_r+0x4d8>
   488fc:	2804d4ba 	srli	r2,r5,18
   48900:	11001f04 	addi	r4,r2,124
   48904:	200690fa 	slli	r3,r4,3
   48908:	003f6606 	br	486a4 <_malloc_r+0x4d8>

0004890c <memchr>:
   4890c:	008000c4 	movi	r2,3
   48910:	29403fcc 	andi	r5,r5,255
   48914:	2007883a 	mov	r3,r4
   48918:	1180022e 	bgeu	r2,r6,48924 <memchr+0x18>
   4891c:	2084703a 	and	r2,r4,r2
   48920:	10000b26 	beq	r2,zero,48950 <memchr+0x44>
   48924:	313fffc4 	addi	r4,r6,-1
   48928:	3000051e 	bne	r6,zero,48940 <memchr+0x34>
   4892c:	00002c06 	br	489e0 <memchr+0xd4>
   48930:	213fffc4 	addi	r4,r4,-1
   48934:	00bfffc4 	movi	r2,-1
   48938:	18c00044 	addi	r3,r3,1
   4893c:	20802826 	beq	r4,r2,489e0 <memchr+0xd4>
   48940:	18800003 	ldbu	r2,0(r3)
   48944:	28bffa1e 	bne	r5,r2,48930 <memchr+0x24>
   48948:	1805883a 	mov	r2,r3
   4894c:	f800283a 	ret
   48950:	0011883a 	mov	r8,zero
   48954:	0007883a 	mov	r3,zero
   48958:	01c00104 	movi	r7,4
   4895c:	4004923a 	slli	r2,r8,8
   48960:	18c00044 	addi	r3,r3,1
   48964:	1151883a 	add	r8,r2,r5
   48968:	19fffc1e 	bne	r3,r7,4895c <memchr+0x50>
   4896c:	02bfbff4 	movhi	r10,65279
   48970:	52bfbfc4 	addi	r10,r10,-257
   48974:	02602074 	movhi	r9,32897
   48978:	4a602004 	addi	r9,r9,-32640
   4897c:	02c000c4 	movi	r11,3
   48980:	20800017 	ldw	r2,0(r4)
   48984:	31bfff04 	addi	r6,r6,-4
   48988:	200f883a 	mov	r7,r4
   4898c:	1204f03a 	xor	r2,r2,r8
   48990:	1287883a 	add	r3,r2,r10
   48994:	1a46703a 	and	r3,r3,r9
   48998:	0084303a 	nor	r2,zero,r2
   4899c:	10c4703a 	and	r2,r2,r3
   489a0:	10000b26 	beq	r2,zero,489d0 <memchr+0xc4>
   489a4:	20800003 	ldbu	r2,0(r4)
   489a8:	28800f26 	beq	r5,r2,489e8 <memchr+0xdc>
   489ac:	20800043 	ldbu	r2,1(r4)
   489b0:	21c00044 	addi	r7,r4,1
   489b4:	28800c26 	beq	r5,r2,489e8 <memchr+0xdc>
   489b8:	20800083 	ldbu	r2,2(r4)
   489bc:	21c00084 	addi	r7,r4,2
   489c0:	28800926 	beq	r5,r2,489e8 <memchr+0xdc>
   489c4:	208000c3 	ldbu	r2,3(r4)
   489c8:	21c000c4 	addi	r7,r4,3
   489cc:	28800626 	beq	r5,r2,489e8 <memchr+0xdc>
   489d0:	21000104 	addi	r4,r4,4
   489d4:	59bfea36 	bltu	r11,r6,48980 <memchr+0x74>
   489d8:	2007883a 	mov	r3,r4
   489dc:	003fd106 	br	48924 <memchr+0x18>
   489e0:	0005883a 	mov	r2,zero
   489e4:	f800283a 	ret
   489e8:	3805883a 	mov	r2,r7
   489ec:	f800283a 	ret

000489f0 <memcpy>:
   489f0:	01c003c4 	movi	r7,15
   489f4:	2007883a 	mov	r3,r4
   489f8:	3980032e 	bgeu	r7,r6,48a08 <memcpy+0x18>
   489fc:	2904b03a 	or	r2,r5,r4
   48a00:	108000cc 	andi	r2,r2,3
   48a04:	10000926 	beq	r2,zero,48a2c <memcpy+0x3c>
   48a08:	30000626 	beq	r6,zero,48a24 <memcpy+0x34>
   48a0c:	30cd883a 	add	r6,r6,r3
   48a10:	28800003 	ldbu	r2,0(r5)
   48a14:	29400044 	addi	r5,r5,1
   48a18:	18800005 	stb	r2,0(r3)
   48a1c:	18c00044 	addi	r3,r3,1
   48a20:	30fffb1e 	bne	r6,r3,48a10 <memcpy+0x20>
   48a24:	2005883a 	mov	r2,r4
   48a28:	f800283a 	ret
   48a2c:	3811883a 	mov	r8,r7
   48a30:	200f883a 	mov	r7,r4
   48a34:	28c00017 	ldw	r3,0(r5)
   48a38:	31bffc04 	addi	r6,r6,-16
   48a3c:	38c00015 	stw	r3,0(r7)
   48a40:	28800117 	ldw	r2,4(r5)
   48a44:	38800115 	stw	r2,4(r7)
   48a48:	28c00217 	ldw	r3,8(r5)
   48a4c:	38c00215 	stw	r3,8(r7)
   48a50:	28800317 	ldw	r2,12(r5)
   48a54:	29400404 	addi	r5,r5,16
   48a58:	38800315 	stw	r2,12(r7)
   48a5c:	39c00404 	addi	r7,r7,16
   48a60:	41bff436 	bltu	r8,r6,48a34 <memcpy+0x44>
   48a64:	008000c4 	movi	r2,3
   48a68:	1180072e 	bgeu	r2,r6,48a88 <memcpy+0x98>
   48a6c:	1007883a 	mov	r3,r2
   48a70:	28800017 	ldw	r2,0(r5)
   48a74:	31bfff04 	addi	r6,r6,-4
   48a78:	29400104 	addi	r5,r5,4
   48a7c:	38800015 	stw	r2,0(r7)
   48a80:	39c00104 	addi	r7,r7,4
   48a84:	19bffa36 	bltu	r3,r6,48a70 <memcpy+0x80>
   48a88:	3807883a 	mov	r3,r7
   48a8c:	003fde06 	br	48a08 <memcpy+0x18>

00048a90 <memmove>:
   48a90:	2807883a 	mov	r3,r5
   48a94:	2011883a 	mov	r8,r4
   48a98:	29000c2e 	bgeu	r5,r4,48acc <memmove+0x3c>
   48a9c:	298f883a 	add	r7,r5,r6
   48aa0:	21c00a2e 	bgeu	r4,r7,48acc <memmove+0x3c>
   48aa4:	30000726 	beq	r6,zero,48ac4 <memmove+0x34>
   48aa8:	2187883a 	add	r3,r4,r6
   48aac:	198dc83a 	sub	r6,r3,r6
   48ab0:	39ffffc4 	addi	r7,r7,-1
   48ab4:	38800003 	ldbu	r2,0(r7)
   48ab8:	18ffffc4 	addi	r3,r3,-1
   48abc:	18800005 	stb	r2,0(r3)
   48ac0:	19bffb1e 	bne	r3,r6,48ab0 <memmove+0x20>
   48ac4:	2005883a 	mov	r2,r4
   48ac8:	f800283a 	ret
   48acc:	01c003c4 	movi	r7,15
   48ad0:	39800a36 	bltu	r7,r6,48afc <memmove+0x6c>
   48ad4:	303ffb26 	beq	r6,zero,48ac4 <memmove+0x34>
   48ad8:	400f883a 	mov	r7,r8
   48adc:	320d883a 	add	r6,r6,r8
   48ae0:	28800003 	ldbu	r2,0(r5)
   48ae4:	29400044 	addi	r5,r5,1
   48ae8:	38800005 	stb	r2,0(r7)
   48aec:	39c00044 	addi	r7,r7,1
   48af0:	39bffb1e 	bne	r7,r6,48ae0 <memmove+0x50>
   48af4:	2005883a 	mov	r2,r4
   48af8:	f800283a 	ret
   48afc:	1904b03a 	or	r2,r3,r4
   48b00:	108000cc 	andi	r2,r2,3
   48b04:	103ff31e 	bne	r2,zero,48ad4 <memmove+0x44>
   48b08:	3811883a 	mov	r8,r7
   48b0c:	180b883a 	mov	r5,r3
   48b10:	200f883a 	mov	r7,r4
   48b14:	28c00017 	ldw	r3,0(r5)
   48b18:	31bffc04 	addi	r6,r6,-16
   48b1c:	38c00015 	stw	r3,0(r7)
   48b20:	28800117 	ldw	r2,4(r5)
   48b24:	38800115 	stw	r2,4(r7)
   48b28:	28c00217 	ldw	r3,8(r5)
   48b2c:	38c00215 	stw	r3,8(r7)
   48b30:	28800317 	ldw	r2,12(r5)
   48b34:	29400404 	addi	r5,r5,16
   48b38:	38800315 	stw	r2,12(r7)
   48b3c:	39c00404 	addi	r7,r7,16
   48b40:	41bff436 	bltu	r8,r6,48b14 <memmove+0x84>
   48b44:	008000c4 	movi	r2,3
   48b48:	1180072e 	bgeu	r2,r6,48b68 <memmove+0xd8>
   48b4c:	1007883a 	mov	r3,r2
   48b50:	28800017 	ldw	r2,0(r5)
   48b54:	31bfff04 	addi	r6,r6,-4
   48b58:	29400104 	addi	r5,r5,4
   48b5c:	38800015 	stw	r2,0(r7)
   48b60:	39c00104 	addi	r7,r7,4
   48b64:	19bffa36 	bltu	r3,r6,48b50 <memmove+0xc0>
   48b68:	3811883a 	mov	r8,r7
   48b6c:	003fd906 	br	48ad4 <memmove+0x44>

00048b70 <memset>:
   48b70:	008000c4 	movi	r2,3
   48b74:	29403fcc 	andi	r5,r5,255
   48b78:	2007883a 	mov	r3,r4
   48b7c:	1180022e 	bgeu	r2,r6,48b88 <memset+0x18>
   48b80:	2084703a 	and	r2,r4,r2
   48b84:	10000826 	beq	r2,zero,48ba8 <memset+0x38>
   48b88:	30000526 	beq	r6,zero,48ba0 <memset+0x30>
   48b8c:	2805883a 	mov	r2,r5
   48b90:	30cd883a 	add	r6,r6,r3
   48b94:	18800005 	stb	r2,0(r3)
   48b98:	18c00044 	addi	r3,r3,1
   48b9c:	19bffd1e 	bne	r3,r6,48b94 <memset+0x24>
   48ba0:	2005883a 	mov	r2,r4
   48ba4:	f800283a 	ret
   48ba8:	2804923a 	slli	r2,r5,8
   48bac:	020003c4 	movi	r8,15
   48bb0:	200f883a 	mov	r7,r4
   48bb4:	2884b03a 	or	r2,r5,r2
   48bb8:	1006943a 	slli	r3,r2,16
   48bbc:	10c6b03a 	or	r3,r2,r3
   48bc0:	41800a2e 	bgeu	r8,r6,48bec <memset+0x7c>
   48bc4:	4005883a 	mov	r2,r8
   48bc8:	31bffc04 	addi	r6,r6,-16
   48bcc:	38c00015 	stw	r3,0(r7)
   48bd0:	38c00115 	stw	r3,4(r7)
   48bd4:	38c00215 	stw	r3,8(r7)
   48bd8:	38c00315 	stw	r3,12(r7)
   48bdc:	39c00404 	addi	r7,r7,16
   48be0:	11bff936 	bltu	r2,r6,48bc8 <memset+0x58>
   48be4:	008000c4 	movi	r2,3
   48be8:	1180052e 	bgeu	r2,r6,48c00 <memset+0x90>
   48bec:	31bfff04 	addi	r6,r6,-4
   48bf0:	008000c4 	movi	r2,3
   48bf4:	38c00015 	stw	r3,0(r7)
   48bf8:	39c00104 	addi	r7,r7,4
   48bfc:	11bffb36 	bltu	r2,r6,48bec <memset+0x7c>
   48c00:	3807883a 	mov	r3,r7
   48c04:	003fe006 	br	48b88 <memset+0x18>

00048c08 <_Bfree>:
   48c08:	28000826 	beq	r5,zero,48c2c <_Bfree+0x24>
   48c0c:	28800117 	ldw	r2,4(r5)
   48c10:	21001317 	ldw	r4,76(r4)
   48c14:	1085883a 	add	r2,r2,r2
   48c18:	1085883a 	add	r2,r2,r2
   48c1c:	1105883a 	add	r2,r2,r4
   48c20:	10c00017 	ldw	r3,0(r2)
   48c24:	28c00015 	stw	r3,0(r5)
   48c28:	11400015 	stw	r5,0(r2)
   48c2c:	f800283a 	ret

00048c30 <__hi0bits>:
   48c30:	20bfffec 	andhi	r2,r4,65535
   48c34:	10001426 	beq	r2,zero,48c88 <__hi0bits+0x58>
   48c38:	0007883a 	mov	r3,zero
   48c3c:	20bfc02c 	andhi	r2,r4,65280
   48c40:	1000021e 	bne	r2,zero,48c4c <__hi0bits+0x1c>
   48c44:	2008923a 	slli	r4,r4,8
   48c48:	18c00204 	addi	r3,r3,8
   48c4c:	20bc002c 	andhi	r2,r4,61440
   48c50:	1000021e 	bne	r2,zero,48c5c <__hi0bits+0x2c>
   48c54:	2008913a 	slli	r4,r4,4
   48c58:	18c00104 	addi	r3,r3,4
   48c5c:	20b0002c 	andhi	r2,r4,49152
   48c60:	1000031e 	bne	r2,zero,48c70 <__hi0bits+0x40>
   48c64:	2105883a 	add	r2,r4,r4
   48c68:	18c00084 	addi	r3,r3,2
   48c6c:	1089883a 	add	r4,r2,r2
   48c70:	20000316 	blt	r4,zero,48c80 <__hi0bits+0x50>
   48c74:	2090002c 	andhi	r2,r4,16384
   48c78:	10000626 	beq	r2,zero,48c94 <__hi0bits+0x64>
   48c7c:	18c00044 	addi	r3,r3,1
   48c80:	1805883a 	mov	r2,r3
   48c84:	f800283a 	ret
   48c88:	2008943a 	slli	r4,r4,16
   48c8c:	00c00404 	movi	r3,16
   48c90:	003fea06 	br	48c3c <__hi0bits+0xc>
   48c94:	00c00804 	movi	r3,32
   48c98:	1805883a 	mov	r2,r3
   48c9c:	f800283a 	ret

00048ca0 <__lo0bits>:
   48ca0:	20c00017 	ldw	r3,0(r4)
   48ca4:	188001cc 	andi	r2,r3,7
   48ca8:	10000a26 	beq	r2,zero,48cd4 <__lo0bits+0x34>
   48cac:	1880004c 	andi	r2,r3,1
   48cb0:	1005003a 	cmpeq	r2,r2,zero
   48cb4:	10002126 	beq	r2,zero,48d3c <__lo0bits+0x9c>
   48cb8:	1880008c 	andi	r2,r3,2
   48cbc:	1000251e 	bne	r2,zero,48d54 <__lo0bits+0xb4>
   48cc0:	1804d0ba 	srli	r2,r3,2
   48cc4:	01400084 	movi	r5,2
   48cc8:	20800015 	stw	r2,0(r4)
   48ccc:	2805883a 	mov	r2,r5
   48cd0:	f800283a 	ret
   48cd4:	18bfffcc 	andi	r2,r3,65535
   48cd8:	10001526 	beq	r2,zero,48d30 <__lo0bits+0x90>
   48cdc:	000b883a 	mov	r5,zero
   48ce0:	18803fcc 	andi	r2,r3,255
   48ce4:	1000021e 	bne	r2,zero,48cf0 <__lo0bits+0x50>
   48ce8:	1806d23a 	srli	r3,r3,8
   48cec:	29400204 	addi	r5,r5,8
   48cf0:	188003cc 	andi	r2,r3,15
   48cf4:	1000021e 	bne	r2,zero,48d00 <__lo0bits+0x60>
   48cf8:	1806d13a 	srli	r3,r3,4
   48cfc:	29400104 	addi	r5,r5,4
   48d00:	188000cc 	andi	r2,r3,3
   48d04:	1000021e 	bne	r2,zero,48d10 <__lo0bits+0x70>
   48d08:	1806d0ba 	srli	r3,r3,2
   48d0c:	29400084 	addi	r5,r5,2
   48d10:	1880004c 	andi	r2,r3,1
   48d14:	1000031e 	bne	r2,zero,48d24 <__lo0bits+0x84>
   48d18:	1806d07a 	srli	r3,r3,1
   48d1c:	18000a26 	beq	r3,zero,48d48 <__lo0bits+0xa8>
   48d20:	29400044 	addi	r5,r5,1
   48d24:	2805883a 	mov	r2,r5
   48d28:	20c00015 	stw	r3,0(r4)
   48d2c:	f800283a 	ret
   48d30:	1806d43a 	srli	r3,r3,16
   48d34:	01400404 	movi	r5,16
   48d38:	003fe906 	br	48ce0 <__lo0bits+0x40>
   48d3c:	000b883a 	mov	r5,zero
   48d40:	2805883a 	mov	r2,r5
   48d44:	f800283a 	ret
   48d48:	01400804 	movi	r5,32
   48d4c:	2805883a 	mov	r2,r5
   48d50:	f800283a 	ret
   48d54:	1804d07a 	srli	r2,r3,1
   48d58:	01400044 	movi	r5,1
   48d5c:	20800015 	stw	r2,0(r4)
   48d60:	003fda06 	br	48ccc <__lo0bits+0x2c>

00048d64 <__mcmp>:
   48d64:	20800417 	ldw	r2,16(r4)
   48d68:	28c00417 	ldw	r3,16(r5)
   48d6c:	10cfc83a 	sub	r7,r2,r3
   48d70:	38000c1e 	bne	r7,zero,48da4 <__mcmp+0x40>
   48d74:	18c5883a 	add	r2,r3,r3
   48d78:	1085883a 	add	r2,r2,r2
   48d7c:	10c00504 	addi	r3,r2,20
   48d80:	21000504 	addi	r4,r4,20
   48d84:	28cb883a 	add	r5,r5,r3
   48d88:	2085883a 	add	r2,r4,r2
   48d8c:	10bfff04 	addi	r2,r2,-4
   48d90:	297fff04 	addi	r5,r5,-4
   48d94:	11800017 	ldw	r6,0(r2)
   48d98:	28c00017 	ldw	r3,0(r5)
   48d9c:	30c0031e 	bne	r6,r3,48dac <__mcmp+0x48>
   48da0:	20bffa36 	bltu	r4,r2,48d8c <__mcmp+0x28>
   48da4:	3805883a 	mov	r2,r7
   48da8:	f800283a 	ret
   48dac:	30c00336 	bltu	r6,r3,48dbc <__mcmp+0x58>
   48db0:	01c00044 	movi	r7,1
   48db4:	3805883a 	mov	r2,r7
   48db8:	f800283a 	ret
   48dbc:	01ffffc4 	movi	r7,-1
   48dc0:	003ff806 	br	48da4 <__mcmp+0x40>

00048dc4 <__ulp>:
   48dc4:	295ffc2c 	andhi	r5,r5,32752
   48dc8:	013f3034 	movhi	r4,64704
   48dcc:	290b883a 	add	r5,r5,r4
   48dd0:	0145c83a 	sub	r2,zero,r5
   48dd4:	1007d53a 	srai	r3,r2,20
   48dd8:	000d883a 	mov	r6,zero
   48ddc:	0140040e 	bge	zero,r5,48df0 <__ulp+0x2c>
   48de0:	280f883a 	mov	r7,r5
   48de4:	3807883a 	mov	r3,r7
   48de8:	3005883a 	mov	r2,r6
   48dec:	f800283a 	ret
   48df0:	008004c4 	movi	r2,19
   48df4:	193ffb04 	addi	r4,r3,-20
   48df8:	10c00c0e 	bge	r2,r3,48e2c <__ulp+0x68>
   48dfc:	008007c4 	movi	r2,31
   48e00:	1107c83a 	sub	r3,r2,r4
   48e04:	00800784 	movi	r2,30
   48e08:	01400044 	movi	r5,1
   48e0c:	11000216 	blt	r2,r4,48e18 <__ulp+0x54>
   48e10:	00800044 	movi	r2,1
   48e14:	10ca983a 	sll	r5,r2,r3
   48e18:	000f883a 	mov	r7,zero
   48e1c:	280d883a 	mov	r6,r5
   48e20:	3807883a 	mov	r3,r7
   48e24:	3005883a 	mov	r2,r6
   48e28:	f800283a 	ret
   48e2c:	00800234 	movhi	r2,8
   48e30:	10cfd83a 	sra	r7,r2,r3
   48e34:	000d883a 	mov	r6,zero
   48e38:	3005883a 	mov	r2,r6
   48e3c:	3807883a 	mov	r3,r7
   48e40:	f800283a 	ret

00048e44 <__b2d>:
   48e44:	20800417 	ldw	r2,16(r4)
   48e48:	defff904 	addi	sp,sp,-28
   48e4c:	dd000415 	stw	r20,16(sp)
   48e50:	1085883a 	add	r2,r2,r2
   48e54:	25000504 	addi	r20,r4,20
   48e58:	1085883a 	add	r2,r2,r2
   48e5c:	dc000015 	stw	r16,0(sp)
   48e60:	a0a1883a 	add	r16,r20,r2
   48e64:	dd400515 	stw	r21,20(sp)
   48e68:	857fff17 	ldw	r21,-4(r16)
   48e6c:	dc400115 	stw	r17,4(sp)
   48e70:	dfc00615 	stw	ra,24(sp)
   48e74:	a809883a 	mov	r4,r21
   48e78:	2823883a 	mov	r17,r5
   48e7c:	dcc00315 	stw	r19,12(sp)
   48e80:	dc800215 	stw	r18,8(sp)
   48e84:	0048c300 	call	48c30 <__hi0bits>
   48e88:	100b883a 	mov	r5,r2
   48e8c:	00800804 	movi	r2,32
   48e90:	1145c83a 	sub	r2,r2,r5
   48e94:	88800015 	stw	r2,0(r17)
   48e98:	00800284 	movi	r2,10
   48e9c:	80ffff04 	addi	r3,r16,-4
   48ea0:	11401416 	blt	r2,r5,48ef4 <__b2d+0xb0>
   48ea4:	008002c4 	movi	r2,11
   48ea8:	1149c83a 	sub	r4,r2,r5
   48eac:	a0c02736 	bltu	r20,r3,48f4c <__b2d+0x108>
   48eb0:	000d883a 	mov	r6,zero
   48eb4:	28800544 	addi	r2,r5,21
   48eb8:	a906d83a 	srl	r3,r21,r4
   48ebc:	a884983a 	sll	r2,r21,r2
   48ec0:	1ccffc34 	orhi	r19,r3,16368
   48ec4:	11a4b03a 	or	r18,r2,r6
   48ec8:	9005883a 	mov	r2,r18
   48ecc:	9807883a 	mov	r3,r19
   48ed0:	dfc00617 	ldw	ra,24(sp)
   48ed4:	dd400517 	ldw	r21,20(sp)
   48ed8:	dd000417 	ldw	r20,16(sp)
   48edc:	dcc00317 	ldw	r19,12(sp)
   48ee0:	dc800217 	ldw	r18,8(sp)
   48ee4:	dc400117 	ldw	r17,4(sp)
   48ee8:	dc000017 	ldw	r16,0(sp)
   48eec:	dec00704 	addi	sp,sp,28
   48ef0:	f800283a 	ret
   48ef4:	a0c00e36 	bltu	r20,r3,48f30 <__b2d+0xec>
   48ef8:	293ffd44 	addi	r4,r5,-11
   48efc:	000d883a 	mov	r6,zero
   48f00:	20000f26 	beq	r4,zero,48f40 <__b2d+0xfc>
   48f04:	00800804 	movi	r2,32
   48f08:	110bc83a 	sub	r5,r2,r4
   48f0c:	a0c01236 	bltu	r20,r3,48f58 <__b2d+0x114>
   48f10:	000f883a 	mov	r7,zero
   48f14:	a904983a 	sll	r2,r21,r4
   48f18:	3146d83a 	srl	r3,r6,r5
   48f1c:	3108983a 	sll	r4,r6,r4
   48f20:	108ffc34 	orhi	r2,r2,16368
   48f24:	18a6b03a 	or	r19,r3,r2
   48f28:	3924b03a 	or	r18,r7,r4
   48f2c:	003fe606 	br	48ec8 <__b2d+0x84>
   48f30:	293ffd44 	addi	r4,r5,-11
   48f34:	81bffe17 	ldw	r6,-8(r16)
   48f38:	80fffe04 	addi	r3,r16,-8
   48f3c:	203ff11e 	bne	r4,zero,48f04 <__b2d+0xc0>
   48f40:	accffc34 	orhi	r19,r21,16368
   48f44:	3025883a 	mov	r18,r6
   48f48:	003fdf06 	br	48ec8 <__b2d+0x84>
   48f4c:	18bfff17 	ldw	r2,-4(r3)
   48f50:	110cd83a 	srl	r6,r2,r4
   48f54:	003fd706 	br	48eb4 <__b2d+0x70>
   48f58:	18bfff17 	ldw	r2,-4(r3)
   48f5c:	114ed83a 	srl	r7,r2,r5
   48f60:	003fec06 	br	48f14 <__b2d+0xd0>

00048f64 <__ratio>:
   48f64:	defff904 	addi	sp,sp,-28
   48f68:	dc400215 	stw	r17,8(sp)
   48f6c:	2823883a 	mov	r17,r5
   48f70:	d80b883a 	mov	r5,sp
   48f74:	dfc00615 	stw	ra,24(sp)
   48f78:	dd000515 	stw	r20,20(sp)
   48f7c:	dcc00415 	stw	r19,16(sp)
   48f80:	dc800315 	stw	r18,12(sp)
   48f84:	2025883a 	mov	r18,r4
   48f88:	0048e440 	call	48e44 <__b2d>
   48f8c:	8809883a 	mov	r4,r17
   48f90:	d9400104 	addi	r5,sp,4
   48f94:	1027883a 	mov	r19,r2
   48f98:	1829883a 	mov	r20,r3
   48f9c:	0048e440 	call	48e44 <__b2d>
   48fa0:	89000417 	ldw	r4,16(r17)
   48fa4:	91c00417 	ldw	r7,16(r18)
   48fa8:	d9800117 	ldw	r6,4(sp)
   48fac:	180b883a 	mov	r5,r3
   48fb0:	390fc83a 	sub	r7,r7,r4
   48fb4:	1009883a 	mov	r4,r2
   48fb8:	d8800017 	ldw	r2,0(sp)
   48fbc:	380e917a 	slli	r7,r7,5
   48fc0:	2011883a 	mov	r8,r4
   48fc4:	1185c83a 	sub	r2,r2,r6
   48fc8:	11c5883a 	add	r2,r2,r7
   48fcc:	1006953a 	slli	r3,r2,20
   48fd0:	2813883a 	mov	r9,r5
   48fd4:	00800d0e 	bge	zero,r2,4900c <__ratio+0xa8>
   48fd8:	1d29883a 	add	r20,r3,r20
   48fdc:	a00b883a 	mov	r5,r20
   48fe0:	480f883a 	mov	r7,r9
   48fe4:	9809883a 	mov	r4,r19
   48fe8:	400d883a 	mov	r6,r8
   48fec:	004bdc00 	call	4bdc0 <__divdf3>
   48ff0:	dfc00617 	ldw	ra,24(sp)
   48ff4:	dd000517 	ldw	r20,20(sp)
   48ff8:	dcc00417 	ldw	r19,16(sp)
   48ffc:	dc800317 	ldw	r18,12(sp)
   49000:	dc400217 	ldw	r17,8(sp)
   49004:	dec00704 	addi	sp,sp,28
   49008:	f800283a 	ret
   4900c:	28d3c83a 	sub	r9,r5,r3
   49010:	003ff206 	br	48fdc <__ratio+0x78>

00049014 <_mprec_log10>:
   49014:	defffe04 	addi	sp,sp,-8
   49018:	008005c4 	movi	r2,23
   4901c:	dc000015 	stw	r16,0(sp)
   49020:	dfc00115 	stw	ra,4(sp)
   49024:	2021883a 	mov	r16,r4
   49028:	11000c16 	blt	r2,r4,4905c <_mprec_log10+0x48>
   4902c:	200490fa 	slli	r2,r4,3
   49030:	00c00174 	movhi	r3,5
   49034:	18ffb704 	addi	r3,r3,-292
   49038:	10c5883a 	add	r2,r2,r3
   4903c:	12400117 	ldw	r9,4(r2)
   49040:	12000017 	ldw	r8,0(r2)
   49044:	4807883a 	mov	r3,r9
   49048:	4005883a 	mov	r2,r8
   4904c:	dfc00117 	ldw	ra,4(sp)
   49050:	dc000017 	ldw	r16,0(sp)
   49054:	dec00204 	addi	sp,sp,8
   49058:	f800283a 	ret
   4905c:	0011883a 	mov	r8,zero
   49060:	024ffc34 	movhi	r9,16368
   49064:	0005883a 	mov	r2,zero
   49068:	00d00934 	movhi	r3,16420
   4906c:	480b883a 	mov	r5,r9
   49070:	4009883a 	mov	r4,r8
   49074:	180f883a 	mov	r7,r3
   49078:	100d883a 	mov	r6,r2
   4907c:	004b9fc0 	call	4b9fc <__muldf3>
   49080:	843fffc4 	addi	r16,r16,-1
   49084:	1011883a 	mov	r8,r2
   49088:	1813883a 	mov	r9,r3
   4908c:	803ff51e 	bne	r16,zero,49064 <_mprec_log10+0x50>
   49090:	4005883a 	mov	r2,r8
   49094:	4807883a 	mov	r3,r9
   49098:	dfc00117 	ldw	ra,4(sp)
   4909c:	dc000017 	ldw	r16,0(sp)
   490a0:	dec00204 	addi	sp,sp,8
   490a4:	f800283a 	ret

000490a8 <__copybits>:
   490a8:	297fffc4 	addi	r5,r5,-1
   490ac:	30800417 	ldw	r2,16(r6)
   490b0:	280bd17a 	srai	r5,r5,5
   490b4:	31800504 	addi	r6,r6,20
   490b8:	1085883a 	add	r2,r2,r2
   490bc:	294b883a 	add	r5,r5,r5
   490c0:	294b883a 	add	r5,r5,r5
   490c4:	1085883a 	add	r2,r2,r2
   490c8:	290b883a 	add	r5,r5,r4
   490cc:	3087883a 	add	r3,r6,r2
   490d0:	29400104 	addi	r5,r5,4
   490d4:	30c0052e 	bgeu	r6,r3,490ec <__copybits+0x44>
   490d8:	30800017 	ldw	r2,0(r6)
   490dc:	31800104 	addi	r6,r6,4
   490e0:	20800015 	stw	r2,0(r4)
   490e4:	21000104 	addi	r4,r4,4
   490e8:	30fffb36 	bltu	r6,r3,490d8 <__copybits+0x30>
   490ec:	2140032e 	bgeu	r4,r5,490fc <__copybits+0x54>
   490f0:	20000015 	stw	zero,0(r4)
   490f4:	21000104 	addi	r4,r4,4
   490f8:	217ffd36 	bltu	r4,r5,490f0 <__copybits+0x48>
   490fc:	f800283a 	ret

00049100 <__any_on>:
   49100:	20800417 	ldw	r2,16(r4)
   49104:	2807d17a 	srai	r3,r5,5
   49108:	21000504 	addi	r4,r4,20
   4910c:	10c00d0e 	bge	r2,r3,49144 <__any_on+0x44>
   49110:	1085883a 	add	r2,r2,r2
   49114:	1085883a 	add	r2,r2,r2
   49118:	208d883a 	add	r6,r4,r2
   4911c:	2180182e 	bgeu	r4,r6,49180 <__any_on+0x80>
   49120:	30bfff17 	ldw	r2,-4(r6)
   49124:	30ffff04 	addi	r3,r6,-4
   49128:	1000041e 	bne	r2,zero,4913c <__any_on+0x3c>
   4912c:	20c0142e 	bgeu	r4,r3,49180 <__any_on+0x80>
   49130:	18ffff04 	addi	r3,r3,-4
   49134:	18800017 	ldw	r2,0(r3)
   49138:	103ffc26 	beq	r2,zero,4912c <__any_on+0x2c>
   4913c:	00800044 	movi	r2,1
   49140:	f800283a 	ret
   49144:	18800a0e 	bge	r3,r2,49170 <__any_on+0x70>
   49148:	294007cc 	andi	r5,r5,31
   4914c:	28000826 	beq	r5,zero,49170 <__any_on+0x70>
   49150:	18c5883a 	add	r2,r3,r3
   49154:	1085883a 	add	r2,r2,r2
   49158:	208d883a 	add	r6,r4,r2
   4915c:	30c00017 	ldw	r3,0(r6)
   49160:	1944d83a 	srl	r2,r3,r5
   49164:	1144983a 	sll	r2,r2,r5
   49168:	18bff41e 	bne	r3,r2,4913c <__any_on+0x3c>
   4916c:	003feb06 	br	4911c <__any_on+0x1c>
   49170:	18c5883a 	add	r2,r3,r3
   49174:	1085883a 	add	r2,r2,r2
   49178:	208d883a 	add	r6,r4,r2
   4917c:	003fe706 	br	4911c <__any_on+0x1c>
   49180:	0005883a 	mov	r2,zero
   49184:	f800283a 	ret

00049188 <_Balloc>:
   49188:	20c01317 	ldw	r3,76(r4)
   4918c:	defffb04 	addi	sp,sp,-20
   49190:	dcc00315 	stw	r19,12(sp)
   49194:	dc800215 	stw	r18,8(sp)
   49198:	dfc00415 	stw	ra,16(sp)
   4919c:	2825883a 	mov	r18,r5
   491a0:	dc400115 	stw	r17,4(sp)
   491a4:	dc000015 	stw	r16,0(sp)
   491a8:	2027883a 	mov	r19,r4
   491ac:	01800404 	movi	r6,16
   491b0:	01400104 	movi	r5,4
   491b4:	18001726 	beq	r3,zero,49214 <_Balloc+0x8c>
   491b8:	01400044 	movi	r5,1
   491bc:	9485883a 	add	r2,r18,r18
   491c0:	2ca2983a 	sll	r17,r5,r18
   491c4:	1085883a 	add	r2,r2,r2
   491c8:	10c7883a 	add	r3,r2,r3
   491cc:	1c000017 	ldw	r16,0(r3)
   491d0:	8c4d883a 	add	r6,r17,r17
   491d4:	318d883a 	add	r6,r6,r6
   491d8:	9809883a 	mov	r4,r19
   491dc:	31800504 	addi	r6,r6,20
   491e0:	80001226 	beq	r16,zero,4922c <_Balloc+0xa4>
   491e4:	80800017 	ldw	r2,0(r16)
   491e8:	18800015 	stw	r2,0(r3)
   491ec:	80000415 	stw	zero,16(r16)
   491f0:	80000315 	stw	zero,12(r16)
   491f4:	8005883a 	mov	r2,r16
   491f8:	dfc00417 	ldw	ra,16(sp)
   491fc:	dcc00317 	ldw	r19,12(sp)
   49200:	dc800217 	ldw	r18,8(sp)
   49204:	dc400117 	ldw	r17,4(sp)
   49208:	dc000017 	ldw	r16,0(sp)
   4920c:	dec00504 	addi	sp,sp,20
   49210:	f800283a 	ret
   49214:	004a5500 	call	4a550 <_calloc_r>
   49218:	1007883a 	mov	r3,r2
   4921c:	0021883a 	mov	r16,zero
   49220:	98801315 	stw	r2,76(r19)
   49224:	103fe41e 	bne	r2,zero,491b8 <_Balloc+0x30>
   49228:	003ff206 	br	491f4 <_Balloc+0x6c>
   4922c:	004a5500 	call	4a550 <_calloc_r>
   49230:	103ff026 	beq	r2,zero,491f4 <_Balloc+0x6c>
   49234:	1021883a 	mov	r16,r2
   49238:	14800115 	stw	r18,4(r2)
   4923c:	14400215 	stw	r17,8(r2)
   49240:	003fea06 	br	491ec <_Balloc+0x64>

00049244 <__d2b>:
   49244:	defff504 	addi	sp,sp,-44
   49248:	dcc00515 	stw	r19,20(sp)
   4924c:	04c00044 	movi	r19,1
   49250:	dc000215 	stw	r16,8(sp)
   49254:	2821883a 	mov	r16,r5
   49258:	980b883a 	mov	r5,r19
   4925c:	ddc00915 	stw	r23,36(sp)
   49260:	dd800815 	stw	r22,32(sp)
   49264:	dd400715 	stw	r21,28(sp)
   49268:	dd000615 	stw	r20,24(sp)
   4926c:	dc800415 	stw	r18,16(sp)
   49270:	dc400315 	stw	r17,12(sp)
   49274:	dfc00a15 	stw	ra,40(sp)
   49278:	3023883a 	mov	r17,r6
   4927c:	382d883a 	mov	r22,r7
   49280:	ddc00b17 	ldw	r23,44(sp)
   49284:	00491880 	call	49188 <_Balloc>
   49288:	1025883a 	mov	r18,r2
   4928c:	00a00034 	movhi	r2,32768
   49290:	10bfffc4 	addi	r2,r2,-1
   49294:	8888703a 	and	r4,r17,r2
   49298:	202ad53a 	srli	r21,r4,20
   4929c:	00800434 	movhi	r2,16
   492a0:	10bfffc4 	addi	r2,r2,-1
   492a4:	8886703a 	and	r3,r17,r2
   492a8:	a829003a 	cmpeq	r20,r21,zero
   492ac:	800b883a 	mov	r5,r16
   492b0:	d8c00115 	stw	r3,4(sp)
   492b4:	94000504 	addi	r16,r18,20
   492b8:	a000021e 	bne	r20,zero,492c4 <__d2b+0x80>
   492bc:	18c00434 	orhi	r3,r3,16
   492c0:	d8c00115 	stw	r3,4(sp)
   492c4:	28002726 	beq	r5,zero,49364 <__d2b+0x120>
   492c8:	d809883a 	mov	r4,sp
   492cc:	d9400015 	stw	r5,0(sp)
   492d0:	0048ca00 	call	48ca0 <__lo0bits>
   492d4:	100d883a 	mov	r6,r2
   492d8:	10003526 	beq	r2,zero,493b0 <__d2b+0x16c>
   492dc:	d8c00117 	ldw	r3,4(sp)
   492e0:	00800804 	movi	r2,32
   492e4:	1185c83a 	sub	r2,r2,r6
   492e8:	d9000017 	ldw	r4,0(sp)
   492ec:	1886983a 	sll	r3,r3,r2
   492f0:	1906b03a 	or	r3,r3,r4
   492f4:	90c00515 	stw	r3,20(r18)
   492f8:	d8c00117 	ldw	r3,4(sp)
   492fc:	1986d83a 	srl	r3,r3,r6
   49300:	d8c00115 	stw	r3,4(sp)
   49304:	180b003a 	cmpeq	r5,r3,zero
   49308:	00800084 	movi	r2,2
   4930c:	114bc83a 	sub	r5,r2,r5
   49310:	80c00115 	stw	r3,4(r16)
   49314:	91400415 	stw	r5,16(r18)
   49318:	a0001a1e 	bne	r20,zero,49384 <__d2b+0x140>
   4931c:	3545883a 	add	r2,r6,r21
   49320:	10bef344 	addi	r2,r2,-1075
   49324:	00c00d44 	movi	r3,53
   49328:	b0800015 	stw	r2,0(r22)
   4932c:	1987c83a 	sub	r3,r3,r6
   49330:	b8c00015 	stw	r3,0(r23)
   49334:	9005883a 	mov	r2,r18
   49338:	dfc00a17 	ldw	ra,40(sp)
   4933c:	ddc00917 	ldw	r23,36(sp)
   49340:	dd800817 	ldw	r22,32(sp)
   49344:	dd400717 	ldw	r21,28(sp)
   49348:	dd000617 	ldw	r20,24(sp)
   4934c:	dcc00517 	ldw	r19,20(sp)
   49350:	dc800417 	ldw	r18,16(sp)
   49354:	dc400317 	ldw	r17,12(sp)
   49358:	dc000217 	ldw	r16,8(sp)
   4935c:	dec00b04 	addi	sp,sp,44
   49360:	f800283a 	ret
   49364:	d9000104 	addi	r4,sp,4
   49368:	0048ca00 	call	48ca0 <__lo0bits>
   4936c:	11800804 	addi	r6,r2,32
   49370:	d8800117 	ldw	r2,4(sp)
   49374:	94c00415 	stw	r19,16(r18)
   49378:	980b883a 	mov	r5,r19
   4937c:	90800515 	stw	r2,20(r18)
   49380:	a03fe626 	beq	r20,zero,4931c <__d2b+0xd8>
   49384:	2945883a 	add	r2,r5,r5
   49388:	1085883a 	add	r2,r2,r2
   4938c:	1405883a 	add	r2,r2,r16
   49390:	113fff17 	ldw	r4,-4(r2)
   49394:	30fef384 	addi	r3,r6,-1074
   49398:	2820917a 	slli	r16,r5,5
   4939c:	b0c00015 	stw	r3,0(r22)
   493a0:	0048c300 	call	48c30 <__hi0bits>
   493a4:	80a1c83a 	sub	r16,r16,r2
   493a8:	bc000015 	stw	r16,0(r23)
   493ac:	003fe106 	br	49334 <__d2b+0xf0>
   493b0:	d8800017 	ldw	r2,0(sp)
   493b4:	90800515 	stw	r2,20(r18)
   493b8:	d8c00117 	ldw	r3,4(sp)
   493bc:	003fd106 	br	49304 <__d2b+0xc0>

000493c0 <__mdiff>:
   493c0:	defffb04 	addi	sp,sp,-20
   493c4:	dc000015 	stw	r16,0(sp)
   493c8:	2821883a 	mov	r16,r5
   493cc:	dc800215 	stw	r18,8(sp)
   493d0:	300b883a 	mov	r5,r6
   493d4:	2025883a 	mov	r18,r4
   493d8:	8009883a 	mov	r4,r16
   493dc:	dc400115 	stw	r17,4(sp)
   493e0:	dfc00415 	stw	ra,16(sp)
   493e4:	dcc00315 	stw	r19,12(sp)
   493e8:	3023883a 	mov	r17,r6
   493ec:	0048d640 	call	48d64 <__mcmp>
   493f0:	10004226 	beq	r2,zero,494fc <__mdiff+0x13c>
   493f4:	10005016 	blt	r2,zero,49538 <__mdiff+0x178>
   493f8:	0027883a 	mov	r19,zero
   493fc:	81400117 	ldw	r5,4(r16)
   49400:	9009883a 	mov	r4,r18
   49404:	00491880 	call	49188 <_Balloc>
   49408:	1019883a 	mov	r12,r2
   4940c:	82800417 	ldw	r10,16(r16)
   49410:	88800417 	ldw	r2,16(r17)
   49414:	81800504 	addi	r6,r16,20
   49418:	5287883a 	add	r3,r10,r10
   4941c:	1085883a 	add	r2,r2,r2
   49420:	18c7883a 	add	r3,r3,r3
   49424:	1085883a 	add	r2,r2,r2
   49428:	8a000504 	addi	r8,r17,20
   4942c:	64c00315 	stw	r19,12(r12)
   49430:	30db883a 	add	r13,r6,r3
   49434:	4097883a 	add	r11,r8,r2
   49438:	61c00504 	addi	r7,r12,20
   4943c:	0013883a 	mov	r9,zero
   49440:	31000017 	ldw	r4,0(r6)
   49444:	41400017 	ldw	r5,0(r8)
   49448:	42000104 	addi	r8,r8,4
   4944c:	20bfffcc 	andi	r2,r4,65535
   49450:	28ffffcc 	andi	r3,r5,65535
   49454:	10c5c83a 	sub	r2,r2,r3
   49458:	1245883a 	add	r2,r2,r9
   4945c:	2008d43a 	srli	r4,r4,16
   49460:	280ad43a 	srli	r5,r5,16
   49464:	1007d43a 	srai	r3,r2,16
   49468:	3880000d 	sth	r2,0(r7)
   4946c:	2149c83a 	sub	r4,r4,r5
   49470:	20c9883a 	add	r4,r4,r3
   49474:	3900008d 	sth	r4,2(r7)
   49478:	31800104 	addi	r6,r6,4
   4947c:	39c00104 	addi	r7,r7,4
   49480:	2013d43a 	srai	r9,r4,16
   49484:	42ffee36 	bltu	r8,r11,49440 <__mdiff+0x80>
   49488:	33400c2e 	bgeu	r6,r13,494bc <__mdiff+0xfc>
   4948c:	30800017 	ldw	r2,0(r6)
   49490:	31800104 	addi	r6,r6,4
   49494:	10ffffcc 	andi	r3,r2,65535
   49498:	1a47883a 	add	r3,r3,r9
   4949c:	1004d43a 	srli	r2,r2,16
   494a0:	1809d43a 	srai	r4,r3,16
   494a4:	38c0000d 	sth	r3,0(r7)
   494a8:	1105883a 	add	r2,r2,r4
   494ac:	3880008d 	sth	r2,2(r7)
   494b0:	1013d43a 	srai	r9,r2,16
   494b4:	39c00104 	addi	r7,r7,4
   494b8:	337ff436 	bltu	r6,r13,4948c <__mdiff+0xcc>
   494bc:	38bfff17 	ldw	r2,-4(r7)
   494c0:	38ffff04 	addi	r3,r7,-4
   494c4:	1000041e 	bne	r2,zero,494d8 <__mdiff+0x118>
   494c8:	18ffff04 	addi	r3,r3,-4
   494cc:	18800017 	ldw	r2,0(r3)
   494d0:	52bfffc4 	addi	r10,r10,-1
   494d4:	103ffc26 	beq	r2,zero,494c8 <__mdiff+0x108>
   494d8:	6005883a 	mov	r2,r12
   494dc:	62800415 	stw	r10,16(r12)
   494e0:	dfc00417 	ldw	ra,16(sp)
   494e4:	dcc00317 	ldw	r19,12(sp)
   494e8:	dc800217 	ldw	r18,8(sp)
   494ec:	dc400117 	ldw	r17,4(sp)
   494f0:	dc000017 	ldw	r16,0(sp)
   494f4:	dec00504 	addi	sp,sp,20
   494f8:	f800283a 	ret
   494fc:	9009883a 	mov	r4,r18
   49500:	000b883a 	mov	r5,zero
   49504:	00491880 	call	49188 <_Balloc>
   49508:	1019883a 	mov	r12,r2
   4950c:	00800044 	movi	r2,1
   49510:	60800415 	stw	r2,16(r12)
   49514:	6005883a 	mov	r2,r12
   49518:	60000515 	stw	zero,20(r12)
   4951c:	dfc00417 	ldw	ra,16(sp)
   49520:	dcc00317 	ldw	r19,12(sp)
   49524:	dc800217 	ldw	r18,8(sp)
   49528:	dc400117 	ldw	r17,4(sp)
   4952c:	dc000017 	ldw	r16,0(sp)
   49530:	dec00504 	addi	sp,sp,20
   49534:	f800283a 	ret
   49538:	880d883a 	mov	r6,r17
   4953c:	04c00044 	movi	r19,1
   49540:	8023883a 	mov	r17,r16
   49544:	3021883a 	mov	r16,r6
   49548:	003fac06 	br	493fc <__mdiff+0x3c>

0004954c <__lshift>:
   4954c:	defff904 	addi	sp,sp,-28
   49550:	28800417 	ldw	r2,16(r5)
   49554:	dc000015 	stw	r16,0(sp)
   49558:	3021d17a 	srai	r16,r6,5
   4955c:	28c00217 	ldw	r3,8(r5)
   49560:	10800044 	addi	r2,r2,1
   49564:	dc400115 	stw	r17,4(sp)
   49568:	80a3883a 	add	r17,r16,r2
   4956c:	dd400515 	stw	r21,20(sp)
   49570:	dd000415 	stw	r20,16(sp)
   49574:	dc800215 	stw	r18,8(sp)
   49578:	dfc00615 	stw	ra,24(sp)
   4957c:	2825883a 	mov	r18,r5
   49580:	dcc00315 	stw	r19,12(sp)
   49584:	3029883a 	mov	r20,r6
   49588:	202b883a 	mov	r21,r4
   4958c:	29400117 	ldw	r5,4(r5)
   49590:	1c40030e 	bge	r3,r17,495a0 <__lshift+0x54>
   49594:	18c7883a 	add	r3,r3,r3
   49598:	29400044 	addi	r5,r5,1
   4959c:	1c7ffd16 	blt	r3,r17,49594 <__lshift+0x48>
   495a0:	a809883a 	mov	r4,r21
   495a4:	00491880 	call	49188 <_Balloc>
   495a8:	1027883a 	mov	r19,r2
   495ac:	11400504 	addi	r5,r2,20
   495b0:	0400090e 	bge	zero,r16,495d8 <__lshift+0x8c>
   495b4:	2805883a 	mov	r2,r5
   495b8:	0007883a 	mov	r3,zero
   495bc:	18c00044 	addi	r3,r3,1
   495c0:	10000015 	stw	zero,0(r2)
   495c4:	10800104 	addi	r2,r2,4
   495c8:	80fffc1e 	bne	r16,r3,495bc <__lshift+0x70>
   495cc:	8405883a 	add	r2,r16,r16
   495d0:	1085883a 	add	r2,r2,r2
   495d4:	288b883a 	add	r5,r5,r2
   495d8:	90800417 	ldw	r2,16(r18)
   495dc:	91000504 	addi	r4,r18,20
   495e0:	a18007cc 	andi	r6,r20,31
   495e4:	1085883a 	add	r2,r2,r2
   495e8:	1085883a 	add	r2,r2,r2
   495ec:	208f883a 	add	r7,r4,r2
   495f0:	30001e26 	beq	r6,zero,4966c <__lshift+0x120>
   495f4:	00800804 	movi	r2,32
   495f8:	1191c83a 	sub	r8,r2,r6
   495fc:	0007883a 	mov	r3,zero
   49600:	20800017 	ldw	r2,0(r4)
   49604:	1184983a 	sll	r2,r2,r6
   49608:	1884b03a 	or	r2,r3,r2
   4960c:	28800015 	stw	r2,0(r5)
   49610:	20c00017 	ldw	r3,0(r4)
   49614:	21000104 	addi	r4,r4,4
   49618:	29400104 	addi	r5,r5,4
   4961c:	1a06d83a 	srl	r3,r3,r8
   49620:	21fff736 	bltu	r4,r7,49600 <__lshift+0xb4>
   49624:	28c00015 	stw	r3,0(r5)
   49628:	18000126 	beq	r3,zero,49630 <__lshift+0xe4>
   4962c:	8c400044 	addi	r17,r17,1
   49630:	88bfffc4 	addi	r2,r17,-1
   49634:	98800415 	stw	r2,16(r19)
   49638:	a809883a 	mov	r4,r21
   4963c:	900b883a 	mov	r5,r18
   49640:	0048c080 	call	48c08 <_Bfree>
   49644:	9805883a 	mov	r2,r19
   49648:	dfc00617 	ldw	ra,24(sp)
   4964c:	dd400517 	ldw	r21,20(sp)
   49650:	dd000417 	ldw	r20,16(sp)
   49654:	dcc00317 	ldw	r19,12(sp)
   49658:	dc800217 	ldw	r18,8(sp)
   4965c:	dc400117 	ldw	r17,4(sp)
   49660:	dc000017 	ldw	r16,0(sp)
   49664:	dec00704 	addi	sp,sp,28
   49668:	f800283a 	ret
   4966c:	20800017 	ldw	r2,0(r4)
   49670:	21000104 	addi	r4,r4,4
   49674:	28800015 	stw	r2,0(r5)
   49678:	29400104 	addi	r5,r5,4
   4967c:	21ffec2e 	bgeu	r4,r7,49630 <__lshift+0xe4>
   49680:	20800017 	ldw	r2,0(r4)
   49684:	21000104 	addi	r4,r4,4
   49688:	28800015 	stw	r2,0(r5)
   4968c:	29400104 	addi	r5,r5,4
   49690:	21fff636 	bltu	r4,r7,4966c <__lshift+0x120>
   49694:	003fe606 	br	49630 <__lshift+0xe4>

00049698 <__multiply>:
   49698:	defff904 	addi	sp,sp,-28
   4969c:	dcc00315 	stw	r19,12(sp)
   496a0:	dc800215 	stw	r18,8(sp)
   496a4:	2cc00417 	ldw	r19,16(r5)
   496a8:	34800417 	ldw	r18,16(r6)
   496ac:	dd000415 	stw	r20,16(sp)
   496b0:	dc400115 	stw	r17,4(sp)
   496b4:	dfc00615 	stw	ra,24(sp)
   496b8:	dd400515 	stw	r21,20(sp)
   496bc:	dc000015 	stw	r16,0(sp)
   496c0:	2823883a 	mov	r17,r5
   496c4:	3029883a 	mov	r20,r6
   496c8:	9c80040e 	bge	r19,r18,496dc <__multiply+0x44>
   496cc:	9027883a 	mov	r19,r18
   496d0:	2c800417 	ldw	r18,16(r5)
   496d4:	2829883a 	mov	r20,r5
   496d8:	3023883a 	mov	r17,r6
   496dc:	88800217 	ldw	r2,8(r17)
   496e0:	9ca1883a 	add	r16,r19,r18
   496e4:	89400117 	ldw	r5,4(r17)
   496e8:	1400010e 	bge	r2,r16,496f0 <__multiply+0x58>
   496ec:	29400044 	addi	r5,r5,1
   496f0:	00491880 	call	49188 <_Balloc>
   496f4:	102b883a 	mov	r21,r2
   496f8:	8405883a 	add	r2,r16,r16
   496fc:	1085883a 	add	r2,r2,r2
   49700:	a9000504 	addi	r4,r21,20
   49704:	209d883a 	add	r14,r4,r2
   49708:	2380042e 	bgeu	r4,r14,4971c <__multiply+0x84>
   4970c:	2005883a 	mov	r2,r4
   49710:	10000015 	stw	zero,0(r2)
   49714:	10800104 	addi	r2,r2,4
   49718:	13bffd36 	bltu	r2,r14,49710 <__multiply+0x78>
   4971c:	9485883a 	add	r2,r18,r18
   49720:	9cc7883a 	add	r3,r19,r19
   49724:	a1800504 	addi	r6,r20,20
   49728:	1085883a 	add	r2,r2,r2
   4972c:	8b400504 	addi	r13,r17,20
   49730:	18c7883a 	add	r3,r3,r3
   49734:	309f883a 	add	r15,r6,r2
   49738:	68d7883a 	add	r11,r13,r3
   4973c:	33c03b2e 	bgeu	r6,r15,4982c <__multiply+0x194>
   49740:	2019883a 	mov	r12,r4
   49744:	30800017 	ldw	r2,0(r6)
   49748:	127fffcc 	andi	r9,r2,65535
   4974c:	48001826 	beq	r9,zero,497b0 <__multiply+0x118>
   49750:	6811883a 	mov	r8,r13
   49754:	600f883a 	mov	r7,r12
   49758:	0015883a 	mov	r10,zero
   4975c:	40c00017 	ldw	r3,0(r8)
   49760:	39400017 	ldw	r5,0(r7)
   49764:	42000104 	addi	r8,r8,4
   49768:	193fffcc 	andi	r4,r3,65535
   4976c:	4909383a 	mul	r4,r9,r4
   49770:	1806d43a 	srli	r3,r3,16
   49774:	28bfffcc 	andi	r2,r5,65535
   49778:	5085883a 	add	r2,r10,r2
   4977c:	2089883a 	add	r4,r4,r2
   49780:	48c7383a 	mul	r3,r9,r3
   49784:	280ad43a 	srli	r5,r5,16
   49788:	2004d43a 	srli	r2,r4,16
   4978c:	3900000d 	sth	r4,0(r7)
   49790:	1947883a 	add	r3,r3,r5
   49794:	10c5883a 	add	r2,r2,r3
   49798:	3880008d 	sth	r2,2(r7)
   4979c:	1014d43a 	srli	r10,r2,16
   497a0:	39c00104 	addi	r7,r7,4
   497a4:	42ffed36 	bltu	r8,r11,4975c <__multiply+0xc4>
   497a8:	3a800015 	stw	r10,0(r7)
   497ac:	30800017 	ldw	r2,0(r6)
   497b0:	1012d43a 	srli	r9,r2,16
   497b4:	48001926 	beq	r9,zero,4981c <__multiply+0x184>
   497b8:	60800017 	ldw	r2,0(r12)
   497bc:	6811883a 	mov	r8,r13
   497c0:	600f883a 	mov	r7,r12
   497c4:	0015883a 	mov	r10,zero
   497c8:	100b883a 	mov	r5,r2
   497cc:	41000017 	ldw	r4,0(r8)
   497d0:	2806d43a 	srli	r3,r5,16
   497d4:	3880000d 	sth	r2,0(r7)
   497d8:	20bfffcc 	andi	r2,r4,65535
   497dc:	4885383a 	mul	r2,r9,r2
   497e0:	50c7883a 	add	r3,r10,r3
   497e4:	2008d43a 	srli	r4,r4,16
   497e8:	10c5883a 	add	r2,r2,r3
   497ec:	3880008d 	sth	r2,2(r7)
   497f0:	39c00104 	addi	r7,r7,4
   497f4:	39400017 	ldw	r5,0(r7)
   497f8:	4909383a 	mul	r4,r9,r4
   497fc:	1004d43a 	srli	r2,r2,16
   49800:	28ffffcc 	andi	r3,r5,65535
   49804:	20c9883a 	add	r4,r4,r3
   49808:	1105883a 	add	r2,r2,r4
   4980c:	42000104 	addi	r8,r8,4
   49810:	1014d43a 	srli	r10,r2,16
   49814:	42ffed36 	bltu	r8,r11,497cc <__multiply+0x134>
   49818:	38800015 	stw	r2,0(r7)
   4981c:	31800104 	addi	r6,r6,4
   49820:	33c0022e 	bgeu	r6,r15,4982c <__multiply+0x194>
   49824:	63000104 	addi	r12,r12,4
   49828:	003fc606 	br	49744 <__multiply+0xac>
   4982c:	0400090e 	bge	zero,r16,49854 <__multiply+0x1bc>
   49830:	70bfff17 	ldw	r2,-4(r14)
   49834:	70ffff04 	addi	r3,r14,-4
   49838:	10000326 	beq	r2,zero,49848 <__multiply+0x1b0>
   4983c:	00000506 	br	49854 <__multiply+0x1bc>
   49840:	18800017 	ldw	r2,0(r3)
   49844:	1000031e 	bne	r2,zero,49854 <__multiply+0x1bc>
   49848:	843fffc4 	addi	r16,r16,-1
   4984c:	18ffff04 	addi	r3,r3,-4
   49850:	803ffb1e 	bne	r16,zero,49840 <__multiply+0x1a8>
   49854:	a805883a 	mov	r2,r21
   49858:	ac000415 	stw	r16,16(r21)
   4985c:	dfc00617 	ldw	ra,24(sp)
   49860:	dd400517 	ldw	r21,20(sp)
   49864:	dd000417 	ldw	r20,16(sp)
   49868:	dcc00317 	ldw	r19,12(sp)
   4986c:	dc800217 	ldw	r18,8(sp)
   49870:	dc400117 	ldw	r17,4(sp)
   49874:	dc000017 	ldw	r16,0(sp)
   49878:	dec00704 	addi	sp,sp,28
   4987c:	f800283a 	ret

00049880 <__i2b>:
   49880:	defffd04 	addi	sp,sp,-12
   49884:	dc000015 	stw	r16,0(sp)
   49888:	04000044 	movi	r16,1
   4988c:	dc800115 	stw	r18,4(sp)
   49890:	2825883a 	mov	r18,r5
   49894:	800b883a 	mov	r5,r16
   49898:	dfc00215 	stw	ra,8(sp)
   4989c:	00491880 	call	49188 <_Balloc>
   498a0:	14000415 	stw	r16,16(r2)
   498a4:	14800515 	stw	r18,20(r2)
   498a8:	dfc00217 	ldw	ra,8(sp)
   498ac:	dc800117 	ldw	r18,4(sp)
   498b0:	dc000017 	ldw	r16,0(sp)
   498b4:	dec00304 	addi	sp,sp,12
   498b8:	f800283a 	ret

000498bc <__multadd>:
   498bc:	defffa04 	addi	sp,sp,-24
   498c0:	dc800215 	stw	r18,8(sp)
   498c4:	2c800417 	ldw	r18,16(r5)
   498c8:	dd000415 	stw	r20,16(sp)
   498cc:	dcc00315 	stw	r19,12(sp)
   498d0:	dc000015 	stw	r16,0(sp)
   498d4:	dfc00515 	stw	ra,20(sp)
   498d8:	3821883a 	mov	r16,r7
   498dc:	dc400115 	stw	r17,4(sp)
   498e0:	2827883a 	mov	r19,r5
   498e4:	2029883a 	mov	r20,r4
   498e8:	2a000504 	addi	r8,r5,20
   498ec:	000f883a 	mov	r7,zero
   498f0:	40800017 	ldw	r2,0(r8)
   498f4:	39c00044 	addi	r7,r7,1
   498f8:	10ffffcc 	andi	r3,r2,65535
   498fc:	1987383a 	mul	r3,r3,r6
   49900:	1004d43a 	srli	r2,r2,16
   49904:	1c07883a 	add	r3,r3,r16
   49908:	180ad43a 	srli	r5,r3,16
   4990c:	1185383a 	mul	r2,r2,r6
   49910:	18ffffcc 	andi	r3,r3,65535
   49914:	1145883a 	add	r2,r2,r5
   49918:	1008943a 	slli	r4,r2,16
   4991c:	1020d43a 	srli	r16,r2,16
   49920:	20c9883a 	add	r4,r4,r3
   49924:	41000015 	stw	r4,0(r8)
   49928:	42000104 	addi	r8,r8,4
   4992c:	3cbff016 	blt	r7,r18,498f0 <__multadd+0x34>
   49930:	80000826 	beq	r16,zero,49954 <__multadd+0x98>
   49934:	98800217 	ldw	r2,8(r19)
   49938:	90800f0e 	bge	r18,r2,49978 <__multadd+0xbc>
   4993c:	9485883a 	add	r2,r18,r18
   49940:	1085883a 	add	r2,r2,r2
   49944:	14c5883a 	add	r2,r2,r19
   49948:	90c00044 	addi	r3,r18,1
   4994c:	14000515 	stw	r16,20(r2)
   49950:	98c00415 	stw	r3,16(r19)
   49954:	9805883a 	mov	r2,r19
   49958:	dfc00517 	ldw	ra,20(sp)
   4995c:	dd000417 	ldw	r20,16(sp)
   49960:	dcc00317 	ldw	r19,12(sp)
   49964:	dc800217 	ldw	r18,8(sp)
   49968:	dc400117 	ldw	r17,4(sp)
   4996c:	dc000017 	ldw	r16,0(sp)
   49970:	dec00604 	addi	sp,sp,24
   49974:	f800283a 	ret
   49978:	99400117 	ldw	r5,4(r19)
   4997c:	a009883a 	mov	r4,r20
   49980:	29400044 	addi	r5,r5,1
   49984:	00491880 	call	49188 <_Balloc>
   49988:	99800417 	ldw	r6,16(r19)
   4998c:	99400304 	addi	r5,r19,12
   49990:	11000304 	addi	r4,r2,12
   49994:	318d883a 	add	r6,r6,r6
   49998:	318d883a 	add	r6,r6,r6
   4999c:	31800204 	addi	r6,r6,8
   499a0:	1023883a 	mov	r17,r2
   499a4:	00489f00 	call	489f0 <memcpy>
   499a8:	980b883a 	mov	r5,r19
   499ac:	a009883a 	mov	r4,r20
   499b0:	0048c080 	call	48c08 <_Bfree>
   499b4:	8827883a 	mov	r19,r17
   499b8:	003fe006 	br	4993c <__multadd+0x80>

000499bc <__pow5mult>:
   499bc:	defffa04 	addi	sp,sp,-24
   499c0:	308000cc 	andi	r2,r6,3
   499c4:	dd000415 	stw	r20,16(sp)
   499c8:	dcc00315 	stw	r19,12(sp)
   499cc:	dc000015 	stw	r16,0(sp)
   499d0:	dfc00515 	stw	ra,20(sp)
   499d4:	dc800215 	stw	r18,8(sp)
   499d8:	dc400115 	stw	r17,4(sp)
   499dc:	3021883a 	mov	r16,r6
   499e0:	2027883a 	mov	r19,r4
   499e4:	2829883a 	mov	r20,r5
   499e8:	10002b1e 	bne	r2,zero,49a98 <__pow5mult+0xdc>
   499ec:	8025d0ba 	srai	r18,r16,2
   499f0:	90001b26 	beq	r18,zero,49a60 <__pow5mult+0xa4>
   499f4:	9c001217 	ldw	r16,72(r19)
   499f8:	8000081e 	bne	r16,zero,49a1c <__pow5mult+0x60>
   499fc:	00003006 	br	49ac0 <__pow5mult+0x104>
   49a00:	800b883a 	mov	r5,r16
   49a04:	800d883a 	mov	r6,r16
   49a08:	9809883a 	mov	r4,r19
   49a0c:	90001426 	beq	r18,zero,49a60 <__pow5mult+0xa4>
   49a10:	80800017 	ldw	r2,0(r16)
   49a14:	10001b26 	beq	r2,zero,49a84 <__pow5mult+0xc8>
   49a18:	1021883a 	mov	r16,r2
   49a1c:	9080004c 	andi	r2,r18,1
   49a20:	1005003a 	cmpeq	r2,r2,zero
   49a24:	9025d07a 	srai	r18,r18,1
   49a28:	800d883a 	mov	r6,r16
   49a2c:	9809883a 	mov	r4,r19
   49a30:	a00b883a 	mov	r5,r20
   49a34:	103ff21e 	bne	r2,zero,49a00 <__pow5mult+0x44>
   49a38:	00496980 	call	49698 <__multiply>
   49a3c:	a00b883a 	mov	r5,r20
   49a40:	9809883a 	mov	r4,r19
   49a44:	1023883a 	mov	r17,r2
   49a48:	0048c080 	call	48c08 <_Bfree>
   49a4c:	8829883a 	mov	r20,r17
   49a50:	800b883a 	mov	r5,r16
   49a54:	800d883a 	mov	r6,r16
   49a58:	9809883a 	mov	r4,r19
   49a5c:	903fec1e 	bne	r18,zero,49a10 <__pow5mult+0x54>
   49a60:	a005883a 	mov	r2,r20
   49a64:	dfc00517 	ldw	ra,20(sp)
   49a68:	dd000417 	ldw	r20,16(sp)
   49a6c:	dcc00317 	ldw	r19,12(sp)
   49a70:	dc800217 	ldw	r18,8(sp)
   49a74:	dc400117 	ldw	r17,4(sp)
   49a78:	dc000017 	ldw	r16,0(sp)
   49a7c:	dec00604 	addi	sp,sp,24
   49a80:	f800283a 	ret
   49a84:	00496980 	call	49698 <__multiply>
   49a88:	80800015 	stw	r2,0(r16)
   49a8c:	1021883a 	mov	r16,r2
   49a90:	10000015 	stw	zero,0(r2)
   49a94:	003fe106 	br	49a1c <__pow5mult+0x60>
   49a98:	1085883a 	add	r2,r2,r2
   49a9c:	00c00174 	movhi	r3,5
   49aa0:	18fffd04 	addi	r3,r3,-12
   49aa4:	1085883a 	add	r2,r2,r2
   49aa8:	10c5883a 	add	r2,r2,r3
   49aac:	11bfff17 	ldw	r6,-4(r2)
   49ab0:	000f883a 	mov	r7,zero
   49ab4:	00498bc0 	call	498bc <__multadd>
   49ab8:	1029883a 	mov	r20,r2
   49abc:	003fcb06 	br	499ec <__pow5mult+0x30>
   49ac0:	9809883a 	mov	r4,r19
   49ac4:	01409c44 	movi	r5,625
   49ac8:	00498800 	call	49880 <__i2b>
   49acc:	98801215 	stw	r2,72(r19)
   49ad0:	1021883a 	mov	r16,r2
   49ad4:	10000015 	stw	zero,0(r2)
   49ad8:	003fd006 	br	49a1c <__pow5mult+0x60>

00049adc <__s2b>:
   49adc:	defff904 	addi	sp,sp,-28
   49ae0:	dcc00315 	stw	r19,12(sp)
   49ae4:	dc800215 	stw	r18,8(sp)
   49ae8:	2827883a 	mov	r19,r5
   49aec:	2025883a 	mov	r18,r4
   49af0:	01400244 	movi	r5,9
   49af4:	39000204 	addi	r4,r7,8
   49af8:	dd000415 	stw	r20,16(sp)
   49afc:	dc400115 	stw	r17,4(sp)
   49b00:	dfc00615 	stw	ra,24(sp)
   49b04:	dd400515 	stw	r21,20(sp)
   49b08:	dc000015 	stw	r16,0(sp)
   49b0c:	3829883a 	mov	r20,r7
   49b10:	3023883a 	mov	r17,r6
   49b14:	0042e440 	call	42e44 <__divsi3>
   49b18:	00c00044 	movi	r3,1
   49b1c:	1880350e 	bge	r3,r2,49bf4 <__s2b+0x118>
   49b20:	000b883a 	mov	r5,zero
   49b24:	18c7883a 	add	r3,r3,r3
   49b28:	29400044 	addi	r5,r5,1
   49b2c:	18bffd16 	blt	r3,r2,49b24 <__s2b+0x48>
   49b30:	9009883a 	mov	r4,r18
   49b34:	00491880 	call	49188 <_Balloc>
   49b38:	1011883a 	mov	r8,r2
   49b3c:	d8800717 	ldw	r2,28(sp)
   49b40:	00c00044 	movi	r3,1
   49b44:	01800244 	movi	r6,9
   49b48:	40800515 	stw	r2,20(r8)
   49b4c:	40c00415 	stw	r3,16(r8)
   49b50:	3440260e 	bge	r6,r17,49bec <__s2b+0x110>
   49b54:	3021883a 	mov	r16,r6
   49b58:	99ab883a 	add	r21,r19,r6
   49b5c:	9c05883a 	add	r2,r19,r16
   49b60:	11c00007 	ldb	r7,0(r2)
   49b64:	400b883a 	mov	r5,r8
   49b68:	9009883a 	mov	r4,r18
   49b6c:	39fff404 	addi	r7,r7,-48
   49b70:	01800284 	movi	r6,10
   49b74:	00498bc0 	call	498bc <__multadd>
   49b78:	84000044 	addi	r16,r16,1
   49b7c:	1011883a 	mov	r8,r2
   49b80:	8c3ff61e 	bne	r17,r16,49b5c <__s2b+0x80>
   49b84:	ac45883a 	add	r2,r21,r17
   49b88:	117ffe04 	addi	r5,r2,-8
   49b8c:	880d883a 	mov	r6,r17
   49b90:	35000c0e 	bge	r6,r20,49bc4 <__s2b+0xe8>
   49b94:	a185c83a 	sub	r2,r20,r6
   49b98:	2821883a 	mov	r16,r5
   49b9c:	28a3883a 	add	r17,r5,r2
   49ba0:	81c00007 	ldb	r7,0(r16)
   49ba4:	400b883a 	mov	r5,r8
   49ba8:	9009883a 	mov	r4,r18
   49bac:	39fff404 	addi	r7,r7,-48
   49bb0:	01800284 	movi	r6,10
   49bb4:	00498bc0 	call	498bc <__multadd>
   49bb8:	84000044 	addi	r16,r16,1
   49bbc:	1011883a 	mov	r8,r2
   49bc0:	847ff71e 	bne	r16,r17,49ba0 <__s2b+0xc4>
   49bc4:	4005883a 	mov	r2,r8
   49bc8:	dfc00617 	ldw	ra,24(sp)
   49bcc:	dd400517 	ldw	r21,20(sp)
   49bd0:	dd000417 	ldw	r20,16(sp)
   49bd4:	dcc00317 	ldw	r19,12(sp)
   49bd8:	dc800217 	ldw	r18,8(sp)
   49bdc:	dc400117 	ldw	r17,4(sp)
   49be0:	dc000017 	ldw	r16,0(sp)
   49be4:	dec00704 	addi	sp,sp,28
   49be8:	f800283a 	ret
   49bec:	99400284 	addi	r5,r19,10
   49bf0:	003fe706 	br	49b90 <__s2b+0xb4>
   49bf4:	000b883a 	mov	r5,zero
   49bf8:	003fcd06 	br	49b30 <__s2b+0x54>

00049bfc <_realloc_r>:
   49bfc:	defff404 	addi	sp,sp,-48
   49c00:	dd800815 	stw	r22,32(sp)
   49c04:	dc800415 	stw	r18,16(sp)
   49c08:	dc400315 	stw	r17,12(sp)
   49c0c:	dfc00b15 	stw	ra,44(sp)
   49c10:	df000a15 	stw	fp,40(sp)
   49c14:	ddc00915 	stw	r23,36(sp)
   49c18:	dd400715 	stw	r21,28(sp)
   49c1c:	dd000615 	stw	r20,24(sp)
   49c20:	dcc00515 	stw	r19,20(sp)
   49c24:	dc000215 	stw	r16,8(sp)
   49c28:	2825883a 	mov	r18,r5
   49c2c:	3023883a 	mov	r17,r6
   49c30:	202d883a 	mov	r22,r4
   49c34:	2800c926 	beq	r5,zero,49f5c <_realloc_r+0x360>
   49c38:	004d0e80 	call	4d0e8 <__malloc_lock>
   49c3c:	943ffe04 	addi	r16,r18,-8
   49c40:	88c002c4 	addi	r3,r17,11
   49c44:	00800584 	movi	r2,22
   49c48:	82000117 	ldw	r8,4(r16)
   49c4c:	10c01b2e 	bgeu	r2,r3,49cbc <_realloc_r+0xc0>
   49c50:	00bffe04 	movi	r2,-8
   49c54:	188e703a 	and	r7,r3,r2
   49c58:	3839883a 	mov	fp,r7
   49c5c:	38001a16 	blt	r7,zero,49cc8 <_realloc_r+0xcc>
   49c60:	e4401936 	bltu	fp,r17,49cc8 <_realloc_r+0xcc>
   49c64:	013fff04 	movi	r4,-4
   49c68:	4126703a 	and	r19,r8,r4
   49c6c:	99c02616 	blt	r19,r7,49d08 <_realloc_r+0x10c>
   49c70:	802b883a 	mov	r21,r16
   49c74:	9829883a 	mov	r20,r19
   49c78:	84000204 	addi	r16,r16,8
   49c7c:	a80f883a 	mov	r7,r21
   49c80:	a70dc83a 	sub	r6,r20,fp
   49c84:	008003c4 	movi	r2,15
   49c88:	1180c136 	bltu	r2,r6,49f90 <_realloc_r+0x394>
   49c8c:	38800117 	ldw	r2,4(r7)
   49c90:	a549883a 	add	r4,r20,r21
   49c94:	1080004c 	andi	r2,r2,1
   49c98:	a084b03a 	or	r2,r20,r2
   49c9c:	38800115 	stw	r2,4(r7)
   49ca0:	20c00117 	ldw	r3,4(r4)
   49ca4:	18c00054 	ori	r3,r3,1
   49ca8:	20c00115 	stw	r3,4(r4)
   49cac:	b009883a 	mov	r4,r22
   49cb0:	004d1080 	call	4d108 <__malloc_unlock>
   49cb4:	8023883a 	mov	r17,r16
   49cb8:	00000606 	br	49cd4 <_realloc_r+0xd8>
   49cbc:	01c00404 	movi	r7,16
   49cc0:	3839883a 	mov	fp,r7
   49cc4:	e47fe72e 	bgeu	fp,r17,49c64 <_realloc_r+0x68>
   49cc8:	00800304 	movi	r2,12
   49ccc:	0023883a 	mov	r17,zero
   49cd0:	b0800015 	stw	r2,0(r22)
   49cd4:	8805883a 	mov	r2,r17
   49cd8:	dfc00b17 	ldw	ra,44(sp)
   49cdc:	df000a17 	ldw	fp,40(sp)
   49ce0:	ddc00917 	ldw	r23,36(sp)
   49ce4:	dd800817 	ldw	r22,32(sp)
   49ce8:	dd400717 	ldw	r21,28(sp)
   49cec:	dd000617 	ldw	r20,24(sp)
   49cf0:	dcc00517 	ldw	r19,20(sp)
   49cf4:	dc800417 	ldw	r18,16(sp)
   49cf8:	dc400317 	ldw	r17,12(sp)
   49cfc:	dc000217 	ldw	r16,8(sp)
   49d00:	dec00c04 	addi	sp,sp,48
   49d04:	f800283a 	ret
   49d08:	00800174 	movhi	r2,5
   49d0c:	10817604 	addi	r2,r2,1496
   49d10:	12400217 	ldw	r9,8(r2)
   49d14:	84cd883a 	add	r6,r16,r19
   49d18:	802b883a 	mov	r21,r16
   49d1c:	3240b926 	beq	r6,r9,4a004 <_realloc_r+0x408>
   49d20:	31400117 	ldw	r5,4(r6)
   49d24:	00bfff84 	movi	r2,-2
   49d28:	2884703a 	and	r2,r5,r2
   49d2c:	1185883a 	add	r2,r2,r6
   49d30:	10c00117 	ldw	r3,4(r2)
   49d34:	18c0004c 	andi	r3,r3,1
   49d38:	1807003a 	cmpeq	r3,r3,zero
   49d3c:	1800a326 	beq	r3,zero,49fcc <_realloc_r+0x3d0>
   49d40:	2908703a 	and	r4,r5,r4
   49d44:	9929883a 	add	r20,r19,r4
   49d48:	a1c0a30e 	bge	r20,r7,49fd8 <_realloc_r+0x3dc>
   49d4c:	4080004c 	andi	r2,r8,1
   49d50:	1000551e 	bne	r2,zero,49ea8 <_realloc_r+0x2ac>
   49d54:	80800017 	ldw	r2,0(r16)
   49d58:	80afc83a 	sub	r23,r16,r2
   49d5c:	b8c00117 	ldw	r3,4(r23)
   49d60:	00bfff04 	movi	r2,-4
   49d64:	1884703a 	and	r2,r3,r2
   49d68:	30002e26 	beq	r6,zero,49e24 <_realloc_r+0x228>
   49d6c:	3240b926 	beq	r6,r9,4a054 <_realloc_r+0x458>
   49d70:	98a9883a 	add	r20,r19,r2
   49d74:	2509883a 	add	r4,r4,r20
   49d78:	d9000015 	stw	r4,0(sp)
   49d7c:	21c02a16 	blt	r4,r7,49e28 <_realloc_r+0x22c>
   49d80:	30800317 	ldw	r2,12(r6)
   49d84:	30c00217 	ldw	r3,8(r6)
   49d88:	01400904 	movi	r5,36
   49d8c:	99bfff04 	addi	r6,r19,-4
   49d90:	18800315 	stw	r2,12(r3)
   49d94:	10c00215 	stw	r3,8(r2)
   49d98:	b9000317 	ldw	r4,12(r23)
   49d9c:	b8800217 	ldw	r2,8(r23)
   49da0:	b82b883a 	mov	r21,r23
   49da4:	bc000204 	addi	r16,r23,8
   49da8:	20800215 	stw	r2,8(r4)
   49dac:	11000315 	stw	r4,12(r2)
   49db0:	2980e436 	bltu	r5,r6,4a144 <_realloc_r+0x548>
   49db4:	008004c4 	movi	r2,19
   49db8:	9009883a 	mov	r4,r18
   49dbc:	8011883a 	mov	r8,r16
   49dc0:	11800f2e 	bgeu	r2,r6,49e00 <_realloc_r+0x204>
   49dc4:	90800017 	ldw	r2,0(r18)
   49dc8:	ba000404 	addi	r8,r23,16
   49dcc:	91000204 	addi	r4,r18,8
   49dd0:	b8800215 	stw	r2,8(r23)
   49dd4:	90c00117 	ldw	r3,4(r18)
   49dd8:	008006c4 	movi	r2,27
   49ddc:	b8c00315 	stw	r3,12(r23)
   49de0:	1180072e 	bgeu	r2,r6,49e00 <_realloc_r+0x204>
   49de4:	90c00217 	ldw	r3,8(r18)
   49de8:	ba000604 	addi	r8,r23,24
   49dec:	91000404 	addi	r4,r18,16
   49df0:	b8c00415 	stw	r3,16(r23)
   49df4:	90800317 	ldw	r2,12(r18)
   49df8:	b8800515 	stw	r2,20(r23)
   49dfc:	3140e726 	beq	r6,r5,4a19c <_realloc_r+0x5a0>
   49e00:	20800017 	ldw	r2,0(r4)
   49e04:	dd000017 	ldw	r20,0(sp)
   49e08:	b80f883a 	mov	r7,r23
   49e0c:	40800015 	stw	r2,0(r8)
   49e10:	20c00117 	ldw	r3,4(r4)
   49e14:	40c00115 	stw	r3,4(r8)
   49e18:	20800217 	ldw	r2,8(r4)
   49e1c:	40800215 	stw	r2,8(r8)
   49e20:	003f9706 	br	49c80 <_realloc_r+0x84>
   49e24:	98a9883a 	add	r20,r19,r2
   49e28:	a1c01f16 	blt	r20,r7,49ea8 <_realloc_r+0x2ac>
   49e2c:	b8c00317 	ldw	r3,12(r23)
   49e30:	b8800217 	ldw	r2,8(r23)
   49e34:	99bfff04 	addi	r6,r19,-4
   49e38:	01400904 	movi	r5,36
   49e3c:	b82b883a 	mov	r21,r23
   49e40:	18800215 	stw	r2,8(r3)
   49e44:	10c00315 	stw	r3,12(r2)
   49e48:	bc000204 	addi	r16,r23,8
   49e4c:	2980c336 	bltu	r5,r6,4a15c <_realloc_r+0x560>
   49e50:	008004c4 	movi	r2,19
   49e54:	9009883a 	mov	r4,r18
   49e58:	8011883a 	mov	r8,r16
   49e5c:	11800f2e 	bgeu	r2,r6,49e9c <_realloc_r+0x2a0>
   49e60:	90800017 	ldw	r2,0(r18)
   49e64:	ba000404 	addi	r8,r23,16
   49e68:	91000204 	addi	r4,r18,8
   49e6c:	b8800215 	stw	r2,8(r23)
   49e70:	90c00117 	ldw	r3,4(r18)
   49e74:	008006c4 	movi	r2,27
   49e78:	b8c00315 	stw	r3,12(r23)
   49e7c:	1180072e 	bgeu	r2,r6,49e9c <_realloc_r+0x2a0>
   49e80:	90c00217 	ldw	r3,8(r18)
   49e84:	ba000604 	addi	r8,r23,24
   49e88:	91000404 	addi	r4,r18,16
   49e8c:	b8c00415 	stw	r3,16(r23)
   49e90:	90800317 	ldw	r2,12(r18)
   49e94:	b8800515 	stw	r2,20(r23)
   49e98:	3140c726 	beq	r6,r5,4a1b8 <_realloc_r+0x5bc>
   49e9c:	20800017 	ldw	r2,0(r4)
   49ea0:	b80f883a 	mov	r7,r23
   49ea4:	003fd906 	br	49e0c <_realloc_r+0x210>
   49ea8:	880b883a 	mov	r5,r17
   49eac:	b009883a 	mov	r4,r22
   49eb0:	00481cc0 	call	481cc <_malloc_r>
   49eb4:	1023883a 	mov	r17,r2
   49eb8:	10002526 	beq	r2,zero,49f50 <_realloc_r+0x354>
   49ebc:	80800117 	ldw	r2,4(r16)
   49ec0:	00ffff84 	movi	r3,-2
   49ec4:	893ffe04 	addi	r4,r17,-8
   49ec8:	10c4703a 	and	r2,r2,r3
   49ecc:	8085883a 	add	r2,r16,r2
   49ed0:	20809526 	beq	r4,r2,4a128 <_realloc_r+0x52c>
   49ed4:	99bfff04 	addi	r6,r19,-4
   49ed8:	01c00904 	movi	r7,36
   49edc:	39804536 	bltu	r7,r6,49ff4 <_realloc_r+0x3f8>
   49ee0:	008004c4 	movi	r2,19
   49ee4:	9009883a 	mov	r4,r18
   49ee8:	880b883a 	mov	r5,r17
   49eec:	11800f2e 	bgeu	r2,r6,49f2c <_realloc_r+0x330>
   49ef0:	90800017 	ldw	r2,0(r18)
   49ef4:	89400204 	addi	r5,r17,8
   49ef8:	91000204 	addi	r4,r18,8
   49efc:	88800015 	stw	r2,0(r17)
   49f00:	90c00117 	ldw	r3,4(r18)
   49f04:	008006c4 	movi	r2,27
   49f08:	88c00115 	stw	r3,4(r17)
   49f0c:	1180072e 	bgeu	r2,r6,49f2c <_realloc_r+0x330>
   49f10:	90c00217 	ldw	r3,8(r18)
   49f14:	89400404 	addi	r5,r17,16
   49f18:	91000404 	addi	r4,r18,16
   49f1c:	88c00215 	stw	r3,8(r17)
   49f20:	90800317 	ldw	r2,12(r18)
   49f24:	88800315 	stw	r2,12(r17)
   49f28:	31c09126 	beq	r6,r7,4a170 <_realloc_r+0x574>
   49f2c:	20800017 	ldw	r2,0(r4)
   49f30:	28800015 	stw	r2,0(r5)
   49f34:	20c00117 	ldw	r3,4(r4)
   49f38:	28c00115 	stw	r3,4(r5)
   49f3c:	20800217 	ldw	r2,8(r4)
   49f40:	28800215 	stw	r2,8(r5)
   49f44:	900b883a 	mov	r5,r18
   49f48:	b009883a 	mov	r4,r22
   49f4c:	00476440 	call	47644 <_free_r>
   49f50:	b009883a 	mov	r4,r22
   49f54:	004d1080 	call	4d108 <__malloc_unlock>
   49f58:	003f5e06 	br	49cd4 <_realloc_r+0xd8>
   49f5c:	300b883a 	mov	r5,r6
   49f60:	dfc00b17 	ldw	ra,44(sp)
   49f64:	df000a17 	ldw	fp,40(sp)
   49f68:	ddc00917 	ldw	r23,36(sp)
   49f6c:	dd800817 	ldw	r22,32(sp)
   49f70:	dd400717 	ldw	r21,28(sp)
   49f74:	dd000617 	ldw	r20,24(sp)
   49f78:	dcc00517 	ldw	r19,20(sp)
   49f7c:	dc800417 	ldw	r18,16(sp)
   49f80:	dc400317 	ldw	r17,12(sp)
   49f84:	dc000217 	ldw	r16,8(sp)
   49f88:	dec00c04 	addi	sp,sp,48
   49f8c:	00481cc1 	jmpi	481cc <_malloc_r>
   49f90:	38800117 	ldw	r2,4(r7)
   49f94:	e54b883a 	add	r5,fp,r21
   49f98:	31000054 	ori	r4,r6,1
   49f9c:	1080004c 	andi	r2,r2,1
   49fa0:	1704b03a 	or	r2,r2,fp
   49fa4:	38800115 	stw	r2,4(r7)
   49fa8:	29000115 	stw	r4,4(r5)
   49fac:	2987883a 	add	r3,r5,r6
   49fb0:	18800117 	ldw	r2,4(r3)
   49fb4:	29400204 	addi	r5,r5,8
   49fb8:	b009883a 	mov	r4,r22
   49fbc:	10800054 	ori	r2,r2,1
   49fc0:	18800115 	stw	r2,4(r3)
   49fc4:	00476440 	call	47644 <_free_r>
   49fc8:	003f3806 	br	49cac <_realloc_r+0xb0>
   49fcc:	000d883a 	mov	r6,zero
   49fd0:	0009883a 	mov	r4,zero
   49fd4:	003f5d06 	br	49d4c <_realloc_r+0x150>
   49fd8:	30c00217 	ldw	r3,8(r6)
   49fdc:	30800317 	ldw	r2,12(r6)
   49fe0:	800f883a 	mov	r7,r16
   49fe4:	84000204 	addi	r16,r16,8
   49fe8:	10c00215 	stw	r3,8(r2)
   49fec:	18800315 	stw	r2,12(r3)
   49ff0:	003f2306 	br	49c80 <_realloc_r+0x84>
   49ff4:	8809883a 	mov	r4,r17
   49ff8:	900b883a 	mov	r5,r18
   49ffc:	0048a900 	call	48a90 <memmove>
   4a000:	003fd006 	br	49f44 <_realloc_r+0x348>
   4a004:	30800117 	ldw	r2,4(r6)
   4a008:	e0c00404 	addi	r3,fp,16
   4a00c:	1108703a 	and	r4,r2,r4
   4a010:	9905883a 	add	r2,r19,r4
   4a014:	10ff4d16 	blt	r2,r3,49d4c <_realloc_r+0x150>
   4a018:	1705c83a 	sub	r2,r2,fp
   4a01c:	870b883a 	add	r5,r16,fp
   4a020:	10800054 	ori	r2,r2,1
   4a024:	28800115 	stw	r2,4(r5)
   4a028:	80c00117 	ldw	r3,4(r16)
   4a02c:	00800174 	movhi	r2,5
   4a030:	10817604 	addi	r2,r2,1496
   4a034:	b009883a 	mov	r4,r22
   4a038:	18c0004c 	andi	r3,r3,1
   4a03c:	e0c6b03a 	or	r3,fp,r3
   4a040:	11400215 	stw	r5,8(r2)
   4a044:	80c00115 	stw	r3,4(r16)
   4a048:	004d1080 	call	4d108 <__malloc_unlock>
   4a04c:	84400204 	addi	r17,r16,8
   4a050:	003f2006 	br	49cd4 <_realloc_r+0xd8>
   4a054:	98a9883a 	add	r20,r19,r2
   4a058:	2509883a 	add	r4,r4,r20
   4a05c:	e0800404 	addi	r2,fp,16
   4a060:	d9000115 	stw	r4,4(sp)
   4a064:	20bf7016 	blt	r4,r2,49e28 <_realloc_r+0x22c>
   4a068:	b8c00317 	ldw	r3,12(r23)
   4a06c:	b8800217 	ldw	r2,8(r23)
   4a070:	99bfff04 	addi	r6,r19,-4
   4a074:	01400904 	movi	r5,36
   4a078:	18800215 	stw	r2,8(r3)
   4a07c:	10c00315 	stw	r3,12(r2)
   4a080:	bc400204 	addi	r17,r23,8
   4a084:	29804136 	bltu	r5,r6,4a18c <_realloc_r+0x590>
   4a088:	008004c4 	movi	r2,19
   4a08c:	9009883a 	mov	r4,r18
   4a090:	880f883a 	mov	r7,r17
   4a094:	11800f2e 	bgeu	r2,r6,4a0d4 <_realloc_r+0x4d8>
   4a098:	90800017 	ldw	r2,0(r18)
   4a09c:	b9c00404 	addi	r7,r23,16
   4a0a0:	91000204 	addi	r4,r18,8
   4a0a4:	b8800215 	stw	r2,8(r23)
   4a0a8:	90c00117 	ldw	r3,4(r18)
   4a0ac:	008006c4 	movi	r2,27
   4a0b0:	b8c00315 	stw	r3,12(r23)
   4a0b4:	1180072e 	bgeu	r2,r6,4a0d4 <_realloc_r+0x4d8>
   4a0b8:	90c00217 	ldw	r3,8(r18)
   4a0bc:	b9c00604 	addi	r7,r23,24
   4a0c0:	91000404 	addi	r4,r18,16
   4a0c4:	b8c00415 	stw	r3,16(r23)
   4a0c8:	90800317 	ldw	r2,12(r18)
   4a0cc:	b8800515 	stw	r2,20(r23)
   4a0d0:	31404026 	beq	r6,r5,4a1d4 <_realloc_r+0x5d8>
   4a0d4:	20800017 	ldw	r2,0(r4)
   4a0d8:	38800015 	stw	r2,0(r7)
   4a0dc:	20c00117 	ldw	r3,4(r4)
   4a0e0:	38c00115 	stw	r3,4(r7)
   4a0e4:	20800217 	ldw	r2,8(r4)
   4a0e8:	38800215 	stw	r2,8(r7)
   4a0ec:	d8c00117 	ldw	r3,4(sp)
   4a0f0:	bf0b883a 	add	r5,r23,fp
   4a0f4:	b009883a 	mov	r4,r22
   4a0f8:	1f05c83a 	sub	r2,r3,fp
   4a0fc:	10800054 	ori	r2,r2,1
   4a100:	28800115 	stw	r2,4(r5)
   4a104:	b8c00117 	ldw	r3,4(r23)
   4a108:	00800174 	movhi	r2,5
   4a10c:	10817604 	addi	r2,r2,1496
   4a110:	11400215 	stw	r5,8(r2)
   4a114:	18c0004c 	andi	r3,r3,1
   4a118:	e0c6b03a 	or	r3,fp,r3
   4a11c:	b8c00115 	stw	r3,4(r23)
   4a120:	004d1080 	call	4d108 <__malloc_unlock>
   4a124:	003eeb06 	br	49cd4 <_realloc_r+0xd8>
   4a128:	20800117 	ldw	r2,4(r4)
   4a12c:	00ffff04 	movi	r3,-4
   4a130:	800f883a 	mov	r7,r16
   4a134:	10c4703a 	and	r2,r2,r3
   4a138:	98a9883a 	add	r20,r19,r2
   4a13c:	84000204 	addi	r16,r16,8
   4a140:	003ecf06 	br	49c80 <_realloc_r+0x84>
   4a144:	900b883a 	mov	r5,r18
   4a148:	8009883a 	mov	r4,r16
   4a14c:	0048a900 	call	48a90 <memmove>
   4a150:	dd000017 	ldw	r20,0(sp)
   4a154:	b80f883a 	mov	r7,r23
   4a158:	003ec906 	br	49c80 <_realloc_r+0x84>
   4a15c:	900b883a 	mov	r5,r18
   4a160:	8009883a 	mov	r4,r16
   4a164:	0048a900 	call	48a90 <memmove>
   4a168:	b80f883a 	mov	r7,r23
   4a16c:	003ec406 	br	49c80 <_realloc_r+0x84>
   4a170:	90c00417 	ldw	r3,16(r18)
   4a174:	89400604 	addi	r5,r17,24
   4a178:	91000604 	addi	r4,r18,24
   4a17c:	88c00415 	stw	r3,16(r17)
   4a180:	90800517 	ldw	r2,20(r18)
   4a184:	88800515 	stw	r2,20(r17)
   4a188:	003f6806 	br	49f2c <_realloc_r+0x330>
   4a18c:	900b883a 	mov	r5,r18
   4a190:	8809883a 	mov	r4,r17
   4a194:	0048a900 	call	48a90 <memmove>
   4a198:	003fd406 	br	4a0ec <_realloc_r+0x4f0>
   4a19c:	90c00417 	ldw	r3,16(r18)
   4a1a0:	91000604 	addi	r4,r18,24
   4a1a4:	ba000804 	addi	r8,r23,32
   4a1a8:	b8c00615 	stw	r3,24(r23)
   4a1ac:	90800517 	ldw	r2,20(r18)
   4a1b0:	b8800715 	stw	r2,28(r23)
   4a1b4:	003f1206 	br	49e00 <_realloc_r+0x204>
   4a1b8:	90c00417 	ldw	r3,16(r18)
   4a1bc:	91000604 	addi	r4,r18,24
   4a1c0:	ba000804 	addi	r8,r23,32
   4a1c4:	b8c00615 	stw	r3,24(r23)
   4a1c8:	90800517 	ldw	r2,20(r18)
   4a1cc:	b8800715 	stw	r2,28(r23)
   4a1d0:	003f3206 	br	49e9c <_realloc_r+0x2a0>
   4a1d4:	90c00417 	ldw	r3,16(r18)
   4a1d8:	91000604 	addi	r4,r18,24
   4a1dc:	b9c00804 	addi	r7,r23,32
   4a1e0:	b8c00615 	stw	r3,24(r23)
   4a1e4:	90800517 	ldw	r2,20(r18)
   4a1e8:	b8800715 	stw	r2,28(r23)
   4a1ec:	003fb906 	br	4a0d4 <_realloc_r+0x4d8>

0004a1f0 <__isinfd>:
   4a1f0:	200d883a 	mov	r6,r4
   4a1f4:	0109c83a 	sub	r4,zero,r4
   4a1f8:	2188b03a 	or	r4,r4,r6
   4a1fc:	2008d7fa 	srli	r4,r4,31
   4a200:	00a00034 	movhi	r2,32768
   4a204:	10bfffc4 	addi	r2,r2,-1
   4a208:	1144703a 	and	r2,r2,r5
   4a20c:	2088b03a 	or	r4,r4,r2
   4a210:	009ffc34 	movhi	r2,32752
   4a214:	1105c83a 	sub	r2,r2,r4
   4a218:	0087c83a 	sub	r3,zero,r2
   4a21c:	10c4b03a 	or	r2,r2,r3
   4a220:	1004d7fa 	srli	r2,r2,31
   4a224:	00c00044 	movi	r3,1
   4a228:	1885c83a 	sub	r2,r3,r2
   4a22c:	f800283a 	ret

0004a230 <__isnand>:
   4a230:	200d883a 	mov	r6,r4
   4a234:	0109c83a 	sub	r4,zero,r4
   4a238:	2188b03a 	or	r4,r4,r6
   4a23c:	2008d7fa 	srli	r4,r4,31
   4a240:	00a00034 	movhi	r2,32768
   4a244:	10bfffc4 	addi	r2,r2,-1
   4a248:	1144703a 	and	r2,r2,r5
   4a24c:	2088b03a 	or	r4,r4,r2
   4a250:	009ffc34 	movhi	r2,32752
   4a254:	1105c83a 	sub	r2,r2,r4
   4a258:	1004d7fa 	srli	r2,r2,31
   4a25c:	f800283a 	ret

0004a260 <_sbrk_r>:
   4a260:	defffd04 	addi	sp,sp,-12
   4a264:	dc000015 	stw	r16,0(sp)
   4a268:	04000174 	movhi	r16,5
   4a26c:	840e5904 	addi	r16,r16,14692
   4a270:	dc400115 	stw	r17,4(sp)
   4a274:	80000015 	stw	zero,0(r16)
   4a278:	2023883a 	mov	r17,r4
   4a27c:	2809883a 	mov	r4,r5
   4a280:	dfc00215 	stw	ra,8(sp)
   4a284:	004d5cc0 	call	4d5cc <sbrk>
   4a288:	1007883a 	mov	r3,r2
   4a28c:	00bfffc4 	movi	r2,-1
   4a290:	18800626 	beq	r3,r2,4a2ac <_sbrk_r+0x4c>
   4a294:	1805883a 	mov	r2,r3
   4a298:	dfc00217 	ldw	ra,8(sp)
   4a29c:	dc400117 	ldw	r17,4(sp)
   4a2a0:	dc000017 	ldw	r16,0(sp)
   4a2a4:	dec00304 	addi	sp,sp,12
   4a2a8:	f800283a 	ret
   4a2ac:	80800017 	ldw	r2,0(r16)
   4a2b0:	103ff826 	beq	r2,zero,4a294 <_sbrk_r+0x34>
   4a2b4:	88800015 	stw	r2,0(r17)
   4a2b8:	1805883a 	mov	r2,r3
   4a2bc:	dfc00217 	ldw	ra,8(sp)
   4a2c0:	dc400117 	ldw	r17,4(sp)
   4a2c4:	dc000017 	ldw	r16,0(sp)
   4a2c8:	dec00304 	addi	sp,sp,12
   4a2cc:	f800283a 	ret

0004a2d0 <__sclose>:
   4a2d0:	2940038f 	ldh	r5,14(r5)
   4a2d4:	004a6041 	jmpi	4a604 <_close_r>

0004a2d8 <__sseek>:
   4a2d8:	defffe04 	addi	sp,sp,-8
   4a2dc:	dc000015 	stw	r16,0(sp)
   4a2e0:	2821883a 	mov	r16,r5
   4a2e4:	2940038f 	ldh	r5,14(r5)
   4a2e8:	dfc00115 	stw	ra,4(sp)
   4a2ec:	004a87c0 	call	4a87c <_lseek_r>
   4a2f0:	1007883a 	mov	r3,r2
   4a2f4:	00bfffc4 	movi	r2,-1
   4a2f8:	18800926 	beq	r3,r2,4a320 <__sseek+0x48>
   4a2fc:	8080030b 	ldhu	r2,12(r16)
   4a300:	80c01415 	stw	r3,80(r16)
   4a304:	10840014 	ori	r2,r2,4096
   4a308:	8080030d 	sth	r2,12(r16)
   4a30c:	1805883a 	mov	r2,r3
   4a310:	dfc00117 	ldw	ra,4(sp)
   4a314:	dc000017 	ldw	r16,0(sp)
   4a318:	dec00204 	addi	sp,sp,8
   4a31c:	f800283a 	ret
   4a320:	8080030b 	ldhu	r2,12(r16)
   4a324:	10bbffcc 	andi	r2,r2,61439
   4a328:	8080030d 	sth	r2,12(r16)
   4a32c:	1805883a 	mov	r2,r3
   4a330:	dfc00117 	ldw	ra,4(sp)
   4a334:	dc000017 	ldw	r16,0(sp)
   4a338:	dec00204 	addi	sp,sp,8
   4a33c:	f800283a 	ret

0004a340 <__swrite>:
   4a340:	2880030b 	ldhu	r2,12(r5)
   4a344:	defffb04 	addi	sp,sp,-20
   4a348:	dcc00315 	stw	r19,12(sp)
   4a34c:	1080400c 	andi	r2,r2,256
   4a350:	dc800215 	stw	r18,8(sp)
   4a354:	dc400115 	stw	r17,4(sp)
   4a358:	dc000015 	stw	r16,0(sp)
   4a35c:	3027883a 	mov	r19,r6
   4a360:	3825883a 	mov	r18,r7
   4a364:	dfc00415 	stw	ra,16(sp)
   4a368:	2821883a 	mov	r16,r5
   4a36c:	000d883a 	mov	r6,zero
   4a370:	01c00084 	movi	r7,2
   4a374:	2023883a 	mov	r17,r4
   4a378:	10000226 	beq	r2,zero,4a384 <__swrite+0x44>
   4a37c:	2940038f 	ldh	r5,14(r5)
   4a380:	004a87c0 	call	4a87c <_lseek_r>
   4a384:	8080030b 	ldhu	r2,12(r16)
   4a388:	8140038f 	ldh	r5,14(r16)
   4a38c:	8809883a 	mov	r4,r17
   4a390:	10bbffcc 	andi	r2,r2,61439
   4a394:	980d883a 	mov	r6,r19
   4a398:	900f883a 	mov	r7,r18
   4a39c:	8080030d 	sth	r2,12(r16)
   4a3a0:	dfc00417 	ldw	ra,16(sp)
   4a3a4:	dcc00317 	ldw	r19,12(sp)
   4a3a8:	dc800217 	ldw	r18,8(sp)
   4a3ac:	dc400117 	ldw	r17,4(sp)
   4a3b0:	dc000017 	ldw	r16,0(sp)
   4a3b4:	dec00504 	addi	sp,sp,20
   4a3b8:	004a4d81 	jmpi	4a4d8 <_write_r>

0004a3bc <__sread>:
   4a3bc:	defffe04 	addi	sp,sp,-8
   4a3c0:	dc000015 	stw	r16,0(sp)
   4a3c4:	2821883a 	mov	r16,r5
   4a3c8:	2940038f 	ldh	r5,14(r5)
   4a3cc:	dfc00115 	stw	ra,4(sp)
   4a3d0:	004a8f40 	call	4a8f4 <_read_r>
   4a3d4:	1007883a 	mov	r3,r2
   4a3d8:	10000816 	blt	r2,zero,4a3fc <__sread+0x40>
   4a3dc:	80801417 	ldw	r2,80(r16)
   4a3e0:	10c5883a 	add	r2,r2,r3
   4a3e4:	80801415 	stw	r2,80(r16)
   4a3e8:	1805883a 	mov	r2,r3
   4a3ec:	dfc00117 	ldw	ra,4(sp)
   4a3f0:	dc000017 	ldw	r16,0(sp)
   4a3f4:	dec00204 	addi	sp,sp,8
   4a3f8:	f800283a 	ret
   4a3fc:	8080030b 	ldhu	r2,12(r16)
   4a400:	10bbffcc 	andi	r2,r2,61439
   4a404:	8080030d 	sth	r2,12(r16)
   4a408:	1805883a 	mov	r2,r3
   4a40c:	dfc00117 	ldw	ra,4(sp)
   4a410:	dc000017 	ldw	r16,0(sp)
   4a414:	dec00204 	addi	sp,sp,8
   4a418:	f800283a 	ret

0004a41c <strcmp>:
   4a41c:	2144b03a 	or	r2,r4,r5
   4a420:	108000cc 	andi	r2,r2,3
   4a424:	10001d1e 	bne	r2,zero,4a49c <strcmp+0x80>
   4a428:	200f883a 	mov	r7,r4
   4a42c:	28800017 	ldw	r2,0(r5)
   4a430:	21000017 	ldw	r4,0(r4)
   4a434:	280d883a 	mov	r6,r5
   4a438:	2080161e 	bne	r4,r2,4a494 <strcmp+0x78>
   4a43c:	023fbff4 	movhi	r8,65279
   4a440:	423fbfc4 	addi	r8,r8,-257
   4a444:	2207883a 	add	r3,r4,r8
   4a448:	01602074 	movhi	r5,32897
   4a44c:	29602004 	addi	r5,r5,-32640
   4a450:	1946703a 	and	r3,r3,r5
   4a454:	0104303a 	nor	r2,zero,r4
   4a458:	10c4703a 	and	r2,r2,r3
   4a45c:	10001c1e 	bne	r2,zero,4a4d0 <strcmp+0xb4>
   4a460:	4013883a 	mov	r9,r8
   4a464:	2811883a 	mov	r8,r5
   4a468:	00000106 	br	4a470 <strcmp+0x54>
   4a46c:	1800181e 	bne	r3,zero,4a4d0 <strcmp+0xb4>
   4a470:	39c00104 	addi	r7,r7,4
   4a474:	39000017 	ldw	r4,0(r7)
   4a478:	31800104 	addi	r6,r6,4
   4a47c:	31400017 	ldw	r5,0(r6)
   4a480:	2245883a 	add	r2,r4,r9
   4a484:	1204703a 	and	r2,r2,r8
   4a488:	0106303a 	nor	r3,zero,r4
   4a48c:	1886703a 	and	r3,r3,r2
   4a490:	217ff626 	beq	r4,r5,4a46c <strcmp+0x50>
   4a494:	3809883a 	mov	r4,r7
   4a498:	300b883a 	mov	r5,r6
   4a49c:	20c00007 	ldb	r3,0(r4)
   4a4a0:	1800051e 	bne	r3,zero,4a4b8 <strcmp+0x9c>
   4a4a4:	00000606 	br	4a4c0 <strcmp+0xa4>
   4a4a8:	21000044 	addi	r4,r4,1
   4a4ac:	20c00007 	ldb	r3,0(r4)
   4a4b0:	29400044 	addi	r5,r5,1
   4a4b4:	18000226 	beq	r3,zero,4a4c0 <strcmp+0xa4>
   4a4b8:	28800007 	ldb	r2,0(r5)
   4a4bc:	18bffa26 	beq	r3,r2,4a4a8 <strcmp+0x8c>
   4a4c0:	20c00003 	ldbu	r3,0(r4)
   4a4c4:	28800003 	ldbu	r2,0(r5)
   4a4c8:	1885c83a 	sub	r2,r3,r2
   4a4cc:	f800283a 	ret
   4a4d0:	0005883a 	mov	r2,zero
   4a4d4:	f800283a 	ret

0004a4d8 <_write_r>:
   4a4d8:	defffd04 	addi	sp,sp,-12
   4a4dc:	dc000015 	stw	r16,0(sp)
   4a4e0:	04000174 	movhi	r16,5
   4a4e4:	840e5904 	addi	r16,r16,14692
   4a4e8:	dc400115 	stw	r17,4(sp)
   4a4ec:	80000015 	stw	zero,0(r16)
   4a4f0:	2023883a 	mov	r17,r4
   4a4f4:	2809883a 	mov	r4,r5
   4a4f8:	300b883a 	mov	r5,r6
   4a4fc:	380d883a 	mov	r6,r7
   4a500:	dfc00215 	stw	ra,8(sp)
   4a504:	004d6880 	call	4d688 <write>
   4a508:	1007883a 	mov	r3,r2
   4a50c:	00bfffc4 	movi	r2,-1
   4a510:	18800626 	beq	r3,r2,4a52c <_write_r+0x54>
   4a514:	1805883a 	mov	r2,r3
   4a518:	dfc00217 	ldw	ra,8(sp)
   4a51c:	dc400117 	ldw	r17,4(sp)
   4a520:	dc000017 	ldw	r16,0(sp)
   4a524:	dec00304 	addi	sp,sp,12
   4a528:	f800283a 	ret
   4a52c:	80800017 	ldw	r2,0(r16)
   4a530:	103ff826 	beq	r2,zero,4a514 <_write_r+0x3c>
   4a534:	88800015 	stw	r2,0(r17)
   4a538:	1805883a 	mov	r2,r3
   4a53c:	dfc00217 	ldw	ra,8(sp)
   4a540:	dc400117 	ldw	r17,4(sp)
   4a544:	dc000017 	ldw	r16,0(sp)
   4a548:	dec00304 	addi	sp,sp,12
   4a54c:	f800283a 	ret

0004a550 <_calloc_r>:
   4a550:	298b383a 	mul	r5,r5,r6
   4a554:	defffe04 	addi	sp,sp,-8
   4a558:	dc000015 	stw	r16,0(sp)
   4a55c:	dfc00115 	stw	ra,4(sp)
   4a560:	00481cc0 	call	481cc <_malloc_r>
   4a564:	1021883a 	mov	r16,r2
   4a568:	01c00904 	movi	r7,36
   4a56c:	10000d26 	beq	r2,zero,4a5a4 <_calloc_r+0x54>
   4a570:	10ffff17 	ldw	r3,-4(r2)
   4a574:	1009883a 	mov	r4,r2
   4a578:	00bfff04 	movi	r2,-4
   4a57c:	1886703a 	and	r3,r3,r2
   4a580:	1887883a 	add	r3,r3,r2
   4a584:	180d883a 	mov	r6,r3
   4a588:	000b883a 	mov	r5,zero
   4a58c:	38c01736 	bltu	r7,r3,4a5ec <_calloc_r+0x9c>
   4a590:	008004c4 	movi	r2,19
   4a594:	10c00836 	bltu	r2,r3,4a5b8 <_calloc_r+0x68>
   4a598:	20000215 	stw	zero,8(r4)
   4a59c:	20000015 	stw	zero,0(r4)
   4a5a0:	20000115 	stw	zero,4(r4)
   4a5a4:	8005883a 	mov	r2,r16
   4a5a8:	dfc00117 	ldw	ra,4(sp)
   4a5ac:	dc000017 	ldw	r16,0(sp)
   4a5b0:	dec00204 	addi	sp,sp,8
   4a5b4:	f800283a 	ret
   4a5b8:	008006c4 	movi	r2,27
   4a5bc:	80000015 	stw	zero,0(r16)
   4a5c0:	80000115 	stw	zero,4(r16)
   4a5c4:	81000204 	addi	r4,r16,8
   4a5c8:	10fff32e 	bgeu	r2,r3,4a598 <_calloc_r+0x48>
   4a5cc:	80000215 	stw	zero,8(r16)
   4a5d0:	80000315 	stw	zero,12(r16)
   4a5d4:	81000404 	addi	r4,r16,16
   4a5d8:	19ffef1e 	bne	r3,r7,4a598 <_calloc_r+0x48>
   4a5dc:	81000604 	addi	r4,r16,24
   4a5e0:	80000415 	stw	zero,16(r16)
   4a5e4:	80000515 	stw	zero,20(r16)
   4a5e8:	003feb06 	br	4a598 <_calloc_r+0x48>
   4a5ec:	0048b700 	call	48b70 <memset>
   4a5f0:	8005883a 	mov	r2,r16
   4a5f4:	dfc00117 	ldw	ra,4(sp)
   4a5f8:	dc000017 	ldw	r16,0(sp)
   4a5fc:	dec00204 	addi	sp,sp,8
   4a600:	f800283a 	ret

0004a604 <_close_r>:
   4a604:	defffd04 	addi	sp,sp,-12
   4a608:	dc000015 	stw	r16,0(sp)
   4a60c:	04000174 	movhi	r16,5
   4a610:	840e5904 	addi	r16,r16,14692
   4a614:	dc400115 	stw	r17,4(sp)
   4a618:	80000015 	stw	zero,0(r16)
   4a61c:	2023883a 	mov	r17,r4
   4a620:	2809883a 	mov	r4,r5
   4a624:	dfc00215 	stw	ra,8(sp)
   4a628:	004c8a40 	call	4c8a4 <close>
   4a62c:	1007883a 	mov	r3,r2
   4a630:	00bfffc4 	movi	r2,-1
   4a634:	18800626 	beq	r3,r2,4a650 <_close_r+0x4c>
   4a638:	1805883a 	mov	r2,r3
   4a63c:	dfc00217 	ldw	ra,8(sp)
   4a640:	dc400117 	ldw	r17,4(sp)
   4a644:	dc000017 	ldw	r16,0(sp)
   4a648:	dec00304 	addi	sp,sp,12
   4a64c:	f800283a 	ret
   4a650:	80800017 	ldw	r2,0(r16)
   4a654:	103ff826 	beq	r2,zero,4a638 <_close_r+0x34>
   4a658:	88800015 	stw	r2,0(r17)
   4a65c:	1805883a 	mov	r2,r3
   4a660:	dfc00217 	ldw	ra,8(sp)
   4a664:	dc400117 	ldw	r17,4(sp)
   4a668:	dc000017 	ldw	r16,0(sp)
   4a66c:	dec00304 	addi	sp,sp,12
   4a670:	f800283a 	ret

0004a674 <_fclose_r>:
   4a674:	defffc04 	addi	sp,sp,-16
   4a678:	dc400115 	stw	r17,4(sp)
   4a67c:	dc000015 	stw	r16,0(sp)
   4a680:	dfc00315 	stw	ra,12(sp)
   4a684:	dc800215 	stw	r18,8(sp)
   4a688:	2821883a 	mov	r16,r5
   4a68c:	2023883a 	mov	r17,r4
   4a690:	28002926 	beq	r5,zero,4a738 <_fclose_r+0xc4>
   4a694:	00472b00 	call	472b0 <__sfp_lock_acquire>
   4a698:	88000226 	beq	r17,zero,4a6a4 <_fclose_r+0x30>
   4a69c:	88800e17 	ldw	r2,56(r17)
   4a6a0:	10002d26 	beq	r2,zero,4a758 <_fclose_r+0xe4>
   4a6a4:	8080030f 	ldh	r2,12(r16)
   4a6a8:	10002226 	beq	r2,zero,4a734 <_fclose_r+0xc0>
   4a6ac:	8809883a 	mov	r4,r17
   4a6b0:	800b883a 	mov	r5,r16
   4a6b4:	00470280 	call	47028 <_fflush_r>
   4a6b8:	1025883a 	mov	r18,r2
   4a6bc:	80800b17 	ldw	r2,44(r16)
   4a6c0:	10000426 	beq	r2,zero,4a6d4 <_fclose_r+0x60>
   4a6c4:	81400717 	ldw	r5,28(r16)
   4a6c8:	8809883a 	mov	r4,r17
   4a6cc:	103ee83a 	callr	r2
   4a6d0:	10002a16 	blt	r2,zero,4a77c <_fclose_r+0x108>
   4a6d4:	8080030b 	ldhu	r2,12(r16)
   4a6d8:	1080200c 	andi	r2,r2,128
   4a6dc:	1000231e 	bne	r2,zero,4a76c <_fclose_r+0xf8>
   4a6e0:	81400c17 	ldw	r5,48(r16)
   4a6e4:	28000526 	beq	r5,zero,4a6fc <_fclose_r+0x88>
   4a6e8:	80801004 	addi	r2,r16,64
   4a6ec:	28800226 	beq	r5,r2,4a6f8 <_fclose_r+0x84>
   4a6f0:	8809883a 	mov	r4,r17
   4a6f4:	00476440 	call	47644 <_free_r>
   4a6f8:	80000c15 	stw	zero,48(r16)
   4a6fc:	81401117 	ldw	r5,68(r16)
   4a700:	28000326 	beq	r5,zero,4a710 <_fclose_r+0x9c>
   4a704:	8809883a 	mov	r4,r17
   4a708:	00476440 	call	47644 <_free_r>
   4a70c:	80001115 	stw	zero,68(r16)
   4a710:	8000030d 	sth	zero,12(r16)
   4a714:	00472b40 	call	472b4 <__sfp_lock_release>
   4a718:	9005883a 	mov	r2,r18
   4a71c:	dfc00317 	ldw	ra,12(sp)
   4a720:	dc800217 	ldw	r18,8(sp)
   4a724:	dc400117 	ldw	r17,4(sp)
   4a728:	dc000017 	ldw	r16,0(sp)
   4a72c:	dec00404 	addi	sp,sp,16
   4a730:	f800283a 	ret
   4a734:	00472b40 	call	472b4 <__sfp_lock_release>
   4a738:	0025883a 	mov	r18,zero
   4a73c:	9005883a 	mov	r2,r18
   4a740:	dfc00317 	ldw	ra,12(sp)
   4a744:	dc800217 	ldw	r18,8(sp)
   4a748:	dc400117 	ldw	r17,4(sp)
   4a74c:	dc000017 	ldw	r16,0(sp)
   4a750:	dec00404 	addi	sp,sp,16
   4a754:	f800283a 	ret
   4a758:	8809883a 	mov	r4,r17
   4a75c:	00472c00 	call	472c0 <__sinit>
   4a760:	8080030f 	ldh	r2,12(r16)
   4a764:	103fd11e 	bne	r2,zero,4a6ac <_fclose_r+0x38>
   4a768:	003ff206 	br	4a734 <_fclose_r+0xc0>
   4a76c:	81400417 	ldw	r5,16(r16)
   4a770:	8809883a 	mov	r4,r17
   4a774:	00476440 	call	47644 <_free_r>
   4a778:	003fd906 	br	4a6e0 <_fclose_r+0x6c>
   4a77c:	04bfffc4 	movi	r18,-1
   4a780:	003fd406 	br	4a6d4 <_fclose_r+0x60>

0004a784 <fclose>:
   4a784:	00800174 	movhi	r2,5
   4a788:	10873804 	addi	r2,r2,7392
   4a78c:	200b883a 	mov	r5,r4
   4a790:	11000017 	ldw	r4,0(r2)
   4a794:	004a6741 	jmpi	4a674 <_fclose_r>

0004a798 <_fstat_r>:
   4a798:	defffd04 	addi	sp,sp,-12
   4a79c:	dc000015 	stw	r16,0(sp)
   4a7a0:	04000174 	movhi	r16,5
   4a7a4:	840e5904 	addi	r16,r16,14692
   4a7a8:	dc400115 	stw	r17,4(sp)
   4a7ac:	80000015 	stw	zero,0(r16)
   4a7b0:	2023883a 	mov	r17,r4
   4a7b4:	2809883a 	mov	r4,r5
   4a7b8:	300b883a 	mov	r5,r6
   4a7bc:	dfc00215 	stw	ra,8(sp)
   4a7c0:	004ca2c0 	call	4ca2c <fstat>
   4a7c4:	1007883a 	mov	r3,r2
   4a7c8:	00bfffc4 	movi	r2,-1
   4a7cc:	18800626 	beq	r3,r2,4a7e8 <_fstat_r+0x50>
   4a7d0:	1805883a 	mov	r2,r3
   4a7d4:	dfc00217 	ldw	ra,8(sp)
   4a7d8:	dc400117 	ldw	r17,4(sp)
   4a7dc:	dc000017 	ldw	r16,0(sp)
   4a7e0:	dec00304 	addi	sp,sp,12
   4a7e4:	f800283a 	ret
   4a7e8:	80800017 	ldw	r2,0(r16)
   4a7ec:	103ff826 	beq	r2,zero,4a7d0 <_fstat_r+0x38>
   4a7f0:	88800015 	stw	r2,0(r17)
   4a7f4:	1805883a 	mov	r2,r3
   4a7f8:	dfc00217 	ldw	ra,8(sp)
   4a7fc:	dc400117 	ldw	r17,4(sp)
   4a800:	dc000017 	ldw	r16,0(sp)
   4a804:	dec00304 	addi	sp,sp,12
   4a808:	f800283a 	ret

0004a80c <_isatty_r>:
   4a80c:	defffd04 	addi	sp,sp,-12
   4a810:	dc000015 	stw	r16,0(sp)
   4a814:	04000174 	movhi	r16,5
   4a818:	840e5904 	addi	r16,r16,14692
   4a81c:	dc400115 	stw	r17,4(sp)
   4a820:	80000015 	stw	zero,0(r16)
   4a824:	2023883a 	mov	r17,r4
   4a828:	2809883a 	mov	r4,r5
   4a82c:	dfc00215 	stw	ra,8(sp)
   4a830:	004cd200 	call	4cd20 <isatty>
   4a834:	1007883a 	mov	r3,r2
   4a838:	00bfffc4 	movi	r2,-1
   4a83c:	18800626 	beq	r3,r2,4a858 <_isatty_r+0x4c>
   4a840:	1805883a 	mov	r2,r3
   4a844:	dfc00217 	ldw	ra,8(sp)
   4a848:	dc400117 	ldw	r17,4(sp)
   4a84c:	dc000017 	ldw	r16,0(sp)
   4a850:	dec00304 	addi	sp,sp,12
   4a854:	f800283a 	ret
   4a858:	80800017 	ldw	r2,0(r16)
   4a85c:	103ff826 	beq	r2,zero,4a840 <_isatty_r+0x34>
   4a860:	88800015 	stw	r2,0(r17)
   4a864:	1805883a 	mov	r2,r3
   4a868:	dfc00217 	ldw	ra,8(sp)
   4a86c:	dc400117 	ldw	r17,4(sp)
   4a870:	dc000017 	ldw	r16,0(sp)
   4a874:	dec00304 	addi	sp,sp,12
   4a878:	f800283a 	ret

0004a87c <_lseek_r>:
   4a87c:	defffd04 	addi	sp,sp,-12
   4a880:	dc000015 	stw	r16,0(sp)
   4a884:	04000174 	movhi	r16,5
   4a888:	840e5904 	addi	r16,r16,14692
   4a88c:	dc400115 	stw	r17,4(sp)
   4a890:	80000015 	stw	zero,0(r16)
   4a894:	2023883a 	mov	r17,r4
   4a898:	2809883a 	mov	r4,r5
   4a89c:	300b883a 	mov	r5,r6
   4a8a0:	380d883a 	mov	r6,r7
   4a8a4:	dfc00215 	stw	ra,8(sp)
   4a8a8:	004cf2c0 	call	4cf2c <lseek>
   4a8ac:	1007883a 	mov	r3,r2
   4a8b0:	00bfffc4 	movi	r2,-1
   4a8b4:	18800626 	beq	r3,r2,4a8d0 <_lseek_r+0x54>
   4a8b8:	1805883a 	mov	r2,r3
   4a8bc:	dfc00217 	ldw	ra,8(sp)
   4a8c0:	dc400117 	ldw	r17,4(sp)
   4a8c4:	dc000017 	ldw	r16,0(sp)
   4a8c8:	dec00304 	addi	sp,sp,12
   4a8cc:	f800283a 	ret
   4a8d0:	80800017 	ldw	r2,0(r16)
   4a8d4:	103ff826 	beq	r2,zero,4a8b8 <_lseek_r+0x3c>
   4a8d8:	88800015 	stw	r2,0(r17)
   4a8dc:	1805883a 	mov	r2,r3
   4a8e0:	dfc00217 	ldw	ra,8(sp)
   4a8e4:	dc400117 	ldw	r17,4(sp)
   4a8e8:	dc000017 	ldw	r16,0(sp)
   4a8ec:	dec00304 	addi	sp,sp,12
   4a8f0:	f800283a 	ret

0004a8f4 <_read_r>:
   4a8f4:	defffd04 	addi	sp,sp,-12
   4a8f8:	dc000015 	stw	r16,0(sp)
   4a8fc:	04000174 	movhi	r16,5
   4a900:	840e5904 	addi	r16,r16,14692
   4a904:	dc400115 	stw	r17,4(sp)
   4a908:	80000015 	stw	zero,0(r16)
   4a90c:	2023883a 	mov	r17,r4
   4a910:	2809883a 	mov	r4,r5
   4a914:	300b883a 	mov	r5,r6
   4a918:	380d883a 	mov	r6,r7
   4a91c:	dfc00215 	stw	ra,8(sp)
   4a920:	004d3ec0 	call	4d3ec <read>
   4a924:	1007883a 	mov	r3,r2
   4a928:	00bfffc4 	movi	r2,-1
   4a92c:	18800626 	beq	r3,r2,4a948 <_read_r+0x54>
   4a930:	1805883a 	mov	r2,r3
   4a934:	dfc00217 	ldw	ra,8(sp)
   4a938:	dc400117 	ldw	r17,4(sp)
   4a93c:	dc000017 	ldw	r16,0(sp)
   4a940:	dec00304 	addi	sp,sp,12
   4a944:	f800283a 	ret
   4a948:	80800017 	ldw	r2,0(r16)
   4a94c:	103ff826 	beq	r2,zero,4a930 <_read_r+0x3c>
   4a950:	88800015 	stw	r2,0(r17)
   4a954:	1805883a 	mov	r2,r3
   4a958:	dfc00217 	ldw	ra,8(sp)
   4a95c:	dc400117 	ldw	r17,4(sp)
   4a960:	dc000017 	ldw	r16,0(sp)
   4a964:	dec00304 	addi	sp,sp,12
   4a968:	f800283a 	ret

0004a96c <__udivdi3>:
   4a96c:	defff004 	addi	sp,sp,-64
   4a970:	2005883a 	mov	r2,r4
   4a974:	3011883a 	mov	r8,r6
   4a978:	df000e15 	stw	fp,56(sp)
   4a97c:	dd000a15 	stw	r20,40(sp)
   4a980:	dc000615 	stw	r16,24(sp)
   4a984:	dfc00f15 	stw	ra,60(sp)
   4a988:	ddc00d15 	stw	r23,52(sp)
   4a98c:	dd800c15 	stw	r22,48(sp)
   4a990:	dd400b15 	stw	r21,44(sp)
   4a994:	dcc00915 	stw	r19,36(sp)
   4a998:	dc800815 	stw	r18,32(sp)
   4a99c:	dc400715 	stw	r17,28(sp)
   4a9a0:	4021883a 	mov	r16,r8
   4a9a4:	1039883a 	mov	fp,r2
   4a9a8:	2829883a 	mov	r20,r5
   4a9ac:	38003b1e 	bne	r7,zero,4aa9c <__udivdi3+0x130>
   4a9b0:	2a005c36 	bltu	r5,r8,4ab24 <__udivdi3+0x1b8>
   4a9b4:	4000a626 	beq	r8,zero,4ac50 <__udivdi3+0x2e4>
   4a9b8:	00bfffd4 	movui	r2,65535
   4a9bc:	14009e36 	bltu	r2,r16,4ac38 <__udivdi3+0x2cc>
   4a9c0:	00803fc4 	movi	r2,255
   4a9c4:	14013d36 	bltu	r2,r16,4aebc <__udivdi3+0x550>
   4a9c8:	000b883a 	mov	r5,zero
   4a9cc:	0005883a 	mov	r2,zero
   4a9d0:	8084d83a 	srl	r2,r16,r2
   4a9d4:	01000174 	movhi	r4,5
   4a9d8:	21000504 	addi	r4,r4,20
   4a9dc:	01800804 	movi	r6,32
   4a9e0:	1105883a 	add	r2,r2,r4
   4a9e4:	10c00003 	ldbu	r3,0(r2)
   4a9e8:	28c7883a 	add	r3,r5,r3
   4a9ec:	30edc83a 	sub	r22,r6,r3
   4a9f0:	b000ee1e 	bne	r22,zero,4adac <__udivdi3+0x440>
   4a9f4:	802ad43a 	srli	r21,r16,16
   4a9f8:	00800044 	movi	r2,1
   4a9fc:	a423c83a 	sub	r17,r20,r16
   4aa00:	85ffffcc 	andi	r23,r16,65535
   4aa04:	d8800315 	stw	r2,12(sp)
   4aa08:	8809883a 	mov	r4,r17
   4aa0c:	a80b883a 	mov	r5,r21
   4aa10:	0042f040 	call	42f04 <__udivsi3>
   4aa14:	8809883a 	mov	r4,r17
   4aa18:	a80b883a 	mov	r5,r21
   4aa1c:	102d883a 	mov	r22,r2
   4aa20:	0042f0c0 	call	42f0c <__umodsi3>
   4aa24:	1004943a 	slli	r2,r2,16
   4aa28:	e006d43a 	srli	r3,fp,16
   4aa2c:	bda3383a 	mul	r17,r23,r22
   4aa30:	10c4b03a 	or	r2,r2,r3
   4aa34:	1440042e 	bgeu	r2,r17,4aa48 <__udivdi3+0xdc>
   4aa38:	1405883a 	add	r2,r2,r16
   4aa3c:	b5bfffc4 	addi	r22,r22,-1
   4aa40:	14000136 	bltu	r2,r16,4aa48 <__udivdi3+0xdc>
   4aa44:	14413d36 	bltu	r2,r17,4af3c <__udivdi3+0x5d0>
   4aa48:	1463c83a 	sub	r17,r2,r17
   4aa4c:	8809883a 	mov	r4,r17
   4aa50:	a80b883a 	mov	r5,r21
   4aa54:	0042f040 	call	42f04 <__udivsi3>
   4aa58:	8809883a 	mov	r4,r17
   4aa5c:	a80b883a 	mov	r5,r21
   4aa60:	1029883a 	mov	r20,r2
   4aa64:	0042f0c0 	call	42f0c <__umodsi3>
   4aa68:	1004943a 	slli	r2,r2,16
   4aa6c:	bd09383a 	mul	r4,r23,r20
   4aa70:	e0ffffcc 	andi	r3,fp,65535
   4aa74:	10c4b03a 	or	r2,r2,r3
   4aa78:	1100042e 	bgeu	r2,r4,4aa8c <__udivdi3+0x120>
   4aa7c:	8085883a 	add	r2,r16,r2
   4aa80:	a53fffc4 	addi	r20,r20,-1
   4aa84:	14000136 	bltu	r2,r16,4aa8c <__udivdi3+0x120>
   4aa88:	11012036 	bltu	r2,r4,4af0c <__udivdi3+0x5a0>
   4aa8c:	b004943a 	slli	r2,r22,16
   4aa90:	d9000317 	ldw	r4,12(sp)
   4aa94:	a084b03a 	or	r2,r20,r2
   4aa98:	00001506 	br	4aaf0 <__udivdi3+0x184>
   4aa9c:	380d883a 	mov	r6,r7
   4aaa0:	29c06236 	bltu	r5,r7,4ac2c <__udivdi3+0x2c0>
   4aaa4:	00bfffd4 	movui	r2,65535
   4aaa8:	11c05a36 	bltu	r2,r7,4ac14 <__udivdi3+0x2a8>
   4aaac:	00803fc4 	movi	r2,255
   4aab0:	11c0fc36 	bltu	r2,r7,4aea4 <__udivdi3+0x538>
   4aab4:	000b883a 	mov	r5,zero
   4aab8:	0005883a 	mov	r2,zero
   4aabc:	3084d83a 	srl	r2,r6,r2
   4aac0:	01000174 	movhi	r4,5
   4aac4:	21000504 	addi	r4,r4,20
   4aac8:	01c00804 	movi	r7,32
   4aacc:	1105883a 	add	r2,r2,r4
   4aad0:	10c00003 	ldbu	r3,0(r2)
   4aad4:	28c7883a 	add	r3,r5,r3
   4aad8:	38efc83a 	sub	r23,r7,r3
   4aadc:	b800691e 	bne	r23,zero,4ac84 <__udivdi3+0x318>
   4aae0:	35000136 	bltu	r6,r20,4aae8 <__udivdi3+0x17c>
   4aae4:	e4005136 	bltu	fp,r16,4ac2c <__udivdi3+0x2c0>
   4aae8:	00800044 	movi	r2,1
   4aaec:	0009883a 	mov	r4,zero
   4aaf0:	2007883a 	mov	r3,r4
   4aaf4:	dfc00f17 	ldw	ra,60(sp)
   4aaf8:	df000e17 	ldw	fp,56(sp)
   4aafc:	ddc00d17 	ldw	r23,52(sp)
   4ab00:	dd800c17 	ldw	r22,48(sp)
   4ab04:	dd400b17 	ldw	r21,44(sp)
   4ab08:	dd000a17 	ldw	r20,40(sp)
   4ab0c:	dcc00917 	ldw	r19,36(sp)
   4ab10:	dc800817 	ldw	r18,32(sp)
   4ab14:	dc400717 	ldw	r17,28(sp)
   4ab18:	dc000617 	ldw	r16,24(sp)
   4ab1c:	dec01004 	addi	sp,sp,64
   4ab20:	f800283a 	ret
   4ab24:	00bfffd4 	movui	r2,65535
   4ab28:	12005036 	bltu	r2,r8,4ac6c <__udivdi3+0x300>
   4ab2c:	00803fc4 	movi	r2,255
   4ab30:	1200e836 	bltu	r2,r8,4aed4 <__udivdi3+0x568>
   4ab34:	000b883a 	mov	r5,zero
   4ab38:	0005883a 	mov	r2,zero
   4ab3c:	8084d83a 	srl	r2,r16,r2
   4ab40:	01000174 	movhi	r4,5
   4ab44:	21000504 	addi	r4,r4,20
   4ab48:	01800804 	movi	r6,32
   4ab4c:	1105883a 	add	r2,r2,r4
   4ab50:	10c00003 	ldbu	r3,0(r2)
   4ab54:	28c7883a 	add	r3,r5,r3
   4ab58:	30cbc83a 	sub	r5,r6,r3
   4ab5c:	28000626 	beq	r5,zero,4ab78 <__udivdi3+0x20c>
   4ab60:	3145c83a 	sub	r2,r6,r5
   4ab64:	e084d83a 	srl	r2,fp,r2
   4ab68:	a146983a 	sll	r3,r20,r5
   4ab6c:	e178983a 	sll	fp,fp,r5
   4ab70:	8160983a 	sll	r16,r16,r5
   4ab74:	18a8b03a 	or	r20,r3,r2
   4ab78:	802ad43a 	srli	r21,r16,16
   4ab7c:	a009883a 	mov	r4,r20
   4ab80:	85ffffcc 	andi	r23,r16,65535
   4ab84:	a80b883a 	mov	r5,r21
   4ab88:	0042f040 	call	42f04 <__udivsi3>
   4ab8c:	a009883a 	mov	r4,r20
   4ab90:	a80b883a 	mov	r5,r21
   4ab94:	102d883a 	mov	r22,r2
   4ab98:	0042f0c0 	call	42f0c <__umodsi3>
   4ab9c:	1004943a 	slli	r2,r2,16
   4aba0:	e006d43a 	srli	r3,fp,16
   4aba4:	bda3383a 	mul	r17,r23,r22
   4aba8:	10c4b03a 	or	r2,r2,r3
   4abac:	1440042e 	bgeu	r2,r17,4abc0 <__udivdi3+0x254>
   4abb0:	1405883a 	add	r2,r2,r16
   4abb4:	b5bfffc4 	addi	r22,r22,-1
   4abb8:	14000136 	bltu	r2,r16,4abc0 <__udivdi3+0x254>
   4abbc:	1440d536 	bltu	r2,r17,4af14 <__udivdi3+0x5a8>
   4abc0:	1463c83a 	sub	r17,r2,r17
   4abc4:	8809883a 	mov	r4,r17
   4abc8:	a80b883a 	mov	r5,r21
   4abcc:	0042f040 	call	42f04 <__udivsi3>
   4abd0:	8809883a 	mov	r4,r17
   4abd4:	a80b883a 	mov	r5,r21
   4abd8:	1029883a 	mov	r20,r2
   4abdc:	0042f0c0 	call	42f0c <__umodsi3>
   4abe0:	1004943a 	slli	r2,r2,16
   4abe4:	bd09383a 	mul	r4,r23,r20
   4abe8:	e0ffffcc 	andi	r3,fp,65535
   4abec:	10c4b03a 	or	r2,r2,r3
   4abf0:	1100042e 	bgeu	r2,r4,4ac04 <__udivdi3+0x298>
   4abf4:	8085883a 	add	r2,r16,r2
   4abf8:	a53fffc4 	addi	r20,r20,-1
   4abfc:	14000136 	bltu	r2,r16,4ac04 <__udivdi3+0x298>
   4ac00:	1100c736 	bltu	r2,r4,4af20 <__udivdi3+0x5b4>
   4ac04:	b004943a 	slli	r2,r22,16
   4ac08:	0009883a 	mov	r4,zero
   4ac0c:	a084b03a 	or	r2,r20,r2
   4ac10:	003fb706 	br	4aaf0 <__udivdi3+0x184>
   4ac14:	00804034 	movhi	r2,256
   4ac18:	10bfffc4 	addi	r2,r2,-1
   4ac1c:	11c0a436 	bltu	r2,r7,4aeb0 <__udivdi3+0x544>
   4ac20:	01400404 	movi	r5,16
   4ac24:	2805883a 	mov	r2,r5
   4ac28:	003fa406 	br	4aabc <__udivdi3+0x150>
   4ac2c:	0005883a 	mov	r2,zero
   4ac30:	0009883a 	mov	r4,zero
   4ac34:	003fae06 	br	4aaf0 <__udivdi3+0x184>
   4ac38:	00804034 	movhi	r2,256
   4ac3c:	10bfffc4 	addi	r2,r2,-1
   4ac40:	1400a136 	bltu	r2,r16,4aec8 <__udivdi3+0x55c>
   4ac44:	01400404 	movi	r5,16
   4ac48:	2805883a 	mov	r2,r5
   4ac4c:	003f6006 	br	4a9d0 <__udivdi3+0x64>
   4ac50:	01000044 	movi	r4,1
   4ac54:	000b883a 	mov	r5,zero
   4ac58:	0042f040 	call	42f04 <__udivsi3>
   4ac5c:	1021883a 	mov	r16,r2
   4ac60:	00bfffd4 	movui	r2,65535
   4ac64:	143ff436 	bltu	r2,r16,4ac38 <__udivdi3+0x2cc>
   4ac68:	003f5506 	br	4a9c0 <__udivdi3+0x54>
   4ac6c:	00804034 	movhi	r2,256
   4ac70:	10bfffc4 	addi	r2,r2,-1
   4ac74:	12009a36 	bltu	r2,r8,4aee0 <__udivdi3+0x574>
   4ac78:	01400404 	movi	r5,16
   4ac7c:	2805883a 	mov	r2,r5
   4ac80:	003fae06 	br	4ab3c <__udivdi3+0x1d0>
   4ac84:	3dc5c83a 	sub	r2,r7,r23
   4ac88:	35c8983a 	sll	r4,r6,r23
   4ac8c:	8086d83a 	srl	r3,r16,r2
   4ac90:	a0a2d83a 	srl	r17,r20,r2
   4ac94:	e084d83a 	srl	r2,fp,r2
   4ac98:	20eab03a 	or	r21,r4,r3
   4ac9c:	a82cd43a 	srli	r22,r21,16
   4aca0:	a5c6983a 	sll	r3,r20,r23
   4aca4:	8809883a 	mov	r4,r17
   4aca8:	b00b883a 	mov	r5,r22
   4acac:	1886b03a 	or	r3,r3,r2
   4acb0:	d8c00215 	stw	r3,8(sp)
   4acb4:	0042f040 	call	42f04 <__udivsi3>
   4acb8:	8809883a 	mov	r4,r17
   4acbc:	b00b883a 	mov	r5,r22
   4acc0:	1029883a 	mov	r20,r2
   4acc4:	0042f0c0 	call	42f0c <__umodsi3>
   4acc8:	a8ffffcc 	andi	r3,r21,65535
   4accc:	d8c00515 	stw	r3,20(sp)
   4acd0:	d9000217 	ldw	r4,8(sp)
   4acd4:	d9400517 	ldw	r5,20(sp)
   4acd8:	1004943a 	slli	r2,r2,16
   4acdc:	2006d43a 	srli	r3,r4,16
   4ace0:	85e0983a 	sll	r16,r16,r23
   4ace4:	2d23383a 	mul	r17,r5,r20
   4ace8:	10c4b03a 	or	r2,r2,r3
   4acec:	dc000015 	stw	r16,0(sp)
   4acf0:	1440032e 	bgeu	r2,r17,4ad00 <__udivdi3+0x394>
   4acf4:	1545883a 	add	r2,r2,r21
   4acf8:	a53fffc4 	addi	r20,r20,-1
   4acfc:	15407f2e 	bgeu	r2,r21,4aefc <__udivdi3+0x590>
   4ad00:	1463c83a 	sub	r17,r2,r17
   4ad04:	8809883a 	mov	r4,r17
   4ad08:	b00b883a 	mov	r5,r22
   4ad0c:	0042f040 	call	42f04 <__udivsi3>
   4ad10:	8809883a 	mov	r4,r17
   4ad14:	b00b883a 	mov	r5,r22
   4ad18:	1021883a 	mov	r16,r2
   4ad1c:	0042f0c0 	call	42f0c <__umodsi3>
   4ad20:	d8c00517 	ldw	r3,20(sp)
   4ad24:	d9000217 	ldw	r4,8(sp)
   4ad28:	1004943a 	slli	r2,r2,16
   4ad2c:	1c0f383a 	mul	r7,r3,r16
   4ad30:	20ffffcc 	andi	r3,r4,65535
   4ad34:	10e2b03a 	or	r17,r2,r3
   4ad38:	89c0032e 	bgeu	r17,r7,4ad48 <__udivdi3+0x3dc>
   4ad3c:	8d63883a 	add	r17,r17,r21
   4ad40:	843fffc4 	addi	r16,r16,-1
   4ad44:	8d40692e 	bgeu	r17,r21,4aeec <__udivdi3+0x580>
   4ad48:	a008943a 	slli	r4,r20,16
   4ad4c:	d9400017 	ldw	r5,0(sp)
   4ad50:	89e3c83a 	sub	r17,r17,r7
   4ad54:	8110b03a 	or	r8,r16,r4
   4ad58:	280cd43a 	srli	r6,r5,16
   4ad5c:	28ffffcc 	andi	r3,r5,65535
   4ad60:	40bfffcc 	andi	r2,r8,65535
   4ad64:	400ad43a 	srli	r5,r8,16
   4ad68:	10d3383a 	mul	r9,r2,r3
   4ad6c:	1185383a 	mul	r2,r2,r6
   4ad70:	28c7383a 	mul	r3,r5,r3
   4ad74:	4808d43a 	srli	r4,r9,16
   4ad78:	298b383a 	mul	r5,r5,r6
   4ad7c:	10c5883a 	add	r2,r2,r3
   4ad80:	2089883a 	add	r4,r4,r2
   4ad84:	20c0022e 	bgeu	r4,r3,4ad90 <__udivdi3+0x424>
   4ad88:	00800074 	movhi	r2,1
   4ad8c:	288b883a 	add	r5,r5,r2
   4ad90:	2004d43a 	srli	r2,r4,16
   4ad94:	288b883a 	add	r5,r5,r2
   4ad98:	89403f36 	bltu	r17,r5,4ae98 <__udivdi3+0x52c>
   4ad9c:	89403926 	beq	r17,r5,4ae84 <__udivdi3+0x518>
   4ada0:	4005883a 	mov	r2,r8
   4ada4:	0009883a 	mov	r4,zero
   4ada8:	003f5106 	br	4aaf0 <__udivdi3+0x184>
   4adac:	85a0983a 	sll	r16,r16,r22
   4adb0:	3585c83a 	sub	r2,r6,r22
   4adb4:	a0a2d83a 	srl	r17,r20,r2
   4adb8:	802ad43a 	srli	r21,r16,16
   4adbc:	e084d83a 	srl	r2,fp,r2
   4adc0:	a586983a 	sll	r3,r20,r22
   4adc4:	8809883a 	mov	r4,r17
   4adc8:	a80b883a 	mov	r5,r21
   4adcc:	1886b03a 	or	r3,r3,r2
   4add0:	d8c00115 	stw	r3,4(sp)
   4add4:	0042f040 	call	42f04 <__udivsi3>
   4add8:	8809883a 	mov	r4,r17
   4addc:	a80b883a 	mov	r5,r21
   4ade0:	d8800415 	stw	r2,16(sp)
   4ade4:	0042f0c0 	call	42f0c <__umodsi3>
   4ade8:	d9000117 	ldw	r4,4(sp)
   4adec:	d9400417 	ldw	r5,16(sp)
   4adf0:	1004943a 	slli	r2,r2,16
   4adf4:	85ffffcc 	andi	r23,r16,65535
   4adf8:	2006d43a 	srli	r3,r4,16
   4adfc:	b963383a 	mul	r17,r23,r5
   4ae00:	10c4b03a 	or	r2,r2,r3
   4ae04:	1440042e 	bgeu	r2,r17,4ae18 <__udivdi3+0x4ac>
   4ae08:	297fffc4 	addi	r5,r5,-1
   4ae0c:	1405883a 	add	r2,r2,r16
   4ae10:	d9400415 	stw	r5,16(sp)
   4ae14:	1400442e 	bgeu	r2,r16,4af28 <__udivdi3+0x5bc>
   4ae18:	1463c83a 	sub	r17,r2,r17
   4ae1c:	8809883a 	mov	r4,r17
   4ae20:	a80b883a 	mov	r5,r21
   4ae24:	0042f040 	call	42f04 <__udivsi3>
   4ae28:	8809883a 	mov	r4,r17
   4ae2c:	a80b883a 	mov	r5,r21
   4ae30:	1029883a 	mov	r20,r2
   4ae34:	0042f0c0 	call	42f0c <__umodsi3>
   4ae38:	d9400117 	ldw	r5,4(sp)
   4ae3c:	1004943a 	slli	r2,r2,16
   4ae40:	bd09383a 	mul	r4,r23,r20
   4ae44:	28ffffcc 	andi	r3,r5,65535
   4ae48:	10c6b03a 	or	r3,r2,r3
   4ae4c:	1900062e 	bgeu	r3,r4,4ae68 <__udivdi3+0x4fc>
   4ae50:	1c07883a 	add	r3,r3,r16
   4ae54:	a53fffc4 	addi	r20,r20,-1
   4ae58:	1c000336 	bltu	r3,r16,4ae68 <__udivdi3+0x4fc>
   4ae5c:	1900022e 	bgeu	r3,r4,4ae68 <__udivdi3+0x4fc>
   4ae60:	a53fffc4 	addi	r20,r20,-1
   4ae64:	1c07883a 	add	r3,r3,r16
   4ae68:	d9400417 	ldw	r5,16(sp)
   4ae6c:	e5b8983a 	sll	fp,fp,r22
   4ae70:	1923c83a 	sub	r17,r3,r4
   4ae74:	2804943a 	slli	r2,r5,16
   4ae78:	a0a8b03a 	or	r20,r20,r2
   4ae7c:	dd000315 	stw	r20,12(sp)
   4ae80:	003ee106 	br	4aa08 <__udivdi3+0x9c>
   4ae84:	2004943a 	slli	r2,r4,16
   4ae88:	e5c8983a 	sll	r4,fp,r23
   4ae8c:	48ffffcc 	andi	r3,r9,65535
   4ae90:	10c5883a 	add	r2,r2,r3
   4ae94:	20bfc22e 	bgeu	r4,r2,4ada0 <__udivdi3+0x434>
   4ae98:	40bfffc4 	addi	r2,r8,-1
   4ae9c:	0009883a 	mov	r4,zero
   4aea0:	003f1306 	br	4aaf0 <__udivdi3+0x184>
   4aea4:	01400204 	movi	r5,8
   4aea8:	2805883a 	mov	r2,r5
   4aeac:	003f0306 	br	4aabc <__udivdi3+0x150>
   4aeb0:	01400604 	movi	r5,24
   4aeb4:	2805883a 	mov	r2,r5
   4aeb8:	003f0006 	br	4aabc <__udivdi3+0x150>
   4aebc:	01400204 	movi	r5,8
   4aec0:	2805883a 	mov	r2,r5
   4aec4:	003ec206 	br	4a9d0 <__udivdi3+0x64>
   4aec8:	01400604 	movi	r5,24
   4aecc:	2805883a 	mov	r2,r5
   4aed0:	003ebf06 	br	4a9d0 <__udivdi3+0x64>
   4aed4:	01400204 	movi	r5,8
   4aed8:	2805883a 	mov	r2,r5
   4aedc:	003f1706 	br	4ab3c <__udivdi3+0x1d0>
   4aee0:	01400604 	movi	r5,24
   4aee4:	2805883a 	mov	r2,r5
   4aee8:	003f1406 	br	4ab3c <__udivdi3+0x1d0>
   4aeec:	89ff962e 	bgeu	r17,r7,4ad48 <__udivdi3+0x3dc>
   4aef0:	8d63883a 	add	r17,r17,r21
   4aef4:	843fffc4 	addi	r16,r16,-1
   4aef8:	003f9306 	br	4ad48 <__udivdi3+0x3dc>
   4aefc:	147f802e 	bgeu	r2,r17,4ad00 <__udivdi3+0x394>
   4af00:	a53fffc4 	addi	r20,r20,-1
   4af04:	1545883a 	add	r2,r2,r21
   4af08:	003f7d06 	br	4ad00 <__udivdi3+0x394>
   4af0c:	a53fffc4 	addi	r20,r20,-1
   4af10:	003ede06 	br	4aa8c <__udivdi3+0x120>
   4af14:	b5bfffc4 	addi	r22,r22,-1
   4af18:	1405883a 	add	r2,r2,r16
   4af1c:	003f2806 	br	4abc0 <__udivdi3+0x254>
   4af20:	a53fffc4 	addi	r20,r20,-1
   4af24:	003f3706 	br	4ac04 <__udivdi3+0x298>
   4af28:	147fbb2e 	bgeu	r2,r17,4ae18 <__udivdi3+0x4ac>
   4af2c:	297fffc4 	addi	r5,r5,-1
   4af30:	1405883a 	add	r2,r2,r16
   4af34:	d9400415 	stw	r5,16(sp)
   4af38:	003fb706 	br	4ae18 <__udivdi3+0x4ac>
   4af3c:	b5bfffc4 	addi	r22,r22,-1
   4af40:	1405883a 	add	r2,r2,r16
   4af44:	003ec006 	br	4aa48 <__udivdi3+0xdc>

0004af48 <__umoddi3>:
   4af48:	defff104 	addi	sp,sp,-60
   4af4c:	dd800b15 	stw	r22,44(sp)
   4af50:	dd000915 	stw	r20,36(sp)
   4af54:	dc000515 	stw	r16,20(sp)
   4af58:	dfc00e15 	stw	ra,56(sp)
   4af5c:	df000d15 	stw	fp,52(sp)
   4af60:	ddc00c15 	stw	r23,48(sp)
   4af64:	dd400a15 	stw	r21,40(sp)
   4af68:	dcc00815 	stw	r19,32(sp)
   4af6c:	dc800715 	stw	r18,28(sp)
   4af70:	dc400615 	stw	r17,24(sp)
   4af74:	3021883a 	mov	r16,r6
   4af78:	202d883a 	mov	r22,r4
   4af7c:	2829883a 	mov	r20,r5
   4af80:	38002b1e 	bne	r7,zero,4b030 <__umoddi3+0xe8>
   4af84:	29805036 	bltu	r5,r6,4b0c8 <__umoddi3+0x180>
   4af88:	30008a26 	beq	r6,zero,4b1b4 <__umoddi3+0x26c>
   4af8c:	00bfffd4 	movui	r2,65535
   4af90:	14008236 	bltu	r2,r16,4b19c <__umoddi3+0x254>
   4af94:	00803fc4 	movi	r2,255
   4af98:	14013636 	bltu	r2,r16,4b474 <__umoddi3+0x52c>
   4af9c:	000b883a 	mov	r5,zero
   4afa0:	0005883a 	mov	r2,zero
   4afa4:	8084d83a 	srl	r2,r16,r2
   4afa8:	01000174 	movhi	r4,5
   4afac:	21000504 	addi	r4,r4,20
   4afb0:	01800804 	movi	r6,32
   4afb4:	1105883a 	add	r2,r2,r4
   4afb8:	10c00003 	ldbu	r3,0(r2)
   4afbc:	28c7883a 	add	r3,r5,r3
   4afc0:	30efc83a 	sub	r23,r6,r3
   4afc4:	b800941e 	bne	r23,zero,4b218 <__umoddi3+0x2d0>
   4afc8:	802ad43a 	srli	r21,r16,16
   4afcc:	a423c83a 	sub	r17,r20,r16
   4afd0:	0039883a 	mov	fp,zero
   4afd4:	853fffcc 	andi	r20,r16,65535
   4afd8:	8809883a 	mov	r4,r17
   4afdc:	a80b883a 	mov	r5,r21
   4afe0:	0042f040 	call	42f04 <__udivsi3>
   4afe4:	8809883a 	mov	r4,r17
   4afe8:	a80b883a 	mov	r5,r21
   4afec:	a0a3383a 	mul	r17,r20,r2
   4aff0:	0042f0c0 	call	42f0c <__umodsi3>
   4aff4:	1004943a 	slli	r2,r2,16
   4aff8:	b006d43a 	srli	r3,r22,16
   4affc:	10c4b03a 	or	r2,r2,r3
   4b000:	1440032e 	bgeu	r2,r17,4b010 <__umoddi3+0xc8>
   4b004:	1405883a 	add	r2,r2,r16
   4b008:	14000136 	bltu	r2,r16,4b010 <__umoddi3+0xc8>
   4b00c:	14413536 	bltu	r2,r17,4b4e4 <__umoddi3+0x59c>
   4b010:	1463c83a 	sub	r17,r2,r17
   4b014:	8809883a 	mov	r4,r17
   4b018:	a80b883a 	mov	r5,r21
   4b01c:	0042f040 	call	42f04 <__udivsi3>
   4b020:	8809883a 	mov	r4,r17
   4b024:	a0a3383a 	mul	r17,r20,r2
   4b028:	a80b883a 	mov	r5,r21
   4b02c:	00004d06 	br	4b164 <__umoddi3+0x21c>
   4b030:	380d883a 	mov	r6,r7
   4b034:	29c0102e 	bgeu	r5,r7,4b078 <__umoddi3+0x130>
   4b038:	2011883a 	mov	r8,r4
   4b03c:	2813883a 	mov	r9,r5
   4b040:	4005883a 	mov	r2,r8
   4b044:	4807883a 	mov	r3,r9
   4b048:	dfc00e17 	ldw	ra,56(sp)
   4b04c:	df000d17 	ldw	fp,52(sp)
   4b050:	ddc00c17 	ldw	r23,48(sp)
   4b054:	dd800b17 	ldw	r22,44(sp)
   4b058:	dd400a17 	ldw	r21,40(sp)
   4b05c:	dd000917 	ldw	r20,36(sp)
   4b060:	dcc00817 	ldw	r19,32(sp)
   4b064:	dc800717 	ldw	r18,28(sp)
   4b068:	dc400617 	ldw	r17,24(sp)
   4b06c:	dc000517 	ldw	r16,20(sp)
   4b070:	dec00f04 	addi	sp,sp,60
   4b074:	f800283a 	ret
   4b078:	00bfffd4 	movui	r2,65535
   4b07c:	11c05a36 	bltu	r2,r7,4b1e8 <__umoddi3+0x2a0>
   4b080:	00803fc4 	movi	r2,255
   4b084:	11c0fe36 	bltu	r2,r7,4b480 <__umoddi3+0x538>
   4b088:	000b883a 	mov	r5,zero
   4b08c:	0005883a 	mov	r2,zero
   4b090:	3084d83a 	srl	r2,r6,r2
   4b094:	01000174 	movhi	r4,5
   4b098:	21000504 	addi	r4,r4,20
   4b09c:	01c00804 	movi	r7,32
   4b0a0:	1105883a 	add	r2,r2,r4
   4b0a4:	10c00003 	ldbu	r3,0(r2)
   4b0a8:	28c7883a 	add	r3,r5,r3
   4b0ac:	38ebc83a 	sub	r21,r7,r3
   4b0b0:	a800851e 	bne	r21,zero,4b2c8 <__umoddi3+0x380>
   4b0b4:	35005236 	bltu	r6,r20,4b200 <__umoddi3+0x2b8>
   4b0b8:	b400512e 	bgeu	r22,r16,4b200 <__umoddi3+0x2b8>
   4b0bc:	b011883a 	mov	r8,r22
   4b0c0:	a013883a 	mov	r9,r20
   4b0c4:	003fde06 	br	4b040 <__umoddi3+0xf8>
   4b0c8:	00bfffd4 	movui	r2,65535
   4b0cc:	11804036 	bltu	r2,r6,4b1d0 <__umoddi3+0x288>
   4b0d0:	00803fc4 	movi	r2,255
   4b0d4:	1180ed36 	bltu	r2,r6,4b48c <__umoddi3+0x544>
   4b0d8:	000b883a 	mov	r5,zero
   4b0dc:	0005883a 	mov	r2,zero
   4b0e0:	8084d83a 	srl	r2,r16,r2
   4b0e4:	01000174 	movhi	r4,5
   4b0e8:	21000504 	addi	r4,r4,20
   4b0ec:	01800804 	movi	r6,32
   4b0f0:	1105883a 	add	r2,r2,r4
   4b0f4:	10c00003 	ldbu	r3,0(r2)
   4b0f8:	28c7883a 	add	r3,r5,r3
   4b0fc:	30c7c83a 	sub	r3,r6,r3
   4b100:	1800bf1e 	bne	r3,zero,4b400 <__umoddi3+0x4b8>
   4b104:	0039883a 	mov	fp,zero
   4b108:	802ad43a 	srli	r21,r16,16
   4b10c:	a009883a 	mov	r4,r20
   4b110:	85ffffcc 	andi	r23,r16,65535
   4b114:	a80b883a 	mov	r5,r21
   4b118:	0042f040 	call	42f04 <__udivsi3>
   4b11c:	a009883a 	mov	r4,r20
   4b120:	a80b883a 	mov	r5,r21
   4b124:	b8a3383a 	mul	r17,r23,r2
   4b128:	0042f0c0 	call	42f0c <__umodsi3>
   4b12c:	1004943a 	slli	r2,r2,16
   4b130:	b006d43a 	srli	r3,r22,16
   4b134:	10c4b03a 	or	r2,r2,r3
   4b138:	1440032e 	bgeu	r2,r17,4b148 <__umoddi3+0x200>
   4b13c:	1405883a 	add	r2,r2,r16
   4b140:	14000136 	bltu	r2,r16,4b148 <__umoddi3+0x200>
   4b144:	1440e536 	bltu	r2,r17,4b4dc <__umoddi3+0x594>
   4b148:	1463c83a 	sub	r17,r2,r17
   4b14c:	8809883a 	mov	r4,r17
   4b150:	a80b883a 	mov	r5,r21
   4b154:	0042f040 	call	42f04 <__udivsi3>
   4b158:	8809883a 	mov	r4,r17
   4b15c:	b8a3383a 	mul	r17,r23,r2
   4b160:	a80b883a 	mov	r5,r21
   4b164:	0042f0c0 	call	42f0c <__umodsi3>
   4b168:	1004943a 	slli	r2,r2,16
   4b16c:	b0ffffcc 	andi	r3,r22,65535
   4b170:	10c4b03a 	or	r2,r2,r3
   4b174:	1440042e 	bgeu	r2,r17,4b188 <__umoddi3+0x240>
   4b178:	1405883a 	add	r2,r2,r16
   4b17c:	14000236 	bltu	r2,r16,4b188 <__umoddi3+0x240>
   4b180:	1440012e 	bgeu	r2,r17,4b188 <__umoddi3+0x240>
   4b184:	1405883a 	add	r2,r2,r16
   4b188:	1445c83a 	sub	r2,r2,r17
   4b18c:	1724d83a 	srl	r18,r2,fp
   4b190:	0013883a 	mov	r9,zero
   4b194:	9011883a 	mov	r8,r18
   4b198:	003fa906 	br	4b040 <__umoddi3+0xf8>
   4b19c:	00804034 	movhi	r2,256
   4b1a0:	10bfffc4 	addi	r2,r2,-1
   4b1a4:	1400b036 	bltu	r2,r16,4b468 <__umoddi3+0x520>
   4b1a8:	01400404 	movi	r5,16
   4b1ac:	2805883a 	mov	r2,r5
   4b1b0:	003f7c06 	br	4afa4 <__umoddi3+0x5c>
   4b1b4:	01000044 	movi	r4,1
   4b1b8:	000b883a 	mov	r5,zero
   4b1bc:	0042f040 	call	42f04 <__udivsi3>
   4b1c0:	1021883a 	mov	r16,r2
   4b1c4:	00bfffd4 	movui	r2,65535
   4b1c8:	143ff436 	bltu	r2,r16,4b19c <__umoddi3+0x254>
   4b1cc:	003f7106 	br	4af94 <__umoddi3+0x4c>
   4b1d0:	00804034 	movhi	r2,256
   4b1d4:	10bfffc4 	addi	r2,r2,-1
   4b1d8:	1180af36 	bltu	r2,r6,4b498 <__umoddi3+0x550>
   4b1dc:	01400404 	movi	r5,16
   4b1e0:	2805883a 	mov	r2,r5
   4b1e4:	003fbe06 	br	4b0e0 <__umoddi3+0x198>
   4b1e8:	00804034 	movhi	r2,256
   4b1ec:	10bfffc4 	addi	r2,r2,-1
   4b1f0:	11c0ac36 	bltu	r2,r7,4b4a4 <__umoddi3+0x55c>
   4b1f4:	01400404 	movi	r5,16
   4b1f8:	2805883a 	mov	r2,r5
   4b1fc:	003fa406 	br	4b090 <__umoddi3+0x148>
   4b200:	b409c83a 	sub	r4,r22,r16
   4b204:	b105803a 	cmpltu	r2,r22,r4
   4b208:	a187c83a 	sub	r3,r20,r6
   4b20c:	18a9c83a 	sub	r20,r3,r2
   4b210:	202d883a 	mov	r22,r4
   4b214:	003fa906 	br	4b0bc <__umoddi3+0x174>
   4b218:	85e0983a 	sll	r16,r16,r23
   4b21c:	35c5c83a 	sub	r2,r6,r23
   4b220:	a0a2d83a 	srl	r17,r20,r2
   4b224:	802ad43a 	srli	r21,r16,16
   4b228:	b084d83a 	srl	r2,r22,r2
   4b22c:	a5c6983a 	sll	r3,r20,r23
   4b230:	8809883a 	mov	r4,r17
   4b234:	a80b883a 	mov	r5,r21
   4b238:	1886b03a 	or	r3,r3,r2
   4b23c:	d8c00115 	stw	r3,4(sp)
   4b240:	853fffcc 	andi	r20,r16,65535
   4b244:	0042f040 	call	42f04 <__udivsi3>
   4b248:	8809883a 	mov	r4,r17
   4b24c:	a80b883a 	mov	r5,r21
   4b250:	a0a3383a 	mul	r17,r20,r2
   4b254:	0042f0c0 	call	42f0c <__umodsi3>
   4b258:	d9000117 	ldw	r4,4(sp)
   4b25c:	1004943a 	slli	r2,r2,16
   4b260:	b839883a 	mov	fp,r23
   4b264:	2006d43a 	srli	r3,r4,16
   4b268:	10c4b03a 	or	r2,r2,r3
   4b26c:	1440022e 	bgeu	r2,r17,4b278 <__umoddi3+0x330>
   4b270:	1405883a 	add	r2,r2,r16
   4b274:	1400962e 	bgeu	r2,r16,4b4d0 <__umoddi3+0x588>
   4b278:	1463c83a 	sub	r17,r2,r17
   4b27c:	8809883a 	mov	r4,r17
   4b280:	a80b883a 	mov	r5,r21
   4b284:	0042f040 	call	42f04 <__udivsi3>
   4b288:	8809883a 	mov	r4,r17
   4b28c:	a80b883a 	mov	r5,r21
   4b290:	a0a3383a 	mul	r17,r20,r2
   4b294:	0042f0c0 	call	42f0c <__umodsi3>
   4b298:	d9400117 	ldw	r5,4(sp)
   4b29c:	1004943a 	slli	r2,r2,16
   4b2a0:	28ffffcc 	andi	r3,r5,65535
   4b2a4:	10c4b03a 	or	r2,r2,r3
   4b2a8:	1440042e 	bgeu	r2,r17,4b2bc <__umoddi3+0x374>
   4b2ac:	1405883a 	add	r2,r2,r16
   4b2b0:	14000236 	bltu	r2,r16,4b2bc <__umoddi3+0x374>
   4b2b4:	1440012e 	bgeu	r2,r17,4b2bc <__umoddi3+0x374>
   4b2b8:	1405883a 	add	r2,r2,r16
   4b2bc:	b5ec983a 	sll	r22,r22,r23
   4b2c0:	1463c83a 	sub	r17,r2,r17
   4b2c4:	003f4406 	br	4afd8 <__umoddi3+0x90>
   4b2c8:	3d4fc83a 	sub	r7,r7,r21
   4b2cc:	3546983a 	sll	r3,r6,r21
   4b2d0:	81c4d83a 	srl	r2,r16,r7
   4b2d4:	a1e2d83a 	srl	r17,r20,r7
   4b2d8:	a54c983a 	sll	r6,r20,r21
   4b2dc:	18aeb03a 	or	r23,r3,r2
   4b2e0:	b828d43a 	srli	r20,r23,16
   4b2e4:	b1c4d83a 	srl	r2,r22,r7
   4b2e8:	8809883a 	mov	r4,r17
   4b2ec:	a00b883a 	mov	r5,r20
   4b2f0:	308cb03a 	or	r6,r6,r2
   4b2f4:	d9c00315 	stw	r7,12(sp)
   4b2f8:	d9800215 	stw	r6,8(sp)
   4b2fc:	0042f040 	call	42f04 <__udivsi3>
   4b300:	8809883a 	mov	r4,r17
   4b304:	a00b883a 	mov	r5,r20
   4b308:	1039883a 	mov	fp,r2
   4b30c:	0042f0c0 	call	42f0c <__umodsi3>
   4b310:	b8ffffcc 	andi	r3,r23,65535
   4b314:	d8c00415 	stw	r3,16(sp)
   4b318:	d9000217 	ldw	r4,8(sp)
   4b31c:	d9400417 	ldw	r5,16(sp)
   4b320:	1004943a 	slli	r2,r2,16
   4b324:	2006d43a 	srli	r3,r4,16
   4b328:	8560983a 	sll	r16,r16,r21
   4b32c:	2f23383a 	mul	r17,r5,fp
   4b330:	10c4b03a 	or	r2,r2,r3
   4b334:	dc000015 	stw	r16,0(sp)
   4b338:	b56c983a 	sll	r22,r22,r21
   4b33c:	1440032e 	bgeu	r2,r17,4b34c <__umoddi3+0x404>
   4b340:	15c5883a 	add	r2,r2,r23
   4b344:	e73fffc4 	addi	fp,fp,-1
   4b348:	15c05d2e 	bgeu	r2,r23,4b4c0 <__umoddi3+0x578>
   4b34c:	1463c83a 	sub	r17,r2,r17
   4b350:	8809883a 	mov	r4,r17
   4b354:	a00b883a 	mov	r5,r20
   4b358:	0042f040 	call	42f04 <__udivsi3>
   4b35c:	8809883a 	mov	r4,r17
   4b360:	a00b883a 	mov	r5,r20
   4b364:	1021883a 	mov	r16,r2
   4b368:	0042f0c0 	call	42f0c <__umodsi3>
   4b36c:	d8c00417 	ldw	r3,16(sp)
   4b370:	d9000217 	ldw	r4,8(sp)
   4b374:	1004943a 	slli	r2,r2,16
   4b378:	1c23383a 	mul	r17,r3,r16
   4b37c:	20ffffcc 	andi	r3,r4,65535
   4b380:	10ceb03a 	or	r7,r2,r3
   4b384:	3c40032e 	bgeu	r7,r17,4b394 <__umoddi3+0x44c>
   4b388:	3dcf883a 	add	r7,r7,r23
   4b38c:	843fffc4 	addi	r16,r16,-1
   4b390:	3dc0472e 	bgeu	r7,r23,4b4b0 <__umoddi3+0x568>
   4b394:	e004943a 	slli	r2,fp,16
   4b398:	d9400017 	ldw	r5,0(sp)
   4b39c:	3c4fc83a 	sub	r7,r7,r17
   4b3a0:	8084b03a 	or	r2,r16,r2
   4b3a4:	28ffffcc 	andi	r3,r5,65535
   4b3a8:	280cd43a 	srli	r6,r5,16
   4b3ac:	100ad43a 	srli	r5,r2,16
   4b3b0:	10bfffcc 	andi	r2,r2,65535
   4b3b4:	10d1383a 	mul	r8,r2,r3
   4b3b8:	28c7383a 	mul	r3,r5,r3
   4b3bc:	1185383a 	mul	r2,r2,r6
   4b3c0:	4008d43a 	srli	r4,r8,16
   4b3c4:	298b383a 	mul	r5,r5,r6
   4b3c8:	10c5883a 	add	r2,r2,r3
   4b3cc:	2089883a 	add	r4,r4,r2
   4b3d0:	20c0022e 	bgeu	r4,r3,4b3dc <__umoddi3+0x494>
   4b3d4:	00800074 	movhi	r2,1
   4b3d8:	288b883a 	add	r5,r5,r2
   4b3dc:	2004d43a 	srli	r2,r4,16
   4b3e0:	2008943a 	slli	r4,r4,16
   4b3e4:	40ffffcc 	andi	r3,r8,65535
   4b3e8:	288b883a 	add	r5,r5,r2
   4b3ec:	20c9883a 	add	r4,r4,r3
   4b3f0:	39400b36 	bltu	r7,r5,4b420 <__umoddi3+0x4d8>
   4b3f4:	39403d26 	beq	r7,r5,4b4ec <__umoddi3+0x5a4>
   4b3f8:	394bc83a 	sub	r5,r7,r5
   4b3fc:	00000f06 	br	4b43c <__umoddi3+0x4f4>
   4b400:	30c5c83a 	sub	r2,r6,r3
   4b404:	1839883a 	mov	fp,r3
   4b408:	b084d83a 	srl	r2,r22,r2
   4b40c:	a0c6983a 	sll	r3,r20,r3
   4b410:	8720983a 	sll	r16,r16,fp
   4b414:	b72c983a 	sll	r22,r22,fp
   4b418:	18a8b03a 	or	r20,r3,r2
   4b41c:	003f3a06 	br	4b108 <__umoddi3+0x1c0>
   4b420:	d8c00017 	ldw	r3,0(sp)
   4b424:	20c5c83a 	sub	r2,r4,r3
   4b428:	2089803a 	cmpltu	r4,r4,r2
   4b42c:	2dc7c83a 	sub	r3,r5,r23
   4b430:	1907c83a 	sub	r3,r3,r4
   4b434:	38cbc83a 	sub	r5,r7,r3
   4b438:	1009883a 	mov	r4,r2
   4b43c:	b105c83a 	sub	r2,r22,r4
   4b440:	b087803a 	cmpltu	r3,r22,r2
   4b444:	28c7c83a 	sub	r3,r5,r3
   4b448:	d9400317 	ldw	r5,12(sp)
   4b44c:	1544d83a 	srl	r2,r2,r21
   4b450:	1948983a 	sll	r4,r3,r5
   4b454:	1d46d83a 	srl	r3,r3,r21
   4b458:	20a4b03a 	or	r18,r4,r2
   4b45c:	9011883a 	mov	r8,r18
   4b460:	1813883a 	mov	r9,r3
   4b464:	003ef606 	br	4b040 <__umoddi3+0xf8>
   4b468:	01400604 	movi	r5,24
   4b46c:	2805883a 	mov	r2,r5
   4b470:	003ecc06 	br	4afa4 <__umoddi3+0x5c>
   4b474:	01400204 	movi	r5,8
   4b478:	2805883a 	mov	r2,r5
   4b47c:	003ec906 	br	4afa4 <__umoddi3+0x5c>
   4b480:	01400204 	movi	r5,8
   4b484:	2805883a 	mov	r2,r5
   4b488:	003f0106 	br	4b090 <__umoddi3+0x148>
   4b48c:	01400204 	movi	r5,8
   4b490:	2805883a 	mov	r2,r5
   4b494:	003f1206 	br	4b0e0 <__umoddi3+0x198>
   4b498:	01400604 	movi	r5,24
   4b49c:	2805883a 	mov	r2,r5
   4b4a0:	003f0f06 	br	4b0e0 <__umoddi3+0x198>
   4b4a4:	01400604 	movi	r5,24
   4b4a8:	2805883a 	mov	r2,r5
   4b4ac:	003ef806 	br	4b090 <__umoddi3+0x148>
   4b4b0:	3c7fb82e 	bgeu	r7,r17,4b394 <__umoddi3+0x44c>
   4b4b4:	843fffc4 	addi	r16,r16,-1
   4b4b8:	3dcf883a 	add	r7,r7,r23
   4b4bc:	003fb506 	br	4b394 <__umoddi3+0x44c>
   4b4c0:	147fa22e 	bgeu	r2,r17,4b34c <__umoddi3+0x404>
   4b4c4:	e73fffc4 	addi	fp,fp,-1
   4b4c8:	15c5883a 	add	r2,r2,r23
   4b4cc:	003f9f06 	br	4b34c <__umoddi3+0x404>
   4b4d0:	147f692e 	bgeu	r2,r17,4b278 <__umoddi3+0x330>
   4b4d4:	1405883a 	add	r2,r2,r16
   4b4d8:	003f6706 	br	4b278 <__umoddi3+0x330>
   4b4dc:	1405883a 	add	r2,r2,r16
   4b4e0:	003f1906 	br	4b148 <__umoddi3+0x200>
   4b4e4:	1405883a 	add	r2,r2,r16
   4b4e8:	003ec906 	br	4b010 <__umoddi3+0xc8>
   4b4ec:	b13fcc36 	bltu	r22,r4,4b420 <__umoddi3+0x4d8>
   4b4f0:	000b883a 	mov	r5,zero
   4b4f4:	003fd106 	br	4b43c <__umoddi3+0x4f4>

0004b4f8 <_fpadd_parts>:
   4b4f8:	defff804 	addi	sp,sp,-32
   4b4fc:	dcc00315 	stw	r19,12(sp)
   4b500:	2027883a 	mov	r19,r4
   4b504:	21000017 	ldw	r4,0(r4)
   4b508:	00c00044 	movi	r3,1
   4b50c:	dd400515 	stw	r21,20(sp)
   4b510:	dd000415 	stw	r20,16(sp)
   4b514:	ddc00715 	stw	r23,28(sp)
   4b518:	dd800615 	stw	r22,24(sp)
   4b51c:	dc800215 	stw	r18,8(sp)
   4b520:	dc400115 	stw	r17,4(sp)
   4b524:	dc000015 	stw	r16,0(sp)
   4b528:	282b883a 	mov	r21,r5
   4b52c:	3029883a 	mov	r20,r6
   4b530:	1900632e 	bgeu	r3,r4,4b6c0 <_fpadd_parts+0x1c8>
   4b534:	28800017 	ldw	r2,0(r5)
   4b538:	1880812e 	bgeu	r3,r2,4b740 <_fpadd_parts+0x248>
   4b53c:	00c00104 	movi	r3,4
   4b540:	20c0dc26 	beq	r4,r3,4b8b4 <_fpadd_parts+0x3bc>
   4b544:	10c07e26 	beq	r2,r3,4b740 <_fpadd_parts+0x248>
   4b548:	00c00084 	movi	r3,2
   4b54c:	10c06726 	beq	r2,r3,4b6ec <_fpadd_parts+0x1f4>
   4b550:	20c07b26 	beq	r4,r3,4b740 <_fpadd_parts+0x248>
   4b554:	9dc00217 	ldw	r23,8(r19)
   4b558:	28c00217 	ldw	r3,8(r5)
   4b55c:	9c400317 	ldw	r17,12(r19)
   4b560:	2bc00317 	ldw	r15,12(r5)
   4b564:	b8cdc83a 	sub	r6,r23,r3
   4b568:	9c800417 	ldw	r18,16(r19)
   4b56c:	2c000417 	ldw	r16,16(r5)
   4b570:	3009883a 	mov	r4,r6
   4b574:	30009716 	blt	r6,zero,4b7d4 <_fpadd_parts+0x2dc>
   4b578:	00800fc4 	movi	r2,63
   4b57c:	11806b16 	blt	r2,r6,4b72c <_fpadd_parts+0x234>
   4b580:	0100a40e 	bge	zero,r4,4b814 <_fpadd_parts+0x31c>
   4b584:	35bff804 	addi	r22,r6,-32
   4b588:	b000bc16 	blt	r22,zero,4b87c <_fpadd_parts+0x384>
   4b58c:	8596d83a 	srl	r11,r16,r22
   4b590:	0019883a 	mov	r12,zero
   4b594:	0013883a 	mov	r9,zero
   4b598:	01000044 	movi	r4,1
   4b59c:	0015883a 	mov	r10,zero
   4b5a0:	b000be16 	blt	r22,zero,4b89c <_fpadd_parts+0x3a4>
   4b5a4:	2590983a 	sll	r8,r4,r22
   4b5a8:	000f883a 	mov	r7,zero
   4b5ac:	00bfffc4 	movi	r2,-1
   4b5b0:	3889883a 	add	r4,r7,r2
   4b5b4:	408b883a 	add	r5,r8,r2
   4b5b8:	21cd803a 	cmpltu	r6,r4,r7
   4b5bc:	314b883a 	add	r5,r6,r5
   4b5c0:	7904703a 	and	r2,r15,r4
   4b5c4:	8146703a 	and	r3,r16,r5
   4b5c8:	10c4b03a 	or	r2,r2,r3
   4b5cc:	10000226 	beq	r2,zero,4b5d8 <_fpadd_parts+0xe0>
   4b5d0:	02400044 	movi	r9,1
   4b5d4:	0015883a 	mov	r10,zero
   4b5d8:	5a5eb03a 	or	r15,r11,r9
   4b5dc:	62a0b03a 	or	r16,r12,r10
   4b5e0:	99400117 	ldw	r5,4(r19)
   4b5e4:	a8800117 	ldw	r2,4(r21)
   4b5e8:	28806e26 	beq	r5,r2,4b7a4 <_fpadd_parts+0x2ac>
   4b5ec:	28006626 	beq	r5,zero,4b788 <_fpadd_parts+0x290>
   4b5f0:	7c45c83a 	sub	r2,r15,r17
   4b5f4:	7889803a 	cmpltu	r4,r15,r2
   4b5f8:	8487c83a 	sub	r3,r16,r18
   4b5fc:	1909c83a 	sub	r4,r3,r4
   4b600:	100d883a 	mov	r6,r2
   4b604:	200f883a 	mov	r7,r4
   4b608:	38007716 	blt	r7,zero,4b7e8 <_fpadd_parts+0x2f0>
   4b60c:	a5c00215 	stw	r23,8(r20)
   4b610:	a1c00415 	stw	r7,16(r20)
   4b614:	a0000115 	stw	zero,4(r20)
   4b618:	a1800315 	stw	r6,12(r20)
   4b61c:	a2000317 	ldw	r8,12(r20)
   4b620:	a2400417 	ldw	r9,16(r20)
   4b624:	00bfffc4 	movi	r2,-1
   4b628:	408b883a 	add	r5,r8,r2
   4b62c:	2a09803a 	cmpltu	r4,r5,r8
   4b630:	488d883a 	add	r6,r9,r2
   4b634:	01c40034 	movhi	r7,4096
   4b638:	39ffffc4 	addi	r7,r7,-1
   4b63c:	218d883a 	add	r6,r4,r6
   4b640:	39801736 	bltu	r7,r6,4b6a0 <_fpadd_parts+0x1a8>
   4b644:	31c06526 	beq	r6,r7,4b7dc <_fpadd_parts+0x2e4>
   4b648:	a3000217 	ldw	r12,8(r20)
   4b64c:	4209883a 	add	r4,r8,r8
   4b650:	00bfffc4 	movi	r2,-1
   4b654:	220f803a 	cmpltu	r7,r4,r8
   4b658:	4a4b883a 	add	r5,r9,r9
   4b65c:	394f883a 	add	r7,r7,r5
   4b660:	2095883a 	add	r10,r4,r2
   4b664:	3897883a 	add	r11,r7,r2
   4b668:	510d803a 	cmpltu	r6,r10,r4
   4b66c:	6099883a 	add	r12,r12,r2
   4b670:	32d7883a 	add	r11,r6,r11
   4b674:	00840034 	movhi	r2,4096
   4b678:	10bfffc4 	addi	r2,r2,-1
   4b67c:	2011883a 	mov	r8,r4
   4b680:	3813883a 	mov	r9,r7
   4b684:	a1000315 	stw	r4,12(r20)
   4b688:	a1c00415 	stw	r7,16(r20)
   4b68c:	a3000215 	stw	r12,8(r20)
   4b690:	12c00336 	bltu	r2,r11,4b6a0 <_fpadd_parts+0x1a8>
   4b694:	58bfed1e 	bne	r11,r2,4b64c <_fpadd_parts+0x154>
   4b698:	00bfff84 	movi	r2,-2
   4b69c:	12bfeb2e 	bgeu	r2,r10,4b64c <_fpadd_parts+0x154>
   4b6a0:	a2800417 	ldw	r10,16(r20)
   4b6a4:	008000c4 	movi	r2,3
   4b6a8:	00c80034 	movhi	r3,8192
   4b6ac:	18ffffc4 	addi	r3,r3,-1
   4b6b0:	a2400317 	ldw	r9,12(r20)
   4b6b4:	a0800015 	stw	r2,0(r20)
   4b6b8:	1a802336 	bltu	r3,r10,4b748 <_fpadd_parts+0x250>
   4b6bc:	a027883a 	mov	r19,r20
   4b6c0:	9805883a 	mov	r2,r19
   4b6c4:	ddc00717 	ldw	r23,28(sp)
   4b6c8:	dd800617 	ldw	r22,24(sp)
   4b6cc:	dd400517 	ldw	r21,20(sp)
   4b6d0:	dd000417 	ldw	r20,16(sp)
   4b6d4:	dcc00317 	ldw	r19,12(sp)
   4b6d8:	dc800217 	ldw	r18,8(sp)
   4b6dc:	dc400117 	ldw	r17,4(sp)
   4b6e0:	dc000017 	ldw	r16,0(sp)
   4b6e4:	dec00804 	addi	sp,sp,32
   4b6e8:	f800283a 	ret
   4b6ec:	20fff41e 	bne	r4,r3,4b6c0 <_fpadd_parts+0x1c8>
   4b6f0:	31000015 	stw	r4,0(r6)
   4b6f4:	98800117 	ldw	r2,4(r19)
   4b6f8:	30800115 	stw	r2,4(r6)
   4b6fc:	98c00217 	ldw	r3,8(r19)
   4b700:	30c00215 	stw	r3,8(r6)
   4b704:	98800317 	ldw	r2,12(r19)
   4b708:	30800315 	stw	r2,12(r6)
   4b70c:	98c00417 	ldw	r3,16(r19)
   4b710:	30c00415 	stw	r3,16(r6)
   4b714:	98800117 	ldw	r2,4(r19)
   4b718:	28c00117 	ldw	r3,4(r5)
   4b71c:	3027883a 	mov	r19,r6
   4b720:	10c4703a 	and	r2,r2,r3
   4b724:	30800115 	stw	r2,4(r6)
   4b728:	003fe506 	br	4b6c0 <_fpadd_parts+0x1c8>
   4b72c:	1dc02616 	blt	r3,r23,4b7c8 <_fpadd_parts+0x2d0>
   4b730:	0023883a 	mov	r17,zero
   4b734:	182f883a 	mov	r23,r3
   4b738:	0025883a 	mov	r18,zero
   4b73c:	003fa806 	br	4b5e0 <_fpadd_parts+0xe8>
   4b740:	a827883a 	mov	r19,r21
   4b744:	003fde06 	br	4b6c0 <_fpadd_parts+0x1c8>
   4b748:	01800044 	movi	r6,1
   4b74c:	500497fa 	slli	r2,r10,31
   4b750:	4808d07a 	srli	r4,r9,1
   4b754:	518ad83a 	srl	r5,r10,r6
   4b758:	a2000217 	ldw	r8,8(r20)
   4b75c:	1108b03a 	or	r4,r2,r4
   4b760:	0007883a 	mov	r3,zero
   4b764:	4984703a 	and	r2,r9,r6
   4b768:	208cb03a 	or	r6,r4,r2
   4b76c:	28ceb03a 	or	r7,r5,r3
   4b770:	42000044 	addi	r8,r8,1
   4b774:	a027883a 	mov	r19,r20
   4b778:	a1c00415 	stw	r7,16(r20)
   4b77c:	a2000215 	stw	r8,8(r20)
   4b780:	a1800315 	stw	r6,12(r20)
   4b784:	003fce06 	br	4b6c0 <_fpadd_parts+0x1c8>
   4b788:	8bc5c83a 	sub	r2,r17,r15
   4b78c:	8889803a 	cmpltu	r4,r17,r2
   4b790:	9407c83a 	sub	r3,r18,r16
   4b794:	1909c83a 	sub	r4,r3,r4
   4b798:	100d883a 	mov	r6,r2
   4b79c:	200f883a 	mov	r7,r4
   4b7a0:	003f9906 	br	4b608 <_fpadd_parts+0x110>
   4b7a4:	7c45883a 	add	r2,r15,r17
   4b7a8:	13c9803a 	cmpltu	r4,r2,r15
   4b7ac:	8487883a 	add	r3,r16,r18
   4b7b0:	20c9883a 	add	r4,r4,r3
   4b7b4:	a1400115 	stw	r5,4(r20)
   4b7b8:	a5c00215 	stw	r23,8(r20)
   4b7bc:	a0800315 	stw	r2,12(r20)
   4b7c0:	a1000415 	stw	r4,16(r20)
   4b7c4:	003fb606 	br	4b6a0 <_fpadd_parts+0x1a8>
   4b7c8:	001f883a 	mov	r15,zero
   4b7cc:	0021883a 	mov	r16,zero
   4b7d0:	003f8306 	br	4b5e0 <_fpadd_parts+0xe8>
   4b7d4:	018dc83a 	sub	r6,zero,r6
   4b7d8:	003f6706 	br	4b578 <_fpadd_parts+0x80>
   4b7dc:	00bfff84 	movi	r2,-2
   4b7e0:	117faf36 	bltu	r2,r5,4b6a0 <_fpadd_parts+0x1a8>
   4b7e4:	003f9806 	br	4b648 <_fpadd_parts+0x150>
   4b7e8:	0005883a 	mov	r2,zero
   4b7ec:	1189c83a 	sub	r4,r2,r6
   4b7f0:	1105803a 	cmpltu	r2,r2,r4
   4b7f4:	01cbc83a 	sub	r5,zero,r7
   4b7f8:	2885c83a 	sub	r2,r5,r2
   4b7fc:	01800044 	movi	r6,1
   4b800:	a1800115 	stw	r6,4(r20)
   4b804:	a5c00215 	stw	r23,8(r20)
   4b808:	a1000315 	stw	r4,12(r20)
   4b80c:	a0800415 	stw	r2,16(r20)
   4b810:	003f8206 	br	4b61c <_fpadd_parts+0x124>
   4b814:	203f7226 	beq	r4,zero,4b5e0 <_fpadd_parts+0xe8>
   4b818:	35bff804 	addi	r22,r6,-32
   4b81c:	b9af883a 	add	r23,r23,r6
   4b820:	b0003116 	blt	r22,zero,4b8e8 <_fpadd_parts+0x3f0>
   4b824:	959ad83a 	srl	r13,r18,r22
   4b828:	001d883a 	mov	r14,zero
   4b82c:	000f883a 	mov	r7,zero
   4b830:	01000044 	movi	r4,1
   4b834:	0011883a 	mov	r8,zero
   4b838:	b0002516 	blt	r22,zero,4b8d0 <_fpadd_parts+0x3d8>
   4b83c:	2594983a 	sll	r10,r4,r22
   4b840:	0013883a 	mov	r9,zero
   4b844:	00bfffc4 	movi	r2,-1
   4b848:	4889883a 	add	r4,r9,r2
   4b84c:	508b883a 	add	r5,r10,r2
   4b850:	224d803a 	cmpltu	r6,r4,r9
   4b854:	314b883a 	add	r5,r6,r5
   4b858:	8904703a 	and	r2,r17,r4
   4b85c:	9146703a 	and	r3,r18,r5
   4b860:	10c4b03a 	or	r2,r2,r3
   4b864:	10000226 	beq	r2,zero,4b870 <_fpadd_parts+0x378>
   4b868:	01c00044 	movi	r7,1
   4b86c:	0011883a 	mov	r8,zero
   4b870:	69e2b03a 	or	r17,r13,r7
   4b874:	7224b03a 	or	r18,r14,r8
   4b878:	003f5906 	br	4b5e0 <_fpadd_parts+0xe8>
   4b87c:	8407883a 	add	r3,r16,r16
   4b880:	008007c4 	movi	r2,31
   4b884:	1185c83a 	sub	r2,r2,r6
   4b888:	1886983a 	sll	r3,r3,r2
   4b88c:	7996d83a 	srl	r11,r15,r6
   4b890:	8198d83a 	srl	r12,r16,r6
   4b894:	1ad6b03a 	or	r11,r3,r11
   4b898:	003f3e06 	br	4b594 <_fpadd_parts+0x9c>
   4b89c:	2006d07a 	srli	r3,r4,1
   4b8a0:	008007c4 	movi	r2,31
   4b8a4:	1185c83a 	sub	r2,r2,r6
   4b8a8:	1890d83a 	srl	r8,r3,r2
   4b8ac:	218e983a 	sll	r7,r4,r6
   4b8b0:	003f3e06 	br	4b5ac <_fpadd_parts+0xb4>
   4b8b4:	113f821e 	bne	r2,r4,4b6c0 <_fpadd_parts+0x1c8>
   4b8b8:	28c00117 	ldw	r3,4(r5)
   4b8bc:	98800117 	ldw	r2,4(r19)
   4b8c0:	10ff7f26 	beq	r2,r3,4b6c0 <_fpadd_parts+0x1c8>
   4b8c4:	04c00174 	movhi	r19,5
   4b8c8:	9cc00004 	addi	r19,r19,0
   4b8cc:	003f7c06 	br	4b6c0 <_fpadd_parts+0x1c8>
   4b8d0:	2006d07a 	srli	r3,r4,1
   4b8d4:	008007c4 	movi	r2,31
   4b8d8:	1185c83a 	sub	r2,r2,r6
   4b8dc:	1894d83a 	srl	r10,r3,r2
   4b8e0:	2192983a 	sll	r9,r4,r6
   4b8e4:	003fd706 	br	4b844 <_fpadd_parts+0x34c>
   4b8e8:	9487883a 	add	r3,r18,r18
   4b8ec:	008007c4 	movi	r2,31
   4b8f0:	1185c83a 	sub	r2,r2,r6
   4b8f4:	1886983a 	sll	r3,r3,r2
   4b8f8:	899ad83a 	srl	r13,r17,r6
   4b8fc:	919cd83a 	srl	r14,r18,r6
   4b900:	1b5ab03a 	or	r13,r3,r13
   4b904:	003fc906 	br	4b82c <_fpadd_parts+0x334>

0004b908 <__subdf3>:
   4b908:	deffea04 	addi	sp,sp,-88
   4b90c:	dcc01415 	stw	r19,80(sp)
   4b910:	dcc00404 	addi	r19,sp,16
   4b914:	2011883a 	mov	r8,r4
   4b918:	2813883a 	mov	r9,r5
   4b91c:	dc401315 	stw	r17,76(sp)
   4b920:	d809883a 	mov	r4,sp
   4b924:	980b883a 	mov	r5,r19
   4b928:	dc400904 	addi	r17,sp,36
   4b92c:	dfc01515 	stw	ra,84(sp)
   4b930:	da400115 	stw	r9,4(sp)
   4b934:	d9c00315 	stw	r7,12(sp)
   4b938:	da000015 	stw	r8,0(sp)
   4b93c:	d9800215 	stw	r6,8(sp)
   4b940:	004c6a40 	call	4c6a4 <__unpack_d>
   4b944:	d9000204 	addi	r4,sp,8
   4b948:	880b883a 	mov	r5,r17
   4b94c:	004c6a40 	call	4c6a4 <__unpack_d>
   4b950:	d8800a17 	ldw	r2,40(sp)
   4b954:	880b883a 	mov	r5,r17
   4b958:	9809883a 	mov	r4,r19
   4b95c:	d9800e04 	addi	r6,sp,56
   4b960:	1080005c 	xori	r2,r2,1
   4b964:	d8800a15 	stw	r2,40(sp)
   4b968:	004b4f80 	call	4b4f8 <_fpadd_parts>
   4b96c:	1009883a 	mov	r4,r2
   4b970:	00431d40 	call	431d4 <__pack_d>
   4b974:	dfc01517 	ldw	ra,84(sp)
   4b978:	dcc01417 	ldw	r19,80(sp)
   4b97c:	dc401317 	ldw	r17,76(sp)
   4b980:	dec01604 	addi	sp,sp,88
   4b984:	f800283a 	ret

0004b988 <__adddf3>:
   4b988:	deffea04 	addi	sp,sp,-88
   4b98c:	dcc01415 	stw	r19,80(sp)
   4b990:	dcc00404 	addi	r19,sp,16
   4b994:	2011883a 	mov	r8,r4
   4b998:	2813883a 	mov	r9,r5
   4b99c:	dc401315 	stw	r17,76(sp)
   4b9a0:	d809883a 	mov	r4,sp
   4b9a4:	980b883a 	mov	r5,r19
   4b9a8:	dc400904 	addi	r17,sp,36
   4b9ac:	dfc01515 	stw	ra,84(sp)
   4b9b0:	da400115 	stw	r9,4(sp)
   4b9b4:	d9c00315 	stw	r7,12(sp)
   4b9b8:	da000015 	stw	r8,0(sp)
   4b9bc:	d9800215 	stw	r6,8(sp)
   4b9c0:	004c6a40 	call	4c6a4 <__unpack_d>
   4b9c4:	d9000204 	addi	r4,sp,8
   4b9c8:	880b883a 	mov	r5,r17
   4b9cc:	004c6a40 	call	4c6a4 <__unpack_d>
   4b9d0:	d9800e04 	addi	r6,sp,56
   4b9d4:	9809883a 	mov	r4,r19
   4b9d8:	880b883a 	mov	r5,r17
   4b9dc:	004b4f80 	call	4b4f8 <_fpadd_parts>
   4b9e0:	1009883a 	mov	r4,r2
   4b9e4:	00431d40 	call	431d4 <__pack_d>
   4b9e8:	dfc01517 	ldw	ra,84(sp)
   4b9ec:	dcc01417 	ldw	r19,80(sp)
   4b9f0:	dc401317 	ldw	r17,76(sp)
   4b9f4:	dec01604 	addi	sp,sp,88
   4b9f8:	f800283a 	ret

0004b9fc <__muldf3>:
   4b9fc:	deffe004 	addi	sp,sp,-128
   4ba00:	dc401815 	stw	r17,96(sp)
   4ba04:	dc400404 	addi	r17,sp,16
   4ba08:	2011883a 	mov	r8,r4
   4ba0c:	2813883a 	mov	r9,r5
   4ba10:	dc001715 	stw	r16,92(sp)
   4ba14:	d809883a 	mov	r4,sp
   4ba18:	880b883a 	mov	r5,r17
   4ba1c:	dc000904 	addi	r16,sp,36
   4ba20:	dfc01f15 	stw	ra,124(sp)
   4ba24:	da400115 	stw	r9,4(sp)
   4ba28:	d9c00315 	stw	r7,12(sp)
   4ba2c:	da000015 	stw	r8,0(sp)
   4ba30:	d9800215 	stw	r6,8(sp)
   4ba34:	ddc01e15 	stw	r23,120(sp)
   4ba38:	dd801d15 	stw	r22,116(sp)
   4ba3c:	dd401c15 	stw	r21,112(sp)
   4ba40:	dd001b15 	stw	r20,108(sp)
   4ba44:	dcc01a15 	stw	r19,104(sp)
   4ba48:	dc801915 	stw	r18,100(sp)
   4ba4c:	004c6a40 	call	4c6a4 <__unpack_d>
   4ba50:	d9000204 	addi	r4,sp,8
   4ba54:	800b883a 	mov	r5,r16
   4ba58:	004c6a40 	call	4c6a4 <__unpack_d>
   4ba5c:	d9000417 	ldw	r4,16(sp)
   4ba60:	00800044 	movi	r2,1
   4ba64:	1100102e 	bgeu	r2,r4,4baa8 <__muldf3+0xac>
   4ba68:	d8c00917 	ldw	r3,36(sp)
   4ba6c:	10c0062e 	bgeu	r2,r3,4ba88 <__muldf3+0x8c>
   4ba70:	00800104 	movi	r2,4
   4ba74:	20800a26 	beq	r4,r2,4baa0 <__muldf3+0xa4>
   4ba78:	1880cc26 	beq	r3,r2,4bdac <__muldf3+0x3b0>
   4ba7c:	00800084 	movi	r2,2
   4ba80:	20800926 	beq	r4,r2,4baa8 <__muldf3+0xac>
   4ba84:	1880191e 	bne	r3,r2,4baec <__muldf3+0xf0>
   4ba88:	d8c00a17 	ldw	r3,40(sp)
   4ba8c:	d8800517 	ldw	r2,20(sp)
   4ba90:	8009883a 	mov	r4,r16
   4ba94:	10c4c03a 	cmpne	r2,r2,r3
   4ba98:	d8800a15 	stw	r2,40(sp)
   4ba9c:	00000706 	br	4babc <__muldf3+0xc0>
   4baa0:	00800084 	movi	r2,2
   4baa4:	1880c326 	beq	r3,r2,4bdb4 <__muldf3+0x3b8>
   4baa8:	d8800517 	ldw	r2,20(sp)
   4baac:	d8c00a17 	ldw	r3,40(sp)
   4bab0:	8809883a 	mov	r4,r17
   4bab4:	10c4c03a 	cmpne	r2,r2,r3
   4bab8:	d8800515 	stw	r2,20(sp)
   4babc:	00431d40 	call	431d4 <__pack_d>
   4bac0:	dfc01f17 	ldw	ra,124(sp)
   4bac4:	ddc01e17 	ldw	r23,120(sp)
   4bac8:	dd801d17 	ldw	r22,116(sp)
   4bacc:	dd401c17 	ldw	r21,112(sp)
   4bad0:	dd001b17 	ldw	r20,108(sp)
   4bad4:	dcc01a17 	ldw	r19,104(sp)
   4bad8:	dc801917 	ldw	r18,100(sp)
   4badc:	dc401817 	ldw	r17,96(sp)
   4bae0:	dc001717 	ldw	r16,92(sp)
   4bae4:	dec02004 	addi	sp,sp,128
   4bae8:	f800283a 	ret
   4baec:	dd800717 	ldw	r22,28(sp)
   4baf0:	dc800c17 	ldw	r18,48(sp)
   4baf4:	002b883a 	mov	r21,zero
   4baf8:	0023883a 	mov	r17,zero
   4bafc:	a80b883a 	mov	r5,r21
   4bb00:	b00d883a 	mov	r6,r22
   4bb04:	880f883a 	mov	r7,r17
   4bb08:	ddc00817 	ldw	r23,32(sp)
   4bb0c:	dcc00d17 	ldw	r19,52(sp)
   4bb10:	9009883a 	mov	r4,r18
   4bb14:	0042f140 	call	42f14 <__muldi3>
   4bb18:	001b883a 	mov	r13,zero
   4bb1c:	680f883a 	mov	r7,r13
   4bb20:	b009883a 	mov	r4,r22
   4bb24:	000b883a 	mov	r5,zero
   4bb28:	980d883a 	mov	r6,r19
   4bb2c:	b82d883a 	mov	r22,r23
   4bb30:	002f883a 	mov	r23,zero
   4bb34:	db401615 	stw	r13,88(sp)
   4bb38:	d8801315 	stw	r2,76(sp)
   4bb3c:	d8c01415 	stw	r3,80(sp)
   4bb40:	dcc01515 	stw	r19,84(sp)
   4bb44:	0042f140 	call	42f14 <__muldi3>
   4bb48:	b00d883a 	mov	r6,r22
   4bb4c:	000b883a 	mov	r5,zero
   4bb50:	9009883a 	mov	r4,r18
   4bb54:	b80f883a 	mov	r7,r23
   4bb58:	1021883a 	mov	r16,r2
   4bb5c:	1823883a 	mov	r17,r3
   4bb60:	0042f140 	call	42f14 <__muldi3>
   4bb64:	8085883a 	add	r2,r16,r2
   4bb68:	140d803a 	cmpltu	r6,r2,r16
   4bb6c:	88c7883a 	add	r3,r17,r3
   4bb70:	30cd883a 	add	r6,r6,r3
   4bb74:	1029883a 	mov	r20,r2
   4bb78:	302b883a 	mov	r21,r6
   4bb7c:	da801317 	ldw	r10,76(sp)
   4bb80:	dac01417 	ldw	r11,80(sp)
   4bb84:	db001517 	ldw	r12,84(sp)
   4bb88:	db401617 	ldw	r13,88(sp)
   4bb8c:	3440612e 	bgeu	r6,r17,4bd14 <__muldf3+0x318>
   4bb90:	0009883a 	mov	r4,zero
   4bb94:	5105883a 	add	r2,r10,r4
   4bb98:	128d803a 	cmpltu	r6,r2,r10
   4bb9c:	5d07883a 	add	r3,r11,r20
   4bba0:	30cd883a 	add	r6,r6,r3
   4bba4:	0021883a 	mov	r16,zero
   4bba8:	04400044 	movi	r17,1
   4bbac:	1025883a 	mov	r18,r2
   4bbb0:	3027883a 	mov	r19,r6
   4bbb4:	32c06236 	bltu	r6,r11,4bd40 <__muldf3+0x344>
   4bbb8:	59807a26 	beq	r11,r6,4bda4 <__muldf3+0x3a8>
   4bbbc:	680b883a 	mov	r5,r13
   4bbc0:	b80f883a 	mov	r7,r23
   4bbc4:	6009883a 	mov	r4,r12
   4bbc8:	b00d883a 	mov	r6,r22
   4bbcc:	0042f140 	call	42f14 <__muldi3>
   4bbd0:	1009883a 	mov	r4,r2
   4bbd4:	000f883a 	mov	r7,zero
   4bbd8:	1545883a 	add	r2,r2,r21
   4bbdc:	1111803a 	cmpltu	r8,r2,r4
   4bbe0:	19c7883a 	add	r3,r3,r7
   4bbe4:	40c7883a 	add	r3,r8,r3
   4bbe8:	88cb883a 	add	r5,r17,r3
   4bbec:	d8c00617 	ldw	r3,24(sp)
   4bbf0:	8089883a 	add	r4,r16,r2
   4bbf4:	d8800b17 	ldw	r2,44(sp)
   4bbf8:	18c00104 	addi	r3,r3,4
   4bbfc:	240d803a 	cmpltu	r6,r4,r16
   4bc00:	10c7883a 	add	r3,r2,r3
   4bc04:	2013883a 	mov	r9,r4
   4bc08:	d8800a17 	ldw	r2,40(sp)
   4bc0c:	d9000517 	ldw	r4,20(sp)
   4bc10:	314d883a 	add	r6,r6,r5
   4bc14:	3015883a 	mov	r10,r6
   4bc18:	2088c03a 	cmpne	r4,r4,r2
   4bc1c:	00880034 	movhi	r2,8192
   4bc20:	10bfffc4 	addi	r2,r2,-1
   4bc24:	d9000f15 	stw	r4,60(sp)
   4bc28:	d8c01015 	stw	r3,64(sp)
   4bc2c:	1180162e 	bgeu	r2,r6,4bc88 <__muldf3+0x28c>
   4bc30:	1811883a 	mov	r8,r3
   4bc34:	101f883a 	mov	r15,r2
   4bc38:	980497fa 	slli	r2,r19,31
   4bc3c:	9016d07a 	srli	r11,r18,1
   4bc40:	500697fa 	slli	r3,r10,31
   4bc44:	480cd07a 	srli	r6,r9,1
   4bc48:	500ed07a 	srli	r7,r10,1
   4bc4c:	12d6b03a 	or	r11,r2,r11
   4bc50:	00800044 	movi	r2,1
   4bc54:	198cb03a 	or	r6,r3,r6
   4bc58:	4888703a 	and	r4,r9,r2
   4bc5c:	9818d07a 	srli	r12,r19,1
   4bc60:	001b883a 	mov	r13,zero
   4bc64:	03a00034 	movhi	r14,32768
   4bc68:	3013883a 	mov	r9,r6
   4bc6c:	3815883a 	mov	r10,r7
   4bc70:	4091883a 	add	r8,r8,r2
   4bc74:	20000226 	beq	r4,zero,4bc80 <__muldf3+0x284>
   4bc78:	5b64b03a 	or	r18,r11,r13
   4bc7c:	63a6b03a 	or	r19,r12,r14
   4bc80:	7abfed36 	bltu	r15,r10,4bc38 <__muldf3+0x23c>
   4bc84:	da001015 	stw	r8,64(sp)
   4bc88:	00840034 	movhi	r2,4096
   4bc8c:	10bfffc4 	addi	r2,r2,-1
   4bc90:	12801436 	bltu	r2,r10,4bce4 <__muldf3+0x2e8>
   4bc94:	da001017 	ldw	r8,64(sp)
   4bc98:	101f883a 	mov	r15,r2
   4bc9c:	4a45883a 	add	r2,r9,r9
   4bca0:	124d803a 	cmpltu	r6,r2,r9
   4bca4:	5287883a 	add	r3,r10,r10
   4bca8:	9497883a 	add	r11,r18,r18
   4bcac:	5c8f803a 	cmpltu	r7,r11,r18
   4bcb0:	9cd9883a 	add	r12,r19,r19
   4bcb4:	01000044 	movi	r4,1
   4bcb8:	30cd883a 	add	r6,r6,r3
   4bcbc:	3b0f883a 	add	r7,r7,r12
   4bcc0:	423fffc4 	addi	r8,r8,-1
   4bcc4:	1013883a 	mov	r9,r2
   4bcc8:	3015883a 	mov	r10,r6
   4bccc:	111ab03a 	or	r13,r2,r4
   4bcd0:	98003016 	blt	r19,zero,4bd94 <__muldf3+0x398>
   4bcd4:	5825883a 	mov	r18,r11
   4bcd8:	3827883a 	mov	r19,r7
   4bcdc:	7abfef2e 	bgeu	r15,r10,4bc9c <__muldf3+0x2a0>
   4bce0:	da001015 	stw	r8,64(sp)
   4bce4:	00803fc4 	movi	r2,255
   4bce8:	488e703a 	and	r7,r9,r2
   4bcec:	00802004 	movi	r2,128
   4bcf0:	0007883a 	mov	r3,zero
   4bcf4:	0011883a 	mov	r8,zero
   4bcf8:	38801826 	beq	r7,r2,4bd5c <__muldf3+0x360>
   4bcfc:	008000c4 	movi	r2,3
   4bd00:	d9000e04 	addi	r4,sp,56
   4bd04:	da801215 	stw	r10,72(sp)
   4bd08:	d8800e15 	stw	r2,56(sp)
   4bd0c:	da401115 	stw	r9,68(sp)
   4bd10:	003f6a06 	br	4babc <__muldf3+0xc0>
   4bd14:	89802126 	beq	r17,r6,4bd9c <__muldf3+0x3a0>
   4bd18:	0009883a 	mov	r4,zero
   4bd1c:	5105883a 	add	r2,r10,r4
   4bd20:	128d803a 	cmpltu	r6,r2,r10
   4bd24:	5d07883a 	add	r3,r11,r20
   4bd28:	30cd883a 	add	r6,r6,r3
   4bd2c:	0021883a 	mov	r16,zero
   4bd30:	0023883a 	mov	r17,zero
   4bd34:	1025883a 	mov	r18,r2
   4bd38:	3027883a 	mov	r19,r6
   4bd3c:	32ff9e2e 	bgeu	r6,r11,4bbb8 <__muldf3+0x1bc>
   4bd40:	00800044 	movi	r2,1
   4bd44:	8089883a 	add	r4,r16,r2
   4bd48:	240d803a 	cmpltu	r6,r4,r16
   4bd4c:	344d883a 	add	r6,r6,r17
   4bd50:	2021883a 	mov	r16,r4
   4bd54:	3023883a 	mov	r17,r6
   4bd58:	003f9806 	br	4bbbc <__muldf3+0x1c0>
   4bd5c:	403fe71e 	bne	r8,zero,4bcfc <__muldf3+0x300>
   4bd60:	01004004 	movi	r4,256
   4bd64:	4904703a 	and	r2,r9,r4
   4bd68:	10c4b03a 	or	r2,r2,r3
   4bd6c:	103fe31e 	bne	r2,zero,4bcfc <__muldf3+0x300>
   4bd70:	94c4b03a 	or	r2,r18,r19
   4bd74:	103fe126 	beq	r2,zero,4bcfc <__muldf3+0x300>
   4bd78:	49c5883a 	add	r2,r9,r7
   4bd7c:	1251803a 	cmpltu	r8,r2,r9
   4bd80:	4291883a 	add	r8,r8,r10
   4bd84:	013fc004 	movi	r4,-256
   4bd88:	1112703a 	and	r9,r2,r4
   4bd8c:	4015883a 	mov	r10,r8
   4bd90:	003fda06 	br	4bcfc <__muldf3+0x300>
   4bd94:	6813883a 	mov	r9,r13
   4bd98:	003fce06 	br	4bcd4 <__muldf3+0x2d8>
   4bd9c:	143f7c36 	bltu	r2,r16,4bb90 <__muldf3+0x194>
   4bda0:	003fdd06 	br	4bd18 <__muldf3+0x31c>
   4bda4:	12bf852e 	bgeu	r2,r10,4bbbc <__muldf3+0x1c0>
   4bda8:	003fe506 	br	4bd40 <__muldf3+0x344>
   4bdac:	00800084 	movi	r2,2
   4bdb0:	20bf351e 	bne	r4,r2,4ba88 <__muldf3+0x8c>
   4bdb4:	01000174 	movhi	r4,5
   4bdb8:	21000004 	addi	r4,r4,0
   4bdbc:	003f3f06 	br	4babc <__muldf3+0xc0>

0004bdc0 <__divdf3>:
   4bdc0:	deffed04 	addi	sp,sp,-76
   4bdc4:	dcc01115 	stw	r19,68(sp)
   4bdc8:	dcc00404 	addi	r19,sp,16
   4bdcc:	2011883a 	mov	r8,r4
   4bdd0:	2813883a 	mov	r9,r5
   4bdd4:	dc000e15 	stw	r16,56(sp)
   4bdd8:	d809883a 	mov	r4,sp
   4bddc:	980b883a 	mov	r5,r19
   4bde0:	dc000904 	addi	r16,sp,36
   4bde4:	dfc01215 	stw	ra,72(sp)
   4bde8:	da400115 	stw	r9,4(sp)
   4bdec:	d9c00315 	stw	r7,12(sp)
   4bdf0:	da000015 	stw	r8,0(sp)
   4bdf4:	d9800215 	stw	r6,8(sp)
   4bdf8:	dc801015 	stw	r18,64(sp)
   4bdfc:	dc400f15 	stw	r17,60(sp)
   4be00:	004c6a40 	call	4c6a4 <__unpack_d>
   4be04:	d9000204 	addi	r4,sp,8
   4be08:	800b883a 	mov	r5,r16
   4be0c:	004c6a40 	call	4c6a4 <__unpack_d>
   4be10:	d9000417 	ldw	r4,16(sp)
   4be14:	00800044 	movi	r2,1
   4be18:	11000b2e 	bgeu	r2,r4,4be48 <__divdf3+0x88>
   4be1c:	d9400917 	ldw	r5,36(sp)
   4be20:	1140762e 	bgeu	r2,r5,4bffc <__divdf3+0x23c>
   4be24:	d8800517 	ldw	r2,20(sp)
   4be28:	d8c00a17 	ldw	r3,40(sp)
   4be2c:	01800104 	movi	r6,4
   4be30:	10c4f03a 	xor	r2,r2,r3
   4be34:	d8800515 	stw	r2,20(sp)
   4be38:	21800226 	beq	r4,r6,4be44 <__divdf3+0x84>
   4be3c:	00800084 	movi	r2,2
   4be40:	2080141e 	bne	r4,r2,4be94 <__divdf3+0xd4>
   4be44:	29000926 	beq	r5,r4,4be6c <__divdf3+0xac>
   4be48:	9809883a 	mov	r4,r19
   4be4c:	00431d40 	call	431d4 <__pack_d>
   4be50:	dfc01217 	ldw	ra,72(sp)
   4be54:	dcc01117 	ldw	r19,68(sp)
   4be58:	dc801017 	ldw	r18,64(sp)
   4be5c:	dc400f17 	ldw	r17,60(sp)
   4be60:	dc000e17 	ldw	r16,56(sp)
   4be64:	dec01304 	addi	sp,sp,76
   4be68:	f800283a 	ret
   4be6c:	01000174 	movhi	r4,5
   4be70:	21000004 	addi	r4,r4,0
   4be74:	00431d40 	call	431d4 <__pack_d>
   4be78:	dfc01217 	ldw	ra,72(sp)
   4be7c:	dcc01117 	ldw	r19,68(sp)
   4be80:	dc801017 	ldw	r18,64(sp)
   4be84:	dc400f17 	ldw	r17,60(sp)
   4be88:	dc000e17 	ldw	r16,56(sp)
   4be8c:	dec01304 	addi	sp,sp,76
   4be90:	f800283a 	ret
   4be94:	29805b26 	beq	r5,r6,4c004 <__divdf3+0x244>
   4be98:	28802d26 	beq	r5,r2,4bf50 <__divdf3+0x190>
   4be9c:	d8c00617 	ldw	r3,24(sp)
   4bea0:	d8800b17 	ldw	r2,44(sp)
   4bea4:	d9c00817 	ldw	r7,32(sp)
   4bea8:	dc400d17 	ldw	r17,52(sp)
   4beac:	188bc83a 	sub	r5,r3,r2
   4beb0:	d9800717 	ldw	r6,28(sp)
   4beb4:	dc000c17 	ldw	r16,48(sp)
   4beb8:	d9400615 	stw	r5,24(sp)
   4bebc:	3c403836 	bltu	r7,r17,4bfa0 <__divdf3+0x1e0>
   4bec0:	89c03626 	beq	r17,r7,4bf9c <__divdf3+0x1dc>
   4bec4:	0015883a 	mov	r10,zero
   4bec8:	001d883a 	mov	r14,zero
   4becc:	02c40034 	movhi	r11,4096
   4bed0:	001f883a 	mov	r15,zero
   4bed4:	003f883a 	mov	ra,zero
   4bed8:	04800f44 	movi	r18,61
   4bedc:	00000f06 	br	4bf1c <__divdf3+0x15c>
   4bee0:	601d883a 	mov	r14,r12
   4bee4:	681f883a 	mov	r15,r13
   4bee8:	400d883a 	mov	r6,r8
   4beec:	100f883a 	mov	r7,r2
   4bef0:	3191883a 	add	r8,r6,r6
   4bef4:	5808d07a 	srli	r4,r11,1
   4bef8:	4185803a 	cmpltu	r2,r8,r6
   4befc:	39d3883a 	add	r9,r7,r7
   4bf00:	28c6b03a 	or	r3,r5,r3
   4bf04:	1245883a 	add	r2,r2,r9
   4bf08:	1815883a 	mov	r10,r3
   4bf0c:	2017883a 	mov	r11,r4
   4bf10:	400d883a 	mov	r6,r8
   4bf14:	100f883a 	mov	r7,r2
   4bf18:	fc801726 	beq	ra,r18,4bf78 <__divdf3+0x1b8>
   4bf1c:	580a97fa 	slli	r5,r11,31
   4bf20:	5006d07a 	srli	r3,r10,1
   4bf24:	ffc00044 	addi	ra,ra,1
   4bf28:	3c7ff136 	bltu	r7,r17,4bef0 <__divdf3+0x130>
   4bf2c:	3411c83a 	sub	r8,r6,r16
   4bf30:	3205803a 	cmpltu	r2,r6,r8
   4bf34:	3c53c83a 	sub	r9,r7,r17
   4bf38:	7298b03a 	or	r12,r14,r10
   4bf3c:	7adab03a 	or	r13,r15,r11
   4bf40:	4885c83a 	sub	r2,r9,r2
   4bf44:	89ffe61e 	bne	r17,r7,4bee0 <__divdf3+0x120>
   4bf48:	343fe936 	bltu	r6,r16,4bef0 <__divdf3+0x130>
   4bf4c:	003fe406 	br	4bee0 <__divdf3+0x120>
   4bf50:	9809883a 	mov	r4,r19
   4bf54:	d9800415 	stw	r6,16(sp)
   4bf58:	00431d40 	call	431d4 <__pack_d>
   4bf5c:	dfc01217 	ldw	ra,72(sp)
   4bf60:	dcc01117 	ldw	r19,68(sp)
   4bf64:	dc801017 	ldw	r18,64(sp)
   4bf68:	dc400f17 	ldw	r17,60(sp)
   4bf6c:	dc000e17 	ldw	r16,56(sp)
   4bf70:	dec01304 	addi	sp,sp,76
   4bf74:	f800283a 	ret
   4bf78:	00803fc4 	movi	r2,255
   4bf7c:	7090703a 	and	r8,r14,r2
   4bf80:	00802004 	movi	r2,128
   4bf84:	0007883a 	mov	r3,zero
   4bf88:	0013883a 	mov	r9,zero
   4bf8c:	40800d26 	beq	r8,r2,4bfc4 <__divdf3+0x204>
   4bf90:	dbc00815 	stw	r15,32(sp)
   4bf94:	db800715 	stw	r14,28(sp)
   4bf98:	003fab06 	br	4be48 <__divdf3+0x88>
   4bf9c:	343fc92e 	bgeu	r6,r16,4bec4 <__divdf3+0x104>
   4bfa0:	3185883a 	add	r2,r6,r6
   4bfa4:	1189803a 	cmpltu	r4,r2,r6
   4bfa8:	39c7883a 	add	r3,r7,r7
   4bfac:	20c9883a 	add	r4,r4,r3
   4bfb0:	297fffc4 	addi	r5,r5,-1
   4bfb4:	100d883a 	mov	r6,r2
   4bfb8:	200f883a 	mov	r7,r4
   4bfbc:	d9400615 	stw	r5,24(sp)
   4bfc0:	003fc006 	br	4bec4 <__divdf3+0x104>
   4bfc4:	483ff21e 	bne	r9,zero,4bf90 <__divdf3+0x1d0>
   4bfc8:	01004004 	movi	r4,256
   4bfcc:	7104703a 	and	r2,r14,r4
   4bfd0:	10c4b03a 	or	r2,r2,r3
   4bfd4:	103fee1e 	bne	r2,zero,4bf90 <__divdf3+0x1d0>
   4bfd8:	31c4b03a 	or	r2,r6,r7
   4bfdc:	103fec26 	beq	r2,zero,4bf90 <__divdf3+0x1d0>
   4bfe0:	7205883a 	add	r2,r14,r8
   4bfe4:	1391803a 	cmpltu	r8,r2,r14
   4bfe8:	43d1883a 	add	r8,r8,r15
   4bfec:	013fc004 	movi	r4,-256
   4bff0:	111c703a 	and	r14,r2,r4
   4bff4:	401f883a 	mov	r15,r8
   4bff8:	003fe506 	br	4bf90 <__divdf3+0x1d0>
   4bffc:	8009883a 	mov	r4,r16
   4c000:	003f9206 	br	4be4c <__divdf3+0x8c>
   4c004:	9809883a 	mov	r4,r19
   4c008:	d8000715 	stw	zero,28(sp)
   4c00c:	d8000815 	stw	zero,32(sp)
   4c010:	d8000615 	stw	zero,24(sp)
   4c014:	003f8d06 	br	4be4c <__divdf3+0x8c>

0004c018 <__eqdf2>:
   4c018:	deffef04 	addi	sp,sp,-68
   4c01c:	dc400f15 	stw	r17,60(sp)
   4c020:	dc400404 	addi	r17,sp,16
   4c024:	2005883a 	mov	r2,r4
   4c028:	2807883a 	mov	r3,r5
   4c02c:	dc000e15 	stw	r16,56(sp)
   4c030:	d809883a 	mov	r4,sp
   4c034:	880b883a 	mov	r5,r17
   4c038:	dc000904 	addi	r16,sp,36
   4c03c:	d8c00115 	stw	r3,4(sp)
   4c040:	d8800015 	stw	r2,0(sp)
   4c044:	d9800215 	stw	r6,8(sp)
   4c048:	dfc01015 	stw	ra,64(sp)
   4c04c:	d9c00315 	stw	r7,12(sp)
   4c050:	004c6a40 	call	4c6a4 <__unpack_d>
   4c054:	d9000204 	addi	r4,sp,8
   4c058:	800b883a 	mov	r5,r16
   4c05c:	004c6a40 	call	4c6a4 <__unpack_d>
   4c060:	d8800417 	ldw	r2,16(sp)
   4c064:	00c00044 	movi	r3,1
   4c068:	180d883a 	mov	r6,r3
   4c06c:	1880062e 	bgeu	r3,r2,4c088 <__eqdf2+0x70>
   4c070:	d8800917 	ldw	r2,36(sp)
   4c074:	8809883a 	mov	r4,r17
   4c078:	800b883a 	mov	r5,r16
   4c07c:	1880022e 	bgeu	r3,r2,4c088 <__eqdf2+0x70>
   4c080:	004c7dc0 	call	4c7dc <__fpcmp_parts_d>
   4c084:	100d883a 	mov	r6,r2
   4c088:	3005883a 	mov	r2,r6
   4c08c:	dfc01017 	ldw	ra,64(sp)
   4c090:	dc400f17 	ldw	r17,60(sp)
   4c094:	dc000e17 	ldw	r16,56(sp)
   4c098:	dec01104 	addi	sp,sp,68
   4c09c:	f800283a 	ret

0004c0a0 <__nedf2>:
   4c0a0:	deffef04 	addi	sp,sp,-68
   4c0a4:	dc400f15 	stw	r17,60(sp)
   4c0a8:	dc400404 	addi	r17,sp,16
   4c0ac:	2005883a 	mov	r2,r4
   4c0b0:	2807883a 	mov	r3,r5
   4c0b4:	dc000e15 	stw	r16,56(sp)
   4c0b8:	d809883a 	mov	r4,sp
   4c0bc:	880b883a 	mov	r5,r17
   4c0c0:	dc000904 	addi	r16,sp,36
   4c0c4:	d8c00115 	stw	r3,4(sp)
   4c0c8:	d8800015 	stw	r2,0(sp)
   4c0cc:	d9800215 	stw	r6,8(sp)
   4c0d0:	dfc01015 	stw	ra,64(sp)
   4c0d4:	d9c00315 	stw	r7,12(sp)
   4c0d8:	004c6a40 	call	4c6a4 <__unpack_d>
   4c0dc:	d9000204 	addi	r4,sp,8
   4c0e0:	800b883a 	mov	r5,r16
   4c0e4:	004c6a40 	call	4c6a4 <__unpack_d>
   4c0e8:	d8800417 	ldw	r2,16(sp)
   4c0ec:	00c00044 	movi	r3,1
   4c0f0:	180d883a 	mov	r6,r3
   4c0f4:	1880062e 	bgeu	r3,r2,4c110 <__nedf2+0x70>
   4c0f8:	d8800917 	ldw	r2,36(sp)
   4c0fc:	8809883a 	mov	r4,r17
   4c100:	800b883a 	mov	r5,r16
   4c104:	1880022e 	bgeu	r3,r2,4c110 <__nedf2+0x70>
   4c108:	004c7dc0 	call	4c7dc <__fpcmp_parts_d>
   4c10c:	100d883a 	mov	r6,r2
   4c110:	3005883a 	mov	r2,r6
   4c114:	dfc01017 	ldw	ra,64(sp)
   4c118:	dc400f17 	ldw	r17,60(sp)
   4c11c:	dc000e17 	ldw	r16,56(sp)
   4c120:	dec01104 	addi	sp,sp,68
   4c124:	f800283a 	ret

0004c128 <__gtdf2>:
   4c128:	deffef04 	addi	sp,sp,-68
   4c12c:	dc400f15 	stw	r17,60(sp)
   4c130:	dc400404 	addi	r17,sp,16
   4c134:	2005883a 	mov	r2,r4
   4c138:	2807883a 	mov	r3,r5
   4c13c:	dc000e15 	stw	r16,56(sp)
   4c140:	d809883a 	mov	r4,sp
   4c144:	880b883a 	mov	r5,r17
   4c148:	dc000904 	addi	r16,sp,36
   4c14c:	d8c00115 	stw	r3,4(sp)
   4c150:	d8800015 	stw	r2,0(sp)
   4c154:	d9800215 	stw	r6,8(sp)
   4c158:	dfc01015 	stw	ra,64(sp)
   4c15c:	d9c00315 	stw	r7,12(sp)
   4c160:	004c6a40 	call	4c6a4 <__unpack_d>
   4c164:	d9000204 	addi	r4,sp,8
   4c168:	800b883a 	mov	r5,r16
   4c16c:	004c6a40 	call	4c6a4 <__unpack_d>
   4c170:	d8800417 	ldw	r2,16(sp)
   4c174:	00c00044 	movi	r3,1
   4c178:	01bfffc4 	movi	r6,-1
   4c17c:	1880062e 	bgeu	r3,r2,4c198 <__gtdf2+0x70>
   4c180:	d8800917 	ldw	r2,36(sp)
   4c184:	8809883a 	mov	r4,r17
   4c188:	800b883a 	mov	r5,r16
   4c18c:	1880022e 	bgeu	r3,r2,4c198 <__gtdf2+0x70>
   4c190:	004c7dc0 	call	4c7dc <__fpcmp_parts_d>
   4c194:	100d883a 	mov	r6,r2
   4c198:	3005883a 	mov	r2,r6
   4c19c:	dfc01017 	ldw	ra,64(sp)
   4c1a0:	dc400f17 	ldw	r17,60(sp)
   4c1a4:	dc000e17 	ldw	r16,56(sp)
   4c1a8:	dec01104 	addi	sp,sp,68
   4c1ac:	f800283a 	ret

0004c1b0 <__gedf2>:
   4c1b0:	deffef04 	addi	sp,sp,-68
   4c1b4:	dc400f15 	stw	r17,60(sp)
   4c1b8:	dc400404 	addi	r17,sp,16
   4c1bc:	2005883a 	mov	r2,r4
   4c1c0:	2807883a 	mov	r3,r5
   4c1c4:	dc000e15 	stw	r16,56(sp)
   4c1c8:	d809883a 	mov	r4,sp
   4c1cc:	880b883a 	mov	r5,r17
   4c1d0:	dc000904 	addi	r16,sp,36
   4c1d4:	d8c00115 	stw	r3,4(sp)
   4c1d8:	d8800015 	stw	r2,0(sp)
   4c1dc:	d9800215 	stw	r6,8(sp)
   4c1e0:	dfc01015 	stw	ra,64(sp)
   4c1e4:	d9c00315 	stw	r7,12(sp)
   4c1e8:	004c6a40 	call	4c6a4 <__unpack_d>
   4c1ec:	d9000204 	addi	r4,sp,8
   4c1f0:	800b883a 	mov	r5,r16
   4c1f4:	004c6a40 	call	4c6a4 <__unpack_d>
   4c1f8:	d8800417 	ldw	r2,16(sp)
   4c1fc:	00c00044 	movi	r3,1
   4c200:	01bfffc4 	movi	r6,-1
   4c204:	1880062e 	bgeu	r3,r2,4c220 <__gedf2+0x70>
   4c208:	d8800917 	ldw	r2,36(sp)
   4c20c:	8809883a 	mov	r4,r17
   4c210:	800b883a 	mov	r5,r16
   4c214:	1880022e 	bgeu	r3,r2,4c220 <__gedf2+0x70>
   4c218:	004c7dc0 	call	4c7dc <__fpcmp_parts_d>
   4c21c:	100d883a 	mov	r6,r2
   4c220:	3005883a 	mov	r2,r6
   4c224:	dfc01017 	ldw	ra,64(sp)
   4c228:	dc400f17 	ldw	r17,60(sp)
   4c22c:	dc000e17 	ldw	r16,56(sp)
   4c230:	dec01104 	addi	sp,sp,68
   4c234:	f800283a 	ret

0004c238 <__ltdf2>:
   4c238:	deffef04 	addi	sp,sp,-68
   4c23c:	dc400f15 	stw	r17,60(sp)
   4c240:	dc400404 	addi	r17,sp,16
   4c244:	2005883a 	mov	r2,r4
   4c248:	2807883a 	mov	r3,r5
   4c24c:	dc000e15 	stw	r16,56(sp)
   4c250:	d809883a 	mov	r4,sp
   4c254:	880b883a 	mov	r5,r17
   4c258:	dc000904 	addi	r16,sp,36
   4c25c:	d8c00115 	stw	r3,4(sp)
   4c260:	d8800015 	stw	r2,0(sp)
   4c264:	d9800215 	stw	r6,8(sp)
   4c268:	dfc01015 	stw	ra,64(sp)
   4c26c:	d9c00315 	stw	r7,12(sp)
   4c270:	004c6a40 	call	4c6a4 <__unpack_d>
   4c274:	d9000204 	addi	r4,sp,8
   4c278:	800b883a 	mov	r5,r16
   4c27c:	004c6a40 	call	4c6a4 <__unpack_d>
   4c280:	d8800417 	ldw	r2,16(sp)
   4c284:	00c00044 	movi	r3,1
   4c288:	180d883a 	mov	r6,r3
   4c28c:	1880062e 	bgeu	r3,r2,4c2a8 <__ltdf2+0x70>
   4c290:	d8800917 	ldw	r2,36(sp)
   4c294:	8809883a 	mov	r4,r17
   4c298:	800b883a 	mov	r5,r16
   4c29c:	1880022e 	bgeu	r3,r2,4c2a8 <__ltdf2+0x70>
   4c2a0:	004c7dc0 	call	4c7dc <__fpcmp_parts_d>
   4c2a4:	100d883a 	mov	r6,r2
   4c2a8:	3005883a 	mov	r2,r6
   4c2ac:	dfc01017 	ldw	ra,64(sp)
   4c2b0:	dc400f17 	ldw	r17,60(sp)
   4c2b4:	dc000e17 	ldw	r16,56(sp)
   4c2b8:	dec01104 	addi	sp,sp,68
   4c2bc:	f800283a 	ret

0004c2c0 <__floatsidf>:
   4c2c0:	2006d7fa 	srli	r3,r4,31
   4c2c4:	defff604 	addi	sp,sp,-40
   4c2c8:	008000c4 	movi	r2,3
   4c2cc:	dfc00915 	stw	ra,36(sp)
   4c2d0:	dcc00815 	stw	r19,32(sp)
   4c2d4:	dc800715 	stw	r18,28(sp)
   4c2d8:	dc400615 	stw	r17,24(sp)
   4c2dc:	dc000515 	stw	r16,20(sp)
   4c2e0:	d8800015 	stw	r2,0(sp)
   4c2e4:	d8c00115 	stw	r3,4(sp)
   4c2e8:	20000f1e 	bne	r4,zero,4c328 <__floatsidf+0x68>
   4c2ec:	00800084 	movi	r2,2
   4c2f0:	d8800015 	stw	r2,0(sp)
   4c2f4:	d809883a 	mov	r4,sp
   4c2f8:	00431d40 	call	431d4 <__pack_d>
   4c2fc:	1009883a 	mov	r4,r2
   4c300:	180b883a 	mov	r5,r3
   4c304:	2005883a 	mov	r2,r4
   4c308:	2807883a 	mov	r3,r5
   4c30c:	dfc00917 	ldw	ra,36(sp)
   4c310:	dcc00817 	ldw	r19,32(sp)
   4c314:	dc800717 	ldw	r18,28(sp)
   4c318:	dc400617 	ldw	r17,24(sp)
   4c31c:	dc000517 	ldw	r16,20(sp)
   4c320:	dec00a04 	addi	sp,sp,40
   4c324:	f800283a 	ret
   4c328:	00800f04 	movi	r2,60
   4c32c:	1807003a 	cmpeq	r3,r3,zero
   4c330:	d8800215 	stw	r2,8(sp)
   4c334:	18001126 	beq	r3,zero,4c37c <__floatsidf+0xbc>
   4c338:	0027883a 	mov	r19,zero
   4c33c:	2025883a 	mov	r18,r4
   4c340:	d9000315 	stw	r4,12(sp)
   4c344:	dcc00415 	stw	r19,16(sp)
   4c348:	004c6240 	call	4c624 <__clzsi2>
   4c34c:	11000744 	addi	r4,r2,29
   4c350:	013fe80e 	bge	zero,r4,4c2f4 <__floatsidf+0x34>
   4c354:	10bfff44 	addi	r2,r2,-3
   4c358:	10000c16 	blt	r2,zero,4c38c <__floatsidf+0xcc>
   4c35c:	90a2983a 	sll	r17,r18,r2
   4c360:	0021883a 	mov	r16,zero
   4c364:	d8800217 	ldw	r2,8(sp)
   4c368:	dc400415 	stw	r17,16(sp)
   4c36c:	dc000315 	stw	r16,12(sp)
   4c370:	1105c83a 	sub	r2,r2,r4
   4c374:	d8800215 	stw	r2,8(sp)
   4c378:	003fde06 	br	4c2f4 <__floatsidf+0x34>
   4c37c:	00a00034 	movhi	r2,32768
   4c380:	20800a26 	beq	r4,r2,4c3ac <__floatsidf+0xec>
   4c384:	0109c83a 	sub	r4,zero,r4
   4c388:	003feb06 	br	4c338 <__floatsidf+0x78>
   4c38c:	9006d07a 	srli	r3,r18,1
   4c390:	008007c4 	movi	r2,31
   4c394:	1105c83a 	sub	r2,r2,r4
   4c398:	1886d83a 	srl	r3,r3,r2
   4c39c:	9922983a 	sll	r17,r19,r4
   4c3a0:	9120983a 	sll	r16,r18,r4
   4c3a4:	1c62b03a 	or	r17,r3,r17
   4c3a8:	003fee06 	br	4c364 <__floatsidf+0xa4>
   4c3ac:	0009883a 	mov	r4,zero
   4c3b0:	01707834 	movhi	r5,49632
   4c3b4:	003fd306 	br	4c304 <__floatsidf+0x44>

0004c3b8 <__fixdfsi>:
   4c3b8:	defff804 	addi	sp,sp,-32
   4c3bc:	2005883a 	mov	r2,r4
   4c3c0:	2807883a 	mov	r3,r5
   4c3c4:	d809883a 	mov	r4,sp
   4c3c8:	d9400204 	addi	r5,sp,8
   4c3cc:	d8c00115 	stw	r3,4(sp)
   4c3d0:	d8800015 	stw	r2,0(sp)
   4c3d4:	dfc00715 	stw	ra,28(sp)
   4c3d8:	004c6a40 	call	4c6a4 <__unpack_d>
   4c3dc:	d8c00217 	ldw	r3,8(sp)
   4c3e0:	00800084 	movi	r2,2
   4c3e4:	1880051e 	bne	r3,r2,4c3fc <__fixdfsi+0x44>
   4c3e8:	0007883a 	mov	r3,zero
   4c3ec:	1805883a 	mov	r2,r3
   4c3f0:	dfc00717 	ldw	ra,28(sp)
   4c3f4:	dec00804 	addi	sp,sp,32
   4c3f8:	f800283a 	ret
   4c3fc:	00800044 	movi	r2,1
   4c400:	10fff92e 	bgeu	r2,r3,4c3e8 <__fixdfsi+0x30>
   4c404:	00800104 	movi	r2,4
   4c408:	18800426 	beq	r3,r2,4c41c <__fixdfsi+0x64>
   4c40c:	d8c00417 	ldw	r3,16(sp)
   4c410:	183ff516 	blt	r3,zero,4c3e8 <__fixdfsi+0x30>
   4c414:	00800784 	movi	r2,30
   4c418:	10c0080e 	bge	r2,r3,4c43c <__fixdfsi+0x84>
   4c41c:	d8800317 	ldw	r2,12(sp)
   4c420:	1000121e 	bne	r2,zero,4c46c <__fixdfsi+0xb4>
   4c424:	00e00034 	movhi	r3,32768
   4c428:	18ffffc4 	addi	r3,r3,-1
   4c42c:	1805883a 	mov	r2,r3
   4c430:	dfc00717 	ldw	ra,28(sp)
   4c434:	dec00804 	addi	sp,sp,32
   4c438:	f800283a 	ret
   4c43c:	00800f04 	movi	r2,60
   4c440:	10d1c83a 	sub	r8,r2,r3
   4c444:	40bff804 	addi	r2,r8,-32
   4c448:	d9800517 	ldw	r6,20(sp)
   4c44c:	d9c00617 	ldw	r7,24(sp)
   4c450:	10000816 	blt	r2,zero,4c474 <__fixdfsi+0xbc>
   4c454:	3888d83a 	srl	r4,r7,r2
   4c458:	d8800317 	ldw	r2,12(sp)
   4c45c:	2007883a 	mov	r3,r4
   4c460:	103fe226 	beq	r2,zero,4c3ec <__fixdfsi+0x34>
   4c464:	0107c83a 	sub	r3,zero,r4
   4c468:	003fe006 	br	4c3ec <__fixdfsi+0x34>
   4c46c:	00e00034 	movhi	r3,32768
   4c470:	003fde06 	br	4c3ec <__fixdfsi+0x34>
   4c474:	39c7883a 	add	r3,r7,r7
   4c478:	008007c4 	movi	r2,31
   4c47c:	1205c83a 	sub	r2,r2,r8
   4c480:	1886983a 	sll	r3,r3,r2
   4c484:	3208d83a 	srl	r4,r6,r8
   4c488:	1908b03a 	or	r4,r3,r4
   4c48c:	003ff206 	br	4c458 <__fixdfsi+0xa0>

0004c490 <__floatunsidf>:
   4c490:	defff204 	addi	sp,sp,-56
   4c494:	dfc00d15 	stw	ra,52(sp)
   4c498:	ddc00c15 	stw	r23,48(sp)
   4c49c:	dd800b15 	stw	r22,44(sp)
   4c4a0:	dd400a15 	stw	r21,40(sp)
   4c4a4:	dd000915 	stw	r20,36(sp)
   4c4a8:	dcc00815 	stw	r19,32(sp)
   4c4ac:	dc800715 	stw	r18,28(sp)
   4c4b0:	dc400615 	stw	r17,24(sp)
   4c4b4:	dc000515 	stw	r16,20(sp)
   4c4b8:	d8000115 	stw	zero,4(sp)
   4c4bc:	20000f1e 	bne	r4,zero,4c4fc <__floatunsidf+0x6c>
   4c4c0:	00800084 	movi	r2,2
   4c4c4:	d8800015 	stw	r2,0(sp)
   4c4c8:	d809883a 	mov	r4,sp
   4c4cc:	00431d40 	call	431d4 <__pack_d>
   4c4d0:	dfc00d17 	ldw	ra,52(sp)
   4c4d4:	ddc00c17 	ldw	r23,48(sp)
   4c4d8:	dd800b17 	ldw	r22,44(sp)
   4c4dc:	dd400a17 	ldw	r21,40(sp)
   4c4e0:	dd000917 	ldw	r20,36(sp)
   4c4e4:	dcc00817 	ldw	r19,32(sp)
   4c4e8:	dc800717 	ldw	r18,28(sp)
   4c4ec:	dc400617 	ldw	r17,24(sp)
   4c4f0:	dc000517 	ldw	r16,20(sp)
   4c4f4:	dec00e04 	addi	sp,sp,56
   4c4f8:	f800283a 	ret
   4c4fc:	008000c4 	movi	r2,3
   4c500:	00c00f04 	movi	r3,60
   4c504:	002f883a 	mov	r23,zero
   4c508:	202d883a 	mov	r22,r4
   4c50c:	d8800015 	stw	r2,0(sp)
   4c510:	d8c00215 	stw	r3,8(sp)
   4c514:	d9000315 	stw	r4,12(sp)
   4c518:	ddc00415 	stw	r23,16(sp)
   4c51c:	004c6240 	call	4c624 <__clzsi2>
   4c520:	12400744 	addi	r9,r2,29
   4c524:	48000b16 	blt	r9,zero,4c554 <__floatunsidf+0xc4>
   4c528:	483fe726 	beq	r9,zero,4c4c8 <__floatunsidf+0x38>
   4c52c:	10bfff44 	addi	r2,r2,-3
   4c530:	10002e16 	blt	r2,zero,4c5ec <__floatunsidf+0x15c>
   4c534:	b0a2983a 	sll	r17,r22,r2
   4c538:	0021883a 	mov	r16,zero
   4c53c:	d8800217 	ldw	r2,8(sp)
   4c540:	dc400415 	stw	r17,16(sp)
   4c544:	dc000315 	stw	r16,12(sp)
   4c548:	1245c83a 	sub	r2,r2,r9
   4c54c:	d8800215 	stw	r2,8(sp)
   4c550:	003fdd06 	br	4c4c8 <__floatunsidf+0x38>
   4c554:	0255c83a 	sub	r10,zero,r9
   4c558:	51bff804 	addi	r6,r10,-32
   4c55c:	30001b16 	blt	r6,zero,4c5cc <__floatunsidf+0x13c>
   4c560:	b9a8d83a 	srl	r20,r23,r6
   4c564:	002b883a 	mov	r21,zero
   4c568:	000f883a 	mov	r7,zero
   4c56c:	01000044 	movi	r4,1
   4c570:	0011883a 	mov	r8,zero
   4c574:	30002516 	blt	r6,zero,4c60c <__floatunsidf+0x17c>
   4c578:	21a6983a 	sll	r19,r4,r6
   4c57c:	0025883a 	mov	r18,zero
   4c580:	00bfffc4 	movi	r2,-1
   4c584:	9089883a 	add	r4,r18,r2
   4c588:	988b883a 	add	r5,r19,r2
   4c58c:	248d803a 	cmpltu	r6,r4,r18
   4c590:	314b883a 	add	r5,r6,r5
   4c594:	b104703a 	and	r2,r22,r4
   4c598:	b946703a 	and	r3,r23,r5
   4c59c:	10c4b03a 	or	r2,r2,r3
   4c5a0:	10000226 	beq	r2,zero,4c5ac <__floatunsidf+0x11c>
   4c5a4:	01c00044 	movi	r7,1
   4c5a8:	0011883a 	mov	r8,zero
   4c5ac:	d9000217 	ldw	r4,8(sp)
   4c5b0:	a1c4b03a 	or	r2,r20,r7
   4c5b4:	aa06b03a 	or	r3,r21,r8
   4c5b8:	2249c83a 	sub	r4,r4,r9
   4c5bc:	d8c00415 	stw	r3,16(sp)
   4c5c0:	d9000215 	stw	r4,8(sp)
   4c5c4:	d8800315 	stw	r2,12(sp)
   4c5c8:	003fbf06 	br	4c4c8 <__floatunsidf+0x38>
   4c5cc:	bdc7883a 	add	r3,r23,r23
   4c5d0:	008007c4 	movi	r2,31
   4c5d4:	1285c83a 	sub	r2,r2,r10
   4c5d8:	1886983a 	sll	r3,r3,r2
   4c5dc:	b2a8d83a 	srl	r20,r22,r10
   4c5e0:	baaad83a 	srl	r21,r23,r10
   4c5e4:	1d28b03a 	or	r20,r3,r20
   4c5e8:	003fdf06 	br	4c568 <__floatunsidf+0xd8>
   4c5ec:	b006d07a 	srli	r3,r22,1
   4c5f0:	008007c4 	movi	r2,31
   4c5f4:	1245c83a 	sub	r2,r2,r9
   4c5f8:	1886d83a 	srl	r3,r3,r2
   4c5fc:	ba62983a 	sll	r17,r23,r9
   4c600:	b260983a 	sll	r16,r22,r9
   4c604:	1c62b03a 	or	r17,r3,r17
   4c608:	003fcc06 	br	4c53c <__floatunsidf+0xac>
   4c60c:	2006d07a 	srli	r3,r4,1
   4c610:	008007c4 	movi	r2,31
   4c614:	1285c83a 	sub	r2,r2,r10
   4c618:	18a6d83a 	srl	r19,r3,r2
   4c61c:	22a4983a 	sll	r18,r4,r10
   4c620:	003fd706 	br	4c580 <__floatunsidf+0xf0>

0004c624 <__clzsi2>:
   4c624:	00bfffd4 	movui	r2,65535
   4c628:	11000e36 	bltu	r2,r4,4c664 <__clzsi2+0x40>
   4c62c:	00803fc4 	movi	r2,255
   4c630:	01400204 	movi	r5,8
   4c634:	0007883a 	mov	r3,zero
   4c638:	11001036 	bltu	r2,r4,4c67c <__clzsi2+0x58>
   4c63c:	000b883a 	mov	r5,zero
   4c640:	20c6d83a 	srl	r3,r4,r3
   4c644:	00800174 	movhi	r2,5
   4c648:	10800504 	addi	r2,r2,20
   4c64c:	1887883a 	add	r3,r3,r2
   4c650:	18800003 	ldbu	r2,0(r3)
   4c654:	00c00804 	movi	r3,32
   4c658:	2885883a 	add	r2,r5,r2
   4c65c:	1885c83a 	sub	r2,r3,r2
   4c660:	f800283a 	ret
   4c664:	01400404 	movi	r5,16
   4c668:	00804034 	movhi	r2,256
   4c66c:	10bfffc4 	addi	r2,r2,-1
   4c670:	2807883a 	mov	r3,r5
   4c674:	113ff22e 	bgeu	r2,r4,4c640 <__clzsi2+0x1c>
   4c678:	01400604 	movi	r5,24
   4c67c:	2807883a 	mov	r3,r5
   4c680:	20c6d83a 	srl	r3,r4,r3
   4c684:	00800174 	movhi	r2,5
   4c688:	10800504 	addi	r2,r2,20
   4c68c:	1887883a 	add	r3,r3,r2
   4c690:	18800003 	ldbu	r2,0(r3)
   4c694:	00c00804 	movi	r3,32
   4c698:	2885883a 	add	r2,r5,r2
   4c69c:	1885c83a 	sub	r2,r3,r2
   4c6a0:	f800283a 	ret

0004c6a4 <__unpack_d>:
   4c6a4:	20c00117 	ldw	r3,4(r4)
   4c6a8:	22400017 	ldw	r9,0(r4)
   4c6ac:	00800434 	movhi	r2,16
   4c6b0:	10bfffc4 	addi	r2,r2,-1
   4c6b4:	1808d53a 	srli	r4,r3,20
   4c6b8:	180cd7fa 	srli	r6,r3,31
   4c6bc:	1894703a 	and	r10,r3,r2
   4c6c0:	2201ffcc 	andi	r8,r4,2047
   4c6c4:	281b883a 	mov	r13,r5
   4c6c8:	4817883a 	mov	r11,r9
   4c6cc:	29800115 	stw	r6,4(r5)
   4c6d0:	5019883a 	mov	r12,r10
   4c6d4:	40001e1e 	bne	r8,zero,4c750 <__unpack_d+0xac>
   4c6d8:	4a84b03a 	or	r2,r9,r10
   4c6dc:	10001926 	beq	r2,zero,4c744 <__unpack_d+0xa0>
   4c6e0:	4804d63a 	srli	r2,r9,24
   4c6e4:	500c923a 	slli	r6,r10,8
   4c6e8:	013f0084 	movi	r4,-1022
   4c6ec:	00c40034 	movhi	r3,4096
   4c6f0:	18ffffc4 	addi	r3,r3,-1
   4c6f4:	118cb03a 	or	r6,r2,r6
   4c6f8:	008000c4 	movi	r2,3
   4c6fc:	480a923a 	slli	r5,r9,8
   4c700:	68800015 	stw	r2,0(r13)
   4c704:	69000215 	stw	r4,8(r13)
   4c708:	19800b36 	bltu	r3,r6,4c738 <__unpack_d+0x94>
   4c70c:	200f883a 	mov	r7,r4
   4c710:	1811883a 	mov	r8,r3
   4c714:	2945883a 	add	r2,r5,r5
   4c718:	1149803a 	cmpltu	r4,r2,r5
   4c71c:	3187883a 	add	r3,r6,r6
   4c720:	20c9883a 	add	r4,r4,r3
   4c724:	100b883a 	mov	r5,r2
   4c728:	200d883a 	mov	r6,r4
   4c72c:	39ffffc4 	addi	r7,r7,-1
   4c730:	413ff82e 	bgeu	r8,r4,4c714 <__unpack_d+0x70>
   4c734:	69c00215 	stw	r7,8(r13)
   4c738:	69800415 	stw	r6,16(r13)
   4c73c:	69400315 	stw	r5,12(r13)
   4c740:	f800283a 	ret
   4c744:	00800084 	movi	r2,2
   4c748:	28800015 	stw	r2,0(r5)
   4c74c:	f800283a 	ret
   4c750:	0081ffc4 	movi	r2,2047
   4c754:	40800f26 	beq	r8,r2,4c794 <__unpack_d+0xf0>
   4c758:	480cd63a 	srli	r6,r9,24
   4c75c:	5006923a 	slli	r3,r10,8
   4c760:	4804923a 	slli	r2,r9,8
   4c764:	0009883a 	mov	r4,zero
   4c768:	30c6b03a 	or	r3,r6,r3
   4c76c:	01440034 	movhi	r5,4096
   4c770:	110cb03a 	or	r6,r2,r4
   4c774:	423f0044 	addi	r8,r8,-1023
   4c778:	194eb03a 	or	r7,r3,r5
   4c77c:	008000c4 	movi	r2,3
   4c780:	69c00415 	stw	r7,16(r13)
   4c784:	6a000215 	stw	r8,8(r13)
   4c788:	68800015 	stw	r2,0(r13)
   4c78c:	69800315 	stw	r6,12(r13)
   4c790:	f800283a 	ret
   4c794:	4a84b03a 	or	r2,r9,r10
   4c798:	1000031e 	bne	r2,zero,4c7a8 <__unpack_d+0x104>
   4c79c:	00800104 	movi	r2,4
   4c7a0:	28800015 	stw	r2,0(r5)
   4c7a4:	f800283a 	ret
   4c7a8:	0009883a 	mov	r4,zero
   4c7ac:	01400234 	movhi	r5,8
   4c7b0:	4904703a 	and	r2,r9,r4
   4c7b4:	5146703a 	and	r3,r10,r5
   4c7b8:	10c4b03a 	or	r2,r2,r3
   4c7bc:	10000526 	beq	r2,zero,4c7d4 <__unpack_d+0x130>
   4c7c0:	00800044 	movi	r2,1
   4c7c4:	68800015 	stw	r2,0(r13)
   4c7c8:	6b000415 	stw	r12,16(r13)
   4c7cc:	6ac00315 	stw	r11,12(r13)
   4c7d0:	f800283a 	ret
   4c7d4:	68000015 	stw	zero,0(r13)
   4c7d8:	003ffb06 	br	4c7c8 <__unpack_d+0x124>

0004c7dc <__fpcmp_parts_d>:
   4c7dc:	21800017 	ldw	r6,0(r4)
   4c7e0:	00c00044 	movi	r3,1
   4c7e4:	19800a2e 	bgeu	r3,r6,4c810 <__fpcmp_parts_d+0x34>
   4c7e8:	28800017 	ldw	r2,0(r5)
   4c7ec:	1880082e 	bgeu	r3,r2,4c810 <__fpcmp_parts_d+0x34>
   4c7f0:	00c00104 	movi	r3,4
   4c7f4:	30c02626 	beq	r6,r3,4c890 <__fpcmp_parts_d+0xb4>
   4c7f8:	10c02226 	beq	r2,r3,4c884 <__fpcmp_parts_d+0xa8>
   4c7fc:	00c00084 	movi	r3,2
   4c800:	30c00526 	beq	r6,r3,4c818 <__fpcmp_parts_d+0x3c>
   4c804:	10c0071e 	bne	r2,r3,4c824 <__fpcmp_parts_d+0x48>
   4c808:	20800117 	ldw	r2,4(r4)
   4c80c:	1000091e 	bne	r2,zero,4c834 <__fpcmp_parts_d+0x58>
   4c810:	00800044 	movi	r2,1
   4c814:	f800283a 	ret
   4c818:	10c01a1e 	bne	r2,r3,4c884 <__fpcmp_parts_d+0xa8>
   4c81c:	0005883a 	mov	r2,zero
   4c820:	f800283a 	ret
   4c824:	22000117 	ldw	r8,4(r4)
   4c828:	28800117 	ldw	r2,4(r5)
   4c82c:	40800326 	beq	r8,r2,4c83c <__fpcmp_parts_d+0x60>
   4c830:	403ff726 	beq	r8,zero,4c810 <__fpcmp_parts_d+0x34>
   4c834:	00bfffc4 	movi	r2,-1
   4c838:	f800283a 	ret
   4c83c:	20c00217 	ldw	r3,8(r4)
   4c840:	28800217 	ldw	r2,8(r5)
   4c844:	10fffa16 	blt	r2,r3,4c830 <__fpcmp_parts_d+0x54>
   4c848:	18800916 	blt	r3,r2,4c870 <__fpcmp_parts_d+0x94>
   4c84c:	21c00417 	ldw	r7,16(r4)
   4c850:	28c00417 	ldw	r3,16(r5)
   4c854:	21800317 	ldw	r6,12(r4)
   4c858:	28800317 	ldw	r2,12(r5)
   4c85c:	19fff436 	bltu	r3,r7,4c830 <__fpcmp_parts_d+0x54>
   4c860:	38c00526 	beq	r7,r3,4c878 <__fpcmp_parts_d+0x9c>
   4c864:	38c00236 	bltu	r7,r3,4c870 <__fpcmp_parts_d+0x94>
   4c868:	19ffec1e 	bne	r3,r7,4c81c <__fpcmp_parts_d+0x40>
   4c86c:	30bfeb2e 	bgeu	r6,r2,4c81c <__fpcmp_parts_d+0x40>
   4c870:	403fe71e 	bne	r8,zero,4c810 <__fpcmp_parts_d+0x34>
   4c874:	003fef06 	br	4c834 <__fpcmp_parts_d+0x58>
   4c878:	11bffa2e 	bgeu	r2,r6,4c864 <__fpcmp_parts_d+0x88>
   4c87c:	403fe426 	beq	r8,zero,4c810 <__fpcmp_parts_d+0x34>
   4c880:	003fec06 	br	4c834 <__fpcmp_parts_d+0x58>
   4c884:	28800117 	ldw	r2,4(r5)
   4c888:	103fe11e 	bne	r2,zero,4c810 <__fpcmp_parts_d+0x34>
   4c88c:	003fe906 	br	4c834 <__fpcmp_parts_d+0x58>
   4c890:	11bfdd1e 	bne	r2,r6,4c808 <__fpcmp_parts_d+0x2c>
   4c894:	28c00117 	ldw	r3,4(r5)
   4c898:	20800117 	ldw	r2,4(r4)
   4c89c:	1885c83a 	sub	r2,r3,r2
   4c8a0:	f800283a 	ret

0004c8a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4c8a4:	defff804 	addi	sp,sp,-32
   4c8a8:	dfc00715 	stw	ra,28(sp)
   4c8ac:	df000615 	stw	fp,24(sp)
   4c8b0:	df000604 	addi	fp,sp,24
   4c8b4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4c8b8:	e0bffc17 	ldw	r2,-16(fp)
   4c8bc:	1004803a 	cmplt	r2,r2,zero
   4c8c0:	1000081e 	bne	r2,zero,4c8e4 <close+0x40>
   4c8c4:	e0bffc17 	ldw	r2,-16(fp)
   4c8c8:	10800324 	muli	r2,r2,12
   4c8cc:	1007883a 	mov	r3,r2
   4c8d0:	00800174 	movhi	r2,5
   4c8d4:	10828204 	addi	r2,r2,2568
   4c8d8:	1887883a 	add	r3,r3,r2
   4c8dc:	e0ffff15 	stw	r3,-4(fp)
   4c8e0:	00000106 	br	4c8e8 <close+0x44>
   4c8e4:	e03fff15 	stw	zero,-4(fp)
   4c8e8:	e0bfff17 	ldw	r2,-4(fp)
   4c8ec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   4c8f0:	e0bffb17 	ldw	r2,-20(fp)
   4c8f4:	1005003a 	cmpeq	r2,r2,zero
   4c8f8:	10001d1e 	bne	r2,zero,4c970 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4c8fc:	e0bffb17 	ldw	r2,-20(fp)
   4c900:	10800017 	ldw	r2,0(r2)
   4c904:	10800417 	ldw	r2,16(r2)
   4c908:	1005003a 	cmpeq	r2,r2,zero
   4c90c:	1000071e 	bne	r2,zero,4c92c <close+0x88>
   4c910:	e0bffb17 	ldw	r2,-20(fp)
   4c914:	10800017 	ldw	r2,0(r2)
   4c918:	10800417 	ldw	r2,16(r2)
   4c91c:	e13ffb17 	ldw	r4,-20(fp)
   4c920:	103ee83a 	callr	r2
   4c924:	e0bffe15 	stw	r2,-8(fp)
   4c928:	00000106 	br	4c930 <close+0x8c>
   4c92c:	e03ffe15 	stw	zero,-8(fp)
   4c930:	e0bffe17 	ldw	r2,-8(fp)
   4c934:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4c938:	e13ffc17 	ldw	r4,-16(fp)
   4c93c:	004d56c0 	call	4d56c <alt_release_fd>
    if (rval < 0)
   4c940:	e0bffa17 	ldw	r2,-24(fp)
   4c944:	1004403a 	cmpge	r2,r2,zero
   4c948:	1000071e 	bne	r2,zero,4c968 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   4c94c:	004c9a00 	call	4c9a0 <alt_get_errno>
   4c950:	e0fffa17 	ldw	r3,-24(fp)
   4c954:	00c7c83a 	sub	r3,zero,r3
   4c958:	10c00015 	stw	r3,0(r2)
      return -1;
   4c95c:	00bfffc4 	movi	r2,-1
   4c960:	e0bffd15 	stw	r2,-12(fp)
   4c964:	00000806 	br	4c988 <close+0xe4>
    }
    return 0;
   4c968:	e03ffd15 	stw	zero,-12(fp)
   4c96c:	00000606 	br	4c988 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4c970:	004c9a00 	call	4c9a0 <alt_get_errno>
   4c974:	1007883a 	mov	r3,r2
   4c978:	00801444 	movi	r2,81
   4c97c:	18800015 	stw	r2,0(r3)
    return -1;
   4c980:	00bfffc4 	movi	r2,-1
   4c984:	e0bffd15 	stw	r2,-12(fp)
   4c988:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   4c98c:	e037883a 	mov	sp,fp
   4c990:	dfc00117 	ldw	ra,4(sp)
   4c994:	df000017 	ldw	fp,0(sp)
   4c998:	dec00204 	addi	sp,sp,8
   4c99c:	f800283a 	ret

0004c9a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c9a0:	defffd04 	addi	sp,sp,-12
   4c9a4:	dfc00215 	stw	ra,8(sp)
   4c9a8:	df000115 	stw	fp,4(sp)
   4c9ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4c9b0:	00800174 	movhi	r2,5
   4c9b4:	10874304 	addi	r2,r2,7436
   4c9b8:	10800017 	ldw	r2,0(r2)
   4c9bc:	1005003a 	cmpeq	r2,r2,zero
   4c9c0:	1000061e 	bne	r2,zero,4c9dc <alt_get_errno+0x3c>
   4c9c4:	00800174 	movhi	r2,5
   4c9c8:	10874304 	addi	r2,r2,7436
   4c9cc:	10800017 	ldw	r2,0(r2)
   4c9d0:	103ee83a 	callr	r2
   4c9d4:	e0bfff15 	stw	r2,-4(fp)
   4c9d8:	00000306 	br	4c9e8 <alt_get_errno+0x48>
   4c9dc:	00800174 	movhi	r2,5
   4c9e0:	108e5904 	addi	r2,r2,14692
   4c9e4:	e0bfff15 	stw	r2,-4(fp)
   4c9e8:	e0bfff17 	ldw	r2,-4(fp)
}
   4c9ec:	e037883a 	mov	sp,fp
   4c9f0:	dfc00117 	ldw	ra,4(sp)
   4c9f4:	df000017 	ldw	fp,0(sp)
   4c9f8:	dec00204 	addi	sp,sp,8
   4c9fc:	f800283a 	ret

0004ca00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ca00:	defffc04 	addi	sp,sp,-16
   4ca04:	df000315 	stw	fp,12(sp)
   4ca08:	df000304 	addi	fp,sp,12
   4ca0c:	e13ffd15 	stw	r4,-12(fp)
   4ca10:	e17ffe15 	stw	r5,-8(fp)
   4ca14:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ca18:	e0bfff17 	ldw	r2,-4(fp)
}
   4ca1c:	e037883a 	mov	sp,fp
   4ca20:	df000017 	ldw	fp,0(sp)
   4ca24:	dec00104 	addi	sp,sp,4
   4ca28:	f800283a 	ret

0004ca2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4ca2c:	defff904 	addi	sp,sp,-28
   4ca30:	dfc00615 	stw	ra,24(sp)
   4ca34:	df000515 	stw	fp,20(sp)
   4ca38:	df000504 	addi	fp,sp,20
   4ca3c:	e13ffc15 	stw	r4,-16(fp)
   4ca40:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ca44:	e0bffc17 	ldw	r2,-16(fp)
   4ca48:	1004803a 	cmplt	r2,r2,zero
   4ca4c:	1000081e 	bne	r2,zero,4ca70 <fstat+0x44>
   4ca50:	e0bffc17 	ldw	r2,-16(fp)
   4ca54:	10800324 	muli	r2,r2,12
   4ca58:	1007883a 	mov	r3,r2
   4ca5c:	00800174 	movhi	r2,5
   4ca60:	10828204 	addi	r2,r2,2568
   4ca64:	1887883a 	add	r3,r3,r2
   4ca68:	e0ffff15 	stw	r3,-4(fp)
   4ca6c:	00000106 	br	4ca74 <fstat+0x48>
   4ca70:	e03fff15 	stw	zero,-4(fp)
   4ca74:	e0bfff17 	ldw	r2,-4(fp)
   4ca78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4ca7c:	e0bffb17 	ldw	r2,-20(fp)
   4ca80:	1005003a 	cmpeq	r2,r2,zero
   4ca84:	1000121e 	bne	r2,zero,4cad0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4ca88:	e0bffb17 	ldw	r2,-20(fp)
   4ca8c:	10800017 	ldw	r2,0(r2)
   4ca90:	10800817 	ldw	r2,32(r2)
   4ca94:	1005003a 	cmpeq	r2,r2,zero
   4ca98:	1000081e 	bne	r2,zero,4cabc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   4ca9c:	e0bffb17 	ldw	r2,-20(fp)
   4caa0:	10800017 	ldw	r2,0(r2)
   4caa4:	10800817 	ldw	r2,32(r2)
   4caa8:	e13ffb17 	ldw	r4,-20(fp)
   4caac:	e17ffd17 	ldw	r5,-12(fp)
   4cab0:	103ee83a 	callr	r2
   4cab4:	e0bffe15 	stw	r2,-8(fp)
   4cab8:	00000b06 	br	4cae8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4cabc:	e0fffd17 	ldw	r3,-12(fp)
   4cac0:	00880004 	movi	r2,8192
   4cac4:	18800115 	stw	r2,4(r3)
      return 0;
   4cac8:	e03ffe15 	stw	zero,-8(fp)
   4cacc:	00000606 	br	4cae8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4cad0:	004cb000 	call	4cb00 <alt_get_errno>
   4cad4:	1007883a 	mov	r3,r2
   4cad8:	00801444 	movi	r2,81
   4cadc:	18800015 	stw	r2,0(r3)
    return -1;
   4cae0:	00bfffc4 	movi	r2,-1
   4cae4:	e0bffe15 	stw	r2,-8(fp)
   4cae8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4caec:	e037883a 	mov	sp,fp
   4caf0:	dfc00117 	ldw	ra,4(sp)
   4caf4:	df000017 	ldw	fp,0(sp)
   4caf8:	dec00204 	addi	sp,sp,8
   4cafc:	f800283a 	ret

0004cb00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cb00:	defffd04 	addi	sp,sp,-12
   4cb04:	dfc00215 	stw	ra,8(sp)
   4cb08:	df000115 	stw	fp,4(sp)
   4cb0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4cb10:	00800174 	movhi	r2,5
   4cb14:	10874304 	addi	r2,r2,7436
   4cb18:	10800017 	ldw	r2,0(r2)
   4cb1c:	1005003a 	cmpeq	r2,r2,zero
   4cb20:	1000061e 	bne	r2,zero,4cb3c <alt_get_errno+0x3c>
   4cb24:	00800174 	movhi	r2,5
   4cb28:	10874304 	addi	r2,r2,7436
   4cb2c:	10800017 	ldw	r2,0(r2)
   4cb30:	103ee83a 	callr	r2
   4cb34:	e0bfff15 	stw	r2,-4(fp)
   4cb38:	00000306 	br	4cb48 <alt_get_errno+0x48>
   4cb3c:	00800174 	movhi	r2,5
   4cb40:	108e5904 	addi	r2,r2,14692
   4cb44:	e0bfff15 	stw	r2,-4(fp)
   4cb48:	e0bfff17 	ldw	r2,-4(fp)
}
   4cb4c:	e037883a 	mov	sp,fp
   4cb50:	dfc00117 	ldw	ra,4(sp)
   4cb54:	df000017 	ldw	fp,0(sp)
   4cb58:	dec00204 	addi	sp,sp,8
   4cb5c:	f800283a 	ret

0004cb60 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   4cb60:	deffef04 	addi	sp,sp,-68
   4cb64:	df001015 	stw	fp,64(sp)
   4cb68:	df001004 	addi	fp,sp,64
   4cb6c:	e13ffc15 	stw	r4,-16(fp)
   4cb70:	e17ffd15 	stw	r5,-12(fp)
   4cb74:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   4cb78:	00bffa84 	movi	r2,-22
   4cb7c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4cb80:	e0bffc17 	ldw	r2,-16(fp)
   4cb84:	10800828 	cmpgeui	r2,r2,32
   4cb88:	1000601e 	bne	r2,zero,4cd0c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cb8c:	0005303a 	rdctl	r2,status
   4cb90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cb94:	e0fff917 	ldw	r3,-28(fp)
   4cb98:	00bfff84 	movi	r2,-2
   4cb9c:	1884703a 	and	r2,r3,r2
   4cba0:	1001703a 	wrctl	status,r2
  
  return context;
   4cba4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   4cba8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   4cbac:	e0bffc17 	ldw	r2,-16(fp)
   4cbb0:	00c00174 	movhi	r3,5
   4cbb4:	18d3fb04 	addi	r3,r3,20460
   4cbb8:	100490fa 	slli	r2,r2,3
   4cbbc:	10c7883a 	add	r3,r2,r3
   4cbc0:	e0bffe17 	ldw	r2,-8(fp)
   4cbc4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   4cbc8:	e0bffc17 	ldw	r2,-16(fp)
   4cbcc:	00c00174 	movhi	r3,5
   4cbd0:	18d3fb04 	addi	r3,r3,20460
   4cbd4:	100490fa 	slli	r2,r2,3
   4cbd8:	10c5883a 	add	r2,r2,r3
   4cbdc:	10c00104 	addi	r3,r2,4
   4cbe0:	e0bffd17 	ldw	r2,-12(fp)
   4cbe4:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   4cbe8:	e0bffe17 	ldw	r2,-8(fp)
   4cbec:	1005003a 	cmpeq	r2,r2,zero
   4cbf0:	1000201e 	bne	r2,zero,4cc74 <alt_irq_register+0x114>
   4cbf4:	e0bffc17 	ldw	r2,-16(fp)
   4cbf8:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cbfc:	0005303a 	rdctl	r2,status
   4cc00:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cc04:	e0fff617 	ldw	r3,-40(fp)
   4cc08:	00bfff84 	movi	r2,-2
   4cc0c:	1884703a 	and	r2,r3,r2
   4cc10:	1001703a 	wrctl	status,r2
  
  return context;
   4cc14:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4cc18:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   4cc1c:	e0fff717 	ldw	r3,-36(fp)
   4cc20:	00800044 	movi	r2,1
   4cc24:	10c4983a 	sll	r2,r2,r3
   4cc28:	1007883a 	mov	r3,r2
   4cc2c:	00800174 	movhi	r2,5
   4cc30:	108e5a04 	addi	r2,r2,14696
   4cc34:	10800017 	ldw	r2,0(r2)
   4cc38:	1886b03a 	or	r3,r3,r2
   4cc3c:	00800174 	movhi	r2,5
   4cc40:	108e5a04 	addi	r2,r2,14696
   4cc44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4cc48:	00800174 	movhi	r2,5
   4cc4c:	108e5a04 	addi	r2,r2,14696
   4cc50:	10800017 	ldw	r2,0(r2)
   4cc54:	100170fa 	wrctl	ienable,r2
   4cc58:	e0bff817 	ldw	r2,-32(fp)
   4cc5c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cc60:	e0bff517 	ldw	r2,-44(fp)
   4cc64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4cc68:	0005883a 	mov	r2,zero
   4cc6c:	e0bfff15 	stw	r2,-4(fp)
   4cc70:	00002006 	br	4ccf4 <alt_irq_register+0x194>
   4cc74:	e0bffc17 	ldw	r2,-16(fp)
   4cc78:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cc7c:	0005303a 	rdctl	r2,status
   4cc80:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cc84:	e0fff217 	ldw	r3,-56(fp)
   4cc88:	00bfff84 	movi	r2,-2
   4cc8c:	1884703a 	and	r2,r3,r2
   4cc90:	1001703a 	wrctl	status,r2
  
  return context;
   4cc94:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4cc98:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   4cc9c:	e0fff317 	ldw	r3,-52(fp)
   4cca0:	00800044 	movi	r2,1
   4cca4:	10c4983a 	sll	r2,r2,r3
   4cca8:	0084303a 	nor	r2,zero,r2
   4ccac:	1007883a 	mov	r3,r2
   4ccb0:	00800174 	movhi	r2,5
   4ccb4:	108e5a04 	addi	r2,r2,14696
   4ccb8:	10800017 	ldw	r2,0(r2)
   4ccbc:	1886703a 	and	r3,r3,r2
   4ccc0:	00800174 	movhi	r2,5
   4ccc4:	108e5a04 	addi	r2,r2,14696
   4ccc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4cccc:	00800174 	movhi	r2,5
   4ccd0:	108e5a04 	addi	r2,r2,14696
   4ccd4:	10800017 	ldw	r2,0(r2)
   4ccd8:	100170fa 	wrctl	ienable,r2
   4ccdc:	e0bff417 	ldw	r2,-48(fp)
   4cce0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cce4:	e0bff117 	ldw	r2,-60(fp)
   4cce8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4ccec:	0005883a 	mov	r2,zero
   4ccf0:	e0bfff15 	stw	r2,-4(fp)
   4ccf4:	e0bfff17 	ldw	r2,-4(fp)
   4ccf8:	e0bffb15 	stw	r2,-20(fp)
   4ccfc:	e0bffa17 	ldw	r2,-24(fp)
   4cd00:	e0bff015 	stw	r2,-64(fp)
   4cd04:	e0bff017 	ldw	r2,-64(fp)
   4cd08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   4cd0c:	e0bffb17 	ldw	r2,-20(fp)
}
   4cd10:	e037883a 	mov	sp,fp
   4cd14:	df000017 	ldw	fp,0(sp)
   4cd18:	dec00104 	addi	sp,sp,4
   4cd1c:	f800283a 	ret

0004cd20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4cd20:	deffeb04 	addi	sp,sp,-84
   4cd24:	dfc01415 	stw	ra,80(sp)
   4cd28:	df001315 	stw	fp,76(sp)
   4cd2c:	df001304 	addi	fp,sp,76
   4cd30:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4cd34:	e0bffd17 	ldw	r2,-12(fp)
   4cd38:	1004803a 	cmplt	r2,r2,zero
   4cd3c:	1000081e 	bne	r2,zero,4cd60 <isatty+0x40>
   4cd40:	e0bffd17 	ldw	r2,-12(fp)
   4cd44:	10800324 	muli	r2,r2,12
   4cd48:	1007883a 	mov	r3,r2
   4cd4c:	00800174 	movhi	r2,5
   4cd50:	10828204 	addi	r2,r2,2568
   4cd54:	1887883a 	add	r3,r3,r2
   4cd58:	e0ffff15 	stw	r3,-4(fp)
   4cd5c:	00000106 	br	4cd64 <isatty+0x44>
   4cd60:	e03fff15 	stw	zero,-4(fp)
   4cd64:	e0bfff17 	ldw	r2,-4(fp)
   4cd68:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   4cd6c:	e0bfed17 	ldw	r2,-76(fp)
   4cd70:	1005003a 	cmpeq	r2,r2,zero
   4cd74:	10000f1e 	bne	r2,zero,4cdb4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4cd78:	e0bfed17 	ldw	r2,-76(fp)
   4cd7c:	10800017 	ldw	r2,0(r2)
   4cd80:	10800817 	ldw	r2,32(r2)
   4cd84:	1004c03a 	cmpne	r2,r2,zero
   4cd88:	1000031e 	bne	r2,zero,4cd98 <isatty+0x78>
    {
      return 1;
   4cd8c:	00800044 	movi	r2,1
   4cd90:	e0bffe15 	stw	r2,-8(fp)
   4cd94:	00000c06 	br	4cdc8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4cd98:	e17fee04 	addi	r5,fp,-72
   4cd9c:	e13ffd17 	ldw	r4,-12(fp)
   4cda0:	004ca2c0 	call	4ca2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4cda4:	e0bfef17 	ldw	r2,-68(fp)
   4cda8:	10880020 	cmpeqi	r2,r2,8192
   4cdac:	e0bffe15 	stw	r2,-8(fp)
   4cdb0:	00000506 	br	4cdc8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4cdb4:	004cde00 	call	4cde0 <alt_get_errno>
   4cdb8:	1007883a 	mov	r3,r2
   4cdbc:	00801444 	movi	r2,81
   4cdc0:	18800015 	stw	r2,0(r3)
    return 0;
   4cdc4:	e03ffe15 	stw	zero,-8(fp)
   4cdc8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4cdcc:	e037883a 	mov	sp,fp
   4cdd0:	dfc00117 	ldw	ra,4(sp)
   4cdd4:	df000017 	ldw	fp,0(sp)
   4cdd8:	dec00204 	addi	sp,sp,8
   4cddc:	f800283a 	ret

0004cde0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cde0:	defffd04 	addi	sp,sp,-12
   4cde4:	dfc00215 	stw	ra,8(sp)
   4cde8:	df000115 	stw	fp,4(sp)
   4cdec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4cdf0:	00800174 	movhi	r2,5
   4cdf4:	10874304 	addi	r2,r2,7436
   4cdf8:	10800017 	ldw	r2,0(r2)
   4cdfc:	1005003a 	cmpeq	r2,r2,zero
   4ce00:	1000061e 	bne	r2,zero,4ce1c <alt_get_errno+0x3c>
   4ce04:	00800174 	movhi	r2,5
   4ce08:	10874304 	addi	r2,r2,7436
   4ce0c:	10800017 	ldw	r2,0(r2)
   4ce10:	103ee83a 	callr	r2
   4ce14:	e0bfff15 	stw	r2,-4(fp)
   4ce18:	00000306 	br	4ce28 <alt_get_errno+0x48>
   4ce1c:	00800174 	movhi	r2,5
   4ce20:	108e5904 	addi	r2,r2,14692
   4ce24:	e0bfff15 	stw	r2,-4(fp)
   4ce28:	e0bfff17 	ldw	r2,-4(fp)
}
   4ce2c:	e037883a 	mov	sp,fp
   4ce30:	dfc00117 	ldw	ra,4(sp)
   4ce34:	df000017 	ldw	fp,0(sp)
   4ce38:	dec00204 	addi	sp,sp,8
   4ce3c:	f800283a 	ret

0004ce40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4ce40:	defffe04 	addi	sp,sp,-8
   4ce44:	dfc00115 	stw	ra,4(sp)
   4ce48:	df000015 	stw	fp,0(sp)
   4ce4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4ce50:	01000174 	movhi	r4,5
   4ce54:	21074804 	addi	r4,r4,7456
   4ce58:	01400174 	movhi	r5,5
   4ce5c:	29405304 	addi	r5,r5,332
   4ce60:	01800174 	movhi	r6,5
   4ce64:	31874804 	addi	r6,r6,7456
   4ce68:	004cec00 	call	4cec0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4ce6c:	01000134 	movhi	r4,4
   4ce70:	21000804 	addi	r4,r4,32
   4ce74:	01400134 	movhi	r5,4
   4ce78:	29400804 	addi	r5,r5,32
   4ce7c:	01800134 	movhi	r6,4
   4ce80:	31806d04 	addi	r6,r6,436
   4ce84:	004cec00 	call	4cec0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4ce88:	01000174 	movhi	r4,5
   4ce8c:	213f6b04 	addi	r4,r4,-596
   4ce90:	01400174 	movhi	r5,5
   4ce94:	297f6b04 	addi	r5,r5,-596
   4ce98:	01800174 	movhi	r6,5
   4ce9c:	31805304 	addi	r6,r6,332
   4cea0:	004cec00 	call	4cec0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4cea4:	004ee880 	call	4ee88 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4cea8:	004f3140 	call	4f314 <alt_icache_flush_all>
}
   4ceac:	e037883a 	mov	sp,fp
   4ceb0:	dfc00117 	ldw	ra,4(sp)
   4ceb4:	df000017 	ldw	fp,0(sp)
   4ceb8:	dec00204 	addi	sp,sp,8
   4cebc:	f800283a 	ret

0004cec0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4cec0:	defffc04 	addi	sp,sp,-16
   4cec4:	df000315 	stw	fp,12(sp)
   4cec8:	df000304 	addi	fp,sp,12
   4cecc:	e13ffd15 	stw	r4,-12(fp)
   4ced0:	e17ffe15 	stw	r5,-8(fp)
   4ced4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4ced8:	e0fffe17 	ldw	r3,-8(fp)
   4cedc:	e0bffd17 	ldw	r2,-12(fp)
   4cee0:	18800e26 	beq	r3,r2,4cf1c <alt_load_section+0x5c>
  {
    while( to != end )
   4cee4:	00000a06 	br	4cf10 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4cee8:	e0bffd17 	ldw	r2,-12(fp)
   4ceec:	10c00017 	ldw	r3,0(r2)
   4cef0:	e0bffe17 	ldw	r2,-8(fp)
   4cef4:	10c00015 	stw	r3,0(r2)
   4cef8:	e0bffe17 	ldw	r2,-8(fp)
   4cefc:	10800104 	addi	r2,r2,4
   4cf00:	e0bffe15 	stw	r2,-8(fp)
   4cf04:	e0bffd17 	ldw	r2,-12(fp)
   4cf08:	10800104 	addi	r2,r2,4
   4cf0c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4cf10:	e0fffe17 	ldw	r3,-8(fp)
   4cf14:	e0bfff17 	ldw	r2,-4(fp)
   4cf18:	18bff31e 	bne	r3,r2,4cee8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4cf1c:	e037883a 	mov	sp,fp
   4cf20:	df000017 	ldw	fp,0(sp)
   4cf24:	dec00104 	addi	sp,sp,4
   4cf28:	f800283a 	ret

0004cf2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4cf2c:	defff804 	addi	sp,sp,-32
   4cf30:	dfc00715 	stw	ra,28(sp)
   4cf34:	df000615 	stw	fp,24(sp)
   4cf38:	df000604 	addi	fp,sp,24
   4cf3c:	e13ffc15 	stw	r4,-16(fp)
   4cf40:	e17ffd15 	stw	r5,-12(fp)
   4cf44:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4cf48:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4cf4c:	e0bffc17 	ldw	r2,-16(fp)
   4cf50:	1004803a 	cmplt	r2,r2,zero
   4cf54:	1000081e 	bne	r2,zero,4cf78 <lseek+0x4c>
   4cf58:	e0bffc17 	ldw	r2,-16(fp)
   4cf5c:	10800324 	muli	r2,r2,12
   4cf60:	1007883a 	mov	r3,r2
   4cf64:	00800174 	movhi	r2,5
   4cf68:	10828204 	addi	r2,r2,2568
   4cf6c:	1887883a 	add	r3,r3,r2
   4cf70:	e0ffff15 	stw	r3,-4(fp)
   4cf74:	00000106 	br	4cf7c <lseek+0x50>
   4cf78:	e03fff15 	stw	zero,-4(fp)
   4cf7c:	e0bfff17 	ldw	r2,-4(fp)
   4cf80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4cf84:	e0bffb17 	ldw	r2,-20(fp)
   4cf88:	1005003a 	cmpeq	r2,r2,zero
   4cf8c:	1000111e 	bne	r2,zero,4cfd4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4cf90:	e0bffb17 	ldw	r2,-20(fp)
   4cf94:	10800017 	ldw	r2,0(r2)
   4cf98:	10800717 	ldw	r2,28(r2)
   4cf9c:	1005003a 	cmpeq	r2,r2,zero
   4cfa0:	1000091e 	bne	r2,zero,4cfc8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4cfa4:	e0bffb17 	ldw	r2,-20(fp)
   4cfa8:	10800017 	ldw	r2,0(r2)
   4cfac:	10800717 	ldw	r2,28(r2)
   4cfb0:	e13ffb17 	ldw	r4,-20(fp)
   4cfb4:	e17ffd17 	ldw	r5,-12(fp)
   4cfb8:	e1bffe17 	ldw	r6,-8(fp)
   4cfbc:	103ee83a 	callr	r2
   4cfc0:	e0bffa15 	stw	r2,-24(fp)
   4cfc4:	00000506 	br	4cfdc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4cfc8:	00bfde84 	movi	r2,-134
   4cfcc:	e0bffa15 	stw	r2,-24(fp)
   4cfd0:	00000206 	br	4cfdc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4cfd4:	00bfebc4 	movi	r2,-81
   4cfd8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   4cfdc:	e0bffa17 	ldw	r2,-24(fp)
   4cfe0:	1004403a 	cmpge	r2,r2,zero
   4cfe4:	1000071e 	bne	r2,zero,4d004 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4cfe8:	004d01c0 	call	4d01c <alt_get_errno>
   4cfec:	1007883a 	mov	r3,r2
   4cff0:	e0bffa17 	ldw	r2,-24(fp)
   4cff4:	0085c83a 	sub	r2,zero,r2
   4cff8:	18800015 	stw	r2,0(r3)
    rc = -1;
   4cffc:	00bfffc4 	movi	r2,-1
   4d000:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   4d004:	e0bffa17 	ldw	r2,-24(fp)
}
   4d008:	e037883a 	mov	sp,fp
   4d00c:	dfc00117 	ldw	ra,4(sp)
   4d010:	df000017 	ldw	fp,0(sp)
   4d014:	dec00204 	addi	sp,sp,8
   4d018:	f800283a 	ret

0004d01c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d01c:	defffd04 	addi	sp,sp,-12
   4d020:	dfc00215 	stw	ra,8(sp)
   4d024:	df000115 	stw	fp,4(sp)
   4d028:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4d02c:	00800174 	movhi	r2,5
   4d030:	10874304 	addi	r2,r2,7436
   4d034:	10800017 	ldw	r2,0(r2)
   4d038:	1005003a 	cmpeq	r2,r2,zero
   4d03c:	1000061e 	bne	r2,zero,4d058 <alt_get_errno+0x3c>
   4d040:	00800174 	movhi	r2,5
   4d044:	10874304 	addi	r2,r2,7436
   4d048:	10800017 	ldw	r2,0(r2)
   4d04c:	103ee83a 	callr	r2
   4d050:	e0bfff15 	stw	r2,-4(fp)
   4d054:	00000306 	br	4d064 <alt_get_errno+0x48>
   4d058:	00800174 	movhi	r2,5
   4d05c:	108e5904 	addi	r2,r2,14692
   4d060:	e0bfff15 	stw	r2,-4(fp)
   4d064:	e0bfff17 	ldw	r2,-4(fp)
}
   4d068:	e037883a 	mov	sp,fp
   4d06c:	dfc00117 	ldw	ra,4(sp)
   4d070:	df000017 	ldw	fp,0(sp)
   4d074:	dec00204 	addi	sp,sp,8
   4d078:	f800283a 	ret

0004d07c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4d07c:	defffd04 	addi	sp,sp,-12
   4d080:	dfc00215 	stw	ra,8(sp)
   4d084:	df000115 	stw	fp,4(sp)
   4d088:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4d08c:	0009883a 	mov	r4,zero
   4d090:	004d8080 	call	4d808 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4d094:	004d83c0 	call	4d83c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4d098:	01000174 	movhi	r4,5
   4d09c:	21004804 	addi	r4,r4,288
   4d0a0:	01400174 	movhi	r5,5
   4d0a4:	29404804 	addi	r5,r5,288
   4d0a8:	01800174 	movhi	r6,5
   4d0ac:	31804804 	addi	r6,r6,288
   4d0b0:	004f6d40 	call	4f6d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4d0b4:	004efe00 	call	4efe0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4d0b8:	01000174 	movhi	r4,5
   4d0bc:	213c1104 	addi	r4,r4,-4028
   4d0c0:	004f9a00 	call	4f9a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4d0c4:	d1273017 	ldw	r4,-25408(gp)
   4d0c8:	d1673117 	ldw	r5,-25404(gp)
   4d0cc:	d1a73217 	ldw	r6,-25400(gp)
   4d0d0:	00422fc0 	call	422fc <main>
   4d0d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4d0d8:	01000044 	movi	r4,1
   4d0dc:	004c8a40 	call	4c8a4 <close>
  exit (result);
   4d0e0:	e13fff17 	ldw	r4,-4(fp)
   4d0e4:	004f9b40 	call	4f9b4 <exit>

0004d0e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4d0e8:	defffe04 	addi	sp,sp,-8
   4d0ec:	df000115 	stw	fp,4(sp)
   4d0f0:	df000104 	addi	fp,sp,4
   4d0f4:	e13fff15 	stw	r4,-4(fp)
}
   4d0f8:	e037883a 	mov	sp,fp
   4d0fc:	df000017 	ldw	fp,0(sp)
   4d100:	dec00104 	addi	sp,sp,4
   4d104:	f800283a 	ret

0004d108 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4d108:	defffe04 	addi	sp,sp,-8
   4d10c:	df000115 	stw	fp,4(sp)
   4d110:	df000104 	addi	fp,sp,4
   4d114:	e13fff15 	stw	r4,-4(fp)
}
   4d118:	e037883a 	mov	sp,fp
   4d11c:	df000017 	ldw	fp,0(sp)
   4d120:	dec00104 	addi	sp,sp,4
   4d124:	f800283a 	ret

0004d128 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4d128:	defffc04 	addi	sp,sp,-16
   4d12c:	df000315 	stw	fp,12(sp)
   4d130:	df000304 	addi	fp,sp,12
   4d134:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4d138:	e0bffe17 	ldw	r2,-8(fp)
   4d13c:	10800217 	ldw	r2,8(r2)
   4d140:	10d00034 	orhi	r3,r2,16384
   4d144:	e0bffe17 	ldw	r2,-8(fp)
   4d148:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4d14c:	e03ffd15 	stw	zero,-12(fp)
   4d150:	00002006 	br	4d1d4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4d154:	e0bffd17 	ldw	r2,-12(fp)
   4d158:	00c00174 	movhi	r3,5
   4d15c:	18c28204 	addi	r3,r3,2568
   4d160:	10800324 	muli	r2,r2,12
   4d164:	10c5883a 	add	r2,r2,r3
   4d168:	10c00017 	ldw	r3,0(r2)
   4d16c:	e0bffe17 	ldw	r2,-8(fp)
   4d170:	10800017 	ldw	r2,0(r2)
   4d174:	1880141e 	bne	r3,r2,4d1c8 <alt_file_locked+0xa0>
   4d178:	e0bffd17 	ldw	r2,-12(fp)
   4d17c:	00c00174 	movhi	r3,5
   4d180:	18c28204 	addi	r3,r3,2568
   4d184:	10800324 	muli	r2,r2,12
   4d188:	10c5883a 	add	r2,r2,r3
   4d18c:	10800204 	addi	r2,r2,8
   4d190:	10800017 	ldw	r2,0(r2)
   4d194:	1004403a 	cmpge	r2,r2,zero
   4d198:	10000b1e 	bne	r2,zero,4d1c8 <alt_file_locked+0xa0>
   4d19c:	e0bffd17 	ldw	r2,-12(fp)
   4d1a0:	10800324 	muli	r2,r2,12
   4d1a4:	1007883a 	mov	r3,r2
   4d1a8:	00800174 	movhi	r2,5
   4d1ac:	10828204 	addi	r2,r2,2568
   4d1b0:	1887883a 	add	r3,r3,r2
   4d1b4:	e0bffe17 	ldw	r2,-8(fp)
   4d1b8:	18800326 	beq	r3,r2,4d1c8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4d1bc:	00bffcc4 	movi	r2,-13
   4d1c0:	e0bfff15 	stw	r2,-4(fp)
   4d1c4:	00000a06 	br	4d1f0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4d1c8:	e0bffd17 	ldw	r2,-12(fp)
   4d1cc:	10800044 	addi	r2,r2,1
   4d1d0:	e0bffd15 	stw	r2,-12(fp)
   4d1d4:	00800174 	movhi	r2,5
   4d1d8:	10874204 	addi	r2,r2,7432
   4d1dc:	10800017 	ldw	r2,0(r2)
   4d1e0:	1007883a 	mov	r3,r2
   4d1e4:	e0bffd17 	ldw	r2,-12(fp)
   4d1e8:	18bfda2e 	bgeu	r3,r2,4d154 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4d1ec:	e03fff15 	stw	zero,-4(fp)
   4d1f0:	e0bfff17 	ldw	r2,-4(fp)
}
   4d1f4:	e037883a 	mov	sp,fp
   4d1f8:	df000017 	ldw	fp,0(sp)
   4d1fc:	dec00104 	addi	sp,sp,4
   4d200:	f800283a 	ret

0004d204 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4d204:	defff404 	addi	sp,sp,-48
   4d208:	dfc00b15 	stw	ra,44(sp)
   4d20c:	df000a15 	stw	fp,40(sp)
   4d210:	df000a04 	addi	fp,sp,40
   4d214:	e13ffb15 	stw	r4,-20(fp)
   4d218:	e17ffc15 	stw	r5,-16(fp)
   4d21c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4d220:	00bfffc4 	movi	r2,-1
   4d224:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   4d228:	00bffb44 	movi	r2,-19
   4d22c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   4d230:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4d234:	e13ffb17 	ldw	r4,-20(fp)
   4d238:	01400174 	movhi	r5,5
   4d23c:	29474004 	addi	r5,r5,7424
   4d240:	004f0a80 	call	4f0a8 <alt_find_dev>
   4d244:	e0bffa15 	stw	r2,-24(fp)
   4d248:	e0bffa17 	ldw	r2,-24(fp)
   4d24c:	1004c03a 	cmpne	r2,r2,zero
   4d250:	1000051e 	bne	r2,zero,4d268 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4d254:	e13ffb17 	ldw	r4,-20(fp)
   4d258:	004f13c0 	call	4f13c <alt_find_file>
   4d25c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   4d260:	00800044 	movi	r2,1
   4d264:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4d268:	e0bffa17 	ldw	r2,-24(fp)
   4d26c:	1005003a 	cmpeq	r2,r2,zero
   4d270:	1000301e 	bne	r2,zero,4d334 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4d274:	e13ffa17 	ldw	r4,-24(fp)
   4d278:	004f25c0 	call	4f25c <alt_get_fd>
   4d27c:	e0bff815 	stw	r2,-32(fp)
   4d280:	e0bff817 	ldw	r2,-32(fp)
   4d284:	1004403a 	cmpge	r2,r2,zero
   4d288:	1000031e 	bne	r2,zero,4d298 <open+0x94>
    {
      status = index;
   4d28c:	e0bff817 	ldw	r2,-32(fp)
   4d290:	e0bff715 	stw	r2,-36(fp)
   4d294:	00002906 	br	4d33c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   4d298:	e0bff817 	ldw	r2,-32(fp)
   4d29c:	10800324 	muli	r2,r2,12
   4d2a0:	1007883a 	mov	r3,r2
   4d2a4:	00800174 	movhi	r2,5
   4d2a8:	10828204 	addi	r2,r2,2568
   4d2ac:	1885883a 	add	r2,r3,r2
   4d2b0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4d2b4:	e0fffc17 	ldw	r3,-16(fp)
   4d2b8:	00900034 	movhi	r2,16384
   4d2bc:	10bfffc4 	addi	r2,r2,-1
   4d2c0:	1886703a 	and	r3,r3,r2
   4d2c4:	e0bff917 	ldw	r2,-28(fp)
   4d2c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4d2cc:	e0bff617 	ldw	r2,-40(fp)
   4d2d0:	1004c03a 	cmpne	r2,r2,zero
   4d2d4:	1000061e 	bne	r2,zero,4d2f0 <open+0xec>
   4d2d8:	e13ff917 	ldw	r4,-28(fp)
   4d2dc:	004d1280 	call	4d128 <alt_file_locked>
   4d2e0:	e0bff715 	stw	r2,-36(fp)
   4d2e4:	e0bff717 	ldw	r2,-36(fp)
   4d2e8:	1004803a 	cmplt	r2,r2,zero
   4d2ec:	1000131e 	bne	r2,zero,4d33c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4d2f0:	e0bffa17 	ldw	r2,-24(fp)
   4d2f4:	10800317 	ldw	r2,12(r2)
   4d2f8:	1005003a 	cmpeq	r2,r2,zero
   4d2fc:	1000091e 	bne	r2,zero,4d324 <open+0x120>
   4d300:	e0bffa17 	ldw	r2,-24(fp)
   4d304:	10800317 	ldw	r2,12(r2)
   4d308:	e13ff917 	ldw	r4,-28(fp)
   4d30c:	e17ffb17 	ldw	r5,-20(fp)
   4d310:	e1bffc17 	ldw	r6,-16(fp)
   4d314:	e1fffd17 	ldw	r7,-12(fp)
   4d318:	103ee83a 	callr	r2
   4d31c:	e0bfff15 	stw	r2,-4(fp)
   4d320:	00000106 	br	4d328 <open+0x124>
   4d324:	e03fff15 	stw	zero,-4(fp)
   4d328:	e0bfff17 	ldw	r2,-4(fp)
   4d32c:	e0bff715 	stw	r2,-36(fp)
   4d330:	00000206 	br	4d33c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4d334:	00bffb44 	movi	r2,-19
   4d338:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4d33c:	e0bff717 	ldw	r2,-36(fp)
   4d340:	1004403a 	cmpge	r2,r2,zero
   4d344:	1000091e 	bne	r2,zero,4d36c <open+0x168>
  {
    alt_release_fd (index);  
   4d348:	e13ff817 	ldw	r4,-32(fp)
   4d34c:	004d56c0 	call	4d56c <alt_release_fd>
    ALT_ERRNO = -status;
   4d350:	004d38c0 	call	4d38c <alt_get_errno>
   4d354:	e0fff717 	ldw	r3,-36(fp)
   4d358:	00c7c83a 	sub	r3,zero,r3
   4d35c:	10c00015 	stw	r3,0(r2)
    return -1;
   4d360:	00bfffc4 	movi	r2,-1
   4d364:	e0bffe15 	stw	r2,-8(fp)
   4d368:	00000206 	br	4d374 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   4d36c:	e0bff817 	ldw	r2,-32(fp)
   4d370:	e0bffe15 	stw	r2,-8(fp)
   4d374:	e0bffe17 	ldw	r2,-8(fp)
}
   4d378:	e037883a 	mov	sp,fp
   4d37c:	dfc00117 	ldw	ra,4(sp)
   4d380:	df000017 	ldw	fp,0(sp)
   4d384:	dec00204 	addi	sp,sp,8
   4d388:	f800283a 	ret

0004d38c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d38c:	defffd04 	addi	sp,sp,-12
   4d390:	dfc00215 	stw	ra,8(sp)
   4d394:	df000115 	stw	fp,4(sp)
   4d398:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4d39c:	00800174 	movhi	r2,5
   4d3a0:	10874304 	addi	r2,r2,7436
   4d3a4:	10800017 	ldw	r2,0(r2)
   4d3a8:	1005003a 	cmpeq	r2,r2,zero
   4d3ac:	1000061e 	bne	r2,zero,4d3c8 <alt_get_errno+0x3c>
   4d3b0:	00800174 	movhi	r2,5
   4d3b4:	10874304 	addi	r2,r2,7436
   4d3b8:	10800017 	ldw	r2,0(r2)
   4d3bc:	103ee83a 	callr	r2
   4d3c0:	e0bfff15 	stw	r2,-4(fp)
   4d3c4:	00000306 	br	4d3d4 <alt_get_errno+0x48>
   4d3c8:	00800174 	movhi	r2,5
   4d3cc:	108e5904 	addi	r2,r2,14692
   4d3d0:	e0bfff15 	stw	r2,-4(fp)
   4d3d4:	e0bfff17 	ldw	r2,-4(fp)
}
   4d3d8:	e037883a 	mov	sp,fp
   4d3dc:	dfc00117 	ldw	ra,4(sp)
   4d3e0:	df000017 	ldw	fp,0(sp)
   4d3e4:	dec00204 	addi	sp,sp,8
   4d3e8:	f800283a 	ret

0004d3ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4d3ec:	defff704 	addi	sp,sp,-36
   4d3f0:	dfc00815 	stw	ra,32(sp)
   4d3f4:	df000715 	stw	fp,28(sp)
   4d3f8:	df000704 	addi	fp,sp,28
   4d3fc:	e13ffb15 	stw	r4,-20(fp)
   4d400:	e17ffc15 	stw	r5,-16(fp)
   4d404:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d408:	e0bffb17 	ldw	r2,-20(fp)
   4d40c:	1004803a 	cmplt	r2,r2,zero
   4d410:	1000081e 	bne	r2,zero,4d434 <read+0x48>
   4d414:	e0bffb17 	ldw	r2,-20(fp)
   4d418:	10800324 	muli	r2,r2,12
   4d41c:	1007883a 	mov	r3,r2
   4d420:	00800174 	movhi	r2,5
   4d424:	10828204 	addi	r2,r2,2568
   4d428:	1887883a 	add	r3,r3,r2
   4d42c:	e0ffff15 	stw	r3,-4(fp)
   4d430:	00000106 	br	4d438 <read+0x4c>
   4d434:	e03fff15 	stw	zero,-4(fp)
   4d438:	e0bfff17 	ldw	r2,-4(fp)
   4d43c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4d440:	e0bffa17 	ldw	r2,-24(fp)
   4d444:	1005003a 	cmpeq	r2,r2,zero
   4d448:	1000241e 	bne	r2,zero,4d4dc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4d44c:	e0bffa17 	ldw	r2,-24(fp)
   4d450:	10800217 	ldw	r2,8(r2)
   4d454:	108000cc 	andi	r2,r2,3
   4d458:	10800060 	cmpeqi	r2,r2,1
   4d45c:	10001a1e 	bne	r2,zero,4d4c8 <read+0xdc>
   4d460:	e0bffa17 	ldw	r2,-24(fp)
   4d464:	10800017 	ldw	r2,0(r2)
   4d468:	10800517 	ldw	r2,20(r2)
   4d46c:	1005003a 	cmpeq	r2,r2,zero
   4d470:	1000151e 	bne	r2,zero,4d4c8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4d474:	e0bffa17 	ldw	r2,-24(fp)
   4d478:	10800017 	ldw	r2,0(r2)
   4d47c:	10800517 	ldw	r2,20(r2)
   4d480:	e17ffc17 	ldw	r5,-16(fp)
   4d484:	e1bffd17 	ldw	r6,-12(fp)
   4d488:	e13ffa17 	ldw	r4,-24(fp)
   4d48c:	103ee83a 	callr	r2
   4d490:	e0bff915 	stw	r2,-28(fp)
   4d494:	e0bff917 	ldw	r2,-28(fp)
   4d498:	1004403a 	cmpge	r2,r2,zero
   4d49c:	1000071e 	bne	r2,zero,4d4bc <read+0xd0>
        {
          ALT_ERRNO = -rval;
   4d4a0:	004d50c0 	call	4d50c <alt_get_errno>
   4d4a4:	e0fff917 	ldw	r3,-28(fp)
   4d4a8:	00c7c83a 	sub	r3,zero,r3
   4d4ac:	10c00015 	stw	r3,0(r2)
          return -1;
   4d4b0:	00bfffc4 	movi	r2,-1
   4d4b4:	e0bffe15 	stw	r2,-8(fp)
   4d4b8:	00000e06 	br	4d4f4 <read+0x108>
        }
        return rval;
   4d4bc:	e0bff917 	ldw	r2,-28(fp)
   4d4c0:	e0bffe15 	stw	r2,-8(fp)
   4d4c4:	00000b06 	br	4d4f4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4d4c8:	004d50c0 	call	4d50c <alt_get_errno>
   4d4cc:	1007883a 	mov	r3,r2
   4d4d0:	00800344 	movi	r2,13
   4d4d4:	18800015 	stw	r2,0(r3)
   4d4d8:	00000406 	br	4d4ec <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4d4dc:	004d50c0 	call	4d50c <alt_get_errno>
   4d4e0:	1007883a 	mov	r3,r2
   4d4e4:	00801444 	movi	r2,81
   4d4e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4d4ec:	00bfffc4 	movi	r2,-1
   4d4f0:	e0bffe15 	stw	r2,-8(fp)
   4d4f4:	e0bffe17 	ldw	r2,-8(fp)
}
   4d4f8:	e037883a 	mov	sp,fp
   4d4fc:	dfc00117 	ldw	ra,4(sp)
   4d500:	df000017 	ldw	fp,0(sp)
   4d504:	dec00204 	addi	sp,sp,8
   4d508:	f800283a 	ret

0004d50c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d50c:	defffd04 	addi	sp,sp,-12
   4d510:	dfc00215 	stw	ra,8(sp)
   4d514:	df000115 	stw	fp,4(sp)
   4d518:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4d51c:	00800174 	movhi	r2,5
   4d520:	10874304 	addi	r2,r2,7436
   4d524:	10800017 	ldw	r2,0(r2)
   4d528:	1005003a 	cmpeq	r2,r2,zero
   4d52c:	1000061e 	bne	r2,zero,4d548 <alt_get_errno+0x3c>
   4d530:	00800174 	movhi	r2,5
   4d534:	10874304 	addi	r2,r2,7436
   4d538:	10800017 	ldw	r2,0(r2)
   4d53c:	103ee83a 	callr	r2
   4d540:	e0bfff15 	stw	r2,-4(fp)
   4d544:	00000306 	br	4d554 <alt_get_errno+0x48>
   4d548:	00800174 	movhi	r2,5
   4d54c:	108e5904 	addi	r2,r2,14692
   4d550:	e0bfff15 	stw	r2,-4(fp)
   4d554:	e0bfff17 	ldw	r2,-4(fp)
}
   4d558:	e037883a 	mov	sp,fp
   4d55c:	dfc00117 	ldw	ra,4(sp)
   4d560:	df000017 	ldw	fp,0(sp)
   4d564:	dec00204 	addi	sp,sp,8
   4d568:	f800283a 	ret

0004d56c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4d56c:	defffe04 	addi	sp,sp,-8
   4d570:	df000115 	stw	fp,4(sp)
   4d574:	df000104 	addi	fp,sp,4
   4d578:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4d57c:	e0bfff17 	ldw	r2,-4(fp)
   4d580:	108000d0 	cmplti	r2,r2,3
   4d584:	10000d1e 	bne	r2,zero,4d5bc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4d588:	e0bfff17 	ldw	r2,-4(fp)
   4d58c:	00c00174 	movhi	r3,5
   4d590:	18c28204 	addi	r3,r3,2568
   4d594:	10800324 	muli	r2,r2,12
   4d598:	10c5883a 	add	r2,r2,r3
   4d59c:	10800204 	addi	r2,r2,8
   4d5a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4d5a4:	e0bfff17 	ldw	r2,-4(fp)
   4d5a8:	00c00174 	movhi	r3,5
   4d5ac:	18c28204 	addi	r3,r3,2568
   4d5b0:	10800324 	muli	r2,r2,12
   4d5b4:	10c5883a 	add	r2,r2,r3
   4d5b8:	10000015 	stw	zero,0(r2)
  }
}
   4d5bc:	e037883a 	mov	sp,fp
   4d5c0:	df000017 	ldw	fp,0(sp)
   4d5c4:	dec00104 	addi	sp,sp,4
   4d5c8:	f800283a 	ret

0004d5cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4d5cc:	defff804 	addi	sp,sp,-32
   4d5d0:	df000715 	stw	fp,28(sp)
   4d5d4:	df000704 	addi	fp,sp,28
   4d5d8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d5dc:	0005303a 	rdctl	r2,status
   4d5e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d5e4:	e0fffb17 	ldw	r3,-20(fp)
   4d5e8:	00bfff84 	movi	r2,-2
   4d5ec:	1884703a 	and	r2,r3,r2
   4d5f0:	1001703a 	wrctl	status,r2
  
  return context;
   4d5f4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4d5f8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4d5fc:	d0a01a17 	ldw	r2,-32664(gp)
   4d600:	10c000c4 	addi	r3,r2,3
   4d604:	00bfff04 	movi	r2,-4
   4d608:	1884703a 	and	r2,r3,r2
   4d60c:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4d610:	d0e01a17 	ldw	r3,-32664(gp)
   4d614:	e0bffe17 	ldw	r2,-8(fp)
   4d618:	1887883a 	add	r3,r3,r2
   4d61c:	008001f4 	movhi	r2,7
   4d620:	10880004 	addi	r2,r2,8192
   4d624:	10c0072e 	bgeu	r2,r3,4d644 <sbrk+0x78>
   4d628:	e0bffd17 	ldw	r2,-12(fp)
   4d62c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d630:	e0bffa17 	ldw	r2,-24(fp)
   4d634:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4d638:	00bfffc4 	movi	r2,-1
   4d63c:	e0bfff15 	stw	r2,-4(fp)
   4d640:	00000c06 	br	4d674 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4d644:	d0a01a17 	ldw	r2,-32664(gp)
   4d648:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4d64c:	d0e01a17 	ldw	r3,-32664(gp)
   4d650:	e0bffe17 	ldw	r2,-8(fp)
   4d654:	1885883a 	add	r2,r3,r2
   4d658:	d0a01a15 	stw	r2,-32664(gp)
   4d65c:	e0bffd17 	ldw	r2,-12(fp)
   4d660:	e0bff915 	stw	r2,-28(fp)
   4d664:	e0bff917 	ldw	r2,-28(fp)
   4d668:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4d66c:	e0bffc17 	ldw	r2,-16(fp)
   4d670:	e0bfff15 	stw	r2,-4(fp)
   4d674:	e0bfff17 	ldw	r2,-4(fp)
} 
   4d678:	e037883a 	mov	sp,fp
   4d67c:	df000017 	ldw	fp,0(sp)
   4d680:	dec00104 	addi	sp,sp,4
   4d684:	f800283a 	ret

0004d688 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4d688:	defff704 	addi	sp,sp,-36
   4d68c:	dfc00815 	stw	ra,32(sp)
   4d690:	df000715 	stw	fp,28(sp)
   4d694:	df000704 	addi	fp,sp,28
   4d698:	e13ffb15 	stw	r4,-20(fp)
   4d69c:	e17ffc15 	stw	r5,-16(fp)
   4d6a0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d6a4:	e0bffb17 	ldw	r2,-20(fp)
   4d6a8:	1004803a 	cmplt	r2,r2,zero
   4d6ac:	1000081e 	bne	r2,zero,4d6d0 <write+0x48>
   4d6b0:	e0bffb17 	ldw	r2,-20(fp)
   4d6b4:	10800324 	muli	r2,r2,12
   4d6b8:	1007883a 	mov	r3,r2
   4d6bc:	00800174 	movhi	r2,5
   4d6c0:	10828204 	addi	r2,r2,2568
   4d6c4:	1887883a 	add	r3,r3,r2
   4d6c8:	e0ffff15 	stw	r3,-4(fp)
   4d6cc:	00000106 	br	4d6d4 <write+0x4c>
   4d6d0:	e03fff15 	stw	zero,-4(fp)
   4d6d4:	e0bfff17 	ldw	r2,-4(fp)
   4d6d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4d6dc:	e0bffa17 	ldw	r2,-24(fp)
   4d6e0:	1005003a 	cmpeq	r2,r2,zero
   4d6e4:	1000241e 	bne	r2,zero,4d778 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4d6e8:	e0bffa17 	ldw	r2,-24(fp)
   4d6ec:	10800217 	ldw	r2,8(r2)
   4d6f0:	108000cc 	andi	r2,r2,3
   4d6f4:	1005003a 	cmpeq	r2,r2,zero
   4d6f8:	10001a1e 	bne	r2,zero,4d764 <write+0xdc>
   4d6fc:	e0bffa17 	ldw	r2,-24(fp)
   4d700:	10800017 	ldw	r2,0(r2)
   4d704:	10800617 	ldw	r2,24(r2)
   4d708:	1005003a 	cmpeq	r2,r2,zero
   4d70c:	1000151e 	bne	r2,zero,4d764 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4d710:	e0bffa17 	ldw	r2,-24(fp)
   4d714:	10800017 	ldw	r2,0(r2)
   4d718:	10800617 	ldw	r2,24(r2)
   4d71c:	e17ffc17 	ldw	r5,-16(fp)
   4d720:	e1bffd17 	ldw	r6,-12(fp)
   4d724:	e13ffa17 	ldw	r4,-24(fp)
   4d728:	103ee83a 	callr	r2
   4d72c:	e0bff915 	stw	r2,-28(fp)
   4d730:	e0bff917 	ldw	r2,-28(fp)
   4d734:	1004403a 	cmpge	r2,r2,zero
   4d738:	1000071e 	bne	r2,zero,4d758 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   4d73c:	004d7a80 	call	4d7a8 <alt_get_errno>
   4d740:	e0fff917 	ldw	r3,-28(fp)
   4d744:	00c7c83a 	sub	r3,zero,r3
   4d748:	10c00015 	stw	r3,0(r2)
        return -1;
   4d74c:	00bfffc4 	movi	r2,-1
   4d750:	e0bffe15 	stw	r2,-8(fp)
   4d754:	00000e06 	br	4d790 <write+0x108>
      }
      return rval;
   4d758:	e0bff917 	ldw	r2,-28(fp)
   4d75c:	e0bffe15 	stw	r2,-8(fp)
   4d760:	00000b06 	br	4d790 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4d764:	004d7a80 	call	4d7a8 <alt_get_errno>
   4d768:	1007883a 	mov	r3,r2
   4d76c:	00800344 	movi	r2,13
   4d770:	18800015 	stw	r2,0(r3)
   4d774:	00000406 	br	4d788 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4d778:	004d7a80 	call	4d7a8 <alt_get_errno>
   4d77c:	1007883a 	mov	r3,r2
   4d780:	00801444 	movi	r2,81
   4d784:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4d788:	00bfffc4 	movi	r2,-1
   4d78c:	e0bffe15 	stw	r2,-8(fp)
   4d790:	e0bffe17 	ldw	r2,-8(fp)
}
   4d794:	e037883a 	mov	sp,fp
   4d798:	dfc00117 	ldw	ra,4(sp)
   4d79c:	df000017 	ldw	fp,0(sp)
   4d7a0:	dec00204 	addi	sp,sp,8
   4d7a4:	f800283a 	ret

0004d7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d7a8:	defffd04 	addi	sp,sp,-12
   4d7ac:	dfc00215 	stw	ra,8(sp)
   4d7b0:	df000115 	stw	fp,4(sp)
   4d7b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4d7b8:	00800174 	movhi	r2,5
   4d7bc:	10874304 	addi	r2,r2,7436
   4d7c0:	10800017 	ldw	r2,0(r2)
   4d7c4:	1005003a 	cmpeq	r2,r2,zero
   4d7c8:	1000061e 	bne	r2,zero,4d7e4 <alt_get_errno+0x3c>
   4d7cc:	00800174 	movhi	r2,5
   4d7d0:	10874304 	addi	r2,r2,7436
   4d7d4:	10800017 	ldw	r2,0(r2)
   4d7d8:	103ee83a 	callr	r2
   4d7dc:	e0bfff15 	stw	r2,-4(fp)
   4d7e0:	00000306 	br	4d7f0 <alt_get_errno+0x48>
   4d7e4:	00800174 	movhi	r2,5
   4d7e8:	108e5904 	addi	r2,r2,14692
   4d7ec:	e0bfff15 	stw	r2,-4(fp)
   4d7f0:	e0bfff17 	ldw	r2,-4(fp)
}
   4d7f4:	e037883a 	mov	sp,fp
   4d7f8:	dfc00117 	ldw	ra,4(sp)
   4d7fc:	df000017 	ldw	fp,0(sp)
   4d800:	dec00204 	addi	sp,sp,8
   4d804:	f800283a 	ret

0004d808 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4d808:	defffd04 	addi	sp,sp,-12
   4d80c:	dfc00215 	stw	ra,8(sp)
   4d810:	df000115 	stw	fp,4(sp)
   4d814:	df000104 	addi	fp,sp,4
   4d818:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4d81c:	004f8f00 	call	4f8f0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4d820:	00800044 	movi	r2,1
   4d824:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4d828:	e037883a 	mov	sp,fp
   4d82c:	dfc00117 	ldw	ra,4(sp)
   4d830:	df000017 	ldw	fp,0(sp)
   4d834:	dec00204 	addi	sp,sp,8
   4d838:	f800283a 	ret

0004d83c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4d83c:	defffe04 	addi	sp,sp,-8
   4d840:	dfc00115 	stw	ra,4(sp)
   4d844:	df000015 	stw	fp,0(sp)
   4d848:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4d84c:	01000174 	movhi	r4,5
   4d850:	2102ec04 	addi	r4,r4,2992
   4d854:	000b883a 	mov	r5,zero
   4d858:	000d883a 	mov	r6,zero
   4d85c:	004da200 	call	4da20 <altera_avalon_jtag_uart_init>
   4d860:	01000174 	movhi	r4,5
   4d864:	2102e204 	addi	r4,r4,2952
   4d868:	004d8a00 	call	4d8a0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
    ALTERA_AVALON_UART_INIT ( UART, uart);
   4d86c:	01000174 	movhi	r4,5
   4d870:	21070404 	addi	r4,r4,7184
   4d874:	000b883a 	mov	r5,zero
   4d878:	01800044 	movi	r6,1
   4d87c:	004e47c0 	call	4e47c <altera_avalon_uart_init>
   4d880:	01000174 	movhi	r4,5
   4d884:	2106fa04 	addi	r4,r4,7144
   4d888:	004d8a00 	call	4d8a0 <alt_dev_reg>
}
   4d88c:	e037883a 	mov	sp,fp
   4d890:	dfc00117 	ldw	ra,4(sp)
   4d894:	df000017 	ldw	fp,0(sp)
   4d898:	dec00204 	addi	sp,sp,8
   4d89c:	f800283a 	ret

0004d8a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4d8a0:	defffd04 	addi	sp,sp,-12
   4d8a4:	dfc00215 	stw	ra,8(sp)
   4d8a8:	df000115 	stw	fp,4(sp)
   4d8ac:	df000104 	addi	fp,sp,4
   4d8b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4d8b4:	e13fff17 	ldw	r4,-4(fp)
   4d8b8:	01400174 	movhi	r5,5
   4d8bc:	29474004 	addi	r5,r5,7424
   4d8c0:	004eecc0 	call	4eecc <alt_dev_llist_insert>
}
   4d8c4:	e037883a 	mov	sp,fp
   4d8c8:	dfc00117 	ldw	ra,4(sp)
   4d8cc:	df000017 	ldw	fp,0(sp)
   4d8d0:	dec00204 	addi	sp,sp,8
   4d8d4:	f800283a 	ret

0004d8d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4d8d8:	defffa04 	addi	sp,sp,-24
   4d8dc:	dfc00515 	stw	ra,20(sp)
   4d8e0:	df000415 	stw	fp,16(sp)
   4d8e4:	df000404 	addi	fp,sp,16
   4d8e8:	e13ffd15 	stw	r4,-12(fp)
   4d8ec:	e17ffe15 	stw	r5,-8(fp)
   4d8f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4d8f4:	e0bffd17 	ldw	r2,-12(fp)
   4d8f8:	10800017 	ldw	r2,0(r2)
   4d8fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4d900:	e0bffc17 	ldw	r2,-16(fp)
   4d904:	11000a04 	addi	r4,r2,40
   4d908:	e0bffd17 	ldw	r2,-12(fp)
   4d90c:	11c00217 	ldw	r7,8(r2)
   4d910:	e17ffe17 	ldw	r5,-8(fp)
   4d914:	e1bfff17 	ldw	r6,-4(fp)
   4d918:	004df200 	call	4df20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4d91c:	e037883a 	mov	sp,fp
   4d920:	dfc00117 	ldw	ra,4(sp)
   4d924:	df000017 	ldw	fp,0(sp)
   4d928:	dec00204 	addi	sp,sp,8
   4d92c:	f800283a 	ret

0004d930 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4d930:	defffa04 	addi	sp,sp,-24
   4d934:	dfc00515 	stw	ra,20(sp)
   4d938:	df000415 	stw	fp,16(sp)
   4d93c:	df000404 	addi	fp,sp,16
   4d940:	e13ffd15 	stw	r4,-12(fp)
   4d944:	e17ffe15 	stw	r5,-8(fp)
   4d948:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4d94c:	e0bffd17 	ldw	r2,-12(fp)
   4d950:	10800017 	ldw	r2,0(r2)
   4d954:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4d958:	e0bffc17 	ldw	r2,-16(fp)
   4d95c:	11000a04 	addi	r4,r2,40
   4d960:	e0bffd17 	ldw	r2,-12(fp)
   4d964:	11c00217 	ldw	r7,8(r2)
   4d968:	e17ffe17 	ldw	r5,-8(fp)
   4d96c:	e1bfff17 	ldw	r6,-4(fp)
   4d970:	004e1440 	call	4e144 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4d974:	e037883a 	mov	sp,fp
   4d978:	dfc00117 	ldw	ra,4(sp)
   4d97c:	df000017 	ldw	fp,0(sp)
   4d980:	dec00204 	addi	sp,sp,8
   4d984:	f800283a 	ret

0004d988 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4d988:	defffc04 	addi	sp,sp,-16
   4d98c:	dfc00315 	stw	ra,12(sp)
   4d990:	df000215 	stw	fp,8(sp)
   4d994:	df000204 	addi	fp,sp,8
   4d998:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4d99c:	e0bfff17 	ldw	r2,-4(fp)
   4d9a0:	10800017 	ldw	r2,0(r2)
   4d9a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4d9a8:	e0bffe17 	ldw	r2,-8(fp)
   4d9ac:	11000a04 	addi	r4,r2,40
   4d9b0:	e0bfff17 	ldw	r2,-4(fp)
   4d9b4:	11400217 	ldw	r5,8(r2)
   4d9b8:	004ddb80 	call	4ddb8 <altera_avalon_jtag_uart_close>
}
   4d9bc:	e037883a 	mov	sp,fp
   4d9c0:	dfc00117 	ldw	ra,4(sp)
   4d9c4:	df000017 	ldw	fp,0(sp)
   4d9c8:	dec00204 	addi	sp,sp,8
   4d9cc:	f800283a 	ret

0004d9d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4d9d0:	defffa04 	addi	sp,sp,-24
   4d9d4:	dfc00515 	stw	ra,20(sp)
   4d9d8:	df000415 	stw	fp,16(sp)
   4d9dc:	df000404 	addi	fp,sp,16
   4d9e0:	e13ffd15 	stw	r4,-12(fp)
   4d9e4:	e17ffe15 	stw	r5,-8(fp)
   4d9e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4d9ec:	e0bffd17 	ldw	r2,-12(fp)
   4d9f0:	10800017 	ldw	r2,0(r2)
   4d9f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4d9f8:	e0bffc17 	ldw	r2,-16(fp)
   4d9fc:	11000a04 	addi	r4,r2,40
   4da00:	e17ffe17 	ldw	r5,-8(fp)
   4da04:	e1bfff17 	ldw	r6,-4(fp)
   4da08:	004de2c0 	call	4de2c <altera_avalon_jtag_uart_ioctl>
}
   4da0c:	e037883a 	mov	sp,fp
   4da10:	dfc00117 	ldw	ra,4(sp)
   4da14:	df000017 	ldw	fp,0(sp)
   4da18:	dec00204 	addi	sp,sp,8
   4da1c:	f800283a 	ret

0004da20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4da20:	defffa04 	addi	sp,sp,-24
   4da24:	dfc00515 	stw	ra,20(sp)
   4da28:	df000415 	stw	fp,16(sp)
   4da2c:	df000404 	addi	fp,sp,16
   4da30:	e13ffd15 	stw	r4,-12(fp)
   4da34:	e17ffe15 	stw	r5,-8(fp)
   4da38:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4da3c:	e0fffd17 	ldw	r3,-12(fp)
   4da40:	00800044 	movi	r2,1
   4da44:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4da48:	e0bffd17 	ldw	r2,-12(fp)
   4da4c:	10800017 	ldw	r2,0(r2)
   4da50:	11000104 	addi	r4,r2,4
   4da54:	e0bffd17 	ldw	r2,-12(fp)
   4da58:	10800817 	ldw	r2,32(r2)
   4da5c:	1007883a 	mov	r3,r2
   4da60:	2005883a 	mov	r2,r4
   4da64:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4da68:	e13ffe17 	ldw	r4,-8(fp)
   4da6c:	e17fff17 	ldw	r5,-4(fp)
   4da70:	d8000015 	stw	zero,0(sp)
   4da74:	01800174 	movhi	r6,5
   4da78:	31b6b804 	addi	r6,r6,-9504
   4da7c:	e1fffd17 	ldw	r7,-12(fp)
   4da80:	004f3440 	call	4f344 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4da84:	e0bffd17 	ldw	r2,-12(fp)
   4da88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4da8c:	e0bffd17 	ldw	r2,-12(fp)
   4da90:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4da94:	00800174 	movhi	r2,5
   4da98:	108e5e04 	addi	r2,r2,14712
   4da9c:	10800017 	ldw	r2,0(r2)
   4daa0:	100b883a 	mov	r5,r2
   4daa4:	01800174 	movhi	r6,5
   4daa8:	31b74204 	addi	r6,r6,-8952
   4daac:	e1fffd17 	ldw	r7,-12(fp)
   4dab0:	004ed340 	call	4ed34 <alt_alarm_start>
   4dab4:	1004403a 	cmpge	r2,r2,zero
   4dab8:	1000041e 	bne	r2,zero,4dacc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4dabc:	e0fffd17 	ldw	r3,-12(fp)
   4dac0:	00a00034 	movhi	r2,32768
   4dac4:	10bfffc4 	addi	r2,r2,-1
   4dac8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4dacc:	e037883a 	mov	sp,fp
   4dad0:	dfc00117 	ldw	ra,4(sp)
   4dad4:	df000017 	ldw	fp,0(sp)
   4dad8:	dec00204 	addi	sp,sp,8
   4dadc:	f800283a 	ret

0004dae0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4dae0:	defff804 	addi	sp,sp,-32
   4dae4:	df000715 	stw	fp,28(sp)
   4dae8:	df000704 	addi	fp,sp,28
   4daec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4daf0:	e0bfff17 	ldw	r2,-4(fp)
   4daf4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   4daf8:	e0bffe17 	ldw	r2,-8(fp)
   4dafc:	10800017 	ldw	r2,0(r2)
   4db00:	e0bffd15 	stw	r2,-12(fp)
   4db04:	00000006 	br	4db08 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4db08:	e0bffd17 	ldw	r2,-12(fp)
   4db0c:	10800104 	addi	r2,r2,4
   4db10:	10800037 	ldwio	r2,0(r2)
   4db14:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4db18:	e0bffc17 	ldw	r2,-16(fp)
   4db1c:	1080c00c 	andi	r2,r2,768
   4db20:	1005003a 	cmpeq	r2,r2,zero
   4db24:	1000741e 	bne	r2,zero,4dcf8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4db28:	e0bffc17 	ldw	r2,-16(fp)
   4db2c:	1080400c 	andi	r2,r2,256
   4db30:	1005003a 	cmpeq	r2,r2,zero
   4db34:	1000351e 	bne	r2,zero,4dc0c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4db38:	00800074 	movhi	r2,1
   4db3c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4db40:	e0bffe17 	ldw	r2,-8(fp)
   4db44:	10800a17 	ldw	r2,40(r2)
   4db48:	10800044 	addi	r2,r2,1
   4db4c:	1081ffcc 	andi	r2,r2,2047
   4db50:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4db54:	e0bffe17 	ldw	r2,-8(fp)
   4db58:	10c00b17 	ldw	r3,44(r2)
   4db5c:	e0bffa17 	ldw	r2,-24(fp)
   4db60:	18801626 	beq	r3,r2,4dbbc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4db64:	e0bffd17 	ldw	r2,-12(fp)
   4db68:	10800037 	ldwio	r2,0(r2)
   4db6c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4db70:	e0bffb17 	ldw	r2,-20(fp)
   4db74:	10a0000c 	andi	r2,r2,32768
   4db78:	1005003a 	cmpeq	r2,r2,zero
   4db7c:	10000f1e 	bne	r2,zero,4dbbc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4db80:	e0bffe17 	ldw	r2,-8(fp)
   4db84:	10c00a17 	ldw	r3,40(r2)
   4db88:	e0bffb17 	ldw	r2,-20(fp)
   4db8c:	1009883a 	mov	r4,r2
   4db90:	e0bffe17 	ldw	r2,-8(fp)
   4db94:	1885883a 	add	r2,r3,r2
   4db98:	10800e04 	addi	r2,r2,56
   4db9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4dba0:	e0bffe17 	ldw	r2,-8(fp)
   4dba4:	10800a17 	ldw	r2,40(r2)
   4dba8:	10800044 	addi	r2,r2,1
   4dbac:	10c1ffcc 	andi	r3,r2,2047
   4dbb0:	e0bffe17 	ldw	r2,-8(fp)
   4dbb4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4dbb8:	003fe106 	br	4db40 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4dbbc:	e0bffb17 	ldw	r2,-20(fp)
   4dbc0:	10bfffec 	andhi	r2,r2,65535
   4dbc4:	1005003a 	cmpeq	r2,r2,zero
   4dbc8:	1000101e 	bne	r2,zero,4dc0c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4dbcc:	e0bffe17 	ldw	r2,-8(fp)
   4dbd0:	10c00817 	ldw	r3,32(r2)
   4dbd4:	00bfff84 	movi	r2,-2
   4dbd8:	1886703a 	and	r3,r3,r2
   4dbdc:	e0bffe17 	ldw	r2,-8(fp)
   4dbe0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4dbe4:	e0bffd17 	ldw	r2,-12(fp)
   4dbe8:	11000104 	addi	r4,r2,4
   4dbec:	e0bffe17 	ldw	r2,-8(fp)
   4dbf0:	10800817 	ldw	r2,32(r2)
   4dbf4:	1007883a 	mov	r3,r2
   4dbf8:	2005883a 	mov	r2,r4
   4dbfc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4dc00:	e0bffd17 	ldw	r2,-12(fp)
   4dc04:	10800104 	addi	r2,r2,4
   4dc08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4dc0c:	e0bffc17 	ldw	r2,-16(fp)
   4dc10:	1080800c 	andi	r2,r2,512
   4dc14:	1005003a 	cmpeq	r2,r2,zero
   4dc18:	103fbb1e 	bne	r2,zero,4db08 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4dc1c:	e0bffc17 	ldw	r2,-16(fp)
   4dc20:	10bfffec 	andhi	r2,r2,65535
   4dc24:	1004d43a 	srli	r2,r2,16
   4dc28:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4dc2c:	00001506 	br	4dc84 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4dc30:	e13ffd17 	ldw	r4,-12(fp)
   4dc34:	e0bffe17 	ldw	r2,-8(fp)
   4dc38:	10c00d17 	ldw	r3,52(r2)
   4dc3c:	e0bffe17 	ldw	r2,-8(fp)
   4dc40:	1885883a 	add	r2,r3,r2
   4dc44:	10820e04 	addi	r2,r2,2104
   4dc48:	10800003 	ldbu	r2,0(r2)
   4dc4c:	10c03fcc 	andi	r3,r2,255
   4dc50:	18c0201c 	xori	r3,r3,128
   4dc54:	18ffe004 	addi	r3,r3,-128
   4dc58:	2005883a 	mov	r2,r4
   4dc5c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4dc60:	e0bffe17 	ldw	r2,-8(fp)
   4dc64:	10800d17 	ldw	r2,52(r2)
   4dc68:	10800044 	addi	r2,r2,1
   4dc6c:	10c1ffcc 	andi	r3,r2,2047
   4dc70:	e0bffe17 	ldw	r2,-8(fp)
   4dc74:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4dc78:	e0bff917 	ldw	r2,-28(fp)
   4dc7c:	10bfffc4 	addi	r2,r2,-1
   4dc80:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4dc84:	e0bff917 	ldw	r2,-28(fp)
   4dc88:	1005003a 	cmpeq	r2,r2,zero
   4dc8c:	1000051e 	bne	r2,zero,4dca4 <altera_avalon_jtag_uart_irq+0x1c4>
   4dc90:	e0bffe17 	ldw	r2,-8(fp)
   4dc94:	10c00d17 	ldw	r3,52(r2)
   4dc98:	e0bffe17 	ldw	r2,-8(fp)
   4dc9c:	10800c17 	ldw	r2,48(r2)
   4dca0:	18bfe31e 	bne	r3,r2,4dc30 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4dca4:	e0bff917 	ldw	r2,-28(fp)
   4dca8:	1005003a 	cmpeq	r2,r2,zero
   4dcac:	103f961e 	bne	r2,zero,4db08 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4dcb0:	e0bffe17 	ldw	r2,-8(fp)
   4dcb4:	10c00817 	ldw	r3,32(r2)
   4dcb8:	00bfff44 	movi	r2,-3
   4dcbc:	1886703a 	and	r3,r3,r2
   4dcc0:	e0bffe17 	ldw	r2,-8(fp)
   4dcc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4dcc8:	e0bffe17 	ldw	r2,-8(fp)
   4dccc:	10800017 	ldw	r2,0(r2)
   4dcd0:	11000104 	addi	r4,r2,4
   4dcd4:	e0bffe17 	ldw	r2,-8(fp)
   4dcd8:	10800817 	ldw	r2,32(r2)
   4dcdc:	1007883a 	mov	r3,r2
   4dce0:	2005883a 	mov	r2,r4
   4dce4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4dce8:	e0bffd17 	ldw	r2,-12(fp)
   4dcec:	10800104 	addi	r2,r2,4
   4dcf0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4dcf4:	003f8406 	br	4db08 <altera_avalon_jtag_uart_irq+0x28>
}
   4dcf8:	e037883a 	mov	sp,fp
   4dcfc:	df000017 	ldw	fp,0(sp)
   4dd00:	dec00104 	addi	sp,sp,4
   4dd04:	f800283a 	ret

0004dd08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4dd08:	defffc04 	addi	sp,sp,-16
   4dd0c:	df000315 	stw	fp,12(sp)
   4dd10:	df000304 	addi	fp,sp,12
   4dd14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4dd18:	e0bfff17 	ldw	r2,-4(fp)
   4dd1c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4dd20:	e0bffe17 	ldw	r2,-8(fp)
   4dd24:	10800017 	ldw	r2,0(r2)
   4dd28:	10800104 	addi	r2,r2,4
   4dd2c:	10800037 	ldwio	r2,0(r2)
   4dd30:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4dd34:	e0bffd17 	ldw	r2,-12(fp)
   4dd38:	1081000c 	andi	r2,r2,1024
   4dd3c:	1005003a 	cmpeq	r2,r2,zero
   4dd40:	10000c1e 	bne	r2,zero,4dd74 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4dd44:	e0bffe17 	ldw	r2,-8(fp)
   4dd48:	10800017 	ldw	r2,0(r2)
   4dd4c:	11000104 	addi	r4,r2,4
   4dd50:	e0bffe17 	ldw	r2,-8(fp)
   4dd54:	10800817 	ldw	r2,32(r2)
   4dd58:	10810014 	ori	r2,r2,1024
   4dd5c:	1007883a 	mov	r3,r2
   4dd60:	2005883a 	mov	r2,r4
   4dd64:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4dd68:	e0bffe17 	ldw	r2,-8(fp)
   4dd6c:	10000915 	stw	zero,36(r2)
   4dd70:	00000a06 	br	4dd9c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4dd74:	e0bffe17 	ldw	r2,-8(fp)
   4dd78:	10c00917 	ldw	r3,36(r2)
   4dd7c:	00a00034 	movhi	r2,32768
   4dd80:	10bfff04 	addi	r2,r2,-4
   4dd84:	10c00536 	bltu	r2,r3,4dd9c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4dd88:	e0bffe17 	ldw	r2,-8(fp)
   4dd8c:	10800917 	ldw	r2,36(r2)
   4dd90:	10c00044 	addi	r3,r2,1
   4dd94:	e0bffe17 	ldw	r2,-8(fp)
   4dd98:	10c00915 	stw	r3,36(r2)
   4dd9c:	00800174 	movhi	r2,5
   4dda0:	108e5e04 	addi	r2,r2,14712
   4dda4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4dda8:	e037883a 	mov	sp,fp
   4ddac:	df000017 	ldw	fp,0(sp)
   4ddb0:	dec00104 	addi	sp,sp,4
   4ddb4:	f800283a 	ret

0004ddb8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4ddb8:	defffc04 	addi	sp,sp,-16
   4ddbc:	df000315 	stw	fp,12(sp)
   4ddc0:	df000304 	addi	fp,sp,12
   4ddc4:	e13ffd15 	stw	r4,-12(fp)
   4ddc8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ddcc:	00000706 	br	4ddec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4ddd0:	e0bffe17 	ldw	r2,-8(fp)
   4ddd4:	1090000c 	andi	r2,r2,16384
   4ddd8:	1005003a 	cmpeq	r2,r2,zero
   4dddc:	1000031e 	bne	r2,zero,4ddec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4dde0:	00bffd44 	movi	r2,-11
   4dde4:	e0bfff15 	stw	r2,-4(fp)
   4dde8:	00000b06 	br	4de18 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ddec:	e0bffd17 	ldw	r2,-12(fp)
   4ddf0:	10c00d17 	ldw	r3,52(r2)
   4ddf4:	e0bffd17 	ldw	r2,-12(fp)
   4ddf8:	10800c17 	ldw	r2,48(r2)
   4ddfc:	18800526 	beq	r3,r2,4de14 <altera_avalon_jtag_uart_close+0x5c>
   4de00:	e0bffd17 	ldw	r2,-12(fp)
   4de04:	10c00917 	ldw	r3,36(r2)
   4de08:	e0bffd17 	ldw	r2,-12(fp)
   4de0c:	10800117 	ldw	r2,4(r2)
   4de10:	18bfef36 	bltu	r3,r2,4ddd0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4de14:	e03fff15 	stw	zero,-4(fp)
   4de18:	e0bfff17 	ldw	r2,-4(fp)
}
   4de1c:	e037883a 	mov	sp,fp
   4de20:	df000017 	ldw	fp,0(sp)
   4de24:	dec00104 	addi	sp,sp,4
   4de28:	f800283a 	ret

0004de2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4de2c:	defff804 	addi	sp,sp,-32
   4de30:	df000715 	stw	fp,28(sp)
   4de34:	df000704 	addi	fp,sp,28
   4de38:	e13ffb15 	stw	r4,-20(fp)
   4de3c:	e17ffc15 	stw	r5,-16(fp)
   4de40:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4de44:	00bff9c4 	movi	r2,-25
   4de48:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   4de4c:	e0bffc17 	ldw	r2,-16(fp)
   4de50:	e0bfff15 	stw	r2,-4(fp)
   4de54:	e0ffff17 	ldw	r3,-4(fp)
   4de58:	189a8060 	cmpeqi	r2,r3,27137
   4de5c:	1000041e 	bne	r2,zero,4de70 <altera_avalon_jtag_uart_ioctl+0x44>
   4de60:	e0ffff17 	ldw	r3,-4(fp)
   4de64:	189a80a0 	cmpeqi	r2,r3,27138
   4de68:	10001b1e 	bne	r2,zero,4ded8 <altera_avalon_jtag_uart_ioctl+0xac>
   4de6c:	00002706 	br	4df0c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4de70:	e0bffb17 	ldw	r2,-20(fp)
   4de74:	10c00117 	ldw	r3,4(r2)
   4de78:	00a00034 	movhi	r2,32768
   4de7c:	10bfffc4 	addi	r2,r2,-1
   4de80:	18802226 	beq	r3,r2,4df0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4de84:	e0bffd17 	ldw	r2,-12(fp)
   4de88:	10800017 	ldw	r2,0(r2)
   4de8c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4de90:	e0bff917 	ldw	r2,-28(fp)
   4de94:	10800090 	cmplti	r2,r2,2
   4de98:	1000071e 	bne	r2,zero,4deb8 <altera_avalon_jtag_uart_ioctl+0x8c>
   4de9c:	e0fff917 	ldw	r3,-28(fp)
   4dea0:	00a00034 	movhi	r2,32768
   4dea4:	10bfffc4 	addi	r2,r2,-1
   4dea8:	18800326 	beq	r3,r2,4deb8 <altera_avalon_jtag_uart_ioctl+0x8c>
   4deac:	e0bff917 	ldw	r2,-28(fp)
   4deb0:	e0bffe15 	stw	r2,-8(fp)
   4deb4:	00000306 	br	4dec4 <altera_avalon_jtag_uart_ioctl+0x98>
   4deb8:	00e00034 	movhi	r3,32768
   4debc:	18ffff84 	addi	r3,r3,-2
   4dec0:	e0fffe15 	stw	r3,-8(fp)
   4dec4:	e0bffb17 	ldw	r2,-20(fp)
   4dec8:	e0fffe17 	ldw	r3,-8(fp)
   4decc:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4ded0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4ded4:	00000d06 	br	4df0c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4ded8:	e0bffb17 	ldw	r2,-20(fp)
   4dedc:	10c00117 	ldw	r3,4(r2)
   4dee0:	00a00034 	movhi	r2,32768
   4dee4:	10bfffc4 	addi	r2,r2,-1
   4dee8:	18800826 	beq	r3,r2,4df0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4deec:	e13ffd17 	ldw	r4,-12(fp)
   4def0:	e0bffb17 	ldw	r2,-20(fp)
   4def4:	10c00917 	ldw	r3,36(r2)
   4def8:	e0bffb17 	ldw	r2,-20(fp)
   4defc:	10800117 	ldw	r2,4(r2)
   4df00:	1885803a 	cmpltu	r2,r3,r2
   4df04:	20800015 	stw	r2,0(r4)
      rc = 0;
   4df08:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   4df0c:	e0bffa17 	ldw	r2,-24(fp)
}
   4df10:	e037883a 	mov	sp,fp
   4df14:	df000017 	ldw	fp,0(sp)
   4df18:	dec00104 	addi	sp,sp,4
   4df1c:	f800283a 	ret

0004df20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4df20:	defff204 	addi	sp,sp,-56
   4df24:	dfc00d15 	stw	ra,52(sp)
   4df28:	df000c15 	stw	fp,48(sp)
   4df2c:	df000c04 	addi	fp,sp,48
   4df30:	e13ffb15 	stw	r4,-20(fp)
   4df34:	e17ffc15 	stw	r5,-16(fp)
   4df38:	e1bffd15 	stw	r6,-12(fp)
   4df3c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4df40:	e0bffc17 	ldw	r2,-16(fp)
   4df44:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4df48:	00004806 	br	4e06c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4df4c:	e0bffb17 	ldw	r2,-20(fp)
   4df50:	10800a17 	ldw	r2,40(r2)
   4df54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4df58:	e0bffb17 	ldw	r2,-20(fp)
   4df5c:	10800b17 	ldw	r2,44(r2)
   4df60:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4df64:	e0fff717 	ldw	r3,-36(fp)
   4df68:	e0bff617 	ldw	r2,-40(fp)
   4df6c:	18800536 	bltu	r3,r2,4df84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4df70:	e0bff717 	ldw	r2,-36(fp)
   4df74:	e0fff617 	ldw	r3,-40(fp)
   4df78:	10c5c83a 	sub	r2,r2,r3
   4df7c:	e0bff815 	stw	r2,-32(fp)
   4df80:	00000406 	br	4df94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4df84:	00820004 	movi	r2,2048
   4df88:	e0fff617 	ldw	r3,-40(fp)
   4df8c:	10c5c83a 	sub	r2,r2,r3
   4df90:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4df94:	e0bff817 	ldw	r2,-32(fp)
   4df98:	1005003a 	cmpeq	r2,r2,zero
   4df9c:	10001f1e 	bne	r2,zero,4e01c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   4dfa0:	e0fffd17 	ldw	r3,-12(fp)
   4dfa4:	e0bff817 	ldw	r2,-32(fp)
   4dfa8:	1880022e 	bgeu	r3,r2,4dfb4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4dfac:	e0bffd17 	ldw	r2,-12(fp)
   4dfb0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4dfb4:	e0bffb17 	ldw	r2,-20(fp)
   4dfb8:	10c00e04 	addi	r3,r2,56
   4dfbc:	e0bff617 	ldw	r2,-40(fp)
   4dfc0:	1887883a 	add	r3,r3,r2
   4dfc4:	e0bffa17 	ldw	r2,-24(fp)
   4dfc8:	1009883a 	mov	r4,r2
   4dfcc:	180b883a 	mov	r5,r3
   4dfd0:	e1bff817 	ldw	r6,-32(fp)
   4dfd4:	00489f00 	call	489f0 <memcpy>
      ptr   += n;
   4dfd8:	e0fff817 	ldw	r3,-32(fp)
   4dfdc:	e0bffa17 	ldw	r2,-24(fp)
   4dfe0:	10c5883a 	add	r2,r2,r3
   4dfe4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4dfe8:	e0fffd17 	ldw	r3,-12(fp)
   4dfec:	e0bff817 	ldw	r2,-32(fp)
   4dff0:	1885c83a 	sub	r2,r3,r2
   4dff4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4dff8:	e0fff617 	ldw	r3,-40(fp)
   4dffc:	e0bff817 	ldw	r2,-32(fp)
   4e000:	1885883a 	add	r2,r3,r2
   4e004:	10c1ffcc 	andi	r3,r2,2047
   4e008:	e0bffb17 	ldw	r2,-20(fp)
   4e00c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4e010:	e0bffd17 	ldw	r2,-12(fp)
   4e014:	10800048 	cmpgei	r2,r2,1
   4e018:	103fcc1e 	bne	r2,zero,4df4c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4e01c:	e0fffa17 	ldw	r3,-24(fp)
   4e020:	e0bffc17 	ldw	r2,-16(fp)
   4e024:	1880141e 	bne	r3,r2,4e078 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4e028:	e0bffe17 	ldw	r2,-8(fp)
   4e02c:	1090000c 	andi	r2,r2,16384
   4e030:	1004c03a 	cmpne	r2,r2,zero
   4e034:	1000101e 	bne	r2,zero,4e078 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4e038:	e0bffb17 	ldw	r2,-20(fp)
   4e03c:	10c00a17 	ldw	r3,40(r2)
   4e040:	e0bff717 	ldw	r2,-36(fp)
   4e044:	1880051e 	bne	r3,r2,4e05c <altera_avalon_jtag_uart_read+0x13c>
   4e048:	e0bffb17 	ldw	r2,-20(fp)
   4e04c:	10c00917 	ldw	r3,36(r2)
   4e050:	e0bffb17 	ldw	r2,-20(fp)
   4e054:	10800117 	ldw	r2,4(r2)
   4e058:	18bff736 	bltu	r3,r2,4e038 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4e05c:	e0bffb17 	ldw	r2,-20(fp)
   4e060:	10c00a17 	ldw	r3,40(r2)
   4e064:	e0bff717 	ldw	r2,-36(fp)
   4e068:	18800326 	beq	r3,r2,4e078 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e06c:	e0bffd17 	ldw	r2,-12(fp)
   4e070:	10800048 	cmpgei	r2,r2,1
   4e074:	103fb51e 	bne	r2,zero,4df4c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4e078:	e0fffa17 	ldw	r3,-24(fp)
   4e07c:	e0bffc17 	ldw	r2,-16(fp)
   4e080:	18801926 	beq	r3,r2,4e0e8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e084:	0005303a 	rdctl	r2,status
   4e088:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e08c:	e0fff517 	ldw	r3,-44(fp)
   4e090:	00bfff84 	movi	r2,-2
   4e094:	1884703a 	and	r2,r3,r2
   4e098:	1001703a 	wrctl	status,r2
  
  return context;
   4e09c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4e0a0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e0a4:	e0bffb17 	ldw	r2,-20(fp)
   4e0a8:	10800817 	ldw	r2,32(r2)
   4e0ac:	10c00054 	ori	r3,r2,1
   4e0b0:	e0bffb17 	ldw	r2,-20(fp)
   4e0b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e0b8:	e0bffb17 	ldw	r2,-20(fp)
   4e0bc:	10800017 	ldw	r2,0(r2)
   4e0c0:	11000104 	addi	r4,r2,4
   4e0c4:	e0bffb17 	ldw	r2,-20(fp)
   4e0c8:	10800817 	ldw	r2,32(r2)
   4e0cc:	1007883a 	mov	r3,r2
   4e0d0:	2005883a 	mov	r2,r4
   4e0d4:	10c00035 	stwio	r3,0(r2)
   4e0d8:	e0bff917 	ldw	r2,-28(fp)
   4e0dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e0e0:	e0bff417 	ldw	r2,-48(fp)
   4e0e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4e0e8:	e0fffa17 	ldw	r3,-24(fp)
   4e0ec:	e0bffc17 	ldw	r2,-16(fp)
   4e0f0:	18800526 	beq	r3,r2,4e108 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   4e0f4:	e0fffa17 	ldw	r3,-24(fp)
   4e0f8:	e0bffc17 	ldw	r2,-16(fp)
   4e0fc:	1887c83a 	sub	r3,r3,r2
   4e100:	e0ffff15 	stw	r3,-4(fp)
   4e104:	00000906 	br	4e12c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4e108:	e0bffe17 	ldw	r2,-8(fp)
   4e10c:	1090000c 	andi	r2,r2,16384
   4e110:	1005003a 	cmpeq	r2,r2,zero
   4e114:	1000031e 	bne	r2,zero,4e124 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4e118:	00bffd44 	movi	r2,-11
   4e11c:	e0bfff15 	stw	r2,-4(fp)
   4e120:	00000206 	br	4e12c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4e124:	00bffec4 	movi	r2,-5
   4e128:	e0bfff15 	stw	r2,-4(fp)
   4e12c:	e0bfff17 	ldw	r2,-4(fp)
}
   4e130:	e037883a 	mov	sp,fp
   4e134:	dfc00117 	ldw	ra,4(sp)
   4e138:	df000017 	ldw	fp,0(sp)
   4e13c:	dec00204 	addi	sp,sp,8
   4e140:	f800283a 	ret

0004e144 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4e144:	defff204 	addi	sp,sp,-56
   4e148:	dfc00d15 	stw	ra,52(sp)
   4e14c:	df000c15 	stw	fp,48(sp)
   4e150:	df000c04 	addi	fp,sp,48
   4e154:	e13ffb15 	stw	r4,-20(fp)
   4e158:	e17ffc15 	stw	r5,-16(fp)
   4e15c:	e1bffd15 	stw	r6,-12(fp)
   4e160:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4e164:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4e168:	e0bffc17 	ldw	r2,-16(fp)
   4e16c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e170:	00003a06 	br	4e25c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4e174:	e0bffb17 	ldw	r2,-20(fp)
   4e178:	10800c17 	ldw	r2,48(r2)
   4e17c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   4e180:	e0bffb17 	ldw	r2,-20(fp)
   4e184:	10800d17 	ldw	r2,52(r2)
   4e188:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   4e18c:	e0fffa17 	ldw	r3,-24(fp)
   4e190:	e0bff917 	ldw	r2,-28(fp)
   4e194:	1880062e 	bgeu	r3,r2,4e1b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4e198:	e0fff917 	ldw	r3,-28(fp)
   4e19c:	e0bffa17 	ldw	r2,-24(fp)
   4e1a0:	1885c83a 	sub	r2,r3,r2
   4e1a4:	10bfffc4 	addi	r2,r2,-1
   4e1a8:	e0bff815 	stw	r2,-32(fp)
   4e1ac:	00000c06 	br	4e1e0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4e1b0:	e0bff917 	ldw	r2,-28(fp)
   4e1b4:	1005003a 	cmpeq	r2,r2,zero
   4e1b8:	1000051e 	bne	r2,zero,4e1d0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4e1bc:	00820004 	movi	r2,2048
   4e1c0:	e0fffa17 	ldw	r3,-24(fp)
   4e1c4:	10c5c83a 	sub	r2,r2,r3
   4e1c8:	e0bff815 	stw	r2,-32(fp)
   4e1cc:	00000406 	br	4e1e0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4e1d0:	0081ffc4 	movi	r2,2047
   4e1d4:	e0fffa17 	ldw	r3,-24(fp)
   4e1d8:	10c5c83a 	sub	r2,r2,r3
   4e1dc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4e1e0:	e0bff817 	ldw	r2,-32(fp)
   4e1e4:	1005003a 	cmpeq	r2,r2,zero
   4e1e8:	10001f1e 	bne	r2,zero,4e268 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   4e1ec:	e0fffd17 	ldw	r3,-12(fp)
   4e1f0:	e0bff817 	ldw	r2,-32(fp)
   4e1f4:	1880022e 	bgeu	r3,r2,4e200 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4e1f8:	e0bffd17 	ldw	r2,-12(fp)
   4e1fc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4e200:	e0bffb17 	ldw	r2,-20(fp)
   4e204:	10c20e04 	addi	r3,r2,2104
   4e208:	e0bffa17 	ldw	r2,-24(fp)
   4e20c:	1885883a 	add	r2,r3,r2
   4e210:	e0fffc17 	ldw	r3,-16(fp)
   4e214:	1009883a 	mov	r4,r2
   4e218:	180b883a 	mov	r5,r3
   4e21c:	e1bff817 	ldw	r6,-32(fp)
   4e220:	00489f00 	call	489f0 <memcpy>
      ptr   += n;
   4e224:	e0fff817 	ldw	r3,-32(fp)
   4e228:	e0bffc17 	ldw	r2,-16(fp)
   4e22c:	10c5883a 	add	r2,r2,r3
   4e230:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4e234:	e0fffd17 	ldw	r3,-12(fp)
   4e238:	e0bff817 	ldw	r2,-32(fp)
   4e23c:	1885c83a 	sub	r2,r3,r2
   4e240:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e244:	e0fffa17 	ldw	r3,-24(fp)
   4e248:	e0bff817 	ldw	r2,-32(fp)
   4e24c:	1885883a 	add	r2,r3,r2
   4e250:	10c1ffcc 	andi	r3,r2,2047
   4e254:	e0bffb17 	ldw	r2,-20(fp)
   4e258:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e25c:	e0bffd17 	ldw	r2,-12(fp)
   4e260:	10800048 	cmpgei	r2,r2,1
   4e264:	103fc31e 	bne	r2,zero,4e174 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e268:	0005303a 	rdctl	r2,status
   4e26c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e270:	e0fff517 	ldw	r3,-44(fp)
   4e274:	00bfff84 	movi	r2,-2
   4e278:	1884703a 	and	r2,r3,r2
   4e27c:	1001703a 	wrctl	status,r2
  
  return context;
   4e280:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4e284:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4e288:	e0bffb17 	ldw	r2,-20(fp)
   4e28c:	10800817 	ldw	r2,32(r2)
   4e290:	10c00094 	ori	r3,r2,2
   4e294:	e0bffb17 	ldw	r2,-20(fp)
   4e298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e29c:	e0bffb17 	ldw	r2,-20(fp)
   4e2a0:	10800017 	ldw	r2,0(r2)
   4e2a4:	11000104 	addi	r4,r2,4
   4e2a8:	e0bffb17 	ldw	r2,-20(fp)
   4e2ac:	10800817 	ldw	r2,32(r2)
   4e2b0:	1007883a 	mov	r3,r2
   4e2b4:	2005883a 	mov	r2,r4
   4e2b8:	10c00035 	stwio	r3,0(r2)
   4e2bc:	e0bff717 	ldw	r2,-36(fp)
   4e2c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e2c4:	e0bff417 	ldw	r2,-48(fp)
   4e2c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4e2cc:	e0bffd17 	ldw	r2,-12(fp)
   4e2d0:	10800050 	cmplti	r2,r2,1
   4e2d4:	1000111e 	bne	r2,zero,4e31c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4e2d8:	e0bffe17 	ldw	r2,-8(fp)
   4e2dc:	1090000c 	andi	r2,r2,16384
   4e2e0:	1004c03a 	cmpne	r2,r2,zero
   4e2e4:	1000101e 	bne	r2,zero,4e328 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4e2e8:	e0bffb17 	ldw	r2,-20(fp)
   4e2ec:	10c00d17 	ldw	r3,52(r2)
   4e2f0:	e0bff917 	ldw	r2,-28(fp)
   4e2f4:	1880051e 	bne	r3,r2,4e30c <altera_avalon_jtag_uart_write+0x1c8>
   4e2f8:	e0bffb17 	ldw	r2,-20(fp)
   4e2fc:	10c00917 	ldw	r3,36(r2)
   4e300:	e0bffb17 	ldw	r2,-20(fp)
   4e304:	10800117 	ldw	r2,4(r2)
   4e308:	18bff736 	bltu	r3,r2,4e2e8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4e30c:	e0bffb17 	ldw	r2,-20(fp)
   4e310:	10c00d17 	ldw	r3,52(r2)
   4e314:	e0bff917 	ldw	r2,-28(fp)
   4e318:	18800326 	beq	r3,r2,4e328 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   4e31c:	e0bffd17 	ldw	r2,-12(fp)
   4e320:	10800048 	cmpgei	r2,r2,1
   4e324:	103fcd1e 	bne	r2,zero,4e25c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4e328:	e0fffc17 	ldw	r3,-16(fp)
   4e32c:	e0bff617 	ldw	r2,-40(fp)
   4e330:	18800526 	beq	r3,r2,4e348 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4e334:	e0fffc17 	ldw	r3,-16(fp)
   4e338:	e0bff617 	ldw	r2,-40(fp)
   4e33c:	1887c83a 	sub	r3,r3,r2
   4e340:	e0ffff15 	stw	r3,-4(fp)
   4e344:	00000906 	br	4e36c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   4e348:	e0bffe17 	ldw	r2,-8(fp)
   4e34c:	1090000c 	andi	r2,r2,16384
   4e350:	1005003a 	cmpeq	r2,r2,zero
   4e354:	1000031e 	bne	r2,zero,4e364 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4e358:	00bffd44 	movi	r2,-11
   4e35c:	e0bfff15 	stw	r2,-4(fp)
   4e360:	00000206 	br	4e36c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   4e364:	00bffec4 	movi	r2,-5
   4e368:	e0bfff15 	stw	r2,-4(fp)
   4e36c:	e0bfff17 	ldw	r2,-4(fp)
}
   4e370:	e037883a 	mov	sp,fp
   4e374:	dfc00117 	ldw	ra,4(sp)
   4e378:	df000017 	ldw	fp,0(sp)
   4e37c:	dec00204 	addi	sp,sp,8
   4e380:	f800283a 	ret

0004e384 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4e384:	defffa04 	addi	sp,sp,-24
   4e388:	dfc00515 	stw	ra,20(sp)
   4e38c:	df000415 	stw	fp,16(sp)
   4e390:	df000404 	addi	fp,sp,16
   4e394:	e13ffd15 	stw	r4,-12(fp)
   4e398:	e17ffe15 	stw	r5,-8(fp)
   4e39c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4e3a0:	e0bffd17 	ldw	r2,-12(fp)
   4e3a4:	10800017 	ldw	r2,0(r2)
   4e3a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   4e3ac:	e0bffc17 	ldw	r2,-16(fp)
   4e3b0:	11000a04 	addi	r4,r2,40
   4e3b4:	e0bffd17 	ldw	r2,-12(fp)
   4e3b8:	11c00217 	ldw	r7,8(r2)
   4e3bc:	e17ffe17 	ldw	r5,-8(fp)
   4e3c0:	e1bfff17 	ldw	r6,-4(fp)
   4e3c4:	004e87c0 	call	4e87c <altera_avalon_uart_read>
      fd->fd_flags);
}
   4e3c8:	e037883a 	mov	sp,fp
   4e3cc:	dfc00117 	ldw	ra,4(sp)
   4e3d0:	df000017 	ldw	fp,0(sp)
   4e3d4:	dec00204 	addi	sp,sp,8
   4e3d8:	f800283a 	ret

0004e3dc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4e3dc:	defffa04 	addi	sp,sp,-24
   4e3e0:	dfc00515 	stw	ra,20(sp)
   4e3e4:	df000415 	stw	fp,16(sp)
   4e3e8:	df000404 	addi	fp,sp,16
   4e3ec:	e13ffd15 	stw	r4,-12(fp)
   4e3f0:	e17ffe15 	stw	r5,-8(fp)
   4e3f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4e3f8:	e0bffd17 	ldw	r2,-12(fp)
   4e3fc:	10800017 	ldw	r2,0(r2)
   4e400:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   4e404:	e0bffc17 	ldw	r2,-16(fp)
   4e408:	11000a04 	addi	r4,r2,40
   4e40c:	e0bffd17 	ldw	r2,-12(fp)
   4e410:	11c00217 	ldw	r7,8(r2)
   4e414:	e17ffe17 	ldw	r5,-8(fp)
   4e418:	e1bfff17 	ldw	r6,-4(fp)
   4e41c:	004eb0c0 	call	4eb0c <altera_avalon_uart_write>
      fd->fd_flags);
}
   4e420:	e037883a 	mov	sp,fp
   4e424:	dfc00117 	ldw	ra,4(sp)
   4e428:	df000017 	ldw	fp,0(sp)
   4e42c:	dec00204 	addi	sp,sp,8
   4e430:	f800283a 	ret

0004e434 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   4e434:	defffc04 	addi	sp,sp,-16
   4e438:	dfc00315 	stw	ra,12(sp)
   4e43c:	df000215 	stw	fp,8(sp)
   4e440:	df000204 	addi	fp,sp,8
   4e444:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4e448:	e0bfff17 	ldw	r2,-4(fp)
   4e44c:	10800017 	ldw	r2,0(r2)
   4e450:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   4e454:	e0bffe17 	ldw	r2,-8(fp)
   4e458:	11000a04 	addi	r4,r2,40
   4e45c:	e0bfff17 	ldw	r2,-4(fp)
   4e460:	11400217 	ldw	r5,8(r2)
   4e464:	004e81c0 	call	4e81c <altera_avalon_uart_close>
}
   4e468:	e037883a 	mov	sp,fp
   4e46c:	dfc00117 	ldw	ra,4(sp)
   4e470:	df000017 	ldw	fp,0(sp)
   4e474:	dec00204 	addi	sp,sp,8
   4e478:	f800283a 	ret

0004e47c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   4e47c:	defff704 	addi	sp,sp,-36
   4e480:	dfc00815 	stw	ra,32(sp)
   4e484:	df000715 	stw	fp,28(sp)
   4e488:	df000704 	addi	fp,sp,28
   4e48c:	e13ffc15 	stw	r4,-16(fp)
   4e490:	e17ffd15 	stw	r5,-12(fp)
   4e494:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
   4e498:	e0bffc17 	ldw	r2,-16(fp)
   4e49c:	10800017 	ldw	r2,0(r2)
   4e4a0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   4e4a4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4e4a8:	1004c03a 	cmpne	r2,r2,zero
   4e4ac:	1000061e 	bne	r2,zero,4e4c8 <altera_avalon_uart_init+0x4c>
   4e4b0:	0005883a 	mov	r2,zero
   4e4b4:	1004c03a 	cmpne	r2,r2,zero
   4e4b8:	1000031e 	bne	r2,zero,4e4c8 <altera_avalon_uart_init+0x4c>
   4e4bc:	0005883a 	mov	r2,zero
   4e4c0:	1005003a 	cmpeq	r2,r2,zero
   4e4c4:	1000031e 	bne	r2,zero,4e4d4 <altera_avalon_uart_init+0x58>
   4e4c8:	00800044 	movi	r2,1
   4e4cc:	e0bfff15 	stw	r2,-4(fp)
   4e4d0:	00000106 	br	4e4d8 <altera_avalon_uart_init+0x5c>
   4e4d4:	e03fff15 	stw	zero,-4(fp)
   4e4d8:	e0bfff17 	ldw	r2,-4(fp)
   4e4dc:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   4e4e0:	e0bffa17 	ldw	r2,-24(fp)
   4e4e4:	1004c03a 	cmpne	r2,r2,zero
   4e4e8:	1000111e 	bne	r2,zero,4e530 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   4e4ec:	e0fffc17 	ldw	r3,-16(fp)
   4e4f0:	00832004 	movi	r2,3200
   4e4f4:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   4e4f8:	e0bffb17 	ldw	r2,-20(fp)
   4e4fc:	11000304 	addi	r4,r2,12
   4e500:	e0bffc17 	ldw	r2,-16(fp)
   4e504:	10800117 	ldw	r2,4(r2)
   4e508:	1007883a 	mov	r3,r2
   4e50c:	2005883a 	mov	r2,r4
   4e510:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   4e514:	d8000015 	stw	zero,0(sp)
   4e518:	e13ffd17 	ldw	r4,-12(fp)
   4e51c:	e17ffe17 	ldw	r5,-8(fp)
   4e520:	01800174 	movhi	r6,5
   4e524:	31b95104 	addi	r6,r6,-6844
   4e528:	e1fffc17 	ldw	r7,-16(fp)
   4e52c:	004f3440 	call	4f344 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   4e530:	e037883a 	mov	sp,fp
   4e534:	dfc00117 	ldw	ra,4(sp)
   4e538:	df000017 	ldw	fp,0(sp)
   4e53c:	dec00204 	addi	sp,sp,8
   4e540:	f800283a 	ret

0004e544 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   4e544:	defffa04 	addi	sp,sp,-24
   4e548:	dfc00515 	stw	ra,20(sp)
   4e54c:	df000415 	stw	fp,16(sp)
   4e550:	df000404 	addi	fp,sp,16
   4e554:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   4e558:	e0bfff17 	ldw	r2,-4(fp)
   4e55c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
   4e560:	e0bffd17 	ldw	r2,-12(fp)
   4e564:	10800017 	ldw	r2,0(r2)
   4e568:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   4e56c:	e0bffc17 	ldw	r2,-16(fp)
   4e570:	10800204 	addi	r2,r2,8
   4e574:	10800037 	ldwio	r2,0(r2)
   4e578:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   4e57c:	e0bffc17 	ldw	r2,-16(fp)
   4e580:	10800204 	addi	r2,r2,8
   4e584:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   4e588:	e0bffc17 	ldw	r2,-16(fp)
   4e58c:	10800204 	addi	r2,r2,8
   4e590:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   4e594:	e0bffe17 	ldw	r2,-8(fp)
   4e598:	1080200c 	andi	r2,r2,128
   4e59c:	1005003a 	cmpeq	r2,r2,zero
   4e5a0:	1000031e 	bne	r2,zero,4e5b0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   4e5a4:	e13ffd17 	ldw	r4,-12(fp)
   4e5a8:	e17ffe17 	ldw	r5,-8(fp)
   4e5ac:	004e5e00 	call	4e5e0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   4e5b0:	e0bffe17 	ldw	r2,-8(fp)
   4e5b4:	1081100c 	andi	r2,r2,1088
   4e5b8:	1005003a 	cmpeq	r2,r2,zero
   4e5bc:	1000031e 	bne	r2,zero,4e5cc <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   4e5c0:	e13ffd17 	ldw	r4,-12(fp)
   4e5c4:	e17ffe17 	ldw	r5,-8(fp)
   4e5c8:	004e6c00 	call	4e6c0 <altera_avalon_uart_txirq>
  }
  

}
   4e5cc:	e037883a 	mov	sp,fp
   4e5d0:	dfc00117 	ldw	ra,4(sp)
   4e5d4:	df000017 	ldw	fp,0(sp)
   4e5d8:	dec00204 	addi	sp,sp,8
   4e5dc:	f800283a 	ret

0004e5e0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4e5e0:	defffc04 	addi	sp,sp,-16
   4e5e4:	df000315 	stw	fp,12(sp)
   4e5e8:	df000304 	addi	fp,sp,12
   4e5ec:	e13ffe15 	stw	r4,-8(fp)
   4e5f0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   4e5f4:	e0bfff17 	ldw	r2,-4(fp)
   4e5f8:	108000cc 	andi	r2,r2,3
   4e5fc:	1004c03a 	cmpne	r2,r2,zero
   4e600:	10002b1e 	bne	r2,zero,4e6b0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   4e604:	e0bffe17 	ldw	r2,-8(fp)
   4e608:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4e60c:	e0bffe17 	ldw	r2,-8(fp)
   4e610:	10800317 	ldw	r2,12(r2)
   4e614:	10800044 	addi	r2,r2,1
   4e618:	10800fcc 	andi	r2,r2,63
   4e61c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   4e620:	e0bffe17 	ldw	r2,-8(fp)
   4e624:	11000317 	ldw	r4,12(r2)
   4e628:	e0bffe17 	ldw	r2,-8(fp)
   4e62c:	10800017 	ldw	r2,0(r2)
   4e630:	10800037 	ldwio	r2,0(r2)
   4e634:	1007883a 	mov	r3,r2
   4e638:	e0bffe17 	ldw	r2,-8(fp)
   4e63c:	2085883a 	add	r2,r4,r2
   4e640:	10800704 	addi	r2,r2,28
   4e644:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   4e648:	e0fffe17 	ldw	r3,-8(fp)
   4e64c:	e0bffd17 	ldw	r2,-12(fp)
   4e650:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4e654:	e0bffe17 	ldw	r2,-8(fp)
   4e658:	10800317 	ldw	r2,12(r2)
   4e65c:	10800044 	addi	r2,r2,1
   4e660:	10800fcc 	andi	r2,r2,63
   4e664:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   4e668:	e0bffe17 	ldw	r2,-8(fp)
   4e66c:	10c00217 	ldw	r3,8(r2)
   4e670:	e0bffd17 	ldw	r2,-12(fp)
   4e674:	18800e1e 	bne	r3,r2,4e6b0 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4e678:	e0bffe17 	ldw	r2,-8(fp)
   4e67c:	10c00117 	ldw	r3,4(r2)
   4e680:	00bfdfc4 	movi	r2,-129
   4e684:	1886703a 	and	r3,r3,r2
   4e688:	e0bffe17 	ldw	r2,-8(fp)
   4e68c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   4e690:	e0bffe17 	ldw	r2,-8(fp)
   4e694:	10800017 	ldw	r2,0(r2)
   4e698:	11000304 	addi	r4,r2,12
   4e69c:	e0bffe17 	ldw	r2,-8(fp)
   4e6a0:	10800117 	ldw	r2,4(r2)
   4e6a4:	1007883a 	mov	r3,r2
   4e6a8:	2005883a 	mov	r2,r4
   4e6ac:	10c00035 	stwio	r3,0(r2)
  }   
}
   4e6b0:	e037883a 	mov	sp,fp
   4e6b4:	df000017 	ldw	fp,0(sp)
   4e6b8:	dec00104 	addi	sp,sp,4
   4e6bc:	f800283a 	ret

0004e6c0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4e6c0:	defffd04 	addi	sp,sp,-12
   4e6c4:	df000215 	stw	fp,8(sp)
   4e6c8:	df000204 	addi	fp,sp,8
   4e6cc:	e13ffe15 	stw	r4,-8(fp)
   4e6d0:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   4e6d4:	e0bffe17 	ldw	r2,-8(fp)
   4e6d8:	10c00417 	ldw	r3,16(r2)
   4e6dc:	e0bffe17 	ldw	r2,-8(fp)
   4e6e0:	10800517 	ldw	r2,20(r2)
   4e6e4:	18803626 	beq	r3,r2,4e7c0 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4e6e8:	e0bffe17 	ldw	r2,-8(fp)
   4e6ec:	10800617 	ldw	r2,24(r2)
   4e6f0:	1080008c 	andi	r2,r2,2
   4e6f4:	1005003a 	cmpeq	r2,r2,zero
   4e6f8:	1000041e 	bne	r2,zero,4e70c <altera_avalon_uart_txirq+0x4c>
   4e6fc:	e0bfff17 	ldw	r2,-4(fp)
   4e700:	1082000c 	andi	r2,r2,2048
   4e704:	1005003a 	cmpeq	r2,r2,zero
   4e708:	10001e1e 	bne	r2,zero,4e784 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   4e70c:	e0bffe17 	ldw	r2,-8(fp)
   4e710:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   4e714:	e0bffe17 	ldw	r2,-8(fp)
   4e718:	10800017 	ldw	r2,0(r2)
   4e71c:	11000104 	addi	r4,r2,4
   4e720:	e0bffe17 	ldw	r2,-8(fp)
   4e724:	10c00417 	ldw	r3,16(r2)
   4e728:	e0bffe17 	ldw	r2,-8(fp)
   4e72c:	1885883a 	add	r2,r3,r2
   4e730:	10801704 	addi	r2,r2,92
   4e734:	10800003 	ldbu	r2,0(r2)
   4e738:	10c03fcc 	andi	r3,r2,255
   4e73c:	2005883a 	mov	r2,r4
   4e740:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   4e744:	e0bffe17 	ldw	r2,-8(fp)
   4e748:	10800417 	ldw	r2,16(r2)
   4e74c:	10c00044 	addi	r3,r2,1
   4e750:	e0bffe17 	ldw	r2,-8(fp)
   4e754:	10c00415 	stw	r3,16(r2)
   4e758:	e0bffe17 	ldw	r2,-8(fp)
   4e75c:	10800417 	ldw	r2,16(r2)
   4e760:	10c00fcc 	andi	r3,r2,63
   4e764:	e0bffe17 	ldw	r2,-8(fp)
   4e768:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4e76c:	e0bffe17 	ldw	r2,-8(fp)
   4e770:	10800117 	ldw	r2,4(r2)
   4e774:	10c01014 	ori	r3,r2,64
   4e778:	e0bffe17 	ldw	r2,-8(fp)
   4e77c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4e780:	00000f06 	br	4e7c0 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   4e784:	e0bffe17 	ldw	r2,-8(fp)
   4e788:	10800017 	ldw	r2,0(r2)
   4e78c:	10800204 	addi	r2,r2,8
   4e790:	10800037 	ldwio	r2,0(r2)
   4e794:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4e798:	e0bfff17 	ldw	r2,-4(fp)
   4e79c:	1082000c 	andi	r2,r2,2048
   4e7a0:	1004c03a 	cmpne	r2,r2,zero
   4e7a4:	1000061e 	bne	r2,zero,4e7c0 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4e7a8:	e0bffe17 	ldw	r2,-8(fp)
   4e7ac:	10c00117 	ldw	r3,4(r2)
   4e7b0:	00bfefc4 	movi	r2,-65
   4e7b4:	1886703a 	and	r3,r3,r2
   4e7b8:	e0bffe17 	ldw	r2,-8(fp)
   4e7bc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   4e7c0:	e0bffe17 	ldw	r2,-8(fp)
   4e7c4:	10c00417 	ldw	r3,16(r2)
   4e7c8:	e0bffe17 	ldw	r2,-8(fp)
   4e7cc:	10800517 	ldw	r2,20(r2)
   4e7d0:	1880061e 	bne	r3,r2,4e7ec <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4e7d4:	e0bffe17 	ldw	r2,-8(fp)
   4e7d8:	10c00117 	ldw	r3,4(r2)
   4e7dc:	00beefc4 	movi	r2,-1089
   4e7e0:	1886703a 	and	r3,r3,r2
   4e7e4:	e0bffe17 	ldw	r2,-8(fp)
   4e7e8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4e7ec:	e0bffe17 	ldw	r2,-8(fp)
   4e7f0:	10800017 	ldw	r2,0(r2)
   4e7f4:	11000304 	addi	r4,r2,12
   4e7f8:	e0bffe17 	ldw	r2,-8(fp)
   4e7fc:	10800117 	ldw	r2,4(r2)
   4e800:	1007883a 	mov	r3,r2
   4e804:	2005883a 	mov	r2,r4
   4e808:	10c00035 	stwio	r3,0(r2)
}
   4e80c:	e037883a 	mov	sp,fp
   4e810:	df000017 	ldw	fp,0(sp)
   4e814:	dec00104 	addi	sp,sp,4
   4e818:	f800283a 	ret

0004e81c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   4e81c:	defffc04 	addi	sp,sp,-16
   4e820:	df000315 	stw	fp,12(sp)
   4e824:	df000304 	addi	fp,sp,12
   4e828:	e13ffd15 	stw	r4,-12(fp)
   4e82c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4e830:	00000706 	br	4e850 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4e834:	e0bffe17 	ldw	r2,-8(fp)
   4e838:	1090000c 	andi	r2,r2,16384
   4e83c:	1005003a 	cmpeq	r2,r2,zero
   4e840:	1000031e 	bne	r2,zero,4e850 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
   4e844:	00bffd44 	movi	r2,-11
   4e848:	e0bfff15 	stw	r2,-4(fp)
   4e84c:	00000606 	br	4e868 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4e850:	e0bffd17 	ldw	r2,-12(fp)
   4e854:	10c00417 	ldw	r3,16(r2)
   4e858:	e0bffd17 	ldw	r2,-12(fp)
   4e85c:	10800517 	ldw	r2,20(r2)
   4e860:	18bff41e 	bne	r3,r2,4e834 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4e864:	e03fff15 	stw	zero,-4(fp)
   4e868:	e0bfff17 	ldw	r2,-4(fp)
}
   4e86c:	e037883a 	mov	sp,fp
   4e870:	df000017 	ldw	fp,0(sp)
   4e874:	dec00104 	addi	sp,sp,4
   4e878:	f800283a 	ret

0004e87c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   4e87c:	defff004 	addi	sp,sp,-64
   4e880:	dfc00f15 	stw	ra,60(sp)
   4e884:	df000e15 	stw	fp,56(sp)
   4e888:	df000e04 	addi	fp,sp,56
   4e88c:	e13ffb15 	stw	r4,-20(fp)
   4e890:	e17ffc15 	stw	r5,-16(fp)
   4e894:	e1bffd15 	stw	r6,-12(fp)
   4e898:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   4e89c:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
   4e8a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   4e8a4:	e0bffe17 	ldw	r2,-8(fp)
   4e8a8:	1090000c 	andi	r2,r2,16384
   4e8ac:	1005003a 	cmpeq	r2,r2,zero
   4e8b0:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   4e8b4:	e0bffb17 	ldw	r2,-20(fp)
   4e8b8:	10800217 	ldw	r2,8(r2)
   4e8bc:	10800044 	addi	r2,r2,1
   4e8c0:	10800fcc 	andi	r2,r2,63
   4e8c4:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4e8c8:	00001906 	br	4e930 <altera_avalon_uart_read+0xb4>
    {
      count++;
   4e8cc:	e0bff617 	ldw	r2,-40(fp)
   4e8d0:	10800044 	addi	r2,r2,1
   4e8d4:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   4e8d8:	e0bffb17 	ldw	r2,-20(fp)
   4e8dc:	10c00217 	ldw	r3,8(r2)
   4e8e0:	e0bffb17 	ldw	r2,-20(fp)
   4e8e4:	1885883a 	add	r2,r3,r2
   4e8e8:	10800704 	addi	r2,r2,28
   4e8ec:	10800003 	ldbu	r2,0(r2)
   4e8f0:	1007883a 	mov	r3,r2
   4e8f4:	e0bffc17 	ldw	r2,-16(fp)
   4e8f8:	10c00005 	stb	r3,0(r2)
   4e8fc:	e0bffc17 	ldw	r2,-16(fp)
   4e900:	10800044 	addi	r2,r2,1
   4e904:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   4e908:	e0bffb17 	ldw	r2,-20(fp)
   4e90c:	10800217 	ldw	r2,8(r2)
   4e910:	10c00044 	addi	r3,r2,1
   4e914:	e0bffb17 	ldw	r2,-20(fp)
   4e918:	10c00215 	stw	r3,8(r2)
   4e91c:	e0bffb17 	ldw	r2,-20(fp)
   4e920:	10800217 	ldw	r2,8(r2)
   4e924:	10c00fcc 	andi	r3,r2,63
   4e928:	e0bffb17 	ldw	r2,-20(fp)
   4e92c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4e930:	e0fff617 	ldw	r3,-40(fp)
   4e934:	e0bffd17 	ldw	r2,-12(fp)
   4e938:	1880050e 	bge	r3,r2,4e950 <altera_avalon_uart_read+0xd4>
   4e93c:	e0bffb17 	ldw	r2,-20(fp)
   4e940:	10c00217 	ldw	r3,8(r2)
   4e944:	e0bffb17 	ldw	r2,-20(fp)
   4e948:	10800317 	ldw	r2,12(r2)
   4e94c:	18bfdf1e 	bne	r3,r2,4e8cc <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   4e950:	e0bff617 	ldw	r2,-40(fp)
   4e954:	1004c03a 	cmpne	r2,r2,zero
   4e958:	1000271e 	bne	r2,zero,4e9f8 <altera_avalon_uart_read+0x17c>
   4e95c:	e0bffb17 	ldw	r2,-20(fp)
   4e960:	10c00217 	ldw	r3,8(r2)
   4e964:	e0bffb17 	ldw	r2,-20(fp)
   4e968:	10800317 	ldw	r2,12(r2)
   4e96c:	1880221e 	bne	r3,r2,4e9f8 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
   4e970:	e0bff917 	ldw	r2,-28(fp)
   4e974:	1004c03a 	cmpne	r2,r2,zero
   4e978:	1000061e 	bne	r2,zero,4e994 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   4e97c:	004eaac0 	call	4eaac <alt_get_errno>
   4e980:	00c002c4 	movi	r3,11
   4e984:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   4e988:	00800044 	movi	r2,1
   4e98c:	e0bff705 	stb	r2,-36(fp)
        break;
   4e990:	00001f06 	br	4ea10 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e994:	0005303a 	rdctl	r2,status
   4e998:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e99c:	e0fff517 	ldw	r3,-44(fp)
   4e9a0:	00bfff84 	movi	r2,-2
   4e9a4:	1884703a 	and	r2,r3,r2
   4e9a8:	1001703a 	wrctl	status,r2
  
  return context;
   4e9ac:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   4e9b0:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4e9b4:	e0bffb17 	ldw	r2,-20(fp)
   4e9b8:	10800117 	ldw	r2,4(r2)
   4e9bc:	10c02014 	ori	r3,r2,128
   4e9c0:	e0bffb17 	ldw	r2,-20(fp)
   4e9c4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4e9c8:	e0bffb17 	ldw	r2,-20(fp)
   4e9cc:	10800017 	ldw	r2,0(r2)
   4e9d0:	11000304 	addi	r4,r2,12
   4e9d4:	e0bffb17 	ldw	r2,-20(fp)
   4e9d8:	10800117 	ldw	r2,4(r2)
   4e9dc:	1007883a 	mov	r3,r2
   4e9e0:	2005883a 	mov	r2,r4
   4e9e4:	10c00035 	stwio	r3,0(r2)
   4e9e8:	e0bffa17 	ldw	r2,-24(fp)
   4e9ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e9f0:	e0bff417 	ldw	r2,-48(fp)
   4e9f4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   4e9f8:	e0bff617 	ldw	r2,-40(fp)
   4e9fc:	1004c03a 	cmpne	r2,r2,zero
   4ea00:	1000031e 	bne	r2,zero,4ea10 <altera_avalon_uart_read+0x194>
   4ea04:	e0bffd17 	ldw	r2,-12(fp)
   4ea08:	1004c03a 	cmpne	r2,r2,zero
   4ea0c:	103fc81e 	bne	r2,zero,4e930 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ea10:	0005303a 	rdctl	r2,status
   4ea14:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ea18:	e0fff317 	ldw	r3,-52(fp)
   4ea1c:	00bfff84 	movi	r2,-2
   4ea20:	1884703a 	and	r2,r3,r2
   4ea24:	1001703a 	wrctl	status,r2
  
  return context;
   4ea28:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   4ea2c:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4ea30:	e0bffb17 	ldw	r2,-20(fp)
   4ea34:	10800117 	ldw	r2,4(r2)
   4ea38:	10c02014 	ori	r3,r2,128
   4ea3c:	e0bffb17 	ldw	r2,-20(fp)
   4ea40:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4ea44:	e0bffb17 	ldw	r2,-20(fp)
   4ea48:	10800017 	ldw	r2,0(r2)
   4ea4c:	11000304 	addi	r4,r2,12
   4ea50:	e0bffb17 	ldw	r2,-20(fp)
   4ea54:	10800117 	ldw	r2,4(r2)
   4ea58:	1007883a 	mov	r3,r2
   4ea5c:	2005883a 	mov	r2,r4
   4ea60:	10c00035 	stwio	r3,0(r2)
   4ea64:	e0bffa17 	ldw	r2,-24(fp)
   4ea68:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ea6c:	e0bff217 	ldw	r2,-56(fp)
   4ea70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   4ea74:	e0bff703 	ldbu	r2,-36(fp)
   4ea78:	1005003a 	cmpeq	r2,r2,zero
   4ea7c:	1000031e 	bne	r2,zero,4ea8c <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
   4ea80:	00bffd04 	movi	r2,-12
   4ea84:	e0bfff15 	stw	r2,-4(fp)
   4ea88:	00000206 	br	4ea94 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
   4ea8c:	e0bff617 	ldw	r2,-40(fp)
   4ea90:	e0bfff15 	stw	r2,-4(fp)
   4ea94:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4ea98:	e037883a 	mov	sp,fp
   4ea9c:	dfc00117 	ldw	ra,4(sp)
   4eaa0:	df000017 	ldw	fp,0(sp)
   4eaa4:	dec00204 	addi	sp,sp,8
   4eaa8:	f800283a 	ret

0004eaac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eaac:	defffd04 	addi	sp,sp,-12
   4eab0:	dfc00215 	stw	ra,8(sp)
   4eab4:	df000115 	stw	fp,4(sp)
   4eab8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4eabc:	00800174 	movhi	r2,5
   4eac0:	10874304 	addi	r2,r2,7436
   4eac4:	10800017 	ldw	r2,0(r2)
   4eac8:	1005003a 	cmpeq	r2,r2,zero
   4eacc:	1000061e 	bne	r2,zero,4eae8 <alt_get_errno+0x3c>
   4ead0:	00800174 	movhi	r2,5
   4ead4:	10874304 	addi	r2,r2,7436
   4ead8:	10800017 	ldw	r2,0(r2)
   4eadc:	103ee83a 	callr	r2
   4eae0:	e0bfff15 	stw	r2,-4(fp)
   4eae4:	00000306 	br	4eaf4 <alt_get_errno+0x48>
   4eae8:	00800174 	movhi	r2,5
   4eaec:	108e5904 	addi	r2,r2,14692
   4eaf0:	e0bfff15 	stw	r2,-4(fp)
   4eaf4:	e0bfff17 	ldw	r2,-4(fp)
}
   4eaf8:	e037883a 	mov	sp,fp
   4eafc:	dfc00117 	ldw	ra,4(sp)
   4eb00:	df000017 	ldw	fp,0(sp)
   4eb04:	dec00204 	addi	sp,sp,8
   4eb08:	f800283a 	ret

0004eb0c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   4eb0c:	defff204 	addi	sp,sp,-56
   4eb10:	dfc00d15 	stw	ra,52(sp)
   4eb14:	df000c15 	stw	fp,48(sp)
   4eb18:	df000c04 	addi	fp,sp,48
   4eb1c:	e13ffc15 	stw	r4,-16(fp)
   4eb20:	e17ffd15 	stw	r5,-12(fp)
   4eb24:	e1bffe15 	stw	r6,-8(fp)
   4eb28:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   4eb2c:	e0bffe17 	ldw	r2,-8(fp)
   4eb30:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   4eb34:	e0bfff17 	ldw	r2,-4(fp)
   4eb38:	1090000c 	andi	r2,r2,16384
   4eb3c:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4eb40:	00004006 	br	4ec44 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4eb44:	e0bffc17 	ldw	r2,-16(fp)
   4eb48:	10800517 	ldw	r2,20(r2)
   4eb4c:	10800044 	addi	r2,r2,1
   4eb50:	10800fcc 	andi	r2,r2,63
   4eb54:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   4eb58:	e0bffc17 	ldw	r2,-16(fp)
   4eb5c:	10c00417 	ldw	r3,16(r2)
   4eb60:	e0bff917 	ldw	r2,-28(fp)
   4eb64:	1880251e 	bne	r3,r2,4ebfc <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
   4eb68:	e0bffa17 	ldw	r2,-24(fp)
   4eb6c:	1005003a 	cmpeq	r2,r2,zero
   4eb70:	1000051e 	bne	r2,zero,4eb88 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   4eb74:	004ecd40 	call	4ecd4 <alt_get_errno>
   4eb78:	1007883a 	mov	r3,r2
   4eb7c:	008002c4 	movi	r2,11
   4eb80:	18800015 	stw	r2,0(r3)
        break;
   4eb84:	00003206 	br	4ec50 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4eb88:	0005303a 	rdctl	r2,status
   4eb8c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4eb90:	e0fff717 	ldw	r3,-36(fp)
   4eb94:	00bfff84 	movi	r2,-2
   4eb98:	1884703a 	and	r2,r3,r2
   4eb9c:	1001703a 	wrctl	status,r2
  
  return context;
   4eba0:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   4eba4:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4eba8:	e0bffc17 	ldw	r2,-16(fp)
   4ebac:	10800117 	ldw	r2,4(r2)
   4ebb0:	10c11014 	ori	r3,r2,1088
   4ebb4:	e0bffc17 	ldw	r2,-16(fp)
   4ebb8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4ebbc:	e0bffc17 	ldw	r2,-16(fp)
   4ebc0:	10800017 	ldw	r2,0(r2)
   4ebc4:	11000304 	addi	r4,r2,12
   4ebc8:	e0bffc17 	ldw	r2,-16(fp)
   4ebcc:	10800117 	ldw	r2,4(r2)
   4ebd0:	1007883a 	mov	r3,r2
   4ebd4:	2005883a 	mov	r2,r4
   4ebd8:	10c00035 	stwio	r3,0(r2)
   4ebdc:	e0bffb17 	ldw	r2,-20(fp)
   4ebe0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ebe4:	e0bff617 	ldw	r2,-40(fp)
   4ebe8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   4ebec:	e0bffc17 	ldw	r2,-16(fp)
   4ebf0:	10c00417 	ldw	r3,16(r2)
   4ebf4:	e0bff917 	ldw	r2,-28(fp)
   4ebf8:	18bffc26 	beq	r3,r2,4ebec <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
   4ebfc:	e0bff817 	ldw	r2,-32(fp)
   4ec00:	10bfffc4 	addi	r2,r2,-1
   4ec04:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   4ec08:	e0bffc17 	ldw	r2,-16(fp)
   4ec0c:	10c00517 	ldw	r3,20(r2)
   4ec10:	e0bffd17 	ldw	r2,-12(fp)
   4ec14:	10800003 	ldbu	r2,0(r2)
   4ec18:	1009883a 	mov	r4,r2
   4ec1c:	e0bffc17 	ldw	r2,-16(fp)
   4ec20:	1885883a 	add	r2,r3,r2
   4ec24:	10801704 	addi	r2,r2,92
   4ec28:	11000005 	stb	r4,0(r2)
   4ec2c:	e0bffd17 	ldw	r2,-12(fp)
   4ec30:	10800044 	addi	r2,r2,1
   4ec34:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   4ec38:	e0fffc17 	ldw	r3,-16(fp)
   4ec3c:	e0bff917 	ldw	r2,-28(fp)
   4ec40:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4ec44:	e0bff817 	ldw	r2,-32(fp)
   4ec48:	1004c03a 	cmpne	r2,r2,zero
   4ec4c:	103fbd1e 	bne	r2,zero,4eb44 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ec50:	0005303a 	rdctl	r2,status
   4ec54:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ec58:	e0fff517 	ldw	r3,-44(fp)
   4ec5c:	00bfff84 	movi	r2,-2
   4ec60:	1884703a 	and	r2,r3,r2
   4ec64:	1001703a 	wrctl	status,r2
  
  return context;
   4ec68:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   4ec6c:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4ec70:	e0bffc17 	ldw	r2,-16(fp)
   4ec74:	10800117 	ldw	r2,4(r2)
   4ec78:	10c11014 	ori	r3,r2,1088
   4ec7c:	e0bffc17 	ldw	r2,-16(fp)
   4ec80:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4ec84:	e0bffc17 	ldw	r2,-16(fp)
   4ec88:	10800017 	ldw	r2,0(r2)
   4ec8c:	11000304 	addi	r4,r2,12
   4ec90:	e0bffc17 	ldw	r2,-16(fp)
   4ec94:	10800117 	ldw	r2,4(r2)
   4ec98:	1007883a 	mov	r3,r2
   4ec9c:	2005883a 	mov	r2,r4
   4eca0:	10c00035 	stwio	r3,0(r2)
   4eca4:	e0bffb17 	ldw	r2,-20(fp)
   4eca8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ecac:	e0bff417 	ldw	r2,-48(fp)
   4ecb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   4ecb4:	e0fffe17 	ldw	r3,-8(fp)
   4ecb8:	e0bff817 	ldw	r2,-32(fp)
   4ecbc:	1885c83a 	sub	r2,r3,r2
}
   4ecc0:	e037883a 	mov	sp,fp
   4ecc4:	dfc00117 	ldw	ra,4(sp)
   4ecc8:	df000017 	ldw	fp,0(sp)
   4eccc:	dec00204 	addi	sp,sp,8
   4ecd0:	f800283a 	ret

0004ecd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ecd4:	defffd04 	addi	sp,sp,-12
   4ecd8:	dfc00215 	stw	ra,8(sp)
   4ecdc:	df000115 	stw	fp,4(sp)
   4ece0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4ece4:	00800174 	movhi	r2,5
   4ece8:	10874304 	addi	r2,r2,7436
   4ecec:	10800017 	ldw	r2,0(r2)
   4ecf0:	1005003a 	cmpeq	r2,r2,zero
   4ecf4:	1000061e 	bne	r2,zero,4ed10 <alt_get_errno+0x3c>
   4ecf8:	00800174 	movhi	r2,5
   4ecfc:	10874304 	addi	r2,r2,7436
   4ed00:	10800017 	ldw	r2,0(r2)
   4ed04:	103ee83a 	callr	r2
   4ed08:	e0bfff15 	stw	r2,-4(fp)
   4ed0c:	00000306 	br	4ed1c <alt_get_errno+0x48>
   4ed10:	00800174 	movhi	r2,5
   4ed14:	108e5904 	addi	r2,r2,14692
   4ed18:	e0bfff15 	stw	r2,-4(fp)
   4ed1c:	e0bfff17 	ldw	r2,-4(fp)
}
   4ed20:	e037883a 	mov	sp,fp
   4ed24:	dfc00117 	ldw	ra,4(sp)
   4ed28:	df000017 	ldw	fp,0(sp)
   4ed2c:	dec00204 	addi	sp,sp,8
   4ed30:	f800283a 	ret

0004ed34 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4ed34:	defff404 	addi	sp,sp,-48
   4ed38:	df000b15 	stw	fp,44(sp)
   4ed3c:	df000b04 	addi	fp,sp,44
   4ed40:	e13ffb15 	stw	r4,-20(fp)
   4ed44:	e17ffc15 	stw	r5,-16(fp)
   4ed48:	e1bffd15 	stw	r6,-12(fp)
   4ed4c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4ed50:	e03ff915 	stw	zero,-28(fp)
   4ed54:	00800174 	movhi	r2,5
   4ed58:	108e5e04 	addi	r2,r2,14712
   4ed5c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4ed60:	1005003a 	cmpeq	r2,r2,zero
   4ed64:	1000411e 	bne	r2,zero,4ee6c <alt_alarm_start+0x138>
  {
    if (alarm)
   4ed68:	e0bffb17 	ldw	r2,-20(fp)
   4ed6c:	1005003a 	cmpeq	r2,r2,zero
   4ed70:	10003b1e 	bne	r2,zero,4ee60 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4ed74:	e0fffb17 	ldw	r3,-20(fp)
   4ed78:	e0bffd17 	ldw	r2,-12(fp)
   4ed7c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4ed80:	e0fffb17 	ldw	r3,-20(fp)
   4ed84:	e0bffe17 	ldw	r2,-8(fp)
   4ed88:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ed8c:	0005303a 	rdctl	r2,status
   4ed90:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ed94:	e0fff817 	ldw	r3,-32(fp)
   4ed98:	00bfff84 	movi	r2,-2
   4ed9c:	1884703a 	and	r2,r3,r2
   4eda0:	1001703a 	wrctl	status,r2
  
  return context;
   4eda4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4eda8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4edac:	00800174 	movhi	r2,5
   4edb0:	108e5f04 	addi	r2,r2,14716
   4edb4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4edb8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4edbc:	e0fffc17 	ldw	r3,-16(fp)
   4edc0:	e0bff917 	ldw	r2,-28(fp)
   4edc4:	1885883a 	add	r2,r3,r2
   4edc8:	10c00044 	addi	r3,r2,1
   4edcc:	e0bffb17 	ldw	r2,-20(fp)
   4edd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4edd4:	e0bffb17 	ldw	r2,-20(fp)
   4edd8:	10c00217 	ldw	r3,8(r2)
   4eddc:	e0bff917 	ldw	r2,-28(fp)
   4ede0:	1880042e 	bgeu	r3,r2,4edf4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   4ede4:	e0fffb17 	ldw	r3,-20(fp)
   4ede8:	00800044 	movi	r2,1
   4edec:	18800405 	stb	r2,16(r3)
   4edf0:	00000206 	br	4edfc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   4edf4:	e0bffb17 	ldw	r2,-20(fp)
   4edf8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4edfc:	e0fffb17 	ldw	r3,-20(fp)
   4ee00:	00800174 	movhi	r2,5
   4ee04:	10874604 	addi	r2,r2,7448
   4ee08:	e0bff615 	stw	r2,-40(fp)
   4ee0c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ee10:	e0fff717 	ldw	r3,-36(fp)
   4ee14:	e0bff617 	ldw	r2,-40(fp)
   4ee18:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4ee1c:	e0bff617 	ldw	r2,-40(fp)
   4ee20:	10c00017 	ldw	r3,0(r2)
   4ee24:	e0bff717 	ldw	r2,-36(fp)
   4ee28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ee2c:	e0bff617 	ldw	r2,-40(fp)
   4ee30:	10c00017 	ldw	r3,0(r2)
   4ee34:	e0bff717 	ldw	r2,-36(fp)
   4ee38:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4ee3c:	e0fff617 	ldw	r3,-40(fp)
   4ee40:	e0bff717 	ldw	r2,-36(fp)
   4ee44:	18800015 	stw	r2,0(r3)
   4ee48:	e0bffa17 	ldw	r2,-24(fp)
   4ee4c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ee50:	e0bff517 	ldw	r2,-44(fp)
   4ee54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4ee58:	e03fff15 	stw	zero,-4(fp)
   4ee5c:	00000506 	br	4ee74 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4ee60:	00bffa84 	movi	r2,-22
   4ee64:	e0bfff15 	stw	r2,-4(fp)
   4ee68:	00000206 	br	4ee74 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   4ee6c:	00bfde84 	movi	r2,-134
   4ee70:	e0bfff15 	stw	r2,-4(fp)
   4ee74:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4ee78:	e037883a 	mov	sp,fp
   4ee7c:	df000017 	ldw	fp,0(sp)
   4ee80:	dec00104 	addi	sp,sp,4
   4ee84:	f800283a 	ret

0004ee88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4ee88:	defffe04 	addi	sp,sp,-8
   4ee8c:	df000115 	stw	fp,4(sp)
   4ee90:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4ee94:	e03fff15 	stw	zero,-4(fp)
   4ee98:	00000506 	br	4eeb0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4ee9c:	e0bfff17 	ldw	r2,-4(fp)
   4eea0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4eea4:	e0bfff17 	ldw	r2,-4(fp)
   4eea8:	10800804 	addi	r2,r2,32
   4eeac:	e0bfff15 	stw	r2,-4(fp)
   4eeb0:	e0bfff17 	ldw	r2,-4(fp)
   4eeb4:	10820030 	cmpltui	r2,r2,2048
   4eeb8:	103ff81e 	bne	r2,zero,4ee9c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4eebc:	e037883a 	mov	sp,fp
   4eec0:	df000017 	ldw	fp,0(sp)
   4eec4:	dec00104 	addi	sp,sp,4
   4eec8:	f800283a 	ret

0004eecc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4eecc:	defff904 	addi	sp,sp,-28
   4eed0:	dfc00615 	stw	ra,24(sp)
   4eed4:	df000515 	stw	fp,20(sp)
   4eed8:	df000504 	addi	fp,sp,20
   4eedc:	e13ffd15 	stw	r4,-12(fp)
   4eee0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4eee4:	e0bffd17 	ldw	r2,-12(fp)
   4eee8:	1005003a 	cmpeq	r2,r2,zero
   4eeec:	1000041e 	bne	r2,zero,4ef00 <alt_dev_llist_insert+0x34>
   4eef0:	e0bffd17 	ldw	r2,-12(fp)
   4eef4:	10800217 	ldw	r2,8(r2)
   4eef8:	1004c03a 	cmpne	r2,r2,zero
   4eefc:	1000071e 	bne	r2,zero,4ef1c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   4ef00:	004ef800 	call	4ef80 <alt_get_errno>
   4ef04:	1007883a 	mov	r3,r2
   4ef08:	00800584 	movi	r2,22
   4ef0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4ef10:	00bffa84 	movi	r2,-22
   4ef14:	e0bfff15 	stw	r2,-4(fp)
   4ef18:	00001306 	br	4ef68 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4ef1c:	e0fffd17 	ldw	r3,-12(fp)
   4ef20:	e0bffe17 	ldw	r2,-8(fp)
   4ef24:	e0bffb15 	stw	r2,-20(fp)
   4ef28:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ef2c:	e0fffc17 	ldw	r3,-16(fp)
   4ef30:	e0bffb17 	ldw	r2,-20(fp)
   4ef34:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4ef38:	e0bffb17 	ldw	r2,-20(fp)
   4ef3c:	10c00017 	ldw	r3,0(r2)
   4ef40:	e0bffc17 	ldw	r2,-16(fp)
   4ef44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ef48:	e0bffb17 	ldw	r2,-20(fp)
   4ef4c:	10c00017 	ldw	r3,0(r2)
   4ef50:	e0bffc17 	ldw	r2,-16(fp)
   4ef54:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4ef58:	e0fffb17 	ldw	r3,-20(fp)
   4ef5c:	e0bffc17 	ldw	r2,-16(fp)
   4ef60:	18800015 	stw	r2,0(r3)

  return 0;  
   4ef64:	e03fff15 	stw	zero,-4(fp)
   4ef68:	e0bfff17 	ldw	r2,-4(fp)
}
   4ef6c:	e037883a 	mov	sp,fp
   4ef70:	dfc00117 	ldw	ra,4(sp)
   4ef74:	df000017 	ldw	fp,0(sp)
   4ef78:	dec00204 	addi	sp,sp,8
   4ef7c:	f800283a 	ret

0004ef80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ef80:	defffd04 	addi	sp,sp,-12
   4ef84:	dfc00215 	stw	ra,8(sp)
   4ef88:	df000115 	stw	fp,4(sp)
   4ef8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4ef90:	00800174 	movhi	r2,5
   4ef94:	10874304 	addi	r2,r2,7436
   4ef98:	10800017 	ldw	r2,0(r2)
   4ef9c:	1005003a 	cmpeq	r2,r2,zero
   4efa0:	1000061e 	bne	r2,zero,4efbc <alt_get_errno+0x3c>
   4efa4:	00800174 	movhi	r2,5
   4efa8:	10874304 	addi	r2,r2,7436
   4efac:	10800017 	ldw	r2,0(r2)
   4efb0:	103ee83a 	callr	r2
   4efb4:	e0bfff15 	stw	r2,-4(fp)
   4efb8:	00000306 	br	4efc8 <alt_get_errno+0x48>
   4efbc:	00800174 	movhi	r2,5
   4efc0:	108e5904 	addi	r2,r2,14692
   4efc4:	e0bfff15 	stw	r2,-4(fp)
   4efc8:	e0bfff17 	ldw	r2,-4(fp)
}
   4efcc:	e037883a 	mov	sp,fp
   4efd0:	dfc00117 	ldw	ra,4(sp)
   4efd4:	df000017 	ldw	fp,0(sp)
   4efd8:	dec00204 	addi	sp,sp,8
   4efdc:	f800283a 	ret

0004efe0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4efe0:	defffd04 	addi	sp,sp,-12
   4efe4:	dfc00215 	stw	ra,8(sp)
   4efe8:	df000115 	stw	fp,4(sp)
   4efec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4eff0:	00bfff04 	movi	r2,-4
   4eff4:	00c00174 	movhi	r3,5
   4eff8:	18ff6b04 	addi	r3,r3,-596
   4effc:	1885883a 	add	r2,r3,r2
   4f000:	e0bfff15 	stw	r2,-4(fp)
   4f004:	00000606 	br	4f020 <_do_ctors+0x40>
        (*ctor) (); 
   4f008:	e0bfff17 	ldw	r2,-4(fp)
   4f00c:	10800017 	ldw	r2,0(r2)
   4f010:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4f014:	e0bfff17 	ldw	r2,-4(fp)
   4f018:	10bfff04 	addi	r2,r2,-4
   4f01c:	e0bfff15 	stw	r2,-4(fp)
   4f020:	e0ffff17 	ldw	r3,-4(fp)
   4f024:	00800174 	movhi	r2,5
   4f028:	10bf6a04 	addi	r2,r2,-600
   4f02c:	18bff62e 	bgeu	r3,r2,4f008 <_do_ctors+0x28>
        (*ctor) (); 
}
   4f030:	e037883a 	mov	sp,fp
   4f034:	dfc00117 	ldw	ra,4(sp)
   4f038:	df000017 	ldw	fp,0(sp)
   4f03c:	dec00204 	addi	sp,sp,8
   4f040:	f800283a 	ret

0004f044 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4f044:	defffd04 	addi	sp,sp,-12
   4f048:	dfc00215 	stw	ra,8(sp)
   4f04c:	df000115 	stw	fp,4(sp)
   4f050:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4f054:	00bfff04 	movi	r2,-4
   4f058:	00c00174 	movhi	r3,5
   4f05c:	18ff6b04 	addi	r3,r3,-596
   4f060:	1885883a 	add	r2,r3,r2
   4f064:	e0bfff15 	stw	r2,-4(fp)
   4f068:	00000606 	br	4f084 <_do_dtors+0x40>
        (*dtor) (); 
   4f06c:	e0bfff17 	ldw	r2,-4(fp)
   4f070:	10800017 	ldw	r2,0(r2)
   4f074:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4f078:	e0bfff17 	ldw	r2,-4(fp)
   4f07c:	10bfff04 	addi	r2,r2,-4
   4f080:	e0bfff15 	stw	r2,-4(fp)
   4f084:	e0ffff17 	ldw	r3,-4(fp)
   4f088:	00800174 	movhi	r2,5
   4f08c:	10bf6b04 	addi	r2,r2,-596
   4f090:	18bff62e 	bgeu	r3,r2,4f06c <_do_dtors+0x28>
        (*dtor) (); 
}
   4f094:	e037883a 	mov	sp,fp
   4f098:	dfc00117 	ldw	ra,4(sp)
   4f09c:	df000017 	ldw	fp,0(sp)
   4f0a0:	dec00204 	addi	sp,sp,8
   4f0a4:	f800283a 	ret

0004f0a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4f0a8:	defff904 	addi	sp,sp,-28
   4f0ac:	dfc00615 	stw	ra,24(sp)
   4f0b0:	df000515 	stw	fp,20(sp)
   4f0b4:	df000504 	addi	fp,sp,20
   4f0b8:	e13ffd15 	stw	r4,-12(fp)
   4f0bc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4f0c0:	e0bffe17 	ldw	r2,-8(fp)
   4f0c4:	10800017 	ldw	r2,0(r2)
   4f0c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4f0cc:	e13ffd17 	ldw	r4,-12(fp)
   4f0d0:	00437840 	call	43784 <strlen>
   4f0d4:	10800044 	addi	r2,r2,1
   4f0d8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f0dc:	00000d06 	br	4f114 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4f0e0:	e0bffc17 	ldw	r2,-16(fp)
   4f0e4:	11000217 	ldw	r4,8(r2)
   4f0e8:	e1bffb17 	ldw	r6,-20(fp)
   4f0ec:	e17ffd17 	ldw	r5,-12(fp)
   4f0f0:	004f9ec0 	call	4f9ec <memcmp>
   4f0f4:	1004c03a 	cmpne	r2,r2,zero
   4f0f8:	1000031e 	bne	r2,zero,4f108 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4f0fc:	e0bffc17 	ldw	r2,-16(fp)
   4f100:	e0bfff15 	stw	r2,-4(fp)
   4f104:	00000706 	br	4f124 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4f108:	e0bffc17 	ldw	r2,-16(fp)
   4f10c:	10800017 	ldw	r2,0(r2)
   4f110:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f114:	e0fffe17 	ldw	r3,-8(fp)
   4f118:	e0bffc17 	ldw	r2,-16(fp)
   4f11c:	10fff01e 	bne	r2,r3,4f0e0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4f120:	e03fff15 	stw	zero,-4(fp)
   4f124:	e0bfff17 	ldw	r2,-4(fp)
}
   4f128:	e037883a 	mov	sp,fp
   4f12c:	dfc00117 	ldw	ra,4(sp)
   4f130:	df000017 	ldw	fp,0(sp)
   4f134:	dec00204 	addi	sp,sp,8
   4f138:	f800283a 	ret

0004f13c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4f13c:	defffa04 	addi	sp,sp,-24
   4f140:	dfc00515 	stw	ra,20(sp)
   4f144:	df000415 	stw	fp,16(sp)
   4f148:	df000404 	addi	fp,sp,16
   4f14c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4f150:	00800174 	movhi	r2,5
   4f154:	10873e04 	addi	r2,r2,7416
   4f158:	10800017 	ldw	r2,0(r2)
   4f15c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f160:	00003306 	br	4f230 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   4f164:	e0bffd17 	ldw	r2,-12(fp)
   4f168:	11000217 	ldw	r4,8(r2)
   4f16c:	00437840 	call	43784 <strlen>
   4f170:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   4f174:	e0bffd17 	ldw	r2,-12(fp)
   4f178:	10c00217 	ldw	r3,8(r2)
   4f17c:	e0bffc17 	ldw	r2,-16(fp)
   4f180:	1885883a 	add	r2,r3,r2
   4f184:	10bfffc4 	addi	r2,r2,-1
   4f188:	10800003 	ldbu	r2,0(r2)
   4f18c:	10803fcc 	andi	r2,r2,255
   4f190:	1080201c 	xori	r2,r2,128
   4f194:	10bfe004 	addi	r2,r2,-128
   4f198:	10800bd8 	cmpnei	r2,r2,47
   4f19c:	1000031e 	bne	r2,zero,4f1ac <alt_find_file+0x70>
    {
      len -= 1;
   4f1a0:	e0bffc17 	ldw	r2,-16(fp)
   4f1a4:	10bfffc4 	addi	r2,r2,-1
   4f1a8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4f1ac:	e0bffc17 	ldw	r2,-16(fp)
   4f1b0:	1007883a 	mov	r3,r2
   4f1b4:	e0bffe17 	ldw	r2,-8(fp)
   4f1b8:	1885883a 	add	r2,r3,r2
   4f1bc:	10800003 	ldbu	r2,0(r2)
   4f1c0:	10803fcc 	andi	r2,r2,255
   4f1c4:	1080201c 	xori	r2,r2,128
   4f1c8:	10bfe004 	addi	r2,r2,-128
   4f1cc:	10800be0 	cmpeqi	r2,r2,47
   4f1d0:	10000a1e 	bne	r2,zero,4f1fc <alt_find_file+0xc0>
   4f1d4:	e0bffc17 	ldw	r2,-16(fp)
   4f1d8:	1007883a 	mov	r3,r2
   4f1dc:	e0bffe17 	ldw	r2,-8(fp)
   4f1e0:	1885883a 	add	r2,r3,r2
   4f1e4:	10800003 	ldbu	r2,0(r2)
   4f1e8:	10803fcc 	andi	r2,r2,255
   4f1ec:	1080201c 	xori	r2,r2,128
   4f1f0:	10bfe004 	addi	r2,r2,-128
   4f1f4:	1004c03a 	cmpne	r2,r2,zero
   4f1f8:	10000a1e 	bne	r2,zero,4f224 <alt_find_file+0xe8>
   4f1fc:	e0bffd17 	ldw	r2,-12(fp)
   4f200:	11000217 	ldw	r4,8(r2)
   4f204:	e1bffc17 	ldw	r6,-16(fp)
   4f208:	e17ffe17 	ldw	r5,-8(fp)
   4f20c:	004f9ec0 	call	4f9ec <memcmp>
   4f210:	1004c03a 	cmpne	r2,r2,zero
   4f214:	1000031e 	bne	r2,zero,4f224 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4f218:	e0bffd17 	ldw	r2,-12(fp)
   4f21c:	e0bfff15 	stw	r2,-4(fp)
   4f220:	00000806 	br	4f244 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4f224:	e0bffd17 	ldw	r2,-12(fp)
   4f228:	10800017 	ldw	r2,0(r2)
   4f22c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f230:	00c00174 	movhi	r3,5
   4f234:	18c73e04 	addi	r3,r3,7416
   4f238:	e0bffd17 	ldw	r2,-12(fp)
   4f23c:	10ffc91e 	bne	r2,r3,4f164 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4f240:	e03fff15 	stw	zero,-4(fp)
   4f244:	e0bfff17 	ldw	r2,-4(fp)
}
   4f248:	e037883a 	mov	sp,fp
   4f24c:	dfc00117 	ldw	ra,4(sp)
   4f250:	df000017 	ldw	fp,0(sp)
   4f254:	dec00204 	addi	sp,sp,8
   4f258:	f800283a 	ret

0004f25c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4f25c:	defffc04 	addi	sp,sp,-16
   4f260:	df000315 	stw	fp,12(sp)
   4f264:	df000304 	addi	fp,sp,12
   4f268:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4f26c:	00bffa04 	movi	r2,-24
   4f270:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f274:	e03ffe15 	stw	zero,-8(fp)
   4f278:	00001e06 	br	4f2f4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4f27c:	e0bffe17 	ldw	r2,-8(fp)
   4f280:	00c00174 	movhi	r3,5
   4f284:	18c28204 	addi	r3,r3,2568
   4f288:	10800324 	muli	r2,r2,12
   4f28c:	10c5883a 	add	r2,r2,r3
   4f290:	10800017 	ldw	r2,0(r2)
   4f294:	1004c03a 	cmpne	r2,r2,zero
   4f298:	1000131e 	bne	r2,zero,4f2e8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4f29c:	e0bffe17 	ldw	r2,-8(fp)
   4f2a0:	00c00174 	movhi	r3,5
   4f2a4:	18c28204 	addi	r3,r3,2568
   4f2a8:	10800324 	muli	r2,r2,12
   4f2ac:	10c7883a 	add	r3,r2,r3
   4f2b0:	e0bfff17 	ldw	r2,-4(fp)
   4f2b4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   4f2b8:	00800174 	movhi	r2,5
   4f2bc:	10874204 	addi	r2,r2,7432
   4f2c0:	10c00017 	ldw	r3,0(r2)
   4f2c4:	e0bffe17 	ldw	r2,-8(fp)
   4f2c8:	1880040e 	bge	r3,r2,4f2dc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   4f2cc:	00c00174 	movhi	r3,5
   4f2d0:	18c74204 	addi	r3,r3,7432
   4f2d4:	e0bffe17 	ldw	r2,-8(fp)
   4f2d8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4f2dc:	e0bffe17 	ldw	r2,-8(fp)
   4f2e0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4f2e4:	00000606 	br	4f300 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f2e8:	e0bffe17 	ldw	r2,-8(fp)
   4f2ec:	10800044 	addi	r2,r2,1
   4f2f0:	e0bffe15 	stw	r2,-8(fp)
   4f2f4:	e0bffe17 	ldw	r2,-8(fp)
   4f2f8:	10800810 	cmplti	r2,r2,32
   4f2fc:	103fdf1e 	bne	r2,zero,4f27c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4f300:	e0bffd17 	ldw	r2,-12(fp)
}
   4f304:	e037883a 	mov	sp,fp
   4f308:	df000017 	ldw	fp,0(sp)
   4f30c:	dec00104 	addi	sp,sp,4
   4f310:	f800283a 	ret

0004f314 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4f314:	defffe04 	addi	sp,sp,-8
   4f318:	dfc00115 	stw	ra,4(sp)
   4f31c:	df000015 	stw	fp,0(sp)
   4f320:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4f324:	0009883a 	mov	r4,zero
   4f328:	01440004 	movi	r5,4096
   4f32c:	004f9100 	call	4f910 <alt_icache_flush>
#endif
}
   4f330:	e037883a 	mov	sp,fp
   4f334:	dfc00117 	ldw	ra,4(sp)
   4f338:	df000017 	ldw	fp,0(sp)
   4f33c:	dec00204 	addi	sp,sp,8
   4f340:	f800283a 	ret

0004f344 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f344:	defff904 	addi	sp,sp,-28
   4f348:	dfc00615 	stw	ra,24(sp)
   4f34c:	df000515 	stw	fp,20(sp)
   4f350:	df000504 	addi	fp,sp,20
   4f354:	e13ffc15 	stw	r4,-16(fp)
   4f358:	e17ffd15 	stw	r5,-12(fp)
   4f35c:	e1bffe15 	stw	r6,-8(fp)
   4f360:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4f364:	e0800217 	ldw	r2,8(fp)
   4f368:	d8800015 	stw	r2,0(sp)
   4f36c:	e13ffc17 	ldw	r4,-16(fp)
   4f370:	e17ffd17 	ldw	r5,-12(fp)
   4f374:	e1bffe17 	ldw	r6,-8(fp)
   4f378:	e1ffff17 	ldw	r7,-4(fp)
   4f37c:	004f5180 	call	4f518 <alt_iic_isr_register>
}  
   4f380:	e037883a 	mov	sp,fp
   4f384:	dfc00117 	ldw	ra,4(sp)
   4f388:	df000017 	ldw	fp,0(sp)
   4f38c:	dec00204 	addi	sp,sp,8
   4f390:	f800283a 	ret

0004f394 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4f394:	defff904 	addi	sp,sp,-28
   4f398:	df000615 	stw	fp,24(sp)
   4f39c:	df000604 	addi	fp,sp,24
   4f3a0:	e13ffe15 	stw	r4,-8(fp)
   4f3a4:	e17fff15 	stw	r5,-4(fp)
   4f3a8:	e0bfff17 	ldw	r2,-4(fp)
   4f3ac:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f3b0:	0005303a 	rdctl	r2,status
   4f3b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f3b8:	e0fffb17 	ldw	r3,-20(fp)
   4f3bc:	00bfff84 	movi	r2,-2
   4f3c0:	1884703a 	and	r2,r3,r2
   4f3c4:	1001703a 	wrctl	status,r2
  
  return context;
   4f3c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4f3cc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   4f3d0:	e0fffc17 	ldw	r3,-16(fp)
   4f3d4:	00800044 	movi	r2,1
   4f3d8:	10c4983a 	sll	r2,r2,r3
   4f3dc:	1007883a 	mov	r3,r2
   4f3e0:	00800174 	movhi	r2,5
   4f3e4:	108e5a04 	addi	r2,r2,14696
   4f3e8:	10800017 	ldw	r2,0(r2)
   4f3ec:	1886b03a 	or	r3,r3,r2
   4f3f0:	00800174 	movhi	r2,5
   4f3f4:	108e5a04 	addi	r2,r2,14696
   4f3f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4f3fc:	00800174 	movhi	r2,5
   4f400:	108e5a04 	addi	r2,r2,14696
   4f404:	10800017 	ldw	r2,0(r2)
   4f408:	100170fa 	wrctl	ienable,r2
   4f40c:	e0bffd17 	ldw	r2,-12(fp)
   4f410:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f414:	e0bffa17 	ldw	r2,-24(fp)
   4f418:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4f41c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4f420:	e037883a 	mov	sp,fp
   4f424:	df000017 	ldw	fp,0(sp)
   4f428:	dec00104 	addi	sp,sp,4
   4f42c:	f800283a 	ret

0004f430 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4f430:	defff904 	addi	sp,sp,-28
   4f434:	df000615 	stw	fp,24(sp)
   4f438:	df000604 	addi	fp,sp,24
   4f43c:	e13ffe15 	stw	r4,-8(fp)
   4f440:	e17fff15 	stw	r5,-4(fp)
   4f444:	e0bfff17 	ldw	r2,-4(fp)
   4f448:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f44c:	0005303a 	rdctl	r2,status
   4f450:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f454:	e0fffb17 	ldw	r3,-20(fp)
   4f458:	00bfff84 	movi	r2,-2
   4f45c:	1884703a 	and	r2,r3,r2
   4f460:	1001703a 	wrctl	status,r2
  
  return context;
   4f464:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4f468:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   4f46c:	e0fffc17 	ldw	r3,-16(fp)
   4f470:	00800044 	movi	r2,1
   4f474:	10c4983a 	sll	r2,r2,r3
   4f478:	0084303a 	nor	r2,zero,r2
   4f47c:	1007883a 	mov	r3,r2
   4f480:	00800174 	movhi	r2,5
   4f484:	108e5a04 	addi	r2,r2,14696
   4f488:	10800017 	ldw	r2,0(r2)
   4f48c:	1886703a 	and	r3,r3,r2
   4f490:	00800174 	movhi	r2,5
   4f494:	108e5a04 	addi	r2,r2,14696
   4f498:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4f49c:	00800174 	movhi	r2,5
   4f4a0:	108e5a04 	addi	r2,r2,14696
   4f4a4:	10800017 	ldw	r2,0(r2)
   4f4a8:	100170fa 	wrctl	ienable,r2
   4f4ac:	e0bffd17 	ldw	r2,-12(fp)
   4f4b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f4b4:	e0bffa17 	ldw	r2,-24(fp)
   4f4b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4f4bc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4f4c0:	e037883a 	mov	sp,fp
   4f4c4:	df000017 	ldw	fp,0(sp)
   4f4c8:	dec00104 	addi	sp,sp,4
   4f4cc:	f800283a 	ret

0004f4d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4f4d0:	defffc04 	addi	sp,sp,-16
   4f4d4:	df000315 	stw	fp,12(sp)
   4f4d8:	df000304 	addi	fp,sp,12
   4f4dc:	e13ffe15 	stw	r4,-8(fp)
   4f4e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4f4e4:	000530fa 	rdctl	r2,ienable
   4f4e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4f4ec:	e0ffff17 	ldw	r3,-4(fp)
   4f4f0:	00800044 	movi	r2,1
   4f4f4:	10c4983a 	sll	r2,r2,r3
   4f4f8:	1007883a 	mov	r3,r2
   4f4fc:	e0bffd17 	ldw	r2,-12(fp)
   4f500:	1884703a 	and	r2,r3,r2
   4f504:	1004c03a 	cmpne	r2,r2,zero
}
   4f508:	e037883a 	mov	sp,fp
   4f50c:	df000017 	ldw	fp,0(sp)
   4f510:	dec00104 	addi	sp,sp,4
   4f514:	f800283a 	ret

0004f518 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f518:	defff404 	addi	sp,sp,-48
   4f51c:	dfc00b15 	stw	ra,44(sp)
   4f520:	df000a15 	stw	fp,40(sp)
   4f524:	df000a04 	addi	fp,sp,40
   4f528:	e13ffb15 	stw	r4,-20(fp)
   4f52c:	e17ffc15 	stw	r5,-16(fp)
   4f530:	e1bffd15 	stw	r6,-12(fp)
   4f534:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   4f538:	00bffa84 	movi	r2,-22
   4f53c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4f540:	e0bffc17 	ldw	r2,-16(fp)
   4f544:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4f548:	e0bff917 	ldw	r2,-28(fp)
   4f54c:	10800808 	cmpgei	r2,r2,32
   4f550:	1000291e 	bne	r2,zero,4f5f8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f554:	0005303a 	rdctl	r2,status
   4f558:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f55c:	e0fff717 	ldw	r3,-36(fp)
   4f560:	00bfff84 	movi	r2,-2
   4f564:	1884703a 	and	r2,r3,r2
   4f568:	1001703a 	wrctl	status,r2
  
  return context;
   4f56c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4f570:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   4f574:	e0bff917 	ldw	r2,-28(fp)
   4f578:	00c00174 	movhi	r3,5
   4f57c:	18d3fb04 	addi	r3,r3,20460
   4f580:	100490fa 	slli	r2,r2,3
   4f584:	10c7883a 	add	r3,r2,r3
   4f588:	e0bffd17 	ldw	r2,-12(fp)
   4f58c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   4f590:	e0bff917 	ldw	r2,-28(fp)
   4f594:	00c00174 	movhi	r3,5
   4f598:	18d3fb04 	addi	r3,r3,20460
   4f59c:	100490fa 	slli	r2,r2,3
   4f5a0:	10c5883a 	add	r2,r2,r3
   4f5a4:	10c00104 	addi	r3,r2,4
   4f5a8:	e0bffe17 	ldw	r2,-8(fp)
   4f5ac:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4f5b0:	e0bffd17 	ldw	r2,-12(fp)
   4f5b4:	1005003a 	cmpeq	r2,r2,zero
   4f5b8:	1000051e 	bne	r2,zero,4f5d0 <alt_iic_isr_register+0xb8>
   4f5bc:	e17ff917 	ldw	r5,-28(fp)
   4f5c0:	e13ffb17 	ldw	r4,-20(fp)
   4f5c4:	004f3940 	call	4f394 <alt_ic_irq_enable>
   4f5c8:	e0bfff15 	stw	r2,-4(fp)
   4f5cc:	00000406 	br	4f5e0 <alt_iic_isr_register+0xc8>
   4f5d0:	e17ff917 	ldw	r5,-28(fp)
   4f5d4:	e13ffb17 	ldw	r4,-20(fp)
   4f5d8:	004f4300 	call	4f430 <alt_ic_irq_disable>
   4f5dc:	e0bfff15 	stw	r2,-4(fp)
   4f5e0:	e0bfff17 	ldw	r2,-4(fp)
   4f5e4:	e0bffa15 	stw	r2,-24(fp)
   4f5e8:	e0bff817 	ldw	r2,-32(fp)
   4f5ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f5f0:	e0bff617 	ldw	r2,-40(fp)
   4f5f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4f5f8:	e0bffa17 	ldw	r2,-24(fp)
}
   4f5fc:	e037883a 	mov	sp,fp
   4f600:	dfc00117 	ldw	ra,4(sp)
   4f604:	df000017 	ldw	fp,0(sp)
   4f608:	dec00204 	addi	sp,sp,8
   4f60c:	f800283a 	ret

0004f610 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4f610:	defff904 	addi	sp,sp,-28
   4f614:	dfc00615 	stw	ra,24(sp)
   4f618:	df000515 	stw	fp,20(sp)
   4f61c:	df000504 	addi	fp,sp,20
   4f620:	e13ffc15 	stw	r4,-16(fp)
   4f624:	e17ffd15 	stw	r5,-12(fp)
   4f628:	e1bffe15 	stw	r6,-8(fp)
   4f62c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4f630:	e13ffd17 	ldw	r4,-12(fp)
   4f634:	e17ffe17 	ldw	r5,-8(fp)
   4f638:	e1bfff17 	ldw	r6,-4(fp)
   4f63c:	004d2040 	call	4d204 <open>
   4f640:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4f644:	e0bffb17 	ldw	r2,-20(fp)
   4f648:	1004803a 	cmplt	r2,r2,zero
   4f64c:	10001c1e 	bne	r2,zero,4f6c0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   4f650:	e0bffb17 	ldw	r2,-20(fp)
   4f654:	00c00174 	movhi	r3,5
   4f658:	18c28204 	addi	r3,r3,2568
   4f65c:	10800324 	muli	r2,r2,12
   4f660:	10c5883a 	add	r2,r2,r3
   4f664:	10c00017 	ldw	r3,0(r2)
   4f668:	e0bffc17 	ldw	r2,-16(fp)
   4f66c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4f670:	e0bffb17 	ldw	r2,-20(fp)
   4f674:	00c00174 	movhi	r3,5
   4f678:	18c28204 	addi	r3,r3,2568
   4f67c:	10800324 	muli	r2,r2,12
   4f680:	10c5883a 	add	r2,r2,r3
   4f684:	10800104 	addi	r2,r2,4
   4f688:	10c00017 	ldw	r3,0(r2)
   4f68c:	e0bffc17 	ldw	r2,-16(fp)
   4f690:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4f694:	e0bffb17 	ldw	r2,-20(fp)
   4f698:	00c00174 	movhi	r3,5
   4f69c:	18c28204 	addi	r3,r3,2568
   4f6a0:	10800324 	muli	r2,r2,12
   4f6a4:	10c5883a 	add	r2,r2,r3
   4f6a8:	10800204 	addi	r2,r2,8
   4f6ac:	10c00017 	ldw	r3,0(r2)
   4f6b0:	e0bffc17 	ldw	r2,-16(fp)
   4f6b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4f6b8:	e13ffb17 	ldw	r4,-20(fp)
   4f6bc:	004d56c0 	call	4d56c <alt_release_fd>
  }
} 
   4f6c0:	e037883a 	mov	sp,fp
   4f6c4:	dfc00117 	ldw	ra,4(sp)
   4f6c8:	df000017 	ldw	fp,0(sp)
   4f6cc:	dec00204 	addi	sp,sp,8
   4f6d0:	f800283a 	ret

0004f6d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4f6d4:	defffb04 	addi	sp,sp,-20
   4f6d8:	dfc00415 	stw	ra,16(sp)
   4f6dc:	df000315 	stw	fp,12(sp)
   4f6e0:	df000304 	addi	fp,sp,12
   4f6e4:	e13ffd15 	stw	r4,-12(fp)
   4f6e8:	e17ffe15 	stw	r5,-8(fp)
   4f6ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4f6f0:	01000174 	movhi	r4,5
   4f6f4:	21028504 	addi	r4,r4,2580
   4f6f8:	e17ffd17 	ldw	r5,-12(fp)
   4f6fc:	01800044 	movi	r6,1
   4f700:	01c07fc4 	movi	r7,511
   4f704:	004f6100 	call	4f610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4f708:	01000174 	movhi	r4,5
   4f70c:	21028204 	addi	r4,r4,2568
   4f710:	e17ffe17 	ldw	r5,-8(fp)
   4f714:	000d883a 	mov	r6,zero
   4f718:	01c07fc4 	movi	r7,511
   4f71c:	004f6100 	call	4f610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4f720:	01000174 	movhi	r4,5
   4f724:	21028804 	addi	r4,r4,2592
   4f728:	e17fff17 	ldw	r5,-4(fp)
   4f72c:	01800044 	movi	r6,1
   4f730:	01c07fc4 	movi	r7,511
   4f734:	004f6100 	call	4f610 <alt_open_fd>
}  
   4f738:	e037883a 	mov	sp,fp
   4f73c:	dfc00117 	ldw	ra,4(sp)
   4f740:	df000017 	ldw	fp,0(sp)
   4f744:	dec00204 	addi	sp,sp,8
   4f748:	f800283a 	ret

0004f74c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4f74c:	defffa04 	addi	sp,sp,-24
   4f750:	df000515 	stw	fp,20(sp)
   4f754:	df000504 	addi	fp,sp,20
   4f758:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f75c:	0005303a 	rdctl	r2,status
   4f760:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f764:	e0fffd17 	ldw	r3,-12(fp)
   4f768:	00bfff84 	movi	r2,-2
   4f76c:	1884703a 	and	r2,r3,r2
   4f770:	1001703a 	wrctl	status,r2
  
  return context;
   4f774:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4f778:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   4f77c:	e0bfff17 	ldw	r2,-4(fp)
   4f780:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4f784:	e0bffc17 	ldw	r2,-16(fp)
   4f788:	10c00017 	ldw	r3,0(r2)
   4f78c:	e0bffc17 	ldw	r2,-16(fp)
   4f790:	10800117 	ldw	r2,4(r2)
   4f794:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   4f798:	e0bffc17 	ldw	r2,-16(fp)
   4f79c:	10c00117 	ldw	r3,4(r2)
   4f7a0:	e0bffc17 	ldw	r2,-16(fp)
   4f7a4:	10800017 	ldw	r2,0(r2)
   4f7a8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4f7ac:	e0fffc17 	ldw	r3,-16(fp)
   4f7b0:	e0bffc17 	ldw	r2,-16(fp)
   4f7b4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   4f7b8:	e0fffc17 	ldw	r3,-16(fp)
   4f7bc:	e0bffc17 	ldw	r2,-16(fp)
   4f7c0:	18800015 	stw	r2,0(r3)
   4f7c4:	e0bffe17 	ldw	r2,-8(fp)
   4f7c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f7cc:	e0bffb17 	ldw	r2,-20(fp)
   4f7d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4f7d4:	e037883a 	mov	sp,fp
   4f7d8:	df000017 	ldw	fp,0(sp)
   4f7dc:	dec00104 	addi	sp,sp,4
   4f7e0:	f800283a 	ret

0004f7e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4f7e4:	defffb04 	addi	sp,sp,-20
   4f7e8:	dfc00415 	stw	ra,16(sp)
   4f7ec:	df000315 	stw	fp,12(sp)
   4f7f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4f7f4:	d0a01b17 	ldw	r2,-32660(gp)
   4f7f8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4f7fc:	d0a73417 	ldw	r2,-25392(gp)
   4f800:	10800044 	addi	r2,r2,1
   4f804:	d0a73415 	stw	r2,-25392(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f808:	00003106 	br	4f8d0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   4f80c:	e0bffe17 	ldw	r2,-8(fp)
   4f810:	10800017 	ldw	r2,0(r2)
   4f814:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4f818:	e0bffe17 	ldw	r2,-8(fp)
   4f81c:	10800403 	ldbu	r2,16(r2)
   4f820:	10803fcc 	andi	r2,r2,255
   4f824:	1005003a 	cmpeq	r2,r2,zero
   4f828:	1000051e 	bne	r2,zero,4f840 <alt_tick+0x5c>
   4f82c:	d0a73417 	ldw	r2,-25392(gp)
   4f830:	1004c03a 	cmpne	r2,r2,zero
   4f834:	1000021e 	bne	r2,zero,4f840 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4f838:	e0bffe17 	ldw	r2,-8(fp)
   4f83c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4f840:	e0bffe17 	ldw	r2,-8(fp)
   4f844:	10c00217 	ldw	r3,8(r2)
   4f848:	d0a73417 	ldw	r2,-25392(gp)
   4f84c:	10c01e36 	bltu	r2,r3,4f8c8 <alt_tick+0xe4>
   4f850:	e0bffe17 	ldw	r2,-8(fp)
   4f854:	10800403 	ldbu	r2,16(r2)
   4f858:	10803fcc 	andi	r2,r2,255
   4f85c:	1004c03a 	cmpne	r2,r2,zero
   4f860:	1000191e 	bne	r2,zero,4f8c8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   4f864:	e0bffe17 	ldw	r2,-8(fp)
   4f868:	10c00317 	ldw	r3,12(r2)
   4f86c:	e0bffe17 	ldw	r2,-8(fp)
   4f870:	11000517 	ldw	r4,20(r2)
   4f874:	183ee83a 	callr	r3
   4f878:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4f87c:	e0bffd17 	ldw	r2,-12(fp)
   4f880:	1004c03a 	cmpne	r2,r2,zero
   4f884:	1000031e 	bne	r2,zero,4f894 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   4f888:	e13ffe17 	ldw	r4,-8(fp)
   4f88c:	004f74c0 	call	4f74c <alt_alarm_stop>
   4f890:	00000d06 	br	4f8c8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4f894:	e0bffe17 	ldw	r2,-8(fp)
   4f898:	10c00217 	ldw	r3,8(r2)
   4f89c:	e0bffd17 	ldw	r2,-12(fp)
   4f8a0:	1887883a 	add	r3,r3,r2
   4f8a4:	e0bffe17 	ldw	r2,-8(fp)
   4f8a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4f8ac:	e0bffe17 	ldw	r2,-8(fp)
   4f8b0:	10c00217 	ldw	r3,8(r2)
   4f8b4:	d0a73417 	ldw	r2,-25392(gp)
   4f8b8:	1880032e 	bgeu	r3,r2,4f8c8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   4f8bc:	e0fffe17 	ldw	r3,-8(fp)
   4f8c0:	00800044 	movi	r2,1
   4f8c4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   4f8c8:	e0bfff17 	ldw	r2,-4(fp)
   4f8cc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f8d0:	d0e01b04 	addi	r3,gp,-32660
   4f8d4:	e0bffe17 	ldw	r2,-8(fp)
   4f8d8:	10ffcc1e 	bne	r2,r3,4f80c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4f8dc:	e037883a 	mov	sp,fp
   4f8e0:	dfc00117 	ldw	ra,4(sp)
   4f8e4:	df000017 	ldw	fp,0(sp)
   4f8e8:	dec00204 	addi	sp,sp,8
   4f8ec:	f800283a 	ret

0004f8f0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4f8f0:	deffff04 	addi	sp,sp,-4
   4f8f4:	df000015 	stw	fp,0(sp)
   4f8f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4f8fc:	000170fa 	wrctl	ienable,zero
}
   4f900:	e037883a 	mov	sp,fp
   4f904:	df000017 	ldw	fp,0(sp)
   4f908:	dec00104 	addi	sp,sp,4
   4f90c:	f800283a 	ret

0004f910 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4f910:	defffb04 	addi	sp,sp,-20
   4f914:	df000415 	stw	fp,16(sp)
   4f918:	df000404 	addi	fp,sp,16
   4f91c:	e13ffe15 	stw	r4,-8(fp)
   4f920:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4f924:	e0bfff17 	ldw	r2,-4(fp)
   4f928:	10840070 	cmpltui	r2,r2,4097
   4f92c:	1000021e 	bne	r2,zero,4f938 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4f930:	00840004 	movi	r2,4096
   4f934:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4f938:	e0fffe17 	ldw	r3,-8(fp)
   4f93c:	e0bfff17 	ldw	r2,-4(fp)
   4f940:	1885883a 	add	r2,r3,r2
   4f944:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4f948:	e0bffe17 	ldw	r2,-8(fp)
   4f94c:	e0bffd15 	stw	r2,-12(fp)
   4f950:	00000506 	br	4f968 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4f954:	e0bffd17 	ldw	r2,-12(fp)
   4f958:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4f95c:	e0bffd17 	ldw	r2,-12(fp)
   4f960:	10800804 	addi	r2,r2,32
   4f964:	e0bffd15 	stw	r2,-12(fp)
   4f968:	e0fffd17 	ldw	r3,-12(fp)
   4f96c:	e0bffc17 	ldw	r2,-16(fp)
   4f970:	18bff836 	bltu	r3,r2,4f954 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4f974:	e0bffe17 	ldw	r2,-8(fp)
   4f978:	108007cc 	andi	r2,r2,31
   4f97c:	1005003a 	cmpeq	r2,r2,zero
   4f980:	1000021e 	bne	r2,zero,4f98c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4f984:	e0bffd17 	ldw	r2,-12(fp)
   4f988:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4f98c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4f990:	e037883a 	mov	sp,fp
   4f994:	df000017 	ldw	fp,0(sp)
   4f998:	dec00104 	addi	sp,sp,4
   4f99c:	f800283a 	ret

0004f9a0 <atexit>:
   4f9a0:	200b883a 	mov	r5,r4
   4f9a4:	000d883a 	mov	r6,zero
   4f9a8:	0009883a 	mov	r4,zero
   4f9ac:	000f883a 	mov	r7,zero
   4f9b0:	004fa601 	jmpi	4fa60 <__register_exitproc>

0004f9b4 <exit>:
   4f9b4:	defffe04 	addi	sp,sp,-8
   4f9b8:	000b883a 	mov	r5,zero
   4f9bc:	dc000015 	stw	r16,0(sp)
   4f9c0:	dfc00115 	stw	ra,4(sp)
   4f9c4:	2021883a 	mov	r16,r4
   4f9c8:	004fb980 	call	4fb98 <__call_exitprocs>
   4f9cc:	00800174 	movhi	r2,5
   4f9d0:	10873904 	addi	r2,r2,7396
   4f9d4:	11000017 	ldw	r4,0(r2)
   4f9d8:	20800f17 	ldw	r2,60(r4)
   4f9dc:	10000126 	beq	r2,zero,4f9e4 <exit+0x30>
   4f9e0:	103ee83a 	callr	r2
   4f9e4:	8009883a 	mov	r4,r16
   4f9e8:	004fd880 	call	4fd88 <_exit>

0004f9ec <memcmp>:
   4f9ec:	00c000c4 	movi	r3,3
   4f9f0:	1980032e 	bgeu	r3,r6,4fa00 <memcmp+0x14>
   4f9f4:	2144b03a 	or	r2,r4,r5
   4f9f8:	10c4703a 	and	r2,r2,r3
   4f9fc:	10000f26 	beq	r2,zero,4fa3c <memcmp+0x50>
   4fa00:	31ffffc4 	addi	r7,r6,-1
   4fa04:	3000061e 	bne	r6,zero,4fa20 <memcmp+0x34>
   4fa08:	00000a06 	br	4fa34 <memcmp+0x48>
   4fa0c:	39ffffc4 	addi	r7,r7,-1
   4fa10:	00bfffc4 	movi	r2,-1
   4fa14:	21000044 	addi	r4,r4,1
   4fa18:	29400044 	addi	r5,r5,1
   4fa1c:	38800526 	beq	r7,r2,4fa34 <memcmp+0x48>
   4fa20:	20c00003 	ldbu	r3,0(r4)
   4fa24:	28800003 	ldbu	r2,0(r5)
   4fa28:	18bff826 	beq	r3,r2,4fa0c <memcmp+0x20>
   4fa2c:	1885c83a 	sub	r2,r3,r2
   4fa30:	f800283a 	ret
   4fa34:	0005883a 	mov	r2,zero
   4fa38:	f800283a 	ret
   4fa3c:	180f883a 	mov	r7,r3
   4fa40:	20c00017 	ldw	r3,0(r4)
   4fa44:	28800017 	ldw	r2,0(r5)
   4fa48:	18bfed1e 	bne	r3,r2,4fa00 <memcmp+0x14>
   4fa4c:	31bfff04 	addi	r6,r6,-4
   4fa50:	21000104 	addi	r4,r4,4
   4fa54:	29400104 	addi	r5,r5,4
   4fa58:	39bff936 	bltu	r7,r6,4fa40 <memcmp+0x54>
   4fa5c:	003fe806 	br	4fa00 <memcmp+0x14>

0004fa60 <__register_exitproc>:
   4fa60:	defffa04 	addi	sp,sp,-24
   4fa64:	00800174 	movhi	r2,5
   4fa68:	10873904 	addi	r2,r2,7396
   4fa6c:	dc000015 	stw	r16,0(sp)
   4fa70:	14000017 	ldw	r16,0(r2)
   4fa74:	dd000415 	stw	r20,16(sp)
   4fa78:	2829883a 	mov	r20,r5
   4fa7c:	81405217 	ldw	r5,328(r16)
   4fa80:	dcc00315 	stw	r19,12(sp)
   4fa84:	dc800215 	stw	r18,8(sp)
   4fa88:	dc400115 	stw	r17,4(sp)
   4fa8c:	dfc00515 	stw	ra,20(sp)
   4fa90:	2023883a 	mov	r17,r4
   4fa94:	3027883a 	mov	r19,r6
   4fa98:	3825883a 	mov	r18,r7
   4fa9c:	28002526 	beq	r5,zero,4fb34 <__register_exitproc+0xd4>
   4faa0:	29000117 	ldw	r4,4(r5)
   4faa4:	008007c4 	movi	r2,31
   4faa8:	11002716 	blt	r2,r4,4fb48 <__register_exitproc+0xe8>
   4faac:	8800101e 	bne	r17,zero,4faf0 <__register_exitproc+0x90>
   4fab0:	2105883a 	add	r2,r4,r4
   4fab4:	1085883a 	add	r2,r2,r2
   4fab8:	20c00044 	addi	r3,r4,1
   4fabc:	1145883a 	add	r2,r2,r5
   4fac0:	0009883a 	mov	r4,zero
   4fac4:	15000215 	stw	r20,8(r2)
   4fac8:	28c00115 	stw	r3,4(r5)
   4facc:	2005883a 	mov	r2,r4
   4fad0:	dfc00517 	ldw	ra,20(sp)
   4fad4:	dd000417 	ldw	r20,16(sp)
   4fad8:	dcc00317 	ldw	r19,12(sp)
   4fadc:	dc800217 	ldw	r18,8(sp)
   4fae0:	dc400117 	ldw	r17,4(sp)
   4fae4:	dc000017 	ldw	r16,0(sp)
   4fae8:	dec00604 	addi	sp,sp,24
   4faec:	f800283a 	ret
   4faf0:	29802204 	addi	r6,r5,136
   4faf4:	00800044 	movi	r2,1
   4faf8:	110e983a 	sll	r7,r2,r4
   4fafc:	30c04017 	ldw	r3,256(r6)
   4fb00:	2105883a 	add	r2,r4,r4
   4fb04:	1085883a 	add	r2,r2,r2
   4fb08:	1185883a 	add	r2,r2,r6
   4fb0c:	19c6b03a 	or	r3,r3,r7
   4fb10:	14802015 	stw	r18,128(r2)
   4fb14:	14c00015 	stw	r19,0(r2)
   4fb18:	00800084 	movi	r2,2
   4fb1c:	30c04015 	stw	r3,256(r6)
   4fb20:	88bfe31e 	bne	r17,r2,4fab0 <__register_exitproc+0x50>
   4fb24:	30804117 	ldw	r2,260(r6)
   4fb28:	11c4b03a 	or	r2,r2,r7
   4fb2c:	30804115 	stw	r2,260(r6)
   4fb30:	003fdf06 	br	4fab0 <__register_exitproc+0x50>
   4fb34:	00800174 	movhi	r2,5
   4fb38:	10943b04 	addi	r2,r2,20716
   4fb3c:	100b883a 	mov	r5,r2
   4fb40:	80805215 	stw	r2,328(r16)
   4fb44:	003fd606 	br	4faa0 <__register_exitproc+0x40>
   4fb48:	00800034 	movhi	r2,0
   4fb4c:	10800004 	addi	r2,r2,0
   4fb50:	1000021e 	bne	r2,zero,4fb5c <__register_exitproc+0xfc>
   4fb54:	013fffc4 	movi	r4,-1
   4fb58:	003fdc06 	br	4facc <__register_exitproc+0x6c>
   4fb5c:	01006404 	movi	r4,400
   4fb60:	103ee83a 	callr	r2
   4fb64:	1007883a 	mov	r3,r2
   4fb68:	103ffa26 	beq	r2,zero,4fb54 <__register_exitproc+0xf4>
   4fb6c:	80805217 	ldw	r2,328(r16)
   4fb70:	180b883a 	mov	r5,r3
   4fb74:	18000115 	stw	zero,4(r3)
   4fb78:	18800015 	stw	r2,0(r3)
   4fb7c:	80c05215 	stw	r3,328(r16)
   4fb80:	18006215 	stw	zero,392(r3)
   4fb84:	18006315 	stw	zero,396(r3)
   4fb88:	0009883a 	mov	r4,zero
   4fb8c:	883fc826 	beq	r17,zero,4fab0 <__register_exitproc+0x50>
   4fb90:	003fd706 	br	4faf0 <__register_exitproc+0x90>

0004fb94 <register_fini>:
   4fb94:	f800283a 	ret

0004fb98 <__call_exitprocs>:
   4fb98:	00800174 	movhi	r2,5
   4fb9c:	10873904 	addi	r2,r2,7396
   4fba0:	10800017 	ldw	r2,0(r2)
   4fba4:	defff304 	addi	sp,sp,-52
   4fba8:	df000b15 	stw	fp,44(sp)
   4fbac:	d8800115 	stw	r2,4(sp)
   4fbb0:	00800034 	movhi	r2,0
   4fbb4:	10800004 	addi	r2,r2,0
   4fbb8:	1005003a 	cmpeq	r2,r2,zero
   4fbbc:	d8800215 	stw	r2,8(sp)
   4fbc0:	d8800117 	ldw	r2,4(sp)
   4fbc4:	dd400815 	stw	r21,32(sp)
   4fbc8:	dd000715 	stw	r20,28(sp)
   4fbcc:	10805204 	addi	r2,r2,328
   4fbd0:	dfc00c15 	stw	ra,48(sp)
   4fbd4:	ddc00a15 	stw	r23,40(sp)
   4fbd8:	dd800915 	stw	r22,36(sp)
   4fbdc:	dcc00615 	stw	r19,24(sp)
   4fbe0:	dc800515 	stw	r18,20(sp)
   4fbe4:	dc400415 	stw	r17,16(sp)
   4fbe8:	dc000315 	stw	r16,12(sp)
   4fbec:	282b883a 	mov	r21,r5
   4fbf0:	2039883a 	mov	fp,r4
   4fbf4:	d8800015 	stw	r2,0(sp)
   4fbf8:	2829003a 	cmpeq	r20,r5,zero
   4fbfc:	d8800117 	ldw	r2,4(sp)
   4fc00:	14405217 	ldw	r17,328(r2)
   4fc04:	88001026 	beq	r17,zero,4fc48 <__call_exitprocs+0xb0>
   4fc08:	ddc00017 	ldw	r23,0(sp)
   4fc0c:	88800117 	ldw	r2,4(r17)
   4fc10:	8c802204 	addi	r18,r17,136
   4fc14:	143fffc4 	addi	r16,r2,-1
   4fc18:	80000916 	blt	r16,zero,4fc40 <__call_exitprocs+0xa8>
   4fc1c:	05bfffc4 	movi	r22,-1
   4fc20:	a000151e 	bne	r20,zero,4fc78 <__call_exitprocs+0xe0>
   4fc24:	8409883a 	add	r4,r16,r16
   4fc28:	2105883a 	add	r2,r4,r4
   4fc2c:	1485883a 	add	r2,r2,r18
   4fc30:	10c02017 	ldw	r3,128(r2)
   4fc34:	a8c01126 	beq	r21,r3,4fc7c <__call_exitprocs+0xe4>
   4fc38:	843fffc4 	addi	r16,r16,-1
   4fc3c:	85bff81e 	bne	r16,r22,4fc20 <__call_exitprocs+0x88>
   4fc40:	d8800217 	ldw	r2,8(sp)
   4fc44:	10003126 	beq	r2,zero,4fd0c <__call_exitprocs+0x174>
   4fc48:	dfc00c17 	ldw	ra,48(sp)
   4fc4c:	df000b17 	ldw	fp,44(sp)
   4fc50:	ddc00a17 	ldw	r23,40(sp)
   4fc54:	dd800917 	ldw	r22,36(sp)
   4fc58:	dd400817 	ldw	r21,32(sp)
   4fc5c:	dd000717 	ldw	r20,28(sp)
   4fc60:	dcc00617 	ldw	r19,24(sp)
   4fc64:	dc800517 	ldw	r18,20(sp)
   4fc68:	dc400417 	ldw	r17,16(sp)
   4fc6c:	dc000317 	ldw	r16,12(sp)
   4fc70:	dec00d04 	addi	sp,sp,52
   4fc74:	f800283a 	ret
   4fc78:	8409883a 	add	r4,r16,r16
   4fc7c:	88c00117 	ldw	r3,4(r17)
   4fc80:	2105883a 	add	r2,r4,r4
   4fc84:	1445883a 	add	r2,r2,r17
   4fc88:	18ffffc4 	addi	r3,r3,-1
   4fc8c:	11800217 	ldw	r6,8(r2)
   4fc90:	1c001526 	beq	r3,r16,4fce8 <__call_exitprocs+0x150>
   4fc94:	10000215 	stw	zero,8(r2)
   4fc98:	303fe726 	beq	r6,zero,4fc38 <__call_exitprocs+0xa0>
   4fc9c:	00c00044 	movi	r3,1
   4fca0:	1c06983a 	sll	r3,r3,r16
   4fca4:	90804017 	ldw	r2,256(r18)
   4fca8:	8cc00117 	ldw	r19,4(r17)
   4fcac:	1884703a 	and	r2,r3,r2
   4fcb0:	10001426 	beq	r2,zero,4fd04 <__call_exitprocs+0x16c>
   4fcb4:	90804117 	ldw	r2,260(r18)
   4fcb8:	1884703a 	and	r2,r3,r2
   4fcbc:	10000c1e 	bne	r2,zero,4fcf0 <__call_exitprocs+0x158>
   4fcc0:	2105883a 	add	r2,r4,r4
   4fcc4:	1485883a 	add	r2,r2,r18
   4fcc8:	11400017 	ldw	r5,0(r2)
   4fccc:	e009883a 	mov	r4,fp
   4fcd0:	303ee83a 	callr	r6
   4fcd4:	88800117 	ldw	r2,4(r17)
   4fcd8:	98bfc81e 	bne	r19,r2,4fbfc <__call_exitprocs+0x64>
   4fcdc:	b8800017 	ldw	r2,0(r23)
   4fce0:	147fd526 	beq	r2,r17,4fc38 <__call_exitprocs+0xa0>
   4fce4:	003fc506 	br	4fbfc <__call_exitprocs+0x64>
   4fce8:	8c000115 	stw	r16,4(r17)
   4fcec:	003fea06 	br	4fc98 <__call_exitprocs+0x100>
   4fcf0:	2105883a 	add	r2,r4,r4
   4fcf4:	1485883a 	add	r2,r2,r18
   4fcf8:	11000017 	ldw	r4,0(r2)
   4fcfc:	303ee83a 	callr	r6
   4fd00:	003ff406 	br	4fcd4 <__call_exitprocs+0x13c>
   4fd04:	303ee83a 	callr	r6
   4fd08:	003ff206 	br	4fcd4 <__call_exitprocs+0x13c>
   4fd0c:	88800117 	ldw	r2,4(r17)
   4fd10:	1000081e 	bne	r2,zero,4fd34 <__call_exitprocs+0x19c>
   4fd14:	89000017 	ldw	r4,0(r17)
   4fd18:	20000726 	beq	r4,zero,4fd38 <__call_exitprocs+0x1a0>
   4fd1c:	b9000015 	stw	r4,0(r23)
   4fd20:	8809883a 	mov	r4,r17
   4fd24:	00000000 	call	0 <__reset-0x40000>
   4fd28:	bc400017 	ldw	r17,0(r23)
   4fd2c:	883fb71e 	bne	r17,zero,4fc0c <__call_exitprocs+0x74>
   4fd30:	003fc506 	br	4fc48 <__call_exitprocs+0xb0>
   4fd34:	89000017 	ldw	r4,0(r17)
   4fd38:	882f883a 	mov	r23,r17
   4fd3c:	2023883a 	mov	r17,r4
   4fd40:	883fb21e 	bne	r17,zero,4fc0c <__call_exitprocs+0x74>
   4fd44:	003fc006 	br	4fc48 <__call_exitprocs+0xb0>

0004fd48 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   4fd48:	defffd04 	addi	sp,sp,-12
   4fd4c:	df000215 	stw	fp,8(sp)
   4fd50:	df000204 	addi	fp,sp,8
   4fd54:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4fd58:	e0bfff17 	ldw	r2,-4(fp)
   4fd5c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4fd60:	e0bffe17 	ldw	r2,-8(fp)
   4fd64:	1005003a 	cmpeq	r2,r2,zero
   4fd68:	1000021e 	bne	r2,zero,4fd74 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4fd6c:	002af070 	cmpltui	zero,zero,43969
   4fd70:	00000106 	br	4fd78 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4fd74:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4fd78:	e037883a 	mov	sp,fp
   4fd7c:	df000017 	ldw	fp,0(sp)
   4fd80:	dec00104 	addi	sp,sp,4
   4fd84:	f800283a 	ret

0004fd88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4fd88:	defffd04 	addi	sp,sp,-12
   4fd8c:	dfc00215 	stw	ra,8(sp)
   4fd90:	df000115 	stw	fp,4(sp)
   4fd94:	df000104 	addi	fp,sp,4
   4fd98:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   4fd9c:	e13fff17 	ldw	r4,-4(fp)
   4fda0:	004fd480 	call	4fd48 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4fda4:	003fff06 	br	4fda4 <_exit+0x1c>
   4fda8:	0004fb94 	movui	zero,5102
