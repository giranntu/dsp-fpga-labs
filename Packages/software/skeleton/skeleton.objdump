
skeleton.elf:     file format elf32-littlenios2
skeleton.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00011c10 memsz 0x00011c10 flags r-x
    LOAD off    0x00012c30 vaddr 0x00051c30 paddr 0x000537f8 align 2**12
         filesz 0x00001bc8 memsz 0x00001bc8 flags rw-
    LOAD off    0x000153c0 vaddr 0x000553c0 paddr 0x000553c0 align 2**12
         filesz 0x00000000 memsz 0x00001988 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011534  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000544  000516ec  000516ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc8  00051c30  000537f8  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001988  000553c0  000553c0  000153c0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  000147f8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001078  00000000  00000000  00014848  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000001c  00000000  00000000  000158c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002783c  00000000  00000000  000158dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ae8c  00000000  00000000  0003d118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c40a  00000000  00000000  00047fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002388  00000000  00000000  000543b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000039dc  00000000  00000000  00056738  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013bcd  00000000  00000000  0005a114  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006dce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b78  00000000  00000000  0006dd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072af3  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00072af6  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072b00  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072b01  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072b02  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072b06  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00072b0a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00072b0e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00072b17  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00072b20  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00072b29  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000019  00000000  00000000  00072b31  2**0
                  CONTENTS, READONLY
 29 .jdi          00004b68  00000000  00000000  00072b4a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0011026c  00000000  00000000  000776b2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
000516ec l    d  .rodata	00000000 .rodata
00051c30 l    d  .rwdata	00000000 .rwdata
000553c0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../skeleton_bsp//obj/HAL/src/crt0.o
00040200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 aic23.c
00051c5c l     O .rwdata	0000002c aic23_default_config
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 i2s_control.c
00000000 l    df *ABS*	00000000 main.c
00041b70 l     F .text	00000050 handle_switch0_interrupt
00041bc0 l     F .text	00000050 handle_switch1_interrupt
00041c10 l     F .text	00000148 handle_key0_interrupt
00041d58 l     F .text	00000058 handle_key1_interrupt
00041db0 l     F .text	00000050 handle_key2_interrupt
00041e00 l     F .text	00000060 handle_key3_interrupt
00041ed0 l     F .text	000000b8 handle_leftready_interrupt_test
00041f88 l     F .text	000000ac handle_rightready_interrupt_test
00000000 l    df *ABS*	00000000 spi_control.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0005179c l     O .rodata	00000108 two_over_pi
0005171c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
000518a4 l     O .rodata	00000010 init_jk
000518b4 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00044a4c l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00044f5c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00045b00 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00046624 l     F .text	00000034 __sprint_r
00051a5e l     O .rodata	00000010 blanks.3515
00051a6e l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000485e8 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004a024 l     F .text	00000008 __fp_lock
0004a02c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00051cb0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00051aa4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00051bec l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004e540 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004e658 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004e684 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004e930 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004ea20 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004eb0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004ece4 l     F .text	00000050 alt_get_errno
0004ed34 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0004ef54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000537ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004f1a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004f2e0 l     F .text	00000038 alt_dev_reg
0005266c l     O .rwdata	00001060 jtag_uart
000536cc l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004f5d8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0004f7dc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0004ffd0 l     F .text	00000098 altera_avalon_uart_irq
00050068 l     F .text	000000d8 altera_avalon_uart_rxirq
00050140 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000502d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00050524 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000508a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00050f98 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0004c97c g     F .text	00000074 _mprec_log10
0004ca6c g     F .text	00000084 __any_on
0004d6dc g     F .text	00000064 _isatty_r
00051ad4 g     O .rodata	00000028 __mprec_tinytens
0004ec2c g     F .text	00000078 alt_main
00040fa0 g     F .text	00000068 AIC23_format
0004636c g     F .text	00000044 __ashldi3
00040c84 g     F .text	0000006c AIC23_deemp
000463b0 g     F .text	00000084 _puts_r
00056ab8 g     O .bss	00000100 alt_irq
00044698 g     F .text	00000014 fabs
0004d740 g     F .text	0000006c _lseek_r
00040a64 g     F .text	0000006c AIC23_bypass
000537f8 g       *ABS*	00000000 __flash_rwdata_start
000457fc g     F .text	0000005c __eqdf2
00051c88 g     O .rwdata	00000028 aic23_demo
00056d48 g       *ABS*	00000000 __alt_heap_start
0005379c g     O .rwdata	00000004 key1_id
00053794 g     O .rwdata	00000004 switch1_id
0004d290 g     F .text	0000005c __sseek
0004a0b4 g     F .text	0000010c __sinit
0004ad4c g     F .text	0000009c _setlocale_r
0004a040 g     F .text	00000064 __sfmoreglue
0004ecc4 g     F .text	00000020 __malloc_unlock
000423f0 g     F .text	00000180 spi_send
00055474 g     O .bss	00000200 datatest
000405f8 g     F .text	00000068 AIC23_line_rim
00055674 g     O .bss	00000036 leftChannelData
0005540c g     O .bss	00000004 setFreqFlag
0004b944 g     F .text	00000128 memmove
00041e60 g     F .text	00000030 unsigned2signed
0004a0a4 g     F .text	00000010 _cleanup
000464ec g     F .text	000000ac snprintf
000403e0 g     F .text	0000003c AIC_setFreq
0004bb48 g     F .text	000000a8 _Balloc
00044e74 g     F .text	000000a4 __fixsfsi
00040204 g     F .text	000000b0 AIC23_init
00045858 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
0004098c g     F .text	0000006c AIC23_sidetone_add
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004d674 g     F .text	00000068 _fstat_r
00055430 g     O .bss	00000004 errno
00045ac8 g     F .text	00000038 __make_dp
000446ac g     F .text	000001f0 floor
000425c4 g     F .text	00000074 uart_sendInt16
0005543c g     O .bss	00000004 alt_argv
0005b790 g       *ABS*	00000000 _gp
00041008 g     F .text	0000006c AIC23_clkin
00044c8c g     F .text	00000058 __subsf3
000402b4 g     F .text	00000030 AIC23_reset
000524ec g     O .rwdata	00000180 alt_fd_list
0004045c g     F .text	00000068 AIC23_line_lrs
000411bc g     F .text	00000068 AIC23_clk_mode
000429bc g     F .text	000007b8 __ieee754_rem_pio2
00050a48 g     F .text	00000090 alt_find_dev
0004b84c g     F .text	000000f8 memcpy
00040794 g     F .text	00000064 AIC23_head_lhv
0004a034 g     F .text	0000000c _cleanup_r
00045920 g     F .text	000000d4 __floatsidf
00051058 g     F .text	00000078 alt_io_redirect
0004e3c8 g     F .text	0000005c __ltdf2
000516ec g       *ABS*	00000000 __DTOR_END__
00046434 g     F .text	00000014 puts
0004c8d8 g     F .text	000000a4 __ratio
000404c4 g     F .text	00000068 AIC23_line_lim
0004f9dc g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00045c20 g     F .text	00000008 __udivsi3
0004e980 g     F .text	000000a0 isatty
000407f8 g     F .text	00000068 AIC23_head_rls
00051b24 g     O .rodata	000000c8 __mprec_tens
0004ade8 g     F .text	0000000c __locale_charset
00043174 g     F .text	000004a4 __kernel_cos
0005128c g     F .text	0000008c alt_icache_flush
0005542c g     O .bss	00000004 __malloc_top_pad
000537c4 g     O .rwdata	00000004 __mb_cur_max
0004adf4 g     F .text	0000000c _localeconv_r
0004bf48 g     F .text	0000003c __i2b
0004a708 g     F .text	000004e4 __sfvwrite_r
0004d150 g     F .text	00000064 _sbrk_r
000410e0 g     F .text	00000070 AIC23_setFreq
0004d7ac g     F .text	0000006c _read_r
000520b0 g     O .rwdata	0000000c __lc_ctype
000537a0 g     O .rwdata	00000004 key2_id
000537e0 g     O .rwdata	00000004 alt_max_fd
00046154 g     F .text	00000104 __unpack_d
0004d524 g     F .text	0000013c _fclose_r
00049ff4 g     F .text	00000030 fflush
00055428 g     O .bss	00000004 __malloc_max_sbrked_mem
0004e780 g     F .text	000001b0 alt_irq_register
000537ac g     O .rwdata	00000004 rightready_id
000443c4 g     F .text	000002d4 __kernel_sin
00044f18 g     F .text	00000044 __extendsfdf2
00041e90 g     F .text	00000040 signed2unsigned
0004052c g     F .text	00000064 AIC23_line_liv
000452b0 g     F .text	00000054 __adddf3
000537b4 g     O .rwdata	00000004 sampleFrequency
0004c64c g     F .text	00000148 __b2d
000553e8 g     O .bss	00000004 convIndex
00056a82 g     O .bss	00000036 DataBufferCopy
0004dde0 g     F .text	0000058c __umoddi3
0004eb5c g     F .text	000000d0 lseek
000537bc g     O .rwdata	00000004 _global_impure_ptr
0004caf0 g     F .text	000005fc _realloc_r
00056d48 g       *ABS*	00000000 __bss_end
00050ea8 g     F .text	000000f0 alt_iic_isr_register
00051168 g     F .text	00000104 alt_tick
000414c0 g     F .text	000000e4 I2S_send_left
0004d818 g     F .text	000005c8 __udivdi3
00051afc g     O .rodata	00000028 __mprec_bigtens
0004bd2c g     F .text	00000104 __s2b
0004e424 g     F .text	0000011c __floatunsidf
0004c3ec g     F .text	00000058 __mcmp
0004ff28 g     F .text	000000a8 altera_avalon_uart_init
00041224 g     F .text	00000030 AIC23_on
0004a2cc g     F .text	00000018 __fp_lock_all
00050e5c g     F .text	0000004c alt_ic_irq_enabled
00040b40 g     F .text	00000070 AIC23_mic_mute
000510d0 g     F .text	00000098 alt_alarm_stop
00055434 g     O .bss	00000004 alt_irq_active
000413d0 g     F .text	000000f0 I2S_collect_right
000400ec g     F .exceptions	000000cc alt_irq_handler
000524c4 g     O .rwdata	00000028 alt_dev_null
00043618 g     F .text	00000dac __kernel_rem_pio2
00045e68 g     F .text	000000c8 __unpack_f
0005085c g     F .text	00000044 alt_dcache_flush_all
0004be30 g     F .text	00000068 __hi0bits
000459f4 g     F .text	000000d4 __fixdfsi
000537f8 g       *ABS*	00000000 __ram_rwdata_end
000537d8 g     O .rwdata	00000008 alt_dev_list
0004f1f4 g     F .text	000000ec write
000556aa g     O .bss	00000400 rx_buffer
00040660 g     F .text	00000064 AIC23_line_riv
00041150 g     F .text	0000006c AIC23_bosr
00051c30 g       *ABS*	00000000 __ram_rodata_end
0004e6d4 g     F .text	000000ac fstat
00046328 g     F .text	00000044 __lshrdi3
000412d8 g     F .text	000000f8 I2S_collect_left
0004c164 g     F .text	0000012c __pow5mult
00055420 g     O .bss	00000004 __nlocale_changed
00045c28 g     F .text	00000008 __umodsi3
00040cf0 g     F .text	00000068 AIC23_adc_highpass
00056d48 g       *ABS*	00000000 end
00045d3c g     F .text	0000012c __pack_f
000415a4 g     F .text	000000e4 I2S_send_right
000553fc g     O .bss	00000004 leftBufferFull
00050574 g     F .text	000001a8 altera_avalon_uart_write
000553c8 g     O .bss	00000004 key0
000553cc g     O .bss	00000004 key1
0004f518 g     F .text	000000c0 altera_avalon_jtag_uart_init
00042784 g     F .text	000000a8 uart_SendTestBuff
000516ec g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
0004fe78 g     F .text	00000060 altera_avalon_uart_write_fd
00045c90 g     F .text	000000ac __clzsi2
00046448 g     F .text	000000a4 _snprintf_r
0004fed8 g     F .text	00000050 altera_avalon_uart_close_fd
0004fbf4 g     F .text	00000224 altera_avalon_jtag_uart_write
0004a2bc g     F .text	00000004 __sfp_lock_acquire
0004b754 g     F .text	000000f8 memchr
00046658 g     F .text	00001df8 ___vfprintf_internal_r
0004a438 g     F .text	000002d0 _free_r
00051510 g     F .text	000001a0 __call_exitprocs
00055aac g     O .bss	00000fa0 convResultBuffer
00040e58 g     F .text	0000006c AIC23_lr_swap
00040dec g     F .text	0000006c AIC23_mode
0005541c g     O .bss	00000004 __mlocale_changed
00040334 g     F .text	000000ac AIC23_demo
000537c8 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000004c _start
000553f0 g     O .bss	00000004 leftCount
00055444 g     O .bss	00000004 _alt_tick_rate
000428cc g     F .text	000000f0 sin
0004c290 g     F .text	0000015c __lshift
00055448 g     O .bss	00000004 _alt_nticks
0004efa4 g     F .text	000000f0 read
0004f34c g     F .text	00000068 alt_sys_init
00040da0 g     F .text	0000004c AIC23_power_off
000513e0 g     F .text	00000130 __register_exitproc
0004bf84 g     F .text	000001e0 __multiply
0004f880 g     F .text	00000068 altera_avalon_jtag_uart_close
00051c30 g       *ABS*	00000000 __ram_rwdata_start
000516ec g       *ABS*	00000000 __ram_rodata_start
0005544c g     O .bss	00000028 __malloc_current_mallinfo
00055404 g     O .bss	00000004 uartStartRecvFlag
0004c794 g     F .text	00000144 __d2b
000553f4 g     O .bss	00000004 lefttestCount
00041074 g     F .text	0000006c AIC23_clkout
00040ad0 g     F .text	00000070 AIC23_input
0004f3b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004282c g     F .text	000000a0 uart_SendConvBuff
00050bec g     F .text	000000b4 alt_get_fd
00042034 g     F .text	00000254 system_initialization
00046258 g     F .text	000000d0 __fpcmp_parts_d
0004d4c0 g     F .text	00000064 _close_r
00041254 g     F .text	00000030 AIC23_off
00053798 g     O .rwdata	00000004 key0_id
00051364 g     F .text	0000007c memcmp
0004f474 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00056d48 g       *ABS*	00000000 __alt_stack_base
0004f4c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00040bb0 g     F .text	00000068 AIC23_mic_boost
00040ec4 g     F .text	0000006c AIC23_lr_phase
00048474 g     F .text	00000174 __swsetup_r
000553d8 g     O .bss	00000004 leftready
00045648 g     F .text	000001b4 __divdf3
0004a1c0 g     F .text	000000fc __sfp
00055400 g     O .bss	00000004 uartStartSendFlag
0004c9f0 g     F .text	0000007c __copybits
000520bc g     O .rwdata	00000408 __malloc_av_
0004a2c8 g     F .text	00000004 __sinit_lock_release
00045364 g     F .text	000002e4 __muldf3
0004d1b4 g     F .text	00000054 __sread
00055414 g     O .bss	00000004 counter
000518f4 g     O .rodata	00000010 __thenan_sf
00050ad8 g     F .text	00000114 alt_find_file
000508f0 g     F .text	000000a0 alt_dev_llist_insert
0004eca4 g     F .text	00000020 __malloc_lock
0004f0f4 g     F .text	000000b0 sbrk
00040860 g     F .text	0000006c AIC23_head_rzc
00049e0c g     F .text	000001e8 _fflush_r
0004d404 g     F .text	000000bc _calloc_r
000553c0 g       *ABS*	00000000 __bss_start
0004ba6c g     F .text	000000dc memset
000537b0 g     O .rwdata	00000004 uart_id
00042288 g     F .text	00000168 main
00053790 g     O .rwdata	00000004 switch0_id
00055440 g     O .bss	00000004 alt_envp
00055424 g     O .bss	00000004 __malloc_max_total_mem
0004f414 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000406c4 g     F .text	00000068 AIC23_head_lrs
0004d2ec g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
0004d660 g     F .text	00000014 fclose
00056bb8 g     O .bss	00000190 _atexit0
000487f0 g     F .text	0000161c _dtoa_r
0004afd0 g     F .text	00000784 _malloc_r
000537e4 g     O .rwdata	00000004 alt_errno
0004abec g     F .text	000000a8 _fwalk
00045b74 g     F .text	00000050 __divsi3
00051904 g     O .rodata	00000014 __thenan_df
0004a2fc g     F .text	0000013c _malloc_trim_r
000516ec g       *ABS*	00000000 __CTOR_END__
00044ce4 g     F .text	00000190 __mulsf3
000537a4 g     O .rwdata	00000004 key3_id
0004d2f4 g     F .text	000000a4 strcmp
000516ec g       *ABS*	00000000 __flash_rodata_start
000516ec g       *ABS*	00000000 __DTOR_LIST__
00042638 g     F .text	000000b8 uart_sendFloat
000553d4 g     O .bss	00000004 key3
00044a30 g     F .text	0000001c copysign
00041284 g     F .text	00000054 delay
0004e36c g     F .text	0000005c __nedf2
0004f318 g     F .text	00000034 alt_irq_init
0004f094 g     F .text	00000060 alt_release_fd
000408cc g     F .text	00000064 AIC23_head_rhv
00040930 g     F .text	0000005c AIC23_sidetone_disable
00051918 g     O .rodata	00000100 __clz_tab
00055418 g     O .bss	00000004 _PathLocale
000553c4 g     O .bss	00000004 switch1
00051318 g     F .text	00000014 atexit
00040d58 g     F .text	00000048 AIC23_power_on
0004d398 g     F .text	0000006c _write_r
0004ae00 g     F .text	0000001c setlocale
000537a8 g     O .rwdata	00000004 leftready_id
00051c30 g     O .rwdata	0000002c aic23_config
000537c0 g     O .rwdata	00000004 _impure_ptr
00055438 g     O .bss	00000004 alt_argc
0004489c g     F .text	00000194 scalbn
00040c18 g     F .text	0000006c AIC23_dac_mute
000509ec g     F .text	0000005c _do_dtors
000553ec g     O .bss	00000002 RxHead
00040020 g       .exceptions	00000000 alt_irq_entry
0004c5ec g     F .text	00000060 __ulp
0004d0ec g     F .text	00000038 __isinfd
0004a2e4 g     F .text	00000018 __fp_unlock_all
00040590 g     F .text	00000068 AIC23_line_rls
000416c4 g     F .text	000004ac fft
000537d0 g     O .rwdata	00000008 alt_fs_list
00042570 g     F .text	00000054 uart_sendByte
00040f30 g     F .text	00000070 AIC23_input_len
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004ae1c g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000426f0 g     F .text	00000094 uart_SendLeftBuff
000409f8 g     F .text	0000006c AIC23_dac_select
0004072c g     F .text	00000068 AIC23_head_lzc
000537b8 g     O .rwdata	00000004 calBuffersize
00050cd0 g     F .text	00000050 alt_ic_isr_register
000537f8 g       *ABS*	00000000 _edata
0004fe18 g     F .text	00000060 altera_avalon_uart_read_fd
00056d48 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
0004f8e8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000553d0 g     O .bss	00000004 key2
000553e4 g     O .bss	00000004 rightChannel
000553dc g     O .bss	00000004 rightready
00050dbc g     F .text	000000a0 alt_ic_irq_disable
0004d208 g     F .text	00000088 __swrite
000537cc g     O .rwdata	00000004 __malloc_trim_threshold
0005126c g     F .text	00000020 altera_nios2_qsys_irq_init
0005132c g     F .text	00000038 exit
0004ac94 g     F .text	000000b8 _fwalk_reent
0004c444 g     F .text	000001a8 __mdiff
00045bc4 g     F .text	0000005c __modsi3
000402e4 g     F .text	00000050 AIC23_config
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00055410 g     O .bss	00000004 uart
0004a2c0 g     F .text	00000004 __sfp_lock_release
000553e0 g     O .bss	00000004 leftChannel
0005027c g     F .text	00000054 altera_avalon_uart_close
000516b0 g     F .text	0000003c _exit
0004d124 g     F .text	0000002c __isnand
0005071c g     F .text	00000140 alt_alarm_start
00045c30 g     F .text	00000060 __muldi3
00041688 g     F .text	0000003c I2S_send_lr
0004ae28 g     F .text	000001a8 __smakebuf_r
00046598 g     F .text	0000008c strlen
0004ee00 g     F .text	00000154 open
000458bc g     F .text	00000064 __gedf2
00050ca0 g     F .text	00000030 alt_icache_flush_all
00055408 g     O .bss	00000004 sr
0004041c g     F .text	00000040 AIC23_read
000537e8 g     O .rwdata	00000004 alt_priority_mask
00050d20 g     F .text	0000009c alt_ic_irq_enable
00048450 g     F .text	00000024 __vfprintf_internal
00050320 g     F .text	00000204 altera_avalon_uart_read
00056a4c g     O .bss	00000036 rightChannelData
00045304 g     F .text	00000060 __subdf3
0004be98 g     F .text	000000b0 __lo0bits
000553c0 g     O .bss	00000004 switch0
000537f0 g     O .rwdata	00000008 alt_alarm_list
00050990 g     F .text	0000005c _do_ctors
0004e590 g     F .text	000000c8 close
00044c40 g     F .text	0000004c __addsf3
0004ea8c g     F .text	00000080 alt_load
00045f30 g     F .text	00000224 __pack_d
000553f8 g     O .bss	00000004 rightCount
00000000  w      *UND*	00000000 free
0004a2c4 g     F .text	00000004 __sinit_lock_acquire
0004bc18 g     F .text	00000114 __multadd
0004bbf0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406e14 	ori	at,at,440
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18daae04 	addi	r3,r3,27320
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	211aae04 	addi	r4,r4,27320
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   401c4:	00bffd16 	blt	zero,r2,401bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c8:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401cc:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   401d0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401d4:	d6ade414 	ori	gp,gp,46992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d8:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401dc:	1094f014 	ori	r2,r2,21440

    movhi r3, %hi(__bss_end)
   401e0:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401e4:	18db5214 	ori	r3,r3,27976

    beq r2, r3, 1f
   401e8:	10c00326 	beq	r2,r3,401f8 <_start+0x40>

0:
    stw zero, (r2)
   401ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f4:	10fffd36 	bltu	r2,r3,401ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f8:	004ea8c0 	call	4ea8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401fc:	004ec2c0 	call	4ec2c <alt_main>

00040200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40200:	003fff06 	br	40200 <alt_after_alt_main>

00040204 <AIC23_init>:
//AIC Master Mode                                                           0130     0A00    0C00    0E5E   (0001->48k,0019->32k, 0023->44.1k, 001D->96k)
extern unsigned int aic23_demo[10];    // = {0x0017, 0x0017, 0x01f9, 0x01f9, 0x0012, 0x0000, 0x0000, 0x0042, 0x0001, 0x0001};;


// Initializes AIC to default
void AIC23_init(){
   40204:	defffd04 	addi	sp,sp,-12
   40208:	dfc00215 	stw	ra,8(sp)
   4020c:	df000115 	stw	fp,4(sp)
   40210:	df000104 	addi	fp,sp,4
	int i = 0;
   40214:	e03fff15 	stw	zero,-4(fp)
	for(i = 0; i < 11; i++){
   40218:	e03fff15 	stw	zero,-4(fp)
   4021c:	00001d06 	br	40294 <AIC23_init+0x90>
		spi_send(i, aic23_default_config[i]);
   40220:	e0ffff17 	ldw	r3,-4(fp)
   40224:	01000174 	movhi	r4,5
   40228:	21071704 	addi	r4,r4,7260
   4022c:	e0bfff17 	ldw	r2,-4(fp)
   40230:	1085883a 	add	r2,r2,r2
   40234:	1085883a 	add	r2,r2,r2
   40238:	2085883a 	add	r2,r4,r2
   4023c:	10800017 	ldw	r2,0(r2)
   40240:	1809883a 	mov	r4,r3
   40244:	100b883a 	mov	r5,r2
   40248:	00423f00 	call	423f0 <spi_send>
		aic23_config[i] = aic23_default_config[i];
   4024c:	00c00174 	movhi	r3,5
   40250:	18c71704 	addi	r3,r3,7260
   40254:	e0bfff17 	ldw	r2,-4(fp)
   40258:	1085883a 	add	r2,r2,r2
   4025c:	1085883a 	add	r2,r2,r2
   40260:	1885883a 	add	r2,r3,r2
   40264:	10800017 	ldw	r2,0(r2)
   40268:	1007883a 	mov	r3,r2
   4026c:	01000174 	movhi	r4,5
   40270:	21070c04 	addi	r4,r4,7216
   40274:	e0bfff17 	ldw	r2,-4(fp)
   40278:	1085883a 	add	r2,r2,r2
   4027c:	1085883a 	add	r2,r2,r2
   40280:	2085883a 	add	r2,r4,r2
   40284:	10c00015 	stw	r3,0(r2)


// Initializes AIC to default
void AIC23_init(){
	int i = 0;
	for(i = 0; i < 11; i++){
   40288:	e0bfff17 	ldw	r2,-4(fp)
   4028c:	10800044 	addi	r2,r2,1
   40290:	e0bfff15 	stw	r2,-4(fp)
   40294:	e0bfff17 	ldw	r2,-4(fp)
   40298:	108002d0 	cmplti	r2,r2,11
   4029c:	103fe01e 	bne	r2,zero,40220 <AIC23_init+0x1c>
		spi_send(i, aic23_default_config[i]);
		aic23_config[i] = aic23_default_config[i];
	}
}
   402a0:	e037883a 	mov	sp,fp
   402a4:	dfc00117 	ldw	ra,4(sp)
   402a8:	df000017 	ldw	fp,0(sp)
   402ac:	dec00204 	addi	sp,sp,8
   402b0:	f800283a 	ret

000402b4 <AIC23_reset>:

void AIC23_reset(){
   402b4:	defffe04 	addi	sp,sp,-8
   402b8:	dfc00115 	stw	ra,4(sp)
   402bc:	df000015 	stw	fp,0(sp)
   402c0:	d839883a 	mov	fp,sp
	spi_send(0x0F, 0x00);
   402c4:	010003c4 	movi	r4,15
   402c8:	000b883a 	mov	r5,zero
   402cc:	00423f00 	call	423f0 <spi_send>
}
   402d0:	e037883a 	mov	sp,fp
   402d4:	dfc00117 	ldw	ra,4(sp)
   402d8:	df000017 	ldw	fp,0(sp)
   402dc:	dec00204 	addi	sp,sp,8
   402e0:	f800283a 	ret

000402e4 <AIC23_config>:

void AIC23_config(int address, int setting){
   402e4:	defffc04 	addi	sp,sp,-16
   402e8:	dfc00315 	stw	ra,12(sp)
   402ec:	df000215 	stw	fp,8(sp)
   402f0:	df000204 	addi	fp,sp,8
   402f4:	e13ffe15 	stw	r4,-8(fp)
   402f8:	e17fff15 	stw	r5,-4(fp)
	aic23_demo[address] = setting;
   402fc:	e0ffff17 	ldw	r3,-4(fp)
   40300:	01000174 	movhi	r4,5
   40304:	21072204 	addi	r4,r4,7304
   40308:	e0bffe17 	ldw	r2,-8(fp)
   4030c:	1085883a 	add	r2,r2,r2
   40310:	1085883a 	add	r2,r2,r2
   40314:	2085883a 	add	r2,r4,r2
   40318:	10c00015 	stw	r3,0(r2)
	AIC23_demo();
   4031c:	00403340 	call	40334 <AIC23_demo>
}
   40320:	e037883a 	mov	sp,fp
   40324:	dfc00117 	ldw	ra,4(sp)
   40328:	df000017 	ldw	fp,0(sp)
   4032c:	dec00204 	addi	sp,sp,8
   40330:	f800283a 	ret

00040334 <AIC23_demo>:

/*AIC configuration function: Update all control registers*/
void AIC23_demo(){
   40334:	defffd04 	addi	sp,sp,-12
   40338:	dfc00215 	stw	ra,8(sp)
   4033c:	df000115 	stw	fp,4(sp)
   40340:	df000104 	addi	fp,sp,4
	int i = 0;
   40344:	e03fff15 	stw	zero,-4(fp)
	for(i = 0; i < 10; i++){
   40348:	e03fff15 	stw	zero,-4(fp)
   4034c:	00001c06 	br	403c0 <AIC23_demo+0x8c>
		spi_send(i, aic23_demo[i]);
   40350:	e0ffff17 	ldw	r3,-4(fp)
   40354:	01000174 	movhi	r4,5
   40358:	21072204 	addi	r4,r4,7304
   4035c:	e0bfff17 	ldw	r2,-4(fp)
   40360:	1085883a 	add	r2,r2,r2
   40364:	1085883a 	add	r2,r2,r2
   40368:	2085883a 	add	r2,r4,r2
   4036c:	10800017 	ldw	r2,0(r2)
   40370:	1809883a 	mov	r4,r3
   40374:	100b883a 	mov	r5,r2
   40378:	00423f00 	call	423f0 <spi_send>
		aic23_config[i] = aic23_demo[i];
   4037c:	00c00174 	movhi	r3,5
   40380:	18c72204 	addi	r3,r3,7304
   40384:	e0bfff17 	ldw	r2,-4(fp)
   40388:	1085883a 	add	r2,r2,r2
   4038c:	1085883a 	add	r2,r2,r2
   40390:	1885883a 	add	r2,r3,r2
   40394:	10c00017 	ldw	r3,0(r2)
   40398:	01000174 	movhi	r4,5
   4039c:	21070c04 	addi	r4,r4,7216
   403a0:	e0bfff17 	ldw	r2,-4(fp)
   403a4:	1085883a 	add	r2,r2,r2
   403a8:	1085883a 	add	r2,r2,r2
   403ac:	2085883a 	add	r2,r4,r2
   403b0:	10c00015 	stw	r3,0(r2)
}

/*AIC configuration function: Update all control registers*/
void AIC23_demo(){
	int i = 0;
	for(i = 0; i < 10; i++){
   403b4:	e0bfff17 	ldw	r2,-4(fp)
   403b8:	10800044 	addi	r2,r2,1
   403bc:	e0bfff15 	stw	r2,-4(fp)
   403c0:	e0bfff17 	ldw	r2,-4(fp)
   403c4:	10800290 	cmplti	r2,r2,10
   403c8:	103fe11e 	bne	r2,zero,40350 <AIC23_demo+0x1c>
		spi_send(i, aic23_demo[i]);
		aic23_config[i] = aic23_demo[i];
	}
}
   403cc:	e037883a 	mov	sp,fp
   403d0:	dfc00117 	ldw	ra,4(sp)
   403d4:	df000017 	ldw	fp,0(sp)
   403d8:	dec00204 	addi	sp,sp,8
   403dc:	f800283a 	ret

000403e0 <AIC_setFreq>:



void AIC_setFreq(int sampleRate){
   403e0:	defffd04 	addi	sp,sp,-12
   403e4:	dfc00215 	stw	ra,8(sp)
   403e8:	df000115 	stw	fp,4(sp)
   403ec:	df000104 	addi	fp,sp,4
   403f0:	e13fff15 	stw	r4,-4(fp)
	aic23_demo[8] = sampleRate;
   403f4:	e0ffff17 	ldw	r3,-4(fp)
   403f8:	00800174 	movhi	r2,5
   403fc:	10872204 	addi	r2,r2,7304
   40400:	10c00815 	stw	r3,32(r2)
	AIC23_demo();
   40404:	00403340 	call	40334 <AIC23_demo>
}
   40408:	e037883a 	mov	sp,fp
   4040c:	dfc00117 	ldw	ra,4(sp)
   40410:	df000017 	ldw	fp,0(sp)
   40414:	dec00204 	addi	sp,sp,8
   40418:	f800283a 	ret

0004041c <AIC23_read>:
	POWER_DOWN
	DIGITAL_AUDIO_INTERFACE
	SAMPLE_RATE
	DIGITAL_INTERFACE_ACTIVATION
 */
unsigned int AIC23_read(unsigned char address){
   4041c:	defffe04 	addi	sp,sp,-8
   40420:	df000115 	stw	fp,4(sp)
   40424:	df000104 	addi	fp,sp,4
   40428:	2005883a 	mov	r2,r4
   4042c:	e0bfff05 	stb	r2,-4(fp)
	return aic23_config[address];
   40430:	e0bfff03 	ldbu	r2,-4(fp)
   40434:	00c00174 	movhi	r3,5
   40438:	18c70c04 	addi	r3,r3,7216
   4043c:	1085883a 	add	r2,r2,r2
   40440:	1085883a 	add	r2,r2,r2
   40444:	1885883a 	add	r2,r3,r2
   40448:	10800017 	ldw	r2,0(r2)
}
   4044c:	e037883a 	mov	sp,fp
   40450:	df000017 	ldw	fp,0(sp)
   40454:	dec00104 	addi	sp,sp,4
   40458:	f800283a 	ret

0004045c <AIC23_line_lrs>:
/* Left/right line simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_line_lrs(unsigned int simultaneous_update){
   4045c:	defffd04 	addi	sp,sp,-12
   40460:	dfc00215 	stw	ra,8(sp)
   40464:	df000115 	stw	fp,4(sp)
   40468:	df000104 	addi	fp,sp,4
   4046c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x00FF) | (simultaneous_update << 8);
   40470:	00800174 	movhi	r2,5
   40474:	10870c04 	addi	r2,r2,7216
   40478:	10800017 	ldw	r2,0(r2)
   4047c:	10c03fcc 	andi	r3,r2,255
   40480:	e0bfff17 	ldw	r2,-4(fp)
   40484:	1004923a 	slli	r2,r2,8
   40488:	1886b03a 	or	r3,r3,r2
   4048c:	00800174 	movhi	r2,5
   40490:	10870c04 	addi	r2,r2,7216
   40494:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40498:	00800174 	movhi	r2,5
   4049c:	10870c04 	addi	r2,r2,7216
   404a0:	10800017 	ldw	r2,0(r2)
   404a4:	0009883a 	mov	r4,zero
   404a8:	100b883a 	mov	r5,r2
   404ac:	00423f00 	call	423f0 <spi_send>
}
   404b0:	e037883a 	mov	sp,fp
   404b4:	dfc00117 	ldw	ra,4(sp)
   404b8:	df000017 	ldw	fp,0(sp)
   404bc:	dec00204 	addi	sp,sp,8
   404c0:	f800283a 	ret

000404c4 <AIC23_line_lim>:
/* Left line input mute
   Valid inputs:
		NORMAL
		MUTED
*/
void AIC23_line_lim(unsigned int mute){
   404c4:	defffd04 	addi	sp,sp,-12
   404c8:	dfc00215 	stw	ra,8(sp)
   404cc:	df000115 	stw	fp,4(sp)
   404d0:	df000104 	addi	fp,sp,4
   404d4:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x017F) | (mute << 7);
   404d8:	00800174 	movhi	r2,5
   404dc:	10870c04 	addi	r2,r2,7216
   404e0:	10800017 	ldw	r2,0(r2)
   404e4:	10c05fcc 	andi	r3,r2,383
   404e8:	e0bfff17 	ldw	r2,-4(fp)
   404ec:	100491fa 	slli	r2,r2,7
   404f0:	1886b03a 	or	r3,r3,r2
   404f4:	00800174 	movhi	r2,5
   404f8:	10870c04 	addi	r2,r2,7216
   404fc:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40500:	00800174 	movhi	r2,5
   40504:	10870c04 	addi	r2,r2,7216
   40508:	10800017 	ldw	r2,0(r2)
   4050c:	0009883a 	mov	r4,zero
   40510:	100b883a 	mov	r5,r2
   40514:	00423f00 	call	423f0 <spi_send>
}
   40518:	e037883a 	mov	sp,fp
   4051c:	dfc00117 	ldw	ra,4(sp)
   40520:	df000017 	ldw	fp,0(sp)
   40524:	dec00204 	addi	sp,sp,8
   40528:	f800283a 	ret

0004052c <AIC23_line_liv>:
/* Left line input volume control
   Valid inputs:
		0b10111 = 0dB default
		0b11111 = +12 dB down to 0b00000 = -34.5dB in 1.5dB steps
*/
void AIC23_line_liv(unsigned int volume){
   4052c:	defffd04 	addi	sp,sp,-12
   40530:	dfc00215 	stw	ra,8(sp)
   40534:	df000115 	stw	fp,4(sp)
   40538:	df000104 	addi	fp,sp,4
   4053c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x01E0) | (volume);
   40540:	00800174 	movhi	r2,5
   40544:	10870c04 	addi	r2,r2,7216
   40548:	10800017 	ldw	r2,0(r2)
   4054c:	10c0780c 	andi	r3,r2,480
   40550:	e0bfff17 	ldw	r2,-4(fp)
   40554:	1886b03a 	or	r3,r3,r2
   40558:	00800174 	movhi	r2,5
   4055c:	10870c04 	addi	r2,r2,7216
   40560:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40564:	00800174 	movhi	r2,5
   40568:	10870c04 	addi	r2,r2,7216
   4056c:	10800017 	ldw	r2,0(r2)
   40570:	0009883a 	mov	r4,zero
   40574:	100b883a 	mov	r5,r2
   40578:	00423f00 	call	423f0 <spi_send>
}
   4057c:	e037883a 	mov	sp,fp
   40580:	dfc00117 	ldw	ra,4(sp)
   40584:	df000017 	ldw	fp,0(sp)
   40588:	dec00204 	addi	sp,sp,8
   4058c:	f800283a 	ret

00040590 <AIC23_line_rls>:
/* Right/left line simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_line_rls(unsigned int simultaneous_update){
   40590:	defffd04 	addi	sp,sp,-12
   40594:	dfc00215 	stw	ra,8(sp)
   40598:	df000115 	stw	fp,4(sp)
   4059c:	df000104 	addi	fp,sp,4
   405a0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x00FF) | (simultaneous_update << 8);
   405a4:	00800174 	movhi	r2,5
   405a8:	10870c04 	addi	r2,r2,7216
   405ac:	10800117 	ldw	r2,4(r2)
   405b0:	10c03fcc 	andi	r3,r2,255
   405b4:	e0bfff17 	ldw	r2,-4(fp)
   405b8:	1004923a 	slli	r2,r2,8
   405bc:	1886b03a 	or	r3,r3,r2
   405c0:	00800174 	movhi	r2,5
   405c4:	10870c04 	addi	r2,r2,7216
   405c8:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   405cc:	00800174 	movhi	r2,5
   405d0:	10870c04 	addi	r2,r2,7216
   405d4:	10800117 	ldw	r2,4(r2)
   405d8:	01000044 	movi	r4,1
   405dc:	100b883a 	mov	r5,r2
   405e0:	00423f00 	call	423f0 <spi_send>
}
   405e4:	e037883a 	mov	sp,fp
   405e8:	dfc00117 	ldw	ra,4(sp)
   405ec:	df000017 	ldw	fp,0(sp)
   405f0:	dec00204 	addi	sp,sp,8
   405f4:	f800283a 	ret

000405f8 <AIC23_line_rim>:
/* Right line input mute
   Valid inputs:
		NORMAL
		MUTED
*/
void AIC23_line_rim(unsigned int mute){
   405f8:	defffd04 	addi	sp,sp,-12
   405fc:	dfc00215 	stw	ra,8(sp)
   40600:	df000115 	stw	fp,4(sp)
   40604:	df000104 	addi	fp,sp,4
   40608:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x017F) | (mute << 7);
   4060c:	00800174 	movhi	r2,5
   40610:	10870c04 	addi	r2,r2,7216
   40614:	10800117 	ldw	r2,4(r2)
   40618:	10c05fcc 	andi	r3,r2,383
   4061c:	e0bfff17 	ldw	r2,-4(fp)
   40620:	100491fa 	slli	r2,r2,7
   40624:	1886b03a 	or	r3,r3,r2
   40628:	00800174 	movhi	r2,5
   4062c:	10870c04 	addi	r2,r2,7216
   40630:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   40634:	00800174 	movhi	r2,5
   40638:	10870c04 	addi	r2,r2,7216
   4063c:	10800117 	ldw	r2,4(r2)
   40640:	01000044 	movi	r4,1
   40644:	100b883a 	mov	r5,r2
   40648:	00423f00 	call	423f0 <spi_send>
}
   4064c:	e037883a 	mov	sp,fp
   40650:	dfc00117 	ldw	ra,4(sp)
   40654:	df000017 	ldw	fp,0(sp)
   40658:	dec00204 	addi	sp,sp,8
   4065c:	f800283a 	ret

00040660 <AIC23_line_riv>:
/* Right line input volume control
   Valid inputs:
		0b10111 = 0dB default
		0b11111 = +12 dB down to 0b00000 = -34.5dB in 1.5dB steps
*/
void AIC23_line_riv(unsigned int volume){
   40660:	defffd04 	addi	sp,sp,-12
   40664:	dfc00215 	stw	ra,8(sp)
   40668:	df000115 	stw	fp,4(sp)
   4066c:	df000104 	addi	fp,sp,4
   40670:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x01E0) | (volume);
   40674:	00800174 	movhi	r2,5
   40678:	10870c04 	addi	r2,r2,7216
   4067c:	10800117 	ldw	r2,4(r2)
   40680:	10c0780c 	andi	r3,r2,480
   40684:	e0bfff17 	ldw	r2,-4(fp)
   40688:	1886b03a 	or	r3,r3,r2
   4068c:	00800174 	movhi	r2,5
   40690:	10870c04 	addi	r2,r2,7216
   40694:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   40698:	00800174 	movhi	r2,5
   4069c:	10870c04 	addi	r2,r2,7216
   406a0:	10800117 	ldw	r2,4(r2)
   406a4:	01000044 	movi	r4,1
   406a8:	100b883a 	mov	r5,r2
   406ac:	00423f00 	call	423f0 <spi_send>
}
   406b0:	e037883a 	mov	sp,fp
   406b4:	dfc00117 	ldw	ra,4(sp)
   406b8:	df000017 	ldw	fp,0(sp)
   406bc:	dec00204 	addi	sp,sp,8
   406c0:	f800283a 	ret

000406c4 <AIC23_head_lrs>:
/* Left/right headphone simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_head_lrs(unsigned int simultaneous_update){
   406c4:	defffd04 	addi	sp,sp,-12
   406c8:	dfc00215 	stw	ra,8(sp)
   406cc:	df000115 	stw	fp,4(sp)
   406d0:	df000104 	addi	fp,sp,4
   406d4:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x00FF) | (simultaneous_update << 8);
   406d8:	00800174 	movhi	r2,5
   406dc:	10870c04 	addi	r2,r2,7216
   406e0:	10800217 	ldw	r2,8(r2)
   406e4:	10c03fcc 	andi	r3,r2,255
   406e8:	e0bfff17 	ldw	r2,-4(fp)
   406ec:	1004923a 	slli	r2,r2,8
   406f0:	1886b03a 	or	r3,r3,r2
   406f4:	00800174 	movhi	r2,5
   406f8:	10870c04 	addi	r2,r2,7216
   406fc:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   40700:	00800174 	movhi	r2,5
   40704:	10870c04 	addi	r2,r2,7216
   40708:	10800217 	ldw	r2,8(r2)
   4070c:	01000084 	movi	r4,2
   40710:	100b883a 	mov	r5,r2
   40714:	00423f00 	call	423f0 <spi_send>
}
   40718:	e037883a 	mov	sp,fp
   4071c:	dfc00117 	ldw	ra,4(sp)
   40720:	df000017 	ldw	fp,0(sp)
   40724:	dec00204 	addi	sp,sp,8
   40728:	f800283a 	ret

0004072c <AIC23_head_lzc>:
/* Left Channel Zero-Cross Detect
   Valid inputs:
		ON
		OFF
*/
void AIC23_head_lzc(unsigned int zero){
   4072c:	defffd04 	addi	sp,sp,-12
   40730:	dfc00215 	stw	ra,8(sp)
   40734:	df000115 	stw	fp,4(sp)
   40738:	df000104 	addi	fp,sp,4
   4073c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x017F) | (zero << 7);
   40740:	00800174 	movhi	r2,5
   40744:	10870c04 	addi	r2,r2,7216
   40748:	10800217 	ldw	r2,8(r2)
   4074c:	10c05fcc 	andi	r3,r2,383
   40750:	e0bfff17 	ldw	r2,-4(fp)
   40754:	100491fa 	slli	r2,r2,7
   40758:	1886b03a 	or	r3,r3,r2
   4075c:	00800174 	movhi	r2,5
   40760:	10870c04 	addi	r2,r2,7216
   40764:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   40768:	00800174 	movhi	r2,5
   4076c:	10870c04 	addi	r2,r2,7216
   40770:	10800217 	ldw	r2,8(r2)
   40774:	01000084 	movi	r4,2
   40778:	100b883a 	mov	r5,r2
   4077c:	00423f00 	call	423f0 <spi_send>
}
   40780:	e037883a 	mov	sp,fp
   40784:	dfc00117 	ldw	ra,4(sp)
   40788:	df000017 	ldw	fp,0(sp)
   4078c:	dec00204 	addi	sp,sp,8
   40790:	f800283a 	ret

00040794 <AIC23_head_lhv>:
   Valid Inputs:
   	   0b1111001 = 0dB default
   	   0b1111111 = +6dB down to 0b0110000 = -73dB mute in 1dB increments
   	   Anything lower than -73dB is still mute. 79 steps in between max/min.
 */
void AIC23_head_lhv(unsigned int volume){
   40794:	defffd04 	addi	sp,sp,-12
   40798:	dfc00215 	stw	ra,8(sp)
   4079c:	df000115 	stw	fp,4(sp)
   407a0:	df000104 	addi	fp,sp,4
   407a4:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x0180) | volume;
   407a8:	00800174 	movhi	r2,5
   407ac:	10870c04 	addi	r2,r2,7216
   407b0:	10800217 	ldw	r2,8(r2)
   407b4:	10c0600c 	andi	r3,r2,384
   407b8:	e0bfff17 	ldw	r2,-4(fp)
   407bc:	1886b03a 	or	r3,r3,r2
   407c0:	00800174 	movhi	r2,5
   407c4:	10870c04 	addi	r2,r2,7216
   407c8:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   407cc:	00800174 	movhi	r2,5
   407d0:	10870c04 	addi	r2,r2,7216
   407d4:	10800217 	ldw	r2,8(r2)
   407d8:	01000084 	movi	r4,2
   407dc:	100b883a 	mov	r5,r2
   407e0:	00423f00 	call	423f0 <spi_send>
}
   407e4:	e037883a 	mov	sp,fp
   407e8:	dfc00117 	ldw	ra,4(sp)
   407ec:	df000017 	ldw	fp,0(sp)
   407f0:	dec00204 	addi	sp,sp,8
   407f4:	f800283a 	ret

000407f8 <AIC23_head_rls>:
/* Right/left headphone simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_head_rls(unsigned int simultaneous_update){
   407f8:	defffd04 	addi	sp,sp,-12
   407fc:	dfc00215 	stw	ra,8(sp)
   40800:	df000115 	stw	fp,4(sp)
   40804:	df000104 	addi	fp,sp,4
   40808:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x00FF) | (simultaneous_update << 8);
   4080c:	00800174 	movhi	r2,5
   40810:	10870c04 	addi	r2,r2,7216
   40814:	10800317 	ldw	r2,12(r2)
   40818:	10c03fcc 	andi	r3,r2,255
   4081c:	e0bfff17 	ldw	r2,-4(fp)
   40820:	1004923a 	slli	r2,r2,8
   40824:	1886b03a 	or	r3,r3,r2
   40828:	00800174 	movhi	r2,5
   4082c:	10870c04 	addi	r2,r2,7216
   40830:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   40834:	00800174 	movhi	r2,5
   40838:	10870c04 	addi	r2,r2,7216
   4083c:	10800317 	ldw	r2,12(r2)
   40840:	010000c4 	movi	r4,3
   40844:	100b883a 	mov	r5,r2
   40848:	00423f00 	call	423f0 <spi_send>
}
   4084c:	e037883a 	mov	sp,fp
   40850:	dfc00117 	ldw	ra,4(sp)
   40854:	df000017 	ldw	fp,0(sp)
   40858:	dec00204 	addi	sp,sp,8
   4085c:	f800283a 	ret

00040860 <AIC23_head_rzc>:
/* Right Channel Zero-Cross Detect
   Valid inputs:
		ON
		OFF
*/
void AIC23_head_rzc(unsigned int zero){
   40860:	defffd04 	addi	sp,sp,-12
   40864:	dfc00215 	stw	ra,8(sp)
   40868:	df000115 	stw	fp,4(sp)
   4086c:	df000104 	addi	fp,sp,4
   40870:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x017F) | ((zero & 0x01) << 7);
   40874:	00800174 	movhi	r2,5
   40878:	10870c04 	addi	r2,r2,7216
   4087c:	10800317 	ldw	r2,12(r2)
   40880:	10c05fcc 	andi	r3,r2,383
   40884:	e0bfff17 	ldw	r2,-4(fp)
   40888:	100491fa 	slli	r2,r2,7
   4088c:	10803fcc 	andi	r2,r2,255
   40890:	1886b03a 	or	r3,r3,r2
   40894:	00800174 	movhi	r2,5
   40898:	10870c04 	addi	r2,r2,7216
   4089c:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   408a0:	00800174 	movhi	r2,5
   408a4:	10870c04 	addi	r2,r2,7216
   408a8:	10800317 	ldw	r2,12(r2)
   408ac:	010000c4 	movi	r4,3
   408b0:	100b883a 	mov	r5,r2
   408b4:	00423f00 	call	423f0 <spi_send>
}
   408b8:	e037883a 	mov	sp,fp
   408bc:	dfc00117 	ldw	ra,4(sp)
   408c0:	df000017 	ldw	fp,0(sp)
   408c4:	dec00204 	addi	sp,sp,8
   408c8:	f800283a 	ret

000408cc <AIC23_head_rhv>:
   Valid Inputs:
   	   0b1111001 = 0dB default
   	   0b1111111 = +6dB down to 0b0110000 = -73dB mute in 1dB increments
   	   Anything lower than -73dB is still mute. 79 steps in between max/min.
 */
void AIC23_head_rhv(unsigned int volume){
   408cc:	defffd04 	addi	sp,sp,-12
   408d0:	dfc00215 	stw	ra,8(sp)
   408d4:	df000115 	stw	fp,4(sp)
   408d8:	df000104 	addi	fp,sp,4
   408dc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x0180) | volume;
   408e0:	00800174 	movhi	r2,5
   408e4:	10870c04 	addi	r2,r2,7216
   408e8:	10800317 	ldw	r2,12(r2)
   408ec:	10c0600c 	andi	r3,r2,384
   408f0:	e0bfff17 	ldw	r2,-4(fp)
   408f4:	1886b03a 	or	r3,r3,r2
   408f8:	00800174 	movhi	r2,5
   408fc:	10870c04 	addi	r2,r2,7216
   40900:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   40904:	00800174 	movhi	r2,5
   40908:	10870c04 	addi	r2,r2,7216
   4090c:	10800317 	ldw	r2,12(r2)
   40910:	010000c4 	movi	r4,3
   40914:	100b883a 	mov	r5,r2
   40918:	00423f00 	call	423f0 <spi_send>
}
   4091c:	e037883a 	mov	sp,fp
   40920:	dfc00117 	ldw	ra,4(sp)
   40924:	df000017 	ldw	fp,0(sp)
   40928:	dec00204 	addi	sp,sp,8
   4092c:	f800283a 	ret

00040930 <AIC23_sidetone_disable>:
//
// 					Analog Audio Path Control
//
/////////////////////////////////////////////////////////////////

void AIC23_sidetone_disable(unsigned int sidetone){
   40930:	defffd04 	addi	sp,sp,-12
   40934:	dfc00215 	stw	ra,8(sp)
   40938:	df000115 	stw	fp,4(sp)
   4093c:	df000104 	addi	fp,sp,4
   40940:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = aic23_config[4] & 0x01DF;
   40944:	00800174 	movhi	r2,5
   40948:	10870c04 	addi	r2,r2,7216
   4094c:	10800417 	ldw	r2,16(r2)
   40950:	10c077cc 	andi	r3,r2,479
   40954:	00800174 	movhi	r2,5
   40958:	10870c04 	addi	r2,r2,7216
   4095c:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40960:	00800174 	movhi	r2,5
   40964:	10870c04 	addi	r2,r2,7216
   40968:	10800417 	ldw	r2,16(r2)
   4096c:	01000104 	movi	r4,4
   40970:	100b883a 	mov	r5,r2
   40974:	00423f00 	call	423f0 <spi_send>
}
   40978:	e037883a 	mov	sp,fp
   4097c:	dfc00117 	ldw	ra,4(sp)
   40980:	df000017 	ldw	fp,0(sp)
   40984:	dec00204 	addi	sp,sp,8
   40988:	f800283a 	ret

0004098c <AIC23_sidetone_add>:

void AIC23_sidetone_add(unsigned int add){
   4098c:	defffd04 	addi	sp,sp,-12
   40990:	dfc00215 	stw	ra,8(sp)
   40994:	df000115 	stw	fp,4(sp)
   40998:	df000104 	addi	fp,sp,4
   4099c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1F) | ((add & 0x0F) << 5);
   409a0:	00800174 	movhi	r2,5
   409a4:	10870c04 	addi	r2,r2,7216
   409a8:	10800417 	ldw	r2,16(r2)
   409ac:	10c007cc 	andi	r3,r2,31
   409b0:	e0bfff17 	ldw	r2,-4(fp)
   409b4:	108003cc 	andi	r2,r2,15
   409b8:	1004917a 	slli	r2,r2,5
   409bc:	1886b03a 	or	r3,r3,r2
   409c0:	00800174 	movhi	r2,5
   409c4:	10870c04 	addi	r2,r2,7216
   409c8:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   409cc:	00800174 	movhi	r2,5
   409d0:	10870c04 	addi	r2,r2,7216
   409d4:	10800417 	ldw	r2,16(r2)
   409d8:	01000104 	movi	r4,4
   409dc:	100b883a 	mov	r5,r2
   409e0:	00423f00 	call	423f0 <spi_send>
}
   409e4:	e037883a 	mov	sp,fp
   409e8:	dfc00117 	ldw	ra,4(sp)
   409ec:	df000017 	ldw	fp,0(sp)
   409f0:	dec00204 	addi	sp,sp,8
   409f4:	f800283a 	ret

000409f8 <AIC23_dac_select>:

void AIC23_dac_select(unsigned int dac){
   409f8:	defffd04 	addi	sp,sp,-12
   409fc:	dfc00215 	stw	ra,8(sp)
   40a00:	df000115 	stw	fp,4(sp)
   40a04:	df000104 	addi	fp,sp,4
   40a08:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1EF) | ((dac & 0x01) << 4);
   40a0c:	00800174 	movhi	r2,5
   40a10:	10870c04 	addi	r2,r2,7216
   40a14:	10800417 	ldw	r2,16(r2)
   40a18:	10c07bcc 	andi	r3,r2,495
   40a1c:	e0bfff17 	ldw	r2,-4(fp)
   40a20:	1080004c 	andi	r2,r2,1
   40a24:	1004913a 	slli	r2,r2,4
   40a28:	1886b03a 	or	r3,r3,r2
   40a2c:	00800174 	movhi	r2,5
   40a30:	10870c04 	addi	r2,r2,7216
   40a34:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40a38:	00800174 	movhi	r2,5
   40a3c:	10870c04 	addi	r2,r2,7216
   40a40:	10800417 	ldw	r2,16(r2)
   40a44:	01000104 	movi	r4,4
   40a48:	100b883a 	mov	r5,r2
   40a4c:	00423f00 	call	423f0 <spi_send>
}
   40a50:	e037883a 	mov	sp,fp
   40a54:	dfc00117 	ldw	ra,4(sp)
   40a58:	df000017 	ldw	fp,0(sp)
   40a5c:	dec00204 	addi	sp,sp,8
   40a60:	f800283a 	ret

00040a64 <AIC23_bypass>:
/* Bypass
   Valid Inputs:
   	   ENABLED
   	   DISABLED
 */
void AIC23_bypass(unsigned int bypass){
   40a64:	defffd04 	addi	sp,sp,-12
   40a68:	dfc00215 	stw	ra,8(sp)
   40a6c:	df000115 	stw	fp,4(sp)
   40a70:	df000104 	addi	fp,sp,4
   40a74:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1F7) | ((bypass & 0x01) << 3);
   40a78:	00800174 	movhi	r2,5
   40a7c:	10870c04 	addi	r2,r2,7216
   40a80:	10800417 	ldw	r2,16(r2)
   40a84:	10c07dcc 	andi	r3,r2,503
   40a88:	e0bfff17 	ldw	r2,-4(fp)
   40a8c:	1080004c 	andi	r2,r2,1
   40a90:	100490fa 	slli	r2,r2,3
   40a94:	1886b03a 	or	r3,r3,r2
   40a98:	00800174 	movhi	r2,5
   40a9c:	10870c04 	addi	r2,r2,7216
   40aa0:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40aa4:	00800174 	movhi	r2,5
   40aa8:	10870c04 	addi	r2,r2,7216
   40aac:	10800417 	ldw	r2,16(r2)
   40ab0:	01000104 	movi	r4,4
   40ab4:	100b883a 	mov	r5,r2
   40ab8:	00423f00 	call	423f0 <spi_send>
}
   40abc:	e037883a 	mov	sp,fp
   40ac0:	dfc00117 	ldw	ra,4(sp)
   40ac4:	df000017 	ldw	fp,0(sp)
   40ac8:	dec00204 	addi	sp,sp,8
   40acc:	f800283a 	ret

00040ad0 <AIC23_input>:

void AIC23_input(unsigned int input){
   40ad0:	defffd04 	addi	sp,sp,-12
   40ad4:	dfc00215 	stw	ra,8(sp)
   40ad8:	df000115 	stw	fp,4(sp)
   40adc:	df000104 	addi	fp,sp,4
   40ae0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FB) | ((input & 0x01) << 2);
   40ae4:	00800174 	movhi	r2,5
   40ae8:	10870c04 	addi	r2,r2,7216
   40aec:	10800417 	ldw	r2,16(r2)
   40af0:	10c07ecc 	andi	r3,r2,507
   40af4:	e0bfff17 	ldw	r2,-4(fp)
   40af8:	1080004c 	andi	r2,r2,1
   40afc:	1085883a 	add	r2,r2,r2
   40b00:	1085883a 	add	r2,r2,r2
   40b04:	1886b03a 	or	r3,r3,r2
   40b08:	00800174 	movhi	r2,5
   40b0c:	10870c04 	addi	r2,r2,7216
   40b10:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40b14:	00800174 	movhi	r2,5
   40b18:	10870c04 	addi	r2,r2,7216
   40b1c:	10800417 	ldw	r2,16(r2)
   40b20:	01000104 	movi	r4,4
   40b24:	100b883a 	mov	r5,r2
   40b28:	00423f00 	call	423f0 <spi_send>
}
   40b2c:	e037883a 	mov	sp,fp
   40b30:	dfc00117 	ldw	ra,4(sp)
   40b34:	df000017 	ldw	fp,0(sp)
   40b38:	dec00204 	addi	sp,sp,8
   40b3c:	f800283a 	ret

00040b40 <AIC23_mic_mute>:

void AIC23_mic_mute(unsigned int mute){
   40b40:	defffd04 	addi	sp,sp,-12
   40b44:	dfc00215 	stw	ra,8(sp)
   40b48:	df000115 	stw	fp,4(sp)
   40b4c:	df000104 	addi	fp,sp,4
   40b50:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FD) | ((mute & 0x01) << 2);
   40b54:	00800174 	movhi	r2,5
   40b58:	10870c04 	addi	r2,r2,7216
   40b5c:	10800417 	ldw	r2,16(r2)
   40b60:	10c07f4c 	andi	r3,r2,509
   40b64:	e0bfff17 	ldw	r2,-4(fp)
   40b68:	1080004c 	andi	r2,r2,1
   40b6c:	1085883a 	add	r2,r2,r2
   40b70:	1085883a 	add	r2,r2,r2
   40b74:	1886b03a 	or	r3,r3,r2
   40b78:	00800174 	movhi	r2,5
   40b7c:	10870c04 	addi	r2,r2,7216
   40b80:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40b84:	00800174 	movhi	r2,5
   40b88:	10870c04 	addi	r2,r2,7216
   40b8c:	10800417 	ldw	r2,16(r2)
   40b90:	01000104 	movi	r4,4
   40b94:	100b883a 	mov	r5,r2
   40b98:	00423f00 	call	423f0 <spi_send>
}
   40b9c:	e037883a 	mov	sp,fp
   40ba0:	dfc00117 	ldw	ra,4(sp)
   40ba4:	df000017 	ldw	fp,0(sp)
   40ba8:	dec00204 	addi	sp,sp,8
   40bac:	f800283a 	ret

00040bb0 <AIC23_mic_boost>:

void AIC23_mic_boost(unsigned int boost){
   40bb0:	defffd04 	addi	sp,sp,-12
   40bb4:	dfc00215 	stw	ra,8(sp)
   40bb8:	df000115 	stw	fp,4(sp)
   40bbc:	df000104 	addi	fp,sp,4
   40bc0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FE) | (boost & 0x01);
   40bc4:	00800174 	movhi	r2,5
   40bc8:	10870c04 	addi	r2,r2,7216
   40bcc:	10800417 	ldw	r2,16(r2)
   40bd0:	10c07f8c 	andi	r3,r2,510
   40bd4:	e0bfff17 	ldw	r2,-4(fp)
   40bd8:	1080004c 	andi	r2,r2,1
   40bdc:	1886b03a 	or	r3,r3,r2
   40be0:	00800174 	movhi	r2,5
   40be4:	10870c04 	addi	r2,r2,7216
   40be8:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40bec:	00800174 	movhi	r2,5
   40bf0:	10870c04 	addi	r2,r2,7216
   40bf4:	10800417 	ldw	r2,16(r2)
   40bf8:	01000104 	movi	r4,4
   40bfc:	100b883a 	mov	r5,r2
   40c00:	00423f00 	call	423f0 <spi_send>
}
   40c04:	e037883a 	mov	sp,fp
   40c08:	dfc00117 	ldw	ra,4(sp)
   40c0c:	df000017 	ldw	fp,0(sp)
   40c10:	dec00204 	addi	sp,sp,8
   40c14:	f800283a 	ret

00040c18 <AIC23_dac_mute>:
//
// 					Digital Audio Path Control
//
/////////////////////////////////////////////////////////////////

void AIC23_dac_mute(unsigned int mute){
   40c18:	defffd04 	addi	sp,sp,-12
   40c1c:	dfc00215 	stw	ra,8(sp)
   40c20:	df000115 	stw	fp,4(sp)
   40c24:	df000104 	addi	fp,sp,4
   40c28:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x1F7) | ((mute & 0x01) << 3);
   40c2c:	00800174 	movhi	r2,5
   40c30:	10870c04 	addi	r2,r2,7216
   40c34:	10800517 	ldw	r2,20(r2)
   40c38:	10c07dcc 	andi	r3,r2,503
   40c3c:	e0bfff17 	ldw	r2,-4(fp)
   40c40:	1080004c 	andi	r2,r2,1
   40c44:	100490fa 	slli	r2,r2,3
   40c48:	1886b03a 	or	r3,r3,r2
   40c4c:	00800174 	movhi	r2,5
   40c50:	10870c04 	addi	r2,r2,7216
   40c54:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40c58:	00800174 	movhi	r2,5
   40c5c:	10870c04 	addi	r2,r2,7216
   40c60:	10800517 	ldw	r2,20(r2)
   40c64:	01000144 	movi	r4,5
   40c68:	100b883a 	mov	r5,r2
   40c6c:	00423f00 	call	423f0 <spi_send>
}
   40c70:	e037883a 	mov	sp,fp
   40c74:	dfc00117 	ldw	ra,4(sp)
   40c78:	df000017 	ldw	fp,0(sp)
   40c7c:	dec00204 	addi	sp,sp,8
   40c80:	f800283a 	ret

00040c84 <AIC23_deemp>:

void AIC23_deemp(unsigned int deemphasis){
   40c84:	defffd04 	addi	sp,sp,-12
   40c88:	dfc00215 	stw	ra,8(sp)
   40c8c:	df000115 	stw	fp,4(sp)
   40c90:	df000104 	addi	fp,sp,4
   40c94:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x01F9) | ((deemphasis & 0x03) << 1);
   40c98:	00800174 	movhi	r2,5
   40c9c:	10870c04 	addi	r2,r2,7216
   40ca0:	10800517 	ldw	r2,20(r2)
   40ca4:	10c07e4c 	andi	r3,r2,505
   40ca8:	e0bfff17 	ldw	r2,-4(fp)
   40cac:	108000cc 	andi	r2,r2,3
   40cb0:	1085883a 	add	r2,r2,r2
   40cb4:	1886b03a 	or	r3,r3,r2
   40cb8:	00800174 	movhi	r2,5
   40cbc:	10870c04 	addi	r2,r2,7216
   40cc0:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40cc4:	00800174 	movhi	r2,5
   40cc8:	10870c04 	addi	r2,r2,7216
   40ccc:	10800517 	ldw	r2,20(r2)
   40cd0:	01000144 	movi	r4,5
   40cd4:	100b883a 	mov	r5,r2
   40cd8:	00423f00 	call	423f0 <spi_send>
}
   40cdc:	e037883a 	mov	sp,fp
   40ce0:	dfc00117 	ldw	ra,4(sp)
   40ce4:	df000017 	ldw	fp,0(sp)
   40ce8:	dec00204 	addi	sp,sp,8
   40cec:	f800283a 	ret

00040cf0 <AIC23_adc_highpass>:

void AIC23_adc_highpass(unsigned int highpass){
   40cf0:	defffd04 	addi	sp,sp,-12
   40cf4:	dfc00215 	stw	ra,8(sp)
   40cf8:	df000115 	stw	fp,4(sp)
   40cfc:	df000104 	addi	fp,sp,4
   40d00:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x01FE) | (highpass & 0x01);
   40d04:	00800174 	movhi	r2,5
   40d08:	10870c04 	addi	r2,r2,7216
   40d0c:	10800517 	ldw	r2,20(r2)
   40d10:	10c07f8c 	andi	r3,r2,510
   40d14:	e0bfff17 	ldw	r2,-4(fp)
   40d18:	1080004c 	andi	r2,r2,1
   40d1c:	1886b03a 	or	r3,r3,r2
   40d20:	00800174 	movhi	r2,5
   40d24:	10870c04 	addi	r2,r2,7216
   40d28:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40d2c:	00800174 	movhi	r2,5
   40d30:	10870c04 	addi	r2,r2,7216
   40d34:	10800517 	ldw	r2,20(r2)
   40d38:	01000144 	movi	r4,5
   40d3c:	100b883a 	mov	r5,r2
   40d40:	00423f00 	call	423f0 <spi_send>
}
   40d44:	e037883a 	mov	sp,fp
   40d48:	dfc00117 	ldw	ra,4(sp)
   40d4c:	df000017 	ldw	fp,0(sp)
   40d50:	dec00204 	addi	sp,sp,8
   40d54:	f800283a 	ret

00040d58 <AIC23_power_on>:
//
// 						Power Down Control
//
/////////////////////////////////////////////////////////////////

void AIC23_power_on(){
   40d58:	defffe04 	addi	sp,sp,-8
   40d5c:	dfc00115 	stw	ra,4(sp)
   40d60:	df000015 	stw	fp,0(sp)
   40d64:	d839883a 	mov	fp,sp
	aic23_config[6] = 0x00;
   40d68:	00800174 	movhi	r2,5
   40d6c:	10870c04 	addi	r2,r2,7216
   40d70:	10000615 	stw	zero,24(r2)
	spi_send(0x06, aic23_config[6]);
   40d74:	00800174 	movhi	r2,5
   40d78:	10870c04 	addi	r2,r2,7216
   40d7c:	10800617 	ldw	r2,24(r2)
   40d80:	01000184 	movi	r4,6
   40d84:	100b883a 	mov	r5,r2
   40d88:	00423f00 	call	423f0 <spi_send>
}
   40d8c:	e037883a 	mov	sp,fp
   40d90:	dfc00117 	ldw	ra,4(sp)
   40d94:	df000017 	ldw	fp,0(sp)
   40d98:	dec00204 	addi	sp,sp,8
   40d9c:	f800283a 	ret

00040da0 <AIC23_power_off>:

void AIC23_power_off(){
   40da0:	defffe04 	addi	sp,sp,-8
   40da4:	dfc00115 	stw	ra,4(sp)
   40da8:	df000015 	stw	fp,0(sp)
   40dac:	d839883a 	mov	fp,sp
	aic23_config[6] = 0xFF;
   40db0:	00800174 	movhi	r2,5
   40db4:	10870c04 	addi	r2,r2,7216
   40db8:	00c03fc4 	movi	r3,255
   40dbc:	10c00615 	stw	r3,24(r2)
	spi_send(0x06, aic23_config[6]);
   40dc0:	00800174 	movhi	r2,5
   40dc4:	10870c04 	addi	r2,r2,7216
   40dc8:	10800617 	ldw	r2,24(r2)
   40dcc:	01000184 	movi	r4,6
   40dd0:	100b883a 	mov	r5,r2
   40dd4:	00423f00 	call	423f0 <spi_send>
}
   40dd8:	e037883a 	mov	sp,fp
   40ddc:	dfc00117 	ldw	ra,4(sp)
   40de0:	df000017 	ldw	fp,0(sp)
   40de4:	dec00204 	addi	sp,sp,8
   40de8:	f800283a 	ret

00040dec <AIC23_mode>:
//
// 				Digital Audio Interface Format
//
/////////////////////////////////////////////////////////////////

void AIC23_mode(unsigned int mode){
   40dec:	defffd04 	addi	sp,sp,-12
   40df0:	dfc00215 	stw	ra,8(sp)
   40df4:	df000115 	stw	fp,4(sp)
   40df8:	df000104 	addi	fp,sp,4
   40dfc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01BF) | ((mode & 0x01) << 6);
   40e00:	00800174 	movhi	r2,5
   40e04:	10870c04 	addi	r2,r2,7216
   40e08:	10800717 	ldw	r2,28(r2)
   40e0c:	10c06fcc 	andi	r3,r2,447
   40e10:	e0bfff17 	ldw	r2,-4(fp)
   40e14:	1080004c 	andi	r2,r2,1
   40e18:	100491ba 	slli	r2,r2,6
   40e1c:	1886b03a 	or	r3,r3,r2
   40e20:	00800174 	movhi	r2,5
   40e24:	10870c04 	addi	r2,r2,7216
   40e28:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40e2c:	00800174 	movhi	r2,5
   40e30:	10870c04 	addi	r2,r2,7216
   40e34:	10800717 	ldw	r2,28(r2)
   40e38:	010001c4 	movi	r4,7
   40e3c:	100b883a 	mov	r5,r2
   40e40:	00423f00 	call	423f0 <spi_send>
}
   40e44:	e037883a 	mov	sp,fp
   40e48:	dfc00117 	ldw	ra,4(sp)
   40e4c:	df000017 	ldw	fp,0(sp)
   40e50:	dec00204 	addi	sp,sp,8
   40e54:	f800283a 	ret

00040e58 <AIC23_lr_swap>:

void AIC23_lr_swap(unsigned int swap){
   40e58:	defffd04 	addi	sp,sp,-12
   40e5c:	dfc00215 	stw	ra,8(sp)
   40e60:	df000115 	stw	fp,4(sp)
   40e64:	df000104 	addi	fp,sp,4
   40e68:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01DF) | ((swap & 0x01) << 5);
   40e6c:	00800174 	movhi	r2,5
   40e70:	10870c04 	addi	r2,r2,7216
   40e74:	10800717 	ldw	r2,28(r2)
   40e78:	10c077cc 	andi	r3,r2,479
   40e7c:	e0bfff17 	ldw	r2,-4(fp)
   40e80:	1080004c 	andi	r2,r2,1
   40e84:	1004917a 	slli	r2,r2,5
   40e88:	1886b03a 	or	r3,r3,r2
   40e8c:	00800174 	movhi	r2,5
   40e90:	10870c04 	addi	r2,r2,7216
   40e94:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40e98:	00800174 	movhi	r2,5
   40e9c:	10870c04 	addi	r2,r2,7216
   40ea0:	10800717 	ldw	r2,28(r2)
   40ea4:	010001c4 	movi	r4,7
   40ea8:	100b883a 	mov	r5,r2
   40eac:	00423f00 	call	423f0 <spi_send>

}
   40eb0:	e037883a 	mov	sp,fp
   40eb4:	dfc00117 	ldw	ra,4(sp)
   40eb8:	df000017 	ldw	fp,0(sp)
   40ebc:	dec00204 	addi	sp,sp,8
   40ec0:	f800283a 	ret

00040ec4 <AIC23_lr_phase>:

void AIC23_lr_phase(unsigned int phase){
   40ec4:	defffd04 	addi	sp,sp,-12
   40ec8:	dfc00215 	stw	ra,8(sp)
   40ecc:	df000115 	stw	fp,4(sp)
   40ed0:	df000104 	addi	fp,sp,4
   40ed4:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01EF) | ((phase & 0x01) << 4);
   40ed8:	00800174 	movhi	r2,5
   40edc:	10870c04 	addi	r2,r2,7216
   40ee0:	10800717 	ldw	r2,28(r2)
   40ee4:	10c07bcc 	andi	r3,r2,495
   40ee8:	e0bfff17 	ldw	r2,-4(fp)
   40eec:	1080004c 	andi	r2,r2,1
   40ef0:	1004913a 	slli	r2,r2,4
   40ef4:	1886b03a 	or	r3,r3,r2
   40ef8:	00800174 	movhi	r2,5
   40efc:	10870c04 	addi	r2,r2,7216
   40f00:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40f04:	00800174 	movhi	r2,5
   40f08:	10870c04 	addi	r2,r2,7216
   40f0c:	10800717 	ldw	r2,28(r2)
   40f10:	010001c4 	movi	r4,7
   40f14:	100b883a 	mov	r5,r2
   40f18:	00423f00 	call	423f0 <spi_send>
}
   40f1c:	e037883a 	mov	sp,fp
   40f20:	dfc00117 	ldw	ra,4(sp)
   40f24:	df000017 	ldw	fp,0(sp)
   40f28:	dec00204 	addi	sp,sp,8
   40f2c:	f800283a 	ret

00040f30 <AIC23_input_len>:

void AIC23_input_len(unsigned int length){
   40f30:	defffd04 	addi	sp,sp,-12
   40f34:	dfc00215 	stw	ra,8(sp)
   40f38:	df000115 	stw	fp,4(sp)
   40f3c:	df000104 	addi	fp,sp,4
   40f40:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01F3) | ((length & 0x03) << 2);
   40f44:	00800174 	movhi	r2,5
   40f48:	10870c04 	addi	r2,r2,7216
   40f4c:	10800717 	ldw	r2,28(r2)
   40f50:	10c07ccc 	andi	r3,r2,499
   40f54:	e0bfff17 	ldw	r2,-4(fp)
   40f58:	108000cc 	andi	r2,r2,3
   40f5c:	1085883a 	add	r2,r2,r2
   40f60:	1085883a 	add	r2,r2,r2
   40f64:	1886b03a 	or	r3,r3,r2
   40f68:	00800174 	movhi	r2,5
   40f6c:	10870c04 	addi	r2,r2,7216
   40f70:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40f74:	00800174 	movhi	r2,5
   40f78:	10870c04 	addi	r2,r2,7216
   40f7c:	10800717 	ldw	r2,28(r2)
   40f80:	010001c4 	movi	r4,7
   40f84:	100b883a 	mov	r5,r2
   40f88:	00423f00 	call	423f0 <spi_send>
}
   40f8c:	e037883a 	mov	sp,fp
   40f90:	dfc00117 	ldw	ra,4(sp)
   40f94:	df000017 	ldw	fp,0(sp)
   40f98:	dec00204 	addi	sp,sp,8
   40f9c:	f800283a 	ret

00040fa0 <AIC23_format>:

void AIC23_format(unsigned int format){
   40fa0:	defffd04 	addi	sp,sp,-12
   40fa4:	dfc00215 	stw	ra,8(sp)
   40fa8:	df000115 	stw	fp,4(sp)
   40fac:	df000104 	addi	fp,sp,4
   40fb0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01FC) | (format & 0x03);
   40fb4:	00800174 	movhi	r2,5
   40fb8:	10870c04 	addi	r2,r2,7216
   40fbc:	10800717 	ldw	r2,28(r2)
   40fc0:	10c07f0c 	andi	r3,r2,508
   40fc4:	e0bfff17 	ldw	r2,-4(fp)
   40fc8:	108000cc 	andi	r2,r2,3
   40fcc:	1886b03a 	or	r3,r3,r2
   40fd0:	00800174 	movhi	r2,5
   40fd4:	10870c04 	addi	r2,r2,7216
   40fd8:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40fdc:	00800174 	movhi	r2,5
   40fe0:	10870c04 	addi	r2,r2,7216
   40fe4:	10800717 	ldw	r2,28(r2)
   40fe8:	010001c4 	movi	r4,7
   40fec:	100b883a 	mov	r5,r2
   40ff0:	00423f00 	call	423f0 <spi_send>
}
   40ff4:	e037883a 	mov	sp,fp
   40ff8:	dfc00117 	ldw	ra,4(sp)
   40ffc:	df000017 	ldw	fp,0(sp)
   41000:	dec00204 	addi	sp,sp,8
   41004:	f800283a 	ret

00041008 <AIC23_clkin>:
//
// 						Sample Rate Control
//
/////////////////////////////////////////////////////////////////

void AIC23_clkin(unsigned int clock){
   41008:	defffd04 	addi	sp,sp,-12
   4100c:	dfc00215 	stw	ra,8(sp)
   41010:	df000115 	stw	fp,4(sp)
   41014:	df000104 	addi	fp,sp,4
   41018:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x01BF) | ((clock & 0x01) << 6);
   4101c:	00800174 	movhi	r2,5
   41020:	10870c04 	addi	r2,r2,7216
   41024:	10800817 	ldw	r2,32(r2)
   41028:	10c06fcc 	andi	r3,r2,447
   4102c:	e0bfff17 	ldw	r2,-4(fp)
   41030:	1080004c 	andi	r2,r2,1
   41034:	100491ba 	slli	r2,r2,6
   41038:	1886b03a 	or	r3,r3,r2
   4103c:	00800174 	movhi	r2,5
   41040:	10870c04 	addi	r2,r2,7216
   41044:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41048:	00800174 	movhi	r2,5
   4104c:	10870c04 	addi	r2,r2,7216
   41050:	10800817 	ldw	r2,32(r2)
   41054:	01000204 	movi	r4,8
   41058:	100b883a 	mov	r5,r2
   4105c:	00423f00 	call	423f0 <spi_send>
}
   41060:	e037883a 	mov	sp,fp
   41064:	dfc00117 	ldw	ra,4(sp)
   41068:	df000017 	ldw	fp,0(sp)
   4106c:	dec00204 	addi	sp,sp,8
   41070:	f800283a 	ret

00041074 <AIC23_clkout>:

void AIC23_clkout(unsigned int clock){
   41074:	defffd04 	addi	sp,sp,-12
   41078:	dfc00215 	stw	ra,8(sp)
   4107c:	df000115 	stw	fp,4(sp)
   41080:	df000104 	addi	fp,sp,4
   41084:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x017F) | ((clock & 0x01) << 7);
   41088:	00800174 	movhi	r2,5
   4108c:	10870c04 	addi	r2,r2,7216
   41090:	10800817 	ldw	r2,32(r2)
   41094:	10c05fcc 	andi	r3,r2,383
   41098:	e0bfff17 	ldw	r2,-4(fp)
   4109c:	100491fa 	slli	r2,r2,7
   410a0:	10803fcc 	andi	r2,r2,255
   410a4:	1886b03a 	or	r3,r3,r2
   410a8:	00800174 	movhi	r2,5
   410ac:	10870c04 	addi	r2,r2,7216
   410b0:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   410b4:	00800174 	movhi	r2,5
   410b8:	10870c04 	addi	r2,r2,7216
   410bc:	10800817 	ldw	r2,32(r2)
   410c0:	01000204 	movi	r4,8
   410c4:	100b883a 	mov	r5,r2
   410c8:	00423f00 	call	423f0 <spi_send>
}
   410cc:	e037883a 	mov	sp,fp
   410d0:	dfc00117 	ldw	ra,4(sp)
   410d4:	df000017 	ldw	fp,0(sp)
   410d8:	dec00204 	addi	sp,sp,8
   410dc:	f800283a 	ret

000410e0 <AIC23_setFreq>:
	 AIC23_FREQ_32KHZ 0x0c	// 32000 Hz
	 AIC23_FREQ_44KHZ 0x11	// 44100 Hz
	 AIC23_FREQ_48KHZ 0x00	// 48000 Hz
	 AIC23_FREQ_96KHZ 0x0e	// 96000 Hz
 */
void AIC23_setFreq(unsigned int frequency){
   410e0:	defffd04 	addi	sp,sp,-12
   410e4:	dfc00215 	stw	ra,8(sp)
   410e8:	df000115 	stw	fp,4(sp)
   410ec:	df000104 	addi	fp,sp,4
   410f0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1C3) | ((frequency & 0x0F) << 2);
   410f4:	00800174 	movhi	r2,5
   410f8:	10870c04 	addi	r2,r2,7216
   410fc:	10800817 	ldw	r2,32(r2)
   41100:	10c070cc 	andi	r3,r2,451
   41104:	e0bfff17 	ldw	r2,-4(fp)
   41108:	108003cc 	andi	r2,r2,15
   4110c:	1085883a 	add	r2,r2,r2
   41110:	1085883a 	add	r2,r2,r2
   41114:	1886b03a 	or	r3,r3,r2
   41118:	00800174 	movhi	r2,5
   4111c:	10870c04 	addi	r2,r2,7216
   41120:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41124:	00800174 	movhi	r2,5
   41128:	10870c04 	addi	r2,r2,7216
   4112c:	10800817 	ldw	r2,32(r2)
   41130:	01000204 	movi	r4,8
   41134:	100b883a 	mov	r5,r2
   41138:	00423f00 	call	423f0 <spi_send>
}
   4113c:	e037883a 	mov	sp,fp
   41140:	dfc00117 	ldw	ra,4(sp)
   41144:	df000017 	ldw	fp,0(sp)
   41148:	dec00204 	addi	sp,sp,8
   4114c:	f800283a 	ret

00041150 <AIC23_bosr>:

void AIC23_bosr(unsigned int frequency){
   41150:	defffd04 	addi	sp,sp,-12
   41154:	dfc00215 	stw	ra,8(sp)
   41158:	df000115 	stw	fp,4(sp)
   4115c:	df000104 	addi	fp,sp,4
   41160:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1FD) | ((frequency & 0x01) << 1);
   41164:	00800174 	movhi	r2,5
   41168:	10870c04 	addi	r2,r2,7216
   4116c:	10800817 	ldw	r2,32(r2)
   41170:	10c07f4c 	andi	r3,r2,509
   41174:	e0bfff17 	ldw	r2,-4(fp)
   41178:	1080004c 	andi	r2,r2,1
   4117c:	1085883a 	add	r2,r2,r2
   41180:	1886b03a 	or	r3,r3,r2
   41184:	00800174 	movhi	r2,5
   41188:	10870c04 	addi	r2,r2,7216
   4118c:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41190:	00800174 	movhi	r2,5
   41194:	10870c04 	addi	r2,r2,7216
   41198:	10800817 	ldw	r2,32(r2)
   4119c:	01000204 	movi	r4,8
   411a0:	100b883a 	mov	r5,r2
   411a4:	00423f00 	call	423f0 <spi_send>
}
   411a8:	e037883a 	mov	sp,fp
   411ac:	dfc00117 	ldw	ra,4(sp)
   411b0:	df000017 	ldw	fp,0(sp)
   411b4:	dec00204 	addi	sp,sp,8
   411b8:	f800283a 	ret

000411bc <AIC23_clk_mode>:

void AIC23_clk_mode(unsigned int mode){
   411bc:	defffd04 	addi	sp,sp,-12
   411c0:	dfc00215 	stw	ra,8(sp)
   411c4:	df000115 	stw	fp,4(sp)
   411c8:	df000104 	addi	fp,sp,4
   411cc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1FE) | (mode & 0x01);
   411d0:	00800174 	movhi	r2,5
   411d4:	10870c04 	addi	r2,r2,7216
   411d8:	10800817 	ldw	r2,32(r2)
   411dc:	10c07f8c 	andi	r3,r2,510
   411e0:	e0bfff17 	ldw	r2,-4(fp)
   411e4:	1080004c 	andi	r2,r2,1
   411e8:	1886b03a 	or	r3,r3,r2
   411ec:	00800174 	movhi	r2,5
   411f0:	10870c04 	addi	r2,r2,7216
   411f4:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   411f8:	00800174 	movhi	r2,5
   411fc:	10870c04 	addi	r2,r2,7216
   41200:	10800817 	ldw	r2,32(r2)
   41204:	01000204 	movi	r4,8
   41208:	100b883a 	mov	r5,r2
   4120c:	00423f00 	call	423f0 <spi_send>
}
   41210:	e037883a 	mov	sp,fp
   41214:	dfc00117 	ldw	ra,4(sp)
   41218:	df000017 	ldw	fp,0(sp)
   4121c:	dec00204 	addi	sp,sp,8
   41220:	f800283a 	ret

00041224 <AIC23_on>:
// 					Digital Interface Activation
//
/////////////////////////////////////////////////////////////////

// Turns the AIC23 on
void AIC23_on(){
   41224:	defffe04 	addi	sp,sp,-8
   41228:	dfc00115 	stw	ra,4(sp)
   4122c:	df000015 	stw	fp,0(sp)
   41230:	d839883a 	mov	fp,sp
	spi_send(0x06, 0x00);
   41234:	01000184 	movi	r4,6
   41238:	000b883a 	mov	r5,zero
   4123c:	00423f00 	call	423f0 <spi_send>
}
   41240:	e037883a 	mov	sp,fp
   41244:	dfc00117 	ldw	ra,4(sp)
   41248:	df000017 	ldw	fp,0(sp)
   4124c:	dec00204 	addi	sp,sp,8
   41250:	f800283a 	ret

00041254 <AIC23_off>:

// Turns the AIC23 off
void AIC23_off(){
   41254:	defffe04 	addi	sp,sp,-8
   41258:	dfc00115 	stw	ra,4(sp)
   4125c:	df000015 	stw	fp,0(sp)
   41260:	d839883a 	mov	fp,sp
	spi_send(0x06, 0x80);
   41264:	01000184 	movi	r4,6
   41268:	01402004 	movi	r5,128
   4126c:	00423f00 	call	423f0 <spi_send>
}
   41270:	e037883a 	mov	sp,fp
   41274:	dfc00117 	ldw	ra,4(sp)
   41278:	df000017 	ldw	fp,0(sp)
   4127c:	dec00204 	addi	sp,sp,8
   41280:	f800283a 	ret

00041284 <delay>:
   41284:	defffc04 	addi	sp,sp,-16
   41288:	df000315 	stw	fp,12(sp)
   4128c:	df000304 	addi	fp,sp,12
   41290:	e13fff15 	stw	r4,-4(fp)
   41294:	e03ffe15 	stw	zero,-8(fp)
   41298:	e03ffd15 	stw	zero,-12(fp)
   4129c:	e03ffe15 	stw	zero,-8(fp)
   412a0:	00000606 	br	412bc <delay+0x38>
   412a4:	e0bffd17 	ldw	r2,-12(fp)
   412a8:	10800044 	addi	r2,r2,1
   412ac:	e0bffd15 	stw	r2,-12(fp)
   412b0:	e0bffe17 	ldw	r2,-8(fp)
   412b4:	10800044 	addi	r2,r2,1
   412b8:	e0bffe15 	stw	r2,-8(fp)
   412bc:	e0fffe17 	ldw	r3,-8(fp)
   412c0:	e0bfff17 	ldw	r2,-4(fp)
   412c4:	18bff716 	blt	r3,r2,412a4 <delay+0x20>
   412c8:	e037883a 	mov	sp,fp
   412cc:	df000017 	ldw	fp,0(sp)
   412d0:	dec00104 	addi	sp,sp,4
   412d4:	f800283a 	ret

000412d8 <I2S_collect_left>:
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "delay.h"

int I2S_collect_left(){
   412d8:	defffc04 	addi	sp,sp,-16
   412dc:	dfc00315 	stw	ra,12(sp)
   412e0:	df000215 	stw	fp,8(sp)
   412e4:	df000204 	addi	fp,sp,8
	int k = 0;
   412e8:	e03ffe15 	stw	zero,-8(fp)
	int leftChannel = 0;
   412ec:	e03fff15 	stw	zero,-4(fp)

	//Left channel LRCOUT = 0
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 0);
   412f0:	0007883a 	mov	r3,zero
   412f4:	00800234 	movhi	r2,8
   412f8:	10846004 	addi	r2,r2,4480
   412fc:	10c00035 	stwio	r3,0(r2)
    delay(3);
   41300:	010000c4 	movi	r4,3
   41304:	00412840 	call	41284 <delay>
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41308:	0007883a 	mov	r3,zero
   4130c:	00800234 	movhi	r2,8
   41310:	10845804 	addi	r2,r2,4448
   41314:	10c00035 	stwio	r3,0(r2)
	delay(3);
   41318:	010000c4 	movi	r4,3
   4131c:	00412840 	call	41284 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41320:	00c00044 	movi	r3,1
   41324:	00800234 	movhi	r2,8
   41328:	10845804 	addi	r2,r2,4448
   4132c:	10c00035 	stwio	r3,0(r2)
	delay(3);
   41330:	010000c4 	movi	r4,3
   41334:	00412840 	call	41284 <delay>
	for(k = 0; k < 16; k++){
   41338:	e03ffe15 	stw	zero,-8(fp)
   4133c:	00001b06 	br	413ac <I2S_collect_left+0xd4>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41340:	0007883a 	mov	r3,zero
   41344:	00800234 	movhi	r2,8
   41348:	10845804 	addi	r2,r2,4448
   4134c:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41350:	010000c4 	movi	r4,3
   41354:	00412840 	call	41284 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41358:	00c00044 	movi	r3,1
   4135c:	00800234 	movhi	r2,8
   41360:	10845804 	addi	r2,r2,4448
   41364:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41368:	010000c4 	movi	r4,3
   4136c:	00412840 	call	41284 <delay>
		//printf("%i", IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE));
		leftChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
   41370:	00800234 	movhi	r2,8
   41374:	10845c04 	addi	r2,r2,4464
   41378:	10800037 	ldwio	r2,0(r2)
   4137c:	e0ffff17 	ldw	r3,-4(fp)
   41380:	1884b03a 	or	r2,r3,r2
   41384:	e0bfff15 	stw	r2,-4(fp)
		if(k < 15)
   41388:	e0bffe17 	ldw	r2,-8(fp)
   4138c:	108003c8 	cmpgei	r2,r2,15
   41390:	1000031e 	bne	r2,zero,413a0 <I2S_collect_left+0xc8>
			leftChannel <<= 1;
   41394:	e0bfff17 	ldw	r2,-4(fp)
   41398:	1085883a 	add	r2,r2,r2
   4139c:	e0bfff15 	stw	r2,-4(fp)
    delay(3);
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
	delay(3);
	for(k = 0; k < 16; k++){
   413a0:	e0bffe17 	ldw	r2,-8(fp)
   413a4:	10800044 	addi	r2,r2,1
   413a8:	e0bffe15 	stw	r2,-8(fp)
   413ac:	e0bffe17 	ldw	r2,-8(fp)
   413b0:	10800410 	cmplti	r2,r2,16
   413b4:	103fe21e 	bne	r2,zero,41340 <I2S_collect_left+0x68>
		leftChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
		if(k < 15)
			leftChannel <<= 1;

	}
	return leftChannel;
   413b8:	e0bfff17 	ldw	r2,-4(fp)
}
   413bc:	e037883a 	mov	sp,fp
   413c0:	dfc00117 	ldw	ra,4(sp)
   413c4:	df000017 	ldw	fp,0(sp)
   413c8:	dec00204 	addi	sp,sp,8
   413cc:	f800283a 	ret

000413d0 <I2S_collect_right>:

int I2S_collect_right(){
   413d0:	defffc04 	addi	sp,sp,-16
   413d4:	dfc00315 	stw	ra,12(sp)
   413d8:	df000215 	stw	fp,8(sp)
   413dc:	df000204 	addi	fp,sp,8
	int l = 0;
   413e0:	e03ffe15 	stw	zero,-8(fp)
	int rightChannel = 0;
   413e4:	e03fff15 	stw	zero,-4(fp)
	//right channel LRCOUT = 1
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 1);
   413e8:	00c00044 	movi	r3,1
   413ec:	00800234 	movhi	r2,8
   413f0:	10846004 	addi	r2,r2,4480
   413f4:	10c00035 	stwio	r3,0(r2)
    delay(3);
   413f8:	010000c4 	movi	r4,3
   413fc:	00412840 	call	41284 <delay>
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41400:	0007883a 	mov	r3,zero
   41404:	00800234 	movhi	r2,8
   41408:	10845804 	addi	r2,r2,4448
   4140c:	10c00035 	stwio	r3,0(r2)
	delay(3);
   41410:	010000c4 	movi	r4,3
   41414:	00412840 	call	41284 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41418:	00c00044 	movi	r3,1
   4141c:	00800234 	movhi	r2,8
   41420:	10845804 	addi	r2,r2,4448
   41424:	10c00035 	stwio	r3,0(r2)
	for(l = 0; l < 16; l++){
   41428:	e03ffe15 	stw	zero,-8(fp)
   4142c:	00001b06 	br	4149c <I2S_collect_right+0xcc>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41430:	0007883a 	mov	r3,zero
   41434:	00800234 	movhi	r2,8
   41438:	10845804 	addi	r2,r2,4448
   4143c:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41440:	010000c4 	movi	r4,3
   41444:	00412840 	call	41284 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41448:	00c00044 	movi	r3,1
   4144c:	00800234 	movhi	r2,8
   41450:	10845804 	addi	r2,r2,4448
   41454:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41458:	010000c4 	movi	r4,3
   4145c:	00412840 	call	41284 <delay>
		rightChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
   41460:	00800234 	movhi	r2,8
   41464:	10845c04 	addi	r2,r2,4464
   41468:	10800037 	ldwio	r2,0(r2)
   4146c:	e0ffff17 	ldw	r3,-4(fp)
   41470:	1884b03a 	or	r2,r3,r2
   41474:	e0bfff15 	stw	r2,-4(fp)
		if(l < 15)
   41478:	e0bffe17 	ldw	r2,-8(fp)
   4147c:	108003c8 	cmpgei	r2,r2,15
   41480:	1000031e 	bne	r2,zero,41490 <I2S_collect_right+0xc0>
			rightChannel <<= 1;
   41484:	e0bfff17 	ldw	r2,-4(fp)
   41488:	1085883a 	add	r2,r2,r2
   4148c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 1);
    delay(3);
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
	for(l = 0; l < 16; l++){
   41490:	e0bffe17 	ldw	r2,-8(fp)
   41494:	10800044 	addi	r2,r2,1
   41498:	e0bffe15 	stw	r2,-8(fp)
   4149c:	e0bffe17 	ldw	r2,-8(fp)
   414a0:	10800410 	cmplti	r2,r2,16
   414a4:	103fe21e 	bne	r2,zero,41430 <I2S_collect_right+0x60>
		rightChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
		if(l < 15)
			rightChannel <<= 1;
	}

	return rightChannel;
   414a8:	e0bfff17 	ldw	r2,-4(fp)

}
   414ac:	e037883a 	mov	sp,fp
   414b0:	dfc00117 	ldw	ra,4(sp)
   414b4:	df000017 	ldw	fp,0(sp)
   414b8:	dec00204 	addi	sp,sp,8
   414bc:	f800283a 	ret

000414c0 <I2S_send_left>:


void I2S_send_left(int leftdata){
   414c0:	defffc04 	addi	sp,sp,-16
   414c4:	dfc00315 	stw	ra,12(sp)
   414c8:	df000215 	stw	fp,8(sp)
   414cc:	df000204 	addi	fp,sp,8
   414d0:	e13fff15 	stw	r4,-4(fp)
	int temp = 0;
   414d4:	e03ffe15 	stw	zero,-8(fp)

	//Toggle LRCIN to 0
	IOWR_ALTERA_AVALON_PIO_DATA(LRCIN_BASE, 0);
   414d8:	0007883a 	mov	r3,zero
   414dc:	00800234 	movhi	r2,8
   414e0:	10845404 	addi	r2,r2,4432
   414e4:	10c00035 	stwio	r3,0(r2)
	delay(3);
   414e8:	010000c4 	movi	r4,3
   414ec:	00412840 	call	41284 <delay>

	//first Bclk cycle
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   414f0:	0007883a 	mov	r3,zero
   414f4:	00800234 	movhi	r2,8
   414f8:	10845804 	addi	r2,r2,4448
   414fc:	10c00035 	stwio	r3,0(r2)
	delay(3);
   41500:	010000c4 	movi	r4,3
   41504:	00412840 	call	41284 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41508:	00c00044 	movi	r3,1
   4150c:	00800234 	movhi	r2,8
   41510:	10845804 	addi	r2,r2,4448
   41514:	10c00035 	stwio	r3,0(r2)

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41518:	e03ffe15 	stw	zero,-8(fp)
   4151c:	00001906 	br	41584 <I2S_send_left+0xc4>
		//Insert the data to DIN_BASE
		IOWR_ALTERA_AVALON_PIO_DATA(DIN_BASE, !!(leftdata&0x1000));
   41520:	e0bfff17 	ldw	r2,-4(fp)
   41524:	1084000c 	andi	r2,r2,4096
   41528:	1004c03a 	cmpne	r2,r2,zero
   4152c:	10c03fcc 	andi	r3,r2,255
   41530:	00800234 	movhi	r2,8
   41534:	10846804 	addi	r2,r2,4512
   41538:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   4153c:	0007883a 	mov	r3,zero
   41540:	00800234 	movhi	r2,8
   41544:	10845804 	addi	r2,r2,4448
   41548:	10c00035 	stwio	r3,0(r2)
		delay(3);
   4154c:	010000c4 	movi	r4,3
   41550:	00412840 	call	41284 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41554:	00c00044 	movi	r3,1
   41558:	00800234 	movhi	r2,8
   4155c:	10845804 	addi	r2,r2,4448
   41560:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41564:	010000c4 	movi	r4,3
   41568:	00412840 	call	41284 <delay>
		leftdata <<= 1;
   4156c:	e0bfff17 	ldw	r2,-4(fp)
   41570:	1085883a 	add	r2,r2,r2
   41574:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41578:	e0bffe17 	ldw	r2,-8(fp)
   4157c:	10800044 	addi	r2,r2,1
   41580:	e0bffe15 	stw	r2,-8(fp)
   41584:	e0bffe17 	ldw	r2,-8(fp)
   41588:	10800410 	cmplti	r2,r2,16
   4158c:	103fe41e 	bne	r2,zero,41520 <I2S_send_left+0x60>
		delay(3);
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
		delay(3);
		leftdata <<= 1;
	}
}
   41590:	e037883a 	mov	sp,fp
   41594:	dfc00117 	ldw	ra,4(sp)
   41598:	df000017 	ldw	fp,0(sp)
   4159c:	dec00204 	addi	sp,sp,8
   415a0:	f800283a 	ret

000415a4 <I2S_send_right>:


void I2S_send_right(int rightdata){
   415a4:	defffc04 	addi	sp,sp,-16
   415a8:	dfc00315 	stw	ra,12(sp)
   415ac:	df000215 	stw	fp,8(sp)
   415b0:	df000204 	addi	fp,sp,8
   415b4:	e13fff15 	stw	r4,-4(fp)
	int temp = 0;
   415b8:	e03ffe15 	stw	zero,-8(fp)
	//Toggle LRCIN to 0
	IOWR_ALTERA_AVALON_PIO_DATA(0x81060, 1);
   415bc:	00c00044 	movi	r3,1
   415c0:	00800234 	movhi	r2,8
   415c4:	10841804 	addi	r2,r2,4192
   415c8:	10c00035 	stwio	r3,0(r2)
	delay(3);
   415cc:	010000c4 	movi	r4,3
   415d0:	00412840 	call	41284 <delay>

	//first Bclk cycle
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   415d4:	0007883a 	mov	r3,zero
   415d8:	00800234 	movhi	r2,8
   415dc:	10845804 	addi	r2,r2,4448
   415e0:	10c00035 	stwio	r3,0(r2)
	delay(3);
   415e4:	010000c4 	movi	r4,3
   415e8:	00412840 	call	41284 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   415ec:	00c00044 	movi	r3,1
   415f0:	00800234 	movhi	r2,8
   415f4:	10845804 	addi	r2,r2,4448
   415f8:	10c00035 	stwio	r3,0(r2)

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   415fc:	e03ffe15 	stw	zero,-8(fp)
   41600:	00001906 	br	41668 <I2S_send_right+0xc4>
		//Insert the data to DIN_BASE
		IOWR_ALTERA_AVALON_PIO_DATA(DIN_BASE, !!(rightdata&0x1000));
   41604:	e0bfff17 	ldw	r2,-4(fp)
   41608:	1084000c 	andi	r2,r2,4096
   4160c:	1004c03a 	cmpne	r2,r2,zero
   41610:	10c03fcc 	andi	r3,r2,255
   41614:	00800234 	movhi	r2,8
   41618:	10846804 	addi	r2,r2,4512
   4161c:	10c00035 	stwio	r3,0(r2)

		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41620:	0007883a 	mov	r3,zero
   41624:	00800234 	movhi	r2,8
   41628:	10845804 	addi	r2,r2,4448
   4162c:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41630:	010000c4 	movi	r4,3
   41634:	00412840 	call	41284 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41638:	00c00044 	movi	r3,1
   4163c:	00800234 	movhi	r2,8
   41640:	10845804 	addi	r2,r2,4448
   41644:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41648:	010000c4 	movi	r4,3
   4164c:	00412840 	call	41284 <delay>
		rightdata <<= 1;
   41650:	e0bfff17 	ldw	r2,-4(fp)
   41654:	1085883a 	add	r2,r2,r2
   41658:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   4165c:	e0bffe17 	ldw	r2,-8(fp)
   41660:	10800044 	addi	r2,r2,1
   41664:	e0bffe15 	stw	r2,-8(fp)
   41668:	e0bffe17 	ldw	r2,-8(fp)
   4166c:	10800410 	cmplti	r2,r2,16
   41670:	103fe41e 	bne	r2,zero,41604 <I2S_send_right+0x60>
		delay(3);
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
		delay(3);
		rightdata <<= 1;
	}
}
   41674:	e037883a 	mov	sp,fp
   41678:	dfc00117 	ldw	ra,4(sp)
   4167c:	df000017 	ldw	fp,0(sp)
   41680:	dec00204 	addi	sp,sp,8
   41684:	f800283a 	ret

00041688 <I2S_send_lr>:


void I2S_send_lr(int left, int right){
   41688:	defffc04 	addi	sp,sp,-16
   4168c:	dfc00315 	stw	ra,12(sp)
   41690:	df000215 	stw	fp,8(sp)
   41694:	df000204 	addi	fp,sp,8
   41698:	e13ffe15 	stw	r4,-8(fp)
   4169c:	e17fff15 	stw	r5,-4(fp)
	I2S_send_left(left);
   416a0:	e13ffe17 	ldw	r4,-8(fp)
   416a4:	00414c00 	call	414c0 <I2S_send_left>
	I2S_send_right(right);
   416a8:	e13fff17 	ldw	r4,-4(fp)
   416ac:	00415a40 	call	415a4 <I2S_send_right>
}
   416b0:	e037883a 	mov	sp,fp
   416b4:	dfc00117 	ldw	ra,4(sp)
   416b8:	df000017 	ldw	fp,0(sp)
   416bc:	dec00204 	addi	sp,sp,8
   416c0:	f800283a 	ret

000416c4 <fft>:
    float imag;
    };
typedef struct cmpx COMPLEX;

void fft(COMPLEX *Y, int M, COMPLEX *w)       //input sample array, number of points
{
   416c4:	deffec04 	addi	sp,sp,-80
   416c8:	dfc01315 	stw	ra,76(sp)
   416cc:	df001215 	stw	fp,72(sp)
   416d0:	dc401115 	stw	r17,68(sp)
   416d4:	dc001015 	stw	r16,64(sp)
   416d8:	df001004 	addi	fp,sp,64
   416dc:	e13ffd15 	stw	r4,-12(fp)
   416e0:	e17ffe15 	stw	r5,-8(fp)
   416e4:	e1bfff15 	stw	r6,-4(fp)
  COMPLEX temp1,temp2;            //temporary storage variables
  int i,j,k;                      //loop counter variables
  int upper_leg, lower_leg;       //index of upper/lower butterfly leg
  int leg_diff;                   //difference between upper/lower leg
  int num_stages=0;               //number of FFT stages, or iterations
   416e8:	e03ff515 	stw	zero,-44(fp)
  int index, step;                //index and step between twiddle factor
  i=1;                            //log(base 2) of # of points = # of stages
   416ec:	00800044 	movi	r2,1
   416f0:	e0bff015 	stw	r2,-64(fp)
  do
  {
    num_stages+=1;
   416f4:	e0bff517 	ldw	r2,-44(fp)
   416f8:	10800044 	addi	r2,r2,1
   416fc:	e0bff515 	stw	r2,-44(fp)
    i=i*2;
   41700:	e0bff017 	ldw	r2,-64(fp)
   41704:	1085883a 	add	r2,r2,r2
   41708:	e0bff015 	stw	r2,-64(fp)
  } while (i!=M);
   4170c:	e0fff017 	ldw	r3,-64(fp)
   41710:	e0bffe17 	ldw	r2,-8(fp)
   41714:	18bff71e 	bne	r3,r2,416f4 <fft+0x30>

  leg_diff=M/2;                 //starting difference between upper & lower legs
   41718:	e0bffe17 	ldw	r2,-8(fp)
   4171c:	1006d7fa 	srli	r3,r2,31
   41720:	1885883a 	add	r2,r3,r2
   41724:	1005d07a 	srai	r2,r2,1
   41728:	e0bff415 	stw	r2,-48(fp)
  step=2;                     //step between values in twiddle.h              
   4172c:	00800084 	movi	r2,2
   41730:	e0bff715 	stw	r2,-36(fp)
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
   41734:	e03ff015 	stw	zero,-64(fp)
   41738:	0000b306 	br	41a08 <fft+0x344>
  {
    index=0;
   4173c:	e03ff615 	stw	zero,-40(fp)
    for (j=0;j<leg_diff;j++)
   41740:	e03ff115 	stw	zero,-60(fp)
   41744:	0000a206 	br	419d0 <fft+0x30c>
    {
      for (upper_leg=j;upper_leg<M;upper_leg+=(2*leg_diff))
   41748:	e0bff117 	ldw	r2,-60(fp)
   4174c:	e0bff315 	stw	r2,-52(fp)
   41750:	00009506 	br	419a8 <fft+0x2e4>
      {
        lower_leg=upper_leg+leg_diff;
   41754:	e0fff317 	ldw	r3,-52(fp)
   41758:	e0bff417 	ldw	r2,-48(fp)
   4175c:	1885883a 	add	r2,r3,r2
   41760:	e0bff815 	stw	r2,-32(fp)
        temp1.real=(Y[upper_leg]).real + (Y[lower_leg]).real;
   41764:	e0bff317 	ldw	r2,-52(fp)
   41768:	100490fa 	slli	r2,r2,3
   4176c:	e0fffd17 	ldw	r3,-12(fp)
   41770:	1885883a 	add	r2,r3,r2
   41774:	10c00017 	ldw	r3,0(r2)
   41778:	e0bff817 	ldw	r2,-32(fp)
   4177c:	100490fa 	slli	r2,r2,3
   41780:	e13ffd17 	ldw	r4,-12(fp)
   41784:	2089883a 	add	r4,r4,r2
   41788:	20800017 	ldw	r2,0(r4)
   4178c:	1809883a 	mov	r4,r3
   41790:	100b883a 	mov	r5,r2
   41794:	0044c400 	call	44c40 <__addsf3>
   41798:	1007883a 	mov	r3,r2
   4179c:	1805883a 	mov	r2,r3
   417a0:	e0bff915 	stw	r2,-28(fp)
        temp1.imag=(Y[upper_leg]).imag + (Y[lower_leg]).imag;
   417a4:	e0bff317 	ldw	r2,-52(fp)
   417a8:	100490fa 	slli	r2,r2,3
   417ac:	e0fffd17 	ldw	r3,-12(fp)
   417b0:	1885883a 	add	r2,r3,r2
   417b4:	10c00117 	ldw	r3,4(r2)
   417b8:	e0bff817 	ldw	r2,-32(fp)
   417bc:	100490fa 	slli	r2,r2,3
   417c0:	e13ffd17 	ldw	r4,-12(fp)
   417c4:	2089883a 	add	r4,r4,r2
   417c8:	20800117 	ldw	r2,4(r4)
   417cc:	1809883a 	mov	r4,r3
   417d0:	100b883a 	mov	r5,r2
   417d4:	0044c400 	call	44c40 <__addsf3>
   417d8:	1007883a 	mov	r3,r2
   417dc:	1805883a 	mov	r2,r3
   417e0:	e0bffa15 	stw	r2,-24(fp)
        temp2.real=(Y[upper_leg]).real - (Y[lower_leg]).real;
   417e4:	e0bff317 	ldw	r2,-52(fp)
   417e8:	100490fa 	slli	r2,r2,3
   417ec:	e0fffd17 	ldw	r3,-12(fp)
   417f0:	1885883a 	add	r2,r3,r2
   417f4:	10c00017 	ldw	r3,0(r2)
   417f8:	e0bff817 	ldw	r2,-32(fp)
   417fc:	100490fa 	slli	r2,r2,3
   41800:	e13ffd17 	ldw	r4,-12(fp)
   41804:	2089883a 	add	r4,r4,r2
   41808:	20800017 	ldw	r2,0(r4)
   4180c:	1809883a 	mov	r4,r3
   41810:	100b883a 	mov	r5,r2
   41814:	0044c8c0 	call	44c8c <__subsf3>
   41818:	1007883a 	mov	r3,r2
   4181c:	1805883a 	mov	r2,r3
   41820:	e0bffb15 	stw	r2,-20(fp)
        temp2.imag=(Y[upper_leg]).imag - (Y[lower_leg]).imag;
   41824:	e0bff317 	ldw	r2,-52(fp)
   41828:	100490fa 	slli	r2,r2,3
   4182c:	e0fffd17 	ldw	r3,-12(fp)
   41830:	1885883a 	add	r2,r3,r2
   41834:	10c00117 	ldw	r3,4(r2)
   41838:	e0bff817 	ldw	r2,-32(fp)
   4183c:	100490fa 	slli	r2,r2,3
   41840:	e13ffd17 	ldw	r4,-12(fp)
   41844:	2089883a 	add	r4,r4,r2
   41848:	20800117 	ldw	r2,4(r4)
   4184c:	1809883a 	mov	r4,r3
   41850:	100b883a 	mov	r5,r2
   41854:	0044c8c0 	call	44c8c <__subsf3>
   41858:	1007883a 	mov	r3,r2
   4185c:	1805883a 	mov	r2,r3
   41860:	e0bffc15 	stw	r2,-16(fp)
        (Y[lower_leg]).real=((temp2.real*(w[index]).real-temp2.imag*(w[index]).imag));
   41864:	e0bff817 	ldw	r2,-32(fp)
   41868:	100490fa 	slli	r2,r2,3
   4186c:	e0fffd17 	ldw	r3,-12(fp)
   41870:	18a1883a 	add	r16,r3,r2
   41874:	e0fffb17 	ldw	r3,-20(fp)
   41878:	e0bff617 	ldw	r2,-40(fp)
   4187c:	100490fa 	slli	r2,r2,3
   41880:	e13fff17 	ldw	r4,-4(fp)
   41884:	2089883a 	add	r4,r4,r2
   41888:	20800017 	ldw	r2,0(r4)
   4188c:	1809883a 	mov	r4,r3
   41890:	100b883a 	mov	r5,r2
   41894:	0044ce40 	call	44ce4 <__mulsf3>
   41898:	1007883a 	mov	r3,r2
   4189c:	1823883a 	mov	r17,r3
   418a0:	e0fffc17 	ldw	r3,-16(fp)
   418a4:	e0bff617 	ldw	r2,-40(fp)
   418a8:	100490fa 	slli	r2,r2,3
   418ac:	e13fff17 	ldw	r4,-4(fp)
   418b0:	2089883a 	add	r4,r4,r2
   418b4:	20800117 	ldw	r2,4(r4)
   418b8:	1809883a 	mov	r4,r3
   418bc:	100b883a 	mov	r5,r2
   418c0:	0044ce40 	call	44ce4 <__mulsf3>
   418c4:	1007883a 	mov	r3,r2
   418c8:	1805883a 	mov	r2,r3
   418cc:	8809883a 	mov	r4,r17
   418d0:	100b883a 	mov	r5,r2
   418d4:	0044c8c0 	call	44c8c <__subsf3>
   418d8:	1007883a 	mov	r3,r2
   418dc:	1805883a 	mov	r2,r3
   418e0:	80800015 	stw	r2,0(r16)
        (Y[lower_leg]).imag=((temp2.real*(w[index]).imag+temp2.imag*(w[index]).real));
   418e4:	e0bff817 	ldw	r2,-32(fp)
   418e8:	100490fa 	slli	r2,r2,3
   418ec:	e0fffd17 	ldw	r3,-12(fp)
   418f0:	18a1883a 	add	r16,r3,r2
   418f4:	e0fffb17 	ldw	r3,-20(fp)
   418f8:	e0bff617 	ldw	r2,-40(fp)
   418fc:	100490fa 	slli	r2,r2,3
   41900:	e13fff17 	ldw	r4,-4(fp)
   41904:	2089883a 	add	r4,r4,r2
   41908:	20800117 	ldw	r2,4(r4)
   4190c:	1809883a 	mov	r4,r3
   41910:	100b883a 	mov	r5,r2
   41914:	0044ce40 	call	44ce4 <__mulsf3>
   41918:	1007883a 	mov	r3,r2
   4191c:	1823883a 	mov	r17,r3
   41920:	e0fffc17 	ldw	r3,-16(fp)
   41924:	e0bff617 	ldw	r2,-40(fp)
   41928:	100490fa 	slli	r2,r2,3
   4192c:	e13fff17 	ldw	r4,-4(fp)
   41930:	2089883a 	add	r4,r4,r2
   41934:	20800017 	ldw	r2,0(r4)
   41938:	1809883a 	mov	r4,r3
   4193c:	100b883a 	mov	r5,r2
   41940:	0044ce40 	call	44ce4 <__mulsf3>
   41944:	1007883a 	mov	r3,r2
   41948:	1805883a 	mov	r2,r3
   4194c:	8809883a 	mov	r4,r17
   41950:	100b883a 	mov	r5,r2
   41954:	0044c400 	call	44c40 <__addsf3>
   41958:	1007883a 	mov	r3,r2
   4195c:	1805883a 	mov	r2,r3
   41960:	80800115 	stw	r2,4(r16)
        (Y[upper_leg]).real=temp1.real;
   41964:	e0bff317 	ldw	r2,-52(fp)
   41968:	100490fa 	slli	r2,r2,3
   4196c:	e0fffd17 	ldw	r3,-12(fp)
   41970:	1885883a 	add	r2,r3,r2
   41974:	e0fff917 	ldw	r3,-28(fp)
   41978:	10c00015 	stw	r3,0(r2)
        (Y[upper_leg]).imag=temp1.imag;
   4197c:	e0bff317 	ldw	r2,-52(fp)
   41980:	100490fa 	slli	r2,r2,3
   41984:	e0fffd17 	ldw	r3,-12(fp)
   41988:	1885883a 	add	r2,r3,r2
   4198c:	e0fffa17 	ldw	r3,-24(fp)
   41990:	10c00115 	stw	r3,4(r2)
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
  {
    index=0;
    for (j=0;j<leg_diff;j++)
    {
      for (upper_leg=j;upper_leg<M;upper_leg+=(2*leg_diff))
   41994:	e0bff417 	ldw	r2,-48(fp)
   41998:	1085883a 	add	r2,r2,r2
   4199c:	e0fff317 	ldw	r3,-52(fp)
   419a0:	1885883a 	add	r2,r3,r2
   419a4:	e0bff315 	stw	r2,-52(fp)
   419a8:	e0fff317 	ldw	r3,-52(fp)
   419ac:	e0bffe17 	ldw	r2,-8(fp)
   419b0:	18bf6816 	blt	r3,r2,41754 <fft+0x90>
        (Y[lower_leg]).real=((temp2.real*(w[index]).real-temp2.imag*(w[index]).imag));
        (Y[lower_leg]).imag=((temp2.real*(w[index]).imag+temp2.imag*(w[index]).real));
        (Y[upper_leg]).real=temp1.real;
        (Y[upper_leg]).imag=temp1.imag;
      }
      index+=step;
   419b4:	e0fff617 	ldw	r3,-40(fp)
   419b8:	e0bff717 	ldw	r2,-36(fp)
   419bc:	1885883a 	add	r2,r3,r2
   419c0:	e0bff615 	stw	r2,-40(fp)
  leg_diff=M/2;                 //starting difference between upper & lower legs
  step=2;                     //step between values in twiddle.h              
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
  {
    index=0;
    for (j=0;j<leg_diff;j++)
   419c4:	e0bff117 	ldw	r2,-60(fp)
   419c8:	10800044 	addi	r2,r2,1
   419cc:	e0bff115 	stw	r2,-60(fp)
   419d0:	e0fff117 	ldw	r3,-60(fp)
   419d4:	e0bff417 	ldw	r2,-48(fp)
   419d8:	18bf5b16 	blt	r3,r2,41748 <fft+0x84>
        (Y[upper_leg]).real=temp1.real;
        (Y[upper_leg]).imag=temp1.imag;
      }
      index+=step;
    }
    leg_diff=leg_diff/2;
   419dc:	e0bff417 	ldw	r2,-48(fp)
   419e0:	1006d7fa 	srli	r3,r2,31
   419e4:	1885883a 	add	r2,r3,r2
   419e8:	1005d07a 	srai	r2,r2,1
   419ec:	e0bff415 	stw	r2,-48(fp)
    step*=2;
   419f0:	e0bff717 	ldw	r2,-36(fp)
   419f4:	1085883a 	add	r2,r2,r2
   419f8:	e0bff715 	stw	r2,-36(fp)
    i=i*2;
  } while (i!=M);

  leg_diff=M/2;                 //starting difference between upper & lower legs
  step=2;                     //step between values in twiddle.h              
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
   419fc:	e0bff017 	ldw	r2,-64(fp)
   41a00:	10800044 	addi	r2,r2,1
   41a04:	e0bff015 	stw	r2,-64(fp)
   41a08:	e0fff017 	ldw	r3,-64(fp)
   41a0c:	e0bff517 	ldw	r2,-44(fp)
   41a10:	18bf4a16 	blt	r3,r2,4173c <fft+0x78>
    }
    leg_diff=leg_diff/2;
    step*=2;
  }

  j=0;
   41a14:	e03ff115 	stw	zero,-60(fp)
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
   41a18:	00800044 	movi	r2,1
   41a1c:	e0bff015 	stw	r2,-64(fp)
   41a20:	00004806 	br	41b44 <fft+0x480>
  {
    k=M/2;
   41a24:	e0bffe17 	ldw	r2,-8(fp)
   41a28:	1006d7fa 	srli	r3,r2,31
   41a2c:	1885883a 	add	r2,r3,r2
   41a30:	1005d07a 	srai	r2,r2,1
   41a34:	e0bff215 	stw	r2,-56(fp)
    while (k<=j)
   41a38:	00000906 	br	41a60 <fft+0x39c>
    {
      j=j-k;
   41a3c:	e0fff117 	ldw	r3,-60(fp)
   41a40:	e0bff217 	ldw	r2,-56(fp)
   41a44:	1885c83a 	sub	r2,r3,r2
   41a48:	e0bff115 	stw	r2,-60(fp)
      k=k/2;
   41a4c:	e0bff217 	ldw	r2,-56(fp)
   41a50:	1006d7fa 	srli	r3,r2,31
   41a54:	1885883a 	add	r2,r3,r2
   41a58:	1005d07a 	srai	r2,r2,1
   41a5c:	e0bff215 	stw	r2,-56(fp)

  j=0;
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
  {
    k=M/2;
    while (k<=j)
   41a60:	e0bff217 	ldw	r2,-56(fp)
   41a64:	e0fff117 	ldw	r3,-60(fp)
   41a68:	18bff40e 	bge	r3,r2,41a3c <fft+0x378>
    {
      j=j-k;
      k=k/2;
    }
    j=j+k;
   41a6c:	e0fff117 	ldw	r3,-60(fp)
   41a70:	e0bff217 	ldw	r2,-56(fp)
   41a74:	1885883a 	add	r2,r3,r2
   41a78:	e0bff115 	stw	r2,-60(fp)
    if (i<j)
   41a7c:	e0fff017 	ldw	r3,-64(fp)
   41a80:	e0bff117 	ldw	r2,-60(fp)
   41a84:	18802c0e 	bge	r3,r2,41b38 <fft+0x474>
    {
      temp1.real=(Y[j]).real;
   41a88:	e0bff117 	ldw	r2,-60(fp)
   41a8c:	100490fa 	slli	r2,r2,3
   41a90:	e0fffd17 	ldw	r3,-12(fp)
   41a94:	1887883a 	add	r3,r3,r2
   41a98:	18800017 	ldw	r2,0(r3)
   41a9c:	e0bff915 	stw	r2,-28(fp)
      temp1.imag=(Y[j]).imag;
   41aa0:	e0bff117 	ldw	r2,-60(fp)
   41aa4:	100490fa 	slli	r2,r2,3
   41aa8:	e0fffd17 	ldw	r3,-12(fp)
   41aac:	1887883a 	add	r3,r3,r2
   41ab0:	18800117 	ldw	r2,4(r3)
   41ab4:	e0bffa15 	stw	r2,-24(fp)
      (Y[j]).real=(Y[i]).real;
   41ab8:	e0bff117 	ldw	r2,-60(fp)
   41abc:	100490fa 	slli	r2,r2,3
   41ac0:	e0fffd17 	ldw	r3,-12(fp)
   41ac4:	1885883a 	add	r2,r3,r2
   41ac8:	e0fff017 	ldw	r3,-64(fp)
   41acc:	180690fa 	slli	r3,r3,3
   41ad0:	e13ffd17 	ldw	r4,-12(fp)
   41ad4:	20c9883a 	add	r4,r4,r3
   41ad8:	20c00017 	ldw	r3,0(r4)
   41adc:	10c00015 	stw	r3,0(r2)
      (Y[j]).imag=(Y[i]).imag;
   41ae0:	e0bff117 	ldw	r2,-60(fp)
   41ae4:	100490fa 	slli	r2,r2,3
   41ae8:	e0fffd17 	ldw	r3,-12(fp)
   41aec:	1885883a 	add	r2,r3,r2
   41af0:	e0fff017 	ldw	r3,-64(fp)
   41af4:	180690fa 	slli	r3,r3,3
   41af8:	e13ffd17 	ldw	r4,-12(fp)
   41afc:	20c9883a 	add	r4,r4,r3
   41b00:	20c00117 	ldw	r3,4(r4)
   41b04:	10c00115 	stw	r3,4(r2)
      (Y[i]).real=temp1.real;
   41b08:	e0bff017 	ldw	r2,-64(fp)
   41b0c:	100490fa 	slli	r2,r2,3
   41b10:	e0fffd17 	ldw	r3,-12(fp)
   41b14:	1885883a 	add	r2,r3,r2
   41b18:	e0fff917 	ldw	r3,-28(fp)
   41b1c:	10c00015 	stw	r3,0(r2)
      (Y[i]).imag=temp1.imag;
   41b20:	e0bff017 	ldw	r2,-64(fp)
   41b24:	100490fa 	slli	r2,r2,3
   41b28:	e0fffd17 	ldw	r3,-12(fp)
   41b2c:	1885883a 	add	r2,r3,r2
   41b30:	e0fffa17 	ldw	r3,-24(fp)
   41b34:	10c00115 	stw	r3,4(r2)
    leg_diff=leg_diff/2;
    step*=2;
  }

  j=0;
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
   41b38:	e0bff017 	ldw	r2,-64(fp)
   41b3c:	10800044 	addi	r2,r2,1
   41b40:	e0bff015 	stw	r2,-64(fp)
   41b44:	e0bffe17 	ldw	r2,-8(fp)
   41b48:	10bfffc4 	addi	r2,r2,-1
   41b4c:	e0fff017 	ldw	r3,-64(fp)
   41b50:	18bfb416 	blt	r3,r2,41a24 <fft+0x360>
      (Y[i]).imag=temp1.imag;
    }
  }

  return;
}                                 //end of fft()
   41b54:	e037883a 	mov	sp,fp
   41b58:	dfc00317 	ldw	ra,12(sp)
   41b5c:	df000217 	ldw	fp,8(sp)
   41b60:	dc400117 	ldw	r17,4(sp)
   41b64:	dc000017 	ldw	r16,0(sp)
   41b68:	dec00404 	addi	sp,sp,16
   41b6c:	f800283a 	ret

00041b70 <handle_switch0_interrupt>:
extern int setFreqFlag;

/*uart object*/
extern int uart;

static void handle_switch0_interrupt(void* context, alt_u32 id) {
   41b70:	defffc04 	addi	sp,sp,-16
   41b74:	df000315 	stw	fp,12(sp)
   41b78:	df000304 	addi	fp,sp,12
   41b7c:	e13ffe15 	stw	r4,-8(fp)
   41b80:	e17fff15 	stw	r5,-4(fp)
	 volatile int* switch0ptr = (volatile int *)context;
   41b84:	e0bffe17 	ldw	r2,-8(fp)
   41b88:	e0bffd15 	stw	r2,-12(fp)
	 *switch0ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE);
   41b8c:	00800234 	movhi	r2,8
   41b90:	10848304 	addi	r2,r2,4620
   41b94:	10c00037 	ldwio	r3,0(r2)
   41b98:	e0bffd17 	ldw	r2,-12(fp)
   41b9c:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0);
   41ba0:	0007883a 	mov	r3,zero
   41ba4:	00800234 	movhi	r2,8
   41ba8:	10848304 	addi	r2,r2,4620
   41bac:	10c00035 	stwio	r3,0(r2)

	 /*Perform Jobs*/


}
   41bb0:	e037883a 	mov	sp,fp
   41bb4:	df000017 	ldw	fp,0(sp)
   41bb8:	dec00104 	addi	sp,sp,4
   41bbc:	f800283a 	ret

00041bc0 <handle_switch1_interrupt>:

static void handle_switch1_interrupt(void* context, alt_u32 id) {
   41bc0:	defffc04 	addi	sp,sp,-16
   41bc4:	df000315 	stw	fp,12(sp)
   41bc8:	df000304 	addi	fp,sp,12
   41bcc:	e13ffe15 	stw	r4,-8(fp)
   41bd0:	e17fff15 	stw	r5,-4(fp)
	 volatile int* switch1ptr = (volatile int *)context;
   41bd4:	e0bffe17 	ldw	r2,-8(fp)
   41bd8:	e0bffd15 	stw	r2,-12(fp)
	 *switch1ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE);
   41bdc:	00800234 	movhi	r2,8
   41be0:	10844704 	addi	r2,r2,4380
   41be4:	10c00037 	ldwio	r3,0(r2)
   41be8:	e0bffd17 	ldw	r2,-12(fp)
   41bec:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE, 0);
   41bf0:	0007883a 	mov	r3,zero
   41bf4:	00800234 	movhi	r2,8
   41bf8:	10844704 	addi	r2,r2,4380
   41bfc:	10c00035 	stwio	r3,0(r2)

	 /*Perform Jobs*/
}
   41c00:	e037883a 	mov	sp,fp
   41c04:	df000017 	ldw	fp,0(sp)
   41c08:	dec00104 	addi	sp,sp,4
   41c0c:	f800283a 	ret

00041c10 <handle_key0_interrupt>:

/* Enable the flag to send recent
 * channel buffer to host computer.
 */
static void handle_key0_interrupt(void* context, alt_u32 id) {
   41c10:	defff404 	addi	sp,sp,-48
   41c14:	df000b15 	stw	fp,44(sp)
   41c18:	df000b04 	addi	fp,sp,44
   41c1c:	e13ffe15 	stw	r4,-8(fp)
   41c20:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key0ptr = (volatile int *)context;
   41c24:	e0bffe17 	ldw	r2,-8(fp)
   41c28:	e0bff515 	stw	r2,-44(fp)
	 *key0ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE);
   41c2c:	00800234 	movhi	r2,8
   41c30:	10847f04 	addi	r2,r2,4604
   41c34:	10c00037 	ldwio	r3,0(r2)
   41c38:	e0bff517 	ldw	r2,-44(fp)
   41c3c:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE, 0);
   41c40:	0007883a 	mov	r3,zero
   41c44:	00800234 	movhi	r2,8
   41c48:	10847f04 	addi	r2,r2,4604
   41c4c:	10c00035 	stwio	r3,0(r2)

	 uartStartSendFlag = 1;
   41c50:	00800044 	movi	r2,1
   41c54:	d0a71c15 	stw	r2,-25488(gp)
	 alt_irq_disable(leftready_id);
   41c58:	d0a00617 	ldw	r2,-32744(gp)
   41c5c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41c60:	0005303a 	rdctl	r2,status
   41c64:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41c68:	e0fff717 	ldw	r3,-36(fp)
   41c6c:	00bfff84 	movi	r2,-2
   41c70:	1884703a 	and	r2,r3,r2
   41c74:	1001703a 	wrctl	status,r2
  
  return context;
   41c78:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41c7c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active &= ~(1 << id);
   41c80:	e0bff617 	ldw	r2,-40(fp)
   41c84:	00c00044 	movi	r3,1
   41c88:	1884983a 	sll	r2,r3,r2
   41c8c:	0084303a 	nor	r2,zero,r2
   41c90:	1007883a 	mov	r3,r2
   41c94:	00800174 	movhi	r2,5
   41c98:	10950d04 	addi	r2,r2,21556
   41c9c:	10800017 	ldw	r2,0(r2)
   41ca0:	1886703a 	and	r3,r3,r2
   41ca4:	00800174 	movhi	r2,5
   41ca8:	10950d04 	addi	r2,r2,21556
   41cac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41cb0:	00800174 	movhi	r2,5
   41cb4:	10950d04 	addi	r2,r2,21556
   41cb8:	10800017 	ldw	r2,0(r2)
   41cbc:	100170fa 	wrctl	ienable,r2
   41cc0:	e0bff817 	ldw	r2,-32(fp)
   41cc4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41cc8:	e0bff917 	ldw	r2,-28(fp)
   41ccc:	1001703a 	wrctl	status,r2
	 alt_irq_disable(rightready_id);
   41cd0:	d0a00717 	ldw	r2,-32740(gp)
   41cd4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41cd8:	0005303a 	rdctl	r2,status
   41cdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41ce0:	e0fffb17 	ldw	r3,-20(fp)
   41ce4:	00bfff84 	movi	r2,-2
   41ce8:	1884703a 	and	r2,r3,r2
   41cec:	1001703a 	wrctl	status,r2
  
  return context;
   41cf0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41cf4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   41cf8:	e0bffa17 	ldw	r2,-24(fp)
   41cfc:	00c00044 	movi	r3,1
   41d00:	1884983a 	sll	r2,r3,r2
   41d04:	0084303a 	nor	r2,zero,r2
   41d08:	1007883a 	mov	r3,r2
   41d0c:	00800174 	movhi	r2,5
   41d10:	10950d04 	addi	r2,r2,21556
   41d14:	10800017 	ldw	r2,0(r2)
   41d18:	1886703a 	and	r3,r3,r2
   41d1c:	00800174 	movhi	r2,5
   41d20:	10950d04 	addi	r2,r2,21556
   41d24:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41d28:	00800174 	movhi	r2,5
   41d2c:	10950d04 	addi	r2,r2,21556
   41d30:	10800017 	ldw	r2,0(r2)
   41d34:	100170fa 	wrctl	ienable,r2
   41d38:	e0bffc17 	ldw	r2,-16(fp)
   41d3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41d40:	e0bffd17 	ldw	r2,-12(fp)
   41d44:	1001703a 	wrctl	status,r2
}
   41d48:	e037883a 	mov	sp,fp
   41d4c:	df000017 	ldw	fp,0(sp)
   41d50:	dec00104 	addi	sp,sp,4
   41d54:	f800283a 	ret

00041d58 <handle_key1_interrupt>:

/* Enable the flag to update the
 * ADC sampling frequency on AIC23.
 */
static void handle_key1_interrupt(void* context, alt_u32 id) {
   41d58:	defffc04 	addi	sp,sp,-16
   41d5c:	df000315 	stw	fp,12(sp)
   41d60:	df000304 	addi	fp,sp,12
   41d64:	e13ffe15 	stw	r4,-8(fp)
   41d68:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key1ptr = (volatile int *)context;
   41d6c:	e0bffe17 	ldw	r2,-8(fp)
   41d70:	e0bffd15 	stw	r2,-12(fp)
	 *key1ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE);
   41d74:	00800234 	movhi	r2,8
   41d78:	10847f04 	addi	r2,r2,4604
   41d7c:	10c00037 	ldwio	r3,0(r2)
   41d80:	e0bffd17 	ldw	r2,-12(fp)
   41d84:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY1_BASE, 0);
   41d88:	0007883a 	mov	r3,zero
   41d8c:	00800234 	movhi	r2,8
   41d90:	10845304 	addi	r2,r2,4428
   41d94:	10c00035 	stwio	r3,0(r2)

	 //IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH1_BASE, 0x01);
	 setFreqFlag = 1;
   41d98:	00800044 	movi	r2,1
   41d9c:	d0a71f15 	stw	r2,-25476(gp)
}
   41da0:	e037883a 	mov	sp,fp
   41da4:	df000017 	ldw	fp,0(sp)
   41da8:	dec00104 	addi	sp,sp,4
   41dac:	f800283a 	ret

00041db0 <handle_key2_interrupt>:

static void handle_key2_interrupt(void* context, alt_u32 id) {
   41db0:	defffc04 	addi	sp,sp,-16
   41db4:	df000315 	stw	fp,12(sp)
   41db8:	df000304 	addi	fp,sp,12
   41dbc:	e13ffe15 	stw	r4,-8(fp)
   41dc0:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key2ptr = (volatile int *)context;
   41dc4:	e0bffe17 	ldw	r2,-8(fp)
   41dc8:	e0bffd15 	stw	r2,-12(fp)
	 *key2ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE);
   41dcc:	00800234 	movhi	r2,8
   41dd0:	10844f04 	addi	r2,r2,4412
   41dd4:	10c00037 	ldwio	r3,0(r2)
   41dd8:	e0bffd17 	ldw	r2,-12(fp)
   41ddc:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE, 0);
   41de0:	0007883a 	mov	r3,zero
   41de4:	00800234 	movhi	r2,8
   41de8:	10844f04 	addi	r2,r2,4412
   41dec:	10c00035 	stwio	r3,0(r2)

}
   41df0:	e037883a 	mov	sp,fp
   41df4:	df000017 	ldw	fp,0(sp)
   41df8:	dec00104 	addi	sp,sp,4
   41dfc:	f800283a 	ret

00041e00 <handle_key3_interrupt>:

static void handle_key3_interrupt(void* context, alt_u32 id) {
   41e00:	defffc04 	addi	sp,sp,-16
   41e04:	df000315 	stw	fp,12(sp)
   41e08:	df000304 	addi	fp,sp,12
   41e0c:	e13ffe15 	stw	r4,-8(fp)
   41e10:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key3ptr = (volatile int *)context;
   41e14:	e0bffe17 	ldw	r2,-8(fp)
   41e18:	e0bffd15 	stw	r2,-12(fp)
	 *key3ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE);
   41e1c:	00800234 	movhi	r2,8
   41e20:	10844b04 	addi	r2,r2,4396
   41e24:	10c00037 	ldwio	r3,0(r2)
   41e28:	e0bffd17 	ldw	r2,-12(fp)
   41e2c:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE, 0);
   41e30:	0007883a 	mov	r3,zero
   41e34:	00800234 	movhi	r2,8
   41e38:	10844b04 	addi	r2,r2,4396
   41e3c:	10c00035 	stwio	r3,0(r2)

	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x10);
   41e40:	00c00404 	movi	r3,16
   41e44:	00800234 	movhi	r2,8
   41e48:	10848404 	addi	r2,r2,4624
   41e4c:	10c00035 	stwio	r3,0(r2)
}
   41e50:	e037883a 	mov	sp,fp
   41e54:	df000017 	ldw	fp,0(sp)
   41e58:	dec00104 	addi	sp,sp,4
   41e5c:	f800283a 	ret

00041e60 <unsigned2signed>:
 *  store in buffer,
 *  instantly play back.
 *
 */

int unsigned2signed(alt_16 unsign){
   41e60:	defffd04 	addi	sp,sp,-12
   41e64:	df000215 	stw	fp,8(sp)
   41e68:	df000204 	addi	fp,sp,8
   41e6c:	2005883a 	mov	r2,r4
   41e70:	e0bfff0d 	sth	r2,-4(fp)
	int result;
	if(unsign>32767)
		result = unsign - 65536;
	else
		result = unsign;
   41e74:	e0bfff0f 	ldh	r2,-4(fp)
   41e78:	e0bffe15 	stw	r2,-8(fp)
	return result;
   41e7c:	e0bffe17 	ldw	r2,-8(fp)
}
   41e80:	e037883a 	mov	sp,fp
   41e84:	df000017 	ldw	fp,0(sp)
   41e88:	dec00104 	addi	sp,sp,4
   41e8c:	f800283a 	ret

00041e90 <signed2unsigned>:

alt_16 signed2unsigned(int sign){
   41e90:	defffd04 	addi	sp,sp,-12
   41e94:	df000215 	stw	fp,8(sp)
   41e98:	df000204 	addi	fp,sp,8
   41e9c:	e13fff15 	stw	r4,-4(fp)
	alt_16 result;
	if(sign<0)
   41ea0:	e0bfff17 	ldw	r2,-4(fp)
   41ea4:	1000030e 	bge	r2,zero,41eb4 <signed2unsigned+0x24>
		result = sign + 65536;
   41ea8:	e0bfff17 	ldw	r2,-4(fp)
   41eac:	e0bffe0d 	sth	r2,-8(fp)
   41eb0:	00000206 	br	41ebc <signed2unsigned+0x2c>
	else
		result = sign;
   41eb4:	e0bfff17 	ldw	r2,-4(fp)
   41eb8:	e0bffe0d 	sth	r2,-8(fp)
	return result;
   41ebc:	e0bffe0b 	ldhu	r2,-8(fp)
}
   41ec0:	e037883a 	mov	sp,fp
   41ec4:	df000017 	ldw	fp,0(sp)
   41ec8:	dec00104 	addi	sp,sp,4
   41ecc:	f800283a 	ret

00041ed0 <handle_leftready_interrupt_test>:

static void handle_leftready_interrupt_test(void* context, alt_u32 id) {
   41ed0:	defffc04 	addi	sp,sp,-16
   41ed4:	df000315 	stw	fp,12(sp)
   41ed8:	df000304 	addi	fp,sp,12
   41edc:	e13ffe15 	stw	r4,-8(fp)
   41ee0:	e17fff15 	stw	r5,-4(fp)
	 volatile int* leftreadyptr = (volatile int *)context;
   41ee4:	e0bffe17 	ldw	r2,-8(fp)
   41ee8:	e0bffd15 	stw	r2,-12(fp)
	 *leftreadyptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE);
   41eec:	00800234 	movhi	r2,8
   41ef0:	10842b04 	addi	r2,r2,4268
   41ef4:	10c00037 	ldwio	r3,0(r2)
   41ef8:	e0bffd17 	ldw	r2,-12(fp)
   41efc:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE, 0);
   41f00:	0007883a 	mov	r3,zero
   41f04:	00800234 	movhi	r2,8
   41f08:	10842b04 	addi	r2,r2,4268
   41f0c:	10c00035 	stwio	r3,0(r2)
	 /*******Read, playback, store data*******/
	 leftChannel = IORD_ALTERA_AVALON_PIO_DATA(LEFTDATA_BASE);
   41f10:	00800234 	movhi	r2,8
   41f14:	10843004 	addi	r2,r2,4288
   41f18:	10800037 	ldwio	r2,0(r2)
   41f1c:	d0a71415 	stw	r2,-25520(gp)
	 IOWR_ALTERA_AVALON_PIO_DATA(LEFTSENDDATA_BASE, leftChannel);
   41f20:	d0e71417 	ldw	r3,-25520(gp)
   41f24:	00800234 	movhi	r2,8
   41f28:	10842004 	addi	r2,r2,4224
   41f2c:	10c00035 	stwio	r3,0(r2)
	 datatest[leftCount] = leftChannel;
   41f30:	d0a71817 	ldw	r2,-25504(gp)
   41f34:	d0e71417 	ldw	r3,-25520(gp)
   41f38:	01000174 	movhi	r4,5
   41f3c:	21151d04 	addi	r4,r4,21620
   41f40:	1085883a 	add	r2,r2,r2
   41f44:	2085883a 	add	r2,r4,r2
   41f48:	10c0000d 	sth	r3,0(r2)
	 leftCount = (leftCount+1)%256;
   41f4c:	d0a71817 	ldw	r2,-25504(gp)
   41f50:	10c00044 	addi	r3,r2,1
   41f54:	00a00034 	movhi	r2,32768
   41f58:	10803fc4 	addi	r2,r2,255
   41f5c:	1884703a 	and	r2,r3,r2
   41f60:	1000040e 	bge	r2,zero,41f74 <handle_leftready_interrupt_test+0xa4>
   41f64:	10bfffc4 	addi	r2,r2,-1
   41f68:	00ffc004 	movi	r3,-256
   41f6c:	10c4b03a 	or	r2,r2,r3
   41f70:	10800044 	addi	r2,r2,1
   41f74:	d0a71815 	stw	r2,-25504(gp)
//	 /****************************************/

}
   41f78:	e037883a 	mov	sp,fp
   41f7c:	df000017 	ldw	fp,0(sp)
   41f80:	dec00104 	addi	sp,sp,4
   41f84:	f800283a 	ret

00041f88 <handle_rightready_interrupt_test>:
/*  Detect right channel ready interrupt and do:
 *  Collect data,
 *  store in buffer,
 *  instantly play back.
 */
static void handle_rightready_interrupt_test(void* context, alt_u32 id) {
   41f88:	defffb04 	addi	sp,sp,-20
   41f8c:	dfc00415 	stw	ra,16(sp)
   41f90:	df000315 	stw	fp,12(sp)
   41f94:	df000304 	addi	fp,sp,12
   41f98:	e13ffe15 	stw	r4,-8(fp)
   41f9c:	e17fff15 	stw	r5,-4(fp)
	 volatile int* rightreadyptr = (volatile int *)context;
   41fa0:	e0bffe17 	ldw	r2,-8(fp)
   41fa4:	e0bffd15 	stw	r2,-12(fp)
	 *rightreadyptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE);
   41fa8:	00800234 	movhi	r2,8
   41fac:	10842704 	addi	r2,r2,4252
   41fb0:	10c00037 	ldwio	r3,0(r2)
   41fb4:	e0bffd17 	ldw	r2,-12(fp)
   41fb8:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE, 0);
   41fbc:	0007883a 	mov	r3,zero
   41fc0:	00800234 	movhi	r2,8
   41fc4:	10842704 	addi	r2,r2,4252
   41fc8:	10c00035 	stwio	r3,0(r2)
	 /*******Read, playback, store data*******/
	 rightChannel = IORD_ALTERA_AVALON_PIO_DATA(RIGHTDATA_BASE);
   41fcc:	00800234 	movhi	r2,8
   41fd0:	10842c04 	addi	r2,r2,4272
   41fd4:	10800037 	ldwio	r2,0(r2)
   41fd8:	d0a71515 	stw	r2,-25516(gp)
	 IOWR_ALTERA_AVALON_PIO_DATA(RIGHTSENDDATA_BASE, rightChannel);
   41fdc:	d0e71517 	ldw	r3,-25516(gp)
   41fe0:	00800234 	movhi	r2,8
   41fe4:	10841c04 	addi	r2,r2,4208
   41fe8:	10c00035 	stwio	r3,0(r2)
	 rightChannelData[rightCount] = rightChannel;
   41fec:	d0a71a17 	ldw	r2,-25496(gp)
   41ff0:	d0e71517 	ldw	r3,-25516(gp)
   41ff4:	01000174 	movhi	r4,5
   41ff8:	211a9304 	addi	r4,r4,27212
   41ffc:	1085883a 	add	r2,r2,r2
   42000:	2085883a 	add	r2,r4,r2
   42004:	10c0000d 	sth	r3,0(r2)
	 rightCount = (rightCount+1) % BUFFERSIZE;
   42008:	d0a71a17 	ldw	r2,-25496(gp)
   4200c:	10800044 	addi	r2,r2,1
   42010:	1009883a 	mov	r4,r2
   42014:	014006c4 	movi	r5,27
   42018:	0045bc40 	call	45bc4 <__modsi3>
   4201c:	d0a71a15 	stw	r2,-25496(gp)
	 /****************************************/
}
   42020:	e037883a 	mov	sp,fp
   42024:	dfc00117 	ldw	ra,4(sp)
   42028:	df000017 	ldw	fp,0(sp)
   4202c:	dec00204 	addi	sp,sp,8
   42030:	f800283a 	ret

00042034 <system_initialization>:

/*uart object*/
int uart;

/*System initialization function. Should be called before your while(1)*/
void system_initialization(){
   42034:	defffe04 	addi	sp,sp,-8
   42038:	dfc00115 	stw	ra,4(sp)
   4203c:	df000015 	stw	fp,0(sp)
   42040:	d839883a 	mov	fp,sp
	/*Hard-code to 1 right here, you can use ISR
	 *to change the value by yourself
	*/
	uartStartRecvFlag = 1;
   42044:	00800044 	movi	r2,1
   42048:	d0a71d15 	stw	r2,-25484(gp)

	 /*Open Uart port and ready to transmit and receive*/
	 uart = open(UART_NAME, O_ACCMODE);
   4204c:	01000174 	movhi	r4,5
   42050:	2105bb04 	addi	r4,r4,5868
   42054:	014000c4 	movi	r5,3
   42058:	004ee000 	call	4ee00 <open>
   4205c:	d0a72015 	stw	r2,-25472(gp)
	 if(!uart){
   42060:	d0a72017 	ldw	r2,-25472(gp)
   42064:	1000041e 	bne	r2,zero,42078 <system_initialization+0x44>
		 printf("failed to open uart\n");
   42068:	01000174 	movhi	r4,5
   4206c:	2105be04 	addi	r4,r4,5880
   42070:	00464340 	call	46434 <puts>
   42074:	00000306 	br	42084 <system_initialization+0x50>
		 //return 0;
	 } else {
		 printf("Uart ready!\n");
   42078:	01000174 	movhi	r4,5
   4207c:	2105c304 	addi	r4,r4,5900
   42080:	00464340 	call	46434 <puts>
	 }

	 //Interrupts Registrations
	 alt_irq_register(switch0_id, (void *)&switch0, handle_switch0_interrupt);
   42084:	d0a00017 	ldw	r2,-32768(gp)
   42088:	1009883a 	mov	r4,r2
   4208c:	d1670c04 	addi	r5,gp,-25552
   42090:	01800134 	movhi	r6,4
   42094:	3186dc04 	addi	r6,r6,7024
   42098:	004e7800 	call	4e780 <alt_irq_register>
	 alt_irq_register(switch1_id, (void *)&switch1, handle_switch1_interrupt);
   4209c:	d0a00117 	ldw	r2,-32764(gp)
   420a0:	1009883a 	mov	r4,r2
   420a4:	d1670d04 	addi	r5,gp,-25548
   420a8:	01800134 	movhi	r6,4
   420ac:	3186f004 	addi	r6,r6,7104
   420b0:	004e7800 	call	4e780 <alt_irq_register>
	 alt_irq_register(key0_id, (void *)&key0, handle_key0_interrupt);
   420b4:	d0a00217 	ldw	r2,-32760(gp)
   420b8:	1009883a 	mov	r4,r2
   420bc:	d1670e04 	addi	r5,gp,-25544
   420c0:	01800134 	movhi	r6,4
   420c4:	31870404 	addi	r6,r6,7184
   420c8:	004e7800 	call	4e780 <alt_irq_register>
	 alt_irq_register(key1_id, (void *)&key1, handle_key1_interrupt);
   420cc:	d0a00317 	ldw	r2,-32756(gp)
   420d0:	1009883a 	mov	r4,r2
   420d4:	d1670f04 	addi	r5,gp,-25540
   420d8:	01800134 	movhi	r6,4
   420dc:	31875604 	addi	r6,r6,7512
   420e0:	004e7800 	call	4e780 <alt_irq_register>
	 alt_irq_register(key2_id, (void *)&key2, handle_key2_interrupt);
   420e4:	d0a00417 	ldw	r2,-32752(gp)
   420e8:	1009883a 	mov	r4,r2
   420ec:	d1671004 	addi	r5,gp,-25536
   420f0:	01800134 	movhi	r6,4
   420f4:	31876c04 	addi	r6,r6,7600
   420f8:	004e7800 	call	4e780 <alt_irq_register>
	 alt_irq_register(key3_id, (void *)&key3, handle_key3_interrupt);
   420fc:	d0a00517 	ldw	r2,-32748(gp)
   42100:	1009883a 	mov	r4,r2
   42104:	d1671104 	addi	r5,gp,-25532
   42108:	01800134 	movhi	r6,4
   4210c:	31878004 	addi	r6,r6,7680
   42110:	004e7800 	call	4e780 <alt_irq_register>
	 alt_irq_register(leftready_id, (void *)&leftready, handle_leftready_interrupt_test);
   42114:	d0a00617 	ldw	r2,-32744(gp)
   42118:	1009883a 	mov	r4,r2
   4211c:	d1671204 	addi	r5,gp,-25528
   42120:	01800134 	movhi	r6,4
   42124:	3187b404 	addi	r6,r6,7888
   42128:	004e7800 	call	4e780 <alt_irq_register>
	 alt_irq_register(rightready_id, (void *)&rightready, handle_rightready_interrupt_test);
   4212c:	d0a00717 	ldw	r2,-32740(gp)
   42130:	1009883a 	mov	r4,r2
   42134:	d1671304 	addi	r5,gp,-25524
   42138:	01800134 	movhi	r6,4
   4213c:	3187e204 	addi	r6,r6,8072
   42140:	004e7800 	call	4e780 <alt_irq_register>

	 /*Interrupt enable -> mask to enable it*/
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH0_BASE, 1);
   42144:	00c00044 	movi	r3,1
   42148:	00800234 	movhi	r2,8
   4214c:	10848204 	addi	r2,r2,4616
   42150:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH1_BASE, 1);
   42154:	00c00044 	movi	r3,1
   42158:	00800234 	movhi	r2,8
   4215c:	10844604 	addi	r2,r2,4376
   42160:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY0_BASE, 1);
   42164:	00c00044 	movi	r3,1
   42168:	00800234 	movhi	r2,8
   4216c:	10847e04 	addi	r2,r2,4600
   42170:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY1_BASE, 1);
   42174:	00c00044 	movi	r3,1
   42178:	00800234 	movhi	r2,8
   4217c:	10845204 	addi	r2,r2,4424
   42180:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY2_BASE, 1);
   42184:	00c00044 	movi	r3,1
   42188:	00800234 	movhi	r2,8
   4218c:	10844e04 	addi	r2,r2,4408
   42190:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY3_BASE, 1);
   42194:	00c00044 	movi	r3,1
   42198:	00800234 	movhi	r2,8
   4219c:	10844a04 	addi	r2,r2,4392
   421a0:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(LEFTREADY_BASE, 1);
   421a4:	00c00044 	movi	r3,1
   421a8:	00800234 	movhi	r2,8
   421ac:	10842a04 	addi	r2,r2,4264
   421b0:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(RIGHTREADY_BASE, 1);
   421b4:	00c00044 	movi	r3,1
   421b8:	00800234 	movhi	r2,8
   421bc:	10842604 	addi	r2,r2,4248
   421c0:	10c00035 	stwio	r3,0(r2)

	 /*Reset edge capture bit*/
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0);
   421c4:	0007883a 	mov	r3,zero
   421c8:	00800234 	movhi	r2,8
   421cc:	10848304 	addi	r2,r2,4620
   421d0:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE, 0);
   421d4:	0007883a 	mov	r3,zero
   421d8:	00800234 	movhi	r2,8
   421dc:	10844704 	addi	r2,r2,4380
   421e0:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE, 0);
   421e4:	0007883a 	mov	r3,zero
   421e8:	00800234 	movhi	r2,8
   421ec:	10847f04 	addi	r2,r2,4604
   421f0:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY1_BASE, 0);
   421f4:	0007883a 	mov	r3,zero
   421f8:	00800234 	movhi	r2,8
   421fc:	10845304 	addi	r2,r2,4428
   42200:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE, 0);
   42204:	0007883a 	mov	r3,zero
   42208:	00800234 	movhi	r2,8
   4220c:	10844f04 	addi	r2,r2,4412
   42210:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE, 0);
   42214:	0007883a 	mov	r3,zero
   42218:	00800234 	movhi	r2,8
   4221c:	10844b04 	addi	r2,r2,4396
   42220:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE, 0);
   42224:	0007883a 	mov	r3,zero
   42228:	00800234 	movhi	r2,8
   4222c:	10842b04 	addi	r2,r2,4268
   42230:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE, 0);
   42234:	0007883a 	mov	r3,zero
   42238:	00800234 	movhi	r2,8
   4223c:	10842704 	addi	r2,r2,4252
   42240:	10c00035 	stwio	r3,0(r2)

	 /*turn off all LEDs*/
	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   42244:	0007883a 	mov	r3,zero
   42248:	00800234 	movhi	r2,8
   4224c:	10848404 	addi	r2,r2,4624
   42250:	10c00035 	stwio	r3,0(r2)

	 /*initialize SPI transmission*/
	 IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 1); // ~CS low
   42254:	00c00044 	movi	r3,1
   42258:	00800234 	movhi	r2,8
   4225c:	10847404 	addi	r2,r2,4560
   42260:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0); // Initialize SCLK to high
   42264:	0007883a 	mov	r3,zero
   42268:	00800234 	movhi	r2,8
   4226c:	10847004 	addi	r2,r2,4544
   42270:	10c00035 	stwio	r3,0(r2)
}
   42274:	e037883a 	mov	sp,fp
   42278:	dfc00117 	ldw	ra,4(sp)
   4227c:	df000017 	ldw	fp,0(sp)
   42280:	dec00204 	addi	sp,sp,8
   42284:	f800283a 	ret

00042288 <main>:


int main(void) {
   42288:	deff7c04 	addi	sp,sp,-528
   4228c:	dfc08315 	stw	ra,524(sp)
   42290:	df008215 	stw	fp,520(sp)
   42294:	df008204 	addi	fp,sp,520
	 system_initialization();
   42298:	00420340 	call	42034 <system_initialization>
	 AIC23_demo();
   4229c:	00403340 	call	40334 <AIC23_demo>
	 sampleFrequency = 0x000C; //8k
   422a0:	00800304 	movi	r2,12
   422a4:	d0a00915 	stw	r2,-32732(gp)

	 int counter;
	 int UARTData[128];
	 int ii;
	 for(ii=0; ii<128; ii++){
   422a8:	e03f7f15 	stw	zero,-516(fp)
   422ac:	00003506 	br	42384 <main+0xfc>
		 UARTData[ii] = (int)1000*sin(2*PI*ii/128);
   422b0:	e13f7f17 	ldw	r4,-516(fp)
   422b4:	00459200 	call	45920 <__floatsidf>
   422b8:	100b883a 	mov	r5,r2
   422bc:	180d883a 	mov	r6,r3
   422c0:	2809883a 	mov	r4,r5
   422c4:	300b883a 	mov	r5,r6
   422c8:	01bf22f4 	movhi	r6,64651
   422cc:	31801e84 	addi	r6,r6,122
   422d0:	01d00674 	movhi	r7,16409
   422d4:	39c87e84 	addi	r7,r7,8698
   422d8:	00453640 	call	45364 <__muldf3>
   422dc:	1009883a 	mov	r4,r2
   422e0:	180b883a 	mov	r5,r3
   422e4:	2005883a 	mov	r2,r4
   422e8:	2807883a 	mov	r3,r5
   422ec:	1009883a 	mov	r4,r2
   422f0:	180b883a 	mov	r5,r3
   422f4:	000d883a 	mov	r6,zero
   422f8:	01d01834 	movhi	r7,16480
   422fc:	00456480 	call	45648 <__divdf3>
   42300:	1009883a 	mov	r4,r2
   42304:	180b883a 	mov	r5,r3
   42308:	2005883a 	mov	r2,r4
   4230c:	2807883a 	mov	r3,r5
   42310:	1009883a 	mov	r4,r2
   42314:	180b883a 	mov	r5,r3
   42318:	00428cc0 	call	428cc <sin>
   4231c:	100b883a 	mov	r5,r2
   42320:	180d883a 	mov	r6,r3
   42324:	2809883a 	mov	r4,r5
   42328:	300b883a 	mov	r5,r6
   4232c:	000d883a 	mov	r6,zero
   42330:	01d023f4 	movhi	r7,16527
   42334:	39d00004 	addi	r7,r7,16384
   42338:	00453640 	call	45364 <__muldf3>
   4233c:	1009883a 	mov	r4,r2
   42340:	180b883a 	mov	r5,r3
   42344:	2005883a 	mov	r2,r4
   42348:	2807883a 	mov	r3,r5
   4234c:	1009883a 	mov	r4,r2
   42350:	180b883a 	mov	r5,r3
   42354:	00459f40 	call	459f4 <__fixdfsi>
   42358:	1007883a 	mov	r3,r2
   4235c:	e0bf7f17 	ldw	r2,-516(fp)
   42360:	1085883a 	add	r2,r2,r2
   42364:	1085883a 	add	r2,r2,r2
   42368:	e13f7e04 	addi	r4,fp,-520
   4236c:	2085883a 	add	r2,r4,r2
   42370:	10800204 	addi	r2,r2,8
   42374:	10c00015 	stw	r3,0(r2)
	 sampleFrequency = 0x000C; //8k

	 int counter;
	 int UARTData[128];
	 int ii;
	 for(ii=0; ii<128; ii++){
   42378:	e0bf7f17 	ldw	r2,-516(fp)
   4237c:	10800044 	addi	r2,r2,1
   42380:	e0bf7f15 	stw	r2,-516(fp)
   42384:	e0bf7f17 	ldw	r2,-516(fp)
   42388:	10802010 	cmplti	r2,r2,128
   4238c:	103fc81e 	bne	r2,zero,422b0 <main+0x28>
   42390:	00000106 	br	42398 <main+0x110>
			for (counter=1; counter < 128; counter++){
				uart_sendInt16(UARTData[counter]);
			}
			uartStartSendFlag = 0;
		 }
	 }
   42394:	0001883a 	nop
		 UARTData[ii] = (int)1000*sin(2*PI*ii/128);
	 }

	 /*Your main infinity while loop*/
	 while(1){
		 if(uartStartSendFlag){
   42398:	d0a71c17 	ldw	r2,-25488(gp)
   4239c:	103ffd26 	beq	r2,zero,42394 <main+0x10c>
			for (counter=1; counter < 128; counter++){
   423a0:	00800044 	movi	r2,1
   423a4:	e0bf7e15 	stw	r2,-520(fp)
   423a8:	00000c06 	br	423dc <main+0x154>
				uart_sendInt16(UARTData[counter]);
   423ac:	e0bf7e17 	ldw	r2,-520(fp)
   423b0:	1085883a 	add	r2,r2,r2
   423b4:	1085883a 	add	r2,r2,r2
   423b8:	e0ff7e04 	addi	r3,fp,-520
   423bc:	1885883a 	add	r2,r3,r2
   423c0:	10800204 	addi	r2,r2,8
   423c4:	10800017 	ldw	r2,0(r2)
   423c8:	1009883a 	mov	r4,r2
   423cc:	00425c40 	call	425c4 <uart_sendInt16>
	 }

	 /*Your main infinity while loop*/
	 while(1){
		 if(uartStartSendFlag){
			for (counter=1; counter < 128; counter++){
   423d0:	e0bf7e17 	ldw	r2,-520(fp)
   423d4:	10800044 	addi	r2,r2,1
   423d8:	e0bf7e15 	stw	r2,-520(fp)
   423dc:	e0bf7e17 	ldw	r2,-520(fp)
   423e0:	10802010 	cmplti	r2,r2,128
   423e4:	103ff11e 	bne	r2,zero,423ac <main+0x124>
				uart_sendInt16(UARTData[counter]);
			}
			uartStartSendFlag = 0;
   423e8:	d0271c15 	stw	zero,-25488(gp)
		 }
	 }
   423ec:	003fe906 	br	42394 <main+0x10c>

000423f0 <spi_send>:

#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "delay.h"

void spi_send(unsigned int address, unsigned int data){
   423f0:	defffb04 	addi	sp,sp,-20
   423f4:	dfc00415 	stw	ra,16(sp)
   423f8:	df000315 	stw	fp,12(sp)
   423fc:	df000304 	addi	fp,sp,12
   42400:	e13ffe15 	stw	r4,-8(fp)
   42404:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
   42408:	e03ffd15 	stw	zero,-12(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 0); // Begin
   4240c:	0007883a 	mov	r3,zero
   42410:	00800234 	movhi	r2,8
   42414:	10847404 	addi	r2,r2,4560
   42418:	10c00035 	stwio	r3,0(r2)
	delay(150);
   4241c:	01002584 	movi	r4,150
   42420:	00412840 	call	41284 <delay>
	for(i = 0; i < 7; i++){
   42424:	e03ffd15 	stw	zero,-12(fp)
   42428:	00002006 	br	424ac <spi_send+0xbc>
		if((address & 0x40) != 0){
   4242c:	e0bffe17 	ldw	r2,-8(fp)
   42430:	1080100c 	andi	r2,r2,64
   42434:	10000526 	beq	r2,zero,4244c <spi_send+0x5c>
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 1);
   42438:	00c00044 	movi	r3,1
   4243c:	00800234 	movhi	r2,8
   42440:	10846c04 	addi	r2,r2,4528
   42444:	10c00035 	stwio	r3,0(r2)
   42448:	00000406 	br	4245c <spi_send+0x6c>
			//printf("1");
		}else{
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 0);
   4244c:	0007883a 	mov	r3,zero
   42450:	00800234 	movhi	r2,8
   42454:	10846c04 	addi	r2,r2,4528
   42458:	10c00035 	stwio	r3,0(r2)
			//printf("0");
		}
		delay(1000);
   4245c:	0100fa04 	movi	r4,1000
   42460:	00412840 	call	41284 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
   42464:	00c00044 	movi	r3,1
   42468:	00800234 	movhi	r2,8
   4246c:	10847004 	addi	r2,r2,4544
   42470:	10c00035 	stwio	r3,0(r2)
		delay(1000);
   42474:	0100fa04 	movi	r4,1000
   42478:	00412840 	call	41284 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0);
   4247c:	0007883a 	mov	r3,zero
   42480:	00800234 	movhi	r2,8
   42484:	10847004 	addi	r2,r2,4544
   42488:	10c00035 	stwio	r3,0(r2)
		delay(1000);
   4248c:	0100fa04 	movi	r4,1000
   42490:	00412840 	call	41284 <delay>

		address <<= 1;
   42494:	e0bffe17 	ldw	r2,-8(fp)
   42498:	1085883a 	add	r2,r2,r2
   4249c:	e0bffe15 	stw	r2,-8(fp)
void spi_send(unsigned int address, unsigned int data){
	int i = 0;

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 0); // Begin
	delay(150);
	for(i = 0; i < 7; i++){
   424a0:	e0bffd17 	ldw	r2,-12(fp)
   424a4:	10800044 	addi	r2,r2,1
   424a8:	e0bffd15 	stw	r2,-12(fp)
   424ac:	e0bffd17 	ldw	r2,-12(fp)
   424b0:	108001d0 	cmplti	r2,r2,7
   424b4:	103fdd1e 	bne	r2,zero,4242c <spi_send+0x3c>
		delay(1000);

		address <<= 1;
	}

	for(i = 0; i < 9; i++){
   424b8:	e03ffd15 	stw	zero,-12(fp)
   424bc:	00002006 	br	42540 <spi_send+0x150>
		if((data & 0x100) != 0){
   424c0:	e0bfff17 	ldw	r2,-4(fp)
   424c4:	1080400c 	andi	r2,r2,256
   424c8:	10000526 	beq	r2,zero,424e0 <spi_send+0xf0>
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 1);
   424cc:	00c00044 	movi	r3,1
   424d0:	00800234 	movhi	r2,8
   424d4:	10846c04 	addi	r2,r2,4528
   424d8:	10c00035 	stwio	r3,0(r2)
   424dc:	00000406 	br	424f0 <spi_send+0x100>
			//printf("1");
		}else{
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 0);
   424e0:	0007883a 	mov	r3,zero
   424e4:	00800234 	movhi	r2,8
   424e8:	10846c04 	addi	r2,r2,4528
   424ec:	10c00035 	stwio	r3,0(r2)
			//printf("0");
		}
		delay(1000);
   424f0:	0100fa04 	movi	r4,1000
   424f4:	00412840 	call	41284 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
   424f8:	00c00044 	movi	r3,1
   424fc:	00800234 	movhi	r2,8
   42500:	10847004 	addi	r2,r2,4544
   42504:	10c00035 	stwio	r3,0(r2)
		delay(1000);
   42508:	0100fa04 	movi	r4,1000
   4250c:	00412840 	call	41284 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0);
   42510:	0007883a 	mov	r3,zero
   42514:	00800234 	movhi	r2,8
   42518:	10847004 	addi	r2,r2,4544
   4251c:	10c00035 	stwio	r3,0(r2)
		delay(1000);
   42520:	0100fa04 	movi	r4,1000
   42524:	00412840 	call	41284 <delay>

		data <<= 1;
   42528:	e0bfff17 	ldw	r2,-4(fp)
   4252c:	1085883a 	add	r2,r2,r2
   42530:	e0bfff15 	stw	r2,-4(fp)
		delay(1000);

		address <<= 1;
	}

	for(i = 0; i < 9; i++){
   42534:	e0bffd17 	ldw	r2,-12(fp)
   42538:	10800044 	addi	r2,r2,1
   4253c:	e0bffd15 	stw	r2,-12(fp)
   42540:	e0bffd17 	ldw	r2,-12(fp)
   42544:	10800250 	cmplti	r2,r2,9
   42548:	103fdd1e 	bne	r2,zero,424c0 <spi_send+0xd0>
		delay(1000);

		data <<= 1;
	}

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 1); // Latches word to AIC
   4254c:	00c00044 	movi	r3,1
   42550:	00800234 	movhi	r2,8
   42554:	10847404 	addi	r2,r2,4560
   42558:	10c00035 	stwio	r3,0(r2)
	//IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
}
   4255c:	e037883a 	mov	sp,fp
   42560:	dfc00117 	ldw	ra,4(sp)
   42564:	df000017 	ldw	fp,0(sp)
   42568:	dec00204 	addi	sp,sp,8
   4256c:	f800283a 	ret

00042570 <uart_sendByte>:

int counter = 0;

/*-------------------------- Send data---------------------------*/
/*Send integer value through UART*/
void uart_sendByte(char data){
   42570:	defffd04 	addi	sp,sp,-12
   42574:	dfc00215 	stw	ra,8(sp)
   42578:	df000115 	stw	fp,4(sp)
   4257c:	df000104 	addi	fp,sp,4
   42580:	2005883a 	mov	r2,r4
   42584:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data);
   42588:	e0ffff07 	ldb	r3,-4(fp)
   4258c:	00800234 	movhi	r2,8
   42590:	10840104 	addi	r2,r2,4100
   42594:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY); //not sure about delay parameter
   42598:	0100e104 	movi	r4,900
   4259c:	00412840 	call	41284 <delay>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, '\n');
   425a0:	00c00284 	movi	r3,10
   425a4:	00800234 	movhi	r2,8
   425a8:	10840104 	addi	r2,r2,4100
   425ac:	10c00035 	stwio	r3,0(r2)
}
   425b0:	e037883a 	mov	sp,fp
   425b4:	dfc00117 	ldw	ra,4(sp)
   425b8:	df000017 	ldw	fp,0(sp)
   425bc:	dec00204 	addi	sp,sp,8
   425c0:	f800283a 	ret

000425c4 <uart_sendInt16>:

/*Send integer value through UART  -> Higher 8 bits first */
void uart_sendInt16(alt_16 data){
   425c4:	defffd04 	addi	sp,sp,-12
   425c8:	dfc00215 	stw	ra,8(sp)
   425cc:	df000115 	stw	fp,4(sp)
   425d0:	df000104 	addi	fp,sp,4
   425d4:	2005883a 	mov	r2,r4
   425d8:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data & 0xFF);
   425dc:	e0bfff0b 	ldhu	r2,-4(fp)
   425e0:	10bfffcc 	andi	r2,r2,65535
   425e4:	10c03fcc 	andi	r3,r2,255
   425e8:	00800234 	movhi	r2,8
   425ec:	10840104 	addi	r2,r2,4100
   425f0:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY);
   425f4:	0100e104 	movi	r4,900
   425f8:	00412840 	call	41284 <delay>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data >> 8);
   425fc:	e0bfff0f 	ldh	r2,-4(fp)
   42600:	1005d23a 	srai	r2,r2,8
   42604:	10ffffcc 	andi	r3,r2,65535
   42608:	18e0001c 	xori	r3,r3,32768
   4260c:	18e00004 	addi	r3,r3,-32768
   42610:	00800234 	movhi	r2,8
   42614:	10840104 	addi	r2,r2,4100
   42618:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY);
   4261c:	0100e104 	movi	r4,900
   42620:	00412840 	call	41284 <delay>

}
   42624:	e037883a 	mov	sp,fp
   42628:	dfc00117 	ldw	ra,4(sp)
   4262c:	df000017 	ldw	fp,0(sp)
   42630:	dec00204 	addi	sp,sp,8
   42634:	f800283a 	ret

00042638 <uart_sendFloat>:



void uart_sendFloat(float data){
   42638:	defff804 	addi	sp,sp,-32
   4263c:	dfc00715 	stw	ra,28(sp)
   42640:	df000615 	stw	fp,24(sp)
   42644:	df000604 	addi	fp,sp,24
   42648:	e13fff15 	stw	r4,-4(fp)
	char number[10];
	int i = 0;
   4264c:	e03ffb15 	stw	zero,-20(fp)
	snprintf(number, sizeof(number), "%f", data);
   42650:	e13fff17 	ldw	r4,-4(fp)
   42654:	0044f180 	call	44f18 <__extendsfdf2>
   42658:	1009883a 	mov	r4,r2
   4265c:	180b883a 	mov	r5,r3
   42660:	e0bffc04 	addi	r2,fp,-16
   42664:	d9400015 	stw	r5,0(sp)
   42668:	200f883a 	mov	r7,r4
   4266c:	1009883a 	mov	r4,r2
   42670:	01400284 	movi	r5,10
   42674:	01800174 	movhi	r6,5
   42678:	3185c604 	addi	r6,r6,5912
   4267c:	00464ec0 	call	464ec <snprintf>
	while(i < 10){
   42680:	00000f06 	br	426c0 <uart_sendFloat+0x88>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, number[i]);
   42684:	e0fffc04 	addi	r3,fp,-16
   42688:	e0bffb17 	ldw	r2,-20(fp)
   4268c:	1885883a 	add	r2,r3,r2
   42690:	10800003 	ldbu	r2,0(r2)
   42694:	10c03fcc 	andi	r3,r2,255
   42698:	18c0201c 	xori	r3,r3,128
   4269c:	18ffe004 	addi	r3,r3,-128
   426a0:	00800234 	movhi	r2,8
   426a4:	10840104 	addi	r2,r2,4100
   426a8:	10c00035 	stwio	r3,0(r2)
		delay(UART_SEND_DELAY); //not sure about delay parameter
   426ac:	0100e104 	movi	r4,900
   426b0:	00412840 	call	41284 <delay>
		i++;
   426b4:	e0bffb17 	ldw	r2,-20(fp)
   426b8:	10800044 	addi	r2,r2,1
   426bc:	e0bffb15 	stw	r2,-20(fp)

void uart_sendFloat(float data){
	char number[10];
	int i = 0;
	snprintf(number, sizeof(number), "%f", data);
	while(i < 10){
   426c0:	e0bffb17 	ldw	r2,-20(fp)
   426c4:	10800290 	cmplti	r2,r2,10
   426c8:	103fee1e 	bne	r2,zero,42684 <uart_sendFloat+0x4c>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, number[i]);
		delay(UART_SEND_DELAY); //not sure about delay parameter
		i++;
	}
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, '\n');
   426cc:	00c00284 	movi	r3,10
   426d0:	00800234 	movhi	r2,8
   426d4:	10840104 	addi	r2,r2,4100
   426d8:	10c00035 	stwio	r3,0(r2)

}
   426dc:	e037883a 	mov	sp,fp
   426e0:	dfc00117 	ldw	ra,4(sp)
   426e4:	df000017 	ldw	fp,0(sp)
   426e8:	dec00204 	addi	sp,sp,8
   426ec:	f800283a 	ret

000426f0 <uart_SendLeftBuff>:
//		if (++RxHead > (RX_BUFFER_SIZE-1)) RxHead = 0;
//	}
//}

/*Send the whole buffer to the PC through UART*/
void uart_SendLeftBuff(void){
   426f0:	defffd04 	addi	sp,sp,-12
   426f4:	dfc00215 	stw	ra,8(sp)
   426f8:	df000115 	stw	fp,4(sp)
   426fc:	df000104 	addi	fp,sp,4
	int temp;
	temp = leftCount;
   42700:	00800174 	movhi	r2,5
   42704:	1094fc04 	addi	r2,r2,21488
   42708:	10800017 	ldw	r2,0(r2)
   4270c:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (BUFFERSIZE + temp); counter++){
   42710:	e0bfff17 	ldw	r2,-4(fp)
   42714:	d0a72115 	stw	r2,-25468(gp)
   42718:	00001106 	br	42760 <uart_SendLeftBuff+0x70>
		uart_sendInt16(leftChannelData[(counter % BUFFERSIZE)]);
   4271c:	d0a72117 	ldw	r2,-25468(gp)
   42720:	1009883a 	mov	r4,r2
   42724:	014006c4 	movi	r5,27
   42728:	0045bc40 	call	45bc4 <__modsi3>
   4272c:	00c00174 	movhi	r3,5
   42730:	18d59d04 	addi	r3,r3,22132
   42734:	1085883a 	add	r2,r2,r2
   42738:	1885883a 	add	r2,r3,r2
   4273c:	1080000b 	ldhu	r2,0(r2)
   42740:	10bfffcc 	andi	r2,r2,65535
   42744:	10a0001c 	xori	r2,r2,32768
   42748:	10a00004 	addi	r2,r2,-32768
   4274c:	1009883a 	mov	r4,r2
   42750:	00425c40 	call	425c4 <uart_sendInt16>

/*Send the whole buffer to the PC through UART*/
void uart_SendLeftBuff(void){
	int temp;
	temp = leftCount;
	for (counter = temp; counter < (BUFFERSIZE + temp); counter++){
   42754:	d0a72117 	ldw	r2,-25468(gp)
   42758:	10800044 	addi	r2,r2,1
   4275c:	d0a72115 	stw	r2,-25468(gp)
   42760:	e0bfff17 	ldw	r2,-4(fp)
   42764:	108006c4 	addi	r2,r2,27
   42768:	d0e72117 	ldw	r3,-25468(gp)
   4276c:	18bfeb16 	blt	r3,r2,4271c <uart_SendLeftBuff+0x2c>
		uart_sendInt16(leftChannelData[(counter % BUFFERSIZE)]);
	}
}
   42770:	e037883a 	mov	sp,fp
   42774:	dfc00117 	ldw	ra,4(sp)
   42778:	df000017 	ldw	fp,0(sp)
   4277c:	dec00204 	addi	sp,sp,8
   42780:	f800283a 	ret

00042784 <uart_SendTestBuff>:

/*Send the whole testing 1000 data buffer to the PC through UART*/
void uart_SendTestBuff(void){
   42784:	defffd04 	addi	sp,sp,-12
   42788:	dfc00215 	stw	ra,8(sp)
   4278c:	df000115 	stw	fp,4(sp)
   42790:	df000104 	addi	fp,sp,4
	int temp;
	temp = lefttestCount;
   42794:	00800174 	movhi	r2,5
   42798:	1094fd04 	addi	r2,r2,21492
   4279c:	10800017 	ldw	r2,0(r2)
   427a0:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (256 + temp); counter++){
   427a4:	e0bfff17 	ldw	r2,-4(fp)
   427a8:	d0a72115 	stw	r2,-25468(gp)
   427ac:	00001606 	br	42808 <uart_SendTestBuff+0x84>
		uart_sendInt16(datatest[counter % 256]);
   427b0:	d0e72117 	ldw	r3,-25468(gp)
   427b4:	00a00034 	movhi	r2,32768
   427b8:	10803fc4 	addi	r2,r2,255
   427bc:	1884703a 	and	r2,r3,r2
   427c0:	1000040e 	bge	r2,zero,427d4 <uart_SendTestBuff+0x50>
   427c4:	10bfffc4 	addi	r2,r2,-1
   427c8:	00ffc004 	movi	r3,-256
   427cc:	10c4b03a 	or	r2,r2,r3
   427d0:	10800044 	addi	r2,r2,1
   427d4:	00c00174 	movhi	r3,5
   427d8:	18d51d04 	addi	r3,r3,21620
   427dc:	1085883a 	add	r2,r2,r2
   427e0:	1885883a 	add	r2,r3,r2
   427e4:	1080000b 	ldhu	r2,0(r2)
   427e8:	10bfffcc 	andi	r2,r2,65535
   427ec:	10a0001c 	xori	r2,r2,32768
   427f0:	10a00004 	addi	r2,r2,-32768
   427f4:	1009883a 	mov	r4,r2
   427f8:	00425c40 	call	425c4 <uart_sendInt16>

/*Send the whole testing 1000 data buffer to the PC through UART*/
void uart_SendTestBuff(void){
	int temp;
	temp = lefttestCount;
	for (counter = temp; counter < (256 + temp); counter++){
   427fc:	d0a72117 	ldw	r2,-25468(gp)
   42800:	10800044 	addi	r2,r2,1
   42804:	d0a72115 	stw	r2,-25468(gp)
   42808:	e0bfff17 	ldw	r2,-4(fp)
   4280c:	10804004 	addi	r2,r2,256
   42810:	d0e72117 	ldw	r3,-25468(gp)
   42814:	18bfe616 	blt	r3,r2,427b0 <uart_SendTestBuff+0x2c>
		uart_sendInt16(datatest[counter % 256]);
	}
}
   42818:	e037883a 	mov	sp,fp
   4281c:	dfc00117 	ldw	ra,4(sp)
   42820:	df000017 	ldw	fp,0(sp)
   42824:	dec00204 	addi	sp,sp,8
   42828:	f800283a 	ret

0004282c <uart_SendConvBuff>:

/*Send the whole buffer to the PC through UART*/
void uart_SendConvBuff(void){
   4282c:	defffd04 	addi	sp,sp,-12
   42830:	dfc00215 	stw	ra,8(sp)
   42834:	df000115 	stw	fp,4(sp)
   42838:	df000104 	addi	fp,sp,4
	int temp;
	temp = convIndex;
   4283c:	00800174 	movhi	r2,5
   42840:	1094fa04 	addi	r2,r2,21480
   42844:	10800017 	ldw	r2,0(r2)
   42848:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (CONVBUFFSIZE + temp); counter++){
   4284c:	e0bfff17 	ldw	r2,-4(fp)
   42850:	d0a72115 	stw	r2,-25468(gp)
   42854:	00001406 	br	428a8 <uart_SendConvBuff+0x7c>
		uart_sendInt16((alt_16)convResultBuffer[counter % (CONVBUFFSIZE)]);
   42858:	d0a72117 	ldw	r2,-25468(gp)
   4285c:	1009883a 	mov	r4,r2
   42860:	0140fa04 	movi	r5,1000
   42864:	0045bc40 	call	45bc4 <__modsi3>
   42868:	00c00174 	movhi	r3,5
   4286c:	18d6ab04 	addi	r3,r3,23212
   42870:	1085883a 	add	r2,r2,r2
   42874:	1085883a 	add	r2,r2,r2
   42878:	1887883a 	add	r3,r3,r2
   4287c:	18800017 	ldw	r2,0(r3)
   42880:	1009883a 	mov	r4,r2
   42884:	0044e740 	call	44e74 <__fixsfsi>
   42888:	10bfffcc 	andi	r2,r2,65535
   4288c:	10a0001c 	xori	r2,r2,32768
   42890:	10a00004 	addi	r2,r2,-32768
   42894:	1009883a 	mov	r4,r2
   42898:	00425c40 	call	425c4 <uart_sendInt16>

/*Send the whole buffer to the PC through UART*/
void uart_SendConvBuff(void){
	int temp;
	temp = convIndex;
	for (counter = temp; counter < (CONVBUFFSIZE + temp); counter++){
   4289c:	d0a72117 	ldw	r2,-25468(gp)
   428a0:	10800044 	addi	r2,r2,1
   428a4:	d0a72115 	stw	r2,-25468(gp)
   428a8:	e0bfff17 	ldw	r2,-4(fp)
   428ac:	1080fa04 	addi	r2,r2,1000
   428b0:	d0e72117 	ldw	r3,-25468(gp)
   428b4:	18bfe816 	blt	r3,r2,42858 <uart_SendConvBuff+0x2c>
		uart_sendInt16((alt_16)convResultBuffer[counter % (CONVBUFFSIZE)]);
	}
}
   428b8:	e037883a 	mov	sp,fp
   428bc:	dfc00117 	ldw	ra,4(sp)
   428c0:	df000017 	ldw	fp,0(sp)
   428c4:	dec00204 	addi	sp,sp,8
   428c8:	f800283a 	ret

000428cc <sin>:
   428cc:	defffa04 	addi	sp,sp,-24
   428d0:	00a00034 	movhi	r2,32768
   428d4:	10bfffc4 	addi	r2,r2,-1
   428d8:	dfc00515 	stw	ra,20(sp)
   428dc:	2884703a 	and	r2,r5,r2
   428e0:	00cffa74 	movhi	r3,16361
   428e4:	18c87ec4 	addi	r3,r3,8699
   428e8:	280f883a 	mov	r7,r5
   428ec:	200d883a 	mov	r6,r4
   428f0:	1880160e 	bge	r3,r2,4294c <sin+0x80>
   428f4:	00dffc34 	movhi	r3,32752
   428f8:	18ffffc4 	addi	r3,r3,-1
   428fc:	1880040e 	bge	r3,r2,42910 <sin+0x44>
   42900:	00453040 	call	45304 <__subdf3>
   42904:	dfc00517 	ldw	ra,20(sp)
   42908:	dec00604 	addi	sp,sp,24
   4290c:	f800283a 	ret
   42910:	d9800104 	addi	r6,sp,4
   42914:	00429bc0 	call	429bc <__ieee754_rem_pio2>
   42918:	108000cc 	andi	r2,r2,3
   4291c:	00c00044 	movi	r3,1
   42920:	10c01926 	beq	r2,r3,42988 <sin+0xbc>
   42924:	01000084 	movi	r4,2
   42928:	11000f26 	beq	r2,r4,42968 <sin+0x9c>
   4292c:	10001c1e 	bne	r2,zero,429a0 <sin+0xd4>
   42930:	d9000117 	ldw	r4,4(sp)
   42934:	d9400217 	ldw	r5,8(sp)
   42938:	d9800317 	ldw	r6,12(sp)
   4293c:	d9c00417 	ldw	r7,16(sp)
   42940:	d8c00015 	stw	r3,0(sp)
   42944:	00443c40 	call	443c4 <__kernel_sin>
   42948:	003fee06 	br	42904 <sin+0x38>
   4294c:	d8000015 	stw	zero,0(sp)
   42950:	000d883a 	mov	r6,zero
   42954:	000f883a 	mov	r7,zero
   42958:	00443c40 	call	443c4 <__kernel_sin>
   4295c:	dfc00517 	ldw	ra,20(sp)
   42960:	dec00604 	addi	sp,sp,24
   42964:	f800283a 	ret
   42968:	d9000117 	ldw	r4,4(sp)
   4296c:	d9400217 	ldw	r5,8(sp)
   42970:	d9800317 	ldw	r6,12(sp)
   42974:	d9c00417 	ldw	r7,16(sp)
   42978:	d8c00015 	stw	r3,0(sp)
   4297c:	00443c40 	call	443c4 <__kernel_sin>
   42980:	18e0003c 	xorhi	r3,r3,32768
   42984:	003fdf06 	br	42904 <sin+0x38>
   42988:	d9000117 	ldw	r4,4(sp)
   4298c:	d9400217 	ldw	r5,8(sp)
   42990:	d9800317 	ldw	r6,12(sp)
   42994:	d9c00417 	ldw	r7,16(sp)
   42998:	00431740 	call	43174 <__kernel_cos>
   4299c:	003fd906 	br	42904 <sin+0x38>
   429a0:	d9000117 	ldw	r4,4(sp)
   429a4:	d9400217 	ldw	r5,8(sp)
   429a8:	d9800317 	ldw	r6,12(sp)
   429ac:	d9c00417 	ldw	r7,16(sp)
   429b0:	00431740 	call	43174 <__kernel_cos>
   429b4:	18e0003c 	xorhi	r3,r3,32768
   429b8:	003fd206 	br	42904 <sin+0x38>

000429bc <__ieee754_rem_pio2>:
   429bc:	deffea04 	addi	sp,sp,-88
   429c0:	dc400d15 	stw	r17,52(sp)
   429c4:	04600034 	movhi	r17,32768
   429c8:	8c7fffc4 	addi	r17,r17,-1
   429cc:	dd801215 	stw	r22,72(sp)
   429d0:	dc800e15 	stw	r18,56(sp)
   429d4:	dc000c15 	stw	r16,48(sp)
   429d8:	dfc01515 	stw	ra,84(sp)
   429dc:	df001415 	stw	fp,80(sp)
   429e0:	ddc01315 	stw	r23,76(sp)
   429e4:	dd401115 	stw	r21,68(sp)
   429e8:	dd001015 	stw	r20,64(sp)
   429ec:	dcc00f15 	stw	r19,60(sp)
   429f0:	2c62703a 	and	r17,r5,r17
   429f4:	008ffa74 	movhi	r2,16361
   429f8:	10887ec4 	addi	r2,r2,8699
   429fc:	282d883a 	mov	r22,r5
   42a00:	2025883a 	mov	r18,r4
   42a04:	3021883a 	mov	r16,r6
   42a08:	14406c0e 	bge	r2,r17,42bbc <__ieee754_rem_pio2+0x200>
   42a0c:	009000f4 	movhi	r2,16387
   42a10:	10b65ec4 	addi	r2,r2,-9861
   42a14:	14402316 	blt	r2,r17,42aa4 <__ieee754_rem_pio2+0xe8>
   42a18:	01951034 	movhi	r6,21568
   42a1c:	01cffe74 	movhi	r7,16377
   42a20:	39c87ec4 	addi	r7,r7,8699
   42a24:	0141900e 	bge	zero,r5,43068 <__ieee754_rem_pio2+0x6ac>
   42a28:	00453040 	call	45304 <__subdf3>
   42a2c:	1027883a 	mov	r19,r2
   42a30:	008ffe74 	movhi	r2,16377
   42a34:	10887ec4 	addi	r2,r2,8699
   42a38:	1825883a 	mov	r18,r3
   42a3c:	88807a26 	beq	r17,r2,42c28 <__ieee754_rem_pio2+0x26c>
   42a40:	9809883a 	mov	r4,r19
   42a44:	180b883a 	mov	r5,r3
   42a48:	018698b4 	movhi	r6,6754
   42a4c:	3198cc44 	addi	r6,r6,25393
   42a50:	01cf7474 	movhi	r7,15825
   42a54:	39ed1844 	addi	r7,r7,-19359
   42a58:	00453040 	call	45304 <__subdf3>
   42a5c:	100d883a 	mov	r6,r2
   42a60:	180f883a 	mov	r7,r3
   42a64:	9809883a 	mov	r4,r19
   42a68:	900b883a 	mov	r5,r18
   42a6c:	80800015 	stw	r2,0(r16)
   42a70:	80c00115 	stw	r3,4(r16)
   42a74:	00453040 	call	45304 <__subdf3>
   42a78:	1009883a 	mov	r4,r2
   42a7c:	180b883a 	mov	r5,r3
   42a80:	018698b4 	movhi	r6,6754
   42a84:	3198cc44 	addi	r6,r6,25393
   42a88:	01cf7474 	movhi	r7,15825
   42a8c:	39ed1844 	addi	r7,r7,-19359
   42a90:	00453040 	call	45304 <__subdf3>
   42a94:	80800215 	stw	r2,8(r16)
   42a98:	80c00315 	stw	r3,12(r16)
   42a9c:	07000044 	movi	fp,1
   42aa0:	00004b06 	br	42bd0 <__ieee754_rem_pio2+0x214>
   42aa4:	00904e74 	movhi	r2,16697
   42aa8:	10887ec4 	addi	r2,r2,8699
   42aac:	1440940e 	bge	r2,r17,42d00 <__ieee754_rem_pio2+0x344>
   42ab0:	009ffc34 	movhi	r2,32752
   42ab4:	10bfffc4 	addi	r2,r2,-1
   42ab8:	14405216 	blt	r2,r17,42c04 <__ieee754_rem_pio2+0x248>
   42abc:	882bd53a 	srai	r21,r17,20
   42ac0:	ad7efa84 	addi	r21,r21,-1046
   42ac4:	a804953a 	slli	r2,r21,20
   42ac8:	88a3c83a 	sub	r17,r17,r2
   42acc:	880b883a 	mov	r5,r17
   42ad0:	00459f40 	call	459f4 <__fixdfsi>
   42ad4:	1009883a 	mov	r4,r2
   42ad8:	00459200 	call	45920 <__floatsidf>
   42adc:	9009883a 	mov	r4,r18
   42ae0:	880b883a 	mov	r5,r17
   42ae4:	100d883a 	mov	r6,r2
   42ae8:	180f883a 	mov	r7,r3
   42aec:	d8800215 	stw	r2,8(sp)
   42af0:	d8c00315 	stw	r3,12(sp)
   42af4:	00453040 	call	45304 <__subdf3>
   42af8:	000d883a 	mov	r6,zero
   42afc:	01d05c34 	movhi	r7,16752
   42b00:	1009883a 	mov	r4,r2
   42b04:	180b883a 	mov	r5,r3
   42b08:	00453640 	call	45364 <__muldf3>
   42b0c:	180b883a 	mov	r5,r3
   42b10:	1009883a 	mov	r4,r2
   42b14:	1827883a 	mov	r19,r3
   42b18:	1029883a 	mov	r20,r2
   42b1c:	00459f40 	call	459f4 <__fixdfsi>
   42b20:	1009883a 	mov	r4,r2
   42b24:	00459200 	call	45920 <__floatsidf>
   42b28:	100d883a 	mov	r6,r2
   42b2c:	180f883a 	mov	r7,r3
   42b30:	a009883a 	mov	r4,r20
   42b34:	980b883a 	mov	r5,r19
   42b38:	1023883a 	mov	r17,r2
   42b3c:	1825883a 	mov	r18,r3
   42b40:	d8800415 	stw	r2,16(sp)
   42b44:	d8c00515 	stw	r3,20(sp)
   42b48:	00453040 	call	45304 <__subdf3>
   42b4c:	1009883a 	mov	r4,r2
   42b50:	180b883a 	mov	r5,r3
   42b54:	000d883a 	mov	r6,zero
   42b58:	01d05c34 	movhi	r7,16752
   42b5c:	00453640 	call	45364 <__muldf3>
   42b60:	1009883a 	mov	r4,r2
   42b64:	180b883a 	mov	r5,r3
   42b68:	000d883a 	mov	r6,zero
   42b6c:	000f883a 	mov	r7,zero
   42b70:	d8800615 	stw	r2,24(sp)
   42b74:	d8c00715 	stw	r3,28(sp)
   42b78:	00457fc0 	call	457fc <__eqdf2>
   42b7c:	10004b1e 	bne	r2,zero,42cac <__ieee754_rem_pio2+0x2f0>
   42b80:	0029883a 	mov	r20,zero
   42b84:	04c000c4 	movi	r19,3
   42b88:	8809883a 	mov	r4,r17
   42b8c:	900b883a 	mov	r5,r18
   42b90:	000d883a 	mov	r6,zero
   42b94:	000f883a 	mov	r7,zero
   42b98:	00457fc0 	call	457fc <__eqdf2>
   42b9c:	d9000204 	addi	r4,sp,8
   42ba0:	9cffffc4 	addi	r19,r19,-1
   42ba4:	2507883a 	add	r3,r4,r20
   42ba8:	1000411e 	bne	r2,zero,42cb0 <__ieee754_rem_pio2+0x2f4>
   42bac:	1c400017 	ldw	r17,0(r3)
   42bb0:	1c800117 	ldw	r18,4(r3)
   42bb4:	a53ffe04 	addi	r20,r20,-8
   42bb8:	003ff306 	br	42b88 <__ieee754_rem_pio2+0x1cc>
   42bbc:	81000015 	stw	r4,0(r16)
   42bc0:	81400115 	stw	r5,4(r16)
   42bc4:	30000215 	stw	zero,8(r6)
   42bc8:	30000315 	stw	zero,12(r6)
   42bcc:	0039883a 	mov	fp,zero
   42bd0:	e005883a 	mov	r2,fp
   42bd4:	dfc01517 	ldw	ra,84(sp)
   42bd8:	df001417 	ldw	fp,80(sp)
   42bdc:	ddc01317 	ldw	r23,76(sp)
   42be0:	dd801217 	ldw	r22,72(sp)
   42be4:	dd401117 	ldw	r21,68(sp)
   42be8:	dd001017 	ldw	r20,64(sp)
   42bec:	dcc00f17 	ldw	r19,60(sp)
   42bf0:	dc800e17 	ldw	r18,56(sp)
   42bf4:	dc400d17 	ldw	r17,52(sp)
   42bf8:	dc000c17 	ldw	r16,48(sp)
   42bfc:	dec01604 	addi	sp,sp,88
   42c00:	f800283a 	ret
   42c04:	200d883a 	mov	r6,r4
   42c08:	280f883a 	mov	r7,r5
   42c0c:	00453040 	call	45304 <__subdf3>
   42c10:	80800215 	stw	r2,8(r16)
   42c14:	80c00315 	stw	r3,12(r16)
   42c18:	80800015 	stw	r2,0(r16)
   42c1c:	80c00115 	stw	r3,4(r16)
   42c20:	0039883a 	mov	fp,zero
   42c24:	003fea06 	br	42bd0 <__ieee754_rem_pio2+0x214>
   42c28:	01869834 	movhi	r6,6752
   42c2c:	01cf7474 	movhi	r7,15825
   42c30:	39ed1844 	addi	r7,r7,-19359
   42c34:	9809883a 	mov	r4,r19
   42c38:	180b883a 	mov	r5,r3
   42c3c:	00453040 	call	45304 <__subdf3>
   42c40:	1009883a 	mov	r4,r2
   42c44:	180b883a 	mov	r5,r3
   42c48:	018b80f4 	movhi	r6,11779
   42c4c:	319c1cc4 	addi	r6,r6,28787
   42c50:	01cee8f4 	movhi	r7,15267
   42c54:	39c66284 	addi	r7,r7,6538
   42c58:	1025883a 	mov	r18,r2
   42c5c:	1823883a 	mov	r17,r3
   42c60:	00453040 	call	45304 <__subdf3>
   42c64:	100d883a 	mov	r6,r2
   42c68:	180f883a 	mov	r7,r3
   42c6c:	9009883a 	mov	r4,r18
   42c70:	880b883a 	mov	r5,r17
   42c74:	80800015 	stw	r2,0(r16)
   42c78:	80c00115 	stw	r3,4(r16)
   42c7c:	00453040 	call	45304 <__subdf3>
   42c80:	1009883a 	mov	r4,r2
   42c84:	180b883a 	mov	r5,r3
   42c88:	018b80f4 	movhi	r6,11779
   42c8c:	319c1cc4 	addi	r6,r6,28787
   42c90:	01cee8f4 	movhi	r7,15267
   42c94:	39c66284 	addi	r7,r7,6538
   42c98:	00453040 	call	45304 <__subdf3>
   42c9c:	80800215 	stw	r2,8(r16)
   42ca0:	80c00315 	stw	r3,12(r16)
   42ca4:	07000044 	movi	fp,1
   42ca8:	003fc906 	br	42bd0 <__ieee754_rem_pio2+0x214>
   42cac:	04c000c4 	movi	r19,3
   42cb0:	00800084 	movi	r2,2
   42cb4:	d8800015 	stw	r2,0(sp)
   42cb8:	00800174 	movhi	r2,5
   42cbc:	1085e704 	addi	r2,r2,6044
   42cc0:	d8800115 	stw	r2,4(sp)
   42cc4:	d9000204 	addi	r4,sp,8
   42cc8:	800b883a 	mov	r5,r16
   42ccc:	a80d883a 	mov	r6,r21
   42cd0:	980f883a 	mov	r7,r19
   42cd4:	00436180 	call	43618 <__kernel_rem_pio2>
   42cd8:	1039883a 	mov	fp,r2
   42cdc:	b03fbc0e 	bge	r22,zero,42bd0 <__ieee754_rem_pio2+0x214>
   42ce0:	80c00117 	ldw	r3,4(r16)
   42ce4:	80800317 	ldw	r2,12(r16)
   42ce8:	0739c83a 	sub	fp,zero,fp
   42cec:	18e0003c 	xorhi	r3,r3,32768
   42cf0:	10a0003c 	xorhi	r2,r2,32768
   42cf4:	80c00115 	stw	r3,4(r16)
   42cf8:	80800315 	stw	r2,12(r16)
   42cfc:	003fb406 	br	42bd0 <__ieee754_rem_pio2+0x214>
   42d00:	00446980 	call	44698 <fabs>
   42d04:	1009883a 	mov	r4,r2
   42d08:	180b883a 	mov	r5,r3
   42d0c:	019b72b4 	movhi	r6,28106
   42d10:	31b220c4 	addi	r6,r6,-14205
   42d14:	01cff934 	movhi	r7,16356
   42d18:	39d7cc04 	addi	r7,r7,24368
   42d1c:	102b883a 	mov	r21,r2
   42d20:	1829883a 	mov	r20,r3
   42d24:	00453640 	call	45364 <__muldf3>
   42d28:	000d883a 	mov	r6,zero
   42d2c:	01cff834 	movhi	r7,16352
   42d30:	1009883a 	mov	r4,r2
   42d34:	180b883a 	mov	r5,r3
   42d38:	00452b00 	call	452b0 <__adddf3>
   42d3c:	180b883a 	mov	r5,r3
   42d40:	1009883a 	mov	r4,r2
   42d44:	00459f40 	call	459f4 <__fixdfsi>
   42d48:	1009883a 	mov	r4,r2
   42d4c:	1039883a 	mov	fp,r2
   42d50:	00459200 	call	45920 <__floatsidf>
   42d54:	1009883a 	mov	r4,r2
   42d58:	180b883a 	mov	r5,r3
   42d5c:	01951034 	movhi	r6,21568
   42d60:	01cffe74 	movhi	r7,16377
   42d64:	39c87ec4 	addi	r7,r7,8699
   42d68:	1027883a 	mov	r19,r2
   42d6c:	1825883a 	mov	r18,r3
   42d70:	00453640 	call	45364 <__muldf3>
   42d74:	a809883a 	mov	r4,r21
   42d78:	a00b883a 	mov	r5,r20
   42d7c:	100d883a 	mov	r6,r2
   42d80:	180f883a 	mov	r7,r3
   42d84:	00453040 	call	45304 <__subdf3>
   42d88:	9809883a 	mov	r4,r19
   42d8c:	900b883a 	mov	r5,r18
   42d90:	018698b4 	movhi	r6,6754
   42d94:	3198cc44 	addi	r6,r6,25393
   42d98:	01cf7474 	movhi	r7,15825
   42d9c:	39ed1844 	addi	r7,r7,-19359
   42da0:	102f883a 	mov	r23,r2
   42da4:	d8c00815 	stw	r3,32(sp)
   42da8:	00453640 	call	45364 <__muldf3>
   42dac:	010007c4 	movi	r4,31
   42db0:	b81b883a 	mov	r13,r23
   42db4:	db000817 	ldw	r12,32(sp)
   42db8:	102b883a 	mov	r21,r2
   42dbc:	1829883a 	mov	r20,r3
   42dc0:	27002d16 	blt	r4,fp,42e78 <__ieee754_rem_pio2+0x4bc>
   42dc4:	e13fffc4 	addi	r4,fp,-1
   42dc8:	2109883a 	add	r4,r4,r4
   42dcc:	2109883a 	add	r4,r4,r4
   42dd0:	01400174 	movhi	r5,5
   42dd4:	2945c704 	addi	r5,r5,5916
   42dd8:	2909883a 	add	r4,r5,r4
   42ddc:	21000017 	ldw	r4,0(r4)
   42de0:	24402526 	beq	r4,r17,42e78 <__ieee754_rem_pio2+0x4bc>
   42de4:	b809883a 	mov	r4,r23
   42de8:	600b883a 	mov	r5,r12
   42dec:	100d883a 	mov	r6,r2
   42df0:	180f883a 	mov	r7,r3
   42df4:	db000b15 	stw	r12,44(sp)
   42df8:	ddc00a15 	stw	r23,40(sp)
   42dfc:	00453040 	call	45304 <__subdf3>
   42e00:	db000b17 	ldw	r12,44(sp)
   42e04:	db400a17 	ldw	r13,40(sp)
   42e08:	1017883a 	mov	r11,r2
   42e0c:	1815883a 	mov	r10,r3
   42e10:	80800015 	stw	r2,0(r16)
   42e14:	80c00115 	stw	r3,4(r16)
   42e18:	580d883a 	mov	r6,r11
   42e1c:	500f883a 	mov	r7,r10
   42e20:	6809883a 	mov	r4,r13
   42e24:	600b883a 	mov	r5,r12
   42e28:	da800b15 	stw	r10,44(sp)
   42e2c:	dac00a15 	stw	r11,40(sp)
   42e30:	00453040 	call	45304 <__subdf3>
   42e34:	1009883a 	mov	r4,r2
   42e38:	180b883a 	mov	r5,r3
   42e3c:	a80d883a 	mov	r6,r21
   42e40:	a00f883a 	mov	r7,r20
   42e44:	00453040 	call	45304 <__subdf3>
   42e48:	80800215 	stw	r2,8(r16)
   42e4c:	80c00315 	stw	r3,12(r16)
   42e50:	da800b17 	ldw	r10,44(sp)
   42e54:	dac00a17 	ldw	r11,40(sp)
   42e58:	b03f5d0e 	bge	r22,zero,42bd0 <__ieee754_rem_pio2+0x214>
   42e5c:	52a0003c 	xorhi	r10,r10,32768
   42e60:	18e0003c 	xorhi	r3,r3,32768
   42e64:	82c00015 	stw	r11,0(r16)
   42e68:	82800115 	stw	r10,4(r16)
   42e6c:	80c00315 	stw	r3,12(r16)
   42e70:	0739c83a 	sub	fp,zero,fp
   42e74:	003f5606 	br	42bd0 <__ieee754_rem_pio2+0x214>
   42e78:	d9400817 	ldw	r5,32(sp)
   42e7c:	b809883a 	mov	r4,r23
   42e80:	100d883a 	mov	r6,r2
   42e84:	180f883a 	mov	r7,r3
   42e88:	db000b15 	stw	r12,44(sp)
   42e8c:	db400a15 	stw	r13,40(sp)
   42e90:	00453040 	call	45304 <__subdf3>
   42e94:	1017883a 	mov	r11,r2
   42e98:	1804d53a 	srli	r2,r3,20
   42e9c:	881dd53a 	srai	r14,r17,20
   42ea0:	1815883a 	mov	r10,r3
   42ea4:	1081ffcc 	andi	r2,r2,2047
   42ea8:	80c00115 	stw	r3,4(r16)
   42eac:	82c00015 	stw	r11,0(r16)
   42eb0:	7085c83a 	sub	r2,r14,r2
   42eb4:	00c00404 	movi	r3,16
   42eb8:	db000b17 	ldw	r12,44(sp)
   42ebc:	db400a17 	ldw	r13,40(sp)
   42ec0:	18bfd50e 	bge	r3,r2,42e18 <__ieee754_rem_pio2+0x45c>
   42ec4:	9809883a 	mov	r4,r19
   42ec8:	900b883a 	mov	r5,r18
   42ecc:	01869834 	movhi	r6,6752
   42ed0:	01cf7474 	movhi	r7,15825
   42ed4:	39ed1844 	addi	r7,r7,-19359
   42ed8:	db800a15 	stw	r14,40(sp)
   42edc:	00453640 	call	45364 <__muldf3>
   42ee0:	d9400817 	ldw	r5,32(sp)
   42ee4:	b809883a 	mov	r4,r23
   42ee8:	100d883a 	mov	r6,r2
   42eec:	180f883a 	mov	r7,r3
   42ef0:	102b883a 	mov	r21,r2
   42ef4:	1829883a 	mov	r20,r3
   42ef8:	00453040 	call	45304 <__subdf3>
   42efc:	d9400817 	ldw	r5,32(sp)
   42f00:	b809883a 	mov	r4,r23
   42f04:	100d883a 	mov	r6,r2
   42f08:	180f883a 	mov	r7,r3
   42f0c:	1023883a 	mov	r17,r2
   42f10:	d8c00915 	stw	r3,36(sp)
   42f14:	00453040 	call	45304 <__subdf3>
   42f18:	a80d883a 	mov	r6,r21
   42f1c:	a00f883a 	mov	r7,r20
   42f20:	1009883a 	mov	r4,r2
   42f24:	180b883a 	mov	r5,r3
   42f28:	00453040 	call	45304 <__subdf3>
   42f2c:	9809883a 	mov	r4,r19
   42f30:	900b883a 	mov	r5,r18
   42f34:	018b80f4 	movhi	r6,11779
   42f38:	319c1cc4 	addi	r6,r6,28787
   42f3c:	01cee8f4 	movhi	r7,15267
   42f40:	39c66284 	addi	r7,r7,6538
   42f44:	102b883a 	mov	r21,r2
   42f48:	1829883a 	mov	r20,r3
   42f4c:	00453640 	call	45364 <__muldf3>
   42f50:	a80d883a 	mov	r6,r21
   42f54:	a00f883a 	mov	r7,r20
   42f58:	1009883a 	mov	r4,r2
   42f5c:	180b883a 	mov	r5,r3
   42f60:	00453040 	call	45304 <__subdf3>
   42f64:	d9400917 	ldw	r5,36(sp)
   42f68:	8809883a 	mov	r4,r17
   42f6c:	100d883a 	mov	r6,r2
   42f70:	180f883a 	mov	r7,r3
   42f74:	102b883a 	mov	r21,r2
   42f78:	1829883a 	mov	r20,r3
   42f7c:	00453040 	call	45304 <__subdf3>
   42f80:	1017883a 	mov	r11,r2
   42f84:	1804d53a 	srli	r2,r3,20
   42f88:	db800a17 	ldw	r14,40(sp)
   42f8c:	82c00015 	stw	r11,0(r16)
   42f90:	1081ffcc 	andi	r2,r2,2047
   42f94:	709dc83a 	sub	r14,r14,r2
   42f98:	80c00115 	stw	r3,4(r16)
   42f9c:	00800c44 	movi	r2,49
   42fa0:	1815883a 	mov	r10,r3
   42fa4:	1380700e 	bge	r2,r14,43168 <__ieee754_rem_pio2+0x7ac>
   42fa8:	9809883a 	mov	r4,r19
   42fac:	900b883a 	mov	r5,r18
   42fb0:	018b8034 	movhi	r6,11776
   42fb4:	01cee8f4 	movhi	r7,15267
   42fb8:	39c66284 	addi	r7,r7,6538
   42fbc:	00453640 	call	45364 <__muldf3>
   42fc0:	d9400917 	ldw	r5,36(sp)
   42fc4:	8809883a 	mov	r4,r17
   42fc8:	100d883a 	mov	r6,r2
   42fcc:	180f883a 	mov	r7,r3
   42fd0:	102b883a 	mov	r21,r2
   42fd4:	1829883a 	mov	r20,r3
   42fd8:	00453040 	call	45304 <__subdf3>
   42fdc:	d9400917 	ldw	r5,36(sp)
   42fe0:	8809883a 	mov	r4,r17
   42fe4:	100d883a 	mov	r6,r2
   42fe8:	180f883a 	mov	r7,r3
   42fec:	d8c00b15 	stw	r3,44(sp)
   42ff0:	d8800a15 	stw	r2,40(sp)
   42ff4:	00453040 	call	45304 <__subdf3>
   42ff8:	a80d883a 	mov	r6,r21
   42ffc:	a00f883a 	mov	r7,r20
   43000:	1009883a 	mov	r4,r2
   43004:	180b883a 	mov	r5,r3
   43008:	00453040 	call	45304 <__subdf3>
   4300c:	9809883a 	mov	r4,r19
   43010:	900b883a 	mov	r5,r18
   43014:	01894834 	movhi	r6,9504
   43018:	31927044 	addi	r6,r6,18881
   4301c:	01ce5f34 	movhi	r7,14716
   43020:	39e0e684 	addi	r7,r7,-31846
   43024:	1029883a 	mov	r20,r2
   43028:	1823883a 	mov	r17,r3
   4302c:	00453640 	call	45364 <__muldf3>
   43030:	a00d883a 	mov	r6,r20
   43034:	1009883a 	mov	r4,r2
   43038:	180b883a 	mov	r5,r3
   4303c:	880f883a 	mov	r7,r17
   43040:	00453040 	call	45304 <__subdf3>
   43044:	db400a17 	ldw	r13,40(sp)
   43048:	db000b17 	ldw	r12,44(sp)
   4304c:	102b883a 	mov	r21,r2
   43050:	1829883a 	mov	r20,r3
   43054:	6809883a 	mov	r4,r13
   43058:	600b883a 	mov	r5,r12
   4305c:	100d883a 	mov	r6,r2
   43060:	180f883a 	mov	r7,r3
   43064:	003f6506 	br	42dfc <__ieee754_rem_pio2+0x440>
   43068:	00452b00 	call	452b0 <__adddf3>
   4306c:	1027883a 	mov	r19,r2
   43070:	008ffe74 	movhi	r2,16377
   43074:	10887ec4 	addi	r2,r2,8699
   43078:	1825883a 	mov	r18,r3
   4307c:	88801926 	beq	r17,r2,430e4 <__ieee754_rem_pio2+0x728>
   43080:	9809883a 	mov	r4,r19
   43084:	180b883a 	mov	r5,r3
   43088:	018698b4 	movhi	r6,6754
   4308c:	3198cc44 	addi	r6,r6,25393
   43090:	01cf7474 	movhi	r7,15825
   43094:	39ed1844 	addi	r7,r7,-19359
   43098:	00452b00 	call	452b0 <__adddf3>
   4309c:	100d883a 	mov	r6,r2
   430a0:	180f883a 	mov	r7,r3
   430a4:	9809883a 	mov	r4,r19
   430a8:	900b883a 	mov	r5,r18
   430ac:	80800015 	stw	r2,0(r16)
   430b0:	80c00115 	stw	r3,4(r16)
   430b4:	00453040 	call	45304 <__subdf3>
   430b8:	1009883a 	mov	r4,r2
   430bc:	180b883a 	mov	r5,r3
   430c0:	018698b4 	movhi	r6,6754
   430c4:	3198cc44 	addi	r6,r6,25393
   430c8:	01cf7474 	movhi	r7,15825
   430cc:	39ed1844 	addi	r7,r7,-19359
   430d0:	00452b00 	call	452b0 <__adddf3>
   430d4:	80800215 	stw	r2,8(r16)
   430d8:	80c00315 	stw	r3,12(r16)
   430dc:	073fffc4 	movi	fp,-1
   430e0:	003ebb06 	br	42bd0 <__ieee754_rem_pio2+0x214>
   430e4:	01869834 	movhi	r6,6752
   430e8:	01cf7474 	movhi	r7,15825
   430ec:	39ed1844 	addi	r7,r7,-19359
   430f0:	9809883a 	mov	r4,r19
   430f4:	180b883a 	mov	r5,r3
   430f8:	00452b00 	call	452b0 <__adddf3>
   430fc:	1009883a 	mov	r4,r2
   43100:	180b883a 	mov	r5,r3
   43104:	018b80f4 	movhi	r6,11779
   43108:	319c1cc4 	addi	r6,r6,28787
   4310c:	01cee8f4 	movhi	r7,15267
   43110:	39c66284 	addi	r7,r7,6538
   43114:	1025883a 	mov	r18,r2
   43118:	1823883a 	mov	r17,r3
   4311c:	00452b00 	call	452b0 <__adddf3>
   43120:	100d883a 	mov	r6,r2
   43124:	180f883a 	mov	r7,r3
   43128:	9009883a 	mov	r4,r18
   4312c:	880b883a 	mov	r5,r17
   43130:	80800015 	stw	r2,0(r16)
   43134:	80c00115 	stw	r3,4(r16)
   43138:	00453040 	call	45304 <__subdf3>
   4313c:	1009883a 	mov	r4,r2
   43140:	180b883a 	mov	r5,r3
   43144:	018b80f4 	movhi	r6,11779
   43148:	319c1cc4 	addi	r6,r6,28787
   4314c:	01cee8f4 	movhi	r7,15267
   43150:	39c66284 	addi	r7,r7,6538
   43154:	00452b00 	call	452b0 <__adddf3>
   43158:	80800215 	stw	r2,8(r16)
   4315c:	80c00315 	stw	r3,12(r16)
   43160:	073fffc4 	movi	fp,-1
   43164:	003e9a06 	br	42bd0 <__ieee754_rem_pio2+0x214>
   43168:	881b883a 	mov	r13,r17
   4316c:	db000917 	ldw	r12,36(sp)
   43170:	003f2906 	br	42e18 <__ieee754_rem_pio2+0x45c>

00043174 <__kernel_cos>:
   43174:	defff304 	addi	sp,sp,-52
   43178:	dd400815 	stw	r21,32(sp)
   4317c:	05600034 	movhi	r21,32768
   43180:	ad7fffc4 	addi	r21,r21,-1
   43184:	df000b15 	stw	fp,44(sp)
   43188:	ddc00a15 	stw	r23,40(sp)
   4318c:	dd800915 	stw	r22,36(sp)
   43190:	dc800515 	stw	r18,20(sp)
   43194:	dfc00c15 	stw	ra,48(sp)
   43198:	dd000715 	stw	r20,28(sp)
   4319c:	dcc00615 	stw	r19,24(sp)
   431a0:	dc400415 	stw	r17,16(sp)
   431a4:	dc000315 	stw	r16,12(sp)
   431a8:	2d6a703a 	and	r21,r5,r21
   431ac:	008f9034 	movhi	r2,15936
   431b0:	10bfffc4 	addi	r2,r2,-1
   431b4:	2825883a 	mov	r18,r5
   431b8:	202d883a 	mov	r22,r4
   431bc:	302f883a 	mov	r23,r6
   431c0:	3839883a 	mov	fp,r7
   431c4:	15407516 	blt	r2,r21,4339c <__kernel_cos+0x228>
   431c8:	00459f40 	call	459f4 <__fixdfsi>
   431cc:	10010f26 	beq	r2,zero,4360c <__kernel_cos+0x498>
   431d0:	b00d883a 	mov	r6,r22
   431d4:	900f883a 	mov	r7,r18
   431d8:	b009883a 	mov	r4,r22
   431dc:	900b883a 	mov	r5,r18
   431e0:	00453640 	call	45364 <__muldf3>
   431e4:	1009883a 	mov	r4,r2
   431e8:	180b883a 	mov	r5,r3
   431ec:	01afa234 	movhi	r6,48776
   431f0:	318e3504 	addi	r6,r6,14548
   431f4:	01ef6a74 	movhi	r7,48553
   431f8:	39feba44 	addi	r7,r7,-1303
   431fc:	1029883a 	mov	r20,r2
   43200:	1827883a 	mov	r19,r3
   43204:	00453640 	call	45364 <__muldf3>
   43208:	1009883a 	mov	r4,r2
   4320c:	180b883a 	mov	r5,r3
   43210:	01af6d74 	movhi	r6,48565
   43214:	31ac7104 	addi	r6,r6,-20028
   43218:	01cf88b4 	movhi	r7,15906
   4321c:	39fba784 	addi	r7,r7,-4450
   43220:	00452b00 	call	452b0 <__adddf3>
   43224:	1009883a 	mov	r4,r2
   43228:	180b883a 	mov	r5,r3
   4322c:	a00d883a 	mov	r6,r20
   43230:	980f883a 	mov	r7,r19
   43234:	00453640 	call	45364 <__muldf3>
   43238:	1009883a 	mov	r4,r2
   4323c:	180b883a 	mov	r5,r3
   43240:	01a02734 	movhi	r6,32924
   43244:	3194ab44 	addi	r6,r6,21165
   43248:	01cfa4b4 	movhi	r7,16018
   4324c:	39df93c4 	addi	r7,r7,32335
   43250:	00453040 	call	45304 <__subdf3>
   43254:	1009883a 	mov	r4,r2
   43258:	180b883a 	mov	r5,r3
   4325c:	a00d883a 	mov	r6,r20
   43260:	980f883a 	mov	r7,r19
   43264:	00453640 	call	45364 <__muldf3>
   43268:	1009883a 	mov	r4,r2
   4326c:	180b883a 	mov	r5,r3
   43270:	018672f4 	movhi	r6,6603
   43274:	31856404 	addi	r6,r6,5520
   43278:	01cfbeb4 	movhi	r7,16122
   4327c:	39c06804 	addi	r7,r7,416
   43280:	00452b00 	call	452b0 <__adddf3>
   43284:	1009883a 	mov	r4,r2
   43288:	180b883a 	mov	r5,r3
   4328c:	a00d883a 	mov	r6,r20
   43290:	980f883a 	mov	r7,r19
   43294:	00453640 	call	45364 <__muldf3>
   43298:	1009883a 	mov	r4,r2
   4329c:	180b883a 	mov	r5,r3
   432a0:	0185b074 	movhi	r6,5825
   432a4:	31945dc4 	addi	r6,r6,20855
   432a8:	01cfd5f4 	movhi	r7,16215
   432ac:	39f05b04 	addi	r7,r7,-16020
   432b0:	00453040 	call	45304 <__subdf3>
   432b4:	1009883a 	mov	r4,r2
   432b8:	180b883a 	mov	r5,r3
   432bc:	a00d883a 	mov	r6,r20
   432c0:	980f883a 	mov	r7,r19
   432c4:	00453640 	call	45364 <__muldf3>
   432c8:	1009883a 	mov	r4,r2
   432cc:	180b883a 	mov	r5,r3
   432d0:	01955574 	movhi	r6,21845
   432d4:	31955304 	addi	r6,r6,21836
   432d8:	01cfe974 	movhi	r7,16293
   432dc:	39d55544 	addi	r7,r7,21845
   432e0:	00452b00 	call	452b0 <__adddf3>
   432e4:	1009883a 	mov	r4,r2
   432e8:	180b883a 	mov	r5,r3
   432ec:	a00d883a 	mov	r6,r20
   432f0:	980f883a 	mov	r7,r19
   432f4:	00453640 	call	45364 <__muldf3>
   432f8:	1017883a 	mov	r11,r2
   432fc:	1815883a 	mov	r10,r3
   43300:	a009883a 	mov	r4,r20
   43304:	980b883a 	mov	r5,r19
   43308:	000d883a 	mov	r6,zero
   4330c:	01cff834 	movhi	r7,16352
   43310:	da800215 	stw	r10,8(sp)
   43314:	dac00115 	stw	r11,4(sp)
   43318:	00453640 	call	45364 <__muldf3>
   4331c:	dac00117 	ldw	r11,4(sp)
   43320:	da800217 	ldw	r10,8(sp)
   43324:	a009883a 	mov	r4,r20
   43328:	580d883a 	mov	r6,r11
   4332c:	500f883a 	mov	r7,r10
   43330:	980b883a 	mov	r5,r19
   43334:	1023883a 	mov	r17,r2
   43338:	1821883a 	mov	r16,r3
   4333c:	00453640 	call	45364 <__muldf3>
   43340:	b009883a 	mov	r4,r22
   43344:	900b883a 	mov	r5,r18
   43348:	b80d883a 	mov	r6,r23
   4334c:	e00f883a 	mov	r7,fp
   43350:	1029883a 	mov	r20,r2
   43354:	1827883a 	mov	r19,r3
   43358:	00453640 	call	45364 <__muldf3>
   4335c:	a009883a 	mov	r4,r20
   43360:	980b883a 	mov	r5,r19
   43364:	100d883a 	mov	r6,r2
   43368:	180f883a 	mov	r7,r3
   4336c:	00453040 	call	45304 <__subdf3>
   43370:	8809883a 	mov	r4,r17
   43374:	800b883a 	mov	r5,r16
   43378:	100d883a 	mov	r6,r2
   4337c:	180f883a 	mov	r7,r3
   43380:	00453040 	call	45304 <__subdf3>
   43384:	0009883a 	mov	r4,zero
   43388:	014ffc34 	movhi	r5,16368
   4338c:	100d883a 	mov	r6,r2
   43390:	180f883a 	mov	r7,r3
   43394:	00453040 	call	45304 <__subdf3>
   43398:	00008b06 	br	435c8 <__kernel_cos+0x454>
   4339c:	200d883a 	mov	r6,r4
   433a0:	280f883a 	mov	r7,r5
   433a4:	00453640 	call	45364 <__muldf3>
   433a8:	01afa234 	movhi	r6,48776
   433ac:	318e3504 	addi	r6,r6,14548
   433b0:	01ef6a74 	movhi	r7,48553
   433b4:	39feba44 	addi	r7,r7,-1303
   433b8:	1009883a 	mov	r4,r2
   433bc:	180b883a 	mov	r5,r3
   433c0:	1023883a 	mov	r17,r2
   433c4:	1821883a 	mov	r16,r3
   433c8:	00453640 	call	45364 <__muldf3>
   433cc:	1009883a 	mov	r4,r2
   433d0:	180b883a 	mov	r5,r3
   433d4:	01af6d74 	movhi	r6,48565
   433d8:	31ac7104 	addi	r6,r6,-20028
   433dc:	01cf88b4 	movhi	r7,15906
   433e0:	39fba784 	addi	r7,r7,-4450
   433e4:	00452b00 	call	452b0 <__adddf3>
   433e8:	1009883a 	mov	r4,r2
   433ec:	180b883a 	mov	r5,r3
   433f0:	880d883a 	mov	r6,r17
   433f4:	800f883a 	mov	r7,r16
   433f8:	00453640 	call	45364 <__muldf3>
   433fc:	1009883a 	mov	r4,r2
   43400:	180b883a 	mov	r5,r3
   43404:	01a02734 	movhi	r6,32924
   43408:	3194ab44 	addi	r6,r6,21165
   4340c:	01cfa4b4 	movhi	r7,16018
   43410:	39df93c4 	addi	r7,r7,32335
   43414:	00453040 	call	45304 <__subdf3>
   43418:	1009883a 	mov	r4,r2
   4341c:	180b883a 	mov	r5,r3
   43420:	880d883a 	mov	r6,r17
   43424:	800f883a 	mov	r7,r16
   43428:	00453640 	call	45364 <__muldf3>
   4342c:	1009883a 	mov	r4,r2
   43430:	180b883a 	mov	r5,r3
   43434:	018672f4 	movhi	r6,6603
   43438:	31856404 	addi	r6,r6,5520
   4343c:	01cfbeb4 	movhi	r7,16122
   43440:	39c06804 	addi	r7,r7,416
   43444:	00452b00 	call	452b0 <__adddf3>
   43448:	1009883a 	mov	r4,r2
   4344c:	180b883a 	mov	r5,r3
   43450:	880d883a 	mov	r6,r17
   43454:	800f883a 	mov	r7,r16
   43458:	00453640 	call	45364 <__muldf3>
   4345c:	1009883a 	mov	r4,r2
   43460:	180b883a 	mov	r5,r3
   43464:	0185b074 	movhi	r6,5825
   43468:	31945dc4 	addi	r6,r6,20855
   4346c:	01cfd5f4 	movhi	r7,16215
   43470:	39f05b04 	addi	r7,r7,-16020
   43474:	00453040 	call	45304 <__subdf3>
   43478:	1009883a 	mov	r4,r2
   4347c:	180b883a 	mov	r5,r3
   43480:	880d883a 	mov	r6,r17
   43484:	800f883a 	mov	r7,r16
   43488:	00453640 	call	45364 <__muldf3>
   4348c:	1009883a 	mov	r4,r2
   43490:	180b883a 	mov	r5,r3
   43494:	01955574 	movhi	r6,21845
   43498:	31955304 	addi	r6,r6,21836
   4349c:	01cfe974 	movhi	r7,16293
   434a0:	39d55544 	addi	r7,r7,21845
   434a4:	00452b00 	call	452b0 <__adddf3>
   434a8:	1009883a 	mov	r4,r2
   434ac:	180b883a 	mov	r5,r3
   434b0:	880d883a 	mov	r6,r17
   434b4:	800f883a 	mov	r7,r16
   434b8:	00453640 	call	45364 <__muldf3>
   434bc:	1013883a 	mov	r9,r2
   434c0:	1017883a 	mov	r11,r2
   434c4:	008ff4f4 	movhi	r2,16339
   434c8:	108ccc84 	addi	r2,r2,13106
   434cc:	1811883a 	mov	r8,r3
   434d0:	8829883a 	mov	r20,r17
   434d4:	8027883a 	mov	r19,r16
   434d8:	1815883a 	mov	r10,r3
   434dc:	157f880e 	bge	r2,r21,43300 <__kernel_cos+0x18c>
   434e0:	008ffa74 	movhi	r2,16361
   434e4:	15404416 	blt	r2,r21,435f8 <__kernel_cos+0x484>
   434e8:	00bff834 	movhi	r2,65504
   434ec:	a8ab883a 	add	r21,r21,r2
   434f0:	0009883a 	mov	r4,zero
   434f4:	014ffc34 	movhi	r5,16368
   434f8:	000d883a 	mov	r6,zero
   434fc:	a80f883a 	mov	r7,r21
   43500:	da400115 	stw	r9,4(sp)
   43504:	d8c00215 	stw	r3,8(sp)
   43508:	00453040 	call	45304 <__subdf3>
   4350c:	da000217 	ldw	r8,8(sp)
   43510:	da400117 	ldw	r9,4(sp)
   43514:	1029883a 	mov	r20,r2
   43518:	d8c00015 	stw	r3,0(sp)
   4351c:	8809883a 	mov	r4,r17
   43520:	800b883a 	mov	r5,r16
   43524:	000d883a 	mov	r6,zero
   43528:	01cff834 	movhi	r7,16352
   4352c:	da000215 	stw	r8,8(sp)
   43530:	da400115 	stw	r9,4(sp)
   43534:	00453640 	call	45364 <__muldf3>
   43538:	a80f883a 	mov	r7,r21
   4353c:	1009883a 	mov	r4,r2
   43540:	180b883a 	mov	r5,r3
   43544:	000d883a 	mov	r6,zero
   43548:	00453040 	call	45304 <__subdf3>
   4354c:	da400117 	ldw	r9,4(sp)
   43550:	da000217 	ldw	r8,8(sp)
   43554:	8809883a 	mov	r4,r17
   43558:	480d883a 	mov	r6,r9
   4355c:	400f883a 	mov	r7,r8
   43560:	800b883a 	mov	r5,r16
   43564:	1027883a 	mov	r19,r2
   43568:	182b883a 	mov	r21,r3
   4356c:	00453640 	call	45364 <__muldf3>
   43570:	b009883a 	mov	r4,r22
   43574:	900b883a 	mov	r5,r18
   43578:	b80d883a 	mov	r6,r23
   4357c:	e00f883a 	mov	r7,fp
   43580:	1023883a 	mov	r17,r2
   43584:	1821883a 	mov	r16,r3
   43588:	00453640 	call	45364 <__muldf3>
   4358c:	8809883a 	mov	r4,r17
   43590:	800b883a 	mov	r5,r16
   43594:	100d883a 	mov	r6,r2
   43598:	180f883a 	mov	r7,r3
   4359c:	00453040 	call	45304 <__subdf3>
   435a0:	9809883a 	mov	r4,r19
   435a4:	a80b883a 	mov	r5,r21
   435a8:	100d883a 	mov	r6,r2
   435ac:	180f883a 	mov	r7,r3
   435b0:	00453040 	call	45304 <__subdf3>
   435b4:	d9400017 	ldw	r5,0(sp)
   435b8:	a009883a 	mov	r4,r20
   435bc:	100d883a 	mov	r6,r2
   435c0:	180f883a 	mov	r7,r3
   435c4:	00453040 	call	45304 <__subdf3>
   435c8:	dfc00c17 	ldw	ra,48(sp)
   435cc:	df000b17 	ldw	fp,44(sp)
   435d0:	ddc00a17 	ldw	r23,40(sp)
   435d4:	dd800917 	ldw	r22,36(sp)
   435d8:	dd400817 	ldw	r21,32(sp)
   435dc:	dd000717 	ldw	r20,28(sp)
   435e0:	dcc00617 	ldw	r19,24(sp)
   435e4:	dc800517 	ldw	r18,20(sp)
   435e8:	dc400417 	ldw	r17,16(sp)
   435ec:	dc000317 	ldw	r16,12(sp)
   435f0:	dec00d04 	addi	sp,sp,52
   435f4:	f800283a 	ret
   435f8:	008ff9f4 	movhi	r2,16359
   435fc:	0029883a 	mov	r20,zero
   43600:	d8800015 	stw	r2,0(sp)
   43604:	054ff4b4 	movhi	r21,16338
   43608:	003fc406 	br	4351c <__kernel_cos+0x3a8>
   4360c:	0005883a 	mov	r2,zero
   43610:	00cffc34 	movhi	r3,16368
   43614:	003fec06 	br	435c8 <__kernel_cos+0x454>

00043618 <__kernel_rem_pio2>:
   43618:	deff5a04 	addi	sp,sp,-664
   4361c:	da00a617 	ldw	r8,664(sp)
   43620:	00c00174 	movhi	r3,5
   43624:	18c62904 	addi	r3,r3,6308
   43628:	dc409d15 	stw	r17,628(sp)
   4362c:	4205883a 	add	r2,r8,r8
   43630:	1085883a 	add	r2,r2,r2
   43634:	1885883a 	add	r2,r3,r2
   43638:	10800017 	ldw	r2,0(r2)
   4363c:	d9409215 	stw	r5,584(sp)
   43640:	2023883a 	mov	r17,r4
   43644:	01400604 	movi	r5,24
   43648:	313fff44 	addi	r4,r6,-3
   4364c:	dc809e15 	stw	r18,632(sp)
   43650:	dc009c15 	stw	r16,624(sp)
   43654:	dfc0a515 	stw	ra,660(sp)
   43658:	3821883a 	mov	r16,r7
   4365c:	df00a415 	stw	fp,656(sp)
   43660:	ddc0a315 	stw	r23,652(sp)
   43664:	dd80a215 	stw	r22,648(sp)
   43668:	dd40a115 	stw	r21,644(sp)
   4366c:	dd00a015 	stw	r20,640(sp)
   43670:	dcc09f15 	stw	r19,636(sp)
   43674:	3025883a 	mov	r18,r6
   43678:	d8809315 	stw	r2,588(sp)
   4367c:	0045b740 	call	45b74 <__divsi3>
   43680:	823fffc4 	addi	r8,r16,-1
   43684:	d8809515 	stw	r2,596(sp)
   43688:	da008e15 	stw	r8,568(sp)
   4368c:	10033016 	blt	r2,zero,44350 <__kernel_rem_pio2+0xd38>
   43690:	d8809517 	ldw	r2,596(sp)
   43694:	da008e17 	ldw	r8,568(sp)
   43698:	d9009317 	ldw	r4,588(sp)
   4369c:	0086303a 	nor	r3,zero,r2
   436a0:	18c00624 	muli	r3,r3,24
   436a4:	d9409517 	ldw	r5,596(sp)
   436a8:	4105883a 	add	r2,r8,r4
   436ac:	1c87883a 	add	r3,r3,r18
   436b0:	d8c09115 	stw	r3,580(sp)
   436b4:	2a27c83a 	sub	r19,r5,r8
   436b8:	10001016 	blt	r2,zero,436fc <__kernel_rem_pio2+0xe4>
   436bc:	da00a717 	ldw	r8,668(sp)
   436c0:	9ceb883a 	add	r21,r19,r19
   436c4:	ad6b883a 	add	r21,r21,r21
   436c8:	9885883a 	add	r2,r19,r2
   436cc:	dd005004 	addi	r20,sp,320
   436d0:	456b883a 	add	r21,r8,r21
   436d4:	14800044 	addi	r18,r2,1
   436d8:	98015516 	blt	r19,zero,43c30 <__kernel_rem_pio2+0x618>
   436dc:	a9000017 	ldw	r4,0(r21)
   436e0:	00459200 	call	45920 <__floatsidf>
   436e4:	a0800015 	stw	r2,0(r20)
   436e8:	a0c00115 	stw	r3,4(r20)
   436ec:	9cc00044 	addi	r19,r19,1
   436f0:	a5000204 	addi	r20,r20,8
   436f4:	ad400104 	addi	r21,r21,4
   436f8:	9cbff71e 	bne	r19,r18,436d8 <__kernel_rem_pio2+0xc0>
   436fc:	da009317 	ldw	r8,588(sp)
   43700:	40032e16 	blt	r8,zero,443bc <__kernel_rem_pio2+0xda4>
   43704:	da009317 	ldw	r8,588(sp)
   43708:	dc800204 	addi	r18,sp,8
   4370c:	802090fa 	slli	r16,r16,3
   43710:	402a90fa 	slli	r21,r8,3
   43714:	da008e17 	ldw	r8,568(sp)
   43718:	d829883a 	mov	r20,sp
   4371c:	956d883a 	add	r22,r18,r21
   43720:	dd808d15 	stw	r22,564(sp)
   43724:	ddc08e17 	ldw	r23,568(sp)
   43728:	40001f16 	blt	r8,zero,437a8 <__kernel_rem_pio2+0x190>
   4372c:	b82690fa 	slli	r19,r23,3
   43730:	d8805004 	addi	r2,sp,320
   43734:	002b883a 	mov	r21,zero
   43738:	002d883a 	mov	r22,zero
   4373c:	14e7883a 	add	r19,r2,r19
   43740:	0039883a 	mov	fp,zero
   43744:	8d51883a 	add	r8,r17,r21
   43748:	99800017 	ldw	r6,0(r19)
   4374c:	99c00117 	ldw	r7,4(r19)
   43750:	41000017 	ldw	r4,0(r8)
   43754:	41400117 	ldw	r5,4(r8)
   43758:	ad400204 	addi	r21,r21,8
   4375c:	9cfffe04 	addi	r19,r19,-8
   43760:	00453640 	call	45364 <__muldf3>
   43764:	b009883a 	mov	r4,r22
   43768:	e00b883a 	mov	r5,fp
   4376c:	100d883a 	mov	r6,r2
   43770:	180f883a 	mov	r7,r3
   43774:	00452b00 	call	452b0 <__adddf3>
   43778:	102d883a 	mov	r22,r2
   4377c:	1839883a 	mov	fp,r3
   43780:	ac3ff01e 	bne	r21,r16,43744 <__kernel_rem_pio2+0x12c>
   43784:	da008d17 	ldw	r8,564(sp)
   43788:	a5800015 	stw	r22,0(r20)
   4378c:	a7000115 	stw	fp,4(r20)
   43790:	bdc00044 	addi	r23,r23,1
   43794:	9029883a 	mov	r20,r18
   43798:	92000b26 	beq	r18,r8,437c8 <__kernel_rem_pio2+0x1b0>
   4379c:	da008e17 	ldw	r8,568(sp)
   437a0:	94800204 	addi	r18,r18,8
   437a4:	403fe10e 	bge	r8,zero,4372c <__kernel_rem_pio2+0x114>
   437a8:	da008d17 	ldw	r8,564(sp)
   437ac:	002d883a 	mov	r22,zero
   437b0:	0039883a 	mov	fp,zero
   437b4:	a5800015 	stw	r22,0(r20)
   437b8:	a7000115 	stw	fp,4(r20)
   437bc:	bdc00044 	addi	r23,r23,1
   437c0:	9029883a 	mov	r20,r18
   437c4:	923ff51e 	bne	r18,r8,4379c <__kernel_rem_pio2+0x184>
   437c8:	da009317 	ldw	r8,588(sp)
   437cc:	4207883a 	add	r3,r8,r8
   437d0:	40bfffc4 	addi	r2,r8,-1
   437d4:	417fff84 	addi	r5,r8,-2
   437d8:	18c7883a 	add	r3,r3,r3
   437dc:	da007704 	addi	r8,sp,476
   437e0:	da008c15 	stw	r8,560(sp)
   437e4:	40d1883a 	add	r8,r8,r3
   437e8:	da009615 	stw	r8,600(sp)
   437ec:	da009317 	ldw	r8,588(sp)
   437f0:	1085883a 	add	r2,r2,r2
   437f4:	1085883a 	add	r2,r2,r2
   437f8:	da008f15 	stw	r8,572(sp)
   437fc:	401090fa 	slli	r8,r8,3
   43800:	d889883a 	add	r4,sp,r2
   43804:	2945883a 	add	r2,r5,r5
   43808:	21007804 	addi	r4,r4,480
   4380c:	1085883a 	add	r2,r2,r2
   43810:	da009415 	stw	r8,592(sp)
   43814:	d9009715 	stw	r4,604(sp)
   43818:	d8809815 	stw	r2,608(sp)
   4381c:	da009417 	ldw	r8,592(sp)
   43820:	da05883a 	add	r2,sp,r8
   43824:	da008f17 	ldw	r8,572(sp)
   43828:	17000017 	ldw	fp,0(r2)
   4382c:	15400117 	ldw	r21,4(r2)
   43830:	02002b0e 	bge	zero,r8,438e0 <__kernel_rem_pio2+0x2c8>
   43834:	44bfffc4 	addi	r18,r8,-1
   43838:	902490fa 	slli	r18,r18,3
   4383c:	4227883a 	add	r19,r8,r8
   43840:	9ce7883a 	add	r19,r19,r19
   43844:	dd007804 	addi	r20,sp,480
   43848:	dca5883a 	add	r18,sp,r18
   4384c:	a4e7883a 	add	r19,r20,r19
   43850:	000d883a 	mov	r6,zero
   43854:	01cf9c34 	movhi	r7,15984
   43858:	e009883a 	mov	r4,fp
   4385c:	a80b883a 	mov	r5,r21
   43860:	00453640 	call	45364 <__muldf3>
   43864:	180b883a 	mov	r5,r3
   43868:	1009883a 	mov	r4,r2
   4386c:	00459f40 	call	459f4 <__fixdfsi>
   43870:	1009883a 	mov	r4,r2
   43874:	00459200 	call	45920 <__floatsidf>
   43878:	1009883a 	mov	r4,r2
   4387c:	180b883a 	mov	r5,r3
   43880:	000d883a 	mov	r6,zero
   43884:	01d05c34 	movhi	r7,16752
   43888:	102f883a 	mov	r23,r2
   4388c:	182d883a 	mov	r22,r3
   43890:	00453640 	call	45364 <__muldf3>
   43894:	e009883a 	mov	r4,fp
   43898:	a80b883a 	mov	r5,r21
   4389c:	100d883a 	mov	r6,r2
   438a0:	180f883a 	mov	r7,r3
   438a4:	00453040 	call	45304 <__subdf3>
   438a8:	180b883a 	mov	r5,r3
   438ac:	1009883a 	mov	r4,r2
   438b0:	00459f40 	call	459f4 <__fixdfsi>
   438b4:	91800017 	ldw	r6,0(r18)
   438b8:	91c00117 	ldw	r7,4(r18)
   438bc:	a0800015 	stw	r2,0(r20)
   438c0:	b809883a 	mov	r4,r23
   438c4:	b00b883a 	mov	r5,r22
   438c8:	00452b00 	call	452b0 <__adddf3>
   438cc:	a5000104 	addi	r20,r20,4
   438d0:	1039883a 	mov	fp,r2
   438d4:	182b883a 	mov	r21,r3
   438d8:	94bffe04 	addi	r18,r18,-8
   438dc:	a4ffdc1e 	bne	r20,r19,43850 <__kernel_rem_pio2+0x238>
   438e0:	d9809117 	ldw	r6,580(sp)
   438e4:	e009883a 	mov	r4,fp
   438e8:	a80b883a 	mov	r5,r21
   438ec:	004489c0 	call	4489c <scalbn>
   438f0:	000d883a 	mov	r6,zero
   438f4:	01cff034 	movhi	r7,16320
   438f8:	1009883a 	mov	r4,r2
   438fc:	180b883a 	mov	r5,r3
   43900:	1027883a 	mov	r19,r2
   43904:	1825883a 	mov	r18,r3
   43908:	00453640 	call	45364 <__muldf3>
   4390c:	1009883a 	mov	r4,r2
   43910:	180b883a 	mov	r5,r3
   43914:	00446ac0 	call	446ac <floor>
   43918:	1009883a 	mov	r4,r2
   4391c:	180b883a 	mov	r5,r3
   43920:	000d883a 	mov	r6,zero
   43924:	01d00834 	movhi	r7,16416
   43928:	00453640 	call	45364 <__muldf3>
   4392c:	100d883a 	mov	r6,r2
   43930:	180f883a 	mov	r7,r3
   43934:	9809883a 	mov	r4,r19
   43938:	900b883a 	mov	r5,r18
   4393c:	00453040 	call	45304 <__subdf3>
   43940:	180b883a 	mov	r5,r3
   43944:	1009883a 	mov	r4,r2
   43948:	1827883a 	mov	r19,r3
   4394c:	1029883a 	mov	r20,r2
   43950:	00459f40 	call	459f4 <__fixdfsi>
   43954:	1009883a 	mov	r4,r2
   43958:	1025883a 	mov	r18,r2
   4395c:	00459200 	call	45920 <__floatsidf>
   43960:	100d883a 	mov	r6,r2
   43964:	a009883a 	mov	r4,r20
   43968:	980b883a 	mov	r5,r19
   4396c:	180f883a 	mov	r7,r3
   43970:	00453040 	call	45304 <__subdf3>
   43974:	d9809117 	ldw	r6,580(sp)
   43978:	1017883a 	mov	r11,r2
   4397c:	1039883a 	mov	fp,r2
   43980:	182b883a 	mov	r21,r3
   43984:	0181790e 	bge	zero,r6,43f6c <__kernel_rem_pio2+0x954>
   43988:	da008f17 	ldw	r8,572(sp)
   4398c:	d9409117 	ldw	r5,580(sp)
   43990:	01800604 	movi	r6,24
   43994:	40bfffc4 	addi	r2,r8,-1
   43998:	1085883a 	add	r2,r2,r2
   4399c:	1085883a 	add	r2,r2,r2
   439a0:	d889883a 	add	r4,sp,r2
   439a4:	21007804 	addi	r4,r4,480
   439a8:	20800017 	ldw	r2,0(r4)
   439ac:	314dc83a 	sub	r6,r6,r5
   439b0:	d9c09117 	ldw	r7,580(sp)
   439b4:	118bd83a 	sra	r5,r2,r6
   439b8:	04c005c4 	movi	r19,23
   439bc:	99e7c83a 	sub	r19,r19,r7
   439c0:	298c983a 	sll	r6,r5,r6
   439c4:	9165883a 	add	r18,r18,r5
   439c8:	1185c83a 	sub	r2,r2,r6
   439cc:	14e7d83a 	sra	r19,r2,r19
   439d0:	20800015 	stw	r2,0(r4)
   439d4:	04c02c0e 	bge	zero,r19,43a88 <__kernel_rem_pio2+0x470>
   439d8:	da008f17 	ldw	r8,572(sp)
   439dc:	94800044 	addi	r18,r18,1
   439e0:	0201880e 	bge	zero,r8,44004 <__kernel_rem_pio2+0x9ec>
   439e4:	4215883a 	add	r10,r8,r8
   439e8:	5295883a 	add	r10,r10,r10
   439ec:	da007804 	addi	r8,sp,480
   439f0:	4295883a 	add	r10,r8,r10
   439f4:	0029883a 	mov	r20,zero
   439f8:	01404034 	movhi	r5,256
   439fc:	297fffc4 	addi	r5,r5,-1
   43a00:	01004034 	movhi	r4,256
   43a04:	00000606 	br	43a20 <__kernel_rem_pio2+0x408>
   43a08:	208dc83a 	sub	r6,r4,r2
   43a0c:	10000226 	beq	r2,zero,43a18 <__kernel_rem_pio2+0x400>
   43a10:	41800015 	stw	r6,0(r8)
   43a14:	05000044 	movi	r20,1
   43a18:	42000104 	addi	r8,r8,4
   43a1c:	42800726 	beq	r8,r10,43a3c <__kernel_rem_pio2+0x424>
   43a20:	40800017 	ldw	r2,0(r8)
   43a24:	a03ff826 	beq	r20,zero,43a08 <__kernel_rem_pio2+0x3f0>
   43a28:	2885c83a 	sub	r2,r5,r2
   43a2c:	40800015 	stw	r2,0(r8)
   43a30:	42000104 	addi	r8,r8,4
   43a34:	05000044 	movi	r20,1
   43a38:	42bff91e 	bne	r8,r10,43a20 <__kernel_rem_pio2+0x408>
   43a3c:	d9809117 	ldw	r6,580(sp)
   43a40:	01800f0e 	bge	zero,r6,43a80 <__kernel_rem_pio2+0x468>
   43a44:	00800044 	movi	r2,1
   43a48:	30815226 	beq	r6,r2,43f94 <__kernel_rem_pio2+0x97c>
   43a4c:	00800084 	movi	r2,2
   43a50:	30800b1e 	bne	r6,r2,43a80 <__kernel_rem_pio2+0x468>
   43a54:	da008f17 	ldw	r8,572(sp)
   43a58:	01001034 	movhi	r4,64
   43a5c:	213fffc4 	addi	r4,r4,-1
   43a60:	40bfffc4 	addi	r2,r8,-1
   43a64:	1085883a 	add	r2,r2,r2
   43a68:	1085883a 	add	r2,r2,r2
   43a6c:	d885883a 	add	r2,sp,r2
   43a70:	10807804 	addi	r2,r2,480
   43a74:	11400017 	ldw	r5,0(r2)
   43a78:	2908703a 	and	r4,r5,r4
   43a7c:	11000015 	stw	r4,0(r2)
   43a80:	00800084 	movi	r2,2
   43a84:	98806d26 	beq	r19,r2,43c3c <__kernel_rem_pio2+0x624>
   43a88:	e009883a 	mov	r4,fp
   43a8c:	a80b883a 	mov	r5,r21
   43a90:	000d883a 	mov	r6,zero
   43a94:	000f883a 	mov	r7,zero
   43a98:	00457fc0 	call	457fc <__eqdf2>
   43a9c:	1000801e 	bne	r2,zero,43ca0 <__kernel_rem_pio2+0x688>
   43aa0:	da008f17 	ldw	r8,572(sp)
   43aa4:	417fffc4 	addi	r5,r8,-1
   43aa8:	da009317 	ldw	r8,588(sp)
   43aac:	2a000b16 	blt	r5,r8,43adc <__kernel_rem_pio2+0x4c4>
   43ab0:	294d883a 	add	r6,r5,r5
   43ab4:	d9c09617 	ldw	r7,600(sp)
   43ab8:	d8c07804 	addi	r3,sp,480
   43abc:	3185883a 	add	r2,r6,r6
   43ac0:	1885883a 	add	r2,r3,r2
   43ac4:	0007883a 	mov	r3,zero
   43ac8:	11000017 	ldw	r4,0(r2)
   43acc:	10bfff04 	addi	r2,r2,-4
   43ad0:	1906b03a 	or	r3,r3,r4
   43ad4:	11fffc1e 	bne	r2,r7,43ac8 <__kernel_rem_pio2+0x4b0>
   43ad8:	1801601e 	bne	r3,zero,4405c <__kernel_rem_pio2+0xa44>
   43adc:	da009717 	ldw	r8,604(sp)
   43ae0:	40800017 	ldw	r2,0(r8)
   43ae4:	1001541e 	bne	r2,zero,44038 <__kernel_rem_pio2+0xa20>
   43ae8:	da009817 	ldw	r8,608(sp)
   43aec:	d8c07804 	addi	r3,sp,480
   43af0:	1a05883a 	add	r2,r3,r8
   43af4:	00c00044 	movi	r3,1
   43af8:	10bfff04 	addi	r2,r2,-4
   43afc:	11000117 	ldw	r4,4(r2)
   43b00:	18c00044 	addi	r3,r3,1
   43b04:	203ffc26 	beq	r4,zero,43af8 <__kernel_rem_pio2+0x4e0>
   43b08:	da008f17 	ldw	r8,572(sp)
   43b0c:	40800044 	addi	r2,r8,1
   43b10:	40d1883a 	add	r8,r8,r3
   43b14:	da008f15 	stw	r8,572(sp)
   43b18:	40814d16 	blt	r8,r2,44050 <__kernel_rem_pio2+0xa38>
   43b1c:	da008e17 	ldw	r8,568(sp)
   43b20:	d8c09517 	ldw	r3,596(sp)
   43b24:	40ab883a 	add	r21,r8,r2
   43b28:	da008f17 	ldw	r8,572(sp)
   43b2c:	10e9883a 	add	r20,r2,r3
   43b30:	100490fa 	slli	r2,r2,3
   43b34:	401090fa 	slli	r8,r8,3
   43b38:	a529883a 	add	r20,r20,r20
   43b3c:	a529883a 	add	r20,r20,r20
   43b40:	da009415 	stw	r8,592(sp)
   43b44:	da00a717 	ldw	r8,668(sp)
   43b48:	d8a5883a 	add	r18,sp,r2
   43b4c:	d8809417 	ldw	r2,592(sp)
   43b50:	4529883a 	add	r20,r8,r20
   43b54:	a82690fa 	slli	r19,r21,3
   43b58:	a1000017 	ldw	r4,0(r20)
   43b5c:	da000204 	addi	r8,sp,8
   43b60:	4091883a 	add	r8,r8,r2
   43b64:	d8c05004 	addi	r3,sp,320
   43b68:	1ce7883a 	add	r19,r3,r19
   43b6c:	da009015 	stw	r8,576(sp)
   43b70:	dd408d15 	stw	r21,564(sp)
   43b74:	00459200 	call	45920 <__floatsidf>
   43b78:	da008e17 	ldw	r8,568(sp)
   43b7c:	98800015 	stw	r2,0(r19)
   43b80:	98c00115 	stw	r3,4(r19)
   43b84:	40002716 	blt	r8,zero,43c24 <__kernel_rem_pio2+0x60c>
   43b88:	da008d17 	ldw	r8,564(sp)
   43b8c:	d8805004 	addi	r2,sp,320
   43b90:	002d883a 	mov	r22,zero
   43b94:	402a90fa 	slli	r21,r8,3
   43b98:	0039883a 	mov	fp,zero
   43b9c:	002f883a 	mov	r23,zero
   43ba0:	156b883a 	add	r21,r2,r21
   43ba4:	8d91883a 	add	r8,r17,r22
   43ba8:	a9800017 	ldw	r6,0(r21)
   43bac:	a9c00117 	ldw	r7,4(r21)
   43bb0:	41000017 	ldw	r4,0(r8)
   43bb4:	41400117 	ldw	r5,4(r8)
   43bb8:	b5800204 	addi	r22,r22,8
   43bbc:	ad7ffe04 	addi	r21,r21,-8
   43bc0:	00453640 	call	45364 <__muldf3>
   43bc4:	e009883a 	mov	r4,fp
   43bc8:	b80b883a 	mov	r5,r23
   43bcc:	100d883a 	mov	r6,r2
   43bd0:	180f883a 	mov	r7,r3
   43bd4:	00452b00 	call	452b0 <__adddf3>
   43bd8:	1039883a 	mov	fp,r2
   43bdc:	182f883a 	mov	r23,r3
   43be0:	b43ff01e 	bne	r22,r16,43ba4 <__kernel_rem_pio2+0x58c>
   43be4:	da008d17 	ldw	r8,564(sp)
   43be8:	97000015 	stw	fp,0(r18)
   43bec:	95c00115 	stw	r23,4(r18)
   43bf0:	42000044 	addi	r8,r8,1
   43bf4:	da008d15 	stw	r8,564(sp)
   43bf8:	da009017 	ldw	r8,576(sp)
   43bfc:	94800204 	addi	r18,r18,8
   43c00:	a5000104 	addi	r20,r20,4
   43c04:	9cc00204 	addi	r19,r19,8
   43c08:	923f0426 	beq	r18,r8,4381c <__kernel_rem_pio2+0x204>
   43c0c:	a1000017 	ldw	r4,0(r20)
   43c10:	00459200 	call	45920 <__floatsidf>
   43c14:	da008e17 	ldw	r8,568(sp)
   43c18:	98800015 	stw	r2,0(r19)
   43c1c:	98c00115 	stw	r3,4(r19)
   43c20:	403fd90e 	bge	r8,zero,43b88 <__kernel_rem_pio2+0x570>
   43c24:	0039883a 	mov	fp,zero
   43c28:	002f883a 	mov	r23,zero
   43c2c:	003fed06 	br	43be4 <__kernel_rem_pio2+0x5cc>
   43c30:	0005883a 	mov	r2,zero
   43c34:	0007883a 	mov	r3,zero
   43c38:	003eaa06 	br	436e4 <__kernel_rem_pio2+0xcc>
   43c3c:	0009883a 	mov	r4,zero
   43c40:	014ffc34 	movhi	r5,16368
   43c44:	580d883a 	mov	r6,r11
   43c48:	180f883a 	mov	r7,r3
   43c4c:	00453040 	call	45304 <__subdf3>
   43c50:	1039883a 	mov	fp,r2
   43c54:	182b883a 	mov	r21,r3
   43c58:	a03f8b26 	beq	r20,zero,43a88 <__kernel_rem_pio2+0x470>
   43c5c:	d9809117 	ldw	r6,580(sp)
   43c60:	0009883a 	mov	r4,zero
   43c64:	014ffc34 	movhi	r5,16368
   43c68:	004489c0 	call	4489c <scalbn>
   43c6c:	e009883a 	mov	r4,fp
   43c70:	a80b883a 	mov	r5,r21
   43c74:	100d883a 	mov	r6,r2
   43c78:	180f883a 	mov	r7,r3
   43c7c:	00453040 	call	45304 <__subdf3>
   43c80:	1039883a 	mov	fp,r2
   43c84:	182b883a 	mov	r21,r3
   43c88:	e009883a 	mov	r4,fp
   43c8c:	a80b883a 	mov	r5,r21
   43c90:	000d883a 	mov	r6,zero
   43c94:	000f883a 	mov	r7,zero
   43c98:	00457fc0 	call	457fc <__eqdf2>
   43c9c:	103f8026 	beq	r2,zero,43aa0 <__kernel_rem_pio2+0x488>
   43ca0:	da009117 	ldw	r8,580(sp)
   43ca4:	e009883a 	mov	r4,fp
   43ca8:	a80b883a 	mov	r5,r21
   43cac:	020dc83a 	sub	r6,zero,r8
   43cb0:	dc808e15 	stw	r18,568(sp)
   43cb4:	dcc08d15 	stw	r19,564(sp)
   43cb8:	004489c0 	call	4489c <scalbn>
   43cbc:	1009883a 	mov	r4,r2
   43cc0:	180b883a 	mov	r5,r3
   43cc4:	000d883a 	mov	r6,zero
   43cc8:	01d05c34 	movhi	r7,16752
   43ccc:	1021883a 	mov	r16,r2
   43cd0:	1823883a 	mov	r17,r3
   43cd4:	00458bc0 	call	458bc <__gedf2>
   43cd8:	10019f16 	blt	r2,zero,44358 <__kernel_rem_pio2+0xd40>
   43cdc:	000d883a 	mov	r6,zero
   43ce0:	01cf9c34 	movhi	r7,15984
   43ce4:	8009883a 	mov	r4,r16
   43ce8:	880b883a 	mov	r5,r17
   43cec:	00453640 	call	45364 <__muldf3>
   43cf0:	180b883a 	mov	r5,r3
   43cf4:	1009883a 	mov	r4,r2
   43cf8:	00459f40 	call	459f4 <__fixdfsi>
   43cfc:	1009883a 	mov	r4,r2
   43d00:	00459200 	call	45920 <__floatsidf>
   43d04:	da008f17 	ldw	r8,572(sp)
   43d08:	102b883a 	mov	r21,r2
   43d0c:	a809883a 	mov	r4,r21
   43d10:	4205883a 	add	r2,r8,r8
   43d14:	1085883a 	add	r2,r2,r2
   43d18:	180b883a 	mov	r5,r3
   43d1c:	000d883a 	mov	r6,zero
   43d20:	01d05c34 	movhi	r7,16752
   43d24:	d8b9883a 	add	fp,sp,r2
   43d28:	1829883a 	mov	r20,r3
   43d2c:	00453640 	call	45364 <__muldf3>
   43d30:	100d883a 	mov	r6,r2
   43d34:	8009883a 	mov	r4,r16
   43d38:	180f883a 	mov	r7,r3
   43d3c:	880b883a 	mov	r5,r17
   43d40:	00453040 	call	45304 <__subdf3>
   43d44:	da008f17 	ldw	r8,572(sp)
   43d48:	180b883a 	mov	r5,r3
   43d4c:	1009883a 	mov	r4,r2
   43d50:	42000044 	addi	r8,r8,1
   43d54:	da008f15 	stw	r8,572(sp)
   43d58:	00459f40 	call	459f4 <__fixdfsi>
   43d5c:	da008f17 	ldw	r8,572(sp)
   43d60:	e7007804 	addi	fp,fp,480
   43d64:	a809883a 	mov	r4,r21
   43d68:	4207883a 	add	r3,r8,r8
   43d6c:	18c7883a 	add	r3,r3,r3
   43d70:	a00b883a 	mov	r5,r20
   43d74:	e0800015 	stw	r2,0(fp)
   43d78:	d8e1883a 	add	r16,sp,r3
   43d7c:	00459f40 	call	459f4 <__fixdfsi>
   43d80:	d9809117 	ldw	r6,580(sp)
   43d84:	84007804 	addi	r16,r16,480
   43d88:	80800015 	stw	r2,0(r16)
   43d8c:	31800604 	addi	r6,r6,24
   43d90:	d9809115 	stw	r6,580(sp)
   43d94:	d9809117 	ldw	r6,580(sp)
   43d98:	0009883a 	mov	r4,zero
   43d9c:	014ffc34 	movhi	r5,16368
   43da0:	004489c0 	call	4489c <scalbn>
   43da4:	da008f17 	ldw	r8,572(sp)
   43da8:	1021883a 	mov	r16,r2
   43dac:	1823883a 	mov	r17,r3
   43db0:	40004616 	blt	r8,zero,43ecc <__kernel_rem_pio2+0x8b4>
   43db4:	401090fa 	slli	r8,r8,3
   43db8:	d8807804 	addi	r2,sp,480
   43dbc:	da009415 	stw	r8,592(sp)
   43dc0:	da008f17 	ldw	r8,572(sp)
   43dc4:	422b883a 	add	r21,r8,r8
   43dc8:	da009417 	ldw	r8,592(sp)
   43dcc:	ad6b883a 	add	r21,r21,r21
   43dd0:	156b883a 	add	r21,r2,r21
   43dd4:	da29883a 	add	r20,sp,r8
   43dd8:	a9000017 	ldw	r4,0(r21)
   43ddc:	a53ffe04 	addi	r20,r20,-8
   43de0:	ad7fff04 	addi	r21,r21,-4
   43de4:	00459200 	call	45920 <__floatsidf>
   43de8:	800d883a 	mov	r6,r16
   43dec:	880f883a 	mov	r7,r17
   43df0:	1009883a 	mov	r4,r2
   43df4:	180b883a 	mov	r5,r3
   43df8:	00453640 	call	45364 <__muldf3>
   43dfc:	8009883a 	mov	r4,r16
   43e00:	880b883a 	mov	r5,r17
   43e04:	000d883a 	mov	r6,zero
   43e08:	01cf9c34 	movhi	r7,15984
   43e0c:	a0800215 	stw	r2,8(r20)
   43e10:	a0c00315 	stw	r3,12(r20)
   43e14:	00453640 	call	45364 <__muldf3>
   43e18:	da008c17 	ldw	r8,560(sp)
   43e1c:	1021883a 	mov	r16,r2
   43e20:	1823883a 	mov	r17,r3
   43e24:	aa3fec1e 	bne	r21,r8,43dd8 <__kernel_rem_pio2+0x7c0>
   43e28:	da009417 	ldw	r8,592(sp)
   43e2c:	dd409317 	ldw	r21,588(sp)
   43e30:	0021883a 	mov	r16,zero
   43e34:	da23883a 	add	r17,sp,r8
   43e38:	da008f17 	ldw	r8,572(sp)
   43e3c:	05000174 	movhi	r20,5
   43e40:	a5062d04 	addi	r20,r20,6324
   43e44:	45800044 	addi	r22,r8,1
   43e48:	a8007016 	blt	r21,zero,4400c <__kernel_rem_pio2+0x9f4>
   43e4c:	80006f16 	blt	r16,zero,4400c <__kernel_rem_pio2+0x9f4>
   43e50:	0025883a 	mov	r18,zero
   43e54:	0039883a 	mov	fp,zero
   43e58:	002f883a 	mov	r23,zero
   43e5c:	0027883a 	mov	r19,zero
   43e60:	00000106 	br	43e68 <__kernel_rem_pio2+0x850>
   43e64:	84c01116 	blt	r16,r19,43eac <__kernel_rem_pio2+0x894>
   43e68:	a48d883a 	add	r6,r20,r18
   43e6c:	8c8f883a 	add	r7,r17,r18
   43e70:	31000017 	ldw	r4,0(r6)
   43e74:	31400117 	ldw	r5,4(r6)
   43e78:	39800017 	ldw	r6,0(r7)
   43e7c:	39c00117 	ldw	r7,4(r7)
   43e80:	9cc00044 	addi	r19,r19,1
   43e84:	94800204 	addi	r18,r18,8
   43e88:	00453640 	call	45364 <__muldf3>
   43e8c:	e009883a 	mov	r4,fp
   43e90:	b80b883a 	mov	r5,r23
   43e94:	100d883a 	mov	r6,r2
   43e98:	180f883a 	mov	r7,r3
   43e9c:	00452b00 	call	452b0 <__adddf3>
   43ea0:	1039883a 	mov	fp,r2
   43ea4:	182f883a 	mov	r23,r3
   43ea8:	acffee0e 	bge	r21,r19,43e64 <__kernel_rem_pio2+0x84c>
   43eac:	800490fa 	slli	r2,r16,3
   43eb0:	84000044 	addi	r16,r16,1
   43eb4:	8c7ffe04 	addi	r17,r17,-8
   43eb8:	d885883a 	add	r2,sp,r2
   43ebc:	10802804 	addi	r2,r2,160
   43ec0:	17000015 	stw	fp,0(r2)
   43ec4:	15c00115 	stw	r23,4(r2)
   43ec8:	85bfdf1e 	bne	r16,r22,43e48 <__kernel_rem_pio2+0x830>
   43ecc:	da00a617 	ldw	r8,664(sp)
   43ed0:	00800084 	movi	r2,2
   43ed4:	1200a816 	blt	r2,r8,44178 <__kernel_rem_pio2+0xb60>
   43ed8:	02007916 	blt	zero,r8,440c0 <__kernel_rem_pio2+0xaa8>
   43edc:	4000151e 	bne	r8,zero,43f34 <__kernel_rem_pio2+0x91c>
   43ee0:	da008f17 	ldw	r8,572(sp)
   43ee4:	40013216 	blt	r8,zero,443b0 <__kernel_rem_pio2+0xd98>
   43ee8:	402090fa 	slli	r16,r8,3
   43eec:	d8802804 	addi	r2,sp,160
   43ef0:	dc402604 	addi	r17,sp,152
   43ef4:	1421883a 	add	r16,r2,r16
   43ef8:	0007883a 	mov	r3,zero
   43efc:	0005883a 	mov	r2,zero
   43f00:	81800017 	ldw	r6,0(r16)
   43f04:	81c00117 	ldw	r7,4(r16)
   43f08:	1009883a 	mov	r4,r2
   43f0c:	843ffe04 	addi	r16,r16,-8
   43f10:	180b883a 	mov	r5,r3
   43f14:	00452b00 	call	452b0 <__adddf3>
   43f18:	847ff91e 	bne	r16,r17,43f00 <__kernel_rem_pio2+0x8e8>
   43f1c:	da008d17 	ldw	r8,564(sp)
   43f20:	40000126 	beq	r8,zero,43f28 <__kernel_rem_pio2+0x910>
   43f24:	18e0003c 	xorhi	r3,r3,32768
   43f28:	d9409217 	ldw	r5,584(sp)
   43f2c:	28800015 	stw	r2,0(r5)
   43f30:	28c00115 	stw	r3,4(r5)
   43f34:	d8c08e17 	ldw	r3,568(sp)
   43f38:	188001cc 	andi	r2,r3,7
   43f3c:	dfc0a517 	ldw	ra,660(sp)
   43f40:	df00a417 	ldw	fp,656(sp)
   43f44:	ddc0a317 	ldw	r23,652(sp)
   43f48:	dd80a217 	ldw	r22,648(sp)
   43f4c:	dd40a117 	ldw	r21,644(sp)
   43f50:	dd00a017 	ldw	r20,640(sp)
   43f54:	dcc09f17 	ldw	r19,636(sp)
   43f58:	dc809e17 	ldw	r18,632(sp)
   43f5c:	dc409d17 	ldw	r17,628(sp)
   43f60:	dc009c17 	ldw	r16,624(sp)
   43f64:	dec0a604 	addi	sp,sp,664
   43f68:	f800283a 	ret
   43f6c:	d9809117 	ldw	r6,580(sp)
   43f70:	3000141e 	bne	r6,zero,43fc4 <__kernel_rem_pio2+0x9ac>
   43f74:	da008f17 	ldw	r8,572(sp)
   43f78:	40bfffc4 	addi	r2,r8,-1
   43f7c:	1085883a 	add	r2,r2,r2
   43f80:	1085883a 	add	r2,r2,r2
   43f84:	d885883a 	add	r2,sp,r2
   43f88:	14c07817 	ldw	r19,480(r2)
   43f8c:	9827d5fa 	srai	r19,r19,23
   43f90:	003e9006 	br	439d4 <__kernel_rem_pio2+0x3bc>
   43f94:	da008f17 	ldw	r8,572(sp)
   43f98:	01002034 	movhi	r4,128
   43f9c:	213fffc4 	addi	r4,r4,-1
   43fa0:	40bfffc4 	addi	r2,r8,-1
   43fa4:	1085883a 	add	r2,r2,r2
   43fa8:	1085883a 	add	r2,r2,r2
   43fac:	d885883a 	add	r2,sp,r2
   43fb0:	10807804 	addi	r2,r2,480
   43fb4:	11400017 	ldw	r5,0(r2)
   43fb8:	2908703a 	and	r4,r5,r4
   43fbc:	11000015 	stw	r4,0(r2)
   43fc0:	003eaf06 	br	43a80 <__kernel_rem_pio2+0x468>
   43fc4:	180b883a 	mov	r5,r3
   43fc8:	1009883a 	mov	r4,r2
   43fcc:	000d883a 	mov	r6,zero
   43fd0:	01cff834 	movhi	r7,16352
   43fd4:	d8c09a15 	stw	r3,616(sp)
   43fd8:	d8809915 	stw	r2,612(sp)
   43fdc:	00458bc0 	call	458bc <__gedf2>
   43fe0:	d8c09a17 	ldw	r3,616(sp)
   43fe4:	dac09917 	ldw	r11,612(sp)
   43fe8:	1000020e 	bge	r2,zero,43ff4 <__kernel_rem_pio2+0x9dc>
   43fec:	0027883a 	mov	r19,zero
   43ff0:	003ea506 	br	43a88 <__kernel_rem_pio2+0x470>
   43ff4:	da008f17 	ldw	r8,572(sp)
   43ff8:	04c00084 	movi	r19,2
   43ffc:	94800044 	addi	r18,r18,1
   44000:	023e7816 	blt	zero,r8,439e4 <__kernel_rem_pio2+0x3cc>
   44004:	0029883a 	mov	r20,zero
   44008:	003e8c06 	br	43a3c <__kernel_rem_pio2+0x424>
   4400c:	800490fa 	slli	r2,r16,3
   44010:	0039883a 	mov	fp,zero
   44014:	002f883a 	mov	r23,zero
   44018:	d885883a 	add	r2,sp,r2
   4401c:	10802804 	addi	r2,r2,160
   44020:	84000044 	addi	r16,r16,1
   44024:	17000015 	stw	fp,0(r2)
   44028:	15c00115 	stw	r23,4(r2)
   4402c:	8c7ffe04 	addi	r17,r17,-8
   44030:	85bf851e 	bne	r16,r22,43e48 <__kernel_rem_pio2+0x830>
   44034:	003fa506 	br	43ecc <__kernel_rem_pio2+0x8b4>
   44038:	da008f17 	ldw	r8,572(sp)
   4403c:	00c00044 	movi	r3,1
   44040:	40800044 	addi	r2,r8,1
   44044:	40d1883a 	add	r8,r8,r3
   44048:	da008f15 	stw	r8,572(sp)
   4404c:	40beb30e 	bge	r8,r2,43b1c <__kernel_rem_pio2+0x504>
   44050:	401090fa 	slli	r8,r8,3
   44054:	da009415 	stw	r8,592(sp)
   44058:	003df006 	br	4381c <__kernel_rem_pio2+0x204>
   4405c:	318d883a 	add	r6,r6,r6
   44060:	d985883a 	add	r2,sp,r6
   44064:	d9809117 	ldw	r6,580(sp)
   44068:	10807817 	ldw	r2,480(r2)
   4406c:	dc808e15 	stw	r18,568(sp)
   44070:	31bffa04 	addi	r6,r6,-24
   44074:	dcc08d15 	stw	r19,564(sp)
   44078:	d9809115 	stw	r6,580(sp)
   4407c:	1000ca1e 	bne	r2,zero,443a8 <__kernel_rem_pio2+0xd90>
   44080:	28bfffc4 	addi	r2,r5,-1
   44084:	1085883a 	add	r2,r2,r2
   44088:	1085883a 	add	r2,r2,r2
   4408c:	d9c07804 	addi	r7,sp,480
   44090:	3885883a 	add	r2,r7,r2
   44094:	d9408f15 	stw	r5,572(sp)
   44098:	2807883a 	mov	r3,r5
   4409c:	3009883a 	mov	r4,r6
   440a0:	10bfff04 	addi	r2,r2,-4
   440a4:	11400117 	ldw	r5,4(r2)
   440a8:	18ffffc4 	addi	r3,r3,-1
   440ac:	213ffa04 	addi	r4,r4,-24
   440b0:	283ffb26 	beq	r5,zero,440a0 <__kernel_rem_pio2+0xa88>
   440b4:	d8c08f15 	stw	r3,572(sp)
   440b8:	d9009115 	stw	r4,580(sp)
   440bc:	003f3506 	br	43d94 <__kernel_rem_pio2+0x77c>
   440c0:	da008f17 	ldw	r8,572(sp)
   440c4:	4000b516 	blt	r8,zero,4439c <__kernel_rem_pio2+0xd84>
   440c8:	da008f17 	ldw	r8,572(sp)
   440cc:	d8802804 	addi	r2,sp,160
   440d0:	dc402604 	addi	r17,sp,152
   440d4:	402090fa 	slli	r16,r8,3
   440d8:	0007883a 	mov	r3,zero
   440dc:	1421883a 	add	r16,r2,r16
   440e0:	0005883a 	mov	r2,zero
   440e4:	81800017 	ldw	r6,0(r16)
   440e8:	81c00117 	ldw	r7,4(r16)
   440ec:	1009883a 	mov	r4,r2
   440f0:	843ffe04 	addi	r16,r16,-8
   440f4:	180b883a 	mov	r5,r3
   440f8:	00452b00 	call	452b0 <__adddf3>
   440fc:	847ff91e 	bne	r16,r17,440e4 <__kernel_rem_pio2+0xacc>
   44100:	da008d17 	ldw	r8,564(sp)
   44104:	40009026 	beq	r8,zero,44348 <__kernel_rem_pio2+0xd30>
   44108:	19a0003c 	xorhi	r6,r3,32768
   4410c:	d9c09217 	ldw	r7,584(sp)
   44110:	d9002817 	ldw	r4,160(sp)
   44114:	d9402917 	ldw	r5,164(sp)
   44118:	39800115 	stw	r6,4(r7)
   4411c:	38800015 	stw	r2,0(r7)
   44120:	100d883a 	mov	r6,r2
   44124:	180f883a 	mov	r7,r3
   44128:	00453040 	call	45304 <__subdf3>
   4412c:	da008f17 	ldw	r8,572(sp)
   44130:	02000a0e 	bge	zero,r8,4415c <__kernel_rem_pio2+0xb44>
   44134:	402290fa 	slli	r17,r8,3
   44138:	dc002a04 	addi	r16,sp,168
   4413c:	8463883a 	add	r17,r16,r17
   44140:	81800017 	ldw	r6,0(r16)
   44144:	81c00117 	ldw	r7,4(r16)
   44148:	1009883a 	mov	r4,r2
   4414c:	84000204 	addi	r16,r16,8
   44150:	180b883a 	mov	r5,r3
   44154:	00452b00 	call	452b0 <__adddf3>
   44158:	847ff91e 	bne	r16,r17,44140 <__kernel_rem_pio2+0xb28>
   4415c:	da008d17 	ldw	r8,564(sp)
   44160:	40000126 	beq	r8,zero,44168 <__kernel_rem_pio2+0xb50>
   44164:	18e0003c 	xorhi	r3,r3,32768
   44168:	d9409217 	ldw	r5,584(sp)
   4416c:	28800215 	stw	r2,8(r5)
   44170:	28c00315 	stw	r3,12(r5)
   44174:	003f6f06 	br	43f34 <__kernel_rem_pio2+0x91c>
   44178:	da00a617 	ldw	r8,664(sp)
   4417c:	008000c4 	movi	r2,3
   44180:	40bf6c1e 	bne	r8,r2,43f34 <__kernel_rem_pio2+0x91c>
   44184:	da008f17 	ldw	r8,572(sp)
   44188:	0200810e 	bge	zero,r8,44390 <__kernel_rem_pio2+0xd78>
   4418c:	da008f17 	ldw	r8,572(sp)
   44190:	dd802804 	addi	r22,sp,160
   44194:	db402604 	addi	r13,sp,152
   44198:	443fffc4 	addi	r16,r8,-1
   4419c:	402290fa 	slli	r17,r8,3
   441a0:	802090fa 	slli	r16,r16,3
   441a4:	b463883a 	add	r17,r22,r17
   441a8:	b421883a 	add	r16,r22,r16
   441ac:	882b883a 	mov	r21,r17
   441b0:	8029883a 	mov	r20,r16
   441b4:	8811883a 	mov	r8,r17
   441b8:	8013883a 	mov	r9,r16
   441bc:	a4400017 	ldw	r17,0(r20)
   441c0:	a4000117 	ldw	r16,4(r20)
   441c4:	af000017 	ldw	fp,0(r21)
   441c8:	adc00117 	ldw	r23,4(r21)
   441cc:	8809883a 	mov	r4,r17
   441d0:	800b883a 	mov	r5,r16
   441d4:	e00d883a 	mov	r6,fp
   441d8:	b80f883a 	mov	r7,r23
   441dc:	da009b15 	stw	r8,620(sp)
   441e0:	da409a15 	stw	r9,616(sp)
   441e4:	db409915 	stw	r13,612(sp)
   441e8:	00452b00 	call	452b0 <__adddf3>
   441ec:	8809883a 	mov	r4,r17
   441f0:	800b883a 	mov	r5,r16
   441f4:	100d883a 	mov	r6,r2
   441f8:	180f883a 	mov	r7,r3
   441fc:	1027883a 	mov	r19,r2
   44200:	1825883a 	mov	r18,r3
   44204:	00453040 	call	45304 <__subdf3>
   44208:	e009883a 	mov	r4,fp
   4420c:	b80b883a 	mov	r5,r23
   44210:	100d883a 	mov	r6,r2
   44214:	180f883a 	mov	r7,r3
   44218:	00452b00 	call	452b0 <__adddf3>
   4421c:	db409917 	ldw	r13,612(sp)
   44220:	a8800015 	stw	r2,0(r21)
   44224:	a8c00115 	stw	r3,4(r21)
   44228:	a4c00015 	stw	r19,0(r20)
   4422c:	a4800115 	stw	r18,4(r20)
   44230:	a53ffe04 	addi	r20,r20,-8
   44234:	ad7ffe04 	addi	r21,r21,-8
   44238:	da009b17 	ldw	r8,620(sp)
   4423c:	da409a17 	ldw	r9,616(sp)
   44240:	a37fde1e 	bne	r20,r13,441bc <__kernel_rem_pio2+0xba4>
   44244:	4023883a 	mov	r17,r8
   44248:	da008f17 	ldw	r8,572(sp)
   4424c:	00800044 	movi	r2,1
   44250:	4821883a 	mov	r16,r9
   44254:	12004e0e 	bge	r2,r8,44390 <__kernel_rem_pio2+0xd78>
   44258:	8829883a 	mov	r20,r17
   4425c:	8811883a 	mov	r8,r17
   44260:	84400017 	ldw	r17,0(r16)
   44264:	87000117 	ldw	fp,4(r16)
   44268:	a5c00017 	ldw	r23,0(r20)
   4426c:	a5400117 	ldw	r21,4(r20)
   44270:	8809883a 	mov	r4,r17
   44274:	e00b883a 	mov	r5,fp
   44278:	b80d883a 	mov	r6,r23
   4427c:	a80f883a 	mov	r7,r21
   44280:	da009b15 	stw	r8,620(sp)
   44284:	00452b00 	call	452b0 <__adddf3>
   44288:	8809883a 	mov	r4,r17
   4428c:	e00b883a 	mov	r5,fp
   44290:	100d883a 	mov	r6,r2
   44294:	180f883a 	mov	r7,r3
   44298:	1027883a 	mov	r19,r2
   4429c:	1825883a 	mov	r18,r3
   442a0:	00453040 	call	45304 <__subdf3>
   442a4:	b809883a 	mov	r4,r23
   442a8:	a80b883a 	mov	r5,r21
   442ac:	100d883a 	mov	r6,r2
   442b0:	180f883a 	mov	r7,r3
   442b4:	00452b00 	call	452b0 <__adddf3>
   442b8:	a0800015 	stw	r2,0(r20)
   442bc:	a0c00115 	stw	r3,4(r20)
   442c0:	84c00015 	stw	r19,0(r16)
   442c4:	84800115 	stw	r18,4(r16)
   442c8:	843ffe04 	addi	r16,r16,-8
   442cc:	a53ffe04 	addi	r20,r20,-8
   442d0:	da009b17 	ldw	r8,620(sp)
   442d4:	b43fe21e 	bne	r22,r16,44260 <__kernel_rem_pio2+0xc48>
   442d8:	4023883a 	mov	r17,r8
   442dc:	b5800204 	addi	r22,r22,8
   442e0:	0005883a 	mov	r2,zero
   442e4:	0007883a 	mov	r3,zero
   442e8:	89800017 	ldw	r6,0(r17)
   442ec:	89c00117 	ldw	r7,4(r17)
   442f0:	1009883a 	mov	r4,r2
   442f4:	8c7ffe04 	addi	r17,r17,-8
   442f8:	180b883a 	mov	r5,r3
   442fc:	00452b00 	call	452b0 <__adddf3>
   44300:	8dbff91e 	bne	r17,r22,442e8 <__kernel_rem_pio2+0xcd0>
   44304:	da008d17 	ldw	r8,564(sp)
   44308:	40001d26 	beq	r8,zero,44380 <__kernel_rem_pio2+0xd68>
   4430c:	d9802917 	ldw	r6,164(sp)
   44310:	d9002b17 	ldw	r4,172(sp)
   44314:	d9402a17 	ldw	r5,168(sp)
   44318:	31a0003c 	xorhi	r6,r6,32768
   4431c:	2120003c 	xorhi	r4,r4,32768
   44320:	18e0003c 	xorhi	r3,r3,32768
   44324:	d9c02817 	ldw	r7,160(sp)
   44328:	da009217 	ldw	r8,584(sp)
   4432c:	41c00015 	stw	r7,0(r8)
   44330:	41800115 	stw	r6,4(r8)
   44334:	41400215 	stw	r5,8(r8)
   44338:	41000315 	stw	r4,12(r8)
   4433c:	40800415 	stw	r2,16(r8)
   44340:	40c00515 	stw	r3,20(r8)
   44344:	003efb06 	br	43f34 <__kernel_rem_pio2+0x91c>
   44348:	180d883a 	mov	r6,r3
   4434c:	003f6f06 	br	4410c <__kernel_rem_pio2+0xaf4>
   44350:	d8009515 	stw	zero,596(sp)
   44354:	003cce06 	br	43690 <__kernel_rem_pio2+0x78>
   44358:	da008f17 	ldw	r8,572(sp)
   4435c:	8009883a 	mov	r4,r16
   44360:	880b883a 	mov	r5,r17
   44364:	4205883a 	add	r2,r8,r8
   44368:	1085883a 	add	r2,r2,r2
   4436c:	d885883a 	add	r2,sp,r2
   44370:	14007804 	addi	r16,r2,480
   44374:	00459f40 	call	459f4 <__fixdfsi>
   44378:	80800015 	stw	r2,0(r16)
   4437c:	003e8506 	br	43d94 <__kernel_rem_pio2+0x77c>
   44380:	d9802917 	ldw	r6,164(sp)
   44384:	d9402a17 	ldw	r5,168(sp)
   44388:	d9002b17 	ldw	r4,172(sp)
   4438c:	003fe506 	br	44324 <__kernel_rem_pio2+0xd0c>
   44390:	0005883a 	mov	r2,zero
   44394:	0007883a 	mov	r3,zero
   44398:	003fda06 	br	44304 <__kernel_rem_pio2+0xcec>
   4439c:	0005883a 	mov	r2,zero
   443a0:	0007883a 	mov	r3,zero
   443a4:	003f5606 	br	44100 <__kernel_rem_pio2+0xae8>
   443a8:	d9408f15 	stw	r5,572(sp)
   443ac:	003e7906 	br	43d94 <__kernel_rem_pio2+0x77c>
   443b0:	0005883a 	mov	r2,zero
   443b4:	0007883a 	mov	r3,zero
   443b8:	003ed806 	br	43f1c <__kernel_rem_pio2+0x904>
   443bc:	802090fa 	slli	r16,r16,3
   443c0:	003d0106 	br	437c8 <__kernel_rem_pio2+0x1b0>

000443c4 <__kernel_sin>:
   443c4:	defff404 	addi	sp,sp,-48
   443c8:	00a00034 	movhi	r2,32768
   443cc:	10bfffc4 	addi	r2,r2,-1
   443d0:	ddc00915 	stw	r23,36(sp)
   443d4:	dd800815 	stw	r22,32(sp)
   443d8:	dc400315 	stw	r17,12(sp)
   443dc:	dc000215 	stw	r16,8(sp)
   443e0:	dfc00b15 	stw	ra,44(sp)
   443e4:	df000a15 	stw	fp,40(sp)
   443e8:	dd400715 	stw	r21,28(sp)
   443ec:	dd000615 	stw	r20,24(sp)
   443f0:	dcc00515 	stw	r19,20(sp)
   443f4:	dc800415 	stw	r18,16(sp)
   443f8:	2884703a 	and	r2,r5,r2
   443fc:	00cf9034 	movhi	r3,15936
   44400:	18ffffc4 	addi	r3,r3,-1
   44404:	2821883a 	mov	r16,r5
   44408:	2023883a 	mov	r17,r4
   4440c:	302f883a 	mov	r23,r6
   44410:	382d883a 	mov	r22,r7
   44414:	18800216 	blt	r3,r2,44420 <__kernel_sin+0x5c>
   44418:	00459f40 	call	459f4 <__fixdfsi>
   4441c:	10007726 	beq	r2,zero,445fc <__kernel_sin+0x238>
   44420:	8809883a 	mov	r4,r17
   44424:	800b883a 	mov	r5,r16
   44428:	880d883a 	mov	r6,r17
   4442c:	800f883a 	mov	r7,r16
   44430:	00453640 	call	45364 <__muldf3>
   44434:	1009883a 	mov	r4,r2
   44438:	180b883a 	mov	r5,r3
   4443c:	880d883a 	mov	r6,r17
   44440:	800f883a 	mov	r7,r16
   44444:	1027883a 	mov	r19,r2
   44448:	1825883a 	mov	r18,r3
   4444c:	00453640 	call	45364 <__muldf3>
   44450:	9809883a 	mov	r4,r19
   44454:	900b883a 	mov	r5,r18
   44458:	0196b434 	movhi	r6,23248
   4445c:	31b55f04 	addi	r6,r6,-10884
   44460:	01cf79b4 	movhi	r7,15846
   44464:	39f64e84 	addi	r7,r7,-9926
   44468:	102b883a 	mov	r21,r2
   4446c:	1829883a 	mov	r20,r3
   44470:	00453640 	call	45364 <__muldf3>
   44474:	1009883a 	mov	r4,r2
   44478:	180b883a 	mov	r5,r3
   4447c:	01a28b34 	movhi	r6,35372
   44480:	31a73ac4 	addi	r6,r6,-25365
   44484:	01cf96f4 	movhi	r7,15963
   44488:	39f97984 	addi	r7,r7,-6682
   4448c:	00453040 	call	45304 <__subdf3>
   44490:	1009883a 	mov	r4,r2
   44494:	180b883a 	mov	r5,r3
   44498:	980d883a 	mov	r6,r19
   4449c:	900f883a 	mov	r7,r18
   444a0:	00453640 	call	45364 <__muldf3>
   444a4:	1009883a 	mov	r4,r2
   444a8:	180b883a 	mov	r5,r3
   444ac:	0195ecb4 	movhi	r6,22450
   444b0:	31bf9f44 	addi	r6,r6,-387
   444b4:	01cfb1f4 	movhi	r7,16071
   444b8:	39c778c4 	addi	r7,r7,7651
   444bc:	00452b00 	call	452b0 <__adddf3>
   444c0:	1009883a 	mov	r4,r2
   444c4:	180b883a 	mov	r5,r3
   444c8:	980d883a 	mov	r6,r19
   444cc:	900f883a 	mov	r7,r18
   444d0:	00453640 	call	45364 <__muldf3>
   444d4:	1009883a 	mov	r4,r2
   444d8:	180b883a 	mov	r5,r3
   444dc:	01867074 	movhi	r6,6593
   444e0:	31987544 	addi	r6,r6,25045
   444e4:	01cfcab4 	movhi	r7,16170
   444e8:	39c06804 	addi	r7,r7,416
   444ec:	00453040 	call	45304 <__subdf3>
   444f0:	1009883a 	mov	r4,r2
   444f4:	180b883a 	mov	r5,r3
   444f8:	980d883a 	mov	r6,r19
   444fc:	900f883a 	mov	r7,r18
   44500:	00453640 	call	45364 <__muldf3>
   44504:	1009883a 	mov	r4,r2
   44508:	180b883a 	mov	r5,r3
   4450c:	01844474 	movhi	r6,4369
   44510:	31be2984 	addi	r6,r6,-1882
   44514:	01cfe074 	movhi	r7,16257
   44518:	39c44444 	addi	r7,r7,4369
   4451c:	00452b00 	call	452b0 <__adddf3>
   44520:	d9000c17 	ldw	r4,48(sp)
   44524:	1839883a 	mov	fp,r3
   44528:	20004226 	beq	r4,zero,44634 <__kernel_sin+0x270>
   4452c:	b809883a 	mov	r4,r23
   44530:	b00b883a 	mov	r5,r22
   44534:	000d883a 	mov	r6,zero
   44538:	01cff834 	movhi	r7,16352
   4453c:	d8800015 	stw	r2,0(sp)
   44540:	00453640 	call	45364 <__muldf3>
   44544:	da000017 	ldw	r8,0(sp)
   44548:	a809883a 	mov	r4,r21
   4454c:	a00b883a 	mov	r5,r20
   44550:	400d883a 	mov	r6,r8
   44554:	e00f883a 	mov	r7,fp
   44558:	d8c00115 	stw	r3,4(sp)
   4455c:	d8800015 	stw	r2,0(sp)
   44560:	00453640 	call	45364 <__muldf3>
   44564:	da800017 	ldw	r10,0(sp)
   44568:	da400117 	ldw	r9,4(sp)
   4456c:	100d883a 	mov	r6,r2
   44570:	5009883a 	mov	r4,r10
   44574:	480b883a 	mov	r5,r9
   44578:	180f883a 	mov	r7,r3
   4457c:	00453040 	call	45304 <__subdf3>
   44580:	980d883a 	mov	r6,r19
   44584:	900f883a 	mov	r7,r18
   44588:	1009883a 	mov	r4,r2
   4458c:	180b883a 	mov	r5,r3
   44590:	00453640 	call	45364 <__muldf3>
   44594:	1009883a 	mov	r4,r2
   44598:	180b883a 	mov	r5,r3
   4459c:	b80d883a 	mov	r6,r23
   445a0:	b00f883a 	mov	r7,r22
   445a4:	00453040 	call	45304 <__subdf3>
   445a8:	a809883a 	mov	r4,r21
   445ac:	a00b883a 	mov	r5,r20
   445b0:	01955574 	movhi	r6,21845
   445b4:	31955244 	addi	r6,r6,21833
   445b8:	01cff174 	movhi	r7,16325
   445bc:	39d55544 	addi	r7,r7,21845
   445c0:	1027883a 	mov	r19,r2
   445c4:	1825883a 	mov	r18,r3
   445c8:	00453640 	call	45364 <__muldf3>
   445cc:	9809883a 	mov	r4,r19
   445d0:	900b883a 	mov	r5,r18
   445d4:	100d883a 	mov	r6,r2
   445d8:	180f883a 	mov	r7,r3
   445dc:	00452b00 	call	452b0 <__adddf3>
   445e0:	8809883a 	mov	r4,r17
   445e4:	800b883a 	mov	r5,r16
   445e8:	100d883a 	mov	r6,r2
   445ec:	180f883a 	mov	r7,r3
   445f0:	00453040 	call	45304 <__subdf3>
   445f4:	1023883a 	mov	r17,r2
   445f8:	1821883a 	mov	r16,r3
   445fc:	8805883a 	mov	r2,r17
   44600:	8007883a 	mov	r3,r16
   44604:	dfc00b17 	ldw	ra,44(sp)
   44608:	df000a17 	ldw	fp,40(sp)
   4460c:	ddc00917 	ldw	r23,36(sp)
   44610:	dd800817 	ldw	r22,32(sp)
   44614:	dd400717 	ldw	r21,28(sp)
   44618:	dd000617 	ldw	r20,24(sp)
   4461c:	dcc00517 	ldw	r19,20(sp)
   44620:	dc800417 	ldw	r18,16(sp)
   44624:	dc400317 	ldw	r17,12(sp)
   44628:	dc000217 	ldw	r16,8(sp)
   4462c:	dec00c04 	addi	sp,sp,48
   44630:	f800283a 	ret
   44634:	100d883a 	mov	r6,r2
   44638:	180f883a 	mov	r7,r3
   4463c:	9809883a 	mov	r4,r19
   44640:	900b883a 	mov	r5,r18
   44644:	00453640 	call	45364 <__muldf3>
   44648:	1009883a 	mov	r4,r2
   4464c:	180b883a 	mov	r5,r3
   44650:	01955574 	movhi	r6,21845
   44654:	31955244 	addi	r6,r6,21833
   44658:	01cff174 	movhi	r7,16325
   4465c:	39d55544 	addi	r7,r7,21845
   44660:	00453040 	call	45304 <__subdf3>
   44664:	1009883a 	mov	r4,r2
   44668:	180b883a 	mov	r5,r3
   4466c:	a80d883a 	mov	r6,r21
   44670:	a00f883a 	mov	r7,r20
   44674:	00453640 	call	45364 <__muldf3>
   44678:	8809883a 	mov	r4,r17
   4467c:	800b883a 	mov	r5,r16
   44680:	100d883a 	mov	r6,r2
   44684:	180f883a 	mov	r7,r3
   44688:	00452b00 	call	452b0 <__adddf3>
   4468c:	1023883a 	mov	r17,r2
   44690:	1821883a 	mov	r16,r3
   44694:	003fd906 	br	445fc <__kernel_sin+0x238>

00044698 <fabs>:
   44698:	00e00034 	movhi	r3,32768
   4469c:	18ffffc4 	addi	r3,r3,-1
   446a0:	2005883a 	mov	r2,r4
   446a4:	28c6703a 	and	r3,r5,r3
   446a8:	f800283a 	ret

000446ac <floor>:
   446ac:	defff904 	addi	sp,sp,-28
   446b0:	dcc00315 	stw	r19,12(sp)
   446b4:	2827d53a 	srai	r19,r5,20
   446b8:	dd000415 	stw	r20,16(sp)
   446bc:	dc800215 	stw	r18,8(sp)
   446c0:	9cc1ffcc 	andi	r19,r19,2047
   446c4:	dc400115 	stw	r17,4(sp)
   446c8:	dc000015 	stw	r16,0(sp)
   446cc:	dfc00615 	stw	ra,24(sp)
   446d0:	dd400515 	stw	r21,20(sp)
   446d4:	9c7f0044 	addi	r17,r19,-1023
   446d8:	018004c4 	movi	r6,19
   446dc:	2821883a 	mov	r16,r5
   446e0:	2005883a 	mov	r2,r4
   446e4:	2807883a 	mov	r3,r5
   446e8:	2829883a 	mov	r20,r5
   446ec:	2025883a 	mov	r18,r4
   446f0:	34402116 	blt	r6,r17,44778 <floor+0xcc>
   446f4:	88003f16 	blt	r17,zero,447f4 <floor+0x148>
   446f8:	04c00434 	movhi	r19,16
   446fc:	9cffffc4 	addi	r19,r19,-1
   44700:	9c67d83a 	sra	r19,r19,r17
   44704:	994c703a 	and	r6,r19,r5
   44708:	310cb03a 	or	r6,r6,r4
   4470c:	30001126 	beq	r6,zero,44754 <floor+0xa8>
   44710:	01a20034 	movhi	r6,34816
   44714:	319d6704 	addi	r6,r6,30108
   44718:	01df8e34 	movhi	r7,32312
   4471c:	39f90f04 	addi	r7,r7,-7108
   44720:	00452b00 	call	452b0 <__adddf3>
   44724:	1009883a 	mov	r4,r2
   44728:	180b883a 	mov	r5,r3
   4472c:	000d883a 	mov	r6,zero
   44730:	000f883a 	mov	r7,zero
   44734:	00458580 	call	45858 <__gtdf2>
   44738:	0080040e 	bge	zero,r2,4474c <floor+0xa0>
   4473c:	80003c16 	blt	r16,zero,44830 <floor+0x184>
   44740:	04e0303a 	nor	r16,zero,r19
   44744:	a420703a 	and	r16,r20,r16
   44748:	0025883a 	mov	r18,zero
   4474c:	9005883a 	mov	r2,r18
   44750:	8007883a 	mov	r3,r16
   44754:	dfc00617 	ldw	ra,24(sp)
   44758:	dd400517 	ldw	r21,20(sp)
   4475c:	dd000417 	ldw	r20,16(sp)
   44760:	dcc00317 	ldw	r19,12(sp)
   44764:	dc800217 	ldw	r18,8(sp)
   44768:	dc400117 	ldw	r17,4(sp)
   4476c:	dc000017 	ldw	r16,0(sp)
   44770:	dec00704 	addi	sp,sp,28
   44774:	f800283a 	ret
   44778:	01800cc4 	movi	r6,51
   4477c:	3440060e 	bge	r6,r17,44798 <floor+0xec>
   44780:	01810004 	movi	r6,1024
   44784:	89bff31e 	bne	r17,r6,44754 <floor+0xa8>
   44788:	200d883a 	mov	r6,r4
   4478c:	280f883a 	mov	r7,r5
   44790:	00452b00 	call	452b0 <__adddf3>
   44794:	003fef06 	br	44754 <floor+0xa8>
   44798:	01bfffc4 	movi	r6,-1
   4479c:	9d7efb44 	addi	r21,r19,-1043
   447a0:	356ad83a 	srl	r21,r6,r21
   447a4:	a90c703a 	and	r6,r21,r4
   447a8:	303fea26 	beq	r6,zero,44754 <floor+0xa8>
   447ac:	01a20034 	movhi	r6,34816
   447b0:	319d6704 	addi	r6,r6,30108
   447b4:	01df8e34 	movhi	r7,32312
   447b8:	39f90f04 	addi	r7,r7,-7108
   447bc:	00452b00 	call	452b0 <__adddf3>
   447c0:	1009883a 	mov	r4,r2
   447c4:	180b883a 	mov	r5,r3
   447c8:	000d883a 	mov	r6,zero
   447cc:	000f883a 	mov	r7,zero
   447d0:	00458580 	call	45858 <__gtdf2>
   447d4:	00bfdd0e 	bge	zero,r2,4474c <floor+0xa0>
   447d8:	80001916 	blt	r16,zero,44840 <floor+0x194>
   447dc:	056a303a 	nor	r21,zero,r21
   447e0:	9564703a 	and	r18,r18,r21
   447e4:	a021883a 	mov	r16,r20
   447e8:	9005883a 	mov	r2,r18
   447ec:	8007883a 	mov	r3,r16
   447f0:	003fd806 	br	44754 <floor+0xa8>
   447f4:	01a20034 	movhi	r6,34816
   447f8:	319d6704 	addi	r6,r6,30108
   447fc:	01df8e34 	movhi	r7,32312
   44800:	39f90f04 	addi	r7,r7,-7108
   44804:	00452b00 	call	452b0 <__adddf3>
   44808:	1009883a 	mov	r4,r2
   4480c:	180b883a 	mov	r5,r3
   44810:	000d883a 	mov	r6,zero
   44814:	000f883a 	mov	r7,zero
   44818:	00458580 	call	45858 <__gtdf2>
   4481c:	00bfcb0e 	bge	zero,r2,4474c <floor+0xa0>
   44820:	80001216 	blt	r16,zero,4486c <floor+0x1c0>
   44824:	0025883a 	mov	r18,zero
   44828:	0021883a 	mov	r16,zero
   4482c:	003fc706 	br	4474c <floor+0xa0>
   44830:	00800434 	movhi	r2,16
   44834:	1463d83a 	sra	r17,r2,r17
   44838:	8469883a 	add	r20,r16,r17
   4483c:	003fc006 	br	44740 <floor+0x94>
   44840:	00800504 	movi	r2,20
   44844:	88801326 	beq	r17,r2,44894 <floor+0x1e8>
   44848:	00810cc4 	movi	r2,1075
   4484c:	14e7c83a 	sub	r19,r2,r19
   44850:	00800044 	movi	r2,1
   44854:	14c4983a 	sll	r2,r2,r19
   44858:	1485883a 	add	r2,r2,r18
   4485c:	14800b2e 	bgeu	r2,r18,4488c <floor+0x1e0>
   44860:	85000044 	addi	r20,r16,1
   44864:	1025883a 	mov	r18,r2
   44868:	003fdc06 	br	447dc <floor+0x130>
   4486c:	00a00034 	movhi	r2,32768
   44870:	10bfffc4 	addi	r2,r2,-1
   44874:	8084703a 	and	r2,r16,r2
   44878:	1484b03a 	or	r2,r2,r18
   4487c:	103fb326 	beq	r2,zero,4474c <floor+0xa0>
   44880:	0025883a 	mov	r18,zero
   44884:	042ffc34 	movhi	r16,49136
   44888:	003fb006 	br	4474c <floor+0xa0>
   4488c:	1025883a 	mov	r18,r2
   44890:	003fd206 	br	447dc <floor+0x130>
   44894:	85000044 	addi	r20,r16,1
   44898:	003fd006 	br	447dc <floor+0x130>

0004489c <scalbn>:
   4489c:	29dffc2c 	andhi	r7,r5,32752
   448a0:	380fd53a 	srai	r7,r7,20
   448a4:	defffe04 	addi	sp,sp,-8
   448a8:	dc000015 	stw	r16,0(sp)
   448ac:	dfc00115 	stw	ra,4(sp)
   448b0:	2807883a 	mov	r3,r5
   448b4:	2005883a 	mov	r2,r4
   448b8:	3021883a 	mov	r16,r6
   448bc:	3800241e 	bne	r7,zero,44950 <scalbn+0xb4>
   448c0:	01a00034 	movhi	r6,32768
   448c4:	31bfffc4 	addi	r6,r6,-1
   448c8:	298c703a 	and	r6,r5,r6
   448cc:	310cb03a 	or	r6,r6,r4
   448d0:	30001b26 	beq	r6,zero,44940 <scalbn+0xa4>
   448d4:	000d883a 	mov	r6,zero
   448d8:	01d0d434 	movhi	r7,17232
   448dc:	00453640 	call	45364 <__muldf3>
   448e0:	013ffff4 	movhi	r4,65535
   448e4:	210f2c04 	addi	r4,r4,15536
   448e8:	81003416 	blt	r16,r4,449bc <scalbn+0x120>
   448ec:	19dffc2c 	andhi	r7,r3,32752
   448f0:	380fd53a 	srai	r7,r7,20
   448f4:	0101ff84 	movi	r4,2046
   448f8:	180d883a 	mov	r6,r3
   448fc:	39fff284 	addi	r7,r7,-54
   44900:	3c0f883a 	add	r7,r7,r16
   44904:	21c0180e 	bge	r4,r7,44968 <scalbn+0xcc>
   44908:	100d883a 	mov	r6,r2
   4490c:	180f883a 	mov	r7,r3
   44910:	01220034 	movhi	r4,34816
   44914:	211d6704 	addi	r4,r4,30108
   44918:	015f8e34 	movhi	r5,32312
   4491c:	29790f04 	addi	r5,r5,-7108
   44920:	0044a300 	call	44a30 <copysign>
   44924:	1009883a 	mov	r4,r2
   44928:	180b883a 	mov	r5,r3
   4492c:	01a20034 	movhi	r6,34816
   44930:	319d6704 	addi	r6,r6,30108
   44934:	01df8e34 	movhi	r7,32312
   44938:	39f90f04 	addi	r7,r7,-7108
   4493c:	00453640 	call	45364 <__muldf3>
   44940:	dfc00117 	ldw	ra,4(sp)
   44944:	dc000017 	ldw	r16,0(sp)
   44948:	dec00204 	addi	sp,sp,8
   4494c:	f800283a 	ret
   44950:	0181ffc4 	movi	r6,2047
   44954:	39802426 	beq	r7,r6,449e8 <scalbn+0x14c>
   44958:	3c0f883a 	add	r7,r7,r16
   4495c:	0101ff84 	movi	r4,2046
   44960:	280d883a 	mov	r6,r5
   44964:	21ffe816 	blt	r4,r7,44908 <scalbn+0x6c>
   44968:	01c0090e 	bge	zero,r7,44990 <scalbn+0xf4>
   4496c:	380e953a 	slli	r7,r7,20
   44970:	00e00434 	movhi	r3,32784
   44974:	18ffffc4 	addi	r3,r3,-1
   44978:	30cc703a 	and	r6,r6,r3
   4497c:	3986b03a 	or	r3,r7,r6
   44980:	dfc00117 	ldw	ra,4(sp)
   44984:	dc000017 	ldw	r16,0(sp)
   44988:	dec00204 	addi	sp,sp,8
   4498c:	f800283a 	ret
   44990:	013ff2c4 	movi	r4,-53
   44994:	39001b0e 	bge	r7,r4,44a04 <scalbn+0x168>
   44998:	0130d414 	movui	r4,50000
   4499c:	100d883a 	mov	r6,r2
   449a0:	180f883a 	mov	r7,r3
   449a4:	243fda16 	blt	r4,r16,44910 <scalbn+0x74>
   449a8:	0130be74 	movhi	r4,49913
   449ac:	213cd644 	addi	r4,r4,-3239
   449b0:	01406974 	movhi	r5,421
   449b4:	295b87c4 	addi	r5,r5,28191
   449b8:	0044a300 	call	44a30 <copysign>
   449bc:	1009883a 	mov	r4,r2
   449c0:	180b883a 	mov	r5,r3
   449c4:	01b0be74 	movhi	r6,49913
   449c8:	31bcd644 	addi	r6,r6,-3239
   449cc:	01c06974 	movhi	r7,421
   449d0:	39db87c4 	addi	r7,r7,28191
   449d4:	00453640 	call	45364 <__muldf3>
   449d8:	dfc00117 	ldw	ra,4(sp)
   449dc:	dc000017 	ldw	r16,0(sp)
   449e0:	dec00204 	addi	sp,sp,8
   449e4:	f800283a 	ret
   449e8:	200d883a 	mov	r6,r4
   449ec:	280f883a 	mov	r7,r5
   449f0:	00452b00 	call	452b0 <__adddf3>
   449f4:	dfc00117 	ldw	ra,4(sp)
   449f8:	dc000017 	ldw	r16,0(sp)
   449fc:	dec00204 	addi	sp,sp,8
   44a00:	f800283a 	ret
   44a04:	39c00d84 	addi	r7,r7,54
   44a08:	380a953a 	slli	r5,r7,20
   44a0c:	00e00434 	movhi	r3,32784
   44a10:	18ffffc4 	addi	r3,r3,-1
   44a14:	30cc703a 	and	r6,r6,r3
   44a18:	298ab03a 	or	r5,r5,r6
   44a1c:	1009883a 	mov	r4,r2
   44a20:	000d883a 	mov	r6,zero
   44a24:	01cf2434 	movhi	r7,15504
   44a28:	00453640 	call	45364 <__muldf3>
   44a2c:	003fc406 	br	44940 <scalbn+0xa4>

00044a30 <copysign>:
   44a30:	00e00034 	movhi	r3,32768
   44a34:	18ffffc4 	addi	r3,r3,-1
   44a38:	39e0002c 	andhi	r7,r7,32768
   44a3c:	28c6703a 	and	r3,r5,r3
   44a40:	2005883a 	mov	r2,r4
   44a44:	38c6b03a 	or	r3,r7,r3
   44a48:	f800283a 	ret

00044a4c <_fpadd_parts>:
   44a4c:	2005883a 	mov	r2,r4
   44a50:	21000017 	ldw	r4,0(r4)
   44a54:	01c00044 	movi	r7,1
   44a58:	3900332e 	bgeu	r7,r4,44b28 <_fpadd_parts+0xdc>
   44a5c:	28c00017 	ldw	r3,0(r5)
   44a60:	38c0642e 	bgeu	r7,r3,44bf4 <_fpadd_parts+0x1a8>
   44a64:	01c00104 	movi	r7,4
   44a68:	21c06e26 	beq	r4,r7,44c24 <_fpadd_parts+0x1d8>
   44a6c:	19c06126 	beq	r3,r7,44bf4 <_fpadd_parts+0x1a8>
   44a70:	01c00084 	movi	r7,2
   44a74:	19c04226 	beq	r3,r7,44b80 <_fpadd_parts+0x134>
   44a78:	21c05e26 	beq	r4,r7,44bf4 <_fpadd_parts+0x1a8>
   44a7c:	11000217 	ldw	r4,8(r2)
   44a80:	2a400217 	ldw	r9,8(r5)
   44a84:	12800317 	ldw	r10,12(r2)
   44a88:	29c00317 	ldw	r7,12(r5)
   44a8c:	2247c83a 	sub	r3,r4,r9
   44a90:	1811883a 	mov	r8,r3
   44a94:	18005316 	blt	r3,zero,44be4 <_fpadd_parts+0x198>
   44a98:	02c007c4 	movi	r11,31
   44a9c:	5a002316 	blt	r11,r8,44b2c <_fpadd_parts+0xe0>
   44aa0:	00c0560e 	bge	zero,r3,44bfc <_fpadd_parts+0x1b0>
   44aa4:	00c00044 	movi	r3,1
   44aa8:	1a06983a 	sll	r3,r3,r8
   44aac:	3a10d83a 	srl	r8,r7,r8
   44ab0:	18ffffc4 	addi	r3,r3,-1
   44ab4:	19ce703a 	and	r7,r3,r7
   44ab8:	380ec03a 	cmpne	r7,r7,zero
   44abc:	3a0eb03a 	or	r7,r7,r8
   44ac0:	10c00117 	ldw	r3,4(r2)
   44ac4:	28800117 	ldw	r2,4(r5)
   44ac8:	18801d26 	beq	r3,r2,44b40 <_fpadd_parts+0xf4>
   44acc:	18003a26 	beq	r3,zero,44bb8 <_fpadd_parts+0x16c>
   44ad0:	3a85c83a 	sub	r2,r7,r10
   44ad4:	10003a16 	blt	r2,zero,44bc0 <_fpadd_parts+0x174>
   44ad8:	30000115 	stw	zero,4(r6)
   44adc:	31000215 	stw	r4,8(r6)
   44ae0:	30800315 	stw	r2,12(r6)
   44ae4:	10ffffc4 	addi	r3,r2,-1
   44ae8:	01d00034 	movhi	r7,16384
   44aec:	39ffff84 	addi	r7,r7,-2
   44af0:	38c00936 	bltu	r7,r3,44b18 <_fpadd_parts+0xcc>
   44af4:	30c00217 	ldw	r3,8(r6)
   44af8:	18ffffc4 	addi	r3,r3,-1
   44afc:	1085883a 	add	r2,r2,r2
   44b00:	113fffc4 	addi	r4,r2,-1
   44b04:	180b883a 	mov	r5,r3
   44b08:	18ffffc4 	addi	r3,r3,-1
   44b0c:	393ffb2e 	bgeu	r7,r4,44afc <_fpadd_parts+0xb0>
   44b10:	30800315 	stw	r2,12(r6)
   44b14:	31400215 	stw	r5,8(r6)
   44b18:	00c000c4 	movi	r3,3
   44b1c:	30c00015 	stw	r3,0(r6)
   44b20:	10000e16 	blt	r2,zero,44b5c <_fpadd_parts+0x110>
   44b24:	3005883a 	mov	r2,r6
   44b28:	f800283a 	ret
   44b2c:	49002a0e 	bge	r9,r4,44bd8 <_fpadd_parts+0x18c>
   44b30:	10c00117 	ldw	r3,4(r2)
   44b34:	28800117 	ldw	r2,4(r5)
   44b38:	000f883a 	mov	r7,zero
   44b3c:	18bfe31e 	bne	r3,r2,44acc <_fpadd_parts+0x80>
   44b40:	3a85883a 	add	r2,r7,r10
   44b44:	30c00115 	stw	r3,4(r6)
   44b48:	00c000c4 	movi	r3,3
   44b4c:	31000215 	stw	r4,8(r6)
   44b50:	30800315 	stw	r2,12(r6)
   44b54:	30c00015 	stw	r3,0(r6)
   44b58:	103ff20e 	bge	r2,zero,44b24 <_fpadd_parts+0xd8>
   44b5c:	30c00217 	ldw	r3,8(r6)
   44b60:	1008d07a 	srli	r4,r2,1
   44b64:	1080004c 	andi	r2,r2,1
   44b68:	18c00044 	addi	r3,r3,1
   44b6c:	1104b03a 	or	r2,r2,r4
   44b70:	30800315 	stw	r2,12(r6)
   44b74:	30c00215 	stw	r3,8(r6)
   44b78:	3005883a 	mov	r2,r6
   44b7c:	f800283a 	ret
   44b80:	20ffe91e 	bne	r4,r3,44b28 <_fpadd_parts+0xdc>
   44b84:	31000015 	stw	r4,0(r6)
   44b88:	10c00117 	ldw	r3,4(r2)
   44b8c:	30c00115 	stw	r3,4(r6)
   44b90:	11c00217 	ldw	r7,8(r2)
   44b94:	10c00117 	ldw	r3,4(r2)
   44b98:	29000117 	ldw	r4,4(r5)
   44b9c:	31c00215 	stw	r7,8(r6)
   44ba0:	10800317 	ldw	r2,12(r2)
   44ba4:	20c6703a 	and	r3,r4,r3
   44ba8:	30c00115 	stw	r3,4(r6)
   44bac:	30800315 	stw	r2,12(r6)
   44bb0:	3005883a 	mov	r2,r6
   44bb4:	f800283a 	ret
   44bb8:	51c5c83a 	sub	r2,r10,r7
   44bbc:	103fc60e 	bge	r2,zero,44ad8 <_fpadd_parts+0x8c>
   44bc0:	0085c83a 	sub	r2,zero,r2
   44bc4:	00c00044 	movi	r3,1
   44bc8:	30c00115 	stw	r3,4(r6)
   44bcc:	31000215 	stw	r4,8(r6)
   44bd0:	30800315 	stw	r2,12(r6)
   44bd4:	003fc306 	br	44ae4 <_fpadd_parts+0x98>
   44bd8:	4809883a 	mov	r4,r9
   44bdc:	0015883a 	mov	r10,zero
   44be0:	003fb706 	br	44ac0 <_fpadd_parts+0x74>
   44be4:	00d1c83a 	sub	r8,zero,r3
   44be8:	02c007c4 	movi	r11,31
   44bec:	5a3fcf16 	blt	r11,r8,44b2c <_fpadd_parts+0xe0>
   44bf0:	003fab06 	br	44aa0 <_fpadd_parts+0x54>
   44bf4:	2805883a 	mov	r2,r5
   44bf8:	f800283a 	ret
   44bfc:	183fb026 	beq	r3,zero,44ac0 <_fpadd_parts+0x74>
   44c00:	02400044 	movi	r9,1
   44c04:	4a12983a 	sll	r9,r9,r8
   44c08:	5206d83a 	srl	r3,r10,r8
   44c0c:	2209883a 	add	r4,r4,r8
   44c10:	4a3fffc4 	addi	r8,r9,-1
   44c14:	4294703a 	and	r10,r8,r10
   44c18:	5014c03a 	cmpne	r10,r10,zero
   44c1c:	50d4b03a 	or	r10,r10,r3
   44c20:	003fa706 	br	44ac0 <_fpadd_parts+0x74>
   44c24:	193fc01e 	bne	r3,r4,44b28 <_fpadd_parts+0xdc>
   44c28:	11000117 	ldw	r4,4(r2)
   44c2c:	28c00117 	ldw	r3,4(r5)
   44c30:	20ffbd26 	beq	r4,r3,44b28 <_fpadd_parts+0xdc>
   44c34:	00800174 	movhi	r2,5
   44c38:	10863d04 	addi	r2,r2,6388
   44c3c:	f800283a 	ret

00044c40 <__addsf3>:
   44c40:	defff104 	addi	sp,sp,-60
   44c44:	d9000d15 	stw	r4,52(sp)
   44c48:	d9400c15 	stw	r5,48(sp)
   44c4c:	d9000d04 	addi	r4,sp,52
   44c50:	d9400804 	addi	r5,sp,32
   44c54:	dfc00e15 	stw	ra,56(sp)
   44c58:	0045e680 	call	45e68 <__unpack_f>
   44c5c:	d9000c04 	addi	r4,sp,48
   44c60:	d9400404 	addi	r5,sp,16
   44c64:	0045e680 	call	45e68 <__unpack_f>
   44c68:	d9000804 	addi	r4,sp,32
   44c6c:	d9400404 	addi	r5,sp,16
   44c70:	d80d883a 	mov	r6,sp
   44c74:	0044a4c0 	call	44a4c <_fpadd_parts>
   44c78:	1009883a 	mov	r4,r2
   44c7c:	0045d3c0 	call	45d3c <__pack_f>
   44c80:	dfc00e17 	ldw	ra,56(sp)
   44c84:	dec00f04 	addi	sp,sp,60
   44c88:	f800283a 	ret

00044c8c <__subsf3>:
   44c8c:	defff104 	addi	sp,sp,-60
   44c90:	d9000d15 	stw	r4,52(sp)
   44c94:	d9400c15 	stw	r5,48(sp)
   44c98:	d9000d04 	addi	r4,sp,52
   44c9c:	d9400804 	addi	r5,sp,32
   44ca0:	dfc00e15 	stw	ra,56(sp)
   44ca4:	0045e680 	call	45e68 <__unpack_f>
   44ca8:	d9000c04 	addi	r4,sp,48
   44cac:	d9400404 	addi	r5,sp,16
   44cb0:	0045e680 	call	45e68 <__unpack_f>
   44cb4:	d8800517 	ldw	r2,20(sp)
   44cb8:	d9000804 	addi	r4,sp,32
   44cbc:	d9400404 	addi	r5,sp,16
   44cc0:	d80d883a 	mov	r6,sp
   44cc4:	1080005c 	xori	r2,r2,1
   44cc8:	d8800515 	stw	r2,20(sp)
   44ccc:	0044a4c0 	call	44a4c <_fpadd_parts>
   44cd0:	1009883a 	mov	r4,r2
   44cd4:	0045d3c0 	call	45d3c <__pack_f>
   44cd8:	dfc00e17 	ldw	ra,56(sp)
   44cdc:	dec00f04 	addi	sp,sp,60
   44ce0:	f800283a 	ret

00044ce4 <__mulsf3>:
   44ce4:	defff104 	addi	sp,sp,-60
   44ce8:	d9000d15 	stw	r4,52(sp)
   44cec:	d9400c15 	stw	r5,48(sp)
   44cf0:	d9000d04 	addi	r4,sp,52
   44cf4:	d9400804 	addi	r5,sp,32
   44cf8:	dfc00e15 	stw	ra,56(sp)
   44cfc:	0045e680 	call	45e68 <__unpack_f>
   44d00:	d9000c04 	addi	r4,sp,48
   44d04:	d9400404 	addi	r5,sp,16
   44d08:	0045e680 	call	45e68 <__unpack_f>
   44d0c:	d8c00817 	ldw	r3,32(sp)
   44d10:	00800044 	movi	r2,1
   44d14:	10c00936 	bltu	r2,r3,44d3c <__mulsf3+0x58>
   44d18:	d8c00917 	ldw	r3,36(sp)
   44d1c:	d8800517 	ldw	r2,20(sp)
   44d20:	d9000804 	addi	r4,sp,32
   44d24:	1884c03a 	cmpne	r2,r3,r2
   44d28:	d8800915 	stw	r2,36(sp)
   44d2c:	0045d3c0 	call	45d3c <__pack_f>
   44d30:	dfc00e17 	ldw	ra,56(sp)
   44d34:	dec00f04 	addi	sp,sp,60
   44d38:	f800283a 	ret
   44d3c:	d9000417 	ldw	r4,16(sp)
   44d40:	11000936 	bltu	r2,r4,44d68 <__mulsf3+0x84>
   44d44:	d8800517 	ldw	r2,20(sp)
   44d48:	d8c00917 	ldw	r3,36(sp)
   44d4c:	d9000404 	addi	r4,sp,16
   44d50:	1884c03a 	cmpne	r2,r3,r2
   44d54:	d8800515 	stw	r2,20(sp)
   44d58:	0045d3c0 	call	45d3c <__pack_f>
   44d5c:	dfc00e17 	ldw	ra,56(sp)
   44d60:	dec00f04 	addi	sp,sp,60
   44d64:	f800283a 	ret
   44d68:	00800104 	movi	r2,4
   44d6c:	1880051e 	bne	r3,r2,44d84 <__mulsf3+0xa0>
   44d70:	00800084 	movi	r2,2
   44d74:	20bfe81e 	bne	r4,r2,44d18 <__mulsf3+0x34>
   44d78:	01000174 	movhi	r4,5
   44d7c:	21063d04 	addi	r4,r4,6388
   44d80:	003fea06 	br	44d2c <__mulsf3+0x48>
   44d84:	2080031e 	bne	r4,r2,44d94 <__mulsf3+0xb0>
   44d88:	00800084 	movi	r2,2
   44d8c:	18bffa26 	beq	r3,r2,44d78 <__mulsf3+0x94>
   44d90:	003fec06 	br	44d44 <__mulsf3+0x60>
   44d94:	00800084 	movi	r2,2
   44d98:	18bfdf26 	beq	r3,r2,44d18 <__mulsf3+0x34>
   44d9c:	20bfe926 	beq	r4,r2,44d44 <__mulsf3+0x60>
   44da0:	d9000717 	ldw	r4,28(sp)
   44da4:	d9800b17 	ldw	r6,44(sp)
   44da8:	000b883a 	mov	r5,zero
   44dac:	000f883a 	mov	r7,zero
   44db0:	0045c300 	call	45c30 <__muldi3>
   44db4:	d9000617 	ldw	r4,24(sp)
   44db8:	d9400a17 	ldw	r5,40(sp)
   44dbc:	d9c00917 	ldw	r7,36(sp)
   44dc0:	290b883a 	add	r5,r5,r4
   44dc4:	d9000517 	ldw	r4,20(sp)
   44dc8:	29800084 	addi	r6,r5,2
   44dcc:	d9800215 	stw	r6,8(sp)
   44dd0:	3908c03a 	cmpne	r4,r7,r4
   44dd4:	d9000115 	stw	r4,4(sp)
   44dd8:	1809883a 	mov	r4,r3
   44ddc:	1800070e 	bge	r3,zero,44dfc <__mulsf3+0x118>
   44de0:	1900004c 	andi	r4,r3,1
   44de4:	294000c4 	addi	r5,r5,3
   44de8:	20000226 	beq	r4,zero,44df4 <__mulsf3+0x110>
   44dec:	1004d07a 	srli	r2,r2,1
   44df0:	10a00034 	orhi	r2,r2,32768
   44df4:	1808d07a 	srli	r4,r3,1
   44df8:	d9400215 	stw	r5,8(sp)
   44dfc:	01900034 	movhi	r6,16384
   44e00:	31bfffc4 	addi	r6,r6,-1
   44e04:	31000c36 	bltu	r6,r4,44e38 <__mulsf3+0x154>
   44e08:	d8c00217 	ldw	r3,8(sp)
   44e0c:	18ffffc4 	addi	r3,r3,-1
   44e10:	00000306 	br	44e20 <__mulsf3+0x13c>
   44e14:	1085883a 	add	r2,r2,r2
   44e18:	18ffffc4 	addi	r3,r3,-1
   44e1c:	31000536 	bltu	r6,r4,44e34 <__mulsf3+0x150>
   44e20:	2109883a 	add	r4,r4,r4
   44e24:	180b883a 	mov	r5,r3
   44e28:	103ffa0e 	bge	r2,zero,44e14 <__mulsf3+0x130>
   44e2c:	21000054 	ori	r4,r4,1
   44e30:	003ff806 	br	44e14 <__mulsf3+0x130>
   44e34:	d9400215 	stw	r5,8(sp)
   44e38:	21401fcc 	andi	r5,r4,127
   44e3c:	00c01004 	movi	r3,64
   44e40:	28c00526 	beq	r5,r3,44e58 <__mulsf3+0x174>
   44e44:	008000c4 	movi	r2,3
   44e48:	d9000315 	stw	r4,12(sp)
   44e4c:	d8800015 	stw	r2,0(sp)
   44e50:	d809883a 	mov	r4,sp
   44e54:	003fb506 	br	44d2c <__mulsf3+0x48>
   44e58:	20c0200c 	andi	r3,r4,128
   44e5c:	183ff91e 	bne	r3,zero,44e44 <__mulsf3+0x160>
   44e60:	103ff826 	beq	r2,zero,44e44 <__mulsf3+0x160>
   44e64:	21001004 	addi	r4,r4,64
   44e68:	00bfe004 	movi	r2,-128
   44e6c:	2088703a 	and	r4,r4,r2
   44e70:	003ff406 	br	44e44 <__mulsf3+0x160>

00044e74 <__fixsfsi>:
   44e74:	defffa04 	addi	sp,sp,-24
   44e78:	d9000415 	stw	r4,16(sp)
   44e7c:	d80b883a 	mov	r5,sp
   44e80:	d9000404 	addi	r4,sp,16
   44e84:	dfc00515 	stw	ra,20(sp)
   44e88:	0045e680 	call	45e68 <__unpack_f>
   44e8c:	d8800017 	ldw	r2,0(sp)
   44e90:	00c00084 	movi	r3,2
   44e94:	10c01826 	beq	r2,r3,44ef8 <__fixsfsi+0x84>
   44e98:	00c00044 	movi	r3,1
   44e9c:	1880162e 	bgeu	r3,r2,44ef8 <__fixsfsi+0x84>
   44ea0:	00c00104 	movi	r3,4
   44ea4:	10c00426 	beq	r2,r3,44eb8 <__fixsfsi+0x44>
   44ea8:	d8800217 	ldw	r2,8(sp)
   44eac:	10001216 	blt	r2,zero,44ef8 <__fixsfsi+0x84>
   44eb0:	00c00784 	movi	r3,30
   44eb4:	1880070e 	bge	r3,r2,44ed4 <__fixsfsi+0x60>
   44eb8:	d8800117 	ldw	r2,4(sp)
   44ebc:	1000121e 	bne	r2,zero,44f08 <__fixsfsi+0x94>
   44ec0:	00a00034 	movhi	r2,32768
   44ec4:	10bfffc4 	addi	r2,r2,-1
   44ec8:	dfc00517 	ldw	ra,20(sp)
   44ecc:	dec00604 	addi	sp,sp,24
   44ed0:	f800283a 	ret
   44ed4:	1885c83a 	sub	r2,r3,r2
   44ed8:	d8c00317 	ldw	r3,12(sp)
   44edc:	1884d83a 	srl	r2,r3,r2
   44ee0:	d8c00117 	ldw	r3,4(sp)
   44ee4:	183ff826 	beq	r3,zero,44ec8 <__fixsfsi+0x54>
   44ee8:	0085c83a 	sub	r2,zero,r2
   44eec:	dfc00517 	ldw	ra,20(sp)
   44ef0:	dec00604 	addi	sp,sp,24
   44ef4:	f800283a 	ret
   44ef8:	0005883a 	mov	r2,zero
   44efc:	dfc00517 	ldw	ra,20(sp)
   44f00:	dec00604 	addi	sp,sp,24
   44f04:	f800283a 	ret
   44f08:	00a00034 	movhi	r2,32768
   44f0c:	dfc00517 	ldw	ra,20(sp)
   44f10:	dec00604 	addi	sp,sp,24
   44f14:	f800283a 	ret

00044f18 <__extendsfdf2>:
   44f18:	defff904 	addi	sp,sp,-28
   44f1c:	d9000515 	stw	r4,20(sp)
   44f20:	d9400104 	addi	r5,sp,4
   44f24:	d9000504 	addi	r4,sp,20
   44f28:	dfc00615 	stw	ra,24(sp)
   44f2c:	0045e680 	call	45e68 <__unpack_f>
   44f30:	d9c00417 	ldw	r7,16(sp)
   44f34:	d9000117 	ldw	r4,4(sp)
   44f38:	d9400217 	ldw	r5,8(sp)
   44f3c:	3804d0ba 	srli	r2,r7,2
   44f40:	d9800317 	ldw	r6,12(sp)
   44f44:	380e97ba 	slli	r7,r7,30
   44f48:	d8800015 	stw	r2,0(sp)
   44f4c:	0045ac80 	call	45ac8 <__make_dp>
   44f50:	dfc00617 	ldw	ra,24(sp)
   44f54:	dec00704 	addi	sp,sp,28
   44f58:	f800283a 	ret

00044f5c <_fpadd_parts>:
   44f5c:	2005883a 	mov	r2,r4
   44f60:	21000017 	ldw	r4,0(r4)
   44f64:	01c00044 	movi	r7,1
   44f68:	3900622e 	bgeu	r7,r4,450f4 <_fpadd_parts+0x198>
   44f6c:	28c00017 	ldw	r3,0(r5)
   44f70:	38c05f2e 	bgeu	r7,r3,450f0 <_fpadd_parts+0x194>
   44f74:	01c00104 	movi	r7,4
   44f78:	21c0c626 	beq	r4,r7,45294 <_fpadd_parts+0x338>
   44f7c:	19c05c26 	beq	r3,r7,450f0 <_fpadd_parts+0x194>
   44f80:	01c00084 	movi	r7,2
   44f84:	19c06b26 	beq	r3,r7,45134 <_fpadd_parts+0x1d8>
   44f88:	21c05926 	beq	r4,r7,450f0 <_fpadd_parts+0x194>
   44f8c:	11c00217 	ldw	r7,8(r2)
   44f90:	2ac00217 	ldw	r11,8(r5)
   44f94:	13000317 	ldw	r12,12(r2)
   44f98:	13400417 	ldw	r13,16(r2)
   44f9c:	3ac9c83a 	sub	r4,r7,r11
   44fa0:	2a000317 	ldw	r8,12(r5)
   44fa4:	2a400417 	ldw	r9,16(r5)
   44fa8:	2015883a 	mov	r10,r4
   44fac:	20007516 	blt	r4,zero,45184 <_fpadd_parts+0x228>
   44fb0:	00c00fc4 	movi	r3,63
   44fb4:	1a805016 	blt	r3,r10,450f8 <_fpadd_parts+0x19c>
   44fb8:	0100870e 	bge	zero,r4,451d8 <_fpadd_parts+0x27c>
   44fbc:	50fff804 	addi	r3,r10,-32
   44fc0:	18009916 	blt	r3,zero,45228 <_fpadd_parts+0x2cc>
   44fc4:	48d6d83a 	srl	r11,r9,r3
   44fc8:	001d883a 	mov	r14,zero
   44fcc:	18009e16 	blt	r3,zero,45248 <_fpadd_parts+0x2ec>
   44fd0:	01000044 	movi	r4,1
   44fd4:	20c6983a 	sll	r3,r4,r3
   44fd8:	0015883a 	mov	r10,zero
   44fdc:	513fffc4 	addi	r4,r10,-1
   44fe0:	2295403a 	cmpgeu	r10,r4,r10
   44fe4:	1a87c83a 	sub	r3,r3,r10
   44fe8:	1a52703a 	and	r9,r3,r9
   44fec:	2210703a 	and	r8,r4,r8
   44ff0:	4250b03a 	or	r8,r8,r9
   44ff4:	4010c03a 	cmpne	r8,r8,zero
   44ff8:	42d0b03a 	or	r8,r8,r11
   44ffc:	7013883a 	mov	r9,r14
   45000:	11000117 	ldw	r4,4(r2)
   45004:	28800117 	ldw	r2,4(r5)
   45008:	20804126 	beq	r4,r2,45110 <_fpadd_parts+0x1b4>
   4500c:	20006326 	beq	r4,zero,4519c <_fpadd_parts+0x240>
   45010:	4305c83a 	sub	r2,r8,r12
   45014:	4091803a 	cmpltu	r8,r8,r2
   45018:	4b47c83a 	sub	r3,r9,r13
   4501c:	1a07c83a 	sub	r3,r3,r8
   45020:	18006316 	blt	r3,zero,451b0 <_fpadd_parts+0x254>
   45024:	30000115 	stw	zero,4(r6)
   45028:	31c00215 	stw	r7,8(r6)
   4502c:	30800315 	stw	r2,12(r6)
   45030:	30c00415 	stw	r3,16(r6)
   45034:	11ffffc4 	addi	r7,r2,-1
   45038:	388b403a 	cmpgeu	r5,r7,r2
   4503c:	194bc83a 	sub	r5,r3,r5
   45040:	01040034 	movhi	r4,4096
   45044:	213fffc4 	addi	r4,r4,-1
   45048:	21401736 	bltu	r4,r5,450a8 <_fpadd_parts+0x14c>
   4504c:	29008226 	beq	r5,r4,45258 <_fpadd_parts+0x2fc>
   45050:	31400217 	ldw	r5,8(r6)
   45054:	02840034 	movhi	r10,4096
   45058:	52bfffc4 	addi	r10,r10,-1
   4505c:	033fff84 	movi	r12,-2
   45060:	297fffc4 	addi	r5,r5,-1
   45064:	00000106 	br	4506c <_fpadd_parts+0x110>
   45068:	3a804a26 	beq	r7,r10,45194 <_fpadd_parts+0x238>
   4506c:	1089883a 	add	r4,r2,r2
   45070:	2091803a 	cmpltu	r8,r4,r2
   45074:	18c7883a 	add	r3,r3,r3
   45078:	227fffc4 	addi	r9,r4,-1
   4507c:	40d1883a 	add	r8,r8,r3
   45080:	490f403a 	cmpgeu	r7,r9,r4
   45084:	41cfc83a 	sub	r7,r8,r7
   45088:	2817883a 	mov	r11,r5
   4508c:	2005883a 	mov	r2,r4
   45090:	4007883a 	mov	r3,r8
   45094:	297fffc4 	addi	r5,r5,-1
   45098:	51fff32e 	bgeu	r10,r7,45068 <_fpadd_parts+0x10c>
   4509c:	31000315 	stw	r4,12(r6)
   450a0:	32000415 	stw	r8,16(r6)
   450a4:	32c00215 	stw	r11,8(r6)
   450a8:	010000c4 	movi	r4,3
   450ac:	31000015 	stw	r4,0(r6)
   450b0:	01080034 	movhi	r4,8192
   450b4:	213fffc4 	addi	r4,r4,-1
   450b8:	20c00b2e 	bgeu	r4,r3,450e8 <_fpadd_parts+0x18c>
   450bc:	180e97fa 	slli	r7,r3,31
   450c0:	1008d07a 	srli	r4,r2,1
   450c4:	31400217 	ldw	r5,8(r6)
   450c8:	1806d07a 	srli	r3,r3,1
   450cc:	1080004c 	andi	r2,r2,1
   450d0:	3908b03a 	or	r4,r7,r4
   450d4:	1108b03a 	or	r4,r2,r4
   450d8:	29400044 	addi	r5,r5,1
   450dc:	31000315 	stw	r4,12(r6)
   450e0:	30c00415 	stw	r3,16(r6)
   450e4:	31400215 	stw	r5,8(r6)
   450e8:	3005883a 	mov	r2,r6
   450ec:	f800283a 	ret
   450f0:	2805883a 	mov	r2,r5
   450f4:	f800283a 	ret
   450f8:	59c01e0e 	bge	r11,r7,45174 <_fpadd_parts+0x218>
   450fc:	11000117 	ldw	r4,4(r2)
   45100:	28800117 	ldw	r2,4(r5)
   45104:	0011883a 	mov	r8,zero
   45108:	0013883a 	mov	r9,zero
   4510c:	20bfbf1e 	bne	r4,r2,4500c <_fpadd_parts+0xb0>
   45110:	4305883a 	add	r2,r8,r12
   45114:	1207803a 	cmpltu	r3,r2,r8
   45118:	4b53883a 	add	r9,r9,r13
   4511c:	1a47883a 	add	r3,r3,r9
   45120:	31000115 	stw	r4,4(r6)
   45124:	31c00215 	stw	r7,8(r6)
   45128:	30800315 	stw	r2,12(r6)
   4512c:	30c00415 	stw	r3,16(r6)
   45130:	003fdd06 	br	450a8 <_fpadd_parts+0x14c>
   45134:	20ffef1e 	bne	r4,r3,450f4 <_fpadd_parts+0x198>
   45138:	31000015 	stw	r4,0(r6)
   4513c:	10c00117 	ldw	r3,4(r2)
   45140:	30c00115 	stw	r3,4(r6)
   45144:	10c00217 	ldw	r3,8(r2)
   45148:	11000117 	ldw	r4,4(r2)
   4514c:	29400117 	ldw	r5,4(r5)
   45150:	30c00215 	stw	r3,8(r6)
   45154:	10c00317 	ldw	r3,12(r2)
   45158:	2908703a 	and	r4,r5,r4
   4515c:	30c00315 	stw	r3,12(r6)
   45160:	10c00417 	ldw	r3,16(r2)
   45164:	31000115 	stw	r4,4(r6)
   45168:	3005883a 	mov	r2,r6
   4516c:	30c00415 	stw	r3,16(r6)
   45170:	f800283a 	ret
   45174:	580f883a 	mov	r7,r11
   45178:	0019883a 	mov	r12,zero
   4517c:	001b883a 	mov	r13,zero
   45180:	003f9f06 	br	45000 <_fpadd_parts+0xa4>
   45184:	0115c83a 	sub	r10,zero,r4
   45188:	00c00fc4 	movi	r3,63
   4518c:	1abfda16 	blt	r3,r10,450f8 <_fpadd_parts+0x19c>
   45190:	003f8906 	br	44fb8 <_fpadd_parts+0x5c>
   45194:	627fb52e 	bgeu	r12,r9,4506c <_fpadd_parts+0x110>
   45198:	003fc006 	br	4509c <_fpadd_parts+0x140>
   4519c:	6205c83a 	sub	r2,r12,r8
   451a0:	6099803a 	cmpltu	r12,r12,r2
   451a4:	6a47c83a 	sub	r3,r13,r9
   451a8:	1b07c83a 	sub	r3,r3,r12
   451ac:	183f9d0e 	bge	r3,zero,45024 <_fpadd_parts+0xc8>
   451b0:	0085c83a 	sub	r2,zero,r2
   451b4:	1008c03a 	cmpne	r4,r2,zero
   451b8:	00c7c83a 	sub	r3,zero,r3
   451bc:	1907c83a 	sub	r3,r3,r4
   451c0:	01000044 	movi	r4,1
   451c4:	31000115 	stw	r4,4(r6)
   451c8:	31c00215 	stw	r7,8(r6)
   451cc:	30800315 	stw	r2,12(r6)
   451d0:	30c00415 	stw	r3,16(r6)
   451d4:	003f9706 	br	45034 <_fpadd_parts+0xd8>
   451d8:	203f8926 	beq	r4,zero,45000 <_fpadd_parts+0xa4>
   451dc:	50fff804 	addi	r3,r10,-32
   451e0:	3a8f883a 	add	r7,r7,r10
   451e4:	18002316 	blt	r3,zero,45274 <_fpadd_parts+0x318>
   451e8:	68d6d83a 	srl	r11,r13,r3
   451ec:	001d883a 	mov	r14,zero
   451f0:	18001c16 	blt	r3,zero,45264 <_fpadd_parts+0x308>
   451f4:	01000044 	movi	r4,1
   451f8:	20c6983a 	sll	r3,r4,r3
   451fc:	0015883a 	mov	r10,zero
   45200:	513fffc4 	addi	r4,r10,-1
   45204:	2295403a 	cmpgeu	r10,r4,r10
   45208:	1a87c83a 	sub	r3,r3,r10
   4520c:	1b5a703a 	and	r13,r3,r13
   45210:	2318703a 	and	r12,r4,r12
   45214:	6358b03a 	or	r12,r12,r13
   45218:	6018c03a 	cmpne	r12,r12,zero
   4521c:	62d8b03a 	or	r12,r12,r11
   45220:	701b883a 	mov	r13,r14
   45224:	003f7606 	br	45000 <_fpadd_parts+0xa4>
   45228:	4808907a 	slli	r4,r9,1
   4522c:	02c007c4 	movi	r11,31
   45230:	5a97c83a 	sub	r11,r11,r10
   45234:	22c8983a 	sll	r4,r4,r11
   45238:	4296d83a 	srl	r11,r8,r10
   4523c:	4a9cd83a 	srl	r14,r9,r10
   45240:	22d6b03a 	or	r11,r4,r11
   45244:	003f6106 	br	44fcc <_fpadd_parts+0x70>
   45248:	00c00044 	movi	r3,1
   4524c:	1a94983a 	sll	r10,r3,r10
   45250:	0007883a 	mov	r3,zero
   45254:	003f6106 	br	44fdc <_fpadd_parts+0x80>
   45258:	013fff84 	movi	r4,-2
   4525c:	21ff7c2e 	bgeu	r4,r7,45050 <_fpadd_parts+0xf4>
   45260:	003f9106 	br	450a8 <_fpadd_parts+0x14c>
   45264:	00c00044 	movi	r3,1
   45268:	1a94983a 	sll	r10,r3,r10
   4526c:	0007883a 	mov	r3,zero
   45270:	003fe306 	br	45200 <_fpadd_parts+0x2a4>
   45274:	6816907a 	slli	r11,r13,1
   45278:	010007c4 	movi	r4,31
   4527c:	2289c83a 	sub	r4,r4,r10
   45280:	5908983a 	sll	r4,r11,r4
   45284:	6296d83a 	srl	r11,r12,r10
   45288:	6a9cd83a 	srl	r14,r13,r10
   4528c:	22d6b03a 	or	r11,r4,r11
   45290:	003fd706 	br	451f0 <_fpadd_parts+0x294>
   45294:	193f971e 	bne	r3,r4,450f4 <_fpadd_parts+0x198>
   45298:	11000117 	ldw	r4,4(r2)
   4529c:	28c00117 	ldw	r3,4(r5)
   452a0:	20ff9426 	beq	r4,r3,450f4 <_fpadd_parts+0x198>
   452a4:	00800174 	movhi	r2,5
   452a8:	10864104 	addi	r2,r2,6404
   452ac:	f800283a 	ret

000452b0 <__adddf3>:
   452b0:	deffec04 	addi	sp,sp,-80
   452b4:	d9001115 	stw	r4,68(sp)
   452b8:	d9401215 	stw	r5,72(sp)
   452bc:	d9001104 	addi	r4,sp,68
   452c0:	d9400a04 	addi	r5,sp,40
   452c4:	dfc01315 	stw	ra,76(sp)
   452c8:	d9c01015 	stw	r7,64(sp)
   452cc:	d9800f15 	stw	r6,60(sp)
   452d0:	00461540 	call	46154 <__unpack_d>
   452d4:	d9000f04 	addi	r4,sp,60
   452d8:	d9400504 	addi	r5,sp,20
   452dc:	00461540 	call	46154 <__unpack_d>
   452e0:	d9000a04 	addi	r4,sp,40
   452e4:	d9400504 	addi	r5,sp,20
   452e8:	d80d883a 	mov	r6,sp
   452ec:	0044f5c0 	call	44f5c <_fpadd_parts>
   452f0:	1009883a 	mov	r4,r2
   452f4:	0045f300 	call	45f30 <__pack_d>
   452f8:	dfc01317 	ldw	ra,76(sp)
   452fc:	dec01404 	addi	sp,sp,80
   45300:	f800283a 	ret

00045304 <__subdf3>:
   45304:	deffec04 	addi	sp,sp,-80
   45308:	d9001115 	stw	r4,68(sp)
   4530c:	d9401215 	stw	r5,72(sp)
   45310:	d9001104 	addi	r4,sp,68
   45314:	d9400a04 	addi	r5,sp,40
   45318:	dfc01315 	stw	ra,76(sp)
   4531c:	d9c01015 	stw	r7,64(sp)
   45320:	d9800f15 	stw	r6,60(sp)
   45324:	00461540 	call	46154 <__unpack_d>
   45328:	d9000f04 	addi	r4,sp,60
   4532c:	d9400504 	addi	r5,sp,20
   45330:	00461540 	call	46154 <__unpack_d>
   45334:	d8800617 	ldw	r2,24(sp)
   45338:	d9000a04 	addi	r4,sp,40
   4533c:	d9400504 	addi	r5,sp,20
   45340:	d80d883a 	mov	r6,sp
   45344:	1080005c 	xori	r2,r2,1
   45348:	d8800615 	stw	r2,24(sp)
   4534c:	0044f5c0 	call	44f5c <_fpadd_parts>
   45350:	1009883a 	mov	r4,r2
   45354:	0045f300 	call	45f30 <__pack_d>
   45358:	dfc01317 	ldw	ra,76(sp)
   4535c:	dec01404 	addi	sp,sp,80
   45360:	f800283a 	ret

00045364 <__muldf3>:
   45364:	deffe404 	addi	sp,sp,-112
   45368:	d9001115 	stw	r4,68(sp)
   4536c:	d9401215 	stw	r5,72(sp)
   45370:	d9001104 	addi	r4,sp,68
   45374:	d9400a04 	addi	r5,sp,40
   45378:	dfc01b15 	stw	ra,108(sp)
   4537c:	d9800f15 	stw	r6,60(sp)
   45380:	d9c01015 	stw	r7,64(sp)
   45384:	ddc01a15 	stw	r23,104(sp)
   45388:	dd801915 	stw	r22,100(sp)
   4538c:	dd401815 	stw	r21,96(sp)
   45390:	dd001715 	stw	r20,92(sp)
   45394:	dcc01615 	stw	r19,88(sp)
   45398:	dc801515 	stw	r18,84(sp)
   4539c:	dc401415 	stw	r17,80(sp)
   453a0:	dc001315 	stw	r16,76(sp)
   453a4:	00461540 	call	46154 <__unpack_d>
   453a8:	d9000f04 	addi	r4,sp,60
   453ac:	d9400504 	addi	r5,sp,20
   453b0:	00461540 	call	46154 <__unpack_d>
   453b4:	d8c00a17 	ldw	r3,40(sp)
   453b8:	00800044 	movi	r2,1
   453bc:	10c01136 	bltu	r2,r3,45404 <__muldf3+0xa0>
   453c0:	d8c00b17 	ldw	r3,44(sp)
   453c4:	d8800617 	ldw	r2,24(sp)
   453c8:	d9000a04 	addi	r4,sp,40
   453cc:	1884c03a 	cmpne	r2,r3,r2
   453d0:	d8800b15 	stw	r2,44(sp)
   453d4:	0045f300 	call	45f30 <__pack_d>
   453d8:	dfc01b17 	ldw	ra,108(sp)
   453dc:	ddc01a17 	ldw	r23,104(sp)
   453e0:	dd801917 	ldw	r22,100(sp)
   453e4:	dd401817 	ldw	r21,96(sp)
   453e8:	dd001717 	ldw	r20,92(sp)
   453ec:	dcc01617 	ldw	r19,88(sp)
   453f0:	dc801517 	ldw	r18,84(sp)
   453f4:	dc401417 	ldw	r17,80(sp)
   453f8:	dc001317 	ldw	r16,76(sp)
   453fc:	dec01c04 	addi	sp,sp,112
   45400:	f800283a 	ret
   45404:	d9000517 	ldw	r4,20(sp)
   45408:	11000636 	bltu	r2,r4,45424 <__muldf3+0xc0>
   4540c:	d8800617 	ldw	r2,24(sp)
   45410:	d8c00b17 	ldw	r3,44(sp)
   45414:	d9000504 	addi	r4,sp,20
   45418:	1884c03a 	cmpne	r2,r3,r2
   4541c:	d8800615 	stw	r2,24(sp)
   45420:	003fec06 	br	453d4 <__muldf3+0x70>
   45424:	00800104 	movi	r2,4
   45428:	1880051e 	bne	r3,r2,45440 <__muldf3+0xdc>
   4542c:	00800084 	movi	r2,2
   45430:	20bfe31e 	bne	r4,r2,453c0 <__muldf3+0x5c>
   45434:	01000174 	movhi	r4,5
   45438:	21064104 	addi	r4,r4,6404
   4543c:	003fe506 	br	453d4 <__muldf3+0x70>
   45440:	2080031e 	bne	r4,r2,45450 <__muldf3+0xec>
   45444:	00800084 	movi	r2,2
   45448:	18bffa26 	beq	r3,r2,45434 <__muldf3+0xd0>
   4544c:	003fef06 	br	4540c <__muldf3+0xa8>
   45450:	00800084 	movi	r2,2
   45454:	18bfda26 	beq	r3,r2,453c0 <__muldf3+0x5c>
   45458:	20bfec26 	beq	r4,r2,4540c <__muldf3+0xa8>
   4545c:	dc000d17 	ldw	r16,52(sp)
   45460:	dd000817 	ldw	r20,32(sp)
   45464:	dc800917 	ldw	r18,36(sp)
   45468:	8009883a 	mov	r4,r16
   4546c:	000b883a 	mov	r5,zero
   45470:	a00d883a 	mov	r6,r20
   45474:	000f883a 	mov	r7,zero
   45478:	0045c300 	call	45c30 <__muldi3>
   4547c:	dc400e17 	ldw	r17,56(sp)
   45480:	9009883a 	mov	r4,r18
   45484:	800d883a 	mov	r6,r16
   45488:	000b883a 	mov	r5,zero
   4548c:	000f883a 	mov	r7,zero
   45490:	102f883a 	mov	r23,r2
   45494:	1827883a 	mov	r19,r3
   45498:	0045c300 	call	45c30 <__muldi3>
   4549c:	900d883a 	mov	r6,r18
   454a0:	8809883a 	mov	r4,r17
   454a4:	000b883a 	mov	r5,zero
   454a8:	000f883a 	mov	r7,zero
   454ac:	102b883a 	mov	r21,r2
   454b0:	1821883a 	mov	r16,r3
   454b4:	0045c300 	call	45c30 <__muldi3>
   454b8:	8809883a 	mov	r4,r17
   454bc:	000b883a 	mov	r5,zero
   454c0:	a00d883a 	mov	r6,r20
   454c4:	000f883a 	mov	r7,zero
   454c8:	102d883a 	mov	r22,r2
   454cc:	1825883a 	mov	r18,r3
   454d0:	0045c300 	call	45c30 <__muldi3>
   454d4:	154b883a 	add	r5,r2,r21
   454d8:	2889803a 	cmpltu	r4,r5,r2
   454dc:	1c07883a 	add	r3,r3,r16
   454e0:	20c9883a 	add	r4,r4,r3
   454e4:	24004b36 	bltu	r4,r16,45614 <__muldf3+0x2b0>
   454e8:	8100011e 	bne	r16,r4,454f0 <__muldf3+0x18c>
   454ec:	2d404936 	bltu	r5,r21,45614 <__muldf3+0x2b0>
   454f0:	0011883a 	mov	r8,zero
   454f4:	0007883a 	mov	r3,zero
   454f8:	2ccb883a 	add	r5,r5,r19
   454fc:	b80d883a 	mov	r6,r23
   45500:	2cc0012e 	bgeu	r5,r19,45508 <__muldf3+0x1a4>
   45504:	02000044 	movi	r8,1
   45508:	258f883a 	add	r7,r4,r22
   4550c:	3909803a 	cmpltu	r4,r7,r4
   45510:	da400c17 	ldw	r9,48(sp)
   45514:	2489883a 	add	r4,r4,r18
   45518:	d8800717 	ldw	r2,28(sp)
   4551c:	20c9883a 	add	r4,r4,r3
   45520:	da800b17 	ldw	r10,44(sp)
   45524:	d8c00617 	ldw	r3,24(sp)
   45528:	3a11883a 	add	r8,r7,r8
   4552c:	4885883a 	add	r2,r9,r2
   45530:	50c6c03a 	cmpne	r3,r10,r3
   45534:	41cf803a 	cmpltu	r7,r8,r7
   45538:	12400104 	addi	r9,r2,4
   4553c:	d8c00115 	stw	r3,4(sp)
   45540:	3909883a 	add	r4,r7,r4
   45544:	da400215 	stw	r9,8(sp)
   45548:	03480034 	movhi	r13,8192
   4554c:	6b7fffc4 	addi	r13,r13,-1
   45550:	4007883a 	mov	r3,r8
   45554:	6900102e 	bgeu	r13,r4,45598 <__muldf3+0x234>
   45558:	10800144 	addi	r2,r2,5
   4555c:	180ed07a 	srli	r7,r3,1
   45560:	18c0004c 	andi	r3,r3,1
   45564:	201097fa 	slli	r8,r4,31
   45568:	281697fa 	slli	r11,r5,31
   4556c:	2008d07a 	srli	r4,r4,1
   45570:	3014d07a 	srli	r10,r6,1
   45574:	2812d07a 	srli	r9,r5,1
   45578:	1019883a 	mov	r12,r2
   4557c:	18000226 	beq	r3,zero,45588 <__muldf3+0x224>
   45580:	5a8cb03a 	or	r6,r11,r10
   45584:	49600034 	orhi	r5,r9,32768
   45588:	41c6b03a 	or	r3,r8,r7
   4558c:	10800044 	addi	r2,r2,1
   45590:	693ff236 	bltu	r13,r4,4555c <__muldf3+0x1f8>
   45594:	db000215 	stw	r12,8(sp)
   45598:	03440034 	movhi	r13,4096
   4559c:	6b7fffc4 	addi	r13,r13,-1
   455a0:	69001336 	bltu	r13,r4,455f0 <__muldf3+0x28c>
   455a4:	d8800217 	ldw	r2,8(sp)
   455a8:	10bfffc4 	addi	r2,r2,-1
   455ac:	18d3883a 	add	r9,r3,r3
   455b0:	48c7803a 	cmpltu	r3,r9,r3
   455b4:	2109883a 	add	r4,r4,r4
   455b8:	190f883a 	add	r7,r3,r4
   455bc:	3191883a 	add	r8,r6,r6
   455c0:	4197803a 	cmpltu	r11,r8,r6
   455c4:	2955883a 	add	r10,r5,r5
   455c8:	1019883a 	mov	r12,r2
   455cc:	4807883a 	mov	r3,r9
   455d0:	3809883a 	mov	r4,r7
   455d4:	2800010e 	bge	r5,zero,455dc <__muldf3+0x278>
   455d8:	48c00054 	ori	r3,r9,1
   455dc:	400d883a 	mov	r6,r8
   455e0:	5a8b883a 	add	r5,r11,r10
   455e4:	10bfffc4 	addi	r2,r2,-1
   455e8:	69fff02e 	bgeu	r13,r7,455ac <__muldf3+0x248>
   455ec:	db000215 	stw	r12,8(sp)
   455f0:	18803fcc 	andi	r2,r3,255
   455f4:	01c02004 	movi	r7,128
   455f8:	11c00926 	beq	r2,r7,45620 <__muldf3+0x2bc>
   455fc:	008000c4 	movi	r2,3
   45600:	d9000415 	stw	r4,16(sp)
   45604:	d8c00315 	stw	r3,12(sp)
   45608:	d8800015 	stw	r2,0(sp)
   4560c:	d809883a 	mov	r4,sp
   45610:	003f7006 	br	453d4 <__muldf3+0x70>
   45614:	0011883a 	mov	r8,zero
   45618:	00c00044 	movi	r3,1
   4561c:	003fb606 	br	454f8 <__muldf3+0x194>
   45620:	19c0400c 	andi	r7,r3,256
   45624:	383ff51e 	bne	r7,zero,455fc <__muldf3+0x298>
   45628:	314ab03a 	or	r5,r6,r5
   4562c:	283ff326 	beq	r5,zero,455fc <__muldf3+0x298>
   45630:	1885883a 	add	r2,r3,r2
   45634:	10cb803a 	cmpltu	r5,r2,r3
   45638:	00ffc004 	movi	r3,-256
   4563c:	10c6703a 	and	r3,r2,r3
   45640:	2909883a 	add	r4,r5,r4
   45644:	003fed06 	br	455fc <__muldf3+0x298>

00045648 <__divdf3>:
   45648:	defff104 	addi	sp,sp,-60
   4564c:	d9000c15 	stw	r4,48(sp)
   45650:	d9400d15 	stw	r5,52(sp)
   45654:	d9000c04 	addi	r4,sp,48
   45658:	d9400504 	addi	r5,sp,20
   4565c:	dfc00e15 	stw	ra,56(sp)
   45660:	d9800a15 	stw	r6,40(sp)
   45664:	d9c00b15 	stw	r7,44(sp)
   45668:	00461540 	call	46154 <__unpack_d>
   4566c:	d9000a04 	addi	r4,sp,40
   45670:	d80b883a 	mov	r5,sp
   45674:	00461540 	call	46154 <__unpack_d>
   45678:	d8c00517 	ldw	r3,20(sp)
   4567c:	00800044 	movi	r2,1
   45680:	10c00536 	bltu	r2,r3,45698 <__divdf3+0x50>
   45684:	d9000504 	addi	r4,sp,20
   45688:	0045f300 	call	45f30 <__pack_d>
   4568c:	dfc00e17 	ldw	ra,56(sp)
   45690:	dec00f04 	addi	sp,sp,60
   45694:	f800283a 	ret
   45698:	d9000017 	ldw	r4,0(sp)
   4569c:	11000536 	bltu	r2,r4,456b4 <__divdf3+0x6c>
   456a0:	d809883a 	mov	r4,sp
   456a4:	0045f300 	call	45f30 <__pack_d>
   456a8:	dfc00e17 	ldw	ra,56(sp)
   456ac:	dec00f04 	addi	sp,sp,60
   456b0:	f800283a 	ret
   456b4:	d9800617 	ldw	r6,24(sp)
   456b8:	d9400117 	ldw	r5,4(sp)
   456bc:	00800104 	movi	r2,4
   456c0:	314af03a 	xor	r5,r6,r5
   456c4:	d9400615 	stw	r5,24(sp)
   456c8:	18800226 	beq	r3,r2,456d4 <__divdf3+0x8c>
   456cc:	01400084 	movi	r5,2
   456d0:	1940041e 	bne	r3,r5,456e4 <__divdf3+0x9c>
   456d4:	193feb1e 	bne	r3,r4,45684 <__divdf3+0x3c>
   456d8:	01000174 	movhi	r4,5
   456dc:	21064104 	addi	r4,r4,6404
   456e0:	003fe906 	br	45688 <__divdf3+0x40>
   456e4:	20803326 	beq	r4,r2,457b4 <__divdf3+0x16c>
   456e8:	21403726 	beq	r4,r5,457c8 <__divdf3+0x180>
   456ec:	d8800217 	ldw	r2,8(sp)
   456f0:	d9000717 	ldw	r4,28(sp)
   456f4:	d8c00917 	ldw	r3,36(sp)
   456f8:	da000417 	ldw	r8,16(sp)
   456fc:	2089c83a 	sub	r4,r4,r2
   45700:	d9000715 	stw	r4,28(sp)
   45704:	d8800817 	ldw	r2,32(sp)
   45708:	dbc00317 	ldw	r15,12(sp)
   4570c:	1a000236 	bltu	r3,r8,45718 <__divdf3+0xd0>
   45710:	40c0081e 	bne	r8,r3,45734 <__divdf3+0xec>
   45714:	13c0072e 	bgeu	r2,r15,45734 <__divdf3+0xec>
   45718:	108b883a 	add	r5,r2,r2
   4571c:	288d803a 	cmpltu	r6,r5,r2
   45720:	18c7883a 	add	r3,r3,r3
   45724:	213fffc4 	addi	r4,r4,-1
   45728:	2805883a 	mov	r2,r5
   4572c:	30c7883a 	add	r3,r6,r3
   45730:	d9000715 	stw	r4,28(sp)
   45734:	01400f44 	movi	r5,61
   45738:	000f883a 	mov	r7,zero
   4573c:	01040034 	movhi	r4,4096
   45740:	0019883a 	mov	r12,zero
   45744:	001b883a 	mov	r13,zero
   45748:	201697fa 	slli	r11,r4,31
   4574c:	3814d07a 	srli	r10,r7,1
   45750:	297fffc4 	addi	r5,r5,-1
   45754:	1a000936 	bltu	r3,r8,4577c <__divdf3+0x134>
   45758:	13cdc83a 	sub	r6,r2,r15
   4575c:	1193803a 	cmpltu	r9,r2,r6
   45760:	1a1dc83a 	sub	r14,r3,r8
   45764:	40c0011e 	bne	r8,r3,4576c <__divdf3+0x124>
   45768:	13c00436 	bltu	r2,r15,4577c <__divdf3+0x134>
   4576c:	3005883a 	mov	r2,r6
   45770:	7247c83a 	sub	r3,r14,r9
   45774:	61d8b03a 	or	r12,r12,r7
   45778:	691ab03a 	or	r13,r13,r4
   4577c:	108d883a 	add	r6,r2,r2
   45780:	3093803a 	cmpltu	r9,r6,r2
   45784:	18c7883a 	add	r3,r3,r3
   45788:	5a8eb03a 	or	r7,r11,r10
   4578c:	2008d07a 	srli	r4,r4,1
   45790:	3005883a 	mov	r2,r6
   45794:	48c7883a 	add	r3,r9,r3
   45798:	283feb1e 	bne	r5,zero,45748 <__divdf3+0x100>
   4579c:	61003fcc 	andi	r4,r12,255
   457a0:	01402004 	movi	r5,128
   457a4:	21400b26 	beq	r4,r5,457d4 <__divdf3+0x18c>
   457a8:	db000815 	stw	r12,32(sp)
   457ac:	db400915 	stw	r13,36(sp)
   457b0:	003fb406 	br	45684 <__divdf3+0x3c>
   457b4:	d8000815 	stw	zero,32(sp)
   457b8:	d8000915 	stw	zero,36(sp)
   457bc:	d8000715 	stw	zero,28(sp)
   457c0:	d9000504 	addi	r4,sp,20
   457c4:	003fb006 	br	45688 <__divdf3+0x40>
   457c8:	d8800515 	stw	r2,20(sp)
   457cc:	d9000504 	addi	r4,sp,20
   457d0:	003fad06 	br	45688 <__divdf3+0x40>
   457d4:	6140400c 	andi	r5,r12,256
   457d8:	283ff31e 	bne	r5,zero,457a8 <__divdf3+0x160>
   457dc:	30c4b03a 	or	r2,r6,r3
   457e0:	103ff126 	beq	r2,zero,457a8 <__divdf3+0x160>
   457e4:	6109883a 	add	r4,r12,r4
   457e8:	2305803a 	cmpltu	r2,r4,r12
   457ec:	033fc004 	movi	r12,-256
   457f0:	2318703a 	and	r12,r4,r12
   457f4:	135b883a 	add	r13,r2,r13
   457f8:	003feb06 	br	457a8 <__divdf3+0x160>

000457fc <__eqdf2>:
   457fc:	defff104 	addi	sp,sp,-60
   45800:	d9000c15 	stw	r4,48(sp)
   45804:	d9400d15 	stw	r5,52(sp)
   45808:	d9000c04 	addi	r4,sp,48
   4580c:	d9400504 	addi	r5,sp,20
   45810:	dfc00e15 	stw	ra,56(sp)
   45814:	d9800a15 	stw	r6,40(sp)
   45818:	d9c00b15 	stw	r7,44(sp)
   4581c:	00461540 	call	46154 <__unpack_d>
   45820:	d9000a04 	addi	r4,sp,40
   45824:	d80b883a 	mov	r5,sp
   45828:	00461540 	call	46154 <__unpack_d>
   4582c:	d8c00517 	ldw	r3,20(sp)
   45830:	00800044 	movi	r2,1
   45834:	10c0052e 	bgeu	r2,r3,4584c <__eqdf2+0x50>
   45838:	d8c00017 	ldw	r3,0(sp)
   4583c:	10c0032e 	bgeu	r2,r3,4584c <__eqdf2+0x50>
   45840:	d9000504 	addi	r4,sp,20
   45844:	d80b883a 	mov	r5,sp
   45848:	00462580 	call	46258 <__fpcmp_parts_d>
   4584c:	dfc00e17 	ldw	ra,56(sp)
   45850:	dec00f04 	addi	sp,sp,60
   45854:	f800283a 	ret

00045858 <__gtdf2>:
   45858:	defff104 	addi	sp,sp,-60
   4585c:	d9000c15 	stw	r4,48(sp)
   45860:	d9400d15 	stw	r5,52(sp)
   45864:	d9000c04 	addi	r4,sp,48
   45868:	d9400504 	addi	r5,sp,20
   4586c:	dfc00e15 	stw	ra,56(sp)
   45870:	d9800a15 	stw	r6,40(sp)
   45874:	d9c00b15 	stw	r7,44(sp)
   45878:	00461540 	call	46154 <__unpack_d>
   4587c:	d9000a04 	addi	r4,sp,40
   45880:	d80b883a 	mov	r5,sp
   45884:	00461540 	call	46154 <__unpack_d>
   45888:	d8c00517 	ldw	r3,20(sp)
   4588c:	00800044 	movi	r2,1
   45890:	10c0082e 	bgeu	r2,r3,458b4 <__gtdf2+0x5c>
   45894:	d8c00017 	ldw	r3,0(sp)
   45898:	10c0062e 	bgeu	r2,r3,458b4 <__gtdf2+0x5c>
   4589c:	d9000504 	addi	r4,sp,20
   458a0:	d80b883a 	mov	r5,sp
   458a4:	00462580 	call	46258 <__fpcmp_parts_d>
   458a8:	dfc00e17 	ldw	ra,56(sp)
   458ac:	dec00f04 	addi	sp,sp,60
   458b0:	f800283a 	ret
   458b4:	00bfffc4 	movi	r2,-1
   458b8:	003ffb06 	br	458a8 <__gtdf2+0x50>

000458bc <__gedf2>:
   458bc:	defff104 	addi	sp,sp,-60
   458c0:	d9000c15 	stw	r4,48(sp)
   458c4:	d9400d15 	stw	r5,52(sp)
   458c8:	d9000c04 	addi	r4,sp,48
   458cc:	d9400504 	addi	r5,sp,20
   458d0:	dfc00e15 	stw	ra,56(sp)
   458d4:	d9800a15 	stw	r6,40(sp)
   458d8:	d9c00b15 	stw	r7,44(sp)
   458dc:	00461540 	call	46154 <__unpack_d>
   458e0:	d9000a04 	addi	r4,sp,40
   458e4:	d80b883a 	mov	r5,sp
   458e8:	00461540 	call	46154 <__unpack_d>
   458ec:	d8c00517 	ldw	r3,20(sp)
   458f0:	00800044 	movi	r2,1
   458f4:	10c0082e 	bgeu	r2,r3,45918 <__gedf2+0x5c>
   458f8:	d8c00017 	ldw	r3,0(sp)
   458fc:	10c0062e 	bgeu	r2,r3,45918 <__gedf2+0x5c>
   45900:	d9000504 	addi	r4,sp,20
   45904:	d80b883a 	mov	r5,sp
   45908:	00462580 	call	46258 <__fpcmp_parts_d>
   4590c:	dfc00e17 	ldw	ra,56(sp)
   45910:	dec00f04 	addi	sp,sp,60
   45914:	f800283a 	ret
   45918:	00bfffc4 	movi	r2,-1
   4591c:	003ffb06 	br	4590c <__gedf2+0x50>

00045920 <__floatsidf>:
   45920:	2004d7fa 	srli	r2,r4,31
   45924:	defff904 	addi	sp,sp,-28
   45928:	00c000c4 	movi	r3,3
   4592c:	dfc00615 	stw	ra,24(sp)
   45930:	dc000515 	stw	r16,20(sp)
   45934:	d8c00015 	stw	r3,0(sp)
   45938:	d8800115 	stw	r2,4(sp)
   4593c:	2000081e 	bne	r4,zero,45960 <__floatsidf+0x40>
   45940:	00800084 	movi	r2,2
   45944:	d8800015 	stw	r2,0(sp)
   45948:	d809883a 	mov	r4,sp
   4594c:	0045f300 	call	45f30 <__pack_d>
   45950:	dfc00617 	ldw	ra,24(sp)
   45954:	dc000517 	ldw	r16,20(sp)
   45958:	dec00704 	addi	sp,sp,28
   4595c:	f800283a 	ret
   45960:	00c00f04 	movi	r3,60
   45964:	d8c00215 	stw	r3,8(sp)
   45968:	10000f1e 	bne	r2,zero,459a8 <__floatsidf+0x88>
   4596c:	2021883a 	mov	r16,r4
   45970:	8009883a 	mov	r4,r16
   45974:	0045c900 	call	45c90 <__clzsi2>
   45978:	11000744 	addi	r4,r2,29
   4597c:	0100110e 	bge	zero,r4,459c4 <__floatsidf+0xa4>
   45980:	10ffff44 	addi	r3,r2,-3
   45984:	18001216 	blt	r3,zero,459d0 <__floatsidf+0xb0>
   45988:	80c6983a 	sll	r3,r16,r3
   4598c:	0009883a 	mov	r4,zero
   45990:	014007c4 	movi	r5,31
   45994:	2885c83a 	sub	r2,r5,r2
   45998:	d9000315 	stw	r4,12(sp)
   4599c:	d8c00415 	stw	r3,16(sp)
   459a0:	d8800215 	stw	r2,8(sp)
   459a4:	003fe806 	br	45948 <__floatsidf+0x28>
   459a8:	00a00034 	movhi	r2,32768
   459ac:	20800e26 	beq	r4,r2,459e8 <__floatsidf+0xc8>
   459b0:	0121c83a 	sub	r16,zero,r4
   459b4:	8009883a 	mov	r4,r16
   459b8:	0045c900 	call	45c90 <__clzsi2>
   459bc:	11000744 	addi	r4,r2,29
   459c0:	013fef16 	blt	zero,r4,45980 <__floatsidf+0x60>
   459c4:	dc000315 	stw	r16,12(sp)
   459c8:	d8000415 	stw	zero,16(sp)
   459cc:	003fde06 	br	45948 <__floatsidf+0x28>
   459d0:	800ad07a 	srli	r5,r16,1
   459d4:	00c007c4 	movi	r3,31
   459d8:	1907c83a 	sub	r3,r3,r4
   459dc:	28c6d83a 	srl	r3,r5,r3
   459e0:	8108983a 	sll	r4,r16,r4
   459e4:	003fea06 	br	45990 <__floatsidf+0x70>
   459e8:	0005883a 	mov	r2,zero
   459ec:	00f07834 	movhi	r3,49632
   459f0:	003fd706 	br	45950 <__floatsidf+0x30>

000459f4 <__fixdfsi>:
   459f4:	defff804 	addi	sp,sp,-32
   459f8:	d9000515 	stw	r4,20(sp)
   459fc:	d9400615 	stw	r5,24(sp)
   45a00:	d9000504 	addi	r4,sp,20
   45a04:	d80b883a 	mov	r5,sp
   45a08:	dfc00715 	stw	ra,28(sp)
   45a0c:	00461540 	call	46154 <__unpack_d>
   45a10:	d8800017 	ldw	r2,0(sp)
   45a14:	00c00084 	movi	r3,2
   45a18:	10c01c26 	beq	r2,r3,45a8c <__fixdfsi+0x98>
   45a1c:	00c00044 	movi	r3,1
   45a20:	18801a2e 	bgeu	r3,r2,45a8c <__fixdfsi+0x98>
   45a24:	00c00104 	movi	r3,4
   45a28:	10c01126 	beq	r2,r3,45a70 <__fixdfsi+0x7c>
   45a2c:	d8800217 	ldw	r2,8(sp)
   45a30:	10001616 	blt	r2,zero,45a8c <__fixdfsi+0x98>
   45a34:	00c00784 	movi	r3,30
   45a38:	18800d16 	blt	r3,r2,45a70 <__fixdfsi+0x7c>
   45a3c:	00c00f04 	movi	r3,60
   45a40:	1885c83a 	sub	r2,r3,r2
   45a44:	10fff804 	addi	r3,r2,-32
   45a48:	d9400317 	ldw	r5,12(sp)
   45a4c:	d9000417 	ldw	r4,16(sp)
   45a50:	18001616 	blt	r3,zero,45aac <__fixdfsi+0xb8>
   45a54:	20c4d83a 	srl	r2,r4,r3
   45a58:	d8c00117 	ldw	r3,4(sp)
   45a5c:	18000126 	beq	r3,zero,45a64 <__fixdfsi+0x70>
   45a60:	0085c83a 	sub	r2,zero,r2
   45a64:	dfc00717 	ldw	ra,28(sp)
   45a68:	dec00804 	addi	sp,sp,32
   45a6c:	f800283a 	ret
   45a70:	d8800117 	ldw	r2,4(sp)
   45a74:	1000091e 	bne	r2,zero,45a9c <__fixdfsi+0xa8>
   45a78:	00a00034 	movhi	r2,32768
   45a7c:	10bfffc4 	addi	r2,r2,-1
   45a80:	dfc00717 	ldw	ra,28(sp)
   45a84:	dec00804 	addi	sp,sp,32
   45a88:	f800283a 	ret
   45a8c:	0005883a 	mov	r2,zero
   45a90:	dfc00717 	ldw	ra,28(sp)
   45a94:	dec00804 	addi	sp,sp,32
   45a98:	f800283a 	ret
   45a9c:	00a00034 	movhi	r2,32768
   45aa0:	dfc00717 	ldw	ra,28(sp)
   45aa4:	dec00804 	addi	sp,sp,32
   45aa8:	f800283a 	ret
   45aac:	2008907a 	slli	r4,r4,1
   45ab0:	018007c4 	movi	r6,31
   45ab4:	308dc83a 	sub	r6,r6,r2
   45ab8:	2188983a 	sll	r4,r4,r6
   45abc:	2884d83a 	srl	r2,r5,r2
   45ac0:	2084b03a 	or	r2,r4,r2
   45ac4:	003fe406 	br	45a58 <__fixdfsi+0x64>

00045ac8 <__make_dp>:
   45ac8:	defff904 	addi	sp,sp,-28
   45acc:	d8800717 	ldw	r2,28(sp)
   45ad0:	d9000015 	stw	r4,0(sp)
   45ad4:	d809883a 	mov	r4,sp
   45ad8:	dfc00515 	stw	ra,20(sp)
   45adc:	d9c00615 	stw	r7,24(sp)
   45ae0:	d9400115 	stw	r5,4(sp)
   45ae4:	d9800215 	stw	r6,8(sp)
   45ae8:	d9c00315 	stw	r7,12(sp)
   45aec:	d8800415 	stw	r2,16(sp)
   45af0:	0045f300 	call	45f30 <__pack_d>
   45af4:	dfc00517 	ldw	ra,20(sp)
   45af8:	dec00704 	addi	sp,sp,28
   45afc:	f800283a 	ret

00045b00 <udivmodsi4>:
   45b00:	2005883a 	mov	r2,r4
   45b04:	2900182e 	bgeu	r5,r4,45b68 <udivmodsi4+0x68>
   45b08:	28001716 	blt	r5,zero,45b68 <udivmodsi4+0x68>
   45b0c:	01000804 	movi	r4,32
   45b10:	00c00044 	movi	r3,1
   45b14:	00000206 	br	45b20 <udivmodsi4+0x20>
   45b18:	20001126 	beq	r4,zero,45b60 <udivmodsi4+0x60>
   45b1c:	28000516 	blt	r5,zero,45b34 <udivmodsi4+0x34>
   45b20:	294b883a 	add	r5,r5,r5
   45b24:	213fffc4 	addi	r4,r4,-1
   45b28:	18c7883a 	add	r3,r3,r3
   45b2c:	28bffa36 	bltu	r5,r2,45b18 <udivmodsi4+0x18>
   45b30:	18000b26 	beq	r3,zero,45b60 <udivmodsi4+0x60>
   45b34:	0009883a 	mov	r4,zero
   45b38:	11400236 	bltu	r2,r5,45b44 <udivmodsi4+0x44>
   45b3c:	1145c83a 	sub	r2,r2,r5
   45b40:	20c8b03a 	or	r4,r4,r3
   45b44:	1806d07a 	srli	r3,r3,1
   45b48:	280ad07a 	srli	r5,r5,1
   45b4c:	183ffa1e 	bne	r3,zero,45b38 <udivmodsi4+0x38>
   45b50:	3000021e 	bne	r6,zero,45b5c <udivmodsi4+0x5c>
   45b54:	2005883a 	mov	r2,r4
   45b58:	f800283a 	ret
   45b5c:	f800283a 	ret
   45b60:	0009883a 	mov	r4,zero
   45b64:	003ffa06 	br	45b50 <udivmodsi4+0x50>
   45b68:	00c00044 	movi	r3,1
   45b6c:	0009883a 	mov	r4,zero
   45b70:	003ff106 	br	45b38 <udivmodsi4+0x38>

00045b74 <__divsi3>:
   45b74:	defffe04 	addi	sp,sp,-8
   45b78:	dfc00115 	stw	ra,4(sp)
   45b7c:	dc000015 	stw	r16,0(sp)
   45b80:	20000a16 	blt	r4,zero,45bac <__divsi3+0x38>
   45b84:	0021883a 	mov	r16,zero
   45b88:	28000b16 	blt	r5,zero,45bb8 <__divsi3+0x44>
   45b8c:	000d883a 	mov	r6,zero
   45b90:	0045b000 	call	45b00 <udivmodsi4>
   45b94:	80000126 	beq	r16,zero,45b9c <__divsi3+0x28>
   45b98:	0085c83a 	sub	r2,zero,r2
   45b9c:	dfc00117 	ldw	ra,4(sp)
   45ba0:	dc000017 	ldw	r16,0(sp)
   45ba4:	dec00204 	addi	sp,sp,8
   45ba8:	f800283a 	ret
   45bac:	0109c83a 	sub	r4,zero,r4
   45bb0:	04000044 	movi	r16,1
   45bb4:	283ff50e 	bge	r5,zero,45b8c <__divsi3+0x18>
   45bb8:	014bc83a 	sub	r5,zero,r5
   45bbc:	8400005c 	xori	r16,r16,1
   45bc0:	003ff206 	br	45b8c <__divsi3+0x18>

00045bc4 <__modsi3>:
   45bc4:	deffff04 	addi	sp,sp,-4
   45bc8:	dfc00015 	stw	ra,0(sp)
   45bcc:	20000516 	blt	r4,zero,45be4 <__modsi3+0x20>
   45bd0:	28000c16 	blt	r5,zero,45c04 <__modsi3+0x40>
   45bd4:	01800044 	movi	r6,1
   45bd8:	dfc00017 	ldw	ra,0(sp)
   45bdc:	dec00104 	addi	sp,sp,4
   45be0:	0045b001 	jmpi	45b00 <udivmodsi4>
   45be4:	0109c83a 	sub	r4,zero,r4
   45be8:	28000b16 	blt	r5,zero,45c18 <__modsi3+0x54>
   45bec:	01800044 	movi	r6,1
   45bf0:	0045b000 	call	45b00 <udivmodsi4>
   45bf4:	0085c83a 	sub	r2,zero,r2
   45bf8:	dfc00017 	ldw	ra,0(sp)
   45bfc:	dec00104 	addi	sp,sp,4
   45c00:	f800283a 	ret
   45c04:	014bc83a 	sub	r5,zero,r5
   45c08:	01800044 	movi	r6,1
   45c0c:	dfc00017 	ldw	ra,0(sp)
   45c10:	dec00104 	addi	sp,sp,4
   45c14:	0045b001 	jmpi	45b00 <udivmodsi4>
   45c18:	014bc83a 	sub	r5,zero,r5
   45c1c:	003ff306 	br	45bec <__modsi3+0x28>

00045c20 <__udivsi3>:
   45c20:	000d883a 	mov	r6,zero
   45c24:	0045b001 	jmpi	45b00 <udivmodsi4>

00045c28 <__umodsi3>:
   45c28:	01800044 	movi	r6,1
   45c2c:	0045b001 	jmpi	45b00 <udivmodsi4>

00045c30 <__muldi3>:
   45c30:	20bfffcc 	andi	r2,r4,65535
   45c34:	2010d43a 	srli	r8,r4,16
   45c38:	30ffffcc 	andi	r3,r6,65535
   45c3c:	3014d43a 	srli	r10,r6,16
   45c40:	1893383a 	mul	r9,r3,r2
   45c44:	1a07383a 	mul	r3,r3,r8
   45c48:	5085383a 	mul	r2,r10,r2
   45c4c:	4816d43a 	srli	r11,r9,16
   45c50:	5211383a 	mul	r8,r10,r8
   45c54:	1885883a 	add	r2,r3,r2
   45c58:	12c5883a 	add	r2,r2,r11
   45c5c:	10c0022e 	bgeu	r2,r3,45c68 <__muldi3+0x38>
   45c60:	00c00074 	movhi	r3,1
   45c64:	40d1883a 	add	r8,r8,r3
   45c68:	1014d43a 	srli	r10,r2,16
   45c6c:	21c9383a 	mul	r4,r4,r7
   45c70:	314d383a 	mul	r6,r6,r5
   45c74:	1004943a 	slli	r2,r2,16
   45c78:	4291883a 	add	r8,r8,r10
   45c7c:	4a7fffcc 	andi	r9,r9,65535
   45c80:	2187883a 	add	r3,r4,r6
   45c84:	1245883a 	add	r2,r2,r9
   45c88:	1a07883a 	add	r3,r3,r8
   45c8c:	f800283a 	ret

00045c90 <__clzsi2>:
   45c90:	00bfffd4 	movui	r2,65535
   45c94:	11000b36 	bltu	r2,r4,45cc4 <__clzsi2+0x34>
   45c98:	00803fc4 	movi	r2,255
   45c9c:	11001e2e 	bgeu	r2,r4,45d18 <__clzsi2+0x88>
   45ca0:	00c00204 	movi	r3,8
   45ca4:	20c8d83a 	srl	r4,r4,r3
   45ca8:	00c00174 	movhi	r3,5
   45cac:	18c64604 	addi	r3,r3,6424
   45cb0:	00800604 	movi	r2,24
   45cb4:	1909883a 	add	r4,r3,r4
   45cb8:	20c00003 	ldbu	r3,0(r4)
   45cbc:	10c5c83a 	sub	r2,r2,r3
   45cc0:	f800283a 	ret
   45cc4:	00804034 	movhi	r2,256
   45cc8:	10bfffc4 	addi	r2,r2,-1
   45ccc:	11000936 	bltu	r2,r4,45cf4 <__clzsi2+0x64>
   45cd0:	00800404 	movi	r2,16
   45cd4:	1007883a 	mov	r3,r2
   45cd8:	20c8d83a 	srl	r4,r4,r3
   45cdc:	00c00174 	movhi	r3,5
   45ce0:	18c64604 	addi	r3,r3,6424
   45ce4:	1909883a 	add	r4,r3,r4
   45ce8:	20c00003 	ldbu	r3,0(r4)
   45cec:	10c5c83a 	sub	r2,r2,r3
   45cf0:	f800283a 	ret
   45cf4:	00c00604 	movi	r3,24
   45cf8:	20c8d83a 	srl	r4,r4,r3
   45cfc:	00c00174 	movhi	r3,5
   45d00:	18c64604 	addi	r3,r3,6424
   45d04:	00800204 	movi	r2,8
   45d08:	1909883a 	add	r4,r3,r4
   45d0c:	20c00003 	ldbu	r3,0(r4)
   45d10:	10c5c83a 	sub	r2,r2,r3
   45d14:	f800283a 	ret
   45d18:	0007883a 	mov	r3,zero
   45d1c:	20c8d83a 	srl	r4,r4,r3
   45d20:	00c00174 	movhi	r3,5
   45d24:	18c64604 	addi	r3,r3,6424
   45d28:	00800804 	movi	r2,32
   45d2c:	1909883a 	add	r4,r3,r4
   45d30:	20c00003 	ldbu	r3,0(r4)
   45d34:	10c5c83a 	sub	r2,r2,r3
   45d38:	f800283a 	ret

00045d3c <__pack_f>:
   45d3c:	21400017 	ldw	r5,0(r4)
   45d40:	01800044 	movi	r6,1
   45d44:	20c00317 	ldw	r3,12(r4)
   45d48:	21c00117 	ldw	r7,4(r4)
   45d4c:	3140282e 	bgeu	r6,r5,45df0 <__pack_f+0xb4>
   45d50:	00800104 	movi	r2,4
   45d54:	28802326 	beq	r5,r2,45de4 <__pack_f+0xa8>
   45d58:	00800084 	movi	r2,2
   45d5c:	28800f26 	beq	r5,r2,45d9c <__pack_f+0x60>
   45d60:	18000e26 	beq	r3,zero,45d9c <__pack_f+0x60>
   45d64:	21000217 	ldw	r4,8(r4)
   45d68:	00bfe084 	movi	r2,-126
   45d6c:	20802616 	blt	r4,r2,45e08 <__pack_f+0xcc>
   45d70:	00801fc4 	movi	r2,127
   45d74:	11001b16 	blt	r2,r4,45de4 <__pack_f+0xa8>
   45d78:	188a703a 	and	r5,r3,r2
   45d7c:	00801004 	movi	r2,64
   45d80:	28801126 	beq	r5,r2,45dc8 <__pack_f+0x8c>
   45d84:	18c00fc4 	addi	r3,r3,63
   45d88:	18001316 	blt	r3,zero,45dd8 <__pack_f+0x9c>
   45d8c:	21001fc4 	addi	r4,r4,127
   45d90:	180690ba 	slli	r3,r3,2
   45d94:	1806d27a 	srli	r3,r3,9
   45d98:	00000206 	br	45da4 <__pack_f+0x68>
   45d9c:	0009883a 	mov	r4,zero
   45da0:	0007883a 	mov	r3,zero
   45da4:	21003fcc 	andi	r4,r4,255
   45da8:	200895fa 	slli	r4,r4,23
   45dac:	380a97fa 	slli	r5,r7,31
   45db0:	00802034 	movhi	r2,128
   45db4:	10bfffc4 	addi	r2,r2,-1
   45db8:	1886703a 	and	r3,r3,r2
   45dbc:	1904b03a 	or	r2,r3,r4
   45dc0:	1144b03a 	or	r2,r2,r5
   45dc4:	f800283a 	ret
   45dc8:	1880200c 	andi	r2,r3,128
   45dcc:	103fee26 	beq	r2,zero,45d88 <__pack_f+0x4c>
   45dd0:	18c01004 	addi	r3,r3,64
   45dd4:	183fed0e 	bge	r3,zero,45d8c <__pack_f+0x50>
   45dd8:	1806d07a 	srli	r3,r3,1
   45ddc:	21002004 	addi	r4,r4,128
   45de0:	003feb06 	br	45d90 <__pack_f+0x54>
   45de4:	013fffc4 	movi	r4,-1
   45de8:	0007883a 	mov	r3,zero
   45dec:	003fed06 	br	45da4 <__pack_f+0x68>
   45df0:	18c00434 	orhi	r3,r3,16
   45df4:	00802034 	movhi	r2,128
   45df8:	10bfffc4 	addi	r2,r2,-1
   45dfc:	1886703a 	and	r3,r3,r2
   45e00:	013fffc4 	movi	r4,-1
   45e04:	003fe706 	br	45da4 <__pack_f+0x68>
   45e08:	1105c83a 	sub	r2,r2,r4
   45e0c:	01000644 	movi	r4,25
   45e10:	20801216 	blt	r4,r2,45e5c <__pack_f+0x120>
   45e14:	3088983a 	sll	r4,r6,r2
   45e18:	1884d83a 	srl	r2,r3,r2
   45e1c:	213fffc4 	addi	r4,r4,-1
   45e20:	20c6703a 	and	r3,r4,r3
   45e24:	1806c03a 	cmpne	r3,r3,zero
   45e28:	1884b03a 	or	r2,r3,r2
   45e2c:	11001fcc 	andi	r4,r2,127
   45e30:	00c01004 	movi	r3,64
   45e34:	20c00a1e 	bne	r4,r3,45e60 <__pack_f+0x124>
   45e38:	10c0200c 	andi	r3,r2,128
   45e3c:	18000126 	beq	r3,zero,45e44 <__pack_f+0x108>
   45e40:	10801004 	addi	r2,r2,64
   45e44:	100690ba 	slli	r3,r2,2
   45e48:	01100034 	movhi	r4,16384
   45e4c:	1105403a 	cmpgeu	r2,r2,r4
   45e50:	1806d27a 	srli	r3,r3,9
   45e54:	1009883a 	mov	r4,r2
   45e58:	003fd206 	br	45da4 <__pack_f+0x68>
   45e5c:	0005883a 	mov	r2,zero
   45e60:	10800fc4 	addi	r2,r2,63
   45e64:	003ff706 	br	45e44 <__pack_f+0x108>

00045e68 <__unpack_f>:
   45e68:	20c00017 	ldw	r3,0(r4)
   45e6c:	00802034 	movhi	r2,128
   45e70:	10bfffc4 	addi	r2,r2,-1
   45e74:	1808d5fa 	srli	r4,r3,23
   45e78:	180cd7fa 	srli	r6,r3,31
   45e7c:	1884703a 	and	r2,r3,r2
   45e80:	21003fcc 	andi	r4,r4,255
   45e84:	29800115 	stw	r6,4(r5)
   45e88:	2000111e 	bne	r4,zero,45ed0 <__unpack_f+0x68>
   45e8c:	10001a26 	beq	r2,zero,45ef8 <__unpack_f+0x90>
   45e90:	00ffe084 	movi	r3,-126
   45e94:	100491fa 	slli	r2,r2,7
   45e98:	28c00215 	stw	r3,8(r5)
   45e9c:	00c000c4 	movi	r3,3
   45ea0:	28c00015 	stw	r3,0(r5)
   45ea4:	01900034 	movhi	r6,16384
   45ea8:	31bfffc4 	addi	r6,r6,-1
   45eac:	30801036 	bltu	r6,r2,45ef0 <__unpack_f+0x88>
   45eb0:	00ffe044 	movi	r3,-127
   45eb4:	1085883a 	add	r2,r2,r2
   45eb8:	1809883a 	mov	r4,r3
   45ebc:	18ffffc4 	addi	r3,r3,-1
   45ec0:	30bffc2e 	bgeu	r6,r2,45eb4 <__unpack_f+0x4c>
   45ec4:	29000215 	stw	r4,8(r5)
   45ec8:	28800315 	stw	r2,12(r5)
   45ecc:	f800283a 	ret
   45ed0:	01803fc4 	movi	r6,255
   45ed4:	21800b26 	beq	r4,r6,45f04 <__unpack_f+0x9c>
   45ed8:	100491fa 	slli	r2,r2,7
   45edc:	213fe044 	addi	r4,r4,-127
   45ee0:	00c000c4 	movi	r3,3
   45ee4:	10900034 	orhi	r2,r2,16384
   45ee8:	29000215 	stw	r4,8(r5)
   45eec:	28c00015 	stw	r3,0(r5)
   45ef0:	28800315 	stw	r2,12(r5)
   45ef4:	f800283a 	ret
   45ef8:	00800084 	movi	r2,2
   45efc:	28800015 	stw	r2,0(r5)
   45f00:	f800283a 	ret
   45f04:	10000526 	beq	r2,zero,45f1c <__unpack_f+0xb4>
   45f08:	18c0042c 	andhi	r3,r3,16
   45f0c:	18000626 	beq	r3,zero,45f28 <__unpack_f+0xc0>
   45f10:	00c00044 	movi	r3,1
   45f14:	28c00015 	stw	r3,0(r5)
   45f18:	003ff506 	br	45ef0 <__unpack_f+0x88>
   45f1c:	00800104 	movi	r2,4
   45f20:	28800015 	stw	r2,0(r5)
   45f24:	f800283a 	ret
   45f28:	28000015 	stw	zero,0(r5)
   45f2c:	003ff006 	br	45ef0 <__unpack_f+0x88>

00045f30 <__pack_d>:
   45f30:	20800017 	ldw	r2,0(r4)
   45f34:	defff804 	addi	sp,sp,-32
   45f38:	dcc00315 	stw	r19,12(sp)
   45f3c:	dc800215 	stw	r18,8(sp)
   45f40:	dfc00715 	stw	ra,28(sp)
   45f44:	dd800615 	stw	r22,24(sp)
   45f48:	dd400515 	stw	r21,20(sp)
   45f4c:	dd000415 	stw	r20,16(sp)
   45f50:	dc400115 	stw	r17,4(sp)
   45f54:	dc000015 	stw	r16,0(sp)
   45f58:	04800044 	movi	r18,1
   45f5c:	24400317 	ldw	r17,12(r4)
   45f60:	24000417 	ldw	r16,16(r4)
   45f64:	24c00117 	ldw	r19,4(r4)
   45f68:	9080422e 	bgeu	r18,r2,46074 <__pack_d+0x144>
   45f6c:	00c00104 	movi	r3,4
   45f70:	10c03c26 	beq	r2,r3,46064 <__pack_d+0x134>
   45f74:	00c00084 	movi	r3,2
   45f78:	10c01926 	beq	r2,r3,45fe0 <__pack_d+0xb0>
   45f7c:	8c04b03a 	or	r2,r17,r16
   45f80:	10001726 	beq	r2,zero,45fe0 <__pack_d+0xb0>
   45f84:	21000217 	ldw	r4,8(r4)
   45f88:	00bf0084 	movi	r2,-1022
   45f8c:	20804016 	blt	r4,r2,46090 <__pack_d+0x160>
   45f90:	0080ffc4 	movi	r2,1023
   45f94:	11003316 	blt	r2,r4,46064 <__pack_d+0x134>
   45f98:	88803fcc 	andi	r2,r17,255
   45f9c:	00c02004 	movi	r3,128
   45fa0:	10c02926 	beq	r2,r3,46048 <__pack_d+0x118>
   45fa4:	88801fc4 	addi	r2,r17,127
   45fa8:	1463803a 	cmpltu	r17,r2,r17
   45fac:	8c21883a 	add	r16,r17,r16
   45fb0:	1023883a 	mov	r17,r2
   45fb4:	00880034 	movhi	r2,8192
   45fb8:	10bfffc4 	addi	r2,r2,-1
   45fbc:	14001c36 	bltu	r2,r16,46030 <__pack_d+0x100>
   45fc0:	2100ffc4 	addi	r4,r4,1023
   45fc4:	8006963a 	slli	r3,r16,24
   45fc8:	8804d23a 	srli	r2,r17,8
   45fcc:	8020913a 	slli	r16,r16,4
   45fd0:	2101ffcc 	andi	r4,r4,2047
   45fd4:	1884b03a 	or	r2,r3,r2
   45fd8:	8020d33a 	srli	r16,r16,12
   45fdc:	00000306 	br	45fec <__pack_d+0xbc>
   45fe0:	0009883a 	mov	r4,zero
   45fe4:	0005883a 	mov	r2,zero
   45fe8:	0021883a 	mov	r16,zero
   45fec:	2008953a 	slli	r4,r4,20
   45ff0:	982697fa 	slli	r19,r19,31
   45ff4:	00c00434 	movhi	r3,16
   45ff8:	18ffffc4 	addi	r3,r3,-1
   45ffc:	80e0703a 	and	r16,r16,r3
   46000:	8106b03a 	or	r3,r16,r4
   46004:	1cc6b03a 	or	r3,r3,r19
   46008:	dfc00717 	ldw	ra,28(sp)
   4600c:	dd800617 	ldw	r22,24(sp)
   46010:	dd400517 	ldw	r21,20(sp)
   46014:	dd000417 	ldw	r20,16(sp)
   46018:	dcc00317 	ldw	r19,12(sp)
   4601c:	dc800217 	ldw	r18,8(sp)
   46020:	dc400117 	ldw	r17,4(sp)
   46024:	dc000017 	ldw	r16,0(sp)
   46028:	dec00804 	addi	sp,sp,32
   4602c:	f800283a 	ret
   46030:	800697fa 	slli	r3,r16,31
   46034:	8804d07a 	srli	r2,r17,1
   46038:	21010004 	addi	r4,r4,1024
   4603c:	8020d07a 	srli	r16,r16,1
   46040:	18a2b03a 	or	r17,r3,r2
   46044:	003fdf06 	br	45fc4 <__pack_d+0x94>
   46048:	88c0400c 	andi	r3,r17,256
   4604c:	183fd926 	beq	r3,zero,45fb4 <__pack_d+0x84>
   46050:	8885883a 	add	r2,r17,r2
   46054:	1463803a 	cmpltu	r17,r2,r17
   46058:	8c21883a 	add	r16,r17,r16
   4605c:	1023883a 	mov	r17,r2
   46060:	003fd406 	br	45fb4 <__pack_d+0x84>
   46064:	0101ffc4 	movi	r4,2047
   46068:	0005883a 	mov	r2,zero
   4606c:	0021883a 	mov	r16,zero
   46070:	003fde06 	br	45fec <__pack_d+0xbc>
   46074:	84000234 	orhi	r16,r16,8
   46078:	00c00434 	movhi	r3,16
   4607c:	18ffffc4 	addi	r3,r3,-1
   46080:	8805883a 	mov	r2,r17
   46084:	80e0703a 	and	r16,r16,r3
   46088:	0101ffc4 	movi	r4,2047
   4608c:	003fd706 	br	45fec <__pack_d+0xbc>
   46090:	1129c83a 	sub	r20,r2,r4
   46094:	00800e04 	movi	r2,56
   46098:	15002716 	blt	r2,r20,46138 <__pack_d+0x208>
   4609c:	800b883a 	mov	r5,r16
   460a0:	a00d883a 	mov	r6,r20
   460a4:	8809883a 	mov	r4,r17
   460a8:	00463280 	call	46328 <__lshrdi3>
   460ac:	9009883a 	mov	r4,r18
   460b0:	000b883a 	mov	r5,zero
   460b4:	a00d883a 	mov	r6,r20
   460b8:	102d883a 	mov	r22,r2
   460bc:	182b883a 	mov	r21,r3
   460c0:	004636c0 	call	4636c <__ashldi3>
   460c4:	1009003a 	cmpeq	r4,r2,zero
   460c8:	1907c83a 	sub	r3,r3,r4
   460cc:	10bfffc4 	addi	r2,r2,-1
   460d0:	1c20703a 	and	r16,r3,r16
   460d4:	1444703a 	and	r2,r2,r17
   460d8:	1404b03a 	or	r2,r2,r16
   460dc:	1004c03a 	cmpne	r2,r2,zero
   460e0:	1584b03a 	or	r2,r2,r22
   460e4:	11003fcc 	andi	r4,r2,255
   460e8:	01402004 	movi	r5,128
   460ec:	a807883a 	mov	r3,r21
   460f0:	2140131e 	bne	r4,r5,46140 <__pack_d+0x210>
   460f4:	1140400c 	andi	r5,r2,256
   460f8:	28000426 	beq	r5,zero,4610c <__pack_d+0x1dc>
   460fc:	1109883a 	add	r4,r2,r4
   46100:	2085803a 	cmpltu	r2,r4,r2
   46104:	1547883a 	add	r3,r2,r21
   46108:	2005883a 	mov	r2,r4
   4610c:	1808963a 	slli	r4,r3,24
   46110:	1004d23a 	srli	r2,r2,8
   46114:	1820913a 	slli	r16,r3,4
   46118:	01440034 	movhi	r5,4096
   4611c:	297fffc4 	addi	r5,r5,-1
   46120:	2084b03a 	or	r2,r4,r2
   46124:	8020d33a 	srli	r16,r16,12
   46128:	01000044 	movi	r4,1
   4612c:	28ffaf36 	bltu	r5,r3,45fec <__pack_d+0xbc>
   46130:	0009883a 	mov	r4,zero
   46134:	003fad06 	br	45fec <__pack_d+0xbc>
   46138:	0005883a 	mov	r2,zero
   4613c:	0007883a 	mov	r3,zero
   46140:	11001fc4 	addi	r4,r2,127
   46144:	2085803a 	cmpltu	r2,r4,r2
   46148:	10c7883a 	add	r3,r2,r3
   4614c:	2005883a 	mov	r2,r4
   46150:	003fee06 	br	4610c <__pack_d+0x1dc>

00046154 <__unpack_d>:
   46154:	21800117 	ldw	r6,4(r4)
   46158:	20c00017 	ldw	r3,0(r4)
   4615c:	3004d7fa 	srli	r2,r6,31
   46160:	3008d53a 	srli	r4,r6,20
   46164:	28800115 	stw	r2,4(r5)
   46168:	2101ffcc 	andi	r4,r4,2047
   4616c:	00800434 	movhi	r2,16
   46170:	10bfffc4 	addi	r2,r2,-1
   46174:	3084703a 	and	r2,r6,r2
   46178:	20001a1e 	bne	r4,zero,461e4 <__unpack_d+0x90>
   4617c:	1888b03a 	or	r4,r3,r2
   46180:	20002626 	beq	r4,zero,4621c <__unpack_d+0xc8>
   46184:	1808d63a 	srli	r4,r3,24
   46188:	1004923a 	slli	r2,r2,8
   4618c:	01bf0084 	movi	r6,-1022
   46190:	29800215 	stw	r6,8(r5)
   46194:	2084b03a 	or	r2,r4,r2
   46198:	010000c4 	movi	r4,3
   4619c:	29000015 	stw	r4,0(r5)
   461a0:	02040034 	movhi	r8,4096
   461a4:	423fffc4 	addi	r8,r8,-1
   461a8:	1806923a 	slli	r3,r3,8
   461ac:	40801836 	bltu	r8,r2,46210 <__unpack_d+0xbc>
   461b0:	013f0044 	movi	r4,-1023
   461b4:	18cd883a 	add	r6,r3,r3
   461b8:	30c7803a 	cmpltu	r3,r6,r3
   461bc:	1085883a 	add	r2,r2,r2
   461c0:	1885883a 	add	r2,r3,r2
   461c4:	200f883a 	mov	r7,r4
   461c8:	3007883a 	mov	r3,r6
   461cc:	213fffc4 	addi	r4,r4,-1
   461d0:	40bff82e 	bgeu	r8,r2,461b4 <__unpack_d+0x60>
   461d4:	29c00215 	stw	r7,8(r5)
   461d8:	28c00315 	stw	r3,12(r5)
   461dc:	28800415 	stw	r2,16(r5)
   461e0:	f800283a 	ret
   461e4:	01c1ffc4 	movi	r7,2047
   461e8:	21c00f26 	beq	r4,r7,46228 <__unpack_d+0xd4>
   461ec:	180cd63a 	srli	r6,r3,24
   461f0:	1004923a 	slli	r2,r2,8
   461f4:	213f0044 	addi	r4,r4,-1023
   461f8:	1806923a 	slli	r3,r3,8
   461fc:	3084b03a 	or	r2,r6,r2
   46200:	29000215 	stw	r4,8(r5)
   46204:	010000c4 	movi	r4,3
   46208:	10840034 	orhi	r2,r2,4096
   4620c:	29000015 	stw	r4,0(r5)
   46210:	28c00315 	stw	r3,12(r5)
   46214:	28800415 	stw	r2,16(r5)
   46218:	f800283a 	ret
   4621c:	00800084 	movi	r2,2
   46220:	28800015 	stw	r2,0(r5)
   46224:	f800283a 	ret
   46228:	1888b03a 	or	r4,r3,r2
   4622c:	20000526 	beq	r4,zero,46244 <__unpack_d+0xf0>
   46230:	3180022c 	andhi	r6,r6,8
   46234:	30000626 	beq	r6,zero,46250 <__unpack_d+0xfc>
   46238:	01000044 	movi	r4,1
   4623c:	29000015 	stw	r4,0(r5)
   46240:	003ff306 	br	46210 <__unpack_d+0xbc>
   46244:	00800104 	movi	r2,4
   46248:	28800015 	stw	r2,0(r5)
   4624c:	f800283a 	ret
   46250:	28000015 	stw	zero,0(r5)
   46254:	003fee06 	br	46210 <__unpack_d+0xbc>

00046258 <__fpcmp_parts_d>:
   46258:	20c00017 	ldw	r3,0(r4)
   4625c:	00800044 	movi	r2,1
   46260:	10c0142e 	bgeu	r2,r3,462b4 <__fpcmp_parts_d+0x5c>
   46264:	29800017 	ldw	r6,0(r5)
   46268:	1180122e 	bgeu	r2,r6,462b4 <__fpcmp_parts_d+0x5c>
   4626c:	01c00104 	movi	r7,4
   46270:	19c02826 	beq	r3,r7,46314 <__fpcmp_parts_d+0xbc>
   46274:	31c00926 	beq	r6,r7,4629c <__fpcmp_parts_d+0x44>
   46278:	01c00084 	movi	r7,2
   4627c:	19c00626 	beq	r3,r7,46298 <__fpcmp_parts_d+0x40>
   46280:	31c00a26 	beq	r6,r7,462ac <__fpcmp_parts_d+0x54>
   46284:	20c00117 	ldw	r3,4(r4)
   46288:	29800117 	ldw	r6,4(r5)
   4628c:	19800b26 	beq	r3,r6,462bc <__fpcmp_parts_d+0x64>
   46290:	1800041e 	bne	r3,zero,462a4 <__fpcmp_parts_d+0x4c>
   46294:	f800283a 	ret
   46298:	30c01a26 	beq	r6,r3,46304 <__fpcmp_parts_d+0xac>
   4629c:	28800117 	ldw	r2,4(r5)
   462a0:	1000041e 	bne	r2,zero,462b4 <__fpcmp_parts_d+0x5c>
   462a4:	00bfffc4 	movi	r2,-1
   462a8:	f800283a 	ret
   462ac:	20800117 	ldw	r2,4(r4)
   462b0:	103ffc1e 	bne	r2,zero,462a4 <__fpcmp_parts_d+0x4c>
   462b4:	00800044 	movi	r2,1
   462b8:	f800283a 	ret
   462bc:	21c00217 	ldw	r7,8(r4)
   462c0:	29800217 	ldw	r6,8(r5)
   462c4:	31c0020e 	bge	r6,r7,462d0 <__fpcmp_parts_d+0x78>
   462c8:	183ff61e 	bne	r3,zero,462a4 <__fpcmp_parts_d+0x4c>
   462cc:	f800283a 	ret
   462d0:	39800a16 	blt	r7,r6,462fc <__fpcmp_parts_d+0xa4>
   462d4:	20800417 	ldw	r2,16(r4)
   462d8:	29800417 	ldw	r6,16(r5)
   462dc:	21c00317 	ldw	r7,12(r4)
   462e0:	29000317 	ldw	r4,12(r5)
   462e4:	30800936 	bltu	r6,r2,4630c <__fpcmp_parts_d+0xb4>
   462e8:	1180011e 	bne	r2,r6,462f0 <__fpcmp_parts_d+0x98>
   462ec:	21c00736 	bltu	r4,r7,4630c <__fpcmp_parts_d+0xb4>
   462f0:	11800236 	bltu	r2,r6,462fc <__fpcmp_parts_d+0xa4>
   462f4:	3080031e 	bne	r6,r2,46304 <__fpcmp_parts_d+0xac>
   462f8:	3900022e 	bgeu	r7,r4,46304 <__fpcmp_parts_d+0xac>
   462fc:	183fe926 	beq	r3,zero,462a4 <__fpcmp_parts_d+0x4c>
   46300:	003fec06 	br	462b4 <__fpcmp_parts_d+0x5c>
   46304:	0005883a 	mov	r2,zero
   46308:	f800283a 	ret
   4630c:	183fe926 	beq	r3,zero,462b4 <__fpcmp_parts_d+0x5c>
   46310:	003fe406 	br	462a4 <__fpcmp_parts_d+0x4c>
   46314:	30ffe51e 	bne	r6,r3,462ac <__fpcmp_parts_d+0x54>
   46318:	28c00117 	ldw	r3,4(r5)
   4631c:	20800117 	ldw	r2,4(r4)
   46320:	1885c83a 	sub	r2,r3,r2
   46324:	f800283a 	ret

00046328 <__lshrdi3>:
   46328:	2005883a 	mov	r2,r4
   4632c:	2807883a 	mov	r3,r5
   46330:	30000826 	beq	r6,zero,46354 <__lshrdi3+0x2c>
   46334:	01000804 	movi	r4,32
   46338:	2189c83a 	sub	r4,r4,r6
   4633c:	0100060e 	bge	zero,r4,46358 <__lshrdi3+0x30>
   46340:	1184d83a 	srl	r2,r2,r6
   46344:	2908983a 	sll	r4,r5,r4
   46348:	298cd83a 	srl	r6,r5,r6
   4634c:	2084b03a 	or	r2,r4,r2
   46350:	3007883a 	mov	r3,r6
   46354:	f800283a 	ret
   46358:	0105c83a 	sub	r2,zero,r4
   4635c:	000d883a 	mov	r6,zero
   46360:	2884d83a 	srl	r2,r5,r2
   46364:	3007883a 	mov	r3,r6
   46368:	003ffa06 	br	46354 <__lshrdi3+0x2c>

0004636c <__ashldi3>:
   4636c:	2005883a 	mov	r2,r4
   46370:	2807883a 	mov	r3,r5
   46374:	30000826 	beq	r6,zero,46398 <__ashldi3+0x2c>
   46378:	01000804 	movi	r4,32
   4637c:	2189c83a 	sub	r4,r4,r6
   46380:	0100060e 	bge	zero,r4,4639c <__ashldi3+0x30>
   46384:	1108d83a 	srl	r4,r2,r4
   46388:	2986983a 	sll	r3,r5,r6
   4638c:	118c983a 	sll	r6,r2,r6
   46390:	20c6b03a 	or	r3,r4,r3
   46394:	3005883a 	mov	r2,r6
   46398:	f800283a 	ret
   4639c:	0107c83a 	sub	r3,zero,r4
   463a0:	000d883a 	mov	r6,zero
   463a4:	10c6983a 	sll	r3,r2,r3
   463a8:	3005883a 	mov	r2,r6
   463ac:	003ffa06 	br	46398 <__ashldi3+0x2c>

000463b0 <_puts_r>:
   463b0:	defff604 	addi	sp,sp,-40
   463b4:	dc400815 	stw	r17,32(sp)
   463b8:	2023883a 	mov	r17,r4
   463bc:	2809883a 	mov	r4,r5
   463c0:	dc000715 	stw	r16,28(sp)
   463c4:	dfc00915 	stw	ra,36(sp)
   463c8:	2821883a 	mov	r16,r5
   463cc:	00465980 	call	46598 <strlen>
   463d0:	10c00044 	addi	r3,r2,1
   463d4:	d8800115 	stw	r2,4(sp)
   463d8:	89400217 	ldw	r5,8(r17)
   463dc:	00800174 	movhi	r2,5
   463e0:	10868604 	addi	r2,r2,6680
   463e4:	d8800215 	stw	r2,8(sp)
   463e8:	00800044 	movi	r2,1
   463ec:	d8800315 	stw	r2,12(sp)
   463f0:	8809883a 	mov	r4,r17
   463f4:	00800084 	movi	r2,2
   463f8:	d9800404 	addi	r6,sp,16
   463fc:	dc000015 	stw	r16,0(sp)
   46400:	d8c00615 	stw	r3,24(sp)
   46404:	dec00415 	stw	sp,16(sp)
   46408:	d8800515 	stw	r2,20(sp)
   4640c:	004a7080 	call	4a708 <__sfvwrite_r>
   46410:	1000061e 	bne	r2,zero,4642c <_puts_r+0x7c>
   46414:	00800284 	movi	r2,10
   46418:	dfc00917 	ldw	ra,36(sp)
   4641c:	dc400817 	ldw	r17,32(sp)
   46420:	dc000717 	ldw	r16,28(sp)
   46424:	dec00a04 	addi	sp,sp,40
   46428:	f800283a 	ret
   4642c:	00bfffc4 	movi	r2,-1
   46430:	003ff906 	br	46418 <_puts_r+0x68>

00046434 <puts>:
   46434:	00800174 	movhi	r2,5
   46438:	108df004 	addi	r2,r2,14272
   4643c:	200b883a 	mov	r5,r4
   46440:	11000017 	ldw	r4,0(r2)
   46444:	00463b01 	jmpi	463b0 <_puts_r>

00046448 <_snprintf_r>:
   46448:	deffe604 	addi	sp,sp,-104
   4644c:	dc401815 	stw	r17,96(sp)
   46450:	dc001715 	stw	r16,92(sp)
   46454:	dfc01915 	stw	ra,100(sp)
   46458:	3021883a 	mov	r16,r6
   4645c:	2023883a 	mov	r17,r4
   46460:	30001e16 	blt	r6,zero,464dc <_snprintf_r+0x94>
   46464:	00808204 	movi	r2,520
   46468:	d880030d 	sth	r2,12(sp)
   4646c:	d9400015 	stw	r5,0(sp)
   46470:	d9400415 	stw	r5,16(sp)
   46474:	3000141e 	bne	r6,zero,464c8 <_snprintf_r+0x80>
   46478:	0005883a 	mov	r2,zero
   4647c:	380d883a 	mov	r6,r7
   46480:	d8800215 	stw	r2,8(sp)
   46484:	d8800515 	stw	r2,20(sp)
   46488:	8809883a 	mov	r4,r17
   4648c:	00bfffc4 	movi	r2,-1
   46490:	d80b883a 	mov	r5,sp
   46494:	d9c01a04 	addi	r7,sp,104
   46498:	d880038d 	sth	r2,14(sp)
   4649c:	00466580 	call	46658 <___vfprintf_internal_r>
   464a0:	00ffffc4 	movi	r3,-1
   464a4:	10c00a16 	blt	r2,r3,464d0 <_snprintf_r+0x88>
   464a8:	80000226 	beq	r16,zero,464b4 <_snprintf_r+0x6c>
   464ac:	d8c00017 	ldw	r3,0(sp)
   464b0:	18000005 	stb	zero,0(r3)
   464b4:	dfc01917 	ldw	ra,100(sp)
   464b8:	dc401817 	ldw	r17,96(sp)
   464bc:	dc001717 	ldw	r16,92(sp)
   464c0:	dec01a04 	addi	sp,sp,104
   464c4:	f800283a 	ret
   464c8:	30bfffc4 	addi	r2,r6,-1
   464cc:	003feb06 	br	4647c <_snprintf_r+0x34>
   464d0:	00c022c4 	movi	r3,139
   464d4:	88c00015 	stw	r3,0(r17)
   464d8:	003ff306 	br	464a8 <_snprintf_r+0x60>
   464dc:	008022c4 	movi	r2,139
   464e0:	20800015 	stw	r2,0(r4)
   464e4:	00bfffc4 	movi	r2,-1
   464e8:	003ff206 	br	464b4 <_snprintf_r+0x6c>

000464ec <snprintf>:
   464ec:	deffe504 	addi	sp,sp,-108
   464f0:	dc001715 	stw	r16,92(sp)
   464f4:	2821883a 	mov	r16,r5
   464f8:	dfc01915 	stw	ra,100(sp)
   464fc:	dc401815 	stw	r17,96(sp)
   46500:	d9c01a15 	stw	r7,104(sp)
   46504:	00800174 	movhi	r2,5
   46508:	108df004 	addi	r2,r2,14272
   4650c:	14400017 	ldw	r17,0(r2)
   46510:	28001d16 	blt	r5,zero,46588 <snprintf+0x9c>
   46514:	00c08204 	movi	r3,520
   46518:	d8c0030d 	sth	r3,12(sp)
   4651c:	d9000015 	stw	r4,0(sp)
   46520:	d9000415 	stw	r4,16(sp)
   46524:	2800131e 	bne	r5,zero,46574 <snprintf+0x88>
   46528:	0007883a 	mov	r3,zero
   4652c:	11000017 	ldw	r4,0(r2)
   46530:	d80b883a 	mov	r5,sp
   46534:	00bfffc4 	movi	r2,-1
   46538:	d9c01a04 	addi	r7,sp,104
   4653c:	d8c00215 	stw	r3,8(sp)
   46540:	d8c00515 	stw	r3,20(sp)
   46544:	d880038d 	sth	r2,14(sp)
   46548:	00466580 	call	46658 <___vfprintf_internal_r>
   4654c:	00ffffc4 	movi	r3,-1
   46550:	10c00a16 	blt	r2,r3,4657c <snprintf+0x90>
   46554:	80000226 	beq	r16,zero,46560 <snprintf+0x74>
   46558:	d8c00017 	ldw	r3,0(sp)
   4655c:	18000005 	stb	zero,0(r3)
   46560:	dfc01917 	ldw	ra,100(sp)
   46564:	dc401817 	ldw	r17,96(sp)
   46568:	dc001717 	ldw	r16,92(sp)
   4656c:	dec01b04 	addi	sp,sp,108
   46570:	f800283a 	ret
   46574:	28ffffc4 	addi	r3,r5,-1
   46578:	003fec06 	br	4652c <snprintf+0x40>
   4657c:	00c022c4 	movi	r3,139
   46580:	88c00015 	stw	r3,0(r17)
   46584:	003ff306 	br	46554 <snprintf+0x68>
   46588:	008022c4 	movi	r2,139
   4658c:	88800015 	stw	r2,0(r17)
   46590:	00bfffc4 	movi	r2,-1
   46594:	003ff206 	br	46560 <snprintf+0x74>

00046598 <strlen>:
   46598:	208000cc 	andi	r2,r4,3
   4659c:	10001f1e 	bne	r2,zero,4661c <strlen+0x84>
   465a0:	20800017 	ldw	r2,0(r4)
   465a4:	01ffbff4 	movhi	r7,65279
   465a8:	39ffbfc4 	addi	r7,r7,-257
   465ac:	01a02074 	movhi	r6,32897
   465b0:	31a02004 	addi	r6,r6,-32640
   465b4:	11c7883a 	add	r3,r2,r7
   465b8:	0084303a 	nor	r2,zero,r2
   465bc:	1886703a 	and	r3,r3,r2
   465c0:	1986703a 	and	r3,r3,r6
   465c4:	2005883a 	mov	r2,r4
   465c8:	1800101e 	bne	r3,zero,4660c <strlen+0x74>
   465cc:	10800104 	addi	r2,r2,4
   465d0:	10c00017 	ldw	r3,0(r2)
   465d4:	19cb883a 	add	r5,r3,r7
   465d8:	00c6303a 	nor	r3,zero,r3
   465dc:	28c6703a 	and	r3,r5,r3
   465e0:	1986703a 	and	r3,r3,r6
   465e4:	1800091e 	bne	r3,zero,4660c <strlen+0x74>
   465e8:	10800104 	addi	r2,r2,4
   465ec:	10c00017 	ldw	r3,0(r2)
   465f0:	19cb883a 	add	r5,r3,r7
   465f4:	00c6303a 	nor	r3,zero,r3
   465f8:	28c6703a 	and	r3,r5,r3
   465fc:	1986703a 	and	r3,r3,r6
   46600:	183ff226 	beq	r3,zero,465cc <strlen+0x34>
   46604:	00000106 	br	4660c <strlen+0x74>
   46608:	10800044 	addi	r2,r2,1
   4660c:	10c00007 	ldb	r3,0(r2)
   46610:	183ffd1e 	bne	r3,zero,46608 <strlen+0x70>
   46614:	1105c83a 	sub	r2,r2,r4
   46618:	f800283a 	ret
   4661c:	2005883a 	mov	r2,r4
   46620:	003ffa06 	br	4660c <strlen+0x74>

00046624 <__sprint_r>:
   46624:	30800217 	ldw	r2,8(r6)
   46628:	defffe04 	addi	sp,sp,-8
   4662c:	dc000015 	stw	r16,0(sp)
   46630:	dfc00115 	stw	ra,4(sp)
   46634:	3021883a 	mov	r16,r6
   46638:	10000226 	beq	r2,zero,46644 <__sprint_r+0x20>
   4663c:	004a7080 	call	4a708 <__sfvwrite_r>
   46640:	80000215 	stw	zero,8(r16)
   46644:	80000115 	stw	zero,4(r16)
   46648:	dfc00117 	ldw	ra,4(sp)
   4664c:	dc000017 	ldw	r16,0(sp)
   46650:	dec00204 	addi	sp,sp,8
   46654:	f800283a 	ret

00046658 <___vfprintf_internal_r>:
   46658:	defeb904 	addi	sp,sp,-1308
   4665c:	dc013d15 	stw	r16,1268(sp)
   46660:	d9013015 	stw	r4,1216(sp)
   46664:	dfc14615 	stw	ra,1304(sp)
   46668:	df014515 	stw	fp,1300(sp)
   4666c:	ddc14415 	stw	r23,1296(sp)
   46670:	dd814315 	stw	r22,1292(sp)
   46674:	dd414215 	stw	r21,1288(sp)
   46678:	dd014115 	stw	r20,1284(sp)
   4667c:	dcc14015 	stw	r19,1280(sp)
   46680:	dc813f15 	stw	r18,1276(sp)
   46684:	dc413e15 	stw	r17,1272(sp)
   46688:	d9412915 	stw	r5,1188(sp)
   4668c:	3021883a 	mov	r16,r6
   46690:	d9c12d15 	stw	r7,1204(sp)
   46694:	004adf40 	call	4adf4 <_localeconv_r>
   46698:	10800017 	ldw	r2,0(r2)
   4669c:	d9013017 	ldw	r4,1216(sp)
   466a0:	d8013315 	stw	zero,1228(sp)
   466a4:	d8813715 	stw	r2,1244(sp)
   466a8:	d8013415 	stw	zero,1232(sp)
   466ac:	20000226 	beq	r4,zero,466b8 <___vfprintf_internal_r+0x60>
   466b0:	20800e17 	ldw	r2,56(r4)
   466b4:	10019826 	beq	r2,zero,46d18 <___vfprintf_internal_r+0x6c0>
   466b8:	da012917 	ldw	r8,1188(sp)
   466bc:	4080030b 	ldhu	r2,12(r8)
   466c0:	10c0020c 	andi	r3,r2,8
   466c4:	18ffffcc 	andi	r3,r3,65535
   466c8:	18e0001c 	xori	r3,r3,32768
   466cc:	18e00004 	addi	r3,r3,-32768
   466d0:	18013a26 	beq	r3,zero,46bbc <___vfprintf_internal_r+0x564>
   466d4:	40c00417 	ldw	r3,16(r8)
   466d8:	18013826 	beq	r3,zero,46bbc <___vfprintf_internal_r+0x564>
   466dc:	1100068c 	andi	r4,r2,26
   466e0:	00c00284 	movi	r3,10
   466e4:	20c13e26 	beq	r4,r3,46be0 <___vfprintf_internal_r+0x588>
   466e8:	da010dc4 	addi	r8,sp,1079
   466ec:	d8800404 	addi	r2,sp,16
   466f0:	da012615 	stw	r8,1176(sp)
   466f4:	d8811b15 	stw	r2,1132(sp)
   466f8:	1013883a 	mov	r9,r2
   466fc:	d8812617 	ldw	r2,1176(sp)
   46700:	da010e04 	addi	r8,sp,1080
   46704:	dc413017 	ldw	r17,1216(sp)
   46708:	da012715 	stw	r8,1180(sp)
   4670c:	4091c83a 	sub	r8,r8,r2
   46710:	d8011d15 	stw	zero,1140(sp)
   46714:	d8011c15 	stw	zero,1136(sp)
   46718:	802b883a 	mov	r21,r16
   4671c:	d8013215 	stw	zero,1224(sp)
   46720:	d8013615 	stw	zero,1240(sp)
   46724:	d8013515 	stw	zero,1236(sp)
   46728:	d8012c15 	stw	zero,1200(sp)
   4672c:	da013915 	stw	r8,1252(sp)
   46730:	a8800007 	ldb	r2,0(r21)
   46734:	1002ec26 	beq	r2,zero,472e8 <___vfprintf_internal_r+0xc90>
   46738:	00c00944 	movi	r3,37
   4673c:	a825883a 	mov	r18,r21
   46740:	10c0021e 	bne	r2,r3,4674c <___vfprintf_internal_r+0xf4>
   46744:	00001406 	br	46798 <___vfprintf_internal_r+0x140>
   46748:	10c00326 	beq	r2,r3,46758 <___vfprintf_internal_r+0x100>
   4674c:	94800044 	addi	r18,r18,1
   46750:	90800007 	ldb	r2,0(r18)
   46754:	103ffc1e 	bne	r2,zero,46748 <___vfprintf_internal_r+0xf0>
   46758:	9561c83a 	sub	r16,r18,r21
   4675c:	80000e26 	beq	r16,zero,46798 <___vfprintf_internal_r+0x140>
   46760:	da011d17 	ldw	r8,1140(sp)
   46764:	d8c11c17 	ldw	r3,1136(sp)
   46768:	4d400015 	stw	r21,0(r9)
   4676c:	4c000115 	stw	r16,4(r9)
   46770:	4411883a 	add	r8,r8,r16
   46774:	18c00044 	addi	r3,r3,1
   46778:	da011d15 	stw	r8,1140(sp)
   4677c:	d8c11c15 	stw	r3,1136(sp)
   46780:	008001c4 	movi	r2,7
   46784:	10c15d16 	blt	r2,r3,46cfc <___vfprintf_internal_r+0x6a4>
   46788:	4a400204 	addi	r9,r9,8
   4678c:	d8812c17 	ldw	r2,1200(sp)
   46790:	1405883a 	add	r2,r2,r16
   46794:	d8812c15 	stw	r2,1200(sp)
   46798:	90800007 	ldb	r2,0(r18)
   4679c:	10013b26 	beq	r2,zero,46c8c <___vfprintf_internal_r+0x634>
   467a0:	95400044 	addi	r21,r18,1
   467a4:	94800047 	ldb	r18,1(r18)
   467a8:	d8012585 	stb	zero,1174(sp)
   467ac:	073fffc4 	movi	fp,-1
   467b0:	d8012e15 	stw	zero,1208(sp)
   467b4:	0021883a 	mov	r16,zero
   467b8:	00c01604 	movi	r3,88
   467bc:	01400244 	movi	r5,9
   467c0:	02800a84 	movi	r10,42
   467c4:	01c01b04 	movi	r7,108
   467c8:	01800ac4 	movi	r6,43
   467cc:	02c00804 	movi	r11,32
   467d0:	ad400044 	addi	r21,r21,1
   467d4:	90bff804 	addi	r2,r18,-32
   467d8:	1880092e 	bgeu	r3,r2,46800 <___vfprintf_internal_r+0x1a8>
   467dc:	90012b26 	beq	r18,zero,46c8c <___vfprintf_internal_r+0x634>
   467e0:	00c00044 	movi	r3,1
   467e4:	d8c12815 	stw	r3,1184(sp)
   467e8:	dc810405 	stb	r18,1040(sp)
   467ec:	d8012585 	stb	zero,1174(sp)
   467f0:	d8c12b15 	stw	r3,1196(sp)
   467f4:	dcc10404 	addi	r19,sp,1040
   467f8:	d8013115 	stw	zero,1220(sp)
   467fc:	00008806 	br	46a20 <___vfprintf_internal_r+0x3c8>
   46800:	1085883a 	add	r2,r2,r2
   46804:	1085883a 	add	r2,r2,r2
   46808:	01000134 	movhi	r4,4
   4680c:	211a0704 	addi	r4,r4,26652
   46810:	1105883a 	add	r2,r2,r4
   46814:	10800017 	ldw	r2,0(r2)
   46818:	1000683a 	jmp	r2
   4681c:	00046dd0 	cmplti	zero,zero,4535
   46820:	000467dc 	xori	zero,zero,4511
   46824:	000467dc 	xori	zero,zero,4511
   46828:	00046de4 	muli	zero,zero,4535
   4682c:	000467dc 	xori	zero,zero,4511
   46830:	000467dc 	xori	zero,zero,4511
   46834:	000467dc 	xori	zero,zero,4511
   46838:	000467dc 	xori	zero,zero,4511
   4683c:	000467dc 	xori	zero,zero,4511
   46840:	000467dc 	xori	zero,zero,4511
   46844:	00046ecc 	andi	zero,zero,4539
   46848:	00046d88 	cmpgei	zero,zero,4534
   4684c:	000467dc 	xori	zero,zero,4511
   46850:	00046bb0 	cmpltui	zero,zero,4526
   46854:	00046d94 	movui	zero,4534
   46858:	000467dc 	xori	zero,zero,4511
   4685c:	00046df0 	cmpltui	zero,zero,4535
   46860:	00046ef0 	cmpltui	zero,zero,4539
   46864:	00046ef0 	cmpltui	zero,zero,4539
   46868:	00046ef0 	cmpltui	zero,zero,4539
   4686c:	00046ef0 	cmpltui	zero,zero,4539
   46870:	00046ef0 	cmpltui	zero,zero,4539
   46874:	00046ef0 	cmpltui	zero,zero,4539
   46878:	00046ef0 	cmpltui	zero,zero,4539
   4687c:	00046ef0 	cmpltui	zero,zero,4539
   46880:	00046ef0 	cmpltui	zero,zero,4539
   46884:	000467dc 	xori	zero,zero,4511
   46888:	000467dc 	xori	zero,zero,4511
   4688c:	000467dc 	xori	zero,zero,4511
   46890:	000467dc 	xori	zero,zero,4511
   46894:	000467dc 	xori	zero,zero,4511
   46898:	000467dc 	xori	zero,zero,4511
   4689c:	000467dc 	xori	zero,zero,4511
   468a0:	000467dc 	xori	zero,zero,4511
   468a4:	000467dc 	xori	zero,zero,4511
   468a8:	000467dc 	xori	zero,zero,4511
   468ac:	00046b4c 	andi	zero,zero,4525
   468b0:	00046f18 	cmpnei	zero,zero,4540
   468b4:	000467dc 	xori	zero,zero,4511
   468b8:	00046f18 	cmpnei	zero,zero,4540
   468bc:	000467dc 	xori	zero,zero,4511
   468c0:	000467dc 	xori	zero,zero,4511
   468c4:	000467dc 	xori	zero,zero,4511
   468c8:	000467dc 	xori	zero,zero,4511
   468cc:	00047088 	cmpgei	zero,zero,4546
   468d0:	000467dc 	xori	zero,zero,4511
   468d4:	000467dc 	xori	zero,zero,4511
   468d8:	00046b14 	movui	zero,4524
   468dc:	000467dc 	xori	zero,zero,4511
   468e0:	000467dc 	xori	zero,zero,4511
   468e4:	000467dc 	xori	zero,zero,4511
   468e8:	000467dc 	xori	zero,zero,4511
   468ec:	000467dc 	xori	zero,zero,4511
   468f0:	00046980 	call	4698 <__reset-0x3b968>
   468f4:	000467dc 	xori	zero,zero,4511
   468f8:	000467dc 	xori	zero,zero,4511
   468fc:	00046dfc 	xorhi	zero,zero,4535
   46900:	000467dc 	xori	zero,zero,4511
   46904:	000467dc 	xori	zero,zero,4511
   46908:	000467dc 	xori	zero,zero,4511
   4690c:	000467dc 	xori	zero,zero,4511
   46910:	000467dc 	xori	zero,zero,4511
   46914:	000467dc 	xori	zero,zero,4511
   46918:	000467dc 	xori	zero,zero,4511
   4691c:	000467dc 	xori	zero,zero,4511
   46920:	000467dc 	xori	zero,zero,4511
   46924:	000467dc 	xori	zero,zero,4511
   46928:	00046e70 	cmpltui	zero,zero,4537
   4692c:	00046b50 	cmplti	zero,zero,4525
   46930:	00046f18 	cmpnei	zero,zero,4540
   46934:	00046f18 	cmpnei	zero,zero,4540
   46938:	00046f18 	cmpnei	zero,zero,4540
   4693c:	00046e50 	cmplti	zero,zero,4537
   46940:	00046b50 	cmplti	zero,zero,4525
   46944:	000467dc 	xori	zero,zero,4511
   46948:	000467dc 	xori	zero,zero,4511
   4694c:	00046e5c 	xori	zero,zero,4537
   46950:	000467dc 	xori	zero,zero,4511
   46954:	00046ea0 	cmpeqi	zero,zero,4538
   46958:	00046b18 	cmpnei	zero,zero,4524
   4695c:	00046fa0 	cmpeqi	zero,zero,4542
   46960:	00046fec 	andhi	zero,zero,4543
   46964:	000467dc 	xori	zero,zero,4511
   46968:	00046ff8 	rdprs	zero,zero,4543
   4696c:	000467dc 	xori	zero,zero,4511
   46970:	00046984 	movi	zero,4518
   46974:	000467dc 	xori	zero,zero,4511
   46978:	000467dc 	xori	zero,zero,4511
   4697c:	00047054 	movui	zero,4545
   46980:	84000414 	ori	r16,r16,16
   46984:	8080080c 	andi	r2,r16,32
   46988:	1000f51e 	bne	r2,zero,46d60 <___vfprintf_internal_r+0x708>
   4698c:	8080040c 	andi	r2,r16,16
   46990:	10042c26 	beq	r2,zero,47a44 <___vfprintf_internal_r+0x13ec>
   46994:	da012d17 	ldw	r8,1204(sp)
   46998:	002d883a 	mov	r22,zero
   4699c:	00c00044 	movi	r3,1
   469a0:	45c00017 	ldw	r23,0(r8)
   469a4:	42000104 	addi	r8,r8,4
   469a8:	da012d15 	stw	r8,1204(sp)
   469ac:	b805883a 	mov	r2,r23
   469b0:	d8012585 	stb	zero,1174(sp)
   469b4:	e0000216 	blt	fp,zero,469c0 <___vfprintf_internal_r+0x368>
   469b8:	013fdfc4 	movi	r4,-129
   469bc:	8120703a 	and	r16,r16,r4
   469c0:	1002671e 	bne	r2,zero,47360 <___vfprintf_internal_r+0xd08>
   469c4:	e002661e 	bne	fp,zero,47360 <___vfprintf_internal_r+0xd08>
   469c8:	18c03fcc 	andi	r3,r3,255
   469cc:	1803561e 	bne	r3,zero,47728 <___vfprintf_internal_r+0x10d0>
   469d0:	8080004c 	andi	r2,r16,1
   469d4:	10035426 	beq	r2,zero,47728 <___vfprintf_internal_r+0x10d0>
   469d8:	da013917 	ldw	r8,1252(sp)
   469dc:	00800c04 	movi	r2,48
   469e0:	d8810dc5 	stb	r2,1079(sp)
   469e4:	da012b15 	stw	r8,1196(sp)
   469e8:	dcc10dc4 	addi	r19,sp,1079
   469ec:	d8812b17 	ldw	r2,1196(sp)
   469f0:	d8812815 	stw	r2,1184(sp)
   469f4:	1700010e 	bge	r2,fp,469fc <___vfprintf_internal_r+0x3a4>
   469f8:	df012815 	stw	fp,1184(sp)
   469fc:	d8812583 	ldbu	r2,1174(sp)
   46a00:	df013115 	stw	fp,1220(sp)
   46a04:	10803fcc 	andi	r2,r2,255
   46a08:	1080201c 	xori	r2,r2,128
   46a0c:	10bfe004 	addi	r2,r2,-128
   46a10:	10000326 	beq	r2,zero,46a20 <___vfprintf_internal_r+0x3c8>
   46a14:	da012817 	ldw	r8,1184(sp)
   46a18:	42000044 	addi	r8,r8,1
   46a1c:	da012815 	stw	r8,1184(sp)
   46a20:	80c0008c 	andi	r3,r16,2
   46a24:	d8c12a15 	stw	r3,1192(sp)
   46a28:	18000326 	beq	r3,zero,46a38 <___vfprintf_internal_r+0x3e0>
   46a2c:	da012817 	ldw	r8,1184(sp)
   46a30:	42000084 	addi	r8,r8,2
   46a34:	da012815 	stw	r8,1184(sp)
   46a38:	80c0210c 	andi	r3,r16,132
   46a3c:	d8c12f15 	stw	r3,1212(sp)
   46a40:	1801941e 	bne	r3,zero,47094 <___vfprintf_internal_r+0xa3c>
   46a44:	da012e17 	ldw	r8,1208(sp)
   46a48:	d8c12817 	ldw	r3,1184(sp)
   46a4c:	40edc83a 	sub	r22,r8,r3
   46a50:	0581900e 	bge	zero,r22,47094 <___vfprintf_internal_r+0xa3c>
   46a54:	02800404 	movi	r10,16
   46a58:	da011d17 	ldw	r8,1140(sp)
   46a5c:	d8c11c17 	ldw	r3,1136(sp)
   46a60:	05c00174 	movhi	r23,5
   46a64:	bdc69784 	addi	r23,r23,6750
   46a68:	5580200e 	bge	r10,r22,46aec <___vfprintf_internal_r+0x494>
   46a6c:	dc813815 	stw	r18,1248(sp)
   46a70:	5039883a 	mov	fp,r10
   46a74:	b825883a 	mov	r18,r23
   46a78:	050001c4 	movi	r20,7
   46a7c:	b02f883a 	mov	r23,r22
   46a80:	802d883a 	mov	r22,r16
   46a84:	dc012917 	ldw	r16,1188(sp)
   46a88:	00000306 	br	46a98 <___vfprintf_internal_r+0x440>
   46a8c:	bdfffc04 	addi	r23,r23,-16
   46a90:	4a400204 	addi	r9,r9,8
   46a94:	e5c0110e 	bge	fp,r23,46adc <___vfprintf_internal_r+0x484>
   46a98:	4c800015 	stw	r18,0(r9)
   46a9c:	4f000115 	stw	fp,4(r9)
   46aa0:	42000404 	addi	r8,r8,16
   46aa4:	18c00044 	addi	r3,r3,1
   46aa8:	da011d15 	stw	r8,1140(sp)
   46aac:	d8c11c15 	stw	r3,1136(sp)
   46ab0:	a0fff60e 	bge	r20,r3,46a8c <___vfprintf_internal_r+0x434>
   46ab4:	8809883a 	mov	r4,r17
   46ab8:	800b883a 	mov	r5,r16
   46abc:	d9811b04 	addi	r6,sp,1132
   46ac0:	00466240 	call	46624 <__sprint_r>
   46ac4:	1000771e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   46ac8:	bdfffc04 	addi	r23,r23,-16
   46acc:	da011d17 	ldw	r8,1140(sp)
   46ad0:	d8c11c17 	ldw	r3,1136(sp)
   46ad4:	da400404 	addi	r9,sp,16
   46ad8:	e5ffef16 	blt	fp,r23,46a98 <___vfprintf_internal_r+0x440>
   46adc:	b021883a 	mov	r16,r22
   46ae0:	b82d883a 	mov	r22,r23
   46ae4:	902f883a 	mov	r23,r18
   46ae8:	dc813817 	ldw	r18,1248(sp)
   46aec:	4dc00015 	stw	r23,0(r9)
   46af0:	4d800115 	stw	r22,4(r9)
   46af4:	4591883a 	add	r8,r8,r22
   46af8:	18c00044 	addi	r3,r3,1
   46afc:	da011d15 	stw	r8,1140(sp)
   46b00:	d8c11c15 	stw	r3,1136(sp)
   46b04:	008001c4 	movi	r2,7
   46b08:	10c36d16 	blt	r2,r3,478c0 <___vfprintf_internal_r+0x1268>
   46b0c:	4a400204 	addi	r9,r9,8
   46b10:	00016206 	br	4709c <___vfprintf_internal_r+0xa44>
   46b14:	84000414 	ori	r16,r16,16
   46b18:	8080080c 	andi	r2,r16,32
   46b1c:	1000801e 	bne	r2,zero,46d20 <___vfprintf_internal_r+0x6c8>
   46b20:	8080040c 	andi	r2,r16,16
   46b24:	1003da26 	beq	r2,zero,47a90 <___vfprintf_internal_r+0x1438>
   46b28:	d8c12d17 	ldw	r3,1204(sp)
   46b2c:	002d883a 	mov	r22,zero
   46b30:	1dc00017 	ldw	r23,0(r3)
   46b34:	18c00104 	addi	r3,r3,4
   46b38:	d8c12d15 	stw	r3,1204(sp)
   46b3c:	b805883a 	mov	r2,r23
   46b40:	0007883a 	mov	r3,zero
   46b44:	d8012585 	stb	zero,1174(sp)
   46b48:	003f9a06 	br	469b4 <___vfprintf_internal_r+0x35c>
   46b4c:	84000414 	ori	r16,r16,16
   46b50:	8080080c 	andi	r2,r16,32
   46b54:	10007b1e 	bne	r2,zero,46d44 <___vfprintf_internal_r+0x6ec>
   46b58:	8080040c 	andi	r2,r16,16
   46b5c:	1003ed26 	beq	r2,zero,47b14 <___vfprintf_internal_r+0x14bc>
   46b60:	d9012d17 	ldw	r4,1204(sp)
   46b64:	25c00017 	ldw	r23,0(r4)
   46b68:	21000104 	addi	r4,r4,4
   46b6c:	d9012d15 	stw	r4,1204(sp)
   46b70:	b82dd7fa 	srai	r22,r23,31
   46b74:	b005883a 	mov	r2,r22
   46b78:	1003230e 	bge	r2,zero,47808 <___vfprintf_internal_r+0x11b0>
   46b7c:	05efc83a 	sub	r23,zero,r23
   46b80:	b804c03a 	cmpne	r2,r23,zero
   46b84:	05adc83a 	sub	r22,zero,r22
   46b88:	b0adc83a 	sub	r22,r22,r2
   46b8c:	00800b44 	movi	r2,45
   46b90:	d8812585 	stb	r2,1174(sp)
   46b94:	00c00044 	movi	r3,1
   46b98:	bd84b03a 	or	r2,r23,r22
   46b9c:	003f8506 	br	469b4 <___vfprintf_internal_r+0x35c>
   46ba0:	da012e17 	ldw	r8,1208(sp)
   46ba4:	d8812d15 	stw	r2,1204(sp)
   46ba8:	0211c83a 	sub	r8,zero,r8
   46bac:	da012e15 	stw	r8,1208(sp)
   46bb0:	84000114 	ori	r16,r16,4
   46bb4:	ac800007 	ldb	r18,0(r21)
   46bb8:	003f0506 	br	467d0 <___vfprintf_internal_r+0x178>
   46bbc:	d9013017 	ldw	r4,1216(sp)
   46bc0:	d9412917 	ldw	r5,1188(sp)
   46bc4:	00484740 	call	48474 <__swsetup_r>
   46bc8:	10003d1e 	bne	r2,zero,46cc0 <___vfprintf_internal_r+0x668>
   46bcc:	d8c12917 	ldw	r3,1188(sp)
   46bd0:	1880030b 	ldhu	r2,12(r3)
   46bd4:	00c00284 	movi	r3,10
   46bd8:	1100068c 	andi	r4,r2,26
   46bdc:	20fec21e 	bne	r4,r3,466e8 <___vfprintf_internal_r+0x90>
   46be0:	d9012917 	ldw	r4,1188(sp)
   46be4:	20c0038b 	ldhu	r3,14(r4)
   46be8:	193fffcc 	andi	r4,r3,65535
   46bec:	2120001c 	xori	r4,r4,32768
   46bf0:	21200004 	addi	r4,r4,-32768
   46bf4:	203ebc16 	blt	r4,zero,466e8 <___vfprintf_internal_r+0x90>
   46bf8:	da012917 	ldw	r8,1188(sp)
   46bfc:	d9013017 	ldw	r4,1216(sp)
   46c00:	d9c12d17 	ldw	r7,1204(sp)
   46c04:	42800717 	ldw	r10,28(r8)
   46c08:	42400917 	ldw	r9,36(r8)
   46c0c:	10bfff4c 	andi	r2,r2,65533
   46c10:	02010004 	movi	r8,1024
   46c14:	d881070d 	sth	r2,1052(sp)
   46c18:	d9410404 	addi	r5,sp,1040
   46c1c:	d8800404 	addi	r2,sp,16
   46c20:	800d883a 	mov	r6,r16
   46c24:	d8c1078d 	sth	r3,1054(sp)
   46c28:	da810b15 	stw	r10,1068(sp)
   46c2c:	da410d15 	stw	r9,1076(sp)
   46c30:	d8810415 	stw	r2,1040(sp)
   46c34:	d8810815 	stw	r2,1056(sp)
   46c38:	da010615 	stw	r8,1048(sp)
   46c3c:	da010915 	stw	r8,1060(sp)
   46c40:	d8010a15 	stw	zero,1064(sp)
   46c44:	00466580 	call	46658 <___vfprintf_internal_r>
   46c48:	d8812c15 	stw	r2,1200(sp)
   46c4c:	10000416 	blt	r2,zero,46c60 <___vfprintf_internal_r+0x608>
   46c50:	d9013017 	ldw	r4,1216(sp)
   46c54:	d9410404 	addi	r5,sp,1040
   46c58:	0049e0c0 	call	49e0c <_fflush_r>
   46c5c:	1005d81e 	bne	r2,zero,483c0 <___vfprintf_internal_r+0x1d68>
   46c60:	d881070b 	ldhu	r2,1052(sp)
   46c64:	1080100c 	andi	r2,r2,64
   46c68:	10bfffcc 	andi	r2,r2,65535
   46c6c:	10a0001c 	xori	r2,r2,32768
   46c70:	10a00004 	addi	r2,r2,-32768
   46c74:	10001426 	beq	r2,zero,46cc8 <___vfprintf_internal_r+0x670>
   46c78:	d8c12917 	ldw	r3,1188(sp)
   46c7c:	1880030b 	ldhu	r2,12(r3)
   46c80:	10801014 	ori	r2,r2,64
   46c84:	1880030d 	sth	r2,12(r3)
   46c88:	00000f06 	br	46cc8 <___vfprintf_internal_r+0x670>
   46c8c:	d8811d17 	ldw	r2,1140(sp)
   46c90:	10000426 	beq	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   46c94:	d9013017 	ldw	r4,1216(sp)
   46c98:	d9412917 	ldw	r5,1188(sp)
   46c9c:	d9811b04 	addi	r6,sp,1132
   46ca0:	00466240 	call	46624 <__sprint_r>
   46ca4:	d8c12917 	ldw	r3,1188(sp)
   46ca8:	1880030b 	ldhu	r2,12(r3)
   46cac:	1080100c 	andi	r2,r2,64
   46cb0:	10bfffcc 	andi	r2,r2,65535
   46cb4:	10a0001c 	xori	r2,r2,32768
   46cb8:	10a00004 	addi	r2,r2,-32768
   46cbc:	10000226 	beq	r2,zero,46cc8 <___vfprintf_internal_r+0x670>
   46cc0:	00bfffc4 	movi	r2,-1
   46cc4:	d8812c15 	stw	r2,1200(sp)
   46cc8:	d8812c17 	ldw	r2,1200(sp)
   46ccc:	dfc14617 	ldw	ra,1304(sp)
   46cd0:	df014517 	ldw	fp,1300(sp)
   46cd4:	ddc14417 	ldw	r23,1296(sp)
   46cd8:	dd814317 	ldw	r22,1292(sp)
   46cdc:	dd414217 	ldw	r21,1288(sp)
   46ce0:	dd014117 	ldw	r20,1284(sp)
   46ce4:	dcc14017 	ldw	r19,1280(sp)
   46ce8:	dc813f17 	ldw	r18,1276(sp)
   46cec:	dc413e17 	ldw	r17,1272(sp)
   46cf0:	dc013d17 	ldw	r16,1268(sp)
   46cf4:	dec14704 	addi	sp,sp,1308
   46cf8:	f800283a 	ret
   46cfc:	d9412917 	ldw	r5,1188(sp)
   46d00:	8809883a 	mov	r4,r17
   46d04:	d9811b04 	addi	r6,sp,1132
   46d08:	00466240 	call	46624 <__sprint_r>
   46d0c:	103fe51e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   46d10:	da400404 	addi	r9,sp,16
   46d14:	003e9d06 	br	4678c <___vfprintf_internal_r+0x134>
   46d18:	004a0b40 	call	4a0b4 <__sinit>
   46d1c:	003e6606 	br	466b8 <___vfprintf_internal_r+0x60>
   46d20:	d8812d17 	ldw	r2,1204(sp)
   46d24:	0007883a 	mov	r3,zero
   46d28:	15c00017 	ldw	r23,0(r2)
   46d2c:	15800117 	ldw	r22,4(r2)
   46d30:	10800204 	addi	r2,r2,8
   46d34:	d8812d15 	stw	r2,1204(sp)
   46d38:	d8012585 	stb	zero,1174(sp)
   46d3c:	bd84b03a 	or	r2,r23,r22
   46d40:	003f1c06 	br	469b4 <___vfprintf_internal_r+0x35c>
   46d44:	d8c12d17 	ldw	r3,1204(sp)
   46d48:	18800117 	ldw	r2,4(r3)
   46d4c:	1dc00017 	ldw	r23,0(r3)
   46d50:	18c00204 	addi	r3,r3,8
   46d54:	d8c12d15 	stw	r3,1204(sp)
   46d58:	102d883a 	mov	r22,r2
   46d5c:	003f8606 	br	46b78 <___vfprintf_internal_r+0x520>
   46d60:	d8c12d17 	ldw	r3,1204(sp)
   46d64:	d9012d17 	ldw	r4,1204(sp)
   46d68:	1dc00017 	ldw	r23,0(r3)
   46d6c:	1d800117 	ldw	r22,4(r3)
   46d70:	21000204 	addi	r4,r4,8
   46d74:	00c00044 	movi	r3,1
   46d78:	d9012d15 	stw	r4,1204(sp)
   46d7c:	bd84b03a 	or	r2,r23,r22
   46d80:	d8012585 	stb	zero,1174(sp)
   46d84:	003f0b06 	br	469b4 <___vfprintf_internal_r+0x35c>
   46d88:	d9812585 	stb	r6,1174(sp)
   46d8c:	ac800007 	ldb	r18,0(r21)
   46d90:	003e8f06 	br	467d0 <___vfprintf_internal_r+0x178>
   46d94:	ac800007 	ldb	r18,0(r21)
   46d98:	a9000044 	addi	r4,r21,1
   46d9c:	92857d26 	beq	r18,r10,48394 <___vfprintf_internal_r+0x1d3c>
   46da0:	90bff404 	addi	r2,r18,-48
   46da4:	0039883a 	mov	fp,zero
   46da8:	28800736 	bltu	r5,r2,46dc8 <___vfprintf_internal_r+0x770>
   46dac:	24800007 	ldb	r18,0(r4)
   46db0:	e70002a4 	muli	fp,fp,10
   46db4:	21000044 	addi	r4,r4,1
   46db8:	1739883a 	add	fp,r2,fp
   46dbc:	90bff404 	addi	r2,r18,-48
   46dc0:	28bffa2e 	bgeu	r5,r2,46dac <___vfprintf_internal_r+0x754>
   46dc4:	e0044216 	blt	fp,zero,47ed0 <___vfprintf_internal_r+0x1878>
   46dc8:	202b883a 	mov	r21,r4
   46dcc:	003e8106 	br	467d4 <___vfprintf_internal_r+0x17c>
   46dd0:	d8812587 	ldb	r2,1174(sp)
   46dd4:	1003581e 	bne	r2,zero,47b38 <___vfprintf_internal_r+0x14e0>
   46dd8:	dac12585 	stb	r11,1174(sp)
   46ddc:	ac800007 	ldb	r18,0(r21)
   46de0:	003e7b06 	br	467d0 <___vfprintf_internal_r+0x178>
   46de4:	84000054 	ori	r16,r16,1
   46de8:	ac800007 	ldb	r18,0(r21)
   46dec:	003e7806 	br	467d0 <___vfprintf_internal_r+0x178>
   46df0:	84002014 	ori	r16,r16,128
   46df4:	ac800007 	ldb	r18,0(r21)
   46df8:	003e7506 	br	467d0 <___vfprintf_internal_r+0x178>
   46dfc:	02000174 	movhi	r8,5
   46e00:	42068b04 	addi	r8,r8,6700
   46e04:	da013615 	stw	r8,1240(sp)
   46e08:	8080080c 	andi	r2,r16,32
   46e0c:	10009626 	beq	r2,zero,47068 <___vfprintf_internal_r+0xa10>
   46e10:	d8812d17 	ldw	r2,1204(sp)
   46e14:	15c00017 	ldw	r23,0(r2)
   46e18:	15800117 	ldw	r22,4(r2)
   46e1c:	10800204 	addi	r2,r2,8
   46e20:	d8812d15 	stw	r2,1204(sp)
   46e24:	8080004c 	andi	r2,r16,1
   46e28:	1002ae26 	beq	r2,zero,478e4 <___vfprintf_internal_r+0x128c>
   46e2c:	bd84b03a 	or	r2,r23,r22
   46e30:	10032a26 	beq	r2,zero,47adc <___vfprintf_internal_r+0x1484>
   46e34:	00c00c04 	movi	r3,48
   46e38:	d8c12505 	stb	r3,1172(sp)
   46e3c:	dc812545 	stb	r18,1173(sp)
   46e40:	84000094 	ori	r16,r16,2
   46e44:	00c00084 	movi	r3,2
   46e48:	d8012585 	stb	zero,1174(sp)
   46e4c:	003ed906 	br	469b4 <___vfprintf_internal_r+0x35c>
   46e50:	84001014 	ori	r16,r16,64
   46e54:	ac800007 	ldb	r18,0(r21)
   46e58:	003e5d06 	br	467d0 <___vfprintf_internal_r+0x178>
   46e5c:	ac800007 	ldb	r18,0(r21)
   46e60:	a805883a 	mov	r2,r21
   46e64:	91c43226 	beq	r18,r7,47f30 <___vfprintf_internal_r+0x18d8>
   46e68:	84000414 	ori	r16,r16,16
   46e6c:	003e5806 	br	467d0 <___vfprintf_internal_r+0x178>
   46e70:	d8c12d17 	ldw	r3,1204(sp)
   46e74:	02000044 	movi	r8,1
   46e78:	da012815 	stw	r8,1184(sp)
   46e7c:	18800017 	ldw	r2,0(r3)
   46e80:	18c00104 	addi	r3,r3,4
   46e84:	d8012585 	stb	zero,1174(sp)
   46e88:	d8810405 	stb	r2,1040(sp)
   46e8c:	d8c12d15 	stw	r3,1204(sp)
   46e90:	da012b15 	stw	r8,1196(sp)
   46e94:	dcc10404 	addi	r19,sp,1040
   46e98:	d8013115 	stw	zero,1220(sp)
   46e9c:	003ee006 	br	46a20 <___vfprintf_internal_r+0x3c8>
   46ea0:	8080080c 	andi	r2,r16,32
   46ea4:	10031026 	beq	r2,zero,47ae8 <___vfprintf_internal_r+0x1490>
   46ea8:	d9012d17 	ldw	r4,1204(sp)
   46eac:	da012c17 	ldw	r8,1200(sp)
   46eb0:	20800017 	ldw	r2,0(r4)
   46eb4:	4007d7fa 	srai	r3,r8,31
   46eb8:	21000104 	addi	r4,r4,4
   46ebc:	d9012d15 	stw	r4,1204(sp)
   46ec0:	12000015 	stw	r8,0(r2)
   46ec4:	10c00115 	stw	r3,4(r2)
   46ec8:	003e1906 	br	46730 <___vfprintf_internal_r+0xd8>
   46ecc:	da012d17 	ldw	r8,1204(sp)
   46ed0:	d9012d17 	ldw	r4,1204(sp)
   46ed4:	42000017 	ldw	r8,0(r8)
   46ed8:	20800104 	addi	r2,r4,4
   46edc:	da012e15 	stw	r8,1208(sp)
   46ee0:	403f2f16 	blt	r8,zero,46ba0 <___vfprintf_internal_r+0x548>
   46ee4:	d8812d15 	stw	r2,1204(sp)
   46ee8:	ac800007 	ldb	r18,0(r21)
   46eec:	003e3806 	br	467d0 <___vfprintf_internal_r+0x178>
   46ef0:	0009883a 	mov	r4,zero
   46ef4:	90bff404 	addi	r2,r18,-48
   46ef8:	ac800007 	ldb	r18,0(r21)
   46efc:	210002a4 	muli	r4,r4,10
   46f00:	ad400044 	addi	r21,r21,1
   46f04:	2089883a 	add	r4,r4,r2
   46f08:	90bff404 	addi	r2,r18,-48
   46f0c:	28bffa2e 	bgeu	r5,r2,46ef8 <___vfprintf_internal_r+0x8a0>
   46f10:	d9012e15 	stw	r4,1208(sp)
   46f14:	003e2f06 	br	467d4 <___vfprintf_internal_r+0x17c>
   46f18:	8080020c 	andi	r2,r16,8
   46f1c:	1002d426 	beq	r2,zero,47a70 <___vfprintf_internal_r+0x1418>
   46f20:	d8c12d17 	ldw	r3,1204(sp)
   46f24:	1d800017 	ldw	r22,0(r3)
   46f28:	1d000117 	ldw	r20,4(r3)
   46f2c:	18c00204 	addi	r3,r3,8
   46f30:	d8c12d15 	stw	r3,1204(sp)
   46f34:	dd813315 	stw	r22,1228(sp)
   46f38:	dd013415 	stw	r20,1232(sp)
   46f3c:	b009883a 	mov	r4,r22
   46f40:	a00b883a 	mov	r5,r20
   46f44:	da413c15 	stw	r9,1264(sp)
   46f48:	004d0ec0 	call	4d0ec <__isinfd>
   46f4c:	da413c17 	ldw	r9,1264(sp)
   46f50:	b009883a 	mov	r4,r22
   46f54:	a00b883a 	mov	r5,r20
   46f58:	10035726 	beq	r2,zero,47cb8 <___vfprintf_internal_r+0x1660>
   46f5c:	000d883a 	mov	r6,zero
   46f60:	000f883a 	mov	r7,zero
   46f64:	004e3c80 	call	4e3c8 <__ltdf2>
   46f68:	da413c17 	ldw	r9,1264(sp)
   46f6c:	10041b16 	blt	r2,zero,47fdc <___vfprintf_internal_r+0x1984>
   46f70:	d8812583 	ldbu	r2,1174(sp)
   46f74:	00c011c4 	movi	r3,71
   46f78:	1c830b16 	blt	r3,r18,47ba8 <___vfprintf_internal_r+0x1550>
   46f7c:	04c00174 	movhi	r19,5
   46f80:	9cc68704 	addi	r19,r19,6684
   46f84:	020000c4 	movi	r8,3
   46f88:	00ffdfc4 	movi	r3,-129
   46f8c:	da012815 	stw	r8,1184(sp)
   46f90:	80e0703a 	and	r16,r16,r3
   46f94:	da012b15 	stw	r8,1196(sp)
   46f98:	d8013115 	stw	zero,1220(sp)
   46f9c:	003e9906 	br	46a04 <___vfprintf_internal_r+0x3ac>
   46fa0:	d8812d17 	ldw	r2,1204(sp)
   46fa4:	d8c12d17 	ldw	r3,1204(sp)
   46fa8:	02000174 	movhi	r8,5
   46fac:	42069004 	addi	r8,r8,6720
   46fb0:	15c00017 	ldw	r23,0(r2)
   46fb4:	00800c04 	movi	r2,48
   46fb8:	18c00104 	addi	r3,r3,4
   46fbc:	d8812505 	stb	r2,1172(sp)
   46fc0:	00801e04 	movi	r2,120
   46fc4:	d8812545 	stb	r2,1173(sp)
   46fc8:	d8c12d15 	stw	r3,1204(sp)
   46fcc:	002d883a 	mov	r22,zero
   46fd0:	84000094 	ori	r16,r16,2
   46fd4:	da013615 	stw	r8,1240(sp)
   46fd8:	00c00084 	movi	r3,2
   46fdc:	04801e04 	movi	r18,120
   46fe0:	b805883a 	mov	r2,r23
   46fe4:	d8012585 	stb	zero,1174(sp)
   46fe8:	003e7206 	br	469b4 <___vfprintf_internal_r+0x35c>
   46fec:	84000814 	ori	r16,r16,32
   46ff0:	ac800007 	ldb	r18,0(r21)
   46ff4:	003df606 	br	467d0 <___vfprintf_internal_r+0x178>
   46ff8:	d8812d17 	ldw	r2,1204(sp)
   46ffc:	d8012585 	stb	zero,1174(sp)
   47000:	14c00017 	ldw	r19,0(r2)
   47004:	15c00104 	addi	r23,r2,4
   47008:	98040126 	beq	r19,zero,48010 <___vfprintf_internal_r+0x19b8>
   4700c:	9809883a 	mov	r4,r19
   47010:	e003dd16 	blt	fp,zero,47f88 <___vfprintf_internal_r+0x1930>
   47014:	000b883a 	mov	r5,zero
   47018:	e00d883a 	mov	r6,fp
   4701c:	da413c15 	stw	r9,1264(sp)
   47020:	004b7540 	call	4b754 <memchr>
   47024:	da413c17 	ldw	r9,1264(sp)
   47028:	10042e26 	beq	r2,zero,480e4 <___vfprintf_internal_r+0x1a8c>
   4702c:	14c5c83a 	sub	r2,r2,r19
   47030:	d8812b15 	stw	r2,1196(sp)
   47034:	e083790e 	bge	fp,r2,47e1c <___vfprintf_internal_r+0x17c4>
   47038:	df012815 	stw	fp,1184(sp)
   4703c:	e0049516 	blt	fp,zero,48294 <___vfprintf_internal_r+0x1c3c>
   47040:	d8812583 	ldbu	r2,1174(sp)
   47044:	df012b15 	stw	fp,1196(sp)
   47048:	ddc12d15 	stw	r23,1204(sp)
   4704c:	d8013115 	stw	zero,1220(sp)
   47050:	003e6c06 	br	46a04 <___vfprintf_internal_r+0x3ac>
   47054:	02000174 	movhi	r8,5
   47058:	42069004 	addi	r8,r8,6720
   4705c:	da013615 	stw	r8,1240(sp)
   47060:	8080080c 	andi	r2,r16,32
   47064:	103f6a1e 	bne	r2,zero,46e10 <___vfprintf_internal_r+0x7b8>
   47068:	8080040c 	andi	r2,r16,16
   4706c:	10029326 	beq	r2,zero,47abc <___vfprintf_internal_r+0x1464>
   47070:	d8c12d17 	ldw	r3,1204(sp)
   47074:	002d883a 	mov	r22,zero
   47078:	1dc00017 	ldw	r23,0(r3)
   4707c:	18c00104 	addi	r3,r3,4
   47080:	d8c12d15 	stw	r3,1204(sp)
   47084:	003f6706 	br	46e24 <___vfprintf_internal_r+0x7cc>
   47088:	84000214 	ori	r16,r16,8
   4708c:	ac800007 	ldb	r18,0(r21)
   47090:	003dcf06 	br	467d0 <___vfprintf_internal_r+0x178>
   47094:	da011d17 	ldw	r8,1140(sp)
   47098:	d8c11c17 	ldw	r3,1136(sp)
   4709c:	d8812587 	ldb	r2,1174(sp)
   470a0:	10000b26 	beq	r2,zero,470d0 <___vfprintf_internal_r+0xa78>
   470a4:	d8812584 	addi	r2,sp,1174
   470a8:	48800015 	stw	r2,0(r9)
   470ac:	00800044 	movi	r2,1
   470b0:	48800115 	stw	r2,4(r9)
   470b4:	4091883a 	add	r8,r8,r2
   470b8:	1887883a 	add	r3,r3,r2
   470bc:	da011d15 	stw	r8,1140(sp)
   470c0:	d8c11c15 	stw	r3,1136(sp)
   470c4:	008001c4 	movi	r2,7
   470c8:	10c18516 	blt	r2,r3,476e0 <___vfprintf_internal_r+0x1088>
   470cc:	4a400204 	addi	r9,r9,8
   470d0:	d9012a17 	ldw	r4,1192(sp)
   470d4:	20000b26 	beq	r4,zero,47104 <___vfprintf_internal_r+0xaac>
   470d8:	d8812504 	addi	r2,sp,1172
   470dc:	48800015 	stw	r2,0(r9)
   470e0:	00800084 	movi	r2,2
   470e4:	48800115 	stw	r2,4(r9)
   470e8:	4091883a 	add	r8,r8,r2
   470ec:	18c00044 	addi	r3,r3,1
   470f0:	da011d15 	stw	r8,1140(sp)
   470f4:	d8c11c15 	stw	r3,1136(sp)
   470f8:	008001c4 	movi	r2,7
   470fc:	10c18116 	blt	r2,r3,47704 <___vfprintf_internal_r+0x10ac>
   47100:	4a400204 	addi	r9,r9,8
   47104:	d9012f17 	ldw	r4,1212(sp)
   47108:	00802004 	movi	r2,128
   4710c:	2080fc26 	beq	r4,r2,47500 <___vfprintf_internal_r+0xea8>
   47110:	d8813117 	ldw	r2,1220(sp)
   47114:	d9012b17 	ldw	r4,1196(sp)
   47118:	112fc83a 	sub	r23,r2,r4
   4711c:	05c02a0e 	bge	zero,r23,471c8 <___vfprintf_internal_r+0xb70>
   47120:	07000404 	movi	fp,16
   47124:	05000174 	movhi	r20,5
   47128:	a5069b84 	addi	r20,r20,6766
   4712c:	e5c01d0e 	bge	fp,r23,471a4 <___vfprintf_internal_r+0xb4c>
   47130:	dc812a15 	stw	r18,1192(sp)
   47134:	058001c4 	movi	r22,7
   47138:	a025883a 	mov	r18,r20
   4713c:	8029883a 	mov	r20,r16
   47140:	dc012917 	ldw	r16,1188(sp)
   47144:	00000306 	br	47154 <___vfprintf_internal_r+0xafc>
   47148:	bdfffc04 	addi	r23,r23,-16
   4714c:	4a400204 	addi	r9,r9,8
   47150:	e5c0110e 	bge	fp,r23,47198 <___vfprintf_internal_r+0xb40>
   47154:	4c800015 	stw	r18,0(r9)
   47158:	4f000115 	stw	fp,4(r9)
   4715c:	42000404 	addi	r8,r8,16
   47160:	18c00044 	addi	r3,r3,1
   47164:	da011d15 	stw	r8,1140(sp)
   47168:	d8c11c15 	stw	r3,1136(sp)
   4716c:	b0fff60e 	bge	r22,r3,47148 <___vfprintf_internal_r+0xaf0>
   47170:	8809883a 	mov	r4,r17
   47174:	800b883a 	mov	r5,r16
   47178:	d9811b04 	addi	r6,sp,1132
   4717c:	00466240 	call	46624 <__sprint_r>
   47180:	103ec81e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47184:	bdfffc04 	addi	r23,r23,-16
   47188:	da011d17 	ldw	r8,1140(sp)
   4718c:	d8c11c17 	ldw	r3,1136(sp)
   47190:	da400404 	addi	r9,sp,16
   47194:	e5ffef16 	blt	fp,r23,47154 <___vfprintf_internal_r+0xafc>
   47198:	a021883a 	mov	r16,r20
   4719c:	9029883a 	mov	r20,r18
   471a0:	dc812a17 	ldw	r18,1192(sp)
   471a4:	4d000015 	stw	r20,0(r9)
   471a8:	4dc00115 	stw	r23,4(r9)
   471ac:	45d1883a 	add	r8,r8,r23
   471b0:	18c00044 	addi	r3,r3,1
   471b4:	da011d15 	stw	r8,1140(sp)
   471b8:	d8c11c15 	stw	r3,1136(sp)
   471bc:	008001c4 	movi	r2,7
   471c0:	10c13e16 	blt	r2,r3,476bc <___vfprintf_internal_r+0x1064>
   471c4:	4a400204 	addi	r9,r9,8
   471c8:	8080400c 	andi	r2,r16,256
   471cc:	1000831e 	bne	r2,zero,473dc <___vfprintf_internal_r+0xd84>
   471d0:	d8812b17 	ldw	r2,1196(sp)
   471d4:	4cc00015 	stw	r19,0(r9)
   471d8:	48800115 	stw	r2,4(r9)
   471dc:	4091883a 	add	r8,r8,r2
   471e0:	18c00044 	addi	r3,r3,1
   471e4:	da011d15 	stw	r8,1140(sp)
   471e8:	d8c11c15 	stw	r3,1136(sp)
   471ec:	008001c4 	movi	r2,7
   471f0:	10c05316 	blt	r2,r3,47340 <___vfprintf_internal_r+0xce8>
   471f4:	4a400204 	addi	r9,r9,8
   471f8:	8400010c 	andi	r16,r16,4
   471fc:	80002e26 	beq	r16,zero,472b8 <___vfprintf_internal_r+0xc60>
   47200:	d8812e17 	ldw	r2,1208(sp)
   47204:	d8c12817 	ldw	r3,1184(sp)
   47208:	10e1c83a 	sub	r16,r2,r3
   4720c:	04002a0e 	bge	zero,r16,472b8 <___vfprintf_internal_r+0xc60>
   47210:	04800404 	movi	r18,16
   47214:	d8c11c17 	ldw	r3,1136(sp)
   47218:	05c00174 	movhi	r23,5
   4721c:	bdc69784 	addi	r23,r23,6750
   47220:	9400170e 	bge	r18,r16,47280 <___vfprintf_internal_r+0xc28>
   47224:	04c001c4 	movi	r19,7
   47228:	dd012917 	ldw	r20,1188(sp)
   4722c:	00000306 	br	4723c <___vfprintf_internal_r+0xbe4>
   47230:	843ffc04 	addi	r16,r16,-16
   47234:	4a400204 	addi	r9,r9,8
   47238:	9400110e 	bge	r18,r16,47280 <___vfprintf_internal_r+0xc28>
   4723c:	4dc00015 	stw	r23,0(r9)
   47240:	4c800115 	stw	r18,4(r9)
   47244:	42000404 	addi	r8,r8,16
   47248:	18c00044 	addi	r3,r3,1
   4724c:	da011d15 	stw	r8,1140(sp)
   47250:	d8c11c15 	stw	r3,1136(sp)
   47254:	98fff60e 	bge	r19,r3,47230 <___vfprintf_internal_r+0xbd8>
   47258:	8809883a 	mov	r4,r17
   4725c:	a00b883a 	mov	r5,r20
   47260:	d9811b04 	addi	r6,sp,1132
   47264:	00466240 	call	46624 <__sprint_r>
   47268:	103e8e1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   4726c:	843ffc04 	addi	r16,r16,-16
   47270:	da011d17 	ldw	r8,1140(sp)
   47274:	d8c11c17 	ldw	r3,1136(sp)
   47278:	da400404 	addi	r9,sp,16
   4727c:	943fef16 	blt	r18,r16,4723c <___vfprintf_internal_r+0xbe4>
   47280:	4dc00015 	stw	r23,0(r9)
   47284:	4c000115 	stw	r16,4(r9)
   47288:	8211883a 	add	r8,r16,r8
   4728c:	18c00044 	addi	r3,r3,1
   47290:	da011d15 	stw	r8,1140(sp)
   47294:	d8c11c15 	stw	r3,1136(sp)
   47298:	008001c4 	movi	r2,7
   4729c:	10c0060e 	bge	r2,r3,472b8 <___vfprintf_internal_r+0xc60>
   472a0:	d9412917 	ldw	r5,1188(sp)
   472a4:	8809883a 	mov	r4,r17
   472a8:	d9811b04 	addi	r6,sp,1132
   472ac:	00466240 	call	46624 <__sprint_r>
   472b0:	103e7c1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   472b4:	da011d17 	ldw	r8,1140(sp)
   472b8:	dd012817 	ldw	r20,1184(sp)
   472bc:	d9012e17 	ldw	r4,1208(sp)
   472c0:	a100010e 	bge	r20,r4,472c8 <___vfprintf_internal_r+0xc70>
   472c4:	2029883a 	mov	r20,r4
   472c8:	d8812c17 	ldw	r2,1200(sp)
   472cc:	1505883a 	add	r2,r2,r20
   472d0:	d8812c15 	stw	r2,1200(sp)
   472d4:	4000b91e 	bne	r8,zero,475bc <___vfprintf_internal_r+0xf64>
   472d8:	d8011c15 	stw	zero,1136(sp)
   472dc:	a8800007 	ldb	r2,0(r21)
   472e0:	da400404 	addi	r9,sp,16
   472e4:	103d141e 	bne	r2,zero,46738 <___vfprintf_internal_r+0xe0>
   472e8:	a825883a 	mov	r18,r21
   472ec:	003d2a06 	br	46798 <___vfprintf_internal_r+0x140>
   472f0:	d9412917 	ldw	r5,1188(sp)
   472f4:	8809883a 	mov	r4,r17
   472f8:	d9811b04 	addi	r6,sp,1132
   472fc:	00466240 	call	46624 <__sprint_r>
   47300:	103e681e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47304:	da011d17 	ldw	r8,1140(sp)
   47308:	da400404 	addi	r9,sp,16
   4730c:	8080004c 	andi	r2,r16,1
   47310:	103fb926 	beq	r2,zero,471f8 <___vfprintf_internal_r+0xba0>
   47314:	d8c11c17 	ldw	r3,1136(sp)
   47318:	d9013717 	ldw	r4,1244(sp)
   4731c:	00800044 	movi	r2,1
   47320:	48800115 	stw	r2,4(r9)
   47324:	49000015 	stw	r4,0(r9)
   47328:	4091883a 	add	r8,r8,r2
   4732c:	1887883a 	add	r3,r3,r2
   47330:	da011d15 	stw	r8,1140(sp)
   47334:	d8c11c15 	stw	r3,1136(sp)
   47338:	008001c4 	movi	r2,7
   4733c:	10ffad0e 	bge	r2,r3,471f4 <___vfprintf_internal_r+0xb9c>
   47340:	d9412917 	ldw	r5,1188(sp)
   47344:	8809883a 	mov	r4,r17
   47348:	d9811b04 	addi	r6,sp,1132
   4734c:	00466240 	call	46624 <__sprint_r>
   47350:	103e541e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47354:	da400404 	addi	r9,sp,16
   47358:	da011d17 	ldw	r8,1140(sp)
   4735c:	003fa606 	br	471f8 <___vfprintf_internal_r+0xba0>
   47360:	18803fcc 	andi	r2,r3,255
   47364:	00c00044 	movi	r3,1
   47368:	10c10126 	beq	r2,r3,47770 <___vfprintf_internal_r+0x1118>
   4736c:	00c00084 	movi	r3,2
   47370:	10c0f026 	beq	r2,r3,47734 <___vfprintf_internal_r+0x10dc>
   47374:	d8c10dc4 	addi	r3,sp,1079
   47378:	b808d0fa 	srli	r4,r23,3
   4737c:	b00a977a 	slli	r5,r22,29
   47380:	b02cd0fa 	srli	r22,r22,3
   47384:	bdc001cc 	andi	r23,r23,7
   47388:	b8800c04 	addi	r2,r23,48
   4738c:	292eb03a 	or	r23,r5,r4
   47390:	18800005 	stb	r2,0(r3)
   47394:	bd88b03a 	or	r4,r23,r22
   47398:	1827883a 	mov	r19,r3
   4739c:	18ffffc4 	addi	r3,r3,-1
   473a0:	203ff51e 	bne	r4,zero,47378 <___vfprintf_internal_r+0xd20>
   473a4:	8100004c 	andi	r4,r16,1
   473a8:	980b883a 	mov	r5,r19
   473ac:	20000726 	beq	r4,zero,473cc <___vfprintf_internal_r+0xd74>
   473b0:	10803fcc 	andi	r2,r2,255
   473b4:	1080201c 	xori	r2,r2,128
   473b8:	10bfe004 	addi	r2,r2,-128
   473bc:	01000c04 	movi	r4,48
   473c0:	11000226 	beq	r2,r4,473cc <___vfprintf_internal_r+0xd74>
   473c4:	1827883a 	mov	r19,r3
   473c8:	293fffc5 	stb	r4,-1(r5)
   473cc:	d8812717 	ldw	r2,1180(sp)
   473d0:	14c5c83a 	sub	r2,r2,r19
   473d4:	d8812b15 	stw	r2,1196(sp)
   473d8:	003d8406 	br	469ec <___vfprintf_internal_r+0x394>
   473dc:	00801944 	movi	r2,101
   473e0:	14807c0e 	bge	r2,r18,475d4 <___vfprintf_internal_r+0xf7c>
   473e4:	d9013317 	ldw	r4,1228(sp)
   473e8:	d9413417 	ldw	r5,1232(sp)
   473ec:	000d883a 	mov	r6,zero
   473f0:	000f883a 	mov	r7,zero
   473f4:	d8c13b15 	stw	r3,1260(sp)
   473f8:	da013a15 	stw	r8,1256(sp)
   473fc:	da413c15 	stw	r9,1264(sp)
   47400:	00457fc0 	call	457fc <__eqdf2>
   47404:	d8c13b17 	ldw	r3,1260(sp)
   47408:	da013a17 	ldw	r8,1256(sp)
   4740c:	da413c17 	ldw	r9,1264(sp)
   47410:	1001001e 	bne	r2,zero,47814 <___vfprintf_internal_r+0x11bc>
   47414:	00800174 	movhi	r2,5
   47418:	10869704 	addi	r2,r2,6748
   4741c:	48800015 	stw	r2,0(r9)
   47420:	00800044 	movi	r2,1
   47424:	48800115 	stw	r2,4(r9)
   47428:	4091883a 	add	r8,r8,r2
   4742c:	1887883a 	add	r3,r3,r2
   47430:	da011d15 	stw	r8,1140(sp)
   47434:	d8c11c15 	stw	r3,1136(sp)
   47438:	008001c4 	movi	r2,7
   4743c:	10c1dd16 	blt	r2,r3,47bb4 <___vfprintf_internal_r+0x155c>
   47440:	4a400204 	addi	r9,r9,8
   47444:	d8812417 	ldw	r2,1168(sp)
   47448:	d8c13217 	ldw	r3,1224(sp)
   4744c:	10c00216 	blt	r2,r3,47458 <___vfprintf_internal_r+0xe00>
   47450:	8080004c 	andi	r2,r16,1
   47454:	103f6826 	beq	r2,zero,471f8 <___vfprintf_internal_r+0xba0>
   47458:	d8c11c17 	ldw	r3,1136(sp)
   4745c:	d9013717 	ldw	r4,1244(sp)
   47460:	00800044 	movi	r2,1
   47464:	48800115 	stw	r2,4(r9)
   47468:	49000015 	stw	r4,0(r9)
   4746c:	4091883a 	add	r8,r8,r2
   47470:	1887883a 	add	r3,r3,r2
   47474:	da011d15 	stw	r8,1140(sp)
   47478:	d8c11c15 	stw	r3,1136(sp)
   4747c:	008001c4 	movi	r2,7
   47480:	10c2af16 	blt	r2,r3,47f40 <___vfprintf_internal_r+0x18e8>
   47484:	4a400204 	addi	r9,r9,8
   47488:	d8813217 	ldw	r2,1224(sp)
   4748c:	14bfffc4 	addi	r18,r2,-1
   47490:	04bf590e 	bge	zero,r18,471f8 <___vfprintf_internal_r+0xba0>
   47494:	04c00404 	movi	r19,16
   47498:	d8c11c17 	ldw	r3,1136(sp)
   4749c:	05000174 	movhi	r20,5
   474a0:	a5069b84 	addi	r20,r20,6766
   474a4:	9c81630e 	bge	r19,r18,47a34 <___vfprintf_internal_r+0x13dc>
   474a8:	058001c4 	movi	r22,7
   474ac:	ddc12917 	ldw	r23,1188(sp)
   474b0:	00000306 	br	474c0 <___vfprintf_internal_r+0xe68>
   474b4:	4a400204 	addi	r9,r9,8
   474b8:	94bffc04 	addi	r18,r18,-16
   474bc:	9c815d0e 	bge	r19,r18,47a34 <___vfprintf_internal_r+0x13dc>
   474c0:	4d000015 	stw	r20,0(r9)
   474c4:	4cc00115 	stw	r19,4(r9)
   474c8:	42000404 	addi	r8,r8,16
   474cc:	18c00044 	addi	r3,r3,1
   474d0:	da011d15 	stw	r8,1140(sp)
   474d4:	d8c11c15 	stw	r3,1136(sp)
   474d8:	b0fff60e 	bge	r22,r3,474b4 <___vfprintf_internal_r+0xe5c>
   474dc:	8809883a 	mov	r4,r17
   474e0:	b80b883a 	mov	r5,r23
   474e4:	d9811b04 	addi	r6,sp,1132
   474e8:	00466240 	call	46624 <__sprint_r>
   474ec:	103ded1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   474f0:	da011d17 	ldw	r8,1140(sp)
   474f4:	d8c11c17 	ldw	r3,1136(sp)
   474f8:	da400404 	addi	r9,sp,16
   474fc:	003fee06 	br	474b8 <___vfprintf_internal_r+0xe60>
   47500:	d8812e17 	ldw	r2,1208(sp)
   47504:	d9012817 	ldw	r4,1184(sp)
   47508:	112fc83a 	sub	r23,r2,r4
   4750c:	05ff000e 	bge	zero,r23,47110 <___vfprintf_internal_r+0xab8>
   47510:	07000404 	movi	fp,16
   47514:	05000174 	movhi	r20,5
   47518:	a5069b84 	addi	r20,r20,6766
   4751c:	e5c01d0e 	bge	fp,r23,47594 <___vfprintf_internal_r+0xf3c>
   47520:	dc812a15 	stw	r18,1192(sp)
   47524:	058001c4 	movi	r22,7
   47528:	a025883a 	mov	r18,r20
   4752c:	8029883a 	mov	r20,r16
   47530:	dc012917 	ldw	r16,1188(sp)
   47534:	00000306 	br	47544 <___vfprintf_internal_r+0xeec>
   47538:	bdfffc04 	addi	r23,r23,-16
   4753c:	4a400204 	addi	r9,r9,8
   47540:	e5c0110e 	bge	fp,r23,47588 <___vfprintf_internal_r+0xf30>
   47544:	4c800015 	stw	r18,0(r9)
   47548:	4f000115 	stw	fp,4(r9)
   4754c:	42000404 	addi	r8,r8,16
   47550:	18c00044 	addi	r3,r3,1
   47554:	da011d15 	stw	r8,1140(sp)
   47558:	d8c11c15 	stw	r3,1136(sp)
   4755c:	b0fff60e 	bge	r22,r3,47538 <___vfprintf_internal_r+0xee0>
   47560:	8809883a 	mov	r4,r17
   47564:	800b883a 	mov	r5,r16
   47568:	d9811b04 	addi	r6,sp,1132
   4756c:	00466240 	call	46624 <__sprint_r>
   47570:	103dcc1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47574:	bdfffc04 	addi	r23,r23,-16
   47578:	da011d17 	ldw	r8,1140(sp)
   4757c:	d8c11c17 	ldw	r3,1136(sp)
   47580:	da400404 	addi	r9,sp,16
   47584:	e5ffef16 	blt	fp,r23,47544 <___vfprintf_internal_r+0xeec>
   47588:	a021883a 	mov	r16,r20
   4758c:	9029883a 	mov	r20,r18
   47590:	dc812a17 	ldw	r18,1192(sp)
   47594:	4d000015 	stw	r20,0(r9)
   47598:	4dc00115 	stw	r23,4(r9)
   4759c:	45d1883a 	add	r8,r8,r23
   475a0:	18c00044 	addi	r3,r3,1
   475a4:	da011d15 	stw	r8,1140(sp)
   475a8:	d8c11c15 	stw	r3,1136(sp)
   475ac:	008001c4 	movi	r2,7
   475b0:	10c11716 	blt	r2,r3,47a10 <___vfprintf_internal_r+0x13b8>
   475b4:	4a400204 	addi	r9,r9,8
   475b8:	003ed506 	br	47110 <___vfprintf_internal_r+0xab8>
   475bc:	d9412917 	ldw	r5,1188(sp)
   475c0:	8809883a 	mov	r4,r17
   475c4:	d9811b04 	addi	r6,sp,1132
   475c8:	00466240 	call	46624 <__sprint_r>
   475cc:	103f4226 	beq	r2,zero,472d8 <___vfprintf_internal_r+0xc80>
   475d0:	003db406 	br	46ca4 <___vfprintf_internal_r+0x64c>
   475d4:	d9013217 	ldw	r4,1224(sp)
   475d8:	00800044 	movi	r2,1
   475dc:	4cc00015 	stw	r19,0(r9)
   475e0:	1100e10e 	bge	r2,r4,47968 <___vfprintf_internal_r+0x1310>
   475e4:	00800044 	movi	r2,1
   475e8:	48800115 	stw	r2,4(r9)
   475ec:	4091883a 	add	r8,r8,r2
   475f0:	1887883a 	add	r3,r3,r2
   475f4:	da011d15 	stw	r8,1140(sp)
   475f8:	d8c11c15 	stw	r3,1136(sp)
   475fc:	008001c4 	movi	r2,7
   47600:	10c0ed16 	blt	r2,r3,479b8 <___vfprintf_internal_r+0x1360>
   47604:	4a400204 	addi	r9,r9,8
   47608:	d8813717 	ldw	r2,1244(sp)
   4760c:	48800015 	stw	r2,0(r9)
   47610:	00800044 	movi	r2,1
   47614:	48800115 	stw	r2,4(r9)
   47618:	4091883a 	add	r8,r8,r2
   4761c:	1887883a 	add	r3,r3,r2
   47620:	da011d15 	stw	r8,1140(sp)
   47624:	d8c11c15 	stw	r3,1136(sp)
   47628:	008001c4 	movi	r2,7
   4762c:	10c0eb16 	blt	r2,r3,479dc <___vfprintf_internal_r+0x1384>
   47630:	4c800204 	addi	r18,r9,8
   47634:	d9013317 	ldw	r4,1228(sp)
   47638:	d9413417 	ldw	r5,1232(sp)
   4763c:	000d883a 	mov	r6,zero
   47640:	000f883a 	mov	r7,zero
   47644:	d8c13b15 	stw	r3,1260(sp)
   47648:	da013a15 	stw	r8,1256(sp)
   4764c:	004e36c0 	call	4e36c <__nedf2>
   47650:	d8c13b17 	ldw	r3,1260(sp)
   47654:	da013a17 	ldw	r8,1256(sp)
   47658:	1000a626 	beq	r2,zero,478f4 <___vfprintf_internal_r+0x129c>
   4765c:	d9013217 	ldw	r4,1224(sp)
   47660:	9cc00044 	addi	r19,r19,1
   47664:	94c00015 	stw	r19,0(r18)
   47668:	20bfffc4 	addi	r2,r4,-1
   4766c:	90800115 	stw	r2,4(r18)
   47670:	4091883a 	add	r8,r8,r2
   47674:	18c00044 	addi	r3,r3,1
   47678:	da011d15 	stw	r8,1140(sp)
   4767c:	d8c11c15 	stw	r3,1136(sp)
   47680:	008001c4 	movi	r2,7
   47684:	10c0c316 	blt	r2,r3,47994 <___vfprintf_internal_r+0x133c>
   47688:	94800204 	addi	r18,r18,8
   4768c:	d9013517 	ldw	r4,1236(sp)
   47690:	d8811fc4 	addi	r2,sp,1151
   47694:	90800015 	stw	r2,0(r18)
   47698:	91000115 	stw	r4,4(r18)
   4769c:	4111883a 	add	r8,r8,r4
   476a0:	18c00044 	addi	r3,r3,1
   476a4:	da011d15 	stw	r8,1140(sp)
   476a8:	d8c11c15 	stw	r3,1136(sp)
   476ac:	008001c4 	movi	r2,7
   476b0:	10ff2316 	blt	r2,r3,47340 <___vfprintf_internal_r+0xce8>
   476b4:	92400204 	addi	r9,r18,8
   476b8:	003ecf06 	br	471f8 <___vfprintf_internal_r+0xba0>
   476bc:	d9412917 	ldw	r5,1188(sp)
   476c0:	8809883a 	mov	r4,r17
   476c4:	d9811b04 	addi	r6,sp,1132
   476c8:	00466240 	call	46624 <__sprint_r>
   476cc:	103d751e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   476d0:	da011d17 	ldw	r8,1140(sp)
   476d4:	d8c11c17 	ldw	r3,1136(sp)
   476d8:	da400404 	addi	r9,sp,16
   476dc:	003eba06 	br	471c8 <___vfprintf_internal_r+0xb70>
   476e0:	d9412917 	ldw	r5,1188(sp)
   476e4:	8809883a 	mov	r4,r17
   476e8:	d9811b04 	addi	r6,sp,1132
   476ec:	00466240 	call	46624 <__sprint_r>
   476f0:	103d6c1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   476f4:	da011d17 	ldw	r8,1140(sp)
   476f8:	d8c11c17 	ldw	r3,1136(sp)
   476fc:	da400404 	addi	r9,sp,16
   47700:	003e7306 	br	470d0 <___vfprintf_internal_r+0xa78>
   47704:	d9412917 	ldw	r5,1188(sp)
   47708:	8809883a 	mov	r4,r17
   4770c:	d9811b04 	addi	r6,sp,1132
   47710:	00466240 	call	46624 <__sprint_r>
   47714:	103d631e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47718:	da011d17 	ldw	r8,1140(sp)
   4771c:	d8c11c17 	ldw	r3,1136(sp)
   47720:	da400404 	addi	r9,sp,16
   47724:	003e7706 	br	47104 <___vfprintf_internal_r+0xaac>
   47728:	d8012b15 	stw	zero,1196(sp)
   4772c:	dcc10e04 	addi	r19,sp,1080
   47730:	003cae06 	br	469ec <___vfprintf_internal_r+0x394>
   47734:	d9413617 	ldw	r5,1240(sp)
   47738:	d8810dc4 	addi	r2,sp,1079
   4773c:	b8c003cc 	andi	r3,r23,15
   47740:	b008973a 	slli	r4,r22,28
   47744:	28c7883a 	add	r3,r5,r3
   47748:	b82ed13a 	srli	r23,r23,4
   4774c:	18c00003 	ldbu	r3,0(r3)
   47750:	b02cd13a 	srli	r22,r22,4
   47754:	25eeb03a 	or	r23,r4,r23
   47758:	10c00005 	stb	r3,0(r2)
   4775c:	bd86b03a 	or	r3,r23,r22
   47760:	1027883a 	mov	r19,r2
   47764:	10bfffc4 	addi	r2,r2,-1
   47768:	183ff41e 	bne	r3,zero,4773c <___vfprintf_internal_r+0x10e4>
   4776c:	003f1706 	br	473cc <___vfprintf_internal_r+0xd74>
   47770:	b0025826 	beq	r22,zero,480d4 <___vfprintf_internal_r+0x1a7c>
   47774:	b807883a 	mov	r3,r23
   47778:	d8810dc4 	addi	r2,sp,1079
   4777c:	882f883a 	mov	r23,r17
   47780:	04c00244 	movi	r19,9
   47784:	8023883a 	mov	r17,r16
   47788:	da412815 	stw	r9,1184(sp)
   4778c:	1821883a 	mov	r16,r3
   47790:	8009883a 	mov	r4,r16
   47794:	b00b883a 	mov	r5,r22
   47798:	01800284 	movi	r6,10
   4779c:	000f883a 	mov	r7,zero
   477a0:	1029883a 	mov	r20,r2
   477a4:	004dde00 	call	4dde0 <__umoddi3>
   477a8:	10800c04 	addi	r2,r2,48
   477ac:	8009883a 	mov	r4,r16
   477b0:	b00b883a 	mov	r5,r22
   477b4:	a0800005 	stb	r2,0(r20)
   477b8:	01800284 	movi	r6,10
   477bc:	000f883a 	mov	r7,zero
   477c0:	004d8180 	call	4d818 <__udivdi3>
   477c4:	1021883a 	mov	r16,r2
   477c8:	182d883a 	mov	r22,r3
   477cc:	a0bfffc4 	addi	r2,r20,-1
   477d0:	183fef1e 	bne	r3,zero,47790 <___vfprintf_internal_r+0x1138>
   477d4:	9c3fee36 	bltu	r19,r16,47790 <___vfprintf_internal_r+0x1138>
   477d8:	da412817 	ldw	r9,1184(sp)
   477dc:	8005883a 	mov	r2,r16
   477e0:	8821883a 	mov	r16,r17
   477e4:	b823883a 	mov	r17,r23
   477e8:	102f883a 	mov	r23,r2
   477ec:	d8812717 	ldw	r2,1180(sp)
   477f0:	a4ffffc4 	addi	r19,r20,-1
   477f4:	bdc00c04 	addi	r23,r23,48
   477f8:	14c5c83a 	sub	r2,r2,r19
   477fc:	a5ffffc5 	stb	r23,-1(r20)
   47800:	d8812b15 	stw	r2,1196(sp)
   47804:	003c7906 	br	469ec <___vfprintf_internal_r+0x394>
   47808:	00c00044 	movi	r3,1
   4780c:	bd84b03a 	or	r2,r23,r22
   47810:	003c6806 	br	469b4 <___vfprintf_internal_r+0x35c>
   47814:	dc812417 	ldw	r18,1168(sp)
   47818:	0480ee0e 	bge	zero,r18,47bd4 <___vfprintf_internal_r+0x157c>
   4781c:	d9013217 	ldw	r4,1224(sp)
   47820:	4cc00015 	stw	r19,0(r9)
   47824:	9100c616 	blt	r18,r4,47b40 <___vfprintf_internal_r+0x14e8>
   47828:	49000115 	stw	r4,4(r9)
   4782c:	4111883a 	add	r8,r8,r4
   47830:	18c00044 	addi	r3,r3,1
   47834:	da011d15 	stw	r8,1140(sp)
   47838:	d8c11c15 	stw	r3,1136(sp)
   4783c:	008001c4 	movi	r2,7
   47840:	10c20916 	blt	r2,r3,48068 <___vfprintf_internal_r+0x1a10>
   47844:	4a400204 	addi	r9,r9,8
   47848:	d8813217 	ldw	r2,1224(sp)
   4784c:	90a5c83a 	sub	r18,r18,r2
   47850:	04beae0e 	bge	zero,r18,4730c <___vfprintf_internal_r+0xcb4>
   47854:	04c00404 	movi	r19,16
   47858:	d8c11c17 	ldw	r3,1136(sp)
   4785c:	05000174 	movhi	r20,5
   47860:	a5069b84 	addi	r20,r20,6766
   47864:	9c81be0e 	bge	r19,r18,47f60 <___vfprintf_internal_r+0x1908>
   47868:	058001c4 	movi	r22,7
   4786c:	ddc12917 	ldw	r23,1188(sp)
   47870:	00000306 	br	47880 <___vfprintf_internal_r+0x1228>
   47874:	4a400204 	addi	r9,r9,8
   47878:	94bffc04 	addi	r18,r18,-16
   4787c:	9c81b80e 	bge	r19,r18,47f60 <___vfprintf_internal_r+0x1908>
   47880:	4d000015 	stw	r20,0(r9)
   47884:	4cc00115 	stw	r19,4(r9)
   47888:	42000404 	addi	r8,r8,16
   4788c:	18c00044 	addi	r3,r3,1
   47890:	da011d15 	stw	r8,1140(sp)
   47894:	d8c11c15 	stw	r3,1136(sp)
   47898:	b0fff60e 	bge	r22,r3,47874 <___vfprintf_internal_r+0x121c>
   4789c:	8809883a 	mov	r4,r17
   478a0:	b80b883a 	mov	r5,r23
   478a4:	d9811b04 	addi	r6,sp,1132
   478a8:	00466240 	call	46624 <__sprint_r>
   478ac:	103cfd1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   478b0:	da011d17 	ldw	r8,1140(sp)
   478b4:	d8c11c17 	ldw	r3,1136(sp)
   478b8:	da400404 	addi	r9,sp,16
   478bc:	003fee06 	br	47878 <___vfprintf_internal_r+0x1220>
   478c0:	d9412917 	ldw	r5,1188(sp)
   478c4:	8809883a 	mov	r4,r17
   478c8:	d9811b04 	addi	r6,sp,1132
   478cc:	00466240 	call	46624 <__sprint_r>
   478d0:	103cf41e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   478d4:	da011d17 	ldw	r8,1140(sp)
   478d8:	d8c11c17 	ldw	r3,1136(sp)
   478dc:	da400404 	addi	r9,sp,16
   478e0:	003dee06 	br	4709c <___vfprintf_internal_r+0xa44>
   478e4:	00c00084 	movi	r3,2
   478e8:	bd84b03a 	or	r2,r23,r22
   478ec:	d8012585 	stb	zero,1174(sp)
   478f0:	003c3006 	br	469b4 <___vfprintf_internal_r+0x35c>
   478f4:	d8813217 	ldw	r2,1224(sp)
   478f8:	14ffffc4 	addi	r19,r2,-1
   478fc:	04ff630e 	bge	zero,r19,4768c <___vfprintf_internal_r+0x1034>
   47900:	05800404 	movi	r22,16
   47904:	05000174 	movhi	r20,5
   47908:	a5069b84 	addi	r20,r20,6766
   4790c:	b4c03c0e 	bge	r22,r19,47a00 <___vfprintf_internal_r+0x13a8>
   47910:	05c001c4 	movi	r23,7
   47914:	df012917 	ldw	fp,1188(sp)
   47918:	00000306 	br	47928 <___vfprintf_internal_r+0x12d0>
   4791c:	94800204 	addi	r18,r18,8
   47920:	9cfffc04 	addi	r19,r19,-16
   47924:	b4c0360e 	bge	r22,r19,47a00 <___vfprintf_internal_r+0x13a8>
   47928:	95000015 	stw	r20,0(r18)
   4792c:	95800115 	stw	r22,4(r18)
   47930:	42000404 	addi	r8,r8,16
   47934:	18c00044 	addi	r3,r3,1
   47938:	da011d15 	stw	r8,1140(sp)
   4793c:	d8c11c15 	stw	r3,1136(sp)
   47940:	b8fff60e 	bge	r23,r3,4791c <___vfprintf_internal_r+0x12c4>
   47944:	8809883a 	mov	r4,r17
   47948:	e00b883a 	mov	r5,fp
   4794c:	d9811b04 	addi	r6,sp,1132
   47950:	00466240 	call	46624 <__sprint_r>
   47954:	103cd31e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47958:	da011d17 	ldw	r8,1140(sp)
   4795c:	d8c11c17 	ldw	r3,1136(sp)
   47960:	dc800404 	addi	r18,sp,16
   47964:	003fee06 	br	47920 <___vfprintf_internal_r+0x12c8>
   47968:	8088703a 	and	r4,r16,r2
   4796c:	203f1d1e 	bne	r4,zero,475e4 <___vfprintf_internal_r+0xf8c>
   47970:	48800115 	stw	r2,4(r9)
   47974:	42000044 	addi	r8,r8,1
   47978:	18c00044 	addi	r3,r3,1
   4797c:	da011d15 	stw	r8,1140(sp)
   47980:	d8c11c15 	stw	r3,1136(sp)
   47984:	008001c4 	movi	r2,7
   47988:	10c00216 	blt	r2,r3,47994 <___vfprintf_internal_r+0x133c>
   4798c:	4c800204 	addi	r18,r9,8
   47990:	003f3e06 	br	4768c <___vfprintf_internal_r+0x1034>
   47994:	d9412917 	ldw	r5,1188(sp)
   47998:	8809883a 	mov	r4,r17
   4799c:	d9811b04 	addi	r6,sp,1132
   479a0:	00466240 	call	46624 <__sprint_r>
   479a4:	103cbf1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   479a8:	dc800404 	addi	r18,sp,16
   479ac:	da011d17 	ldw	r8,1140(sp)
   479b0:	d8c11c17 	ldw	r3,1136(sp)
   479b4:	003f3506 	br	4768c <___vfprintf_internal_r+0x1034>
   479b8:	d9412917 	ldw	r5,1188(sp)
   479bc:	8809883a 	mov	r4,r17
   479c0:	d9811b04 	addi	r6,sp,1132
   479c4:	00466240 	call	46624 <__sprint_r>
   479c8:	103cb61e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   479cc:	da011d17 	ldw	r8,1140(sp)
   479d0:	d8c11c17 	ldw	r3,1136(sp)
   479d4:	da400404 	addi	r9,sp,16
   479d8:	003f0b06 	br	47608 <___vfprintf_internal_r+0xfb0>
   479dc:	d9412917 	ldw	r5,1188(sp)
   479e0:	8809883a 	mov	r4,r17
   479e4:	d9811b04 	addi	r6,sp,1132
   479e8:	00466240 	call	46624 <__sprint_r>
   479ec:	103cad1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   479f0:	da011d17 	ldw	r8,1140(sp)
   479f4:	d8c11c17 	ldw	r3,1136(sp)
   479f8:	dc800404 	addi	r18,sp,16
   479fc:	003f0d06 	br	47634 <___vfprintf_internal_r+0xfdc>
   47a00:	95000015 	stw	r20,0(r18)
   47a04:	94c00115 	stw	r19,4(r18)
   47a08:	44d1883a 	add	r8,r8,r19
   47a0c:	003f1906 	br	47674 <___vfprintf_internal_r+0x101c>
   47a10:	d9412917 	ldw	r5,1188(sp)
   47a14:	8809883a 	mov	r4,r17
   47a18:	d9811b04 	addi	r6,sp,1132
   47a1c:	00466240 	call	46624 <__sprint_r>
   47a20:	103ca01e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47a24:	da011d17 	ldw	r8,1140(sp)
   47a28:	d8c11c17 	ldw	r3,1136(sp)
   47a2c:	da400404 	addi	r9,sp,16
   47a30:	003db706 	br	47110 <___vfprintf_internal_r+0xab8>
   47a34:	4d000015 	stw	r20,0(r9)
   47a38:	4c800115 	stw	r18,4(r9)
   47a3c:	4491883a 	add	r8,r8,r18
   47a40:	003de706 	br	471e0 <___vfprintf_internal_r+0xb88>
   47a44:	8080100c 	andi	r2,r16,64
   47a48:	10010226 	beq	r2,zero,47e54 <___vfprintf_internal_r+0x17fc>
   47a4c:	d8812d17 	ldw	r2,1204(sp)
   47a50:	002d883a 	mov	r22,zero
   47a54:	00c00044 	movi	r3,1
   47a58:	15c0000b 	ldhu	r23,0(r2)
   47a5c:	10800104 	addi	r2,r2,4
   47a60:	d8812d15 	stw	r2,1204(sp)
   47a64:	d8012585 	stb	zero,1174(sp)
   47a68:	b805883a 	mov	r2,r23
   47a6c:	003bd106 	br	469b4 <___vfprintf_internal_r+0x35c>
   47a70:	d9012d17 	ldw	r4,1204(sp)
   47a74:	25800017 	ldw	r22,0(r4)
   47a78:	25000117 	ldw	r20,4(r4)
   47a7c:	21000204 	addi	r4,r4,8
   47a80:	d9012d15 	stw	r4,1204(sp)
   47a84:	dd813315 	stw	r22,1228(sp)
   47a88:	dd013415 	stw	r20,1232(sp)
   47a8c:	003d2b06 	br	46f3c <___vfprintf_internal_r+0x8e4>
   47a90:	8080100c 	andi	r2,r16,64
   47a94:	1000fe26 	beq	r2,zero,47e90 <___vfprintf_internal_r+0x1838>
   47a98:	d9012d17 	ldw	r4,1204(sp)
   47a9c:	002d883a 	mov	r22,zero
   47aa0:	0007883a 	mov	r3,zero
   47aa4:	25c0000b 	ldhu	r23,0(r4)
   47aa8:	21000104 	addi	r4,r4,4
   47aac:	d9012d15 	stw	r4,1204(sp)
   47ab0:	b805883a 	mov	r2,r23
   47ab4:	d8012585 	stb	zero,1174(sp)
   47ab8:	003bbe06 	br	469b4 <___vfprintf_internal_r+0x35c>
   47abc:	8080100c 	andi	r2,r16,64
   47ac0:	1000ed26 	beq	r2,zero,47e78 <___vfprintf_internal_r+0x1820>
   47ac4:	d9012d17 	ldw	r4,1204(sp)
   47ac8:	002d883a 	mov	r22,zero
   47acc:	25c0000b 	ldhu	r23,0(r4)
   47ad0:	21000104 	addi	r4,r4,4
   47ad4:	d9012d15 	stw	r4,1204(sp)
   47ad8:	003cd206 	br	46e24 <___vfprintf_internal_r+0x7cc>
   47adc:	00c00084 	movi	r3,2
   47ae0:	d8012585 	stb	zero,1174(sp)
   47ae4:	003bb306 	br	469b4 <___vfprintf_internal_r+0x35c>
   47ae8:	8080040c 	andi	r2,r16,16
   47aec:	1000f11e 	bne	r2,zero,47eb4 <___vfprintf_internal_r+0x185c>
   47af0:	8400100c 	andi	r16,r16,64
   47af4:	80015526 	beq	r16,zero,4804c <___vfprintf_internal_r+0x19f4>
   47af8:	da012d17 	ldw	r8,1204(sp)
   47afc:	d8c12c17 	ldw	r3,1200(sp)
   47b00:	40800017 	ldw	r2,0(r8)
   47b04:	42000104 	addi	r8,r8,4
   47b08:	da012d15 	stw	r8,1204(sp)
   47b0c:	10c0000d 	sth	r3,0(r2)
   47b10:	003b0706 	br	46730 <___vfprintf_internal_r+0xd8>
   47b14:	8080100c 	andi	r2,r16,64
   47b18:	1000c726 	beq	r2,zero,47e38 <___vfprintf_internal_r+0x17e0>
   47b1c:	da012d17 	ldw	r8,1204(sp)
   47b20:	45c0000f 	ldh	r23,0(r8)
   47b24:	42000104 	addi	r8,r8,4
   47b28:	da012d15 	stw	r8,1204(sp)
   47b2c:	b82dd7fa 	srai	r22,r23,31
   47b30:	b005883a 	mov	r2,r22
   47b34:	003c1006 	br	46b78 <___vfprintf_internal_r+0x520>
   47b38:	ac800007 	ldb	r18,0(r21)
   47b3c:	003b2406 	br	467d0 <___vfprintf_internal_r+0x178>
   47b40:	4c800115 	stw	r18,4(r9)
   47b44:	9211883a 	add	r8,r18,r8
   47b48:	18c00044 	addi	r3,r3,1
   47b4c:	da011d15 	stw	r8,1140(sp)
   47b50:	d8c11c15 	stw	r3,1136(sp)
   47b54:	008001c4 	movi	r2,7
   47b58:	10c15416 	blt	r2,r3,480ac <___vfprintf_internal_r+0x1a54>
   47b5c:	4a400204 	addi	r9,r9,8
   47b60:	d8813717 	ldw	r2,1244(sp)
   47b64:	9ca7883a 	add	r19,r19,r18
   47b68:	48800015 	stw	r2,0(r9)
   47b6c:	00800044 	movi	r2,1
   47b70:	48800115 	stw	r2,4(r9)
   47b74:	4091883a 	add	r8,r8,r2
   47b78:	1887883a 	add	r3,r3,r2
   47b7c:	da011d15 	stw	r8,1140(sp)
   47b80:	d8c11c15 	stw	r3,1136(sp)
   47b84:	008001c4 	movi	r2,7
   47b88:	10c14016 	blt	r2,r3,4808c <___vfprintf_internal_r+0x1a34>
   47b8c:	4a400204 	addi	r9,r9,8
   47b90:	d9013217 	ldw	r4,1224(sp)
   47b94:	da011d17 	ldw	r8,1140(sp)
   47b98:	d8c11c17 	ldw	r3,1136(sp)
   47b9c:	24a5c83a 	sub	r18,r4,r18
   47ba0:	4cc00015 	stw	r19,0(r9)
   47ba4:	003fa406 	br	47a38 <___vfprintf_internal_r+0x13e0>
   47ba8:	04c00174 	movhi	r19,5
   47bac:	9cc68804 	addi	r19,r19,6688
   47bb0:	003cf406 	br	46f84 <___vfprintf_internal_r+0x92c>
   47bb4:	d9412917 	ldw	r5,1188(sp)
   47bb8:	8809883a 	mov	r4,r17
   47bbc:	d9811b04 	addi	r6,sp,1132
   47bc0:	00466240 	call	46624 <__sprint_r>
   47bc4:	103c371e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47bc8:	da011d17 	ldw	r8,1140(sp)
   47bcc:	da400404 	addi	r9,sp,16
   47bd0:	003e1c06 	br	47444 <___vfprintf_internal_r+0xdec>
   47bd4:	00800174 	movhi	r2,5
   47bd8:	10869704 	addi	r2,r2,6748
   47bdc:	48800015 	stw	r2,0(r9)
   47be0:	00800044 	movi	r2,1
   47be4:	48800115 	stw	r2,4(r9)
   47be8:	4091883a 	add	r8,r8,r2
   47bec:	1887883a 	add	r3,r3,r2
   47bf0:	da011d15 	stw	r8,1140(sp)
   47bf4:	d8c11c15 	stw	r3,1136(sp)
   47bf8:	008001c4 	movi	r2,7
   47bfc:	10c0c316 	blt	r2,r3,47f0c <___vfprintf_internal_r+0x18b4>
   47c00:	4a400204 	addi	r9,r9,8
   47c04:	9000041e 	bne	r18,zero,47c18 <___vfprintf_internal_r+0x15c0>
   47c08:	d8c13217 	ldw	r3,1224(sp)
   47c0c:	1800021e 	bne	r3,zero,47c18 <___vfprintf_internal_r+0x15c0>
   47c10:	8080004c 	andi	r2,r16,1
   47c14:	103d7826 	beq	r2,zero,471f8 <___vfprintf_internal_r+0xba0>
   47c18:	d8c11c17 	ldw	r3,1136(sp)
   47c1c:	d9013717 	ldw	r4,1244(sp)
   47c20:	00800044 	movi	r2,1
   47c24:	48800115 	stw	r2,4(r9)
   47c28:	49000015 	stw	r4,0(r9)
   47c2c:	4091883a 	add	r8,r8,r2
   47c30:	1887883a 	add	r3,r3,r2
   47c34:	da011d15 	stw	r8,1140(sp)
   47c38:	d8c11c15 	stw	r3,1136(sp)
   47c3c:	008001c4 	movi	r2,7
   47c40:	10c12e16 	blt	r2,r3,480fc <___vfprintf_internal_r+0x1aa4>
   47c44:	4a400204 	addi	r9,r9,8
   47c48:	04a5c83a 	sub	r18,zero,r18
   47c4c:	0480de0e 	bge	zero,r18,47fc8 <___vfprintf_internal_r+0x1970>
   47c50:	05800404 	movi	r22,16
   47c54:	05000174 	movhi	r20,5
   47c58:	a5069b84 	addi	r20,r20,6766
   47c5c:	b480e20e 	bge	r22,r18,47fe8 <___vfprintf_internal_r+0x1990>
   47c60:	05c001c4 	movi	r23,7
   47c64:	df012917 	ldw	fp,1188(sp)
   47c68:	00000306 	br	47c78 <___vfprintf_internal_r+0x1620>
   47c6c:	4a400204 	addi	r9,r9,8
   47c70:	94bffc04 	addi	r18,r18,-16
   47c74:	b480dc0e 	bge	r22,r18,47fe8 <___vfprintf_internal_r+0x1990>
   47c78:	4d000015 	stw	r20,0(r9)
   47c7c:	4d800115 	stw	r22,4(r9)
   47c80:	42000404 	addi	r8,r8,16
   47c84:	18c00044 	addi	r3,r3,1
   47c88:	da011d15 	stw	r8,1140(sp)
   47c8c:	d8c11c15 	stw	r3,1136(sp)
   47c90:	b8fff60e 	bge	r23,r3,47c6c <___vfprintf_internal_r+0x1614>
   47c94:	8809883a 	mov	r4,r17
   47c98:	e00b883a 	mov	r5,fp
   47c9c:	d9811b04 	addi	r6,sp,1132
   47ca0:	00466240 	call	46624 <__sprint_r>
   47ca4:	103bff1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47ca8:	da011d17 	ldw	r8,1140(sp)
   47cac:	d8c11c17 	ldw	r3,1136(sp)
   47cb0:	da400404 	addi	r9,sp,16
   47cb4:	003fee06 	br	47c70 <___vfprintf_internal_r+0x1618>
   47cb8:	da413c15 	stw	r9,1264(sp)
   47cbc:	004d1240 	call	4d124 <__isnand>
   47cc0:	da413c17 	ldw	r9,1264(sp)
   47cc4:	1000851e 	bne	r2,zero,47edc <___vfprintf_internal_r+0x1884>
   47cc8:	00bfffc4 	movi	r2,-1
   47ccc:	e0817626 	beq	fp,r2,482a8 <___vfprintf_internal_r+0x1c50>
   47cd0:	008019c4 	movi	r2,103
   47cd4:	90817126 	beq	r18,r2,4829c <___vfprintf_internal_r+0x1c44>
   47cd8:	008011c4 	movi	r2,71
   47cdc:	90816f26 	beq	r18,r2,4829c <___vfprintf_internal_r+0x1c44>
   47ce0:	82004014 	ori	r8,r16,256
   47ce4:	da012a15 	stw	r8,1192(sp)
   47ce8:	a0017116 	blt	r20,zero,482b0 <___vfprintf_internal_r+0x1c58>
   47cec:	d8012f05 	stb	zero,1212(sp)
   47cf0:	00801984 	movi	r2,102
   47cf4:	90811226 	beq	r18,r2,48140 <___vfprintf_internal_r+0x1ae8>
   47cf8:	00801184 	movi	r2,70
   47cfc:	90811026 	beq	r18,r2,48140 <___vfprintf_internal_r+0x1ae8>
   47d00:	00801944 	movi	r2,101
   47d04:	90819b26 	beq	r18,r2,48374 <___vfprintf_internal_r+0x1d1c>
   47d08:	00801144 	movi	r2,69
   47d0c:	90819926 	beq	r18,r2,48374 <___vfprintf_internal_r+0x1d1c>
   47d10:	e02f883a 	mov	r23,fp
   47d14:	d8812404 	addi	r2,sp,1168
   47d18:	d8800115 	stw	r2,4(sp)
   47d1c:	d8812304 	addi	r2,sp,1164
   47d20:	d8800215 	stw	r2,8(sp)
   47d24:	d8812204 	addi	r2,sp,1160
   47d28:	ddc00015 	stw	r23,0(sp)
   47d2c:	d8800315 	stw	r2,12(sp)
   47d30:	8809883a 	mov	r4,r17
   47d34:	b00b883a 	mov	r5,r22
   47d38:	a00d883a 	mov	r6,r20
   47d3c:	01c00084 	movi	r7,2
   47d40:	da413c15 	stw	r9,1264(sp)
   47d44:	00487f00 	call	487f0 <_dtoa_r>
   47d48:	1027883a 	mov	r19,r2
   47d4c:	008019c4 	movi	r2,103
   47d50:	da413c17 	ldw	r9,1264(sp)
   47d54:	90818c1e 	bne	r18,r2,48388 <___vfprintf_internal_r+0x1d30>
   47d58:	8080004c 	andi	r2,r16,1
   47d5c:	10017926 	beq	r2,zero,48344 <___vfprintf_internal_r+0x1cec>
   47d60:	00801184 	movi	r2,70
   47d64:	9dc7883a 	add	r3,r19,r23
   47d68:	90810626 	beq	r18,r2,48184 <___vfprintf_internal_r+0x1b2c>
   47d6c:	b009883a 	mov	r4,r22
   47d70:	a00b883a 	mov	r5,r20
   47d74:	000d883a 	mov	r6,zero
   47d78:	000f883a 	mov	r7,zero
   47d7c:	d8c13b15 	stw	r3,1260(sp)
   47d80:	da413c15 	stw	r9,1264(sp)
   47d84:	00457fc0 	call	457fc <__eqdf2>
   47d88:	d8c13b17 	ldw	r3,1260(sp)
   47d8c:	da413c17 	ldw	r9,1264(sp)
   47d90:	10000726 	beq	r2,zero,47db0 <___vfprintf_internal_r+0x1758>
   47d94:	d8812217 	ldw	r2,1160(sp)
   47d98:	10c1962e 	bgeu	r2,r3,483f4 <___vfprintf_internal_r+0x1d9c>
   47d9c:	01000c04 	movi	r4,48
   47da0:	11000005 	stb	r4,0(r2)
   47da4:	10800044 	addi	r2,r2,1
   47da8:	d8812215 	stw	r2,1160(sp)
   47dac:	10fffc1e 	bne	r2,r3,47da0 <___vfprintf_internal_r+0x1748>
   47db0:	1cc7c83a 	sub	r3,r3,r19
   47db4:	d8c13215 	stw	r3,1224(sp)
   47db8:	008019c4 	movi	r2,103
   47dbc:	90810626 	beq	r18,r2,481d8 <___vfprintf_internal_r+0x1b80>
   47dc0:	008011c4 	movi	r2,71
   47dc4:	90810426 	beq	r18,r2,481d8 <___vfprintf_internal_r+0x1b80>
   47dc8:	00801984 	movi	r2,102
   47dcc:	90819a1e 	bne	r18,r2,48438 <___vfprintf_internal_r+0x1de0>
   47dd0:	d8812417 	ldw	r2,1168(sp)
   47dd4:	d8812b15 	stw	r2,1196(sp)
   47dd8:	0081880e 	bge	zero,r2,483fc <___vfprintf_internal_r+0x1da4>
   47ddc:	e000021e 	bne	fp,zero,47de8 <___vfprintf_internal_r+0x1790>
   47de0:	8400004c 	andi	r16,r16,1
   47de4:	80000426 	beq	r16,zero,47df8 <___vfprintf_internal_r+0x17a0>
   47de8:	d8812b17 	ldw	r2,1196(sp)
   47dec:	e2000044 	addi	r8,fp,1
   47df0:	1205883a 	add	r2,r2,r8
   47df4:	d8812b15 	stw	r2,1196(sp)
   47df8:	d8812815 	stw	r2,1184(sp)
   47dfc:	10011716 	blt	r2,zero,4825c <___vfprintf_internal_r+0x1c04>
   47e00:	ddc12f07 	ldb	r23,1212(sp)
   47e04:	b800ca26 	beq	r23,zero,48130 <___vfprintf_internal_r+0x1ad8>
   47e08:	00800b44 	movi	r2,45
   47e0c:	d8812585 	stb	r2,1174(sp)
   47e10:	dc012a17 	ldw	r16,1192(sp)
   47e14:	d8013115 	stw	zero,1220(sp)
   47e18:	003afe06 	br	46a14 <___vfprintf_internal_r+0x3bc>
   47e1c:	d8812b17 	ldw	r2,1196(sp)
   47e20:	d8812815 	stw	r2,1184(sp)
   47e24:	10005e16 	blt	r2,zero,47fa0 <___vfprintf_internal_r+0x1948>
   47e28:	d8812583 	ldbu	r2,1174(sp)
   47e2c:	ddc12d15 	stw	r23,1204(sp)
   47e30:	d8013115 	stw	zero,1220(sp)
   47e34:	003af306 	br	46a04 <___vfprintf_internal_r+0x3ac>
   47e38:	d8812d17 	ldw	r2,1204(sp)
   47e3c:	15c00017 	ldw	r23,0(r2)
   47e40:	10800104 	addi	r2,r2,4
   47e44:	d8812d15 	stw	r2,1204(sp)
   47e48:	b82dd7fa 	srai	r22,r23,31
   47e4c:	b005883a 	mov	r2,r22
   47e50:	003b4906 	br	46b78 <___vfprintf_internal_r+0x520>
   47e54:	d8c12d17 	ldw	r3,1204(sp)
   47e58:	002d883a 	mov	r22,zero
   47e5c:	1dc00017 	ldw	r23,0(r3)
   47e60:	18c00104 	addi	r3,r3,4
   47e64:	d8c12d15 	stw	r3,1204(sp)
   47e68:	b805883a 	mov	r2,r23
   47e6c:	00c00044 	movi	r3,1
   47e70:	d8012585 	stb	zero,1174(sp)
   47e74:	003acf06 	br	469b4 <___vfprintf_internal_r+0x35c>
   47e78:	da012d17 	ldw	r8,1204(sp)
   47e7c:	002d883a 	mov	r22,zero
   47e80:	45c00017 	ldw	r23,0(r8)
   47e84:	42000104 	addi	r8,r8,4
   47e88:	da012d15 	stw	r8,1204(sp)
   47e8c:	003be506 	br	46e24 <___vfprintf_internal_r+0x7cc>
   47e90:	da012d17 	ldw	r8,1204(sp)
   47e94:	002d883a 	mov	r22,zero
   47e98:	0007883a 	mov	r3,zero
   47e9c:	45c00017 	ldw	r23,0(r8)
   47ea0:	42000104 	addi	r8,r8,4
   47ea4:	da012d15 	stw	r8,1204(sp)
   47ea8:	b805883a 	mov	r2,r23
   47eac:	d8012585 	stb	zero,1174(sp)
   47eb0:	003ac006 	br	469b4 <___vfprintf_internal_r+0x35c>
   47eb4:	d8c12d17 	ldw	r3,1204(sp)
   47eb8:	d9012c17 	ldw	r4,1200(sp)
   47ebc:	18800017 	ldw	r2,0(r3)
   47ec0:	18c00104 	addi	r3,r3,4
   47ec4:	d8c12d15 	stw	r3,1204(sp)
   47ec8:	11000015 	stw	r4,0(r2)
   47ecc:	003a1806 	br	46730 <___vfprintf_internal_r+0xd8>
   47ed0:	073fffc4 	movi	fp,-1
   47ed4:	202b883a 	mov	r21,r4
   47ed8:	003a3e06 	br	467d4 <___vfprintf_internal_r+0x17c>
   47edc:	008011c4 	movi	r2,71
   47ee0:	14809016 	blt	r2,r18,48124 <___vfprintf_internal_r+0x1acc>
   47ee4:	04c00174 	movhi	r19,5
   47ee8:	9cc68904 	addi	r19,r19,6692
   47eec:	00c000c4 	movi	r3,3
   47ef0:	00bfdfc4 	movi	r2,-129
   47ef4:	80a0703a 	and	r16,r16,r2
   47ef8:	d8c12815 	stw	r3,1184(sp)
   47efc:	d8812583 	ldbu	r2,1174(sp)
   47f00:	d8c12b15 	stw	r3,1196(sp)
   47f04:	d8013115 	stw	zero,1220(sp)
   47f08:	003abe06 	br	46a04 <___vfprintf_internal_r+0x3ac>
   47f0c:	d9412917 	ldw	r5,1188(sp)
   47f10:	8809883a 	mov	r4,r17
   47f14:	d9811b04 	addi	r6,sp,1132
   47f18:	00466240 	call	46624 <__sprint_r>
   47f1c:	103b611e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47f20:	dc812417 	ldw	r18,1168(sp)
   47f24:	da011d17 	ldw	r8,1140(sp)
   47f28:	da400404 	addi	r9,sp,16
   47f2c:	003f3506 	br	47c04 <___vfprintf_internal_r+0x15ac>
   47f30:	ad400044 	addi	r21,r21,1
   47f34:	84000814 	ori	r16,r16,32
   47f38:	14800047 	ldb	r18,1(r2)
   47f3c:	003a2406 	br	467d0 <___vfprintf_internal_r+0x178>
   47f40:	d9412917 	ldw	r5,1188(sp)
   47f44:	8809883a 	mov	r4,r17
   47f48:	d9811b04 	addi	r6,sp,1132
   47f4c:	00466240 	call	46624 <__sprint_r>
   47f50:	103b541e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47f54:	da011d17 	ldw	r8,1140(sp)
   47f58:	da400404 	addi	r9,sp,16
   47f5c:	003d4a06 	br	47488 <___vfprintf_internal_r+0xe30>
   47f60:	4d000015 	stw	r20,0(r9)
   47f64:	4c800115 	stw	r18,4(r9)
   47f68:	4491883a 	add	r8,r8,r18
   47f6c:	18c00044 	addi	r3,r3,1
   47f70:	da011d15 	stw	r8,1140(sp)
   47f74:	d8c11c15 	stw	r3,1136(sp)
   47f78:	008001c4 	movi	r2,7
   47f7c:	10fcdc16 	blt	r2,r3,472f0 <___vfprintf_internal_r+0xc98>
   47f80:	4a400204 	addi	r9,r9,8
   47f84:	003ce106 	br	4730c <___vfprintf_internal_r+0xcb4>
   47f88:	da413c15 	stw	r9,1264(sp)
   47f8c:	00465980 	call	46598 <strlen>
   47f90:	d8812b15 	stw	r2,1196(sp)
   47f94:	d8812815 	stw	r2,1184(sp)
   47f98:	da413c17 	ldw	r9,1264(sp)
   47f9c:	103fa20e 	bge	r2,zero,47e28 <___vfprintf_internal_r+0x17d0>
   47fa0:	d8012815 	stw	zero,1184(sp)
   47fa4:	003fa006 	br	47e28 <___vfprintf_internal_r+0x17d0>
   47fa8:	d9412917 	ldw	r5,1188(sp)
   47fac:	8809883a 	mov	r4,r17
   47fb0:	d9811b04 	addi	r6,sp,1132
   47fb4:	00466240 	call	46624 <__sprint_r>
   47fb8:	103b3a1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   47fbc:	da011d17 	ldw	r8,1140(sp)
   47fc0:	d8c11c17 	ldw	r3,1136(sp)
   47fc4:	da400404 	addi	r9,sp,16
   47fc8:	d8813217 	ldw	r2,1224(sp)
   47fcc:	4cc00015 	stw	r19,0(r9)
   47fd0:	48800115 	stw	r2,4(r9)
   47fd4:	4091883a 	add	r8,r8,r2
   47fd8:	003c8106 	br	471e0 <___vfprintf_internal_r+0xb88>
   47fdc:	00800b44 	movi	r2,45
   47fe0:	d8812585 	stb	r2,1174(sp)
   47fe4:	003be306 	br	46f74 <___vfprintf_internal_r+0x91c>
   47fe8:	4d000015 	stw	r20,0(r9)
   47fec:	4c800115 	stw	r18,4(r9)
   47ff0:	4491883a 	add	r8,r8,r18
   47ff4:	18c00044 	addi	r3,r3,1
   47ff8:	da011d15 	stw	r8,1140(sp)
   47ffc:	d8c11c15 	stw	r3,1136(sp)
   48000:	008001c4 	movi	r2,7
   48004:	10ffe816 	blt	r2,r3,47fa8 <___vfprintf_internal_r+0x1950>
   48008:	4a400204 	addi	r9,r9,8
   4800c:	003fee06 	br	47fc8 <___vfprintf_internal_r+0x1970>
   48010:	df012b15 	stw	fp,1196(sp)
   48014:	00800184 	movi	r2,6
   48018:	1700072e 	bgeu	r2,fp,48038 <___vfprintf_internal_r+0x19e0>
   4801c:	d8812b15 	stw	r2,1196(sp)
   48020:	d8812815 	stw	r2,1184(sp)
   48024:	ddc12d15 	stw	r23,1204(sp)
   48028:	04c00174 	movhi	r19,5
   4802c:	9cc69504 	addi	r19,r19,6740
   48030:	d8013115 	stw	zero,1220(sp)
   48034:	003a7a06 	br	46a20 <___vfprintf_internal_r+0x3c8>
   48038:	d8812b17 	ldw	r2,1196(sp)
   4803c:	d8812815 	stw	r2,1184(sp)
   48040:	103ff80e 	bge	r2,zero,48024 <___vfprintf_internal_r+0x19cc>
   48044:	d8012815 	stw	zero,1184(sp)
   48048:	003ff606 	br	48024 <___vfprintf_internal_r+0x19cc>
   4804c:	d9012d17 	ldw	r4,1204(sp)
   48050:	da012c17 	ldw	r8,1200(sp)
   48054:	20800017 	ldw	r2,0(r4)
   48058:	21000104 	addi	r4,r4,4
   4805c:	d9012d15 	stw	r4,1204(sp)
   48060:	12000015 	stw	r8,0(r2)
   48064:	0039b206 	br	46730 <___vfprintf_internal_r+0xd8>
   48068:	d9412917 	ldw	r5,1188(sp)
   4806c:	8809883a 	mov	r4,r17
   48070:	d9811b04 	addi	r6,sp,1132
   48074:	00466240 	call	46624 <__sprint_r>
   48078:	103b0a1e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   4807c:	dc812417 	ldw	r18,1168(sp)
   48080:	da011d17 	ldw	r8,1140(sp)
   48084:	da400404 	addi	r9,sp,16
   48088:	003def06 	br	47848 <___vfprintf_internal_r+0x11f0>
   4808c:	d9412917 	ldw	r5,1188(sp)
   48090:	8809883a 	mov	r4,r17
   48094:	d9811b04 	addi	r6,sp,1132
   48098:	00466240 	call	46624 <__sprint_r>
   4809c:	103b011e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   480a0:	dc812417 	ldw	r18,1168(sp)
   480a4:	da400404 	addi	r9,sp,16
   480a8:	003eb906 	br	47b90 <___vfprintf_internal_r+0x1538>
   480ac:	d9412917 	ldw	r5,1188(sp)
   480b0:	8809883a 	mov	r4,r17
   480b4:	d9811b04 	addi	r6,sp,1132
   480b8:	00466240 	call	46624 <__sprint_r>
   480bc:	103af91e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   480c0:	dc812417 	ldw	r18,1168(sp)
   480c4:	da011d17 	ldw	r8,1140(sp)
   480c8:	d8c11c17 	ldw	r3,1136(sp)
   480cc:	da400404 	addi	r9,sp,16
   480d0:	003ea306 	br	47b60 <___vfprintf_internal_r+0x1508>
   480d4:	00800244 	movi	r2,9
   480d8:	15fda636 	bltu	r2,r23,47774 <___vfprintf_internal_r+0x111c>
   480dc:	dd010e04 	addi	r20,sp,1080
   480e0:	003dc206 	br	477ec <___vfprintf_internal_r+0x1194>
   480e4:	df012815 	stw	fp,1184(sp)
   480e8:	d8812583 	ldbu	r2,1174(sp)
   480ec:	df012b15 	stw	fp,1196(sp)
   480f0:	ddc12d15 	stw	r23,1204(sp)
   480f4:	d8013115 	stw	zero,1220(sp)
   480f8:	003a4206 	br	46a04 <___vfprintf_internal_r+0x3ac>
   480fc:	d9412917 	ldw	r5,1188(sp)
   48100:	8809883a 	mov	r4,r17
   48104:	d9811b04 	addi	r6,sp,1132
   48108:	00466240 	call	46624 <__sprint_r>
   4810c:	103ae51e 	bne	r2,zero,46ca4 <___vfprintf_internal_r+0x64c>
   48110:	dc812417 	ldw	r18,1168(sp)
   48114:	da011d17 	ldw	r8,1140(sp)
   48118:	d8c11c17 	ldw	r3,1136(sp)
   4811c:	da400404 	addi	r9,sp,16
   48120:	003ec906 	br	47c48 <___vfprintf_internal_r+0x15f0>
   48124:	04c00174 	movhi	r19,5
   48128:	9cc68a04 	addi	r19,r19,6696
   4812c:	003f6f06 	br	47eec <___vfprintf_internal_r+0x1894>
   48130:	d8812583 	ldbu	r2,1174(sp)
   48134:	dc012a17 	ldw	r16,1192(sp)
   48138:	d8013115 	stw	zero,1220(sp)
   4813c:	003a3106 	br	46a04 <___vfprintf_internal_r+0x3ac>
   48140:	d8812404 	addi	r2,sp,1168
   48144:	d8800115 	stw	r2,4(sp)
   48148:	d8812304 	addi	r2,sp,1164
   4814c:	d8800215 	stw	r2,8(sp)
   48150:	d8812204 	addi	r2,sp,1160
   48154:	df000015 	stw	fp,0(sp)
   48158:	d8800315 	stw	r2,12(sp)
   4815c:	8809883a 	mov	r4,r17
   48160:	b00b883a 	mov	r5,r22
   48164:	a00d883a 	mov	r6,r20
   48168:	01c000c4 	movi	r7,3
   4816c:	da413c15 	stw	r9,1264(sp)
   48170:	00487f00 	call	487f0 <_dtoa_r>
   48174:	da413c17 	ldw	r9,1264(sp)
   48178:	1027883a 	mov	r19,r2
   4817c:	1707883a 	add	r3,r2,fp
   48180:	e02f883a 	mov	r23,fp
   48184:	99000007 	ldb	r4,0(r19)
   48188:	00800c04 	movi	r2,48
   4818c:	20800326 	beq	r4,r2,4819c <___vfprintf_internal_r+0x1b44>
   48190:	da812417 	ldw	r10,1168(sp)
   48194:	1a87883a 	add	r3,r3,r10
   48198:	003ef406 	br	47d6c <___vfprintf_internal_r+0x1714>
   4819c:	b009883a 	mov	r4,r22
   481a0:	a00b883a 	mov	r5,r20
   481a4:	000d883a 	mov	r6,zero
   481a8:	000f883a 	mov	r7,zero
   481ac:	d8c13b15 	stw	r3,1260(sp)
   481b0:	da413c15 	stw	r9,1264(sp)
   481b4:	004e36c0 	call	4e36c <__nedf2>
   481b8:	d8c13b17 	ldw	r3,1260(sp)
   481bc:	da413c17 	ldw	r9,1264(sp)
   481c0:	103ff326 	beq	r2,zero,48190 <___vfprintf_internal_r+0x1b38>
   481c4:	00800044 	movi	r2,1
   481c8:	15d5c83a 	sub	r10,r2,r23
   481cc:	da812415 	stw	r10,1168(sp)
   481d0:	1a87883a 	add	r3,r3,r10
   481d4:	003ee506 	br	47d6c <___vfprintf_internal_r+0x1714>
   481d8:	d8812417 	ldw	r2,1168(sp)
   481dc:	d8812b15 	stw	r2,1196(sp)
   481e0:	1029883a 	mov	r20,r2
   481e4:	00bfff44 	movi	r2,-3
   481e8:	a0800116 	blt	r20,r2,481f0 <___vfprintf_internal_r+0x1b98>
   481ec:	e5001d0e 	bge	fp,r20,48264 <___vfprintf_internal_r+0x1c0c>
   481f0:	94bfff84 	addi	r18,r18,-2
   481f4:	a53fffc4 	addi	r20,r20,-1
   481f8:	dd012415 	stw	r20,1168(sp)
   481fc:	dc811fc5 	stb	r18,1151(sp)
   48200:	a0007816 	blt	r20,zero,483e4 <___vfprintf_internal_r+0x1d8c>
   48204:	00800ac4 	movi	r2,43
   48208:	d8812005 	stb	r2,1152(sp)
   4820c:	00800244 	movi	r2,9
   48210:	15002b16 	blt	r2,r20,482c0 <___vfprintf_internal_r+0x1c68>
   48214:	00800c04 	movi	r2,48
   48218:	a5000c04 	addi	r20,r20,48
   4821c:	d8812045 	stb	r2,1153(sp)
   48220:	dd012085 	stb	r20,1154(sp)
   48224:	d8c120c4 	addi	r3,sp,1155
   48228:	d8811fc4 	addi	r2,sp,1151
   4822c:	da013217 	ldw	r8,1224(sp)
   48230:	1885c83a 	sub	r2,r3,r2
   48234:	d8813515 	stw	r2,1236(sp)
   48238:	4085883a 	add	r2,r8,r2
   4823c:	d8812b15 	stw	r2,1196(sp)
   48240:	00800044 	movi	r2,1
   48244:	1200610e 	bge	r2,r8,483cc <___vfprintf_internal_r+0x1d74>
   48248:	d8812b17 	ldw	r2,1196(sp)
   4824c:	10800044 	addi	r2,r2,1
   48250:	d8812b15 	stw	r2,1196(sp)
   48254:	d8812815 	stw	r2,1184(sp)
   48258:	103ee90e 	bge	r2,zero,47e00 <___vfprintf_internal_r+0x17a8>
   4825c:	d8012815 	stw	zero,1184(sp)
   48260:	003ee706 	br	47e00 <___vfprintf_internal_r+0x17a8>
   48264:	d8812b17 	ldw	r2,1196(sp)
   48268:	da013217 	ldw	r8,1224(sp)
   4826c:	12003716 	blt	r2,r8,4834c <___vfprintf_internal_r+0x1cf4>
   48270:	8400004c 	andi	r16,r16,1
   48274:	80000326 	beq	r16,zero,48284 <___vfprintf_internal_r+0x1c2c>
   48278:	d8812b17 	ldw	r2,1196(sp)
   4827c:	10800044 	addi	r2,r2,1
   48280:	d8812b15 	stw	r2,1196(sp)
   48284:	d8812815 	stw	r2,1184(sp)
   48288:	10003716 	blt	r2,zero,48368 <___vfprintf_internal_r+0x1d10>
   4828c:	048019c4 	movi	r18,103
   48290:	003edb06 	br	47e00 <___vfprintf_internal_r+0x17a8>
   48294:	d8012815 	stw	zero,1184(sp)
   48298:	003b6906 	br	47040 <___vfprintf_internal_r+0x9e8>
   4829c:	e03e901e 	bne	fp,zero,47ce0 <___vfprintf_internal_r+0x1688>
   482a0:	07000044 	movi	fp,1
   482a4:	003e8e06 	br	47ce0 <___vfprintf_internal_r+0x1688>
   482a8:	07000184 	movi	fp,6
   482ac:	003e8c06 	br	47ce0 <___vfprintf_internal_r+0x1688>
   482b0:	00c00b44 	movi	r3,45
   482b4:	a520003c 	xorhi	r20,r20,32768
   482b8:	d8c12f05 	stb	r3,1212(sp)
   482bc:	003e8c06 	br	47cf0 <___vfprintf_internal_r+0x1698>
   482c0:	d8c11f84 	addi	r3,sp,1150
   482c4:	102f883a 	mov	r23,r2
   482c8:	4839883a 	mov	fp,r9
   482cc:	a009883a 	mov	r4,r20
   482d0:	01400284 	movi	r5,10
   482d4:	182d883a 	mov	r22,r3
   482d8:	0045bc40 	call	45bc4 <__modsi3>
   482dc:	10800c04 	addi	r2,r2,48
   482e0:	a009883a 	mov	r4,r20
   482e4:	b0800005 	stb	r2,0(r22)
   482e8:	01400284 	movi	r5,10
   482ec:	0045b740 	call	45b74 <__divsi3>
   482f0:	1029883a 	mov	r20,r2
   482f4:	b0ffffc4 	addi	r3,r22,-1
   482f8:	b8bff416 	blt	r23,r2,482cc <___vfprintf_internal_r+0x1c74>
   482fc:	11400c04 	addi	r5,r2,48
   48300:	b17fffc5 	stb	r5,-1(r22)
   48304:	d8811fc4 	addi	r2,sp,1151
   48308:	e013883a 	mov	r9,fp
   4830c:	1880482e 	bgeu	r3,r2,48430 <___vfprintf_internal_r+0x1dd8>
   48310:	b007883a 	mov	r3,r22
   48314:	d9012044 	addi	r4,sp,1153
   48318:	00000206 	br	48324 <___vfprintf_internal_r+0x1ccc>
   4831c:	19400003 	ldbu	r5,0(r3)
   48320:	18c00044 	addi	r3,r3,1
   48324:	21400005 	stb	r5,0(r4)
   48328:	21000044 	addi	r4,r4,1
   4832c:	10fffb1e 	bne	r2,r3,4831c <___vfprintf_internal_r+0x1cc4>
   48330:	d8c12004 	addi	r3,sp,1152
   48334:	1d87c83a 	sub	r3,r3,r22
   48338:	d9012044 	addi	r4,sp,1153
   4833c:	20c7883a 	add	r3,r4,r3
   48340:	003fba06 	br	4822c <___vfprintf_internal_r+0x1bd4>
   48344:	d8c12217 	ldw	r3,1160(sp)
   48348:	003e9906 	br	47db0 <___vfprintf_internal_r+0x1758>
   4834c:	05000b0e 	bge	zero,r20,4837c <___vfprintf_internal_r+0x1d24>
   48350:	05000044 	movi	r20,1
   48354:	da013217 	ldw	r8,1224(sp)
   48358:	a229883a 	add	r20,r20,r8
   4835c:	dd012b15 	stw	r20,1196(sp)
   48360:	dd012815 	stw	r20,1184(sp)
   48364:	a03fc90e 	bge	r20,zero,4828c <___vfprintf_internal_r+0x1c34>
   48368:	d8012815 	stw	zero,1184(sp)
   4836c:	048019c4 	movi	r18,103
   48370:	003ea306 	br	47e00 <___vfprintf_internal_r+0x17a8>
   48374:	e5c00044 	addi	r23,fp,1
   48378:	003e6606 	br	47d14 <___vfprintf_internal_r+0x16bc>
   4837c:	00800084 	movi	r2,2
   48380:	1529c83a 	sub	r20,r2,r20
   48384:	003ff306 	br	48354 <___vfprintf_internal_r+0x1cfc>
   48388:	008011c4 	movi	r2,71
   4838c:	90be7226 	beq	r18,r2,47d58 <___vfprintf_internal_r+0x1700>
   48390:	003e7306 	br	47d60 <___vfprintf_internal_r+0x1708>
   48394:	d8812d17 	ldw	r2,1204(sp)
   48398:	ac800043 	ldbu	r18,1(r21)
   4839c:	202b883a 	mov	r21,r4
   483a0:	17000017 	ldw	fp,0(r2)
   483a4:	10800104 	addi	r2,r2,4
   483a8:	d8812d15 	stw	r2,1204(sp)
   483ac:	e0001b16 	blt	fp,zero,4841c <___vfprintf_internal_r+0x1dc4>
   483b0:	94803fcc 	andi	r18,r18,255
   483b4:	9480201c 	xori	r18,r18,128
   483b8:	94bfe004 	addi	r18,r18,-128
   483bc:	00390406 	br	467d0 <___vfprintf_internal_r+0x178>
   483c0:	00bfffc4 	movi	r2,-1
   483c4:	d8812c15 	stw	r2,1200(sp)
   483c8:	003a2506 	br	46c60 <___vfprintf_internal_r+0x608>
   483cc:	80a0703a 	and	r16,r16,r2
   483d0:	803f9d1e 	bne	r16,zero,48248 <___vfprintf_internal_r+0x1bf0>
   483d4:	d8812b17 	ldw	r2,1196(sp)
   483d8:	d8812815 	stw	r2,1184(sp)
   483dc:	103e880e 	bge	r2,zero,47e00 <___vfprintf_internal_r+0x17a8>
   483e0:	003f9e06 	br	4825c <___vfprintf_internal_r+0x1c04>
   483e4:	00800b44 	movi	r2,45
   483e8:	0529c83a 	sub	r20,zero,r20
   483ec:	d8812005 	stb	r2,1152(sp)
   483f0:	003f8606 	br	4820c <___vfprintf_internal_r+0x1bb4>
   483f4:	1007883a 	mov	r3,r2
   483f8:	003e6d06 	br	47db0 <___vfprintf_internal_r+0x1758>
   483fc:	e000021e 	bne	fp,zero,48408 <___vfprintf_internal_r+0x1db0>
   48400:	8400004c 	andi	r16,r16,1
   48404:	80000e26 	beq	r16,zero,48440 <___vfprintf_internal_r+0x1de8>
   48408:	e7000084 	addi	fp,fp,2
   4840c:	df012b15 	stw	fp,1196(sp)
   48410:	df012815 	stw	fp,1184(sp)
   48414:	e03e7a0e 	bge	fp,zero,47e00 <___vfprintf_internal_r+0x17a8>
   48418:	003f9006 	br	4825c <___vfprintf_internal_r+0x1c04>
   4841c:	94803fcc 	andi	r18,r18,255
   48420:	9480201c 	xori	r18,r18,128
   48424:	073fffc4 	movi	fp,-1
   48428:	94bfe004 	addi	r18,r18,-128
   4842c:	0038e806 	br	467d0 <___vfprintf_internal_r+0x178>
   48430:	d8c12044 	addi	r3,sp,1153
   48434:	003f7d06 	br	4822c <___vfprintf_internal_r+0x1bd4>
   48438:	dd012417 	ldw	r20,1168(sp)
   4843c:	003f6d06 	br	481f4 <___vfprintf_internal_r+0x1b9c>
   48440:	00c00044 	movi	r3,1
   48444:	d8c12815 	stw	r3,1184(sp)
   48448:	d8c12b15 	stw	r3,1196(sp)
   4844c:	003e6c06 	br	47e00 <___vfprintf_internal_r+0x17a8>

00048450 <__vfprintf_internal>:
   48450:	00800174 	movhi	r2,5
   48454:	108df004 	addi	r2,r2,14272
   48458:	2007883a 	mov	r3,r4
   4845c:	11000017 	ldw	r4,0(r2)
   48460:	2805883a 	mov	r2,r5
   48464:	300f883a 	mov	r7,r6
   48468:	180b883a 	mov	r5,r3
   4846c:	100d883a 	mov	r6,r2
   48470:	00466581 	jmpi	46658 <___vfprintf_internal_r>

00048474 <__swsetup_r>:
   48474:	00800174 	movhi	r2,5
   48478:	108df004 	addi	r2,r2,14272
   4847c:	10800017 	ldw	r2,0(r2)
   48480:	defffd04 	addi	sp,sp,-12
   48484:	dc400115 	stw	r17,4(sp)
   48488:	dc000015 	stw	r16,0(sp)
   4848c:	dfc00215 	stw	ra,8(sp)
   48490:	2023883a 	mov	r17,r4
   48494:	2821883a 	mov	r16,r5
   48498:	10000226 	beq	r2,zero,484a4 <__swsetup_r+0x30>
   4849c:	10c00e17 	ldw	r3,56(r2)
   484a0:	18003d26 	beq	r3,zero,48598 <__swsetup_r+0x124>
   484a4:	8080030b 	ldhu	r2,12(r16)
   484a8:	10c0020c 	andi	r3,r2,8
   484ac:	18ffffcc 	andi	r3,r3,65535
   484b0:	18e0001c 	xori	r3,r3,32768
   484b4:	18e00004 	addi	r3,r3,-32768
   484b8:	18001226 	beq	r3,zero,48504 <__swsetup_r+0x90>
   484bc:	80c00417 	ldw	r3,16(r16)
   484c0:	18001f26 	beq	r3,zero,48540 <__swsetup_r+0xcc>
   484c4:	1100004c 	andi	r4,r2,1
   484c8:	2000261e 	bne	r4,zero,48564 <__swsetup_r+0xf0>
   484cc:	1080008c 	andi	r2,r2,2
   484d0:	10bfffcc 	andi	r2,r2,65535
   484d4:	10a0001c 	xori	r2,r2,32768
   484d8:	10a00004 	addi	r2,r2,-32768
   484dc:	1000311e 	bne	r2,zero,485a4 <__swsetup_r+0x130>
   484e0:	80800517 	ldw	r2,20(r16)
   484e4:	80800215 	stw	r2,8(r16)
   484e8:	18002326 	beq	r3,zero,48578 <__swsetup_r+0x104>
   484ec:	0005883a 	mov	r2,zero
   484f0:	dfc00217 	ldw	ra,8(sp)
   484f4:	dc400117 	ldw	r17,4(sp)
   484f8:	dc000017 	ldw	r16,0(sp)
   484fc:	dec00304 	addi	sp,sp,12
   48500:	f800283a 	ret
   48504:	10c0040c 	andi	r3,r2,16
   48508:	18ffffcc 	andi	r3,r3,65535
   4850c:	18e0001c 	xori	r3,r3,32768
   48510:	18e00004 	addi	r3,r3,-32768
   48514:	18001e26 	beq	r3,zero,48590 <__swsetup_r+0x11c>
   48518:	10c0010c 	andi	r3,r2,4
   4851c:	18ffffcc 	andi	r3,r3,65535
   48520:	18e0001c 	xori	r3,r3,32768
   48524:	18e00004 	addi	r3,r3,-32768
   48528:	1800211e 	bne	r3,zero,485b0 <__swsetup_r+0x13c>
   4852c:	80c00417 	ldw	r3,16(r16)
   48530:	11400214 	ori	r5,r2,8
   48534:	8140030d 	sth	r5,12(r16)
   48538:	2805883a 	mov	r2,r5
   4853c:	183fe11e 	bne	r3,zero,484c4 <__swsetup_r+0x50>
   48540:	1140a00c 	andi	r5,r2,640
   48544:	01008004 	movi	r4,512
   48548:	293fde26 	beq	r5,r4,484c4 <__swsetup_r+0x50>
   4854c:	8809883a 	mov	r4,r17
   48550:	800b883a 	mov	r5,r16
   48554:	004ae280 	call	4ae28 <__smakebuf_r>
   48558:	8080030b 	ldhu	r2,12(r16)
   4855c:	80c00417 	ldw	r3,16(r16)
   48560:	003fd806 	br	484c4 <__swsetup_r+0x50>
   48564:	80800517 	ldw	r2,20(r16)
   48568:	80000215 	stw	zero,8(r16)
   4856c:	0085c83a 	sub	r2,zero,r2
   48570:	80800615 	stw	r2,24(r16)
   48574:	183fdd1e 	bne	r3,zero,484ec <__swsetup_r+0x78>
   48578:	8080030b 	ldhu	r2,12(r16)
   4857c:	1080200c 	andi	r2,r2,128
   48580:	10bfffcc 	andi	r2,r2,65535
   48584:	10a0001c 	xori	r2,r2,32768
   48588:	10a00004 	addi	r2,r2,-32768
   4858c:	103fd826 	beq	r2,zero,484f0 <__swsetup_r+0x7c>
   48590:	00bfffc4 	movi	r2,-1
   48594:	003fd606 	br	484f0 <__swsetup_r+0x7c>
   48598:	1009883a 	mov	r4,r2
   4859c:	004a0b40 	call	4a0b4 <__sinit>
   485a0:	003fc006 	br	484a4 <__swsetup_r+0x30>
   485a4:	0005883a 	mov	r2,zero
   485a8:	80800215 	stw	r2,8(r16)
   485ac:	003fce06 	br	484e8 <__swsetup_r+0x74>
   485b0:	81400c17 	ldw	r5,48(r16)
   485b4:	28000626 	beq	r5,zero,485d0 <__swsetup_r+0x15c>
   485b8:	80c01004 	addi	r3,r16,64
   485bc:	28c00326 	beq	r5,r3,485cc <__swsetup_r+0x158>
   485c0:	8809883a 	mov	r4,r17
   485c4:	004a4380 	call	4a438 <_free_r>
   485c8:	8080030b 	ldhu	r2,12(r16)
   485cc:	80000c15 	stw	zero,48(r16)
   485d0:	80c00417 	ldw	r3,16(r16)
   485d4:	013ff6c4 	movi	r4,-37
   485d8:	2084703a 	and	r2,r4,r2
   485dc:	80000115 	stw	zero,4(r16)
   485e0:	80c00015 	stw	r3,0(r16)
   485e4:	003fd206 	br	48530 <__swsetup_r+0xbc>

000485e8 <quorem>:
   485e8:	defff704 	addi	sp,sp,-36
   485ec:	dc400115 	stw	r17,4(sp)
   485f0:	20800417 	ldw	r2,16(r4)
   485f4:	2c400417 	ldw	r17,16(r5)
   485f8:	dd800615 	stw	r22,24(sp)
   485fc:	dd400515 	stw	r21,20(sp)
   48600:	dfc00815 	stw	ra,32(sp)
   48604:	ddc00715 	stw	r23,28(sp)
   48608:	dd000415 	stw	r20,16(sp)
   4860c:	dcc00315 	stw	r19,12(sp)
   48610:	dc800215 	stw	r18,8(sp)
   48614:	dc000015 	stw	r16,0(sp)
   48618:	202b883a 	mov	r21,r4
   4861c:	282d883a 	mov	r22,r5
   48620:	14407116 	blt	r2,r17,487e8 <quorem+0x200>
   48624:	88800104 	addi	r2,r17,4
   48628:	1085883a 	add	r2,r2,r2
   4862c:	1085883a 	add	r2,r2,r2
   48630:	28a7883a 	add	r19,r5,r2
   48634:	2085883a 	add	r2,r4,r2
   48638:	15c00017 	ldw	r23,0(r2)
   4863c:	99400017 	ldw	r5,0(r19)
   48640:	8c7fffc4 	addi	r17,r17,-1
   48644:	b809883a 	mov	r4,r23
   48648:	29400044 	addi	r5,r5,1
   4864c:	0045c200 	call	45c20 <__udivsi3>
   48650:	1025883a 	mov	r18,r2
   48654:	b4000504 	addi	r16,r22,20
   48658:	ad000504 	addi	r20,r21,20
   4865c:	10002d26 	beq	r2,zero,48714 <quorem+0x12c>
   48660:	800d883a 	mov	r6,r16
   48664:	a007883a 	mov	r3,r20
   48668:	000f883a 	mov	r7,zero
   4866c:	0005883a 	mov	r2,zero
   48670:	32c00017 	ldw	r11,0(r6)
   48674:	1a400017 	ldw	r9,0(r3)
   48678:	31800104 	addi	r6,r6,4
   4867c:	5abfffcc 	andi	r10,r11,65535
   48680:	5495383a 	mul	r10,r10,r18
   48684:	5816d43a 	srli	r11,r11,16
   48688:	4a3fffcc 	andi	r8,r9,65535
   4868c:	3a95883a 	add	r10,r7,r10
   48690:	500ed43a 	srli	r7,r10,16
   48694:	5c97383a 	mul	r11,r11,r18
   48698:	4085883a 	add	r2,r8,r2
   4869c:	52bfffcc 	andi	r10,r10,65535
   486a0:	1291c83a 	sub	r8,r2,r10
   486a4:	4804d43a 	srli	r2,r9,16
   486a8:	3acf883a 	add	r7,r7,r11
   486ac:	4015d43a 	srai	r10,r8,16
   486b0:	393fffcc 	andi	r4,r7,65535
   486b4:	1105c83a 	sub	r2,r2,r4
   486b8:	1285883a 	add	r2,r2,r10
   486bc:	1880008d 	sth	r2,2(r3)
   486c0:	1a00000d 	sth	r8,0(r3)
   486c4:	380ed43a 	srli	r7,r7,16
   486c8:	1005d43a 	srai	r2,r2,16
   486cc:	18c00104 	addi	r3,r3,4
   486d0:	99bfe72e 	bgeu	r19,r6,48670 <quorem+0x88>
   486d4:	b8000f1e 	bne	r23,zero,48714 <quorem+0x12c>
   486d8:	88800144 	addi	r2,r17,5
   486dc:	1085883a 	add	r2,r2,r2
   486e0:	1085883a 	add	r2,r2,r2
   486e4:	a887883a 	add	r3,r21,r2
   486e8:	18bfff04 	addi	r2,r3,-4
   486ec:	a080082e 	bgeu	r20,r2,48710 <quorem+0x128>
   486f0:	18ffff17 	ldw	r3,-4(r3)
   486f4:	18000326 	beq	r3,zero,48704 <quorem+0x11c>
   486f8:	00000506 	br	48710 <quorem+0x128>
   486fc:	10c00017 	ldw	r3,0(r2)
   48700:	1800031e 	bne	r3,zero,48710 <quorem+0x128>
   48704:	10bfff04 	addi	r2,r2,-4
   48708:	8c7fffc4 	addi	r17,r17,-1
   4870c:	a0bffb36 	bltu	r20,r2,486fc <quorem+0x114>
   48710:	ac400415 	stw	r17,16(r21)
   48714:	a809883a 	mov	r4,r21
   48718:	b00b883a 	mov	r5,r22
   4871c:	004c3ec0 	call	4c3ec <__mcmp>
   48720:	10002516 	blt	r2,zero,487b8 <quorem+0x1d0>
   48724:	94800044 	addi	r18,r18,1
   48728:	a007883a 	mov	r3,r20
   4872c:	000b883a 	mov	r5,zero
   48730:	1a000017 	ldw	r8,0(r3)
   48734:	81c00017 	ldw	r7,0(r16)
   48738:	84000104 	addi	r16,r16,4
   4873c:	41bfffcc 	andi	r6,r8,65535
   48740:	38bfffcc 	andi	r2,r7,65535
   48744:	314b883a 	add	r5,r6,r5
   48748:	288dc83a 	sub	r6,r5,r2
   4874c:	380ed43a 	srli	r7,r7,16
   48750:	400ad43a 	srli	r5,r8,16
   48754:	3005d43a 	srai	r2,r6,16
   48758:	1980000d 	sth	r6,0(r3)
   4875c:	29cbc83a 	sub	r5,r5,r7
   48760:	288b883a 	add	r5,r5,r2
   48764:	1940008d 	sth	r5,2(r3)
   48768:	280bd43a 	srai	r5,r5,16
   4876c:	18c00104 	addi	r3,r3,4
   48770:	9c3fef2e 	bgeu	r19,r16,48730 <quorem+0x148>
   48774:	88800144 	addi	r2,r17,5
   48778:	1085883a 	add	r2,r2,r2
   4877c:	1085883a 	add	r2,r2,r2
   48780:	a885883a 	add	r2,r21,r2
   48784:	10c00017 	ldw	r3,0(r2)
   48788:	18000b1e 	bne	r3,zero,487b8 <quorem+0x1d0>
   4878c:	10ffff04 	addi	r3,r2,-4
   48790:	a0c0082e 	bgeu	r20,r3,487b4 <quorem+0x1cc>
   48794:	10bfff17 	ldw	r2,-4(r2)
   48798:	10000326 	beq	r2,zero,487a8 <quorem+0x1c0>
   4879c:	00000506 	br	487b4 <quorem+0x1cc>
   487a0:	18800017 	ldw	r2,0(r3)
   487a4:	1000031e 	bne	r2,zero,487b4 <quorem+0x1cc>
   487a8:	18ffff04 	addi	r3,r3,-4
   487ac:	8c7fffc4 	addi	r17,r17,-1
   487b0:	a0fffb36 	bltu	r20,r3,487a0 <quorem+0x1b8>
   487b4:	ac400415 	stw	r17,16(r21)
   487b8:	9005883a 	mov	r2,r18
   487bc:	dfc00817 	ldw	ra,32(sp)
   487c0:	ddc00717 	ldw	r23,28(sp)
   487c4:	dd800617 	ldw	r22,24(sp)
   487c8:	dd400517 	ldw	r21,20(sp)
   487cc:	dd000417 	ldw	r20,16(sp)
   487d0:	dcc00317 	ldw	r19,12(sp)
   487d4:	dc800217 	ldw	r18,8(sp)
   487d8:	dc400117 	ldw	r17,4(sp)
   487dc:	dc000017 	ldw	r16,0(sp)
   487e0:	dec00904 	addi	sp,sp,36
   487e4:	f800283a 	ret
   487e8:	0005883a 	mov	r2,zero
   487ec:	003ff306 	br	487bc <quorem+0x1d4>

000487f0 <_dtoa_r>:
   487f0:	20801017 	ldw	r2,64(r4)
   487f4:	deffdf04 	addi	sp,sp,-132
   487f8:	dcc01a15 	stw	r19,104(sp)
   487fc:	dc801915 	stw	r18,100(sp)
   48800:	dc401815 	stw	r17,96(sp)
   48804:	dc001715 	stw	r16,92(sp)
   48808:	dfc02015 	stw	ra,128(sp)
   4880c:	df001f15 	stw	fp,124(sp)
   48810:	ddc01e15 	stw	r23,120(sp)
   48814:	dd801d15 	stw	r22,116(sp)
   48818:	dd401c15 	stw	r21,112(sp)
   4881c:	dd001b15 	stw	r20,108(sp)
   48820:	d9400315 	stw	r5,12(sp)
   48824:	d9c00415 	stw	r7,16(sp)
   48828:	2021883a 	mov	r16,r4
   4882c:	3025883a 	mov	r18,r6
   48830:	dcc02317 	ldw	r19,140(sp)
   48834:	3023883a 	mov	r17,r6
   48838:	10000826 	beq	r2,zero,4885c <_dtoa_r+0x6c>
   4883c:	20c01117 	ldw	r3,68(r4)
   48840:	01800044 	movi	r6,1
   48844:	100b883a 	mov	r5,r2
   48848:	30cc983a 	sll	r6,r6,r3
   4884c:	10c00115 	stw	r3,4(r2)
   48850:	11800215 	stw	r6,8(r2)
   48854:	004bbf00 	call	4bbf0 <_Bfree>
   48858:	80001015 	stw	zero,64(r16)
   4885c:	90002f16 	blt	r18,zero,4891c <_dtoa_r+0x12c>
   48860:	98000015 	stw	zero,0(r19)
   48864:	90dffc2c 	andhi	r3,r18,32752
   48868:	009ffc34 	movhi	r2,32752
   4886c:	18801c26 	beq	r3,r2,488e0 <_dtoa_r+0xf0>
   48870:	d9000317 	ldw	r4,12(sp)
   48874:	880b883a 	mov	r5,r17
   48878:	000d883a 	mov	r6,zero
   4887c:	000f883a 	mov	r7,zero
   48880:	00457fc0 	call	457fc <__eqdf2>
   48884:	10002c1e 	bne	r2,zero,48938 <_dtoa_r+0x148>
   48888:	d9002217 	ldw	r4,136(sp)
   4888c:	d9c02417 	ldw	r7,144(sp)
   48890:	00800044 	movi	r2,1
   48894:	20800015 	stw	r2,0(r4)
   48898:	38019426 	beq	r7,zero,48eec <_dtoa_r+0x6fc>
   4889c:	00800174 	movhi	r2,5
   488a0:	10869744 	addi	r2,r2,6749
   488a4:	38800015 	stw	r2,0(r7)
   488a8:	15ffffc4 	addi	r23,r2,-1
   488ac:	b805883a 	mov	r2,r23
   488b0:	dfc02017 	ldw	ra,128(sp)
   488b4:	df001f17 	ldw	fp,124(sp)
   488b8:	ddc01e17 	ldw	r23,120(sp)
   488bc:	dd801d17 	ldw	r22,116(sp)
   488c0:	dd401c17 	ldw	r21,112(sp)
   488c4:	dd001b17 	ldw	r20,108(sp)
   488c8:	dcc01a17 	ldw	r19,104(sp)
   488cc:	dc801917 	ldw	r18,100(sp)
   488d0:	dc401817 	ldw	r17,96(sp)
   488d4:	dc001717 	ldw	r16,92(sp)
   488d8:	dec02104 	addi	sp,sp,132
   488dc:	f800283a 	ret
   488e0:	d8c02217 	ldw	r3,136(sp)
   488e4:	d9000317 	ldw	r4,12(sp)
   488e8:	0089c3c4 	movi	r2,9999
   488ec:	18800015 	stw	r2,0(r3)
   488f0:	20016c26 	beq	r4,zero,48ea4 <_dtoa_r+0x6b4>
   488f4:	05c00174 	movhi	r23,5
   488f8:	bdc6a304 	addi	r23,r23,6796
   488fc:	d9c02417 	ldw	r7,144(sp)
   48900:	383fea26 	beq	r7,zero,488ac <_dtoa_r+0xbc>
   48904:	b88000c7 	ldb	r2,3(r23)
   48908:	10016d1e 	bne	r2,zero,48ec0 <_dtoa_r+0x6d0>
   4890c:	b88000c4 	addi	r2,r23,3
   48910:	d8c02417 	ldw	r3,144(sp)
   48914:	18800015 	stw	r2,0(r3)
   48918:	003fe406 	br	488ac <_dtoa_r+0xbc>
   4891c:	04600034 	movhi	r17,32768
   48920:	8c7fffc4 	addi	r17,r17,-1
   48924:	9462703a 	and	r17,r18,r17
   48928:	00800044 	movi	r2,1
   4892c:	98800015 	stw	r2,0(r19)
   48930:	8825883a 	mov	r18,r17
   48934:	003fcb06 	br	48864 <_dtoa_r+0x74>
   48938:	d9400317 	ldw	r5,12(sp)
   4893c:	9028d53a 	srli	r20,r18,20
   48940:	d8800204 	addi	r2,sp,8
   48944:	d8800015 	stw	r2,0(sp)
   48948:	8009883a 	mov	r4,r16
   4894c:	880d883a 	mov	r6,r17
   48950:	d9c00104 	addi	r7,sp,4
   48954:	004c7940 	call	4c794 <__d2b>
   48958:	a501ffcc 	andi	r20,r20,2047
   4895c:	1039883a 	mov	fp,r2
   48960:	a001591e 	bne	r20,zero,48ec8 <_dtoa_r+0x6d8>
   48964:	dd400217 	ldw	r21,8(sp)
   48968:	dd000117 	ldw	r20,4(sp)
   4896c:	00befbc4 	movi	r2,-1041
   48970:	ad29883a 	add	r20,r21,r20
   48974:	a082d216 	blt	r20,r2,494c0 <_dtoa_r+0xcd0>
   48978:	d8c00317 	ldw	r3,12(sp)
   4897c:	013f0384 	movi	r4,-1010
   48980:	2509c83a 	sub	r4,r4,r20
   48984:	a0810484 	addi	r2,r20,1042
   48988:	9124983a 	sll	r18,r18,r4
   4898c:	1884d83a 	srl	r2,r3,r2
   48990:	9088b03a 	or	r4,r18,r2
   48994:	004e4240 	call	4e424 <__floatunsidf>
   48998:	1009883a 	mov	r4,r2
   4899c:	017f8434 	movhi	r5,65040
   489a0:	00800044 	movi	r2,1
   489a4:	194b883a 	add	r5,r3,r5
   489a8:	a53fffc4 	addi	r20,r20,-1
   489ac:	d8800f15 	stw	r2,60(sp)
   489b0:	000d883a 	mov	r6,zero
   489b4:	01cffe34 	movhi	r7,16376
   489b8:	00453040 	call	45304 <__subdf3>
   489bc:	1009883a 	mov	r4,r2
   489c0:	180b883a 	mov	r5,r3
   489c4:	0198dbf4 	movhi	r6,25455
   489c8:	3190d844 	addi	r6,r6,17249
   489cc:	01cff4f4 	movhi	r7,16339
   489d0:	39e1e9c4 	addi	r7,r7,-30809
   489d4:	00453640 	call	45364 <__muldf3>
   489d8:	180b883a 	mov	r5,r3
   489dc:	01a2d874 	movhi	r6,35681
   489e0:	31b22cc4 	addi	r6,r6,-14157
   489e4:	01cff1f4 	movhi	r7,16327
   489e8:	39e28a04 	addi	r7,r7,-30168
   489ec:	1009883a 	mov	r4,r2
   489f0:	00452b00 	call	452b0 <__adddf3>
   489f4:	a009883a 	mov	r4,r20
   489f8:	1027883a 	mov	r19,r2
   489fc:	1825883a 	mov	r18,r3
   48a00:	00459200 	call	45920 <__floatsidf>
   48a04:	1009883a 	mov	r4,r2
   48a08:	180b883a 	mov	r5,r3
   48a0c:	019427f4 	movhi	r6,20639
   48a10:	319e7ec4 	addi	r6,r6,31227
   48a14:	01cff4f4 	movhi	r7,16339
   48a18:	39d104c4 	addi	r7,r7,17427
   48a1c:	00453640 	call	45364 <__muldf3>
   48a20:	9809883a 	mov	r4,r19
   48a24:	900b883a 	mov	r5,r18
   48a28:	100d883a 	mov	r6,r2
   48a2c:	180f883a 	mov	r7,r3
   48a30:	00452b00 	call	452b0 <__adddf3>
   48a34:	1009883a 	mov	r4,r2
   48a38:	180b883a 	mov	r5,r3
   48a3c:	1027883a 	mov	r19,r2
   48a40:	1825883a 	mov	r18,r3
   48a44:	00459f40 	call	459f4 <__fixdfsi>
   48a48:	9809883a 	mov	r4,r19
   48a4c:	900b883a 	mov	r5,r18
   48a50:	000d883a 	mov	r6,zero
   48a54:	000f883a 	mov	r7,zero
   48a58:	d8800615 	stw	r2,24(sp)
   48a5c:	004e3c80 	call	4e3c8 <__ltdf2>
   48a60:	10027e16 	blt	r2,zero,4945c <_dtoa_r+0xc6c>
   48a64:	d8c00617 	ldw	r3,24(sp)
   48a68:	00800584 	movi	r2,22
   48a6c:	10c26c36 	bltu	r2,r3,49420 <_dtoa_r+0xc30>
   48a70:	180490fa 	slli	r2,r3,3
   48a74:	00c00174 	movhi	r3,5
   48a78:	18c6c904 	addi	r3,r3,6948
   48a7c:	d9800317 	ldw	r6,12(sp)
   48a80:	1885883a 	add	r2,r3,r2
   48a84:	11000017 	ldw	r4,0(r2)
   48a88:	11400117 	ldw	r5,4(r2)
   48a8c:	880f883a 	mov	r7,r17
   48a90:	00458580 	call	45858 <__gtdf2>
   48a94:	00828f0e 	bge	zero,r2,494d4 <_dtoa_r+0xce4>
   48a98:	d8800617 	ldw	r2,24(sp)
   48a9c:	d8000d15 	stw	zero,52(sp)
   48aa0:	10bfffc4 	addi	r2,r2,-1
   48aa4:	d8800615 	stw	r2,24(sp)
   48aa8:	ad29c83a 	sub	r20,r21,r20
   48aac:	a53fffc4 	addi	r20,r20,-1
   48ab0:	a0026616 	blt	r20,zero,4944c <_dtoa_r+0xc5c>
   48ab4:	dd000715 	stw	r20,28(sp)
   48ab8:	d8000815 	stw	zero,32(sp)
   48abc:	d8800617 	ldw	r2,24(sp)
   48ac0:	10025a16 	blt	r2,zero,4942c <_dtoa_r+0xc3c>
   48ac4:	d8c00717 	ldw	r3,28(sp)
   48ac8:	d8800b15 	stw	r2,44(sp)
   48acc:	d8000a15 	stw	zero,40(sp)
   48ad0:	1887883a 	add	r3,r3,r2
   48ad4:	d8c00715 	stw	r3,28(sp)
   48ad8:	d9c00417 	ldw	r7,16(sp)
   48adc:	00800244 	movi	r2,9
   48ae0:	11c10536 	bltu	r2,r7,48ef8 <_dtoa_r+0x708>
   48ae4:	00800144 	movi	r2,5
   48ae8:	11c4c60e 	bge	r2,r7,49e04 <_dtoa_r+0x1614>
   48aec:	39ffff04 	addi	r7,r7,-4
   48af0:	d9c00415 	stw	r7,16(sp)
   48af4:	0027883a 	mov	r19,zero
   48af8:	d9c00417 	ldw	r7,16(sp)
   48afc:	008000c4 	movi	r2,3
   48b00:	3883a226 	beq	r7,r2,4998c <_dtoa_r+0x119c>
   48b04:	11c2bc16 	blt	r2,r7,495f8 <_dtoa_r+0xe08>
   48b08:	00800084 	movi	r2,2
   48b0c:	3880fb1e 	bne	r7,r2,48efc <_dtoa_r+0x70c>
   48b10:	d8000c15 	stw	zero,48(sp)
   48b14:	d9002117 	ldw	r4,132(sp)
   48b18:	0103ae0e 	bge	zero,r4,499d4 <_dtoa_r+0x11e4>
   48b1c:	2025883a 	mov	r18,r4
   48b20:	d9000e15 	stw	r4,56(sp)
   48b24:	d9000915 	stw	r4,36(sp)
   48b28:	80001115 	stw	zero,68(r16)
   48b2c:	008005c4 	movi	r2,23
   48b30:	1484b22e 	bgeu	r2,r18,49dfc <_dtoa_r+0x160c>
   48b34:	00c00044 	movi	r3,1
   48b38:	00800104 	movi	r2,4
   48b3c:	1085883a 	add	r2,r2,r2
   48b40:	11000504 	addi	r4,r2,20
   48b44:	180b883a 	mov	r5,r3
   48b48:	18c00044 	addi	r3,r3,1
   48b4c:	913ffb2e 	bgeu	r18,r4,48b3c <_dtoa_r+0x34c>
   48b50:	81401115 	stw	r5,68(r16)
   48b54:	8009883a 	mov	r4,r16
   48b58:	004bb480 	call	4bb48 <_Balloc>
   48b5c:	102f883a 	mov	r23,r2
   48b60:	80801015 	stw	r2,64(r16)
   48b64:	00800384 	movi	r2,14
   48b68:	1480f036 	bltu	r2,r18,48f2c <_dtoa_r+0x73c>
   48b6c:	9800ef26 	beq	r19,zero,48f2c <_dtoa_r+0x73c>
   48b70:	d8800617 	ldw	r2,24(sp)
   48b74:	00839c0e 	bge	zero,r2,499e8 <_dtoa_r+0x11f8>
   48b78:	d8c00617 	ldw	r3,24(sp)
   48b7c:	108003cc 	andi	r2,r2,15
   48b80:	100490fa 	slli	r2,r2,3
   48b84:	182bd13a 	srai	r21,r3,4
   48b88:	00c00174 	movhi	r3,5
   48b8c:	18c6c904 	addi	r3,r3,6948
   48b90:	1885883a 	add	r2,r3,r2
   48b94:	a8c0040c 	andi	r3,r21,16
   48b98:	12800017 	ldw	r10,0(r2)
   48b9c:	15800117 	ldw	r22,4(r2)
   48ba0:	18038726 	beq	r3,zero,499c0 <_dtoa_r+0x11d0>
   48ba4:	00800174 	movhi	r2,5
   48ba8:	1086bf04 	addi	r2,r2,6908
   48bac:	11800817 	ldw	r6,32(r2)
   48bb0:	11c00917 	ldw	r7,36(r2)
   48bb4:	d9000317 	ldw	r4,12(sp)
   48bb8:	880b883a 	mov	r5,r17
   48bbc:	da801515 	stw	r10,84(sp)
   48bc0:	00456480 	call	45648 <__divdf3>
   48bc4:	da801517 	ldw	r10,84(sp)
   48bc8:	d8801015 	stw	r2,64(sp)
   48bcc:	1829883a 	mov	r20,r3
   48bd0:	ad4003cc 	andi	r21,r21,15
   48bd4:	048000c4 	movi	r18,3
   48bd8:	a8001126 	beq	r21,zero,48c20 <_dtoa_r+0x430>
   48bdc:	04c00174 	movhi	r19,5
   48be0:	9cc6bf04 	addi	r19,r19,6908
   48be4:	5005883a 	mov	r2,r10
   48be8:	b007883a 	mov	r3,r22
   48bec:	a980004c 	andi	r6,r21,1
   48bf0:	1009883a 	mov	r4,r2
   48bf4:	a82bd07a 	srai	r21,r21,1
   48bf8:	180b883a 	mov	r5,r3
   48bfc:	30000426 	beq	r6,zero,48c10 <_dtoa_r+0x420>
   48c00:	99800017 	ldw	r6,0(r19)
   48c04:	99c00117 	ldw	r7,4(r19)
   48c08:	94800044 	addi	r18,r18,1
   48c0c:	00453640 	call	45364 <__muldf3>
   48c10:	9cc00204 	addi	r19,r19,8
   48c14:	a83ff51e 	bne	r21,zero,48bec <_dtoa_r+0x3fc>
   48c18:	1015883a 	mov	r10,r2
   48c1c:	182d883a 	mov	r22,r3
   48c20:	d9001017 	ldw	r4,64(sp)
   48c24:	a00b883a 	mov	r5,r20
   48c28:	500d883a 	mov	r6,r10
   48c2c:	b00f883a 	mov	r7,r22
   48c30:	00456480 	call	45648 <__divdf3>
   48c34:	1027883a 	mov	r19,r2
   48c38:	1829883a 	mov	r20,r3
   48c3c:	d8c00d17 	ldw	r3,52(sp)
   48c40:	18000626 	beq	r3,zero,48c5c <_dtoa_r+0x46c>
   48c44:	9809883a 	mov	r4,r19
   48c48:	a00b883a 	mov	r5,r20
   48c4c:	000d883a 	mov	r6,zero
   48c50:	01cffc34 	movhi	r7,16368
   48c54:	004e3c80 	call	4e3c8 <__ltdf2>
   48c58:	10040e16 	blt	r2,zero,49c94 <_dtoa_r+0x14a4>
   48c5c:	9009883a 	mov	r4,r18
   48c60:	00459200 	call	45920 <__floatsidf>
   48c64:	1009883a 	mov	r4,r2
   48c68:	180b883a 	mov	r5,r3
   48c6c:	980d883a 	mov	r6,r19
   48c70:	a00f883a 	mov	r7,r20
   48c74:	00453640 	call	45364 <__muldf3>
   48c78:	1009883a 	mov	r4,r2
   48c7c:	180b883a 	mov	r5,r3
   48c80:	000d883a 	mov	r6,zero
   48c84:	01d00734 	movhi	r7,16412
   48c88:	00452b00 	call	452b0 <__adddf3>
   48c8c:	057f3034 	movhi	r21,64704
   48c90:	1d6b883a 	add	r21,r3,r21
   48c94:	d8c00917 	ldw	r3,36(sp)
   48c98:	1025883a 	mov	r18,r2
   48c9c:	18031f26 	beq	r3,zero,4991c <_dtoa_r+0x112c>
   48ca0:	d8800617 	ldw	r2,24(sp)
   48ca4:	dac00917 	ldw	r11,36(sp)
   48ca8:	d8801315 	stw	r2,76(sp)
   48cac:	d8c00c17 	ldw	r3,48(sp)
   48cb0:	18039026 	beq	r3,zero,49af4 <_dtoa_r+0x1304>
   48cb4:	58bfffc4 	addi	r2,r11,-1
   48cb8:	100490fa 	slli	r2,r2,3
   48cbc:	00c00174 	movhi	r3,5
   48cc0:	18c6c904 	addi	r3,r3,6948
   48cc4:	0009883a 	mov	r4,zero
   48cc8:	1885883a 	add	r2,r3,r2
   48ccc:	11800017 	ldw	r6,0(r2)
   48cd0:	11c00117 	ldw	r7,4(r2)
   48cd4:	014ff834 	movhi	r5,16352
   48cd8:	dac01615 	stw	r11,88(sp)
   48cdc:	00456480 	call	45648 <__divdf3>
   48ce0:	900d883a 	mov	r6,r18
   48ce4:	a80f883a 	mov	r7,r21
   48ce8:	1009883a 	mov	r4,r2
   48cec:	180b883a 	mov	r5,r3
   48cf0:	00453040 	call	45304 <__subdf3>
   48cf4:	a00b883a 	mov	r5,r20
   48cf8:	9809883a 	mov	r4,r19
   48cfc:	182b883a 	mov	r21,r3
   48d00:	d8801015 	stw	r2,64(sp)
   48d04:	00459f40 	call	459f4 <__fixdfsi>
   48d08:	1009883a 	mov	r4,r2
   48d0c:	d8801515 	stw	r2,84(sp)
   48d10:	00459200 	call	45920 <__floatsidf>
   48d14:	9809883a 	mov	r4,r19
   48d18:	a00b883a 	mov	r5,r20
   48d1c:	100d883a 	mov	r6,r2
   48d20:	180f883a 	mov	r7,r3
   48d24:	00453040 	call	45304 <__subdf3>
   48d28:	da401517 	ldw	r9,84(sp)
   48d2c:	d9001017 	ldw	r4,64(sp)
   48d30:	a80b883a 	mov	r5,r21
   48d34:	4d000c04 	addi	r20,r9,48
   48d38:	bd000005 	stb	r20,0(r23)
   48d3c:	100d883a 	mov	r6,r2
   48d40:	180f883a 	mov	r7,r3
   48d44:	bd800044 	addi	r22,r23,1
   48d48:	1025883a 	mov	r18,r2
   48d4c:	1827883a 	mov	r19,r3
   48d50:	00458580 	call	45858 <__gtdf2>
   48d54:	00842216 	blt	zero,r2,49de0 <_dtoa_r+0x15f0>
   48d58:	0009883a 	mov	r4,zero
   48d5c:	014ffc34 	movhi	r5,16368
   48d60:	900d883a 	mov	r6,r18
   48d64:	980f883a 	mov	r7,r19
   48d68:	00453040 	call	45304 <__subdf3>
   48d6c:	d9001017 	ldw	r4,64(sp)
   48d70:	a80b883a 	mov	r5,r21
   48d74:	100d883a 	mov	r6,r2
   48d78:	180f883a 	mov	r7,r3
   48d7c:	00458580 	call	45858 <__gtdf2>
   48d80:	dac01617 	ldw	r11,88(sp)
   48d84:	00841316 	blt	zero,r2,49dd4 <_dtoa_r+0x15e4>
   48d88:	00800044 	movi	r2,1
   48d8c:	12c0670e 	bge	r2,r11,48f2c <_dtoa_r+0x73c>
   48d90:	bad7883a 	add	r11,r23,r11
   48d94:	df001115 	stw	fp,68(sp)
   48d98:	dc401215 	stw	r17,72(sp)
   48d9c:	5839883a 	mov	fp,r11
   48da0:	dc401017 	ldw	r17,64(sp)
   48da4:	00000806 	br	48dc8 <_dtoa_r+0x5d8>
   48da8:	00453040 	call	45304 <__subdf3>
   48dac:	1009883a 	mov	r4,r2
   48db0:	180b883a 	mov	r5,r3
   48db4:	880d883a 	mov	r6,r17
   48db8:	a80f883a 	mov	r7,r21
   48dbc:	004e3c80 	call	4e3c8 <__ltdf2>
   48dc0:	1003ee16 	blt	r2,zero,49d7c <_dtoa_r+0x158c>
   48dc4:	b703f126 	beq	r22,fp,49d8c <_dtoa_r+0x159c>
   48dc8:	8809883a 	mov	r4,r17
   48dcc:	a80b883a 	mov	r5,r21
   48dd0:	000d883a 	mov	r6,zero
   48dd4:	01d00934 	movhi	r7,16420
   48dd8:	00453640 	call	45364 <__muldf3>
   48ddc:	000d883a 	mov	r6,zero
   48de0:	01d00934 	movhi	r7,16420
   48de4:	9009883a 	mov	r4,r18
   48de8:	980b883a 	mov	r5,r19
   48dec:	1023883a 	mov	r17,r2
   48df0:	182b883a 	mov	r21,r3
   48df4:	00453640 	call	45364 <__muldf3>
   48df8:	180b883a 	mov	r5,r3
   48dfc:	1009883a 	mov	r4,r2
   48e00:	1825883a 	mov	r18,r3
   48e04:	1027883a 	mov	r19,r2
   48e08:	00459f40 	call	459f4 <__fixdfsi>
   48e0c:	1009883a 	mov	r4,r2
   48e10:	1029883a 	mov	r20,r2
   48e14:	00459200 	call	45920 <__floatsidf>
   48e18:	9809883a 	mov	r4,r19
   48e1c:	900b883a 	mov	r5,r18
   48e20:	100d883a 	mov	r6,r2
   48e24:	180f883a 	mov	r7,r3
   48e28:	00453040 	call	45304 <__subdf3>
   48e2c:	a5000c04 	addi	r20,r20,48
   48e30:	b5000005 	stb	r20,0(r22)
   48e34:	1009883a 	mov	r4,r2
   48e38:	180b883a 	mov	r5,r3
   48e3c:	880d883a 	mov	r6,r17
   48e40:	a80f883a 	mov	r7,r21
   48e44:	1025883a 	mov	r18,r2
   48e48:	1827883a 	mov	r19,r3
   48e4c:	004e3c80 	call	4e3c8 <__ltdf2>
   48e50:	b5800044 	addi	r22,r22,1
   48e54:	0009883a 	mov	r4,zero
   48e58:	014ffc34 	movhi	r5,16368
   48e5c:	900d883a 	mov	r6,r18
   48e60:	980f883a 	mov	r7,r19
   48e64:	103fd00e 	bge	r2,zero,48da8 <_dtoa_r+0x5b8>
   48e68:	d9001317 	ldw	r4,76(sp)
   48e6c:	df001117 	ldw	fp,68(sp)
   48e70:	d9000615 	stw	r4,24(sp)
   48e74:	8009883a 	mov	r4,r16
   48e78:	e00b883a 	mov	r5,fp
   48e7c:	004bbf00 	call	4bbf0 <_Bfree>
   48e80:	d9c00617 	ldw	r7,24(sp)
   48e84:	d8c02217 	ldw	r3,136(sp)
   48e88:	d9002417 	ldw	r4,144(sp)
   48e8c:	b0000005 	stb	zero,0(r22)
   48e90:	38800044 	addi	r2,r7,1
   48e94:	18800015 	stw	r2,0(r3)
   48e98:	203e8426 	beq	r4,zero,488ac <_dtoa_r+0xbc>
   48e9c:	25800015 	stw	r22,0(r4)
   48ea0:	003e8206 	br	488ac <_dtoa_r+0xbc>
   48ea4:	00800434 	movhi	r2,16
   48ea8:	10bfffc4 	addi	r2,r2,-1
   48eac:	90a4703a 	and	r18,r18,r2
   48eb0:	903e901e 	bne	r18,zero,488f4 <_dtoa_r+0x104>
   48eb4:	05c00174 	movhi	r23,5
   48eb8:	bdc6a004 	addi	r23,r23,6784
   48ebc:	003e8f06 	br	488fc <_dtoa_r+0x10c>
   48ec0:	b8800204 	addi	r2,r23,8
   48ec4:	003e9206 	br	48910 <_dtoa_r+0x120>
   48ec8:	01400434 	movhi	r5,16
   48ecc:	297fffc4 	addi	r5,r5,-1
   48ed0:	894a703a 	and	r5,r17,r5
   48ed4:	d9000317 	ldw	r4,12(sp)
   48ed8:	294ffc34 	orhi	r5,r5,16368
   48edc:	a53f0044 	addi	r20,r20,-1023
   48ee0:	dd400217 	ldw	r21,8(sp)
   48ee4:	d8000f15 	stw	zero,60(sp)
   48ee8:	003eb106 	br	489b0 <_dtoa_r+0x1c0>
   48eec:	05c00174 	movhi	r23,5
   48ef0:	bdc69704 	addi	r23,r23,6748
   48ef4:	003e6d06 	br	488ac <_dtoa_r+0xbc>
   48ef8:	d8000415 	stw	zero,16(sp)
   48efc:	80001115 	stw	zero,68(r16)
   48f00:	8009883a 	mov	r4,r16
   48f04:	000b883a 	mov	r5,zero
   48f08:	004bb480 	call	4bb48 <_Balloc>
   48f0c:	01ffffc4 	movi	r7,-1
   48f10:	102f883a 	mov	r23,r2
   48f14:	80801015 	stw	r2,64(r16)
   48f18:	00800044 	movi	r2,1
   48f1c:	d9c00915 	stw	r7,36(sp)
   48f20:	d8002115 	stw	zero,132(sp)
   48f24:	d9c00e15 	stw	r7,56(sp)
   48f28:	d8800c15 	stw	r2,48(sp)
   48f2c:	d8800117 	ldw	r2,4(sp)
   48f30:	10008b16 	blt	r2,zero,49160 <_dtoa_r+0x970>
   48f34:	d9000617 	ldw	r4,24(sp)
   48f38:	00c00384 	movi	r3,14
   48f3c:	19008816 	blt	r3,r4,49160 <_dtoa_r+0x970>
   48f40:	200490fa 	slli	r2,r4,3
   48f44:	d9c02117 	ldw	r7,132(sp)
   48f48:	00c00174 	movhi	r3,5
   48f4c:	18c6c904 	addi	r3,r3,6948
   48f50:	1885883a 	add	r2,r3,r2
   48f54:	14800017 	ldw	r18,0(r2)
   48f58:	14c00117 	ldw	r19,4(r2)
   48f5c:	3801c916 	blt	r7,zero,49684 <_dtoa_r+0xe94>
   48f60:	d9000317 	ldw	r4,12(sp)
   48f64:	900d883a 	mov	r6,r18
   48f68:	980f883a 	mov	r7,r19
   48f6c:	880b883a 	mov	r5,r17
   48f70:	00456480 	call	45648 <__divdf3>
   48f74:	180b883a 	mov	r5,r3
   48f78:	1009883a 	mov	r4,r2
   48f7c:	00459f40 	call	459f4 <__fixdfsi>
   48f80:	1009883a 	mov	r4,r2
   48f84:	102b883a 	mov	r21,r2
   48f88:	00459200 	call	45920 <__floatsidf>
   48f8c:	1009883a 	mov	r4,r2
   48f90:	180b883a 	mov	r5,r3
   48f94:	900d883a 	mov	r6,r18
   48f98:	980f883a 	mov	r7,r19
   48f9c:	00453640 	call	45364 <__muldf3>
   48fa0:	d9000317 	ldw	r4,12(sp)
   48fa4:	880b883a 	mov	r5,r17
   48fa8:	100d883a 	mov	r6,r2
   48fac:	180f883a 	mov	r7,r3
   48fb0:	00453040 	call	45304 <__subdf3>
   48fb4:	d9c00917 	ldw	r7,36(sp)
   48fb8:	1009883a 	mov	r4,r2
   48fbc:	a8800c04 	addi	r2,r21,48
   48fc0:	b8800005 	stb	r2,0(r23)
   48fc4:	01800044 	movi	r6,1
   48fc8:	180b883a 	mov	r5,r3
   48fcc:	2005883a 	mov	r2,r4
   48fd0:	bd800044 	addi	r22,r23,1
   48fd4:	39803726 	beq	r7,r6,490b4 <_dtoa_r+0x8c4>
   48fd8:	000d883a 	mov	r6,zero
   48fdc:	01d00934 	movhi	r7,16420
   48fe0:	00453640 	call	45364 <__muldf3>
   48fe4:	1009883a 	mov	r4,r2
   48fe8:	180b883a 	mov	r5,r3
   48fec:	000d883a 	mov	r6,zero
   48ff0:	000f883a 	mov	r7,zero
   48ff4:	1029883a 	mov	r20,r2
   48ff8:	1823883a 	mov	r17,r3
   48ffc:	00457fc0 	call	457fc <__eqdf2>
   49000:	103f9c26 	beq	r2,zero,48e74 <_dtoa_r+0x684>
   49004:	dd400917 	ldw	r21,36(sp)
   49008:	dc000415 	stw	r16,16(sp)
   4900c:	00000906 	br	49034 <_dtoa_r+0x844>
   49010:	00453640 	call	45364 <__muldf3>
   49014:	1009883a 	mov	r4,r2
   49018:	180b883a 	mov	r5,r3
   4901c:	000d883a 	mov	r6,zero
   49020:	000f883a 	mov	r7,zero
   49024:	1029883a 	mov	r20,r2
   49028:	1823883a 	mov	r17,r3
   4902c:	00457fc0 	call	457fc <__eqdf2>
   49030:	10022926 	beq	r2,zero,498d8 <_dtoa_r+0x10e8>
   49034:	900d883a 	mov	r6,r18
   49038:	980f883a 	mov	r7,r19
   4903c:	a009883a 	mov	r4,r20
   49040:	880b883a 	mov	r5,r17
   49044:	00456480 	call	45648 <__divdf3>
   49048:	180b883a 	mov	r5,r3
   4904c:	1009883a 	mov	r4,r2
   49050:	00459f40 	call	459f4 <__fixdfsi>
   49054:	1009883a 	mov	r4,r2
   49058:	1021883a 	mov	r16,r2
   4905c:	00459200 	call	45920 <__floatsidf>
   49060:	1009883a 	mov	r4,r2
   49064:	180b883a 	mov	r5,r3
   49068:	900d883a 	mov	r6,r18
   4906c:	980f883a 	mov	r7,r19
   49070:	00453640 	call	45364 <__muldf3>
   49074:	a009883a 	mov	r4,r20
   49078:	880b883a 	mov	r5,r17
   4907c:	100d883a 	mov	r6,r2
   49080:	180f883a 	mov	r7,r3
   49084:	00453040 	call	45304 <__subdf3>
   49088:	82400c04 	addi	r9,r16,48
   4908c:	b2400005 	stb	r9,0(r22)
   49090:	b5800044 	addi	r22,r22,1
   49094:	b5d3c83a 	sub	r9,r22,r23
   49098:	000d883a 	mov	r6,zero
   4909c:	01d00934 	movhi	r7,16420
   490a0:	1009883a 	mov	r4,r2
   490a4:	180b883a 	mov	r5,r3
   490a8:	aa7fd91e 	bne	r21,r9,49010 <_dtoa_r+0x820>
   490ac:	802b883a 	mov	r21,r16
   490b0:	dc000417 	ldw	r16,16(sp)
   490b4:	1009883a 	mov	r4,r2
   490b8:	180b883a 	mov	r5,r3
   490bc:	100d883a 	mov	r6,r2
   490c0:	180f883a 	mov	r7,r3
   490c4:	00452b00 	call	452b0 <__adddf3>
   490c8:	9009883a 	mov	r4,r18
   490cc:	980b883a 	mov	r5,r19
   490d0:	100d883a 	mov	r6,r2
   490d4:	180f883a 	mov	r7,r3
   490d8:	1023883a 	mov	r17,r2
   490dc:	1829883a 	mov	r20,r3
   490e0:	004e3c80 	call	4e3c8 <__ltdf2>
   490e4:	10000816 	blt	r2,zero,49108 <_dtoa_r+0x918>
   490e8:	9009883a 	mov	r4,r18
   490ec:	980b883a 	mov	r5,r19
   490f0:	880d883a 	mov	r6,r17
   490f4:	a00f883a 	mov	r7,r20
   490f8:	00457fc0 	call	457fc <__eqdf2>
   490fc:	103f5d1e 	bne	r2,zero,48e74 <_dtoa_r+0x684>
   49100:	ad40004c 	andi	r21,r21,1
   49104:	a83f5b26 	beq	r21,zero,48e74 <_dtoa_r+0x684>
   49108:	b53fffc3 	ldbu	r20,-1(r22)
   4910c:	b0ffff84 	addi	r3,r22,-2
   49110:	01400e44 	movi	r5,57
   49114:	00000306 	br	49124 <_dtoa_r+0x934>
   49118:	1d000003 	ldbu	r20,0(r3)
   4911c:	102d883a 	mov	r22,r2
   49120:	18ffffc4 	addi	r3,r3,-1
   49124:	a1003fcc 	andi	r4,r20,255
   49128:	2100201c 	xori	r4,r4,128
   4912c:	213fe004 	addi	r4,r4,-128
   49130:	b0bfffc4 	addi	r2,r22,-1
   49134:	2142ca1e 	bne	r4,r5,49c60 <_dtoa_r+0x1470>
   49138:	b8bff71e 	bne	r23,r2,49118 <_dtoa_r+0x928>
   4913c:	d8800617 	ldw	r2,24(sp)
   49140:	05000c44 	movi	r20,49
   49144:	10800044 	addi	r2,r2,1
   49148:	d8800615 	stw	r2,24(sp)
   4914c:	00800c04 	movi	r2,48
   49150:	b8800005 	stb	r2,0(r23)
   49154:	b805883a 	mov	r2,r23
   49158:	15000005 	stb	r20,0(r2)
   4915c:	003f4506 	br	48e74 <_dtoa_r+0x684>
   49160:	d9c00c17 	ldw	r7,48(sp)
   49164:	3800c926 	beq	r7,zero,4948c <_dtoa_r+0xc9c>
   49168:	d9c00417 	ldw	r7,16(sp)
   4916c:	00c00044 	movi	r3,1
   49170:	19c16c0e 	bge	r3,r7,49724 <_dtoa_r+0xf34>
   49174:	d9000917 	ldw	r4,36(sp)
   49178:	d9c00a17 	ldw	r7,40(sp)
   4917c:	24ffffc4 	addi	r19,r4,-1
   49180:	3cc20716 	blt	r7,r19,499a0 <_dtoa_r+0x11b0>
   49184:	3ce7c83a 	sub	r19,r7,r19
   49188:	d9c00917 	ldw	r7,36(sp)
   4918c:	3802ae16 	blt	r7,zero,49c48 <_dtoa_r+0x1458>
   49190:	dc800817 	ldw	r18,32(sp)
   49194:	d8800917 	ldw	r2,36(sp)
   49198:	d8c00817 	ldw	r3,32(sp)
   4919c:	d9c00717 	ldw	r7,28(sp)
   491a0:	8009883a 	mov	r4,r16
   491a4:	1887883a 	add	r3,r3,r2
   491a8:	388f883a 	add	r7,r7,r2
   491ac:	01400044 	movi	r5,1
   491b0:	d8c00815 	stw	r3,32(sp)
   491b4:	d9c00715 	stw	r7,28(sp)
   491b8:	004bf480 	call	4bf48 <__i2b>
   491bc:	102b883a 	mov	r21,r2
   491c0:	90000a26 	beq	r18,zero,491ec <_dtoa_r+0x9fc>
   491c4:	d8800717 	ldw	r2,28(sp)
   491c8:	0080080e 	bge	zero,r2,491ec <_dtoa_r+0x9fc>
   491cc:	90812b16 	blt	r18,r2,4967c <_dtoa_r+0xe8c>
   491d0:	d8c00817 	ldw	r3,32(sp)
   491d4:	d9000717 	ldw	r4,28(sp)
   491d8:	90a5c83a 	sub	r18,r18,r2
   491dc:	1887c83a 	sub	r3,r3,r2
   491e0:	2089c83a 	sub	r4,r4,r2
   491e4:	d8c00815 	stw	r3,32(sp)
   491e8:	d9000715 	stw	r4,28(sp)
   491ec:	d9c00a17 	ldw	r7,40(sp)
   491f0:	01c0140e 	bge	zero,r7,49244 <_dtoa_r+0xa54>
   491f4:	d8800c17 	ldw	r2,48(sp)
   491f8:	1001de26 	beq	r2,zero,49974 <_dtoa_r+0x1184>
   491fc:	04c00e0e 	bge	zero,r19,49238 <_dtoa_r+0xa48>
   49200:	a80b883a 	mov	r5,r21
   49204:	8009883a 	mov	r4,r16
   49208:	980d883a 	mov	r6,r19
   4920c:	004c1640 	call	4c164 <__pow5mult>
   49210:	e00d883a 	mov	r6,fp
   49214:	8009883a 	mov	r4,r16
   49218:	100b883a 	mov	r5,r2
   4921c:	102b883a 	mov	r21,r2
   49220:	004bf840 	call	4bf84 <__multiply>
   49224:	1029883a 	mov	r20,r2
   49228:	e00b883a 	mov	r5,fp
   4922c:	8009883a 	mov	r4,r16
   49230:	004bbf00 	call	4bbf0 <_Bfree>
   49234:	a039883a 	mov	fp,r20
   49238:	d8c00a17 	ldw	r3,40(sp)
   4923c:	1ccdc83a 	sub	r6,r3,r19
   49240:	3001291e 	bne	r6,zero,496e8 <_dtoa_r+0xef8>
   49244:	8009883a 	mov	r4,r16
   49248:	01400044 	movi	r5,1
   4924c:	004bf480 	call	4bf48 <__i2b>
   49250:	d9000b17 	ldw	r4,44(sp)
   49254:	1029883a 	mov	r20,r2
   49258:	0100050e 	bge	zero,r4,49270 <_dtoa_r+0xa80>
   4925c:	d9800b17 	ldw	r6,44(sp)
   49260:	8009883a 	mov	r4,r16
   49264:	100b883a 	mov	r5,r2
   49268:	004c1640 	call	4c164 <__pow5mult>
   4926c:	1029883a 	mov	r20,r2
   49270:	d9c00417 	ldw	r7,16(sp)
   49274:	00800044 	movi	r2,1
   49278:	11c0f00e 	bge	r2,r7,4963c <_dtoa_r+0xe4c>
   4927c:	0023883a 	mov	r17,zero
   49280:	d8800b17 	ldw	r2,44(sp)
   49284:	1001741e 	bne	r2,zero,49858 <_dtoa_r+0x1068>
   49288:	00800044 	movi	r2,1
   4928c:	d8c00717 	ldw	r3,28(sp)
   49290:	10c5883a 	add	r2,r2,r3
   49294:	108007cc 	andi	r2,r2,31
   49298:	10008026 	beq	r2,zero,4949c <_dtoa_r+0xcac>
   4929c:	01000804 	movi	r4,32
   492a0:	2089c83a 	sub	r4,r4,r2
   492a4:	00c00104 	movi	r3,4
   492a8:	1902d00e 	bge	r3,r4,49dec <_dtoa_r+0x15fc>
   492ac:	d9000817 	ldw	r4,32(sp)
   492b0:	d9c00717 	ldw	r7,28(sp)
   492b4:	00c00704 	movi	r3,28
   492b8:	1885c83a 	sub	r2,r3,r2
   492bc:	2089883a 	add	r4,r4,r2
   492c0:	388f883a 	add	r7,r7,r2
   492c4:	d9000815 	stw	r4,32(sp)
   492c8:	90a5883a 	add	r18,r18,r2
   492cc:	d9c00715 	stw	r7,28(sp)
   492d0:	d9c00817 	ldw	r7,32(sp)
   492d4:	01c0050e 	bge	zero,r7,492ec <_dtoa_r+0xafc>
   492d8:	e00b883a 	mov	r5,fp
   492dc:	8009883a 	mov	r4,r16
   492e0:	380d883a 	mov	r6,r7
   492e4:	004c2900 	call	4c290 <__lshift>
   492e8:	1039883a 	mov	fp,r2
   492ec:	d8800717 	ldw	r2,28(sp)
   492f0:	0080050e 	bge	zero,r2,49308 <_dtoa_r+0xb18>
   492f4:	a00b883a 	mov	r5,r20
   492f8:	8009883a 	mov	r4,r16
   492fc:	100d883a 	mov	r6,r2
   49300:	004c2900 	call	4c290 <__lshift>
   49304:	1029883a 	mov	r20,r2
   49308:	d8c00d17 	ldw	r3,52(sp)
   4930c:	1801401e 	bne	r3,zero,49810 <_dtoa_r+0x1020>
   49310:	d8800917 	ldw	r2,36(sp)
   49314:	00815a0e 	bge	zero,r2,49880 <_dtoa_r+0x1090>
   49318:	d8c00c17 	ldw	r3,48(sp)
   4931c:	18006f1e 	bne	r3,zero,494dc <_dtoa_r+0xcec>
   49320:	b823883a 	mov	r17,r23
   49324:	dc800917 	ldw	r18,36(sp)
   49328:	00000206 	br	49334 <_dtoa_r+0xb44>
   4932c:	004bc180 	call	4bc18 <__multadd>
   49330:	1039883a 	mov	fp,r2
   49334:	e009883a 	mov	r4,fp
   49338:	a00b883a 	mov	r5,r20
   4933c:	00485e80 	call	485e8 <quorem>
   49340:	10800c04 	addi	r2,r2,48
   49344:	88800005 	stb	r2,0(r17)
   49348:	8c400044 	addi	r17,r17,1
   4934c:	8dc7c83a 	sub	r3,r17,r23
   49350:	8009883a 	mov	r4,r16
   49354:	e00b883a 	mov	r5,fp
   49358:	01800284 	movi	r6,10
   4935c:	000f883a 	mov	r7,zero
   49360:	1cbff216 	blt	r3,r18,4932c <_dtoa_r+0xb3c>
   49364:	dd800917 	ldw	r22,36(sp)
   49368:	1007883a 	mov	r3,r2
   4936c:	05823a0e 	bge	zero,r22,49c58 <_dtoa_r+0x1468>
   49370:	bdad883a 	add	r22,r23,r22
   49374:	0023883a 	mov	r17,zero
   49378:	e00b883a 	mov	r5,fp
   4937c:	01800044 	movi	r6,1
   49380:	8009883a 	mov	r4,r16
   49384:	d8c01515 	stw	r3,84(sp)
   49388:	004c2900 	call	4c290 <__lshift>
   4938c:	1009883a 	mov	r4,r2
   49390:	a00b883a 	mov	r5,r20
   49394:	1039883a 	mov	fp,r2
   49398:	004c3ec0 	call	4c3ec <__mcmp>
   4939c:	d8c01517 	ldw	r3,84(sp)
   493a0:	0080d60e 	bge	zero,r2,496fc <_dtoa_r+0xf0c>
   493a4:	b13fffc3 	ldbu	r4,-1(r22)
   493a8:	b0ffff84 	addi	r3,r22,-2
   493ac:	01800e44 	movi	r6,57
   493b0:	00000306 	br	493c0 <_dtoa_r+0xbd0>
   493b4:	19000003 	ldbu	r4,0(r3)
   493b8:	102d883a 	mov	r22,r2
   493bc:	18ffffc4 	addi	r3,r3,-1
   493c0:	21403fcc 	andi	r5,r4,255
   493c4:	2940201c 	xori	r5,r5,128
   493c8:	297fe004 	addi	r5,r5,-128
   493cc:	b0bfffc4 	addi	r2,r22,-1
   493d0:	2981a71e 	bne	r5,r6,49a70 <_dtoa_r+0x1280>
   493d4:	b8bff71e 	bne	r23,r2,493b4 <_dtoa_r+0xbc4>
   493d8:	d8800617 	ldw	r2,24(sp)
   493dc:	10800044 	addi	r2,r2,1
   493e0:	d8800615 	stw	r2,24(sp)
   493e4:	00800c44 	movi	r2,49
   493e8:	b8800005 	stb	r2,0(r23)
   493ec:	8009883a 	mov	r4,r16
   493f0:	a00b883a 	mov	r5,r20
   493f4:	004bbf00 	call	4bbf0 <_Bfree>
   493f8:	a83e9e26 	beq	r21,zero,48e74 <_dtoa_r+0x684>
   493fc:	88000426 	beq	r17,zero,49410 <_dtoa_r+0xc20>
   49400:	8d400326 	beq	r17,r21,49410 <_dtoa_r+0xc20>
   49404:	8009883a 	mov	r4,r16
   49408:	880b883a 	mov	r5,r17
   4940c:	004bbf00 	call	4bbf0 <_Bfree>
   49410:	8009883a 	mov	r4,r16
   49414:	a80b883a 	mov	r5,r21
   49418:	004bbf00 	call	4bbf0 <_Bfree>
   4941c:	003e9506 	br	48e74 <_dtoa_r+0x684>
   49420:	00c00044 	movi	r3,1
   49424:	d8c00d15 	stw	r3,52(sp)
   49428:	003d9f06 	br	48aa8 <_dtoa_r+0x2b8>
   4942c:	d9000817 	ldw	r4,32(sp)
   49430:	d8800617 	ldw	r2,24(sp)
   49434:	d8000b15 	stw	zero,44(sp)
   49438:	2089c83a 	sub	r4,r4,r2
   4943c:	0087c83a 	sub	r3,zero,r2
   49440:	d9000815 	stw	r4,32(sp)
   49444:	d8c00a15 	stw	r3,40(sp)
   49448:	003da306 	br	48ad8 <_dtoa_r+0x2e8>
   4944c:	0529c83a 	sub	r20,zero,r20
   49450:	dd000815 	stw	r20,32(sp)
   49454:	d8000715 	stw	zero,28(sp)
   49458:	003d9806 	br	48abc <_dtoa_r+0x2cc>
   4945c:	d9000617 	ldw	r4,24(sp)
   49460:	00459200 	call	45920 <__floatsidf>
   49464:	1009883a 	mov	r4,r2
   49468:	180b883a 	mov	r5,r3
   4946c:	980d883a 	mov	r6,r19
   49470:	900f883a 	mov	r7,r18
   49474:	004e36c0 	call	4e36c <__nedf2>
   49478:	103d7a26 	beq	r2,zero,48a64 <_dtoa_r+0x274>
   4947c:	d8800617 	ldw	r2,24(sp)
   49480:	10bfffc4 	addi	r2,r2,-1
   49484:	d8800615 	stw	r2,24(sp)
   49488:	003d7606 	br	48a64 <_dtoa_r+0x274>
   4948c:	dcc00a17 	ldw	r19,40(sp)
   49490:	dc800817 	ldw	r18,32(sp)
   49494:	002b883a 	mov	r21,zero
   49498:	003f4906 	br	491c0 <_dtoa_r+0x9d0>
   4949c:	00800704 	movi	r2,28
   494a0:	d8c00817 	ldw	r3,32(sp)
   494a4:	d9000717 	ldw	r4,28(sp)
   494a8:	90a5883a 	add	r18,r18,r2
   494ac:	1887883a 	add	r3,r3,r2
   494b0:	2089883a 	add	r4,r4,r2
   494b4:	d8c00815 	stw	r3,32(sp)
   494b8:	d9000715 	stw	r4,28(sp)
   494bc:	003f8406 	br	492d0 <_dtoa_r+0xae0>
   494c0:	d9c00317 	ldw	r7,12(sp)
   494c4:	013efb84 	movi	r4,-1042
   494c8:	2509c83a 	sub	r4,r4,r20
   494cc:	3908983a 	sll	r4,r7,r4
   494d0:	003d3006 	br	48994 <_dtoa_r+0x1a4>
   494d4:	d8000d15 	stw	zero,52(sp)
   494d8:	003d7306 	br	48aa8 <_dtoa_r+0x2b8>
   494dc:	0480050e 	bge	zero,r18,494f4 <_dtoa_r+0xd04>
   494e0:	a80b883a 	mov	r5,r21
   494e4:	8009883a 	mov	r4,r16
   494e8:	900d883a 	mov	r6,r18
   494ec:	004c2900 	call	4c290 <__lshift>
   494f0:	102b883a 	mov	r21,r2
   494f4:	8801611e 	bne	r17,zero,49a7c <_dtoa_r+0x128c>
   494f8:	a827883a 	mov	r19,r21
   494fc:	d8c00317 	ldw	r3,12(sp)
   49500:	d9000917 	ldw	r4,36(sp)
   49504:	b8bfffc4 	addi	r2,r23,-1
   49508:	18c0004c 	andi	r3,r3,1
   4950c:	1105883a 	add	r2,r2,r4
   49510:	b825883a 	mov	r18,r23
   49514:	d8800515 	stw	r2,20(sp)
   49518:	a823883a 	mov	r17,r21
   4951c:	d8c00315 	stw	r3,12(sp)
   49520:	ddc00715 	stw	r23,28(sp)
   49524:	e009883a 	mov	r4,fp
   49528:	a00b883a 	mov	r5,r20
   4952c:	00485e80 	call	485e8 <quorem>
   49530:	e009883a 	mov	r4,fp
   49534:	880b883a 	mov	r5,r17
   49538:	102d883a 	mov	r22,r2
   4953c:	004c3ec0 	call	4c3ec <__mcmp>
   49540:	980d883a 	mov	r6,r19
   49544:	8009883a 	mov	r4,r16
   49548:	a00b883a 	mov	r5,r20
   4954c:	102b883a 	mov	r21,r2
   49550:	004c4440 	call	4c444 <__mdiff>
   49554:	100d883a 	mov	r6,r2
   49558:	10800317 	ldw	r2,12(r2)
   4955c:	b5c00c04 	addi	r23,r22,48
   49560:	10008c26 	beq	r2,zero,49794 <_dtoa_r+0xfa4>
   49564:	8009883a 	mov	r4,r16
   49568:	300b883a 	mov	r5,r6
   4956c:	004bbf00 	call	4bbf0 <_Bfree>
   49570:	00800044 	movi	r2,1
   49574:	a8007116 	blt	r21,zero,4973c <_dtoa_r+0xf4c>
   49578:	a800041e 	bne	r21,zero,4958c <_dtoa_r+0xd9c>
   4957c:	d9c00417 	ldw	r7,16(sp)
   49580:	3800021e 	bne	r7,zero,4958c <_dtoa_r+0xd9c>
   49584:	d8c00317 	ldw	r3,12(sp)
   49588:	18006c26 	beq	r3,zero,4973c <_dtoa_r+0xf4c>
   4958c:	00814c16 	blt	zero,r2,49ac0 <_dtoa_r+0x12d0>
   49590:	d8c00517 	ldw	r3,20(sp)
   49594:	95400044 	addi	r21,r18,1
   49598:	95c00005 	stb	r23,0(r18)
   4959c:	a82d883a 	mov	r22,r21
   495a0:	90c14d26 	beq	r18,r3,49ad8 <_dtoa_r+0x12e8>
   495a4:	e00b883a 	mov	r5,fp
   495a8:	8009883a 	mov	r4,r16
   495ac:	01800284 	movi	r6,10
   495b0:	000f883a 	mov	r7,zero
   495b4:	004bc180 	call	4bc18 <__multadd>
   495b8:	1039883a 	mov	fp,r2
   495bc:	8cc08b26 	beq	r17,r19,497ec <_dtoa_r+0xffc>
   495c0:	880b883a 	mov	r5,r17
   495c4:	01800284 	movi	r6,10
   495c8:	000f883a 	mov	r7,zero
   495cc:	8009883a 	mov	r4,r16
   495d0:	004bc180 	call	4bc18 <__multadd>
   495d4:	980b883a 	mov	r5,r19
   495d8:	8009883a 	mov	r4,r16
   495dc:	01800284 	movi	r6,10
   495e0:	000f883a 	mov	r7,zero
   495e4:	1023883a 	mov	r17,r2
   495e8:	004bc180 	call	4bc18 <__multadd>
   495ec:	1027883a 	mov	r19,r2
   495f0:	a825883a 	mov	r18,r21
   495f4:	003fcb06 	br	49524 <_dtoa_r+0xd34>
   495f8:	d9c00417 	ldw	r7,16(sp)
   495fc:	00800104 	movi	r2,4
   49600:	3880e426 	beq	r7,r2,49994 <_dtoa_r+0x11a4>
   49604:	00800144 	movi	r2,5
   49608:	38be3c1e 	bne	r7,r2,48efc <_dtoa_r+0x70c>
   4960c:	00c00044 	movi	r3,1
   49610:	d8c00c15 	stw	r3,48(sp)
   49614:	d9c02117 	ldw	r7,132(sp)
   49618:	d8800617 	ldw	r2,24(sp)
   4961c:	388f883a 	add	r7,r7,r2
   49620:	3c800044 	addi	r18,r7,1
   49624:	d9c00e15 	stw	r7,56(sp)
   49628:	dc800915 	stw	r18,36(sp)
   4962c:	04bd3e16 	blt	zero,r18,48b28 <_dtoa_r+0x338>
   49630:	80001115 	stw	zero,68(r16)
   49634:	000b883a 	mov	r5,zero
   49638:	003d4606 	br	48b54 <_dtoa_r+0x364>
   4963c:	d8c00317 	ldw	r3,12(sp)
   49640:	183f0e1e 	bne	r3,zero,4927c <_dtoa_r+0xa8c>
   49644:	00c00434 	movhi	r3,16
   49648:	18ffffc4 	addi	r3,r3,-1
   4964c:	88c6703a 	and	r3,r17,r3
   49650:	183f0a1e 	bne	r3,zero,4927c <_dtoa_r+0xa8c>
   49654:	8c5ffc2c 	andhi	r17,r17,32752
   49658:	883f0826 	beq	r17,zero,4927c <_dtoa_r+0xa8c>
   4965c:	d9000817 	ldw	r4,32(sp)
   49660:	d9c00717 	ldw	r7,28(sp)
   49664:	1023883a 	mov	r17,r2
   49668:	2089883a 	add	r4,r4,r2
   4966c:	388f883a 	add	r7,r7,r2
   49670:	d9000815 	stw	r4,32(sp)
   49674:	d9c00715 	stw	r7,28(sp)
   49678:	003f0106 	br	49280 <_dtoa_r+0xa90>
   4967c:	9005883a 	mov	r2,r18
   49680:	003ed306 	br	491d0 <_dtoa_r+0x9e0>
   49684:	d8800917 	ldw	r2,36(sp)
   49688:	00be3516 	blt	zero,r2,48f60 <_dtoa_r+0x770>
   4968c:	1000b61e 	bne	r2,zero,49968 <_dtoa_r+0x1178>
   49690:	9009883a 	mov	r4,r18
   49694:	980b883a 	mov	r5,r19
   49698:	000d883a 	mov	r6,zero
   4969c:	01d00534 	movhi	r7,16404
   496a0:	00453640 	call	45364 <__muldf3>
   496a4:	d9800317 	ldw	r6,12(sp)
   496a8:	1009883a 	mov	r4,r2
   496ac:	180b883a 	mov	r5,r3
   496b0:	880f883a 	mov	r7,r17
   496b4:	00458bc0 	call	458bc <__gedf2>
   496b8:	0029883a 	mov	r20,zero
   496bc:	002b883a 	mov	r21,zero
   496c0:	10007e16 	blt	r2,zero,498bc <_dtoa_r+0x10cc>
   496c4:	d8802117 	ldw	r2,132(sp)
   496c8:	b82d883a 	mov	r22,r23
   496cc:	0084303a 	nor	r2,zero,r2
   496d0:	d8800615 	stw	r2,24(sp)
   496d4:	8009883a 	mov	r4,r16
   496d8:	a00b883a 	mov	r5,r20
   496dc:	004bbf00 	call	4bbf0 <_Bfree>
   496e0:	a83f4b1e 	bne	r21,zero,49410 <_dtoa_r+0xc20>
   496e4:	003de306 	br	48e74 <_dtoa_r+0x684>
   496e8:	e00b883a 	mov	r5,fp
   496ec:	8009883a 	mov	r4,r16
   496f0:	004c1640 	call	4c164 <__pow5mult>
   496f4:	1039883a 	mov	fp,r2
   496f8:	003ed206 	br	49244 <_dtoa_r+0xa54>
   496fc:	1000021e 	bne	r2,zero,49708 <_dtoa_r+0xf18>
   49700:	18c0004c 	andi	r3,r3,1
   49704:	183f271e 	bne	r3,zero,493a4 <_dtoa_r+0xbb4>
   49708:	01000c04 	movi	r4,48
   4970c:	00000106 	br	49714 <_dtoa_r+0xf24>
   49710:	102d883a 	mov	r22,r2
   49714:	b0bfffc4 	addi	r2,r22,-1
   49718:	10c00007 	ldb	r3,0(r2)
   4971c:	193ffc26 	beq	r3,r4,49710 <_dtoa_r+0xf20>
   49720:	003f3206 	br	493ec <_dtoa_r+0xbfc>
   49724:	d8c00f17 	ldw	r3,60(sp)
   49728:	18015026 	beq	r3,zero,49c6c <_dtoa_r+0x147c>
   4972c:	10810cc4 	addi	r2,r2,1075
   49730:	dcc00a17 	ldw	r19,40(sp)
   49734:	dc800817 	ldw	r18,32(sp)
   49738:	003e9706 	br	49198 <_dtoa_r+0x9a8>
   4973c:	b807883a 	mov	r3,r23
   49740:	182b883a 	mov	r21,r3
   49744:	ddc00717 	ldw	r23,28(sp)
   49748:	00800e0e 	bge	zero,r2,49784 <_dtoa_r+0xf94>
   4974c:	e00b883a 	mov	r5,fp
   49750:	01800044 	movi	r6,1
   49754:	8009883a 	mov	r4,r16
   49758:	d8c01515 	stw	r3,84(sp)
   4975c:	004c2900 	call	4c290 <__lshift>
   49760:	1009883a 	mov	r4,r2
   49764:	a00b883a 	mov	r5,r20
   49768:	1039883a 	mov	fp,r2
   4976c:	004c3ec0 	call	4c3ec <__mcmp>
   49770:	d8c01517 	ldw	r3,84(sp)
   49774:	0081880e 	bge	zero,r2,49d98 <_dtoa_r+0x15a8>
   49778:	00800e44 	movi	r2,57
   4977c:	b0c00c44 	addi	r3,r22,49
   49780:	a8816326 	beq	r21,r2,49d10 <_dtoa_r+0x1520>
   49784:	90c00005 	stb	r3,0(r18)
   49788:	95800044 	addi	r22,r18,1
   4978c:	982b883a 	mov	r21,r19
   49790:	003f1606 	br	493ec <_dtoa_r+0xbfc>
   49794:	300b883a 	mov	r5,r6
   49798:	e009883a 	mov	r4,fp
   4979c:	d9801515 	stw	r6,84(sp)
   497a0:	004c3ec0 	call	4c3ec <__mcmp>
   497a4:	d9801517 	ldw	r6,84(sp)
   497a8:	8009883a 	mov	r4,r16
   497ac:	d8801515 	stw	r2,84(sp)
   497b0:	300b883a 	mov	r5,r6
   497b4:	004bbf00 	call	4bbf0 <_Bfree>
   497b8:	d8801517 	ldw	r2,84(sp)
   497bc:	103f6d1e 	bne	r2,zero,49574 <_dtoa_r+0xd84>
   497c0:	d9c00417 	ldw	r7,16(sp)
   497c4:	383f6b1e 	bne	r7,zero,49574 <_dtoa_r+0xd84>
   497c8:	d8c00317 	ldw	r3,12(sp)
   497cc:	183f691e 	bne	r3,zero,49574 <_dtoa_r+0xd84>
   497d0:	b807883a 	mov	r3,r23
   497d4:	00800e44 	movi	r2,57
   497d8:	ddc00717 	ldw	r23,28(sp)
   497dc:	18814c26 	beq	r3,r2,49d10 <_dtoa_r+0x1520>
   497e0:	057fe80e 	bge	zero,r21,49784 <_dtoa_r+0xf94>
   497e4:	b0c00c44 	addi	r3,r22,49
   497e8:	003fe606 	br	49784 <_dtoa_r+0xf94>
   497ec:	880b883a 	mov	r5,r17
   497f0:	8009883a 	mov	r4,r16
   497f4:	01800284 	movi	r6,10
   497f8:	000f883a 	mov	r7,zero
   497fc:	004bc180 	call	4bc18 <__multadd>
   49800:	1023883a 	mov	r17,r2
   49804:	1027883a 	mov	r19,r2
   49808:	a825883a 	mov	r18,r21
   4980c:	003f4506 	br	49524 <_dtoa_r+0xd34>
   49810:	e009883a 	mov	r4,fp
   49814:	a00b883a 	mov	r5,r20
   49818:	004c3ec0 	call	4c3ec <__mcmp>
   4981c:	103ebc0e 	bge	r2,zero,49310 <_dtoa_r+0xb20>
   49820:	e00b883a 	mov	r5,fp
   49824:	8009883a 	mov	r4,r16
   49828:	01800284 	movi	r6,10
   4982c:	000f883a 	mov	r7,zero
   49830:	004bc180 	call	4bc18 <__multadd>
   49834:	1039883a 	mov	fp,r2
   49838:	d8800617 	ldw	r2,24(sp)
   4983c:	d8c00c17 	ldw	r3,48(sp)
   49840:	10bfffc4 	addi	r2,r2,-1
   49844:	d8800615 	stw	r2,24(sp)
   49848:	1801571e 	bne	r3,zero,49da8 <_dtoa_r+0x15b8>
   4984c:	d9c00e17 	ldw	r7,56(sp)
   49850:	d9c00915 	stw	r7,36(sp)
   49854:	003eae06 	br	49310 <_dtoa_r+0xb20>
   49858:	a0800417 	ldw	r2,16(r20)
   4985c:	10800104 	addi	r2,r2,4
   49860:	1085883a 	add	r2,r2,r2
   49864:	1085883a 	add	r2,r2,r2
   49868:	a085883a 	add	r2,r20,r2
   4986c:	11000017 	ldw	r4,0(r2)
   49870:	004be300 	call	4be30 <__hi0bits>
   49874:	00c00804 	movi	r3,32
   49878:	1885c83a 	sub	r2,r3,r2
   4987c:	003e8306 	br	4928c <_dtoa_r+0xa9c>
   49880:	d9c00417 	ldw	r7,16(sp)
   49884:	00800084 	movi	r2,2
   49888:	11fea30e 	bge	r2,r7,49318 <_dtoa_r+0xb28>
   4988c:	d8800917 	ldw	r2,36(sp)
   49890:	103f8c1e 	bne	r2,zero,496c4 <_dtoa_r+0xed4>
   49894:	a00b883a 	mov	r5,r20
   49898:	8009883a 	mov	r4,r16
   4989c:	01800144 	movi	r6,5
   498a0:	000f883a 	mov	r7,zero
   498a4:	004bc180 	call	4bc18 <__multadd>
   498a8:	e009883a 	mov	r4,fp
   498ac:	100b883a 	mov	r5,r2
   498b0:	1029883a 	mov	r20,r2
   498b4:	004c3ec0 	call	4c3ec <__mcmp>
   498b8:	00bf820e 	bge	zero,r2,496c4 <_dtoa_r+0xed4>
   498bc:	00800c44 	movi	r2,49
   498c0:	b8800005 	stb	r2,0(r23)
   498c4:	d8800617 	ldw	r2,24(sp)
   498c8:	bd800044 	addi	r22,r23,1
   498cc:	10800044 	addi	r2,r2,1
   498d0:	d8800615 	stw	r2,24(sp)
   498d4:	003f7f06 	br	496d4 <_dtoa_r+0xee4>
   498d8:	dc000417 	ldw	r16,16(sp)
   498dc:	003d6506 	br	48e74 <_dtoa_r+0x684>
   498e0:	9009883a 	mov	r4,r18
   498e4:	00459200 	call	45920 <__floatsidf>
   498e8:	1009883a 	mov	r4,r2
   498ec:	180b883a 	mov	r5,r3
   498f0:	980d883a 	mov	r6,r19
   498f4:	a00f883a 	mov	r7,r20
   498f8:	00453640 	call	45364 <__muldf3>
   498fc:	1009883a 	mov	r4,r2
   49900:	180b883a 	mov	r5,r3
   49904:	000d883a 	mov	r6,zero
   49908:	01d00734 	movhi	r7,16412
   4990c:	00452b00 	call	452b0 <__adddf3>
   49910:	057f3034 	movhi	r21,64704
   49914:	1025883a 	mov	r18,r2
   49918:	1d6b883a 	add	r21,r3,r21
   4991c:	9809883a 	mov	r4,r19
   49920:	a00b883a 	mov	r5,r20
   49924:	000d883a 	mov	r6,zero
   49928:	01d00534 	movhi	r7,16404
   4992c:	00453040 	call	45304 <__subdf3>
   49930:	1009883a 	mov	r4,r2
   49934:	180b883a 	mov	r5,r3
   49938:	900d883a 	mov	r6,r18
   4993c:	a80f883a 	mov	r7,r21
   49940:	1027883a 	mov	r19,r2
   49944:	1829883a 	mov	r20,r3
   49948:	00458580 	call	45858 <__gtdf2>
   4994c:	00806616 	blt	zero,r2,49ae8 <_dtoa_r+0x12f8>
   49950:	a9e0003c 	xorhi	r7,r21,32768
   49954:	9809883a 	mov	r4,r19
   49958:	a00b883a 	mov	r5,r20
   4995c:	900d883a 	mov	r6,r18
   49960:	004e3c80 	call	4e3c8 <__ltdf2>
   49964:	103d710e 	bge	r2,zero,48f2c <_dtoa_r+0x73c>
   49968:	0029883a 	mov	r20,zero
   4996c:	002b883a 	mov	r21,zero
   49970:	003f5406 	br	496c4 <_dtoa_r+0xed4>
   49974:	d9800a17 	ldw	r6,40(sp)
   49978:	e00b883a 	mov	r5,fp
   4997c:	8009883a 	mov	r4,r16
   49980:	004c1640 	call	4c164 <__pow5mult>
   49984:	1039883a 	mov	fp,r2
   49988:	003e2e06 	br	49244 <_dtoa_r+0xa54>
   4998c:	d8000c15 	stw	zero,48(sp)
   49990:	003f2006 	br	49614 <_dtoa_r+0xe24>
   49994:	00800044 	movi	r2,1
   49998:	d8800c15 	stw	r2,48(sp)
   4999c:	003c5d06 	br	48b14 <_dtoa_r+0x324>
   499a0:	d8c00a17 	ldw	r3,40(sp)
   499a4:	d9000b17 	ldw	r4,44(sp)
   499a8:	dcc00a15 	stw	r19,40(sp)
   499ac:	98c5c83a 	sub	r2,r19,r3
   499b0:	2089883a 	add	r4,r4,r2
   499b4:	d9000b15 	stw	r4,44(sp)
   499b8:	0027883a 	mov	r19,zero
   499bc:	003df206 	br	49188 <_dtoa_r+0x998>
   499c0:	d9000317 	ldw	r4,12(sp)
   499c4:	8829883a 	mov	r20,r17
   499c8:	04800084 	movi	r18,2
   499cc:	d9001015 	stw	r4,64(sp)
   499d0:	003c8106 	br	48bd8 <_dtoa_r+0x3e8>
   499d4:	04800044 	movi	r18,1
   499d8:	dc800e15 	stw	r18,56(sp)
   499dc:	dc800915 	stw	r18,36(sp)
   499e0:	dc802115 	stw	r18,132(sp)
   499e4:	003f1206 	br	49630 <_dtoa_r+0xe40>
   499e8:	d8800617 	ldw	r2,24(sp)
   499ec:	00abc83a 	sub	r21,zero,r2
   499f0:	a800a426 	beq	r21,zero,49c84 <_dtoa_r+0x1494>
   499f4:	a88003cc 	andi	r2,r21,15
   499f8:	100490fa 	slli	r2,r2,3
   499fc:	00c00174 	movhi	r3,5
   49a00:	18c6c904 	addi	r3,r3,6948
   49a04:	d9000317 	ldw	r4,12(sp)
   49a08:	1885883a 	add	r2,r3,r2
   49a0c:	11800017 	ldw	r6,0(r2)
   49a10:	11c00117 	ldw	r7,4(r2)
   49a14:	a82bd13a 	srai	r21,r21,4
   49a18:	880b883a 	mov	r5,r17
   49a1c:	00453640 	call	45364 <__muldf3>
   49a20:	1027883a 	mov	r19,r2
   49a24:	1829883a 	mov	r20,r3
   49a28:	a800e826 	beq	r21,zero,49dcc <_dtoa_r+0x15dc>
   49a2c:	05800174 	movhi	r22,5
   49a30:	b586bf04 	addi	r22,r22,6908
   49a34:	04800084 	movi	r18,2
   49a38:	a980004c 	andi	r6,r21,1
   49a3c:	1009883a 	mov	r4,r2
   49a40:	a82bd07a 	srai	r21,r21,1
   49a44:	180b883a 	mov	r5,r3
   49a48:	30000426 	beq	r6,zero,49a5c <_dtoa_r+0x126c>
   49a4c:	b1800017 	ldw	r6,0(r22)
   49a50:	b1c00117 	ldw	r7,4(r22)
   49a54:	94800044 	addi	r18,r18,1
   49a58:	00453640 	call	45364 <__muldf3>
   49a5c:	b5800204 	addi	r22,r22,8
   49a60:	a83ff51e 	bne	r21,zero,49a38 <_dtoa_r+0x1248>
   49a64:	1027883a 	mov	r19,r2
   49a68:	1829883a 	mov	r20,r3
   49a6c:	003c7306 	br	48c3c <_dtoa_r+0x44c>
   49a70:	21000044 	addi	r4,r4,1
   49a74:	11000005 	stb	r4,0(r2)
   49a78:	003e5c06 	br	493ec <_dtoa_r+0xbfc>
   49a7c:	a9400117 	ldw	r5,4(r21)
   49a80:	8009883a 	mov	r4,r16
   49a84:	004bb480 	call	4bb48 <_Balloc>
   49a88:	a9800417 	ldw	r6,16(r21)
   49a8c:	11000304 	addi	r4,r2,12
   49a90:	a9400304 	addi	r5,r21,12
   49a94:	31800084 	addi	r6,r6,2
   49a98:	318d883a 	add	r6,r6,r6
   49a9c:	318d883a 	add	r6,r6,r6
   49aa0:	1023883a 	mov	r17,r2
   49aa4:	004b84c0 	call	4b84c <memcpy>
   49aa8:	8009883a 	mov	r4,r16
   49aac:	880b883a 	mov	r5,r17
   49ab0:	01800044 	movi	r6,1
   49ab4:	004c2900 	call	4c290 <__lshift>
   49ab8:	1027883a 	mov	r19,r2
   49abc:	003e8f06 	br	494fc <_dtoa_r+0xd0c>
   49ac0:	b807883a 	mov	r3,r23
   49ac4:	00800e44 	movi	r2,57
   49ac8:	ddc00717 	ldw	r23,28(sp)
   49acc:	18809026 	beq	r3,r2,49d10 <_dtoa_r+0x1520>
   49ad0:	18c00044 	addi	r3,r3,1
   49ad4:	003f2b06 	br	49784 <_dtoa_r+0xf94>
   49ad8:	b807883a 	mov	r3,r23
   49adc:	982b883a 	mov	r21,r19
   49ae0:	ddc00717 	ldw	r23,28(sp)
   49ae4:	003e2406 	br	49378 <_dtoa_r+0xb88>
   49ae8:	0029883a 	mov	r20,zero
   49aec:	002b883a 	mov	r21,zero
   49af0:	003f7206 	br	498bc <_dtoa_r+0x10cc>
   49af4:	593fffc4 	addi	r4,r11,-1
   49af8:	200490fa 	slli	r2,r4,3
   49afc:	00c00174 	movhi	r3,5
   49b00:	18c6c904 	addi	r3,r3,6948
   49b04:	d9001015 	stw	r4,64(sp)
   49b08:	1885883a 	add	r2,r3,r2
   49b0c:	11000017 	ldw	r4,0(r2)
   49b10:	11400117 	ldw	r5,4(r2)
   49b14:	900d883a 	mov	r6,r18
   49b18:	a80f883a 	mov	r7,r21
   49b1c:	dac01615 	stw	r11,88(sp)
   49b20:	00453640 	call	45364 <__muldf3>
   49b24:	a00b883a 	mov	r5,r20
   49b28:	9809883a 	mov	r4,r19
   49b2c:	d8c01215 	stw	r3,72(sp)
   49b30:	d8801115 	stw	r2,68(sp)
   49b34:	00459f40 	call	459f4 <__fixdfsi>
   49b38:	1009883a 	mov	r4,r2
   49b3c:	1025883a 	mov	r18,r2
   49b40:	00459200 	call	45920 <__floatsidf>
   49b44:	9809883a 	mov	r4,r19
   49b48:	a00b883a 	mov	r5,r20
   49b4c:	100d883a 	mov	r6,r2
   49b50:	180f883a 	mov	r7,r3
   49b54:	94800c04 	addi	r18,r18,48
   49b58:	00453040 	call	45304 <__subdf3>
   49b5c:	bc800005 	stb	r18,0(r23)
   49b60:	dac01617 	ldw	r11,88(sp)
   49b64:	102b883a 	mov	r21,r2
   49b68:	00800044 	movi	r2,1
   49b6c:	bd800044 	addi	r22,r23,1
   49b70:	1815883a 	mov	r10,r3
   49b74:	58802226 	beq	r11,r2,49c00 <_dtoa_r+0x1410>
   49b78:	bad7883a 	add	r11,r23,r11
   49b7c:	dc001415 	stw	r16,80(sp)
   49b80:	a805883a 	mov	r2,r21
   49b84:	b027883a 	mov	r19,r22
   49b88:	5821883a 	mov	r16,r11
   49b8c:	882b883a 	mov	r21,r17
   49b90:	000d883a 	mov	r6,zero
   49b94:	01d00934 	movhi	r7,16420
   49b98:	1009883a 	mov	r4,r2
   49b9c:	180b883a 	mov	r5,r3
   49ba0:	00453640 	call	45364 <__muldf3>
   49ba4:	180b883a 	mov	r5,r3
   49ba8:	1009883a 	mov	r4,r2
   49bac:	1829883a 	mov	r20,r3
   49bb0:	1023883a 	mov	r17,r2
   49bb4:	00459f40 	call	459f4 <__fixdfsi>
   49bb8:	1009883a 	mov	r4,r2
   49bbc:	1025883a 	mov	r18,r2
   49bc0:	00459200 	call	45920 <__floatsidf>
   49bc4:	8809883a 	mov	r4,r17
   49bc8:	a00b883a 	mov	r5,r20
   49bcc:	100d883a 	mov	r6,r2
   49bd0:	180f883a 	mov	r7,r3
   49bd4:	94800c04 	addi	r18,r18,48
   49bd8:	00453040 	call	45304 <__subdf3>
   49bdc:	9cc00044 	addi	r19,r19,1
   49be0:	9cbfffc5 	stb	r18,-1(r19)
   49be4:	9c3fea1e 	bne	r19,r16,49b90 <_dtoa_r+0x13a0>
   49be8:	1815883a 	mov	r10,r3
   49bec:	d8c01017 	ldw	r3,64(sp)
   49bf0:	dc001417 	ldw	r16,80(sp)
   49bf4:	a823883a 	mov	r17,r21
   49bf8:	b0ed883a 	add	r22,r22,r3
   49bfc:	102b883a 	mov	r21,r2
   49c00:	d9001117 	ldw	r4,68(sp)
   49c04:	d9401217 	ldw	r5,72(sp)
   49c08:	000d883a 	mov	r6,zero
   49c0c:	01cff834 	movhi	r7,16352
   49c10:	da801515 	stw	r10,84(sp)
   49c14:	00452b00 	call	452b0 <__adddf3>
   49c18:	da801517 	ldw	r10,84(sp)
   49c1c:	1009883a 	mov	r4,r2
   49c20:	180b883a 	mov	r5,r3
   49c24:	500f883a 	mov	r7,r10
   49c28:	a80d883a 	mov	r6,r21
   49c2c:	004e3c80 	call	4e3c8 <__ltdf2>
   49c30:	da801517 	ldw	r10,84(sp)
   49c34:	10003b0e 	bge	r2,zero,49d24 <_dtoa_r+0x1534>
   49c38:	d9c01317 	ldw	r7,76(sp)
   49c3c:	b53fffc3 	ldbu	r20,-1(r22)
   49c40:	d9c00615 	stw	r7,24(sp)
   49c44:	003d3106 	br	4910c <_dtoa_r+0x91c>
   49c48:	d8800817 	ldw	r2,32(sp)
   49c4c:	11e5c83a 	sub	r18,r2,r7
   49c50:	0005883a 	mov	r2,zero
   49c54:	003d5006 	br	49198 <_dtoa_r+0x9a8>
   49c58:	05800044 	movi	r22,1
   49c5c:	003dc406 	br	49370 <_dtoa_r+0xb80>
   49c60:	a5000044 	addi	r20,r20,1
   49c64:	15000005 	stb	r20,0(r2)
   49c68:	003c8206 	br	48e74 <_dtoa_r+0x684>
   49c6c:	d8800217 	ldw	r2,8(sp)
   49c70:	00c00d84 	movi	r3,54
   49c74:	dcc00a17 	ldw	r19,40(sp)
   49c78:	1885c83a 	sub	r2,r3,r2
   49c7c:	dc800817 	ldw	r18,32(sp)
   49c80:	003d4506 	br	49198 <_dtoa_r+0x9a8>
   49c84:	dcc00317 	ldw	r19,12(sp)
   49c88:	8829883a 	mov	r20,r17
   49c8c:	04800084 	movi	r18,2
   49c90:	003bea06 	br	48c3c <_dtoa_r+0x44c>
   49c94:	d9000917 	ldw	r4,36(sp)
   49c98:	203f1126 	beq	r4,zero,498e0 <_dtoa_r+0x10f0>
   49c9c:	d9c00e17 	ldw	r7,56(sp)
   49ca0:	01fca20e 	bge	zero,r7,48f2c <_dtoa_r+0x73c>
   49ca4:	a00b883a 	mov	r5,r20
   49ca8:	9809883a 	mov	r4,r19
   49cac:	000d883a 	mov	r6,zero
   49cb0:	01d00934 	movhi	r7,16420
   49cb4:	00453640 	call	45364 <__muldf3>
   49cb8:	91000044 	addi	r4,r18,1
   49cbc:	1027883a 	mov	r19,r2
   49cc0:	1829883a 	mov	r20,r3
   49cc4:	00459200 	call	45920 <__floatsidf>
   49cc8:	9809883a 	mov	r4,r19
   49ccc:	a00b883a 	mov	r5,r20
   49cd0:	100d883a 	mov	r6,r2
   49cd4:	180f883a 	mov	r7,r3
   49cd8:	00453640 	call	45364 <__muldf3>
   49cdc:	1009883a 	mov	r4,r2
   49ce0:	180b883a 	mov	r5,r3
   49ce4:	000d883a 	mov	r6,zero
   49ce8:	01d00734 	movhi	r7,16412
   49cec:	00452b00 	call	452b0 <__adddf3>
   49cf0:	1025883a 	mov	r18,r2
   49cf4:	d8800617 	ldw	r2,24(sp)
   49cf8:	057f3034 	movhi	r21,64704
   49cfc:	1d6b883a 	add	r21,r3,r21
   49d00:	10bfffc4 	addi	r2,r2,-1
   49d04:	d8801315 	stw	r2,76(sp)
   49d08:	dac00e17 	ldw	r11,56(sp)
   49d0c:	003be706 	br	48cac <_dtoa_r+0x4bc>
   49d10:	01000e44 	movi	r4,57
   49d14:	91000005 	stb	r4,0(r18)
   49d18:	95800044 	addi	r22,r18,1
   49d1c:	982b883a 	mov	r21,r19
   49d20:	003da106 	br	493a8 <_dtoa_r+0xbb8>
   49d24:	d9801117 	ldw	r6,68(sp)
   49d28:	d9c01217 	ldw	r7,72(sp)
   49d2c:	0009883a 	mov	r4,zero
   49d30:	014ff834 	movhi	r5,16352
   49d34:	da801515 	stw	r10,84(sp)
   49d38:	00453040 	call	45304 <__subdf3>
   49d3c:	da801517 	ldw	r10,84(sp)
   49d40:	1009883a 	mov	r4,r2
   49d44:	180b883a 	mov	r5,r3
   49d48:	a80d883a 	mov	r6,r21
   49d4c:	500f883a 	mov	r7,r10
   49d50:	00458580 	call	45858 <__gtdf2>
   49d54:	00bc750e 	bge	zero,r2,48f2c <_dtoa_r+0x73c>
   49d58:	01000c04 	movi	r4,48
   49d5c:	00000106 	br	49d64 <_dtoa_r+0x1574>
   49d60:	102d883a 	mov	r22,r2
   49d64:	b0bfffc4 	addi	r2,r22,-1
   49d68:	10c00007 	ldb	r3,0(r2)
   49d6c:	193ffc26 	beq	r3,r4,49d60 <_dtoa_r+0x1570>
   49d70:	d8801317 	ldw	r2,76(sp)
   49d74:	d8800615 	stw	r2,24(sp)
   49d78:	003c3e06 	br	48e74 <_dtoa_r+0x684>
   49d7c:	d9001317 	ldw	r4,76(sp)
   49d80:	df001117 	ldw	fp,68(sp)
   49d84:	d9000615 	stw	r4,24(sp)
   49d88:	003ce006 	br	4910c <_dtoa_r+0x91c>
   49d8c:	df001117 	ldw	fp,68(sp)
   49d90:	dc401217 	ldw	r17,72(sp)
   49d94:	003c6506 	br	48f2c <_dtoa_r+0x73c>
   49d98:	103e7a1e 	bne	r2,zero,49784 <_dtoa_r+0xf94>
   49d9c:	1880004c 	andi	r2,r3,1
   49da0:	103e7826 	beq	r2,zero,49784 <_dtoa_r+0xf94>
   49da4:	003e7406 	br	49778 <_dtoa_r+0xf88>
   49da8:	8009883a 	mov	r4,r16
   49dac:	a80b883a 	mov	r5,r21
   49db0:	01800284 	movi	r6,10
   49db4:	000f883a 	mov	r7,zero
   49db8:	004bc180 	call	4bc18 <__multadd>
   49dbc:	d9000e17 	ldw	r4,56(sp)
   49dc0:	102b883a 	mov	r21,r2
   49dc4:	d9000915 	stw	r4,36(sp)
   49dc8:	003d5106 	br	49310 <_dtoa_r+0xb20>
   49dcc:	04800084 	movi	r18,2
   49dd0:	003b9a06 	br	48c3c <_dtoa_r+0x44c>
   49dd4:	d8c01317 	ldw	r3,76(sp)
   49dd8:	d8c00615 	stw	r3,24(sp)
   49ddc:	003ccb06 	br	4910c <_dtoa_r+0x91c>
   49de0:	d8c01317 	ldw	r3,76(sp)
   49de4:	d8c00615 	stw	r3,24(sp)
   49de8:	003c2206 	br	48e74 <_dtoa_r+0x684>
   49dec:	20fd3826 	beq	r4,r3,492d0 <_dtoa_r+0xae0>
   49df0:	00c00f04 	movi	r3,60
   49df4:	1885c83a 	sub	r2,r3,r2
   49df8:	003da906 	br	494a0 <_dtoa_r+0xcb0>
   49dfc:	000b883a 	mov	r5,zero
   49e00:	003b5406 	br	48b54 <_dtoa_r+0x364>
   49e04:	04c00044 	movi	r19,1
   49e08:	003b3b06 	br	48af8 <_dtoa_r+0x308>

00049e0c <_fflush_r>:
   49e0c:	defffb04 	addi	sp,sp,-20
   49e10:	dcc00315 	stw	r19,12(sp)
   49e14:	dc400115 	stw	r17,4(sp)
   49e18:	dfc00415 	stw	ra,16(sp)
   49e1c:	dc800215 	stw	r18,8(sp)
   49e20:	dc000015 	stw	r16,0(sp)
   49e24:	2027883a 	mov	r19,r4
   49e28:	2823883a 	mov	r17,r5
   49e2c:	20000226 	beq	r4,zero,49e38 <_fflush_r+0x2c>
   49e30:	20800e17 	ldw	r2,56(r4)
   49e34:	10005726 	beq	r2,zero,49f94 <_fflush_r+0x188>
   49e38:	8880030b 	ldhu	r2,12(r17)
   49e3c:	10c0020c 	andi	r3,r2,8
   49e40:	18ffffcc 	andi	r3,r3,65535
   49e44:	18e0001c 	xori	r3,r3,32768
   49e48:	18e00004 	addi	r3,r3,-32768
   49e4c:	1800311e 	bne	r3,zero,49f14 <_fflush_r+0x108>
   49e50:	89000117 	ldw	r4,4(r17)
   49e54:	10c20014 	ori	r3,r2,2048
   49e58:	88c0030d 	sth	r3,12(r17)
   49e5c:	180b883a 	mov	r5,r3
   49e60:	0100520e 	bge	zero,r4,49fac <_fflush_r+0x1a0>
   49e64:	88c00a17 	ldw	r3,40(r17)
   49e68:	18002226 	beq	r3,zero,49ef4 <_fflush_r+0xe8>
   49e6c:	1084000c 	andi	r2,r2,4096
   49e70:	10bfffcc 	andi	r2,r2,65535
   49e74:	10a0001c 	xori	r2,r2,32768
   49e78:	10a00004 	addi	r2,r2,-32768
   49e7c:	10004e26 	beq	r2,zero,49fb8 <_fflush_r+0x1ac>
   49e80:	8c001417 	ldw	r16,80(r17)
   49e84:	2940010c 	andi	r5,r5,4
   49e88:	297fffcc 	andi	r5,r5,65535
   49e8c:	2960001c 	xori	r5,r5,32768
   49e90:	29600004 	addi	r5,r5,-32768
   49e94:	28000626 	beq	r5,zero,49eb0 <_fflush_r+0xa4>
   49e98:	89000117 	ldw	r4,4(r17)
   49e9c:	88800c17 	ldw	r2,48(r17)
   49ea0:	8121c83a 	sub	r16,r16,r4
   49ea4:	10000226 	beq	r2,zero,49eb0 <_fflush_r+0xa4>
   49ea8:	88800f17 	ldw	r2,60(r17)
   49eac:	80a1c83a 	sub	r16,r16,r2
   49eb0:	89400717 	ldw	r5,28(r17)
   49eb4:	9809883a 	mov	r4,r19
   49eb8:	800d883a 	mov	r6,r16
   49ebc:	000f883a 	mov	r7,zero
   49ec0:	183ee83a 	callr	r3
   49ec4:	8080281e 	bne	r16,r2,49f68 <_fflush_r+0x15c>
   49ec8:	8880030b 	ldhu	r2,12(r17)
   49ecc:	88c00417 	ldw	r3,16(r17)
   49ed0:	88000115 	stw	zero,4(r17)
   49ed4:	113dffcc 	andi	r4,r2,63487
   49ed8:	1084000c 	andi	r2,r2,4096
   49edc:	10bfffcc 	andi	r2,r2,65535
   49ee0:	10a0001c 	xori	r2,r2,32768
   49ee4:	8900030d 	sth	r4,12(r17)
   49ee8:	88c00015 	stw	r3,0(r17)
   49eec:	10a00004 	addi	r2,r2,-32768
   49ef0:	10002c1e 	bne	r2,zero,49fa4 <_fflush_r+0x198>
   49ef4:	0005883a 	mov	r2,zero
   49ef8:	dfc00417 	ldw	ra,16(sp)
   49efc:	dcc00317 	ldw	r19,12(sp)
   49f00:	dc800217 	ldw	r18,8(sp)
   49f04:	dc400117 	ldw	r17,4(sp)
   49f08:	dc000017 	ldw	r16,0(sp)
   49f0c:	dec00504 	addi	sp,sp,20
   49f10:	f800283a 	ret
   49f14:	8c800417 	ldw	r18,16(r17)
   49f18:	903ff626 	beq	r18,zero,49ef4 <_fflush_r+0xe8>
   49f1c:	8c000017 	ldw	r16,0(r17)
   49f20:	108000cc 	andi	r2,r2,3
   49f24:	8c800015 	stw	r18,0(r17)
   49f28:	84a1c83a 	sub	r16,r16,r18
   49f2c:	10001b1e 	bne	r2,zero,49f9c <_fflush_r+0x190>
   49f30:	88800517 	ldw	r2,20(r17)
   49f34:	88800215 	stw	r2,8(r17)
   49f38:	04000316 	blt	zero,r16,49f48 <_fflush_r+0x13c>
   49f3c:	003fed06 	br	49ef4 <_fflush_r+0xe8>
   49f40:	90a5883a 	add	r18,r18,r2
   49f44:	043feb0e 	bge	zero,r16,49ef4 <_fflush_r+0xe8>
   49f48:	88800917 	ldw	r2,36(r17)
   49f4c:	89400717 	ldw	r5,28(r17)
   49f50:	800f883a 	mov	r7,r16
   49f54:	900d883a 	mov	r6,r18
   49f58:	9809883a 	mov	r4,r19
   49f5c:	103ee83a 	callr	r2
   49f60:	80a1c83a 	sub	r16,r16,r2
   49f64:	00bff616 	blt	zero,r2,49f40 <_fflush_r+0x134>
   49f68:	88c0030b 	ldhu	r3,12(r17)
   49f6c:	00bfffc4 	movi	r2,-1
   49f70:	18c01014 	ori	r3,r3,64
   49f74:	88c0030d 	sth	r3,12(r17)
   49f78:	dfc00417 	ldw	ra,16(sp)
   49f7c:	dcc00317 	ldw	r19,12(sp)
   49f80:	dc800217 	ldw	r18,8(sp)
   49f84:	dc400117 	ldw	r17,4(sp)
   49f88:	dc000017 	ldw	r16,0(sp)
   49f8c:	dec00504 	addi	sp,sp,20
   49f90:	f800283a 	ret
   49f94:	004a0b40 	call	4a0b4 <__sinit>
   49f98:	003fa706 	br	49e38 <_fflush_r+0x2c>
   49f9c:	0005883a 	mov	r2,zero
   49fa0:	003fe406 	br	49f34 <_fflush_r+0x128>
   49fa4:	8c001415 	stw	r16,80(r17)
   49fa8:	003fd206 	br	49ef4 <_fflush_r+0xe8>
   49fac:	88c00f17 	ldw	r3,60(r17)
   49fb0:	00ffac16 	blt	zero,r3,49e64 <_fflush_r+0x58>
   49fb4:	003fcf06 	br	49ef4 <_fflush_r+0xe8>
   49fb8:	89400717 	ldw	r5,28(r17)
   49fbc:	9809883a 	mov	r4,r19
   49fc0:	000d883a 	mov	r6,zero
   49fc4:	01c00044 	movi	r7,1
   49fc8:	183ee83a 	callr	r3
   49fcc:	1021883a 	mov	r16,r2
   49fd0:	00bfffc4 	movi	r2,-1
   49fd4:	80800326 	beq	r16,r2,49fe4 <_fflush_r+0x1d8>
   49fd8:	8940030b 	ldhu	r5,12(r17)
   49fdc:	88c00a17 	ldw	r3,40(r17)
   49fe0:	003fa806 	br	49e84 <_fflush_r+0x78>
   49fe4:	98c00017 	ldw	r3,0(r19)
   49fe8:	00800744 	movi	r2,29
   49fec:	18bfde1e 	bne	r3,r2,49f68 <_fflush_r+0x15c>
   49ff0:	003fc006 	br	49ef4 <_fflush_r+0xe8>

00049ff4 <fflush>:
   49ff4:	200b883a 	mov	r5,r4
   49ff8:	20000426 	beq	r4,zero,4a00c <fflush+0x18>
   49ffc:	00800174 	movhi	r2,5
   4a000:	108df004 	addi	r2,r2,14272
   4a004:	11000017 	ldw	r4,0(r2)
   4a008:	0049e0c1 	jmpi	49e0c <_fflush_r>
   4a00c:	00800174 	movhi	r2,5
   4a010:	108def04 	addi	r2,r2,14268
   4a014:	11000017 	ldw	r4,0(r2)
   4a018:	01400174 	movhi	r5,5
   4a01c:	29678304 	addi	r5,r5,-25076
   4a020:	004ac941 	jmpi	4ac94 <_fwalk_reent>

0004a024 <__fp_lock>:
   4a024:	0005883a 	mov	r2,zero
   4a028:	f800283a 	ret

0004a02c <__fp_unlock>:
   4a02c:	0005883a 	mov	r2,zero
   4a030:	f800283a 	ret

0004a034 <_cleanup_r>:
   4a034:	01400174 	movhi	r5,5
   4a038:	29759804 	addi	r5,r5,-10656
   4a03c:	004abec1 	jmpi	4abec <_fwalk>

0004a040 <__sfmoreglue>:
   4a040:	defffc04 	addi	sp,sp,-16
   4a044:	dc400115 	stw	r17,4(sp)
   4a048:	2c401724 	muli	r17,r5,92
   4a04c:	dc800215 	stw	r18,8(sp)
   4a050:	2825883a 	mov	r18,r5
   4a054:	89400304 	addi	r5,r17,12
   4a058:	dc000015 	stw	r16,0(sp)
   4a05c:	dfc00315 	stw	ra,12(sp)
   4a060:	004afd00 	call	4afd0 <_malloc_r>
   4a064:	1021883a 	mov	r16,r2
   4a068:	10000726 	beq	r2,zero,4a088 <__sfmoreglue+0x48>
   4a06c:	11000304 	addi	r4,r2,12
   4a070:	10000015 	stw	zero,0(r2)
   4a074:	14800115 	stw	r18,4(r2)
   4a078:	11000215 	stw	r4,8(r2)
   4a07c:	000b883a 	mov	r5,zero
   4a080:	880d883a 	mov	r6,r17
   4a084:	004ba6c0 	call	4ba6c <memset>
   4a088:	8005883a 	mov	r2,r16
   4a08c:	dfc00317 	ldw	ra,12(sp)
   4a090:	dc800217 	ldw	r18,8(sp)
   4a094:	dc400117 	ldw	r17,4(sp)
   4a098:	dc000017 	ldw	r16,0(sp)
   4a09c:	dec00404 	addi	sp,sp,16
   4a0a0:	f800283a 	ret

0004a0a4 <_cleanup>:
   4a0a4:	00800174 	movhi	r2,5
   4a0a8:	108def04 	addi	r2,r2,14268
   4a0ac:	11000017 	ldw	r4,0(r2)
   4a0b0:	004a0341 	jmpi	4a034 <_cleanup_r>

0004a0b4 <__sinit>:
   4a0b4:	20800e17 	ldw	r2,56(r4)
   4a0b8:	1000401e 	bne	r2,zero,4a1bc <__sinit+0x108>
   4a0bc:	21400117 	ldw	r5,4(r4)
   4a0c0:	01800174 	movhi	r6,5
   4a0c4:	31a80d04 	addi	r6,r6,-24524
   4a0c8:	20c00217 	ldw	r3,8(r4)
   4a0cc:	21800f15 	stw	r6,60(r4)
   4a0d0:	2080bb04 	addi	r2,r4,748
   4a0d4:	02400044 	movi	r9,1
   4a0d8:	018000c4 	movi	r6,3
   4a0dc:	2180b915 	stw	r6,740(r4)
   4a0e0:	2080ba15 	stw	r2,744(r4)
   4a0e4:	22400e15 	stw	r9,56(r4)
   4a0e8:	20800317 	ldw	r2,12(r4)
   4a0ec:	2000b815 	stw	zero,736(r4)
   4a0f0:	02000174 	movhi	r8,5
   4a0f4:	42346d04 	addi	r8,r8,-11852
   4a0f8:	01c00174 	movhi	r7,5
   4a0fc:	39f48204 	addi	r7,r7,-11768
   4a100:	01800174 	movhi	r6,5
   4a104:	31b4a404 	addi	r6,r6,-11632
   4a108:	01000174 	movhi	r4,5
   4a10c:	2134bb04 	addi	r4,r4,-11540
   4a110:	02800104 	movi	r10,4
   4a114:	28000015 	stw	zero,0(r5)
   4a118:	28000115 	stw	zero,4(r5)
   4a11c:	28000215 	stw	zero,8(r5)
   4a120:	2a80030d 	sth	r10,12(r5)
   4a124:	2800038d 	sth	zero,14(r5)
   4a128:	28000415 	stw	zero,16(r5)
   4a12c:	28000515 	stw	zero,20(r5)
   4a130:	28000615 	stw	zero,24(r5)
   4a134:	29400715 	stw	r5,28(r5)
   4a138:	2a000815 	stw	r8,32(r5)
   4a13c:	29c00915 	stw	r7,36(r5)
   4a140:	29800a15 	stw	r6,40(r5)
   4a144:	29000b15 	stw	r4,44(r5)
   4a148:	01400284 	movi	r5,10
   4a14c:	18000015 	stw	zero,0(r3)
   4a150:	18000115 	stw	zero,4(r3)
   4a154:	18000215 	stw	zero,8(r3)
   4a158:	1940030d 	sth	r5,12(r3)
   4a15c:	1a40038d 	sth	r9,14(r3)
   4a160:	18000415 	stw	zero,16(r3)
   4a164:	18000515 	stw	zero,20(r3)
   4a168:	18000615 	stw	zero,24(r3)
   4a16c:	18c00715 	stw	r3,28(r3)
   4a170:	1a000815 	stw	r8,32(r3)
   4a174:	19c00915 	stw	r7,36(r3)
   4a178:	19800a15 	stw	r6,40(r3)
   4a17c:	19000b15 	stw	r4,44(r3)
   4a180:	00c00484 	movi	r3,18
   4a184:	10c0030d 	sth	r3,12(r2)
   4a188:	00c00084 	movi	r3,2
   4a18c:	10000015 	stw	zero,0(r2)
   4a190:	10000115 	stw	zero,4(r2)
   4a194:	10000215 	stw	zero,8(r2)
   4a198:	10c0038d 	sth	r3,14(r2)
   4a19c:	10000415 	stw	zero,16(r2)
   4a1a0:	10000515 	stw	zero,20(r2)
   4a1a4:	10000615 	stw	zero,24(r2)
   4a1a8:	10800715 	stw	r2,28(r2)
   4a1ac:	12000815 	stw	r8,32(r2)
   4a1b0:	11c00915 	stw	r7,36(r2)
   4a1b4:	11800a15 	stw	r6,40(r2)
   4a1b8:	11000b15 	stw	r4,44(r2)
   4a1bc:	f800283a 	ret

0004a1c0 <__sfp>:
   4a1c0:	defffc04 	addi	sp,sp,-16
   4a1c4:	00800174 	movhi	r2,5
   4a1c8:	108def04 	addi	r2,r2,14268
   4a1cc:	dc400115 	stw	r17,4(sp)
   4a1d0:	14400017 	ldw	r17,0(r2)
   4a1d4:	dc800215 	stw	r18,8(sp)
   4a1d8:	dfc00315 	stw	ra,12(sp)
   4a1dc:	88800e17 	ldw	r2,56(r17)
   4a1e0:	dc000015 	stw	r16,0(sp)
   4a1e4:	2025883a 	mov	r18,r4
   4a1e8:	10002826 	beq	r2,zero,4a28c <__sfp+0xcc>
   4a1ec:	8c40b804 	addi	r17,r17,736
   4a1f0:	043fffc4 	movi	r16,-1
   4a1f4:	89400117 	ldw	r5,4(r17)
   4a1f8:	88800217 	ldw	r2,8(r17)
   4a1fc:	297fffc4 	addi	r5,r5,-1
   4a200:	28000a16 	blt	r5,zero,4a22c <__sfp+0x6c>
   4a204:	10c0030f 	ldh	r3,12(r2)
   4a208:	18000c26 	beq	r3,zero,4a23c <__sfp+0x7c>
   4a20c:	10c01a04 	addi	r3,r2,104
   4a210:	00000206 	br	4a21c <__sfp+0x5c>
   4a214:	19bfe90f 	ldh	r6,-92(r3)
   4a218:	30000826 	beq	r6,zero,4a23c <__sfp+0x7c>
   4a21c:	297fffc4 	addi	r5,r5,-1
   4a220:	18bffd04 	addi	r2,r3,-12
   4a224:	18c01704 	addi	r3,r3,92
   4a228:	2c3ffa1e 	bne	r5,r16,4a214 <__sfp+0x54>
   4a22c:	88800017 	ldw	r2,0(r17)
   4a230:	10001926 	beq	r2,zero,4a298 <__sfp+0xd8>
   4a234:	1023883a 	mov	r17,r2
   4a238:	003fee06 	br	4a1f4 <__sfp+0x34>
   4a23c:	00ffffc4 	movi	r3,-1
   4a240:	10c0038d 	sth	r3,14(r2)
   4a244:	00c00044 	movi	r3,1
   4a248:	10c0030d 	sth	r3,12(r2)
   4a24c:	10000015 	stw	zero,0(r2)
   4a250:	10000215 	stw	zero,8(r2)
   4a254:	10000115 	stw	zero,4(r2)
   4a258:	10000415 	stw	zero,16(r2)
   4a25c:	10000515 	stw	zero,20(r2)
   4a260:	10000615 	stw	zero,24(r2)
   4a264:	10000c15 	stw	zero,48(r2)
   4a268:	10000d15 	stw	zero,52(r2)
   4a26c:	10001115 	stw	zero,68(r2)
   4a270:	10001215 	stw	zero,72(r2)
   4a274:	dfc00317 	ldw	ra,12(sp)
   4a278:	dc800217 	ldw	r18,8(sp)
   4a27c:	dc400117 	ldw	r17,4(sp)
   4a280:	dc000017 	ldw	r16,0(sp)
   4a284:	dec00404 	addi	sp,sp,16
   4a288:	f800283a 	ret
   4a28c:	8809883a 	mov	r4,r17
   4a290:	004a0b40 	call	4a0b4 <__sinit>
   4a294:	003fd506 	br	4a1ec <__sfp+0x2c>
   4a298:	9009883a 	mov	r4,r18
   4a29c:	01400104 	movi	r5,4
   4a2a0:	004a0400 	call	4a040 <__sfmoreglue>
   4a2a4:	88800015 	stw	r2,0(r17)
   4a2a8:	103fe21e 	bne	r2,zero,4a234 <__sfp+0x74>
   4a2ac:	00800304 	movi	r2,12
   4a2b0:	90800015 	stw	r2,0(r18)
   4a2b4:	0005883a 	mov	r2,zero
   4a2b8:	003fee06 	br	4a274 <__sfp+0xb4>

0004a2bc <__sfp_lock_acquire>:
   4a2bc:	f800283a 	ret

0004a2c0 <__sfp_lock_release>:
   4a2c0:	f800283a 	ret

0004a2c4 <__sinit_lock_acquire>:
   4a2c4:	f800283a 	ret

0004a2c8 <__sinit_lock_release>:
   4a2c8:	f800283a 	ret

0004a2cc <__fp_lock_all>:
   4a2cc:	00800174 	movhi	r2,5
   4a2d0:	108df004 	addi	r2,r2,14272
   4a2d4:	11000017 	ldw	r4,0(r2)
   4a2d8:	01400174 	movhi	r5,5
   4a2dc:	29680904 	addi	r5,r5,-24540
   4a2e0:	004abec1 	jmpi	4abec <_fwalk>

0004a2e4 <__fp_unlock_all>:
   4a2e4:	00800174 	movhi	r2,5
   4a2e8:	108df004 	addi	r2,r2,14272
   4a2ec:	11000017 	ldw	r4,0(r2)
   4a2f0:	01400174 	movhi	r5,5
   4a2f4:	29680b04 	addi	r5,r5,-24532
   4a2f8:	004abec1 	jmpi	4abec <_fwalk>

0004a2fc <_malloc_trim_r>:
   4a2fc:	defffb04 	addi	sp,sp,-20
   4a300:	dcc00315 	stw	r19,12(sp)
   4a304:	dc800215 	stw	r18,8(sp)
   4a308:	dc400115 	stw	r17,4(sp)
   4a30c:	dc000015 	stw	r16,0(sp)
   4a310:	2827883a 	mov	r19,r5
   4a314:	dfc00415 	stw	ra,16(sp)
   4a318:	04400174 	movhi	r17,5
   4a31c:	8c482f04 	addi	r17,r17,8380
   4a320:	2021883a 	mov	r16,r4
   4a324:	004eca40 	call	4eca4 <__malloc_lock>
   4a328:	88800217 	ldw	r2,8(r17)
   4a32c:	14800117 	ldw	r18,4(r2)
   4a330:	00bfff04 	movi	r2,-4
   4a334:	90a4703a 	and	r18,r18,r2
   4a338:	9083fbc4 	addi	r2,r18,4079
   4a33c:	14e7c83a 	sub	r19,r2,r19
   4a340:	9826d33a 	srli	r19,r19,12
   4a344:	0083ffc4 	movi	r2,4095
   4a348:	9cffffc4 	addi	r19,r19,-1
   4a34c:	9826933a 	slli	r19,r19,12
   4a350:	14c0060e 	bge	r2,r19,4a36c <_malloc_trim_r+0x70>
   4a354:	8009883a 	mov	r4,r16
   4a358:	000b883a 	mov	r5,zero
   4a35c:	004d1500 	call	4d150 <_sbrk_r>
   4a360:	88c00217 	ldw	r3,8(r17)
   4a364:	1c87883a 	add	r3,r3,r18
   4a368:	10c00a26 	beq	r2,r3,4a394 <_malloc_trim_r+0x98>
   4a36c:	8009883a 	mov	r4,r16
   4a370:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4a374:	0005883a 	mov	r2,zero
   4a378:	dfc00417 	ldw	ra,16(sp)
   4a37c:	dcc00317 	ldw	r19,12(sp)
   4a380:	dc800217 	ldw	r18,8(sp)
   4a384:	dc400117 	ldw	r17,4(sp)
   4a388:	dc000017 	ldw	r16,0(sp)
   4a38c:	dec00504 	addi	sp,sp,20
   4a390:	f800283a 	ret
   4a394:	8009883a 	mov	r4,r16
   4a398:	04cbc83a 	sub	r5,zero,r19
   4a39c:	004d1500 	call	4d150 <_sbrk_r>
   4a3a0:	00ffffc4 	movi	r3,-1
   4a3a4:	10c01326 	beq	r2,r3,4a3f4 <_malloc_trim_r+0xf8>
   4a3a8:	00800174 	movhi	r2,5
   4a3ac:	10951304 	addi	r2,r2,21580
   4a3b0:	11000017 	ldw	r4,0(r2)
   4a3b4:	88c00217 	ldw	r3,8(r17)
   4a3b8:	94e5c83a 	sub	r18,r18,r19
   4a3bc:	94800054 	ori	r18,r18,1
   4a3c0:	24e7c83a 	sub	r19,r4,r19
   4a3c4:	1c800115 	stw	r18,4(r3)
   4a3c8:	8009883a 	mov	r4,r16
   4a3cc:	14c00015 	stw	r19,0(r2)
   4a3d0:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4a3d4:	00800044 	movi	r2,1
   4a3d8:	dfc00417 	ldw	ra,16(sp)
   4a3dc:	dcc00317 	ldw	r19,12(sp)
   4a3e0:	dc800217 	ldw	r18,8(sp)
   4a3e4:	dc400117 	ldw	r17,4(sp)
   4a3e8:	dc000017 	ldw	r16,0(sp)
   4a3ec:	dec00504 	addi	sp,sp,20
   4a3f0:	f800283a 	ret
   4a3f4:	8009883a 	mov	r4,r16
   4a3f8:	000b883a 	mov	r5,zero
   4a3fc:	004d1500 	call	4d150 <_sbrk_r>
   4a400:	88c00217 	ldw	r3,8(r17)
   4a404:	014003c4 	movi	r5,15
   4a408:	10c9c83a 	sub	r4,r2,r3
   4a40c:	293fd70e 	bge	r5,r4,4a36c <_malloc_trim_r+0x70>
   4a410:	01400174 	movhi	r5,5
   4a414:	294df204 	addi	r5,r5,14280
   4a418:	29400017 	ldw	r5,0(r5)
   4a41c:	21000054 	ori	r4,r4,1
   4a420:	19000115 	stw	r4,4(r3)
   4a424:	1145c83a 	sub	r2,r2,r5
   4a428:	01400174 	movhi	r5,5
   4a42c:	29551304 	addi	r5,r5,21580
   4a430:	28800015 	stw	r2,0(r5)
   4a434:	003fcd06 	br	4a36c <_malloc_trim_r+0x70>

0004a438 <_free_r>:
   4a438:	defffd04 	addi	sp,sp,-12
   4a43c:	dc400115 	stw	r17,4(sp)
   4a440:	dc000015 	stw	r16,0(sp)
   4a444:	dfc00215 	stw	ra,8(sp)
   4a448:	2821883a 	mov	r16,r5
   4a44c:	2023883a 	mov	r17,r4
   4a450:	28004b26 	beq	r5,zero,4a580 <_free_r+0x148>
   4a454:	004eca40 	call	4eca4 <__malloc_lock>
   4a458:	823fff17 	ldw	r8,-4(r16)
   4a45c:	00bfff84 	movi	r2,-2
   4a460:	81bffe04 	addi	r6,r16,-8
   4a464:	4084703a 	and	r2,r8,r2
   4a468:	3087883a 	add	r3,r6,r2
   4a46c:	01400174 	movhi	r5,5
   4a470:	29482f04 	addi	r5,r5,8380
   4a474:	1a400117 	ldw	r9,4(r3)
   4a478:	29000217 	ldw	r4,8(r5)
   4a47c:	01ffff04 	movi	r7,-4
   4a480:	49ce703a 	and	r7,r9,r7
   4a484:	20c06526 	beq	r4,r3,4a61c <_free_r+0x1e4>
   4a488:	19c00115 	stw	r7,4(r3)
   4a48c:	4200004c 	andi	r8,r8,1
   4a490:	40003026 	beq	r8,zero,4a554 <_free_r+0x11c>
   4a494:	0009883a 	mov	r4,zero
   4a498:	19d1883a 	add	r8,r3,r7
   4a49c:	42000117 	ldw	r8,4(r8)
   4a4a0:	4200004c 	andi	r8,r8,1
   4a4a4:	4000061e 	bne	r8,zero,4a4c0 <_free_r+0x88>
   4a4a8:	11c5883a 	add	r2,r2,r7
   4a4ac:	19c00217 	ldw	r7,8(r3)
   4a4b0:	20004e26 	beq	r4,zero,4a5ec <_free_r+0x1b4>
   4a4b4:	18c00317 	ldw	r3,12(r3)
   4a4b8:	38c00315 	stw	r3,12(r7)
   4a4bc:	19c00215 	stw	r7,8(r3)
   4a4c0:	11c00054 	ori	r7,r2,1
   4a4c4:	3087883a 	add	r3,r6,r2
   4a4c8:	31c00115 	stw	r7,4(r6)
   4a4cc:	18800015 	stw	r2,0(r3)
   4a4d0:	20001a1e 	bne	r4,zero,4a53c <_free_r+0x104>
   4a4d4:	00c07fc4 	movi	r3,511
   4a4d8:	18802e2e 	bgeu	r3,r2,4a594 <_free_r+0x15c>
   4a4dc:	1006d27a 	srli	r3,r2,9
   4a4e0:	01000104 	movi	r4,4
   4a4e4:	20c06636 	bltu	r4,r3,4a680 <_free_r+0x248>
   4a4e8:	1008d1ba 	srli	r4,r2,6
   4a4ec:	21000e04 	addi	r4,r4,56
   4a4f0:	210f883a 	add	r7,r4,r4
   4a4f4:	39cf883a 	add	r7,r7,r7
   4a4f8:	39cf883a 	add	r7,r7,r7
   4a4fc:	29cf883a 	add	r7,r5,r7
   4a500:	38c00217 	ldw	r3,8(r7)
   4a504:	01400174 	movhi	r5,5
   4a508:	29482f04 	addi	r5,r5,8380
   4a50c:	19c06126 	beq	r3,r7,4a694 <_free_r+0x25c>
   4a510:	013fff04 	movi	r4,-4
   4a514:	19400117 	ldw	r5,4(r3)
   4a518:	290a703a 	and	r5,r5,r4
   4a51c:	1140022e 	bgeu	r2,r5,4a528 <_free_r+0xf0>
   4a520:	18c00217 	ldw	r3,8(r3)
   4a524:	38fffb1e 	bne	r7,r3,4a514 <_free_r+0xdc>
   4a528:	18800317 	ldw	r2,12(r3)
   4a52c:	30800315 	stw	r2,12(r6)
   4a530:	30c00215 	stw	r3,8(r6)
   4a534:	11800215 	stw	r6,8(r2)
   4a538:	19800315 	stw	r6,12(r3)
   4a53c:	8809883a 	mov	r4,r17
   4a540:	dfc00217 	ldw	ra,8(sp)
   4a544:	dc400117 	ldw	r17,4(sp)
   4a548:	dc000017 	ldw	r16,0(sp)
   4a54c:	dec00304 	addi	sp,sp,12
   4a550:	004ecc41 	jmpi	4ecc4 <__malloc_unlock>
   4a554:	813ffe17 	ldw	r4,-8(r16)
   4a558:	2a400204 	addi	r9,r5,8
   4a55c:	310dc83a 	sub	r6,r6,r4
   4a560:	32000217 	ldw	r8,8(r6)
   4a564:	1105883a 	add	r2,r2,r4
   4a568:	42404326 	beq	r8,r9,4a678 <_free_r+0x240>
   4a56c:	32400317 	ldw	r9,12(r6)
   4a570:	0009883a 	mov	r4,zero
   4a574:	42400315 	stw	r9,12(r8)
   4a578:	4a000215 	stw	r8,8(r9)
   4a57c:	003fc606 	br	4a498 <_free_r+0x60>
   4a580:	dfc00217 	ldw	ra,8(sp)
   4a584:	dc400117 	ldw	r17,4(sp)
   4a588:	dc000017 	ldw	r16,0(sp)
   4a58c:	dec00304 	addi	sp,sp,12
   4a590:	f800283a 	ret
   4a594:	1004d0fa 	srli	r2,r2,3
   4a598:	02000044 	movi	r8,1
   4a59c:	29c00117 	ldw	r7,4(r5)
   4a5a0:	1087883a 	add	r3,r2,r2
   4a5a4:	18c7883a 	add	r3,r3,r3
   4a5a8:	1005d0ba 	srai	r2,r2,2
   4a5ac:	18c7883a 	add	r3,r3,r3
   4a5b0:	28c7883a 	add	r3,r5,r3
   4a5b4:	19000217 	ldw	r4,8(r3)
   4a5b8:	4084983a 	sll	r2,r8,r2
   4a5bc:	30c00315 	stw	r3,12(r6)
   4a5c0:	31000215 	stw	r4,8(r6)
   4a5c4:	11c4b03a 	or	r2,r2,r7
   4a5c8:	21800315 	stw	r6,12(r4)
   4a5cc:	8809883a 	mov	r4,r17
   4a5d0:	28800115 	stw	r2,4(r5)
   4a5d4:	19800215 	stw	r6,8(r3)
   4a5d8:	dfc00217 	ldw	ra,8(sp)
   4a5dc:	dc400117 	ldw	r17,4(sp)
   4a5e0:	dc000017 	ldw	r16,0(sp)
   4a5e4:	dec00304 	addi	sp,sp,12
   4a5e8:	004ecc41 	jmpi	4ecc4 <__malloc_unlock>
   4a5ec:	02000174 	movhi	r8,5
   4a5f0:	42083104 	addi	r8,r8,8388
   4a5f4:	3a3faf1e 	bne	r7,r8,4a4b4 <_free_r+0x7c>
   4a5f8:	29800515 	stw	r6,20(r5)
   4a5fc:	29800415 	stw	r6,16(r5)
   4a600:	11000054 	ori	r4,r2,1
   4a604:	3087883a 	add	r3,r6,r2
   4a608:	31c00315 	stw	r7,12(r6)
   4a60c:	31c00215 	stw	r7,8(r6)
   4a610:	31000115 	stw	r4,4(r6)
   4a614:	18800015 	stw	r2,0(r3)
   4a618:	003fc806 	br	4a53c <_free_r+0x104>
   4a61c:	4200004c 	andi	r8,r8,1
   4a620:	3885883a 	add	r2,r7,r2
   4a624:	4000071e 	bne	r8,zero,4a644 <_free_r+0x20c>
   4a628:	81fffe17 	ldw	r7,-8(r16)
   4a62c:	31cdc83a 	sub	r6,r6,r7
   4a630:	30c00317 	ldw	r3,12(r6)
   4a634:	31000217 	ldw	r4,8(r6)
   4a638:	11c5883a 	add	r2,r2,r7
   4a63c:	20c00315 	stw	r3,12(r4)
   4a640:	19000215 	stw	r4,8(r3)
   4a644:	00c00174 	movhi	r3,5
   4a648:	18cdf304 	addi	r3,r3,14284
   4a64c:	18c00017 	ldw	r3,0(r3)
   4a650:	11000054 	ori	r4,r2,1
   4a654:	31000115 	stw	r4,4(r6)
   4a658:	29800215 	stw	r6,8(r5)
   4a65c:	10ffb736 	bltu	r2,r3,4a53c <_free_r+0x104>
   4a660:	00800174 	movhi	r2,5
   4a664:	10950b04 	addi	r2,r2,21548
   4a668:	11400017 	ldw	r5,0(r2)
   4a66c:	8809883a 	mov	r4,r17
   4a670:	004a2fc0 	call	4a2fc <_malloc_trim_r>
   4a674:	003fb106 	br	4a53c <_free_r+0x104>
   4a678:	01000044 	movi	r4,1
   4a67c:	003f8606 	br	4a498 <_free_r+0x60>
   4a680:	01000504 	movi	r4,20
   4a684:	20c00b36 	bltu	r4,r3,4a6b4 <_free_r+0x27c>
   4a688:	190016c4 	addi	r4,r3,91
   4a68c:	210f883a 	add	r7,r4,r4
   4a690:	003f9806 	br	4a4f4 <_free_r+0xbc>
   4a694:	2009d0ba 	srai	r4,r4,2
   4a698:	00800044 	movi	r2,1
   4a69c:	29c00117 	ldw	r7,4(r5)
   4a6a0:	1108983a 	sll	r4,r2,r4
   4a6a4:	1805883a 	mov	r2,r3
   4a6a8:	21c8b03a 	or	r4,r4,r7
   4a6ac:	29000115 	stw	r4,4(r5)
   4a6b0:	003f9e06 	br	4a52c <_free_r+0xf4>
   4a6b4:	01001504 	movi	r4,84
   4a6b8:	20c00436 	bltu	r4,r3,4a6cc <_free_r+0x294>
   4a6bc:	1008d33a 	srli	r4,r2,12
   4a6c0:	21001b84 	addi	r4,r4,110
   4a6c4:	210f883a 	add	r7,r4,r4
   4a6c8:	003f8a06 	br	4a4f4 <_free_r+0xbc>
   4a6cc:	01005504 	movi	r4,340
   4a6d0:	20c00436 	bltu	r4,r3,4a6e4 <_free_r+0x2ac>
   4a6d4:	1008d3fa 	srli	r4,r2,15
   4a6d8:	21001dc4 	addi	r4,r4,119
   4a6dc:	210f883a 	add	r7,r4,r4
   4a6e0:	003f8406 	br	4a4f4 <_free_r+0xbc>
   4a6e4:	01015504 	movi	r4,1364
   4a6e8:	20c00436 	bltu	r4,r3,4a6fc <_free_r+0x2c4>
   4a6ec:	1008d4ba 	srli	r4,r2,18
   4a6f0:	21001f04 	addi	r4,r4,124
   4a6f4:	210f883a 	add	r7,r4,r4
   4a6f8:	003f7e06 	br	4a4f4 <_free_r+0xbc>
   4a6fc:	01c03f04 	movi	r7,252
   4a700:	01001f84 	movi	r4,126
   4a704:	003f7b06 	br	4a4f4 <_free_r+0xbc>

0004a708 <__sfvwrite_r>:
   4a708:	30800217 	ldw	r2,8(r6)
   4a70c:	defff504 	addi	sp,sp,-44
   4a710:	dd400615 	stw	r21,24(sp)
   4a714:	dd000515 	stw	r20,20(sp)
   4a718:	dc000115 	stw	r16,4(sp)
   4a71c:	dfc00a15 	stw	ra,40(sp)
   4a720:	df000915 	stw	fp,36(sp)
   4a724:	ddc00815 	stw	r23,32(sp)
   4a728:	dd800715 	stw	r22,28(sp)
   4a72c:	dcc00415 	stw	r19,16(sp)
   4a730:	dc800315 	stw	r18,12(sp)
   4a734:	dc400215 	stw	r17,8(sp)
   4a738:	3029883a 	mov	r20,r6
   4a73c:	202b883a 	mov	r21,r4
   4a740:	2821883a 	mov	r16,r5
   4a744:	10002126 	beq	r2,zero,4a7cc <__sfvwrite_r+0xc4>
   4a748:	2880030b 	ldhu	r2,12(r5)
   4a74c:	10c0020c 	andi	r3,r2,8
   4a750:	18ffffcc 	andi	r3,r3,65535
   4a754:	18e0001c 	xori	r3,r3,32768
   4a758:	18e00004 	addi	r3,r3,-32768
   4a75c:	18002826 	beq	r3,zero,4a800 <__sfvwrite_r+0xf8>
   4a760:	28c00417 	ldw	r3,16(r5)
   4a764:	18002626 	beq	r3,zero,4a800 <__sfvwrite_r+0xf8>
   4a768:	10c0008c 	andi	r3,r2,2
   4a76c:	18ffffcc 	andi	r3,r3,65535
   4a770:	18e0001c 	xori	r3,r3,32768
   4a774:	18e00004 	addi	r3,r3,-32768
   4a778:	a4400017 	ldw	r17,0(r20)
   4a77c:	18002b26 	beq	r3,zero,4a82c <__sfvwrite_r+0x124>
   4a780:	0027883a 	mov	r19,zero
   4a784:	0025883a 	mov	r18,zero
   4a788:	05810004 	movi	r22,1024
   4a78c:	980d883a 	mov	r6,r19
   4a790:	a809883a 	mov	r4,r21
   4a794:	90004f26 	beq	r18,zero,4a8d4 <__sfvwrite_r+0x1cc>
   4a798:	900f883a 	mov	r7,r18
   4a79c:	81400717 	ldw	r5,28(r16)
   4a7a0:	b480012e 	bgeu	r22,r18,4a7a8 <__sfvwrite_r+0xa0>
   4a7a4:	01c10004 	movi	r7,1024
   4a7a8:	80800917 	ldw	r2,36(r16)
   4a7ac:	103ee83a 	callr	r2
   4a7b0:	0080540e 	bge	zero,r2,4a904 <__sfvwrite_r+0x1fc>
   4a7b4:	a0c00217 	ldw	r3,8(r20)
   4a7b8:	98a7883a 	add	r19,r19,r2
   4a7bc:	90a5c83a 	sub	r18,r18,r2
   4a7c0:	1885c83a 	sub	r2,r3,r2
   4a7c4:	a0800215 	stw	r2,8(r20)
   4a7c8:	103ff01e 	bne	r2,zero,4a78c <__sfvwrite_r+0x84>
   4a7cc:	0005883a 	mov	r2,zero
   4a7d0:	dfc00a17 	ldw	ra,40(sp)
   4a7d4:	df000917 	ldw	fp,36(sp)
   4a7d8:	ddc00817 	ldw	r23,32(sp)
   4a7dc:	dd800717 	ldw	r22,28(sp)
   4a7e0:	dd400617 	ldw	r21,24(sp)
   4a7e4:	dd000517 	ldw	r20,20(sp)
   4a7e8:	dcc00417 	ldw	r19,16(sp)
   4a7ec:	dc800317 	ldw	r18,12(sp)
   4a7f0:	dc400217 	ldw	r17,8(sp)
   4a7f4:	dc000117 	ldw	r16,4(sp)
   4a7f8:	dec00b04 	addi	sp,sp,44
   4a7fc:	f800283a 	ret
   4a800:	a809883a 	mov	r4,r21
   4a804:	800b883a 	mov	r5,r16
   4a808:	00484740 	call	48474 <__swsetup_r>
   4a80c:	1000f01e 	bne	r2,zero,4abd0 <__sfvwrite_r+0x4c8>
   4a810:	8080030b 	ldhu	r2,12(r16)
   4a814:	a4400017 	ldw	r17,0(r20)
   4a818:	10c0008c 	andi	r3,r2,2
   4a81c:	18ffffcc 	andi	r3,r3,65535
   4a820:	18e0001c 	xori	r3,r3,32768
   4a824:	18e00004 	addi	r3,r3,-32768
   4a828:	183fd51e 	bne	r3,zero,4a780 <__sfvwrite_r+0x78>
   4a82c:	10c0004c 	andi	r3,r2,1
   4a830:	002d883a 	mov	r22,zero
   4a834:	1800381e 	bne	r3,zero,4a918 <__sfvwrite_r+0x210>
   4a838:	0025883a 	mov	r18,zero
   4a83c:	90002126 	beq	r18,zero,4a8c4 <__sfvwrite_r+0x1bc>
   4a840:	10c0800c 	andi	r3,r2,512
   4a844:	18ffffcc 	andi	r3,r3,65535
   4a848:	18e0001c 	xori	r3,r3,32768
   4a84c:	18e00004 	addi	r3,r3,-32768
   4a850:	84c00217 	ldw	r19,8(r16)
   4a854:	18006b26 	beq	r3,zero,4aa04 <__sfvwrite_r+0x2fc>
   4a858:	980f883a 	mov	r7,r19
   4a85c:	94c08636 	bltu	r18,r19,4aa78 <__sfvwrite_r+0x370>
   4a860:	10c1200c 	andi	r3,r2,1152
   4a864:	18009f1e 	bne	r3,zero,4aae4 <__sfvwrite_r+0x3dc>
   4a868:	81000017 	ldw	r4,0(r16)
   4a86c:	982f883a 	mov	r23,r19
   4a870:	9039883a 	mov	fp,r18
   4a874:	9027883a 	mov	r19,r18
   4a878:	380d883a 	mov	r6,r7
   4a87c:	b00b883a 	mov	r5,r22
   4a880:	d9c00015 	stw	r7,0(sp)
   4a884:	004b9440 	call	4b944 <memmove>
   4a888:	d9c00017 	ldw	r7,0(sp)
   4a88c:	81000217 	ldw	r4,8(r16)
   4a890:	80800017 	ldw	r2,0(r16)
   4a894:	25efc83a 	sub	r23,r4,r23
   4a898:	11cf883a 	add	r7,r2,r7
   4a89c:	85c00215 	stw	r23,8(r16)
   4a8a0:	81c00015 	stw	r7,0(r16)
   4a8a4:	a0800217 	ldw	r2,8(r20)
   4a8a8:	b72d883a 	add	r22,r22,fp
   4a8ac:	9725c83a 	sub	r18,r18,fp
   4a8b0:	14e7c83a 	sub	r19,r2,r19
   4a8b4:	a4c00215 	stw	r19,8(r20)
   4a8b8:	983fc426 	beq	r19,zero,4a7cc <__sfvwrite_r+0xc4>
   4a8bc:	8080030b 	ldhu	r2,12(r16)
   4a8c0:	903fdf1e 	bne	r18,zero,4a840 <__sfvwrite_r+0x138>
   4a8c4:	8d800017 	ldw	r22,0(r17)
   4a8c8:	8c800117 	ldw	r18,4(r17)
   4a8cc:	8c400204 	addi	r17,r17,8
   4a8d0:	003fda06 	br	4a83c <__sfvwrite_r+0x134>
   4a8d4:	8cc00017 	ldw	r19,0(r17)
   4a8d8:	8c800117 	ldw	r18,4(r17)
   4a8dc:	8c400204 	addi	r17,r17,8
   4a8e0:	003faa06 	br	4a78c <__sfvwrite_r+0x84>
   4a8e4:	004caf00 	call	4caf0 <_realloc_r>
   4a8e8:	102f883a 	mov	r23,r2
   4a8ec:	10009f1e 	bne	r2,zero,4ab6c <__sfvwrite_r+0x464>
   4a8f0:	81400417 	ldw	r5,16(r16)
   4a8f4:	a809883a 	mov	r4,r21
   4a8f8:	004a4380 	call	4a438 <_free_r>
   4a8fc:	00800304 	movi	r2,12
   4a900:	a8800015 	stw	r2,0(r21)
   4a904:	80c0030b 	ldhu	r3,12(r16)
   4a908:	00bfffc4 	movi	r2,-1
   4a90c:	18c01014 	ori	r3,r3,64
   4a910:	80c0030d 	sth	r3,12(r16)
   4a914:	003fae06 	br	4a7d0 <__sfvwrite_r+0xc8>
   4a918:	0007883a 	mov	r3,zero
   4a91c:	0039883a 	mov	fp,zero
   4a920:	0025883a 	mov	r18,zero
   4a924:	90001e26 	beq	r18,zero,4a9a0 <__sfvwrite_r+0x298>
   4a928:	18006526 	beq	r3,zero,4aac0 <__sfvwrite_r+0x3b8>
   4a92c:	b02f883a 	mov	r23,r22
   4a930:	9580012e 	bgeu	r18,r22,4a938 <__sfvwrite_r+0x230>
   4a934:	902f883a 	mov	r23,r18
   4a938:	81000017 	ldw	r4,0(r16)
   4a93c:	80800417 	ldw	r2,16(r16)
   4a940:	84c00217 	ldw	r19,8(r16)
   4a944:	81c00517 	ldw	r7,20(r16)
   4a948:	1100022e 	bgeu	r2,r4,4a954 <__sfvwrite_r+0x24c>
   4a94c:	99e7883a 	add	r19,r19,r7
   4a950:	9dc01816 	blt	r19,r23,4a9b4 <__sfvwrite_r+0x2ac>
   4a954:	b9c03b16 	blt	r23,r7,4aa44 <__sfvwrite_r+0x33c>
   4a958:	80800917 	ldw	r2,36(r16)
   4a95c:	81400717 	ldw	r5,28(r16)
   4a960:	a809883a 	mov	r4,r21
   4a964:	d8c00015 	stw	r3,0(sp)
   4a968:	e00d883a 	mov	r6,fp
   4a96c:	103ee83a 	callr	r2
   4a970:	1027883a 	mov	r19,r2
   4a974:	d8c00017 	ldw	r3,0(sp)
   4a978:	00bfe20e 	bge	zero,r2,4a904 <__sfvwrite_r+0x1fc>
   4a97c:	b4edc83a 	sub	r22,r22,r19
   4a980:	b0001a26 	beq	r22,zero,4a9ec <__sfvwrite_r+0x2e4>
   4a984:	a0800217 	ldw	r2,8(r20)
   4a988:	e4f9883a 	add	fp,fp,r19
   4a98c:	94e5c83a 	sub	r18,r18,r19
   4a990:	14e7c83a 	sub	r19,r2,r19
   4a994:	a4c00215 	stw	r19,8(r20)
   4a998:	983f8c26 	beq	r19,zero,4a7cc <__sfvwrite_r+0xc4>
   4a99c:	903fe21e 	bne	r18,zero,4a928 <__sfvwrite_r+0x220>
   4a9a0:	8f000017 	ldw	fp,0(r17)
   4a9a4:	8c800117 	ldw	r18,4(r17)
   4a9a8:	0007883a 	mov	r3,zero
   4a9ac:	8c400204 	addi	r17,r17,8
   4a9b0:	003fdc06 	br	4a924 <__sfvwrite_r+0x21c>
   4a9b4:	e00b883a 	mov	r5,fp
   4a9b8:	980d883a 	mov	r6,r19
   4a9bc:	d8c00015 	stw	r3,0(sp)
   4a9c0:	004b9440 	call	4b944 <memmove>
   4a9c4:	80800017 	ldw	r2,0(r16)
   4a9c8:	a809883a 	mov	r4,r21
   4a9cc:	800b883a 	mov	r5,r16
   4a9d0:	14c5883a 	add	r2,r2,r19
   4a9d4:	80800015 	stw	r2,0(r16)
   4a9d8:	0049e0c0 	call	49e0c <_fflush_r>
   4a9dc:	d8c00017 	ldw	r3,0(sp)
   4a9e0:	103fc81e 	bne	r2,zero,4a904 <__sfvwrite_r+0x1fc>
   4a9e4:	b4edc83a 	sub	r22,r22,r19
   4a9e8:	b03fe61e 	bne	r22,zero,4a984 <__sfvwrite_r+0x27c>
   4a9ec:	a809883a 	mov	r4,r21
   4a9f0:	800b883a 	mov	r5,r16
   4a9f4:	0049e0c0 	call	49e0c <_fflush_r>
   4a9f8:	103fc21e 	bne	r2,zero,4a904 <__sfvwrite_r+0x1fc>
   4a9fc:	0007883a 	mov	r3,zero
   4aa00:	003fe006 	br	4a984 <__sfvwrite_r+0x27c>
   4aa04:	81000017 	ldw	r4,0(r16)
   4aa08:	80800417 	ldw	r2,16(r16)
   4aa0c:	1100022e 	bgeu	r2,r4,4aa18 <__sfvwrite_r+0x310>
   4aa10:	9839883a 	mov	fp,r19
   4aa14:	9c806036 	bltu	r19,r18,4ab98 <__sfvwrite_r+0x490>
   4aa18:	81c00517 	ldw	r7,20(r16)
   4aa1c:	91c01c36 	bltu	r18,r7,4aa90 <__sfvwrite_r+0x388>
   4aa20:	80800917 	ldw	r2,36(r16)
   4aa24:	81400717 	ldw	r5,28(r16)
   4aa28:	a809883a 	mov	r4,r21
   4aa2c:	b00d883a 	mov	r6,r22
   4aa30:	103ee83a 	callr	r2
   4aa34:	1027883a 	mov	r19,r2
   4aa38:	00bfb20e 	bge	zero,r2,4a904 <__sfvwrite_r+0x1fc>
   4aa3c:	1039883a 	mov	fp,r2
   4aa40:	003f9806 	br	4a8a4 <__sfvwrite_r+0x19c>
   4aa44:	b80d883a 	mov	r6,r23
   4aa48:	e00b883a 	mov	r5,fp
   4aa4c:	d8c00015 	stw	r3,0(sp)
   4aa50:	004b9440 	call	4b944 <memmove>
   4aa54:	80800217 	ldw	r2,8(r16)
   4aa58:	81000017 	ldw	r4,0(r16)
   4aa5c:	b827883a 	mov	r19,r23
   4aa60:	15c5c83a 	sub	r2,r2,r23
   4aa64:	25ef883a 	add	r23,r4,r23
   4aa68:	80800215 	stw	r2,8(r16)
   4aa6c:	85c00015 	stw	r23,0(r16)
   4aa70:	d8c00017 	ldw	r3,0(sp)
   4aa74:	003fc106 	br	4a97c <__sfvwrite_r+0x274>
   4aa78:	81000017 	ldw	r4,0(r16)
   4aa7c:	902f883a 	mov	r23,r18
   4aa80:	9039883a 	mov	fp,r18
   4aa84:	9027883a 	mov	r19,r18
   4aa88:	900f883a 	mov	r7,r18
   4aa8c:	003f7a06 	br	4a878 <__sfvwrite_r+0x170>
   4aa90:	b00b883a 	mov	r5,r22
   4aa94:	900d883a 	mov	r6,r18
   4aa98:	004b9440 	call	4b944 <memmove>
   4aa9c:	80c00217 	ldw	r3,8(r16)
   4aaa0:	80800017 	ldw	r2,0(r16)
   4aaa4:	9027883a 	mov	r19,r18
   4aaa8:	1c87c83a 	sub	r3,r3,r18
   4aaac:	1485883a 	add	r2,r2,r18
   4aab0:	80c00215 	stw	r3,8(r16)
   4aab4:	80800015 	stw	r2,0(r16)
   4aab8:	9039883a 	mov	fp,r18
   4aabc:	003f7906 	br	4a8a4 <__sfvwrite_r+0x19c>
   4aac0:	e009883a 	mov	r4,fp
   4aac4:	01400284 	movi	r5,10
   4aac8:	900d883a 	mov	r6,r18
   4aacc:	004b7540 	call	4b754 <memchr>
   4aad0:	10003c26 	beq	r2,zero,4abc4 <__sfvwrite_r+0x4bc>
   4aad4:	15800044 	addi	r22,r2,1
   4aad8:	b72dc83a 	sub	r22,r22,fp
   4aadc:	00c00044 	movi	r3,1
   4aae0:	003f9206 	br	4a92c <__sfvwrite_r+0x224>
   4aae4:	81000517 	ldw	r4,20(r16)
   4aae8:	81400417 	ldw	r5,16(r16)
   4aaec:	80c00017 	ldw	r3,0(r16)
   4aaf0:	210d883a 	add	r6,r4,r4
   4aaf4:	3109883a 	add	r4,r6,r4
   4aaf8:	2026d7fa 	srli	r19,r4,31
   4aafc:	1979c83a 	sub	fp,r3,r5
   4ab00:	e1800044 	addi	r6,fp,1
   4ab04:	9909883a 	add	r4,r19,r4
   4ab08:	2027d07a 	srai	r19,r4,1
   4ab0c:	3489883a 	add	r4,r6,r18
   4ab10:	980d883a 	mov	r6,r19
   4ab14:	9900022e 	bgeu	r19,r4,4ab20 <__sfvwrite_r+0x418>
   4ab18:	2027883a 	mov	r19,r4
   4ab1c:	200d883a 	mov	r6,r4
   4ab20:	1081000c 	andi	r2,r2,1024
   4ab24:	10bfffcc 	andi	r2,r2,65535
   4ab28:	10a0001c 	xori	r2,r2,32768
   4ab2c:	10a00004 	addi	r2,r2,-32768
   4ab30:	a809883a 	mov	r4,r21
   4ab34:	103f6b26 	beq	r2,zero,4a8e4 <__sfvwrite_r+0x1dc>
   4ab38:	300b883a 	mov	r5,r6
   4ab3c:	004afd00 	call	4afd0 <_malloc_r>
   4ab40:	102f883a 	mov	r23,r2
   4ab44:	103f6d26 	beq	r2,zero,4a8fc <__sfvwrite_r+0x1f4>
   4ab48:	81400417 	ldw	r5,16(r16)
   4ab4c:	1009883a 	mov	r4,r2
   4ab50:	e00d883a 	mov	r6,fp
   4ab54:	004b84c0 	call	4b84c <memcpy>
   4ab58:	8080030b 	ldhu	r2,12(r16)
   4ab5c:	00fedfc4 	movi	r3,-1153
   4ab60:	10c4703a 	and	r2,r2,r3
   4ab64:	10802014 	ori	r2,r2,128
   4ab68:	8080030d 	sth	r2,12(r16)
   4ab6c:	bf09883a 	add	r4,r23,fp
   4ab70:	9f07c83a 	sub	r3,r19,fp
   4ab74:	85c00415 	stw	r23,16(r16)
   4ab78:	84c00515 	stw	r19,20(r16)
   4ab7c:	81000015 	stw	r4,0(r16)
   4ab80:	902f883a 	mov	r23,r18
   4ab84:	80c00215 	stw	r3,8(r16)
   4ab88:	9039883a 	mov	fp,r18
   4ab8c:	9027883a 	mov	r19,r18
   4ab90:	900f883a 	mov	r7,r18
   4ab94:	003f3806 	br	4a878 <__sfvwrite_r+0x170>
   4ab98:	b00b883a 	mov	r5,r22
   4ab9c:	980d883a 	mov	r6,r19
   4aba0:	004b9440 	call	4b944 <memmove>
   4aba4:	80800017 	ldw	r2,0(r16)
   4aba8:	a809883a 	mov	r4,r21
   4abac:	800b883a 	mov	r5,r16
   4abb0:	14c5883a 	add	r2,r2,r19
   4abb4:	80800015 	stw	r2,0(r16)
   4abb8:	0049e0c0 	call	49e0c <_fflush_r>
   4abbc:	103f3926 	beq	r2,zero,4a8a4 <__sfvwrite_r+0x19c>
   4abc0:	003f5006 	br	4a904 <__sfvwrite_r+0x1fc>
   4abc4:	95800044 	addi	r22,r18,1
   4abc8:	00c00044 	movi	r3,1
   4abcc:	003f5706 	br	4a92c <__sfvwrite_r+0x224>
   4abd0:	80c0030b 	ldhu	r3,12(r16)
   4abd4:	00bfffc4 	movi	r2,-1
   4abd8:	18c01014 	ori	r3,r3,64
   4abdc:	80c0030d 	sth	r3,12(r16)
   4abe0:	00c00244 	movi	r3,9
   4abe4:	a8c00015 	stw	r3,0(r21)
   4abe8:	003ef906 	br	4a7d0 <__sfvwrite_r+0xc8>

0004abec <_fwalk>:
   4abec:	defff904 	addi	sp,sp,-28
   4abf0:	dcc00315 	stw	r19,12(sp)
   4abf4:	24c0b804 	addi	r19,r4,736
   4abf8:	dd400515 	stw	r21,20(sp)
   4abfc:	dd000415 	stw	r20,16(sp)
   4ac00:	dfc00615 	stw	ra,24(sp)
   4ac04:	dc800215 	stw	r18,8(sp)
   4ac08:	dc400115 	stw	r17,4(sp)
   4ac0c:	dc000015 	stw	r16,0(sp)
   4ac10:	282b883a 	mov	r21,r5
   4ac14:	0029883a 	mov	r20,zero
   4ac18:	004a2bc0 	call	4a2bc <__sfp_lock_acquire>
   4ac1c:	98001226 	beq	r19,zero,4ac68 <_fwalk+0x7c>
   4ac20:	04bfffc4 	movi	r18,-1
   4ac24:	9c400117 	ldw	r17,4(r19)
   4ac28:	9c000217 	ldw	r16,8(r19)
   4ac2c:	8c7fffc4 	addi	r17,r17,-1
   4ac30:	88000b16 	blt	r17,zero,4ac60 <_fwalk+0x74>
   4ac34:	84000304 	addi	r16,r16,12
   4ac38:	80c0000f 	ldh	r3,0(r16)
   4ac3c:	8c7fffc4 	addi	r17,r17,-1
   4ac40:	813ffd04 	addi	r4,r16,-12
   4ac44:	18000426 	beq	r3,zero,4ac58 <_fwalk+0x6c>
   4ac48:	80c0008f 	ldh	r3,2(r16)
   4ac4c:	1c800226 	beq	r3,r18,4ac58 <_fwalk+0x6c>
   4ac50:	a83ee83a 	callr	r21
   4ac54:	a0a8b03a 	or	r20,r20,r2
   4ac58:	84001704 	addi	r16,r16,92
   4ac5c:	8cbff61e 	bne	r17,r18,4ac38 <_fwalk+0x4c>
   4ac60:	9cc00017 	ldw	r19,0(r19)
   4ac64:	983fef1e 	bne	r19,zero,4ac24 <_fwalk+0x38>
   4ac68:	004a2c00 	call	4a2c0 <__sfp_lock_release>
   4ac6c:	a005883a 	mov	r2,r20
   4ac70:	dfc00617 	ldw	ra,24(sp)
   4ac74:	dd400517 	ldw	r21,20(sp)
   4ac78:	dd000417 	ldw	r20,16(sp)
   4ac7c:	dcc00317 	ldw	r19,12(sp)
   4ac80:	dc800217 	ldw	r18,8(sp)
   4ac84:	dc400117 	ldw	r17,4(sp)
   4ac88:	dc000017 	ldw	r16,0(sp)
   4ac8c:	dec00704 	addi	sp,sp,28
   4ac90:	f800283a 	ret

0004ac94 <_fwalk_reent>:
   4ac94:	defff804 	addi	sp,sp,-32
   4ac98:	dcc00315 	stw	r19,12(sp)
   4ac9c:	24c0b804 	addi	r19,r4,736
   4aca0:	dd800615 	stw	r22,24(sp)
   4aca4:	dd400515 	stw	r21,20(sp)
   4aca8:	dd000415 	stw	r20,16(sp)
   4acac:	dfc00715 	stw	ra,28(sp)
   4acb0:	dc800215 	stw	r18,8(sp)
   4acb4:	dc400115 	stw	r17,4(sp)
   4acb8:	dc000015 	stw	r16,0(sp)
   4acbc:	2029883a 	mov	r20,r4
   4acc0:	282b883a 	mov	r21,r5
   4acc4:	002d883a 	mov	r22,zero
   4acc8:	004a2bc0 	call	4a2bc <__sfp_lock_acquire>
   4accc:	98001326 	beq	r19,zero,4ad1c <_fwalk_reent+0x88>
   4acd0:	04bfffc4 	movi	r18,-1
   4acd4:	9c400117 	ldw	r17,4(r19)
   4acd8:	9c000217 	ldw	r16,8(r19)
   4acdc:	8c7fffc4 	addi	r17,r17,-1
   4ace0:	88000c16 	blt	r17,zero,4ad14 <_fwalk_reent+0x80>
   4ace4:	84000304 	addi	r16,r16,12
   4ace8:	80c0000f 	ldh	r3,0(r16)
   4acec:	8c7fffc4 	addi	r17,r17,-1
   4acf0:	817ffd04 	addi	r5,r16,-12
   4acf4:	18000526 	beq	r3,zero,4ad0c <_fwalk_reent+0x78>
   4acf8:	80c0008f 	ldh	r3,2(r16)
   4acfc:	a009883a 	mov	r4,r20
   4ad00:	1c800226 	beq	r3,r18,4ad0c <_fwalk_reent+0x78>
   4ad04:	a83ee83a 	callr	r21
   4ad08:	b0acb03a 	or	r22,r22,r2
   4ad0c:	84001704 	addi	r16,r16,92
   4ad10:	8cbff51e 	bne	r17,r18,4ace8 <_fwalk_reent+0x54>
   4ad14:	9cc00017 	ldw	r19,0(r19)
   4ad18:	983fee1e 	bne	r19,zero,4acd4 <_fwalk_reent+0x40>
   4ad1c:	004a2c00 	call	4a2c0 <__sfp_lock_release>
   4ad20:	b005883a 	mov	r2,r22
   4ad24:	dfc00717 	ldw	ra,28(sp)
   4ad28:	dd800617 	ldw	r22,24(sp)
   4ad2c:	dd400517 	ldw	r21,20(sp)
   4ad30:	dd000417 	ldw	r20,16(sp)
   4ad34:	dcc00317 	ldw	r19,12(sp)
   4ad38:	dc800217 	ldw	r18,8(sp)
   4ad3c:	dc400117 	ldw	r17,4(sp)
   4ad40:	dc000017 	ldw	r16,0(sp)
   4ad44:	dec00804 	addi	sp,sp,32
   4ad48:	f800283a 	ret

0004ad4c <_setlocale_r>:
   4ad4c:	defffc04 	addi	sp,sp,-16
   4ad50:	dc800215 	stw	r18,8(sp)
   4ad54:	dc400115 	stw	r17,4(sp)
   4ad58:	dc000015 	stw	r16,0(sp)
   4ad5c:	dfc00315 	stw	ra,12(sp)
   4ad60:	3021883a 	mov	r16,r6
   4ad64:	2023883a 	mov	r17,r4
   4ad68:	2825883a 	mov	r18,r5
   4ad6c:	30001626 	beq	r6,zero,4adc8 <_setlocale_r+0x7c>
   4ad70:	3009883a 	mov	r4,r6
   4ad74:	01400174 	movhi	r5,5
   4ad78:	2946a404 	addi	r5,r5,6800
   4ad7c:	004d2f40 	call	4d2f4 <strcmp>
   4ad80:	10000a1e 	bne	r2,zero,4adac <_setlocale_r+0x60>
   4ad84:	8c800c15 	stw	r18,48(r17)
   4ad88:	8c000d15 	stw	r16,52(r17)
   4ad8c:	00800174 	movhi	r2,5
   4ad90:	1086a404 	addi	r2,r2,6800
   4ad94:	dfc00317 	ldw	ra,12(sp)
   4ad98:	dc800217 	ldw	r18,8(sp)
   4ad9c:	dc400117 	ldw	r17,4(sp)
   4ada0:	dc000017 	ldw	r16,0(sp)
   4ada4:	dec00404 	addi	sp,sp,16
   4ada8:	f800283a 	ret
   4adac:	8009883a 	mov	r4,r16
   4adb0:	01400174 	movhi	r5,5
   4adb4:	29468f04 	addi	r5,r5,6716
   4adb8:	004d2f40 	call	4d2f4 <strcmp>
   4adbc:	103ff126 	beq	r2,zero,4ad84 <_setlocale_r+0x38>
   4adc0:	0005883a 	mov	r2,zero
   4adc4:	003ff306 	br	4ad94 <_setlocale_r+0x48>
   4adc8:	00800174 	movhi	r2,5
   4adcc:	1086a404 	addi	r2,r2,6800
   4add0:	dfc00317 	ldw	ra,12(sp)
   4add4:	dc800217 	ldw	r18,8(sp)
   4add8:	dc400117 	ldw	r17,4(sp)
   4addc:	dc000017 	ldw	r16,0(sp)
   4ade0:	dec00404 	addi	sp,sp,16
   4ade4:	f800283a 	ret

0004ade8 <__locale_charset>:
   4ade8:	00800174 	movhi	r2,5
   4adec:	1086a504 	addi	r2,r2,6804
   4adf0:	f800283a 	ret

0004adf4 <_localeconv_r>:
   4adf4:	00800174 	movhi	r2,5
   4adf8:	1086a904 	addi	r2,r2,6820
   4adfc:	f800283a 	ret

0004ae00 <setlocale>:
   4ae00:	00c00174 	movhi	r3,5
   4ae04:	18cdf004 	addi	r3,r3,14272
   4ae08:	2005883a 	mov	r2,r4
   4ae0c:	19000017 	ldw	r4,0(r3)
   4ae10:	280d883a 	mov	r6,r5
   4ae14:	100b883a 	mov	r5,r2
   4ae18:	004ad4c1 	jmpi	4ad4c <_setlocale_r>

0004ae1c <localeconv>:
   4ae1c:	00800174 	movhi	r2,5
   4ae20:	1086a904 	addi	r2,r2,6820
   4ae24:	f800283a 	ret

0004ae28 <__smakebuf_r>:
   4ae28:	2880030b 	ldhu	r2,12(r5)
   4ae2c:	deffed04 	addi	sp,sp,-76
   4ae30:	dc401015 	stw	r17,64(sp)
   4ae34:	10c0008c 	andi	r3,r2,2
   4ae38:	18ffffcc 	andi	r3,r3,65535
   4ae3c:	18e0001c 	xori	r3,r3,32768
   4ae40:	dc000f15 	stw	r16,60(sp)
   4ae44:	dfc01215 	stw	ra,72(sp)
   4ae48:	dc801115 	stw	r18,68(sp)
   4ae4c:	18e00004 	addi	r3,r3,-32768
   4ae50:	2821883a 	mov	r16,r5
   4ae54:	2023883a 	mov	r17,r4
   4ae58:	1800381e 	bne	r3,zero,4af3c <__smakebuf_r+0x114>
   4ae5c:	2940038f 	ldh	r5,14(r5)
   4ae60:	28002d16 	blt	r5,zero,4af18 <__smakebuf_r+0xf0>
   4ae64:	d80d883a 	mov	r6,sp
   4ae68:	004d6740 	call	4d674 <_fstat_r>
   4ae6c:	10002916 	blt	r2,zero,4af14 <__smakebuf_r+0xec>
   4ae70:	d8800117 	ldw	r2,4(sp)
   4ae74:	00e00014 	movui	r3,32768
   4ae78:	10bc000c 	andi	r2,r2,61440
   4ae7c:	10c03c26 	beq	r2,r3,4af70 <__smakebuf_r+0x148>
   4ae80:	80c0030b 	ldhu	r3,12(r16)
   4ae84:	18c20014 	ori	r3,r3,2048
   4ae88:	80c0030d 	sth	r3,12(r16)
   4ae8c:	00c80004 	movi	r3,8192
   4ae90:	10c00c1e 	bne	r2,r3,4aec4 <__smakebuf_r+0x9c>
   4ae94:	8140038f 	ldh	r5,14(r16)
   4ae98:	8809883a 	mov	r4,r17
   4ae9c:	004d6dc0 	call	4d6dc <_isatty_r>
   4aea0:	10000826 	beq	r2,zero,4aec4 <__smakebuf_r+0x9c>
   4aea4:	80c0030b 	ldhu	r3,12(r16)
   4aea8:	808010c4 	addi	r2,r16,67
   4aeac:	80800015 	stw	r2,0(r16)
   4aeb0:	18c00054 	ori	r3,r3,1
   4aeb4:	80800415 	stw	r2,16(r16)
   4aeb8:	00800044 	movi	r2,1
   4aebc:	80c0030d 	sth	r3,12(r16)
   4aec0:	80800515 	stw	r2,20(r16)
   4aec4:	04810004 	movi	r18,1024
   4aec8:	8809883a 	mov	r4,r17
   4aecc:	900b883a 	mov	r5,r18
   4aed0:	004afd00 	call	4afd0 <_malloc_r>
   4aed4:	10003026 	beq	r2,zero,4af98 <__smakebuf_r+0x170>
   4aed8:	80c0030b 	ldhu	r3,12(r16)
   4aedc:	01000174 	movhi	r4,5
   4aee0:	21280d04 	addi	r4,r4,-24524
   4aee4:	89000f15 	stw	r4,60(r17)
   4aee8:	18c02014 	ori	r3,r3,128
   4aeec:	80c0030d 	sth	r3,12(r16)
   4aef0:	80800015 	stw	r2,0(r16)
   4aef4:	80800415 	stw	r2,16(r16)
   4aef8:	84800515 	stw	r18,20(r16)
   4aefc:	dfc01217 	ldw	ra,72(sp)
   4af00:	dc801117 	ldw	r18,68(sp)
   4af04:	dc401017 	ldw	r17,64(sp)
   4af08:	dc000f17 	ldw	r16,60(sp)
   4af0c:	dec01304 	addi	sp,sp,76
   4af10:	f800283a 	ret
   4af14:	8080030b 	ldhu	r2,12(r16)
   4af18:	10c0200c 	andi	r3,r2,128
   4af1c:	18ffffcc 	andi	r3,r3,65535
   4af20:	18e0001c 	xori	r3,r3,32768
   4af24:	18e00004 	addi	r3,r3,-32768
   4af28:	18000f1e 	bne	r3,zero,4af68 <__smakebuf_r+0x140>
   4af2c:	04810004 	movi	r18,1024
   4af30:	10820014 	ori	r2,r2,2048
   4af34:	8080030d 	sth	r2,12(r16)
   4af38:	003fe306 	br	4aec8 <__smakebuf_r+0xa0>
   4af3c:	288010c4 	addi	r2,r5,67
   4af40:	28800015 	stw	r2,0(r5)
   4af44:	28800415 	stw	r2,16(r5)
   4af48:	00800044 	movi	r2,1
   4af4c:	28800515 	stw	r2,20(r5)
   4af50:	dfc01217 	ldw	ra,72(sp)
   4af54:	dc801117 	ldw	r18,68(sp)
   4af58:	dc401017 	ldw	r17,64(sp)
   4af5c:	dc000f17 	ldw	r16,60(sp)
   4af60:	dec01304 	addi	sp,sp,76
   4af64:	f800283a 	ret
   4af68:	04801004 	movi	r18,64
   4af6c:	003ff006 	br	4af30 <__smakebuf_r+0x108>
   4af70:	81000a17 	ldw	r4,40(r16)
   4af74:	00c00174 	movhi	r3,5
   4af78:	18f4a404 	addi	r3,r3,-11632
   4af7c:	20ffc01e 	bne	r4,r3,4ae80 <__smakebuf_r+0x58>
   4af80:	8080030b 	ldhu	r2,12(r16)
   4af84:	00c10004 	movi	r3,1024
   4af88:	80c01315 	stw	r3,76(r16)
   4af8c:	10c4b03a 	or	r2,r2,r3
   4af90:	8080030d 	sth	r2,12(r16)
   4af94:	003fcb06 	br	4aec4 <__smakebuf_r+0x9c>
   4af98:	8080030b 	ldhu	r2,12(r16)
   4af9c:	10c0800c 	andi	r3,r2,512
   4afa0:	18ffffcc 	andi	r3,r3,65535
   4afa4:	18e0001c 	xori	r3,r3,32768
   4afa8:	18e00004 	addi	r3,r3,-32768
   4afac:	183fd31e 	bne	r3,zero,4aefc <__smakebuf_r+0xd4>
   4afb0:	10800094 	ori	r2,r2,2
   4afb4:	80c010c4 	addi	r3,r16,67
   4afb8:	8080030d 	sth	r2,12(r16)
   4afbc:	00800044 	movi	r2,1
   4afc0:	80c00015 	stw	r3,0(r16)
   4afc4:	80c00415 	stw	r3,16(r16)
   4afc8:	80800515 	stw	r2,20(r16)
   4afcc:	003fcb06 	br	4aefc <__smakebuf_r+0xd4>

0004afd0 <_malloc_r>:
   4afd0:	defff604 	addi	sp,sp,-40
   4afd4:	dc800215 	stw	r18,8(sp)
   4afd8:	dfc00915 	stw	ra,36(sp)
   4afdc:	df000815 	stw	fp,32(sp)
   4afe0:	ddc00715 	stw	r23,28(sp)
   4afe4:	dd800615 	stw	r22,24(sp)
   4afe8:	dd400515 	stw	r21,20(sp)
   4afec:	dd000415 	stw	r20,16(sp)
   4aff0:	dcc00315 	stw	r19,12(sp)
   4aff4:	dc400115 	stw	r17,4(sp)
   4aff8:	dc000015 	stw	r16,0(sp)
   4affc:	288002c4 	addi	r2,r5,11
   4b000:	00c00584 	movi	r3,22
   4b004:	2025883a 	mov	r18,r4
   4b008:	18802b2e 	bgeu	r3,r2,4b0b8 <_malloc_r+0xe8>
   4b00c:	047ffe04 	movi	r17,-8
   4b010:	1462703a 	and	r17,r2,r17
   4b014:	88002a16 	blt	r17,zero,4b0c0 <_malloc_r+0xf0>
   4b018:	89402936 	bltu	r17,r5,4b0c0 <_malloc_r+0xf0>
   4b01c:	9009883a 	mov	r4,r18
   4b020:	004eca40 	call	4eca4 <__malloc_lock>
   4b024:	00807dc4 	movi	r2,503
   4b028:	14402936 	bltu	r2,r17,4b0d0 <_malloc_r+0x100>
   4b02c:	8808d0fa 	srli	r4,r17,3
   4b030:	04c00174 	movhi	r19,5
   4b034:	9cc82f04 	addi	r19,r19,8380
   4b038:	2105883a 	add	r2,r4,r4
   4b03c:	1085883a 	add	r2,r2,r2
   4b040:	1085883a 	add	r2,r2,r2
   4b044:	9885883a 	add	r2,r19,r2
   4b048:	14000317 	ldw	r16,12(r2)
   4b04c:	80815526 	beq	r16,r2,4b5a4 <_malloc_r+0x5d4>
   4b050:	81000117 	ldw	r4,4(r16)
   4b054:	00bfff04 	movi	r2,-4
   4b058:	80c00317 	ldw	r3,12(r16)
   4b05c:	2084703a 	and	r2,r4,r2
   4b060:	8085883a 	add	r2,r16,r2
   4b064:	11800117 	ldw	r6,4(r2)
   4b068:	81400217 	ldw	r5,8(r16)
   4b06c:	9009883a 	mov	r4,r18
   4b070:	31800054 	ori	r6,r6,1
   4b074:	11800115 	stw	r6,4(r2)
   4b078:	28c00315 	stw	r3,12(r5)
   4b07c:	19400215 	stw	r5,8(r3)
   4b080:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4b084:	80800204 	addi	r2,r16,8
   4b088:	dfc00917 	ldw	ra,36(sp)
   4b08c:	df000817 	ldw	fp,32(sp)
   4b090:	ddc00717 	ldw	r23,28(sp)
   4b094:	dd800617 	ldw	r22,24(sp)
   4b098:	dd400517 	ldw	r21,20(sp)
   4b09c:	dd000417 	ldw	r20,16(sp)
   4b0a0:	dcc00317 	ldw	r19,12(sp)
   4b0a4:	dc800217 	ldw	r18,8(sp)
   4b0a8:	dc400117 	ldw	r17,4(sp)
   4b0ac:	dc000017 	ldw	r16,0(sp)
   4b0b0:	dec00a04 	addi	sp,sp,40
   4b0b4:	f800283a 	ret
   4b0b8:	04400404 	movi	r17,16
   4b0bc:	897fd72e 	bgeu	r17,r5,4b01c <_malloc_r+0x4c>
   4b0c0:	00800304 	movi	r2,12
   4b0c4:	90800015 	stw	r2,0(r18)
   4b0c8:	0005883a 	mov	r2,zero
   4b0cc:	003fee06 	br	4b088 <_malloc_r+0xb8>
   4b0d0:	8808d27a 	srli	r4,r17,9
   4b0d4:	20007126 	beq	r4,zero,4b29c <_malloc_r+0x2cc>
   4b0d8:	00800104 	movi	r2,4
   4b0dc:	1100eb36 	bltu	r2,r4,4b48c <_malloc_r+0x4bc>
   4b0e0:	8808d1ba 	srli	r4,r17,6
   4b0e4:	21000e04 	addi	r4,r4,56
   4b0e8:	210b883a 	add	r5,r4,r4
   4b0ec:	294b883a 	add	r5,r5,r5
   4b0f0:	294b883a 	add	r5,r5,r5
   4b0f4:	04c00174 	movhi	r19,5
   4b0f8:	9cc82f04 	addi	r19,r19,8380
   4b0fc:	994b883a 	add	r5,r19,r5
   4b100:	2c000317 	ldw	r16,12(r5)
   4b104:	2c000e26 	beq	r5,r16,4b140 <_malloc_r+0x170>
   4b108:	80c00117 	ldw	r3,4(r16)
   4b10c:	01ffff04 	movi	r7,-4
   4b110:	018003c4 	movi	r6,15
   4b114:	19c6703a 	and	r3,r3,r7
   4b118:	1c45c83a 	sub	r2,r3,r17
   4b11c:	30800716 	blt	r6,r2,4b13c <_malloc_r+0x16c>
   4b120:	1000610e 	bge	r2,zero,4b2a8 <_malloc_r+0x2d8>
   4b124:	84000317 	ldw	r16,12(r16)
   4b128:	2c000526 	beq	r5,r16,4b140 <_malloc_r+0x170>
   4b12c:	80c00117 	ldw	r3,4(r16)
   4b130:	19c6703a 	and	r3,r3,r7
   4b134:	1c45c83a 	sub	r2,r3,r17
   4b138:	30bff90e 	bge	r6,r2,4b120 <_malloc_r+0x150>
   4b13c:	213fffc4 	addi	r4,r4,-1
   4b140:	21000044 	addi	r4,r4,1
   4b144:	9c000417 	ldw	r16,16(r19)
   4b148:	00c00174 	movhi	r3,5
   4b14c:	18c82f04 	addi	r3,r3,8380
   4b150:	1a400204 	addi	r9,r3,8
   4b154:	8240ff26 	beq	r16,r9,4b554 <_malloc_r+0x584>
   4b158:	81400117 	ldw	r5,4(r16)
   4b15c:	00bfff04 	movi	r2,-4
   4b160:	018003c4 	movi	r6,15
   4b164:	2884703a 	and	r2,r5,r2
   4b168:	144bc83a 	sub	r5,r2,r17
   4b16c:	3140ea16 	blt	r6,r5,4b518 <_malloc_r+0x548>
   4b170:	1a400515 	stw	r9,20(r3)
   4b174:	1a400415 	stw	r9,16(r3)
   4b178:	2800570e 	bge	r5,zero,4b2d8 <_malloc_r+0x308>
   4b17c:	01407fc4 	movi	r5,511
   4b180:	2880ca36 	bltu	r5,r2,4b4ac <_malloc_r+0x4dc>
   4b184:	1004d0fa 	srli	r2,r2,3
   4b188:	02000044 	movi	r8,1
   4b18c:	19c00117 	ldw	r7,4(r3)
   4b190:	108b883a 	add	r5,r2,r2
   4b194:	294b883a 	add	r5,r5,r5
   4b198:	1005d0ba 	srai	r2,r2,2
   4b19c:	294b883a 	add	r5,r5,r5
   4b1a0:	28cb883a 	add	r5,r5,r3
   4b1a4:	29800217 	ldw	r6,8(r5)
   4b1a8:	4084983a 	sll	r2,r8,r2
   4b1ac:	81400315 	stw	r5,12(r16)
   4b1b0:	81800215 	stw	r6,8(r16)
   4b1b4:	11c4b03a 	or	r2,r2,r7
   4b1b8:	18800115 	stw	r2,4(r3)
   4b1bc:	2c000215 	stw	r16,8(r5)
   4b1c0:	34000315 	stw	r16,12(r6)
   4b1c4:	200bd0ba 	srai	r5,r4,2
   4b1c8:	00c00044 	movi	r3,1
   4b1cc:	194a983a 	sll	r5,r3,r5
   4b1d0:	11404936 	bltu	r2,r5,4b2f8 <_malloc_r+0x328>
   4b1d4:	1146703a 	and	r3,r2,r5
   4b1d8:	18000a1e 	bne	r3,zero,4b204 <_malloc_r+0x234>
   4b1dc:	00ffff04 	movi	r3,-4
   4b1e0:	294b883a 	add	r5,r5,r5
   4b1e4:	20c8703a 	and	r4,r4,r3
   4b1e8:	1146703a 	and	r3,r2,r5
   4b1ec:	21000104 	addi	r4,r4,4
   4b1f0:	1800041e 	bne	r3,zero,4b204 <_malloc_r+0x234>
   4b1f4:	294b883a 	add	r5,r5,r5
   4b1f8:	1146703a 	and	r3,r2,r5
   4b1fc:	21000104 	addi	r4,r4,4
   4b200:	183ffc26 	beq	r3,zero,4b1f4 <_malloc_r+0x224>
   4b204:	023fff04 	movi	r8,-4
   4b208:	01c003c4 	movi	r7,15
   4b20c:	2105883a 	add	r2,r4,r4
   4b210:	1085883a 	add	r2,r2,r2
   4b214:	1085883a 	add	r2,r2,r2
   4b218:	9899883a 	add	r12,r19,r2
   4b21c:	62800304 	addi	r10,r12,12
   4b220:	2017883a 	mov	r11,r4
   4b224:	54000017 	ldw	r16,0(r10)
   4b228:	51bffd04 	addi	r6,r10,-12
   4b22c:	8180041e 	bne	r16,r6,4b240 <_malloc_r+0x270>
   4b230:	0000ca06 	br	4b55c <_malloc_r+0x58c>
   4b234:	10001c0e 	bge	r2,zero,4b2a8 <_malloc_r+0x2d8>
   4b238:	84000317 	ldw	r16,12(r16)
   4b23c:	8180c726 	beq	r16,r6,4b55c <_malloc_r+0x58c>
   4b240:	80c00117 	ldw	r3,4(r16)
   4b244:	1a06703a 	and	r3,r3,r8
   4b248:	1c45c83a 	sub	r2,r3,r17
   4b24c:	38bff90e 	bge	r7,r2,4b234 <_malloc_r+0x264>
   4b250:	81000317 	ldw	r4,12(r16)
   4b254:	81400217 	ldw	r5,8(r16)
   4b258:	8447883a 	add	r3,r16,r17
   4b25c:	8c400054 	ori	r17,r17,1
   4b260:	29000315 	stw	r4,12(r5)
   4b264:	21400215 	stw	r5,8(r4)
   4b268:	84400115 	stw	r17,4(r16)
   4b26c:	1889883a 	add	r4,r3,r2
   4b270:	11400054 	ori	r5,r2,1
   4b274:	98c00515 	stw	r3,20(r19)
   4b278:	98c00415 	stw	r3,16(r19)
   4b27c:	20800015 	stw	r2,0(r4)
   4b280:	1a400315 	stw	r9,12(r3)
   4b284:	1a400215 	stw	r9,8(r3)
   4b288:	19400115 	stw	r5,4(r3)
   4b28c:	9009883a 	mov	r4,r18
   4b290:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4b294:	80800204 	addi	r2,r16,8
   4b298:	003f7b06 	br	4b088 <_malloc_r+0xb8>
   4b29c:	8808d0fa 	srli	r4,r17,3
   4b2a0:	210b883a 	add	r5,r4,r4
   4b2a4:	003f9106 	br	4b0ec <_malloc_r+0x11c>
   4b2a8:	80c7883a 	add	r3,r16,r3
   4b2ac:	19400117 	ldw	r5,4(r3)
   4b2b0:	80800317 	ldw	r2,12(r16)
   4b2b4:	81000217 	ldw	r4,8(r16)
   4b2b8:	29400054 	ori	r5,r5,1
   4b2bc:	19400115 	stw	r5,4(r3)
   4b2c0:	20800315 	stw	r2,12(r4)
   4b2c4:	11000215 	stw	r4,8(r2)
   4b2c8:	9009883a 	mov	r4,r18
   4b2cc:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4b2d0:	80800204 	addi	r2,r16,8
   4b2d4:	003f6c06 	br	4b088 <_malloc_r+0xb8>
   4b2d8:	8085883a 	add	r2,r16,r2
   4b2dc:	10c00117 	ldw	r3,4(r2)
   4b2e0:	9009883a 	mov	r4,r18
   4b2e4:	18c00054 	ori	r3,r3,1
   4b2e8:	10c00115 	stw	r3,4(r2)
   4b2ec:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4b2f0:	80800204 	addi	r2,r16,8
   4b2f4:	003f6406 	br	4b088 <_malloc_r+0xb8>
   4b2f8:	9c000217 	ldw	r16,8(r19)
   4b2fc:	00bfff04 	movi	r2,-4
   4b300:	85400117 	ldw	r21,4(r16)
   4b304:	a8aa703a 	and	r21,r21,r2
   4b308:	ac400336 	bltu	r21,r17,4b318 <_malloc_r+0x348>
   4b30c:	ac45c83a 	sub	r2,r21,r17
   4b310:	00c003c4 	movi	r3,15
   4b314:	18805316 	blt	r3,r2,4b464 <_malloc_r+0x494>
   4b318:	d5e72717 	ldw	r23,-25444(gp)
   4b31c:	d0e00e17 	ldw	r3,-32712(gp)
   4b320:	00bfffc4 	movi	r2,-1
   4b324:	8579883a 	add	fp,r16,r21
   4b328:	8def883a 	add	r23,r17,r23
   4b32c:	1880d226 	beq	r3,r2,4b678 <_malloc_r+0x6a8>
   4b330:	bdc403c4 	addi	r23,r23,4111
   4b334:	00bc0004 	movi	r2,-4096
   4b338:	b8ae703a 	and	r23,r23,r2
   4b33c:	9009883a 	mov	r4,r18
   4b340:	b80b883a 	mov	r5,r23
   4b344:	004d1500 	call	4d150 <_sbrk_r>
   4b348:	1029883a 	mov	r20,r2
   4b34c:	00bfffc4 	movi	r2,-1
   4b350:	a080d126 	beq	r20,r2,4b698 <_malloc_r+0x6c8>
   4b354:	a7009f36 	bltu	r20,fp,4b5d4 <_malloc_r+0x604>
   4b358:	05800174 	movhi	r22,5
   4b35c:	b5951304 	addi	r22,r22,21580
   4b360:	b0800017 	ldw	r2,0(r22)
   4b364:	b885883a 	add	r2,r23,r2
   4b368:	b0800015 	stw	r2,0(r22)
   4b36c:	e500cf26 	beq	fp,r20,4b6ac <_malloc_r+0x6dc>
   4b370:	d1200e17 	ldw	r4,-32712(gp)
   4b374:	00ffffc4 	movi	r3,-1
   4b378:	20c0e026 	beq	r4,r3,4b6fc <_malloc_r+0x72c>
   4b37c:	a739c83a 	sub	fp,r20,fp
   4b380:	1705883a 	add	r2,r2,fp
   4b384:	b0800015 	stw	r2,0(r22)
   4b388:	a08001cc 	andi	r2,r20,7
   4b38c:	1000a526 	beq	r2,zero,4b624 <_malloc_r+0x654>
   4b390:	a0a9c83a 	sub	r20,r20,r2
   4b394:	00c40204 	movi	r3,4104
   4b398:	a5000204 	addi	r20,r20,8
   4b39c:	1885c83a 	sub	r2,r3,r2
   4b3a0:	a5c7883a 	add	r3,r20,r23
   4b3a4:	18c3ffcc 	andi	r3,r3,4095
   4b3a8:	10efc83a 	sub	r23,r2,r3
   4b3ac:	9009883a 	mov	r4,r18
   4b3b0:	b80b883a 	mov	r5,r23
   4b3b4:	004d1500 	call	4d150 <_sbrk_r>
   4b3b8:	00ffffc4 	movi	r3,-1
   4b3bc:	10c0cc26 	beq	r2,r3,4b6f0 <_malloc_r+0x720>
   4b3c0:	1505c83a 	sub	r2,r2,r20
   4b3c4:	b887883a 	add	r3,r23,r2
   4b3c8:	18c00054 	ori	r3,r3,1
   4b3cc:	b0800017 	ldw	r2,0(r22)
   4b3d0:	9d000215 	stw	r20,8(r19)
   4b3d4:	a0c00115 	stw	r3,4(r20)
   4b3d8:	b885883a 	add	r2,r23,r2
   4b3dc:	b0800015 	stw	r2,0(r22)
   4b3e0:	84c00e26 	beq	r16,r19,4b41c <_malloc_r+0x44c>
   4b3e4:	00c003c4 	movi	r3,15
   4b3e8:	1d40902e 	bgeu	r3,r21,4b62c <_malloc_r+0x65c>
   4b3ec:	ad7ffd04 	addi	r21,r21,-12
   4b3f0:	013ffe04 	movi	r4,-8
   4b3f4:	a908703a 	and	r4,r21,r4
   4b3f8:	810b883a 	add	r5,r16,r4
   4b3fc:	01800144 	movi	r6,5
   4b400:	29800115 	stw	r6,4(r5)
   4b404:	29800215 	stw	r6,8(r5)
   4b408:	81400117 	ldw	r5,4(r16)
   4b40c:	2940004c 	andi	r5,r5,1
   4b410:	214ab03a 	or	r5,r4,r5
   4b414:	81400115 	stw	r5,4(r16)
   4b418:	1900ae36 	bltu	r3,r4,4b6d4 <_malloc_r+0x704>
   4b41c:	d0e72617 	ldw	r3,-25448(gp)
   4b420:	1880012e 	bgeu	r3,r2,4b428 <_malloc_r+0x458>
   4b424:	d0a72615 	stw	r2,-25448(gp)
   4b428:	d0e72517 	ldw	r3,-25452(gp)
   4b42c:	9c000217 	ldw	r16,8(r19)
   4b430:	1880012e 	bgeu	r3,r2,4b438 <_malloc_r+0x468>
   4b434:	d0a72515 	stw	r2,-25452(gp)
   4b438:	80c00117 	ldw	r3,4(r16)
   4b43c:	00bfff04 	movi	r2,-4
   4b440:	1886703a 	and	r3,r3,r2
   4b444:	1c45c83a 	sub	r2,r3,r17
   4b448:	1c400236 	bltu	r3,r17,4b454 <_malloc_r+0x484>
   4b44c:	00c003c4 	movi	r3,15
   4b450:	18800416 	blt	r3,r2,4b464 <_malloc_r+0x494>
   4b454:	9009883a 	mov	r4,r18
   4b458:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4b45c:	0005883a 	mov	r2,zero
   4b460:	003f0906 	br	4b088 <_malloc_r+0xb8>
   4b464:	88c00054 	ori	r3,r17,1
   4b468:	10800054 	ori	r2,r2,1
   4b46c:	80c00115 	stw	r3,4(r16)
   4b470:	8463883a 	add	r17,r16,r17
   4b474:	88800115 	stw	r2,4(r17)
   4b478:	9009883a 	mov	r4,r18
   4b47c:	9c400215 	stw	r17,8(r19)
   4b480:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4b484:	80800204 	addi	r2,r16,8
   4b488:	003eff06 	br	4b088 <_malloc_r+0xb8>
   4b48c:	00800504 	movi	r2,20
   4b490:	1100492e 	bgeu	r2,r4,4b5b8 <_malloc_r+0x5e8>
   4b494:	00801504 	movi	r2,84
   4b498:	11005c36 	bltu	r2,r4,4b60c <_malloc_r+0x63c>
   4b49c:	8808d33a 	srli	r4,r17,12
   4b4a0:	21001b84 	addi	r4,r4,110
   4b4a4:	210b883a 	add	r5,r4,r4
   4b4a8:	003f1006 	br	4b0ec <_malloc_r+0x11c>
   4b4ac:	1006d27a 	srli	r3,r2,9
   4b4b0:	01400104 	movi	r5,4
   4b4b4:	28c0432e 	bgeu	r5,r3,4b5c4 <_malloc_r+0x5f4>
   4b4b8:	01400504 	movi	r5,20
   4b4bc:	28c07036 	bltu	r5,r3,4b680 <_malloc_r+0x6b0>
   4b4c0:	194016c4 	addi	r5,r3,91
   4b4c4:	294d883a 	add	r6,r5,r5
   4b4c8:	318d883a 	add	r6,r6,r6
   4b4cc:	318d883a 	add	r6,r6,r6
   4b4d0:	998d883a 	add	r6,r19,r6
   4b4d4:	30c00217 	ldw	r3,8(r6)
   4b4d8:	01c00174 	movhi	r7,5
   4b4dc:	39c82f04 	addi	r7,r7,8380
   4b4e0:	19805726 	beq	r3,r6,4b640 <_malloc_r+0x670>
   4b4e4:	01ffff04 	movi	r7,-4
   4b4e8:	19400117 	ldw	r5,4(r3)
   4b4ec:	29ca703a 	and	r5,r5,r7
   4b4f0:	1140022e 	bgeu	r2,r5,4b4fc <_malloc_r+0x52c>
   4b4f4:	18c00217 	ldw	r3,8(r3)
   4b4f8:	30fffb1e 	bne	r6,r3,4b4e8 <_malloc_r+0x518>
   4b4fc:	19400317 	ldw	r5,12(r3)
   4b500:	98800117 	ldw	r2,4(r19)
   4b504:	81400315 	stw	r5,12(r16)
   4b508:	80c00215 	stw	r3,8(r16)
   4b50c:	2c000215 	stw	r16,8(r5)
   4b510:	1c000315 	stw	r16,12(r3)
   4b514:	003f2b06 	br	4b1c4 <_malloc_r+0x1f4>
   4b518:	8445883a 	add	r2,r16,r17
   4b51c:	8c400054 	ori	r17,r17,1
   4b520:	18800515 	stw	r2,20(r3)
   4b524:	18800415 	stw	r2,16(r3)
   4b528:	29000054 	ori	r4,r5,1
   4b52c:	1147883a 	add	r3,r2,r5
   4b530:	84400115 	stw	r17,4(r16)
   4b534:	11000115 	stw	r4,4(r2)
   4b538:	12400315 	stw	r9,12(r2)
   4b53c:	12400215 	stw	r9,8(r2)
   4b540:	19400015 	stw	r5,0(r3)
   4b544:	9009883a 	mov	r4,r18
   4b548:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4b54c:	80800204 	addi	r2,r16,8
   4b550:	003ecd06 	br	4b088 <_malloc_r+0xb8>
   4b554:	18800117 	ldw	r2,4(r3)
   4b558:	003f1a06 	br	4b1c4 <_malloc_r+0x1f4>
   4b55c:	5ac00044 	addi	r11,r11,1
   4b560:	588000cc 	andi	r2,r11,3
   4b564:	52800204 	addi	r10,r10,8
   4b568:	103f2e1e 	bne	r2,zero,4b224 <_malloc_r+0x254>
   4b56c:	20c000cc 	andi	r3,r4,3
   4b570:	60bffe04 	addi	r2,r12,-8
   4b574:	18006f26 	beq	r3,zero,4b734 <_malloc_r+0x764>
   4b578:	63000017 	ldw	r12,0(r12)
   4b57c:	213fffc4 	addi	r4,r4,-1
   4b580:	60bffa26 	beq	r12,r2,4b56c <_malloc_r+0x59c>
   4b584:	98800117 	ldw	r2,4(r19)
   4b588:	294b883a 	add	r5,r5,r5
   4b58c:	117f5a36 	bltu	r2,r5,4b2f8 <_malloc_r+0x328>
   4b590:	283f5926 	beq	r5,zero,4b2f8 <_malloc_r+0x328>
   4b594:	1146703a 	and	r3,r2,r5
   4b598:	18001626 	beq	r3,zero,4b5f4 <_malloc_r+0x624>
   4b59c:	5809883a 	mov	r4,r11
   4b5a0:	003f1a06 	br	4b20c <_malloc_r+0x23c>
   4b5a4:	80800204 	addi	r2,r16,8
   4b5a8:	84000517 	ldw	r16,20(r16)
   4b5ac:	143ea81e 	bne	r2,r16,4b050 <_malloc_r+0x80>
   4b5b0:	21000084 	addi	r4,r4,2
   4b5b4:	003ee306 	br	4b144 <_malloc_r+0x174>
   4b5b8:	210016c4 	addi	r4,r4,91
   4b5bc:	210b883a 	add	r5,r4,r4
   4b5c0:	003eca06 	br	4b0ec <_malloc_r+0x11c>
   4b5c4:	100ad1ba 	srli	r5,r2,6
   4b5c8:	29400e04 	addi	r5,r5,56
   4b5cc:	294d883a 	add	r6,r5,r5
   4b5d0:	003fbd06 	br	4b4c8 <_malloc_r+0x4f8>
   4b5d4:	84ff6026 	beq	r16,r19,4b358 <_malloc_r+0x388>
   4b5d8:	00800174 	movhi	r2,5
   4b5dc:	10882f04 	addi	r2,r2,8380
   4b5e0:	14000217 	ldw	r16,8(r2)
   4b5e4:	00bfff04 	movi	r2,-4
   4b5e8:	80c00117 	ldw	r3,4(r16)
   4b5ec:	1886703a 	and	r3,r3,r2
   4b5f0:	003f9406 	br	4b444 <_malloc_r+0x474>
   4b5f4:	294b883a 	add	r5,r5,r5
   4b5f8:	1146703a 	and	r3,r2,r5
   4b5fc:	5ac00104 	addi	r11,r11,4
   4b600:	183ffc26 	beq	r3,zero,4b5f4 <_malloc_r+0x624>
   4b604:	5809883a 	mov	r4,r11
   4b608:	003f0006 	br	4b20c <_malloc_r+0x23c>
   4b60c:	00805504 	movi	r2,340
   4b610:	11001336 	bltu	r2,r4,4b660 <_malloc_r+0x690>
   4b614:	8808d3fa 	srli	r4,r17,15
   4b618:	21001dc4 	addi	r4,r4,119
   4b61c:	210b883a 	add	r5,r4,r4
   4b620:	003eb206 	br	4b0ec <_malloc_r+0x11c>
   4b624:	00840004 	movi	r2,4096
   4b628:	003f5d06 	br	4b3a0 <_malloc_r+0x3d0>
   4b62c:	00800044 	movi	r2,1
   4b630:	a0800115 	stw	r2,4(r20)
   4b634:	a021883a 	mov	r16,r20
   4b638:	0007883a 	mov	r3,zero
   4b63c:	003f8106 	br	4b444 <_malloc_r+0x474>
   4b640:	280bd0ba 	srai	r5,r5,2
   4b644:	01800044 	movi	r6,1
   4b648:	38800117 	ldw	r2,4(r7)
   4b64c:	314c983a 	sll	r6,r6,r5
   4b650:	180b883a 	mov	r5,r3
   4b654:	3084b03a 	or	r2,r6,r2
   4b658:	38800115 	stw	r2,4(r7)
   4b65c:	003fa906 	br	4b504 <_malloc_r+0x534>
   4b660:	00815504 	movi	r2,1364
   4b664:	11001836 	bltu	r2,r4,4b6c8 <_malloc_r+0x6f8>
   4b668:	8808d4ba 	srli	r4,r17,18
   4b66c:	21001f04 	addi	r4,r4,124
   4b670:	210b883a 	add	r5,r4,r4
   4b674:	003e9d06 	br	4b0ec <_malloc_r+0x11c>
   4b678:	bdc00404 	addi	r23,r23,16
   4b67c:	003f2f06 	br	4b33c <_malloc_r+0x36c>
   4b680:	01401504 	movi	r5,84
   4b684:	28c01f36 	bltu	r5,r3,4b704 <_malloc_r+0x734>
   4b688:	100ad33a 	srli	r5,r2,12
   4b68c:	29401b84 	addi	r5,r5,110
   4b690:	294d883a 	add	r6,r5,r5
   4b694:	003f8c06 	br	4b4c8 <_malloc_r+0x4f8>
   4b698:	9c000217 	ldw	r16,8(r19)
   4b69c:	00bfff04 	movi	r2,-4
   4b6a0:	80c00117 	ldw	r3,4(r16)
   4b6a4:	1886703a 	and	r3,r3,r2
   4b6a8:	003f6606 	br	4b444 <_malloc_r+0x474>
   4b6ac:	e0c3ffcc 	andi	r3,fp,4095
   4b6b0:	183f2f1e 	bne	r3,zero,4b370 <_malloc_r+0x3a0>
   4b6b4:	98c00217 	ldw	r3,8(r19)
   4b6b8:	bd49883a 	add	r4,r23,r21
   4b6bc:	21000054 	ori	r4,r4,1
   4b6c0:	19000115 	stw	r4,4(r3)
   4b6c4:	003f5506 	br	4b41c <_malloc_r+0x44c>
   4b6c8:	01403f04 	movi	r5,252
   4b6cc:	01001f84 	movi	r4,126
   4b6d0:	003e8606 	br	4b0ec <_malloc_r+0x11c>
   4b6d4:	9009883a 	mov	r4,r18
   4b6d8:	81400204 	addi	r5,r16,8
   4b6dc:	004a4380 	call	4a438 <_free_r>
   4b6e0:	00800174 	movhi	r2,5
   4b6e4:	10951304 	addi	r2,r2,21580
   4b6e8:	10800017 	ldw	r2,0(r2)
   4b6ec:	003f4b06 	br	4b41c <_malloc_r+0x44c>
   4b6f0:	00c00044 	movi	r3,1
   4b6f4:	002f883a 	mov	r23,zero
   4b6f8:	003f3406 	br	4b3cc <_malloc_r+0x3fc>
   4b6fc:	d5200e15 	stw	r20,-32712(gp)
   4b700:	003f2106 	br	4b388 <_malloc_r+0x3b8>
   4b704:	01405504 	movi	r5,340
   4b708:	28c00436 	bltu	r5,r3,4b71c <_malloc_r+0x74c>
   4b70c:	100ad3fa 	srli	r5,r2,15
   4b710:	29401dc4 	addi	r5,r5,119
   4b714:	294d883a 	add	r6,r5,r5
   4b718:	003f6b06 	br	4b4c8 <_malloc_r+0x4f8>
   4b71c:	01415504 	movi	r5,1364
   4b720:	28c00936 	bltu	r5,r3,4b748 <_malloc_r+0x778>
   4b724:	100ad4ba 	srli	r5,r2,18
   4b728:	29401f04 	addi	r5,r5,124
   4b72c:	294d883a 	add	r6,r5,r5
   4b730:	003f6506 	br	4b4c8 <_malloc_r+0x4f8>
   4b734:	98800117 	ldw	r2,4(r19)
   4b738:	0146303a 	nor	r3,zero,r5
   4b73c:	1884703a 	and	r2,r3,r2
   4b740:	98800115 	stw	r2,4(r19)
   4b744:	003f9006 	br	4b588 <_malloc_r+0x5b8>
   4b748:	01803f04 	movi	r6,252
   4b74c:	01401f84 	movi	r5,126
   4b750:	003f5d06 	br	4b4c8 <_malloc_r+0x4f8>

0004b754 <memchr>:
   4b754:	008000c4 	movi	r2,3
   4b758:	29403fcc 	andi	r5,r5,255
   4b75c:	1180282e 	bgeu	r2,r6,4b800 <memchr+0xac>
   4b760:	2086703a 	and	r3,r4,r2
   4b764:	1800351e 	bne	r3,zero,4b83c <memchr+0xe8>
   4b768:	2816923a 	slli	r11,r5,8
   4b76c:	2093883a 	add	r9,r4,r2
   4b770:	22000084 	addi	r8,r4,2
   4b774:	5957883a 	add	r11,r11,r5
   4b778:	5816923a 	slli	r11,r11,8
   4b77c:	20c00044 	addi	r3,r4,1
   4b780:	037fbff4 	movhi	r13,65279
   4b784:	6b7fbfc4 	addi	r13,r13,-257
   4b788:	5957883a 	add	r11,r11,r5
   4b78c:	5816923a 	slli	r11,r11,8
   4b790:	03202074 	movhi	r12,32897
   4b794:	63202004 	addi	r12,r12,-32640
   4b798:	101d883a 	mov	r14,r2
   4b79c:	5957883a 	add	r11,r11,r5
   4b7a0:	21c00017 	ldw	r7,0(r4)
   4b7a4:	31bfff04 	addi	r6,r6,-4
   4b7a8:	1805883a 	mov	r2,r3
   4b7ac:	3acef03a 	xor	r7,r7,r11
   4b7b0:	3b55883a 	add	r10,r7,r13
   4b7b4:	01ce303a 	nor	r7,zero,r7
   4b7b8:	51ce703a 	and	r7,r10,r7
   4b7bc:	3b0e703a 	and	r7,r7,r12
   4b7c0:	38000a26 	beq	r7,zero,4b7ec <memchr+0x98>
   4b7c4:	21c00003 	ldbu	r7,0(r4)
   4b7c8:	39401e26 	beq	r7,r5,4b844 <memchr+0xf0>
   4b7cc:	19c00003 	ldbu	r7,0(r3)
   4b7d0:	39401926 	beq	r7,r5,4b838 <memchr+0xe4>
   4b7d4:	41c00003 	ldbu	r7,0(r8)
   4b7d8:	4005883a 	mov	r2,r8
   4b7dc:	39401626 	beq	r7,r5,4b838 <memchr+0xe4>
   4b7e0:	49c00003 	ldbu	r7,0(r9)
   4b7e4:	4805883a 	mov	r2,r9
   4b7e8:	39401326 	beq	r7,r5,4b838 <memchr+0xe4>
   4b7ec:	21000104 	addi	r4,r4,4
   4b7f0:	4a400104 	addi	r9,r9,4
   4b7f4:	42000104 	addi	r8,r8,4
   4b7f8:	18c00104 	addi	r3,r3,4
   4b7fc:	71bfe836 	bltu	r14,r6,4b7a0 <memchr+0x4c>
   4b800:	2005883a 	mov	r2,r4
   4b804:	30000a26 	beq	r6,zero,4b830 <memchr+0xdc>
   4b808:	10c00003 	ldbu	r3,0(r2)
   4b80c:	19400a26 	beq	r3,r5,4b838 <memchr+0xe4>
   4b810:	10c00044 	addi	r3,r2,1
   4b814:	118d883a 	add	r6,r2,r6
   4b818:	00000306 	br	4b828 <memchr+0xd4>
   4b81c:	11000003 	ldbu	r4,0(r2)
   4b820:	18c00044 	addi	r3,r3,1
   4b824:	21400426 	beq	r4,r5,4b838 <memchr+0xe4>
   4b828:	1805883a 	mov	r2,r3
   4b82c:	19bffb1e 	bne	r3,r6,4b81c <memchr+0xc8>
   4b830:	0005883a 	mov	r2,zero
   4b834:	f800283a 	ret
   4b838:	f800283a 	ret
   4b83c:	2005883a 	mov	r2,r4
   4b840:	003ff106 	br	4b808 <memchr+0xb4>
   4b844:	2005883a 	mov	r2,r4
   4b848:	f800283a 	ret

0004b84c <memcpy>:
   4b84c:	00c003c4 	movi	r3,15
   4b850:	2005883a 	mov	r2,r4
   4b854:	3009883a 	mov	r4,r6
   4b858:	1980032e 	bgeu	r3,r6,4b868 <memcpy+0x1c>
   4b85c:	2886b03a 	or	r3,r5,r2
   4b860:	18c000cc 	andi	r3,r3,3
   4b864:	18000926 	beq	r3,zero,4b88c <memcpy+0x40>
   4b868:	1007883a 	mov	r3,r2
   4b86c:	290f883a 	add	r7,r5,r4
   4b870:	20000526 	beq	r4,zero,4b888 <memcpy+0x3c>
   4b874:	29800003 	ldbu	r6,0(r5)
   4b878:	18c00044 	addi	r3,r3,1
   4b87c:	29400044 	addi	r5,r5,1
   4b880:	19bfffc5 	stb	r6,-1(r3)
   4b884:	29fffb1e 	bne	r5,r7,4b874 <memcpy+0x28>
   4b888:	f800283a 	ret
   4b88c:	327ffc04 	addi	r9,r6,-16
   4b890:	4812d13a 	srli	r9,r9,4
   4b894:	11000404 	addi	r4,r2,16
   4b898:	1007883a 	mov	r3,r2
   4b89c:	4810913a 	slli	r8,r9,4
   4b8a0:	280f883a 	mov	r7,r5
   4b8a4:	2209883a 	add	r4,r4,r8
   4b8a8:	3a000017 	ldw	r8,0(r7)
   4b8ac:	18c00404 	addi	r3,r3,16
   4b8b0:	39c00404 	addi	r7,r7,16
   4b8b4:	1a3ffc15 	stw	r8,-16(r3)
   4b8b8:	3a3ffd17 	ldw	r8,-12(r7)
   4b8bc:	1a3ffd15 	stw	r8,-12(r3)
   4b8c0:	3a3ffe17 	ldw	r8,-8(r7)
   4b8c4:	1a3ffe15 	stw	r8,-8(r3)
   4b8c8:	3a3fff17 	ldw	r8,-4(r7)
   4b8cc:	1a3fff15 	stw	r8,-4(r3)
   4b8d0:	193ff51e 	bne	r3,r4,4b8a8 <memcpy+0x5c>
   4b8d4:	49c00044 	addi	r7,r9,1
   4b8d8:	380e913a 	slli	r7,r7,4
   4b8dc:	310003cc 	andi	r4,r6,15
   4b8e0:	018000c4 	movi	r6,3
   4b8e4:	11c7883a 	add	r3,r2,r7
   4b8e8:	29cb883a 	add	r5,r5,r7
   4b8ec:	313fdf2e 	bgeu	r6,r4,4b86c <memcpy+0x20>
   4b8f0:	213fff04 	addi	r4,r4,-4
   4b8f4:	2014d0ba 	srli	r10,r4,2
   4b8f8:	1a400104 	addi	r9,r3,4
   4b8fc:	180d883a 	mov	r6,r3
   4b900:	528f883a 	add	r7,r10,r10
   4b904:	39cf883a 	add	r7,r7,r7
   4b908:	49d3883a 	add	r9,r9,r7
   4b90c:	280f883a 	mov	r7,r5
   4b910:	3a000017 	ldw	r8,0(r7)
   4b914:	31800104 	addi	r6,r6,4
   4b918:	39c00104 	addi	r7,r7,4
   4b91c:	323fff15 	stw	r8,-4(r6)
   4b920:	327ffb1e 	bne	r6,r9,4b910 <memcpy+0xc4>
   4b924:	51800044 	addi	r6,r10,1
   4b928:	52bfff24 	muli	r10,r10,-4
   4b92c:	318d883a 	add	r6,r6,r6
   4b930:	318d883a 	add	r6,r6,r6
   4b934:	5109883a 	add	r4,r10,r4
   4b938:	298b883a 	add	r5,r5,r6
   4b93c:	1987883a 	add	r3,r3,r6
   4b940:	003fca06 	br	4b86c <memcpy+0x20>

0004b944 <memmove>:
   4b944:	2005883a 	mov	r2,r4
   4b948:	300f883a 	mov	r7,r6
   4b94c:	29000b2e 	bgeu	r5,r4,4b97c <memmove+0x38>
   4b950:	2987883a 	add	r3,r5,r6
   4b954:	20c0092e 	bgeu	r4,r3,4b97c <memmove+0x38>
   4b958:	218b883a 	add	r5,r4,r6
   4b95c:	198fc83a 	sub	r7,r3,r6
   4b960:	30003f26 	beq	r6,zero,4ba60 <memmove+0x11c>
   4b964:	18ffffc4 	addi	r3,r3,-1
   4b968:	19000003 	ldbu	r4,0(r3)
   4b96c:	297fffc4 	addi	r5,r5,-1
   4b970:	29000005 	stb	r4,0(r5)
   4b974:	19fffb1e 	bne	r3,r7,4b964 <memmove+0x20>
   4b978:	f800283a 	ret
   4b97c:	00c003c4 	movi	r3,15
   4b980:	1980382e 	bgeu	r3,r6,4ba64 <memmove+0x120>
   4b984:	2886b03a 	or	r3,r5,r2
   4b988:	18c000cc 	andi	r3,r3,3
   4b98c:	1800351e 	bne	r3,zero,4ba64 <memmove+0x120>
   4b990:	327ffc04 	addi	r9,r6,-16
   4b994:	4812d13a 	srli	r9,r9,4
   4b998:	12000404 	addi	r8,r2,16
   4b99c:	1007883a 	mov	r3,r2
   4b9a0:	4808913a 	slli	r4,r9,4
   4b9a4:	280f883a 	mov	r7,r5
   4b9a8:	4111883a 	add	r8,r8,r4
   4b9ac:	39000017 	ldw	r4,0(r7)
   4b9b0:	18c00404 	addi	r3,r3,16
   4b9b4:	39c00404 	addi	r7,r7,16
   4b9b8:	193ffc15 	stw	r4,-16(r3)
   4b9bc:	393ffd17 	ldw	r4,-12(r7)
   4b9c0:	193ffd15 	stw	r4,-12(r3)
   4b9c4:	393ffe17 	ldw	r4,-8(r7)
   4b9c8:	193ffe15 	stw	r4,-8(r3)
   4b9cc:	393fff17 	ldw	r4,-4(r7)
   4b9d0:	193fff15 	stw	r4,-4(r3)
   4b9d4:	1a3ff51e 	bne	r3,r8,4b9ac <memmove+0x68>
   4b9d8:	49000044 	addi	r4,r9,1
   4b9dc:	2008913a 	slli	r4,r4,4
   4b9e0:	31c003cc 	andi	r7,r6,15
   4b9e4:	1107883a 	add	r3,r2,r4
   4b9e8:	290b883a 	add	r5,r5,r4
   4b9ec:	010000c4 	movi	r4,3
   4b9f0:	21c0142e 	bgeu	r4,r7,4ba44 <memmove+0x100>
   4b9f4:	39ffff04 	addi	r7,r7,-4
   4b9f8:	3814d0ba 	srli	r10,r7,2
   4b9fc:	1a400104 	addi	r9,r3,4
   4ba00:	180d883a 	mov	r6,r3
   4ba04:	5289883a 	add	r4,r10,r10
   4ba08:	2109883a 	add	r4,r4,r4
   4ba0c:	4913883a 	add	r9,r9,r4
   4ba10:	2809883a 	mov	r4,r5
   4ba14:	22000017 	ldw	r8,0(r4)
   4ba18:	31800104 	addi	r6,r6,4
   4ba1c:	21000104 	addi	r4,r4,4
   4ba20:	323fff15 	stw	r8,-4(r6)
   4ba24:	327ffb1e 	bne	r6,r9,4ba14 <memmove+0xd0>
   4ba28:	51000044 	addi	r4,r10,1
   4ba2c:	52bfff24 	muli	r10,r10,-4
   4ba30:	2109883a 	add	r4,r4,r4
   4ba34:	2109883a 	add	r4,r4,r4
   4ba38:	51cf883a 	add	r7,r10,r7
   4ba3c:	290b883a 	add	r5,r5,r4
   4ba40:	1907883a 	add	r3,r3,r4
   4ba44:	38000626 	beq	r7,zero,4ba60 <memmove+0x11c>
   4ba48:	19cf883a 	add	r7,r3,r7
   4ba4c:	29800003 	ldbu	r6,0(r5)
   4ba50:	18c00044 	addi	r3,r3,1
   4ba54:	29400044 	addi	r5,r5,1
   4ba58:	19bfffc5 	stb	r6,-1(r3)
   4ba5c:	19fffb1e 	bne	r3,r7,4ba4c <memmove+0x108>
   4ba60:	f800283a 	ret
   4ba64:	1007883a 	mov	r3,r2
   4ba68:	003ff606 	br	4ba44 <memmove+0x100>

0004ba6c <memset>:
   4ba6c:	00c000c4 	movi	r3,3
   4ba70:	2005883a 	mov	r2,r4
   4ba74:	29403fcc 	andi	r5,r5,255
   4ba78:	19802d2e 	bgeu	r3,r6,4bb30 <memset+0xc4>
   4ba7c:	20c6703a 	and	r3,r4,r3
   4ba80:	18002e1e 	bne	r3,zero,4bb3c <memset+0xd0>
   4ba84:	2806923a 	slli	r3,r5,8
   4ba88:	010003c4 	movi	r4,15
   4ba8c:	3011883a 	mov	r8,r6
   4ba90:	1946b03a 	or	r3,r3,r5
   4ba94:	180e943a 	slli	r7,r3,16
   4ba98:	38ceb03a 	or	r7,r7,r3
   4ba9c:	1007883a 	mov	r3,r2
   4baa0:	21800f2e 	bgeu	r4,r6,4bae0 <memset+0x74>
   4baa4:	19c00015 	stw	r7,0(r3)
   4baa8:	19c00115 	stw	r7,4(r3)
   4baac:	19c00215 	stw	r7,8(r3)
   4bab0:	19c00315 	stw	r7,12(r3)
   4bab4:	423ffc04 	addi	r8,r8,-16
   4bab8:	18c00404 	addi	r3,r3,16
   4babc:	223ff936 	bltu	r4,r8,4baa4 <memset+0x38>
   4bac0:	30fffc04 	addi	r3,r6,-16
   4bac4:	1806d13a 	srli	r3,r3,4
   4bac8:	318003cc 	andi	r6,r6,15
   4bacc:	010000c4 	movi	r4,3
   4bad0:	18c00044 	addi	r3,r3,1
   4bad4:	1806913a 	slli	r3,r3,4
   4bad8:	10c7883a 	add	r3,r2,r3
   4badc:	21800e2e 	bgeu	r4,r6,4bb18 <memset+0xac>
   4bae0:	1813883a 	mov	r9,r3
   4bae4:	3011883a 	mov	r8,r6
   4bae8:	010000c4 	movi	r4,3
   4baec:	49c00015 	stw	r7,0(r9)
   4baf0:	423fff04 	addi	r8,r8,-4
   4baf4:	4a400104 	addi	r9,r9,4
   4baf8:	223ffc36 	bltu	r4,r8,4baec <memset+0x80>
   4bafc:	313fff04 	addi	r4,r6,-4
   4bb00:	2008d0ba 	srli	r4,r4,2
   4bb04:	318000cc 	andi	r6,r6,3
   4bb08:	21000044 	addi	r4,r4,1
   4bb0c:	2109883a 	add	r4,r4,r4
   4bb10:	2109883a 	add	r4,r4,r4
   4bb14:	1907883a 	add	r3,r3,r4
   4bb18:	30000a26 	beq	r6,zero,4bb44 <memset+0xd8>
   4bb1c:	198d883a 	add	r6,r3,r6
   4bb20:	19400005 	stb	r5,0(r3)
   4bb24:	18c00044 	addi	r3,r3,1
   4bb28:	19bffd1e 	bne	r3,r6,4bb20 <memset+0xb4>
   4bb2c:	f800283a 	ret
   4bb30:	2007883a 	mov	r3,r4
   4bb34:	303ff91e 	bne	r6,zero,4bb1c <memset+0xb0>
   4bb38:	00000206 	br	4bb44 <memset+0xd8>
   4bb3c:	2007883a 	mov	r3,r4
   4bb40:	003ff606 	br	4bb1c <memset+0xb0>
   4bb44:	f800283a 	ret

0004bb48 <_Balloc>:
   4bb48:	20801317 	ldw	r2,76(r4)
   4bb4c:	defffc04 	addi	sp,sp,-16
   4bb50:	dc400115 	stw	r17,4(sp)
   4bb54:	dc000015 	stw	r16,0(sp)
   4bb58:	dfc00315 	stw	ra,12(sp)
   4bb5c:	dc800215 	stw	r18,8(sp)
   4bb60:	2023883a 	mov	r17,r4
   4bb64:	2821883a 	mov	r16,r5
   4bb68:	10000f26 	beq	r2,zero,4bba8 <_Balloc+0x60>
   4bb6c:	8407883a 	add	r3,r16,r16
   4bb70:	18c7883a 	add	r3,r3,r3
   4bb74:	10c7883a 	add	r3,r2,r3
   4bb78:	18800017 	ldw	r2,0(r3)
   4bb7c:	10001126 	beq	r2,zero,4bbc4 <_Balloc+0x7c>
   4bb80:	11000017 	ldw	r4,0(r2)
   4bb84:	19000015 	stw	r4,0(r3)
   4bb88:	10000415 	stw	zero,16(r2)
   4bb8c:	10000315 	stw	zero,12(r2)
   4bb90:	dfc00317 	ldw	ra,12(sp)
   4bb94:	dc800217 	ldw	r18,8(sp)
   4bb98:	dc400117 	ldw	r17,4(sp)
   4bb9c:	dc000017 	ldw	r16,0(sp)
   4bba0:	dec00404 	addi	sp,sp,16
   4bba4:	f800283a 	ret
   4bba8:	01400104 	movi	r5,4
   4bbac:	01800404 	movi	r6,16
   4bbb0:	004d4040 	call	4d404 <_calloc_r>
   4bbb4:	88801315 	stw	r2,76(r17)
   4bbb8:	103fec1e 	bne	r2,zero,4bb6c <_Balloc+0x24>
   4bbbc:	0005883a 	mov	r2,zero
   4bbc0:	003ff306 	br	4bb90 <_Balloc+0x48>
   4bbc4:	01400044 	movi	r5,1
   4bbc8:	2c24983a 	sll	r18,r5,r16
   4bbcc:	8809883a 	mov	r4,r17
   4bbd0:	91800144 	addi	r6,r18,5
   4bbd4:	318d883a 	add	r6,r6,r6
   4bbd8:	318d883a 	add	r6,r6,r6
   4bbdc:	004d4040 	call	4d404 <_calloc_r>
   4bbe0:	103ff626 	beq	r2,zero,4bbbc <_Balloc+0x74>
   4bbe4:	14000115 	stw	r16,4(r2)
   4bbe8:	14800215 	stw	r18,8(r2)
   4bbec:	003fe606 	br	4bb88 <_Balloc+0x40>

0004bbf0 <_Bfree>:
   4bbf0:	28000826 	beq	r5,zero,4bc14 <_Bfree+0x24>
   4bbf4:	28c00117 	ldw	r3,4(r5)
   4bbf8:	20801317 	ldw	r2,76(r4)
   4bbfc:	18c7883a 	add	r3,r3,r3
   4bc00:	18c7883a 	add	r3,r3,r3
   4bc04:	10c5883a 	add	r2,r2,r3
   4bc08:	10c00017 	ldw	r3,0(r2)
   4bc0c:	28c00015 	stw	r3,0(r5)
   4bc10:	11400015 	stw	r5,0(r2)
   4bc14:	f800283a 	ret

0004bc18 <__multadd>:
   4bc18:	defffa04 	addi	sp,sp,-24
   4bc1c:	dc000115 	stw	r16,4(sp)
   4bc20:	2c000417 	ldw	r16,16(r5)
   4bc24:	dc800315 	stw	r18,12(sp)
   4bc28:	dc400215 	stw	r17,8(sp)
   4bc2c:	dfc00515 	stw	ra,20(sp)
   4bc30:	dcc00415 	stw	r19,16(sp)
   4bc34:	2823883a 	mov	r17,r5
   4bc38:	2025883a 	mov	r18,r4
   4bc3c:	28c00504 	addi	r3,r5,20
   4bc40:	0011883a 	mov	r8,zero
   4bc44:	1a800017 	ldw	r10,0(r3)
   4bc48:	18c00104 	addi	r3,r3,4
   4bc4c:	42000044 	addi	r8,r8,1
   4bc50:	527fffcc 	andi	r9,r10,65535
   4bc54:	4993383a 	mul	r9,r9,r6
   4bc58:	5014d43a 	srli	r10,r10,16
   4bc5c:	49d3883a 	add	r9,r9,r7
   4bc60:	480ed43a 	srli	r7,r9,16
   4bc64:	5195383a 	mul	r10,r10,r6
   4bc68:	4a7fffcc 	andi	r9,r9,65535
   4bc6c:	3a8f883a 	add	r7,r7,r10
   4bc70:	3814943a 	slli	r10,r7,16
   4bc74:	380ed43a 	srli	r7,r7,16
   4bc78:	5253883a 	add	r9,r10,r9
   4bc7c:	1a7fff15 	stw	r9,-4(r3)
   4bc80:	443ff016 	blt	r8,r16,4bc44 <__multadd+0x2c>
   4bc84:	38000926 	beq	r7,zero,4bcac <__multadd+0x94>
   4bc88:	88800217 	ldw	r2,8(r17)
   4bc8c:	80800f0e 	bge	r16,r2,4bccc <__multadd+0xb4>
   4bc90:	80800144 	addi	r2,r16,5
   4bc94:	1085883a 	add	r2,r2,r2
   4bc98:	1085883a 	add	r2,r2,r2
   4bc9c:	8885883a 	add	r2,r17,r2
   4bca0:	84000044 	addi	r16,r16,1
   4bca4:	11c00015 	stw	r7,0(r2)
   4bca8:	8c000415 	stw	r16,16(r17)
   4bcac:	8805883a 	mov	r2,r17
   4bcb0:	dfc00517 	ldw	ra,20(sp)
   4bcb4:	dcc00417 	ldw	r19,16(sp)
   4bcb8:	dc800317 	ldw	r18,12(sp)
   4bcbc:	dc400217 	ldw	r17,8(sp)
   4bcc0:	dc000117 	ldw	r16,4(sp)
   4bcc4:	dec00604 	addi	sp,sp,24
   4bcc8:	f800283a 	ret
   4bccc:	89400117 	ldw	r5,4(r17)
   4bcd0:	9009883a 	mov	r4,r18
   4bcd4:	d9c00015 	stw	r7,0(sp)
   4bcd8:	29400044 	addi	r5,r5,1
   4bcdc:	004bb480 	call	4bb48 <_Balloc>
   4bce0:	89800417 	ldw	r6,16(r17)
   4bce4:	89400304 	addi	r5,r17,12
   4bce8:	11000304 	addi	r4,r2,12
   4bcec:	31800084 	addi	r6,r6,2
   4bcf0:	318d883a 	add	r6,r6,r6
   4bcf4:	318d883a 	add	r6,r6,r6
   4bcf8:	1027883a 	mov	r19,r2
   4bcfc:	004b84c0 	call	4b84c <memcpy>
   4bd00:	88c00117 	ldw	r3,4(r17)
   4bd04:	90801317 	ldw	r2,76(r18)
   4bd08:	d9c00017 	ldw	r7,0(sp)
   4bd0c:	18c7883a 	add	r3,r3,r3
   4bd10:	18c7883a 	add	r3,r3,r3
   4bd14:	10c5883a 	add	r2,r2,r3
   4bd18:	10c00017 	ldw	r3,0(r2)
   4bd1c:	88c00015 	stw	r3,0(r17)
   4bd20:	14400015 	stw	r17,0(r2)
   4bd24:	9823883a 	mov	r17,r19
   4bd28:	003fd906 	br	4bc90 <__multadd+0x78>

0004bd2c <__s2b>:
   4bd2c:	defff904 	addi	sp,sp,-28
   4bd30:	dd000415 	stw	r20,16(sp)
   4bd34:	dc400115 	stw	r17,4(sp)
   4bd38:	2829883a 	mov	r20,r5
   4bd3c:	2023883a 	mov	r17,r4
   4bd40:	01400244 	movi	r5,9
   4bd44:	39000204 	addi	r4,r7,8
   4bd48:	dcc00315 	stw	r19,12(sp)
   4bd4c:	dc800215 	stw	r18,8(sp)
   4bd50:	dfc00615 	stw	ra,24(sp)
   4bd54:	dd400515 	stw	r21,20(sp)
   4bd58:	dc000015 	stw	r16,0(sp)
   4bd5c:	3825883a 	mov	r18,r7
   4bd60:	3027883a 	mov	r19,r6
   4bd64:	0045b740 	call	45b74 <__divsi3>
   4bd68:	00c00044 	movi	r3,1
   4bd6c:	000b883a 	mov	r5,zero
   4bd70:	1880030e 	bge	r3,r2,4bd80 <__s2b+0x54>
   4bd74:	18c7883a 	add	r3,r3,r3
   4bd78:	29400044 	addi	r5,r5,1
   4bd7c:	18bffd16 	blt	r3,r2,4bd74 <__s2b+0x48>
   4bd80:	8809883a 	mov	r4,r17
   4bd84:	004bb480 	call	4bb48 <_Balloc>
   4bd88:	d8c00717 	ldw	r3,28(sp)
   4bd8c:	10c00515 	stw	r3,20(r2)
   4bd90:	00c00044 	movi	r3,1
   4bd94:	10c00415 	stw	r3,16(r2)
   4bd98:	00c00244 	movi	r3,9
   4bd9c:	1cc0210e 	bge	r3,r19,4be24 <__s2b+0xf8>
   4bda0:	a0eb883a 	add	r21,r20,r3
   4bda4:	a821883a 	mov	r16,r21
   4bda8:	a4e9883a 	add	r20,r20,r19
   4bdac:	81c00007 	ldb	r7,0(r16)
   4bdb0:	8809883a 	mov	r4,r17
   4bdb4:	84000044 	addi	r16,r16,1
   4bdb8:	100b883a 	mov	r5,r2
   4bdbc:	01800284 	movi	r6,10
   4bdc0:	39fff404 	addi	r7,r7,-48
   4bdc4:	004bc180 	call	4bc18 <__multadd>
   4bdc8:	853ff81e 	bne	r16,r20,4bdac <__s2b+0x80>
   4bdcc:	ace1883a 	add	r16,r21,r19
   4bdd0:	843ffe04 	addi	r16,r16,-8
   4bdd4:	9c800a0e 	bge	r19,r18,4be00 <__s2b+0xd4>
   4bdd8:	94e5c83a 	sub	r18,r18,r19
   4bddc:	84a5883a 	add	r18,r16,r18
   4bde0:	81c00007 	ldb	r7,0(r16)
   4bde4:	8809883a 	mov	r4,r17
   4bde8:	84000044 	addi	r16,r16,1
   4bdec:	100b883a 	mov	r5,r2
   4bdf0:	01800284 	movi	r6,10
   4bdf4:	39fff404 	addi	r7,r7,-48
   4bdf8:	004bc180 	call	4bc18 <__multadd>
   4bdfc:	84bff81e 	bne	r16,r18,4bde0 <__s2b+0xb4>
   4be00:	dfc00617 	ldw	ra,24(sp)
   4be04:	dd400517 	ldw	r21,20(sp)
   4be08:	dd000417 	ldw	r20,16(sp)
   4be0c:	dcc00317 	ldw	r19,12(sp)
   4be10:	dc800217 	ldw	r18,8(sp)
   4be14:	dc400117 	ldw	r17,4(sp)
   4be18:	dc000017 	ldw	r16,0(sp)
   4be1c:	dec00704 	addi	sp,sp,28
   4be20:	f800283a 	ret
   4be24:	a4000284 	addi	r16,r20,10
   4be28:	1827883a 	mov	r19,r3
   4be2c:	003fe906 	br	4bdd4 <__s2b+0xa8>

0004be30 <__hi0bits>:
   4be30:	20bfffec 	andhi	r2,r4,65535
   4be34:	1000141e 	bne	r2,zero,4be88 <__hi0bits+0x58>
   4be38:	2008943a 	slli	r4,r4,16
   4be3c:	00800404 	movi	r2,16
   4be40:	20ffc02c 	andhi	r3,r4,65280
   4be44:	1800021e 	bne	r3,zero,4be50 <__hi0bits+0x20>
   4be48:	2008923a 	slli	r4,r4,8
   4be4c:	10800204 	addi	r2,r2,8
   4be50:	20fc002c 	andhi	r3,r4,61440
   4be54:	1800021e 	bne	r3,zero,4be60 <__hi0bits+0x30>
   4be58:	2008913a 	slli	r4,r4,4
   4be5c:	10800104 	addi	r2,r2,4
   4be60:	20f0002c 	andhi	r3,r4,49152
   4be64:	1800031e 	bne	r3,zero,4be74 <__hi0bits+0x44>
   4be68:	2109883a 	add	r4,r4,r4
   4be6c:	10800084 	addi	r2,r2,2
   4be70:	2109883a 	add	r4,r4,r4
   4be74:	20000316 	blt	r4,zero,4be84 <__hi0bits+0x54>
   4be78:	2110002c 	andhi	r4,r4,16384
   4be7c:	2000041e 	bne	r4,zero,4be90 <__hi0bits+0x60>
   4be80:	00800804 	movi	r2,32
   4be84:	f800283a 	ret
   4be88:	0005883a 	mov	r2,zero
   4be8c:	003fec06 	br	4be40 <__hi0bits+0x10>
   4be90:	10800044 	addi	r2,r2,1
   4be94:	f800283a 	ret

0004be98 <__lo0bits>:
   4be98:	20c00017 	ldw	r3,0(r4)
   4be9c:	188001cc 	andi	r2,r3,7
   4bea0:	10000826 	beq	r2,zero,4bec4 <__lo0bits+0x2c>
   4bea4:	1880004c 	andi	r2,r3,1
   4bea8:	1000211e 	bne	r2,zero,4bf30 <__lo0bits+0x98>
   4beac:	1880008c 	andi	r2,r3,2
   4beb0:	1000211e 	bne	r2,zero,4bf38 <__lo0bits+0xa0>
   4beb4:	1806d0ba 	srli	r3,r3,2
   4beb8:	00800084 	movi	r2,2
   4bebc:	20c00015 	stw	r3,0(r4)
   4bec0:	f800283a 	ret
   4bec4:	18bfffcc 	andi	r2,r3,65535
   4bec8:	10001326 	beq	r2,zero,4bf18 <__lo0bits+0x80>
   4becc:	0005883a 	mov	r2,zero
   4bed0:	19403fcc 	andi	r5,r3,255
   4bed4:	2800021e 	bne	r5,zero,4bee0 <__lo0bits+0x48>
   4bed8:	1806d23a 	srli	r3,r3,8
   4bedc:	10800204 	addi	r2,r2,8
   4bee0:	194003cc 	andi	r5,r3,15
   4bee4:	2800021e 	bne	r5,zero,4bef0 <__lo0bits+0x58>
   4bee8:	1806d13a 	srli	r3,r3,4
   4beec:	10800104 	addi	r2,r2,4
   4bef0:	194000cc 	andi	r5,r3,3
   4bef4:	2800021e 	bne	r5,zero,4bf00 <__lo0bits+0x68>
   4bef8:	1806d0ba 	srli	r3,r3,2
   4befc:	10800084 	addi	r2,r2,2
   4bf00:	1940004c 	andi	r5,r3,1
   4bf04:	2800081e 	bne	r5,zero,4bf28 <__lo0bits+0x90>
   4bf08:	1806d07a 	srli	r3,r3,1
   4bf0c:	1800051e 	bne	r3,zero,4bf24 <__lo0bits+0x8c>
   4bf10:	00800804 	movi	r2,32
   4bf14:	f800283a 	ret
   4bf18:	1806d43a 	srli	r3,r3,16
   4bf1c:	00800404 	movi	r2,16
   4bf20:	003feb06 	br	4bed0 <__lo0bits+0x38>
   4bf24:	10800044 	addi	r2,r2,1
   4bf28:	20c00015 	stw	r3,0(r4)
   4bf2c:	f800283a 	ret
   4bf30:	0005883a 	mov	r2,zero
   4bf34:	f800283a 	ret
   4bf38:	1806d07a 	srli	r3,r3,1
   4bf3c:	00800044 	movi	r2,1
   4bf40:	20c00015 	stw	r3,0(r4)
   4bf44:	f800283a 	ret

0004bf48 <__i2b>:
   4bf48:	defffd04 	addi	sp,sp,-12
   4bf4c:	dc000015 	stw	r16,0(sp)
   4bf50:	04000044 	movi	r16,1
   4bf54:	dc400115 	stw	r17,4(sp)
   4bf58:	2823883a 	mov	r17,r5
   4bf5c:	800b883a 	mov	r5,r16
   4bf60:	dfc00215 	stw	ra,8(sp)
   4bf64:	004bb480 	call	4bb48 <_Balloc>
   4bf68:	14400515 	stw	r17,20(r2)
   4bf6c:	14000415 	stw	r16,16(r2)
   4bf70:	dfc00217 	ldw	ra,8(sp)
   4bf74:	dc400117 	ldw	r17,4(sp)
   4bf78:	dc000017 	ldw	r16,0(sp)
   4bf7c:	dec00304 	addi	sp,sp,12
   4bf80:	f800283a 	ret

0004bf84 <__multiply>:
   4bf84:	defffa04 	addi	sp,sp,-24
   4bf88:	dcc00315 	stw	r19,12(sp)
   4bf8c:	dc400115 	stw	r17,4(sp)
   4bf90:	34c00417 	ldw	r19,16(r6)
   4bf94:	2c400417 	ldw	r17,16(r5)
   4bf98:	dd000415 	stw	r20,16(sp)
   4bf9c:	dc800215 	stw	r18,8(sp)
   4bfa0:	dfc00515 	stw	ra,20(sp)
   4bfa4:	dc000015 	stw	r16,0(sp)
   4bfa8:	2825883a 	mov	r18,r5
   4bfac:	3029883a 	mov	r20,r6
   4bfb0:	8cc0050e 	bge	r17,r19,4bfc8 <__multiply+0x44>
   4bfb4:	8807883a 	mov	r3,r17
   4bfb8:	3025883a 	mov	r18,r6
   4bfbc:	9823883a 	mov	r17,r19
   4bfc0:	2829883a 	mov	r20,r5
   4bfc4:	1827883a 	mov	r19,r3
   4bfc8:	90800217 	ldw	r2,8(r18)
   4bfcc:	8ce1883a 	add	r16,r17,r19
   4bfd0:	91400117 	ldw	r5,4(r18)
   4bfd4:	1400010e 	bge	r2,r16,4bfdc <__multiply+0x58>
   4bfd8:	29400044 	addi	r5,r5,1
   4bfdc:	004bb480 	call	4bb48 <_Balloc>
   4bfe0:	83c00144 	addi	r15,r16,5
   4bfe4:	7bdf883a 	add	r15,r15,r15
   4bfe8:	7bdf883a 	add	r15,r15,r15
   4bfec:	13800504 	addi	r14,r2,20
   4bff0:	13df883a 	add	r15,r2,r15
   4bff4:	7007883a 	mov	r3,r14
   4bff8:	73c0032e 	bgeu	r14,r15,4c008 <__multiply+0x84>
   4bffc:	18000015 	stw	zero,0(r3)
   4c000:	18c00104 	addi	r3,r3,4
   4c004:	1bfffd36 	bltu	r3,r15,4bffc <__multiply+0x78>
   4c008:	99800144 	addi	r6,r19,5
   4c00c:	8b000144 	addi	r12,r17,5
   4c010:	318d883a 	add	r6,r6,r6
   4c014:	6319883a 	add	r12,r12,r12
   4c018:	318d883a 	add	r6,r6,r6
   4c01c:	6319883a 	add	r12,r12,r12
   4c020:	a3400504 	addi	r13,r20,20
   4c024:	a18d883a 	add	r6,r20,r6
   4c028:	94400504 	addi	r17,r18,20
   4c02c:	9319883a 	add	r12,r18,r12
   4c030:	6980392e 	bgeu	r13,r6,4c118 <__multiply+0x194>
   4c034:	6a800017 	ldw	r10,0(r13)
   4c038:	52ffffcc 	andi	r11,r10,65535
   4c03c:	58001826 	beq	r11,zero,4c0a0 <__multiply+0x11c>
   4c040:	7007883a 	mov	r3,r14
   4c044:	8809883a 	mov	r4,r17
   4c048:	000b883a 	mov	r5,zero
   4c04c:	22400017 	ldw	r9,0(r4)
   4c050:	1a000017 	ldw	r8,0(r3)
   4c054:	21000104 	addi	r4,r4,4
   4c058:	49ffffcc 	andi	r7,r9,65535
   4c05c:	3acf383a 	mul	r7,r7,r11
   4c060:	4812d43a 	srli	r9,r9,16
   4c064:	42bfffcc 	andi	r10,r8,65535
   4c068:	3a8f883a 	add	r7,r7,r10
   4c06c:	394f883a 	add	r7,r7,r5
   4c070:	4010d43a 	srli	r8,r8,16
   4c074:	4acb383a 	mul	r5,r9,r11
   4c078:	3814d43a 	srli	r10,r7,16
   4c07c:	19c0000d 	sth	r7,0(r3)
   4c080:	2a0b883a 	add	r5,r5,r8
   4c084:	2a8b883a 	add	r5,r5,r10
   4c088:	1940008d 	sth	r5,2(r3)
   4c08c:	280ad43a 	srli	r5,r5,16
   4c090:	18c00104 	addi	r3,r3,4
   4c094:	233fed36 	bltu	r4,r12,4c04c <__multiply+0xc8>
   4c098:	19400015 	stw	r5,0(r3)
   4c09c:	6a800017 	ldw	r10,0(r13)
   4c0a0:	5014d43a 	srli	r10,r10,16
   4c0a4:	50001926 	beq	r10,zero,4c10c <__multiply+0x188>
   4c0a8:	71400017 	ldw	r5,0(r14)
   4c0ac:	7007883a 	mov	r3,r14
   4c0b0:	8809883a 	mov	r4,r17
   4c0b4:	280f883a 	mov	r7,r5
   4c0b8:	0017883a 	mov	r11,zero
   4c0bc:	22400017 	ldw	r9,0(r4)
   4c0c0:	380ed43a 	srli	r7,r7,16
   4c0c4:	1940000d 	sth	r5,0(r3)
   4c0c8:	4a3fffcc 	andi	r8,r9,65535
   4c0cc:	4291383a 	mul	r8,r8,r10
   4c0d0:	4812d43a 	srli	r9,r9,16
   4c0d4:	18c00104 	addi	r3,r3,4
   4c0d8:	41d1883a 	add	r8,r8,r7
   4c0dc:	19c00017 	ldw	r7,0(r3)
   4c0e0:	42d1883a 	add	r8,r8,r11
   4c0e4:	4a93383a 	mul	r9,r9,r10
   4c0e8:	1a3fff8d 	sth	r8,-2(r3)
   4c0ec:	4010d43a 	srli	r8,r8,16
   4c0f0:	397fffcc 	andi	r5,r7,65535
   4c0f4:	2a4b883a 	add	r5,r5,r9
   4c0f8:	2a0b883a 	add	r5,r5,r8
   4c0fc:	21000104 	addi	r4,r4,4
   4c100:	2816d43a 	srli	r11,r5,16
   4c104:	233fed36 	bltu	r4,r12,4c0bc <__multiply+0x138>
   4c108:	19400015 	stw	r5,0(r3)
   4c10c:	6b400104 	addi	r13,r13,4
   4c110:	73800104 	addi	r14,r14,4
   4c114:	69bfc736 	bltu	r13,r6,4c034 <__multiply+0xb0>
   4c118:	0400090e 	bge	zero,r16,4c140 <__multiply+0x1bc>
   4c11c:	78ffff17 	ldw	r3,-4(r15)
   4c120:	7bffff04 	addi	r15,r15,-4
   4c124:	18000326 	beq	r3,zero,4c134 <__multiply+0x1b0>
   4c128:	00000506 	br	4c140 <__multiply+0x1bc>
   4c12c:	78c00017 	ldw	r3,0(r15)
   4c130:	1800031e 	bne	r3,zero,4c140 <__multiply+0x1bc>
   4c134:	843fffc4 	addi	r16,r16,-1
   4c138:	7bffff04 	addi	r15,r15,-4
   4c13c:	803ffb1e 	bne	r16,zero,4c12c <__multiply+0x1a8>
   4c140:	14000415 	stw	r16,16(r2)
   4c144:	dfc00517 	ldw	ra,20(sp)
   4c148:	dd000417 	ldw	r20,16(sp)
   4c14c:	dcc00317 	ldw	r19,12(sp)
   4c150:	dc800217 	ldw	r18,8(sp)
   4c154:	dc400117 	ldw	r17,4(sp)
   4c158:	dc000017 	ldw	r16,0(sp)
   4c15c:	dec00604 	addi	sp,sp,24
   4c160:	f800283a 	ret

0004c164 <__pow5mult>:
   4c164:	defffb04 	addi	sp,sp,-20
   4c168:	dcc00315 	stw	r19,12(sp)
   4c16c:	dc800215 	stw	r18,8(sp)
   4c170:	dc000015 	stw	r16,0(sp)
   4c174:	dfc00415 	stw	ra,16(sp)
   4c178:	dc400115 	stw	r17,4(sp)
   4c17c:	308000cc 	andi	r2,r6,3
   4c180:	3021883a 	mov	r16,r6
   4c184:	2027883a 	mov	r19,r4
   4c188:	2825883a 	mov	r18,r5
   4c18c:	10002e1e 	bne	r2,zero,4c248 <__pow5mult+0xe4>
   4c190:	8021d0ba 	srai	r16,r16,2
   4c194:	80001a26 	beq	r16,zero,4c200 <__pow5mult+0x9c>
   4c198:	9c401217 	ldw	r17,72(r19)
   4c19c:	8800061e 	bne	r17,zero,4c1b8 <__pow5mult+0x54>
   4c1a0:	00003406 	br	4c274 <__pow5mult+0x110>
   4c1a4:	8021d07a 	srai	r16,r16,1
   4c1a8:	80001526 	beq	r16,zero,4c200 <__pow5mult+0x9c>
   4c1ac:	88c00017 	ldw	r3,0(r17)
   4c1b0:	18001b26 	beq	r3,zero,4c220 <__pow5mult+0xbc>
   4c1b4:	1823883a 	mov	r17,r3
   4c1b8:	80c0004c 	andi	r3,r16,1
   4c1bc:	183ff926 	beq	r3,zero,4c1a4 <__pow5mult+0x40>
   4c1c0:	900b883a 	mov	r5,r18
   4c1c4:	880d883a 	mov	r6,r17
   4c1c8:	9809883a 	mov	r4,r19
   4c1cc:	004bf840 	call	4bf84 <__multiply>
   4c1d0:	90001b26 	beq	r18,zero,4c240 <__pow5mult+0xdc>
   4c1d4:	91000117 	ldw	r4,4(r18)
   4c1d8:	98c01317 	ldw	r3,76(r19)
   4c1dc:	8021d07a 	srai	r16,r16,1
   4c1e0:	2109883a 	add	r4,r4,r4
   4c1e4:	2109883a 	add	r4,r4,r4
   4c1e8:	1907883a 	add	r3,r3,r4
   4c1ec:	19000017 	ldw	r4,0(r3)
   4c1f0:	91000015 	stw	r4,0(r18)
   4c1f4:	1c800015 	stw	r18,0(r3)
   4c1f8:	1025883a 	mov	r18,r2
   4c1fc:	803feb1e 	bne	r16,zero,4c1ac <__pow5mult+0x48>
   4c200:	9005883a 	mov	r2,r18
   4c204:	dfc00417 	ldw	ra,16(sp)
   4c208:	dcc00317 	ldw	r19,12(sp)
   4c20c:	dc800217 	ldw	r18,8(sp)
   4c210:	dc400117 	ldw	r17,4(sp)
   4c214:	dc000017 	ldw	r16,0(sp)
   4c218:	dec00504 	addi	sp,sp,20
   4c21c:	f800283a 	ret
   4c220:	880b883a 	mov	r5,r17
   4c224:	880d883a 	mov	r6,r17
   4c228:	9809883a 	mov	r4,r19
   4c22c:	004bf840 	call	4bf84 <__multiply>
   4c230:	88800015 	stw	r2,0(r17)
   4c234:	10000015 	stw	zero,0(r2)
   4c238:	1023883a 	mov	r17,r2
   4c23c:	003fde06 	br	4c1b8 <__pow5mult+0x54>
   4c240:	1025883a 	mov	r18,r2
   4c244:	003fd706 	br	4c1a4 <__pow5mult+0x40>
   4c248:	10bfffc4 	addi	r2,r2,-1
   4c24c:	1085883a 	add	r2,r2,r2
   4c250:	00c00174 	movhi	r3,5
   4c254:	18c6fb04 	addi	r3,r3,7148
   4c258:	1085883a 	add	r2,r2,r2
   4c25c:	1885883a 	add	r2,r3,r2
   4c260:	11800017 	ldw	r6,0(r2)
   4c264:	000f883a 	mov	r7,zero
   4c268:	004bc180 	call	4bc18 <__multadd>
   4c26c:	1025883a 	mov	r18,r2
   4c270:	003fc706 	br	4c190 <__pow5mult+0x2c>
   4c274:	9809883a 	mov	r4,r19
   4c278:	01409c44 	movi	r5,625
   4c27c:	004bf480 	call	4bf48 <__i2b>
   4c280:	98801215 	stw	r2,72(r19)
   4c284:	1023883a 	mov	r17,r2
   4c288:	10000015 	stw	zero,0(r2)
   4c28c:	003fca06 	br	4c1b8 <__pow5mult+0x54>

0004c290 <__lshift>:
   4c290:	defff904 	addi	sp,sp,-28
   4c294:	dd400515 	stw	r21,20(sp)
   4c298:	dc400115 	stw	r17,4(sp)
   4c29c:	2d400417 	ldw	r21,16(r5)
   4c2a0:	3023d17a 	srai	r17,r6,5
   4c2a4:	28800217 	ldw	r2,8(r5)
   4c2a8:	dd000415 	stw	r20,16(sp)
   4c2ac:	8d6b883a 	add	r21,r17,r21
   4c2b0:	dcc00315 	stw	r19,12(sp)
   4c2b4:	dc800215 	stw	r18,8(sp)
   4c2b8:	dc000015 	stw	r16,0(sp)
   4c2bc:	dfc00615 	stw	ra,24(sp)
   4c2c0:	ac000044 	addi	r16,r21,1
   4c2c4:	2825883a 	mov	r18,r5
   4c2c8:	3029883a 	mov	r20,r6
   4c2cc:	2027883a 	mov	r19,r4
   4c2d0:	29400117 	ldw	r5,4(r5)
   4c2d4:	1400030e 	bge	r2,r16,4c2e4 <__lshift+0x54>
   4c2d8:	1085883a 	add	r2,r2,r2
   4c2dc:	29400044 	addi	r5,r5,1
   4c2e0:	143ffd16 	blt	r2,r16,4c2d8 <__lshift+0x48>
   4c2e4:	9809883a 	mov	r4,r19
   4c2e8:	004bb480 	call	4bb48 <_Balloc>
   4c2ec:	10c00504 	addi	r3,r2,20
   4c2f0:	0440090e 	bge	zero,r17,4c318 <__lshift+0x88>
   4c2f4:	000f883a 	mov	r7,zero
   4c2f8:	18000015 	stw	zero,0(r3)
   4c2fc:	39c00044 	addi	r7,r7,1
   4c300:	18c00104 	addi	r3,r3,4
   4c304:	3c7ffc1e 	bne	r7,r17,4c2f8 <__lshift+0x68>
   4c308:	38c00144 	addi	r3,r7,5
   4c30c:	18c7883a 	add	r3,r3,r3
   4c310:	18c7883a 	add	r3,r3,r3
   4c314:	10c7883a 	add	r3,r2,r3
   4c318:	92000417 	ldw	r8,16(r18)
   4c31c:	a18007cc 	andi	r6,r20,31
   4c320:	91c00504 	addi	r7,r18,20
   4c324:	42000144 	addi	r8,r8,5
   4c328:	4211883a 	add	r8,r8,r8
   4c32c:	4211883a 	add	r8,r8,r8
   4c330:	9211883a 	add	r8,r18,r8
   4c334:	30002226 	beq	r6,zero,4c3c0 <__lshift+0x130>
   4c338:	02800804 	movi	r10,32
   4c33c:	5195c83a 	sub	r10,r10,r6
   4c340:	000b883a 	mov	r5,zero
   4c344:	3a400017 	ldw	r9,0(r7)
   4c348:	18c00104 	addi	r3,r3,4
   4c34c:	39c00104 	addi	r7,r7,4
   4c350:	4992983a 	sll	r9,r9,r6
   4c354:	2a4ab03a 	or	r5,r5,r9
   4c358:	197fff15 	stw	r5,-4(r3)
   4c35c:	397fff17 	ldw	r5,-4(r7)
   4c360:	2a8ad83a 	srl	r5,r5,r10
   4c364:	3a3ff736 	bltu	r7,r8,4c344 <__lshift+0xb4>
   4c368:	19400015 	stw	r5,0(r3)
   4c36c:	28000126 	beq	r5,zero,4c374 <__lshift+0xe4>
   4c370:	ac000084 	addi	r16,r21,2
   4c374:	91000117 	ldw	r4,4(r18)
   4c378:	98c01317 	ldw	r3,76(r19)
   4c37c:	843fffc4 	addi	r16,r16,-1
   4c380:	2109883a 	add	r4,r4,r4
   4c384:	2109883a 	add	r4,r4,r4
   4c388:	1907883a 	add	r3,r3,r4
   4c38c:	19000017 	ldw	r4,0(r3)
   4c390:	14000415 	stw	r16,16(r2)
   4c394:	91000015 	stw	r4,0(r18)
   4c398:	1c800015 	stw	r18,0(r3)
   4c39c:	dfc00617 	ldw	ra,24(sp)
   4c3a0:	dd400517 	ldw	r21,20(sp)
   4c3a4:	dd000417 	ldw	r20,16(sp)
   4c3a8:	dcc00317 	ldw	r19,12(sp)
   4c3ac:	dc800217 	ldw	r18,8(sp)
   4c3b0:	dc400117 	ldw	r17,4(sp)
   4c3b4:	dc000017 	ldw	r16,0(sp)
   4c3b8:	dec00704 	addi	sp,sp,28
   4c3bc:	f800283a 	ret
   4c3c0:	39400017 	ldw	r5,0(r7)
   4c3c4:	18c00104 	addi	r3,r3,4
   4c3c8:	39c00104 	addi	r7,r7,4
   4c3cc:	197fff15 	stw	r5,-4(r3)
   4c3d0:	3a3fe82e 	bgeu	r7,r8,4c374 <__lshift+0xe4>
   4c3d4:	39400017 	ldw	r5,0(r7)
   4c3d8:	18c00104 	addi	r3,r3,4
   4c3dc:	39c00104 	addi	r7,r7,4
   4c3e0:	197fff15 	stw	r5,-4(r3)
   4c3e4:	3a3ff636 	bltu	r7,r8,4c3c0 <__lshift+0x130>
   4c3e8:	003fe206 	br	4c374 <__lshift+0xe4>

0004c3ec <__mcmp>:
   4c3ec:	20800417 	ldw	r2,16(r4)
   4c3f0:	28c00417 	ldw	r3,16(r5)
   4c3f4:	10c5c83a 	sub	r2,r2,r3
   4c3f8:	10000f1e 	bne	r2,zero,4c438 <__mcmp+0x4c>
   4c3fc:	18c00144 	addi	r3,r3,5
   4c400:	18c7883a 	add	r3,r3,r3
   4c404:	18c7883a 	add	r3,r3,r3
   4c408:	21c00504 	addi	r7,r4,20
   4c40c:	28cb883a 	add	r5,r5,r3
   4c410:	20c9883a 	add	r4,r4,r3
   4c414:	213fff04 	addi	r4,r4,-4
   4c418:	297fff04 	addi	r5,r5,-4
   4c41c:	21800017 	ldw	r6,0(r4)
   4c420:	28c00017 	ldw	r3,0(r5)
   4c424:	30c0021e 	bne	r6,r3,4c430 <__mcmp+0x44>
   4c428:	393ffa36 	bltu	r7,r4,4c414 <__mcmp+0x28>
   4c42c:	f800283a 	ret
   4c430:	30c00236 	bltu	r6,r3,4c43c <__mcmp+0x50>
   4c434:	00800044 	movi	r2,1
   4c438:	f800283a 	ret
   4c43c:	00bfffc4 	movi	r2,-1
   4c440:	f800283a 	ret

0004c444 <__mdiff>:
   4c444:	defffb04 	addi	sp,sp,-20
   4c448:	dc000015 	stw	r16,0(sp)
   4c44c:	2821883a 	mov	r16,r5
   4c450:	dc800215 	stw	r18,8(sp)
   4c454:	300b883a 	mov	r5,r6
   4c458:	2025883a 	mov	r18,r4
   4c45c:	8009883a 	mov	r4,r16
   4c460:	dc400115 	stw	r17,4(sp)
   4c464:	dfc00415 	stw	ra,16(sp)
   4c468:	dcc00315 	stw	r19,12(sp)
   4c46c:	3023883a 	mov	r17,r6
   4c470:	004c3ec0 	call	4c3ec <__mcmp>
   4c474:	10005026 	beq	r2,zero,4c5b8 <__mdiff+0x174>
   4c478:	10004a16 	blt	r2,zero,4c5a4 <__mdiff+0x160>
   4c47c:	0027883a 	mov	r19,zero
   4c480:	81400117 	ldw	r5,4(r16)
   4c484:	9009883a 	mov	r4,r18
   4c488:	004bb480 	call	4bb48 <_Balloc>
   4c48c:	82400417 	ldw	r9,16(r16)
   4c490:	89800417 	ldw	r6,16(r17)
   4c494:	14c00315 	stw	r19,12(r2)
   4c498:	4b800144 	addi	r14,r9,5
   4c49c:	31800144 	addi	r6,r6,5
   4c4a0:	739d883a 	add	r14,r14,r14
   4c4a4:	318d883a 	add	r6,r6,r6
   4c4a8:	739d883a 	add	r14,r14,r14
   4c4ac:	318d883a 	add	r6,r6,r6
   4c4b0:	81c00504 	addi	r7,r16,20
   4c4b4:	839d883a 	add	r14,r16,r14
   4c4b8:	8a000504 	addi	r8,r17,20
   4c4bc:	898d883a 	add	r6,r17,r6
   4c4c0:	10c00504 	addi	r3,r2,20
   4c4c4:	0009883a 	mov	r4,zero
   4c4c8:	3b000017 	ldw	r12,0(r7)
   4c4cc:	42c00017 	ldw	r11,0(r8)
   4c4d0:	42000104 	addi	r8,r8,4
   4c4d4:	62bfffcc 	andi	r10,r12,65535
   4c4d8:	5b7fffcc 	andi	r13,r11,65535
   4c4dc:	5109883a 	add	r4,r10,r4
   4c4e0:	2355c83a 	sub	r10,r4,r13
   4c4e4:	5816d43a 	srli	r11,r11,16
   4c4e8:	6008d43a 	srli	r4,r12,16
   4c4ec:	501bd43a 	srai	r13,r10,16
   4c4f0:	1a80000d 	sth	r10,0(r3)
   4c4f4:	22c9c83a 	sub	r4,r4,r11
   4c4f8:	2349883a 	add	r4,r4,r13
   4c4fc:	1900008d 	sth	r4,2(r3)
   4c500:	39c00104 	addi	r7,r7,4
   4c504:	2009d43a 	srai	r4,r4,16
   4c508:	18c00104 	addi	r3,r3,4
   4c50c:	41bfee36 	bltu	r8,r6,4c4c8 <__mdiff+0x84>
   4c510:	180b883a 	mov	r5,r3
   4c514:	3815883a 	mov	r10,r7
   4c518:	3b80132e 	bgeu	r7,r14,4c568 <__mdiff+0x124>
   4c51c:	3a000017 	ldw	r8,0(r7)
   4c520:	18c00104 	addi	r3,r3,4
   4c524:	39c00104 	addi	r7,r7,4
   4c528:	41bfffcc 	andi	r6,r8,65535
   4c52c:	310d883a 	add	r6,r6,r4
   4c530:	3009d43a 	srai	r4,r6,16
   4c534:	4010d43a 	srli	r8,r8,16
   4c538:	19bfff0d 	sth	r6,-4(r3)
   4c53c:	2209883a 	add	r4,r4,r8
   4c540:	193fff8d 	sth	r4,-2(r3)
   4c544:	2009d43a 	srai	r4,r4,16
   4c548:	3bbff436 	bltu	r7,r14,4c51c <__mdiff+0xd8>
   4c54c:	0286303a 	nor	r3,zero,r10
   4c550:	1b87883a 	add	r3,r3,r14
   4c554:	1806d0ba 	srli	r3,r3,2
   4c558:	18c00044 	addi	r3,r3,1
   4c55c:	18c7883a 	add	r3,r3,r3
   4c560:	18c7883a 	add	r3,r3,r3
   4c564:	28c7883a 	add	r3,r5,r3
   4c568:	193fff17 	ldw	r4,-4(r3)
   4c56c:	18ffff04 	addi	r3,r3,-4
   4c570:	2000041e 	bne	r4,zero,4c584 <__mdiff+0x140>
   4c574:	18ffff04 	addi	r3,r3,-4
   4c578:	19000017 	ldw	r4,0(r3)
   4c57c:	4a7fffc4 	addi	r9,r9,-1
   4c580:	203ffc26 	beq	r4,zero,4c574 <__mdiff+0x130>
   4c584:	12400415 	stw	r9,16(r2)
   4c588:	dfc00417 	ldw	ra,16(sp)
   4c58c:	dcc00317 	ldw	r19,12(sp)
   4c590:	dc800217 	ldw	r18,8(sp)
   4c594:	dc400117 	ldw	r17,4(sp)
   4c598:	dc000017 	ldw	r16,0(sp)
   4c59c:	dec00504 	addi	sp,sp,20
   4c5a0:	f800283a 	ret
   4c5a4:	8005883a 	mov	r2,r16
   4c5a8:	04c00044 	movi	r19,1
   4c5ac:	8821883a 	mov	r16,r17
   4c5b0:	1023883a 	mov	r17,r2
   4c5b4:	003fb206 	br	4c480 <__mdiff+0x3c>
   4c5b8:	9009883a 	mov	r4,r18
   4c5bc:	000b883a 	mov	r5,zero
   4c5c0:	004bb480 	call	4bb48 <_Balloc>
   4c5c4:	00c00044 	movi	r3,1
   4c5c8:	10c00415 	stw	r3,16(r2)
   4c5cc:	10000515 	stw	zero,20(r2)
   4c5d0:	dfc00417 	ldw	ra,16(sp)
   4c5d4:	dcc00317 	ldw	r19,12(sp)
   4c5d8:	dc800217 	ldw	r18,8(sp)
   4c5dc:	dc400117 	ldw	r17,4(sp)
   4c5e0:	dc000017 	ldw	r16,0(sp)
   4c5e4:	dec00504 	addi	sp,sp,20
   4c5e8:	f800283a 	ret

0004c5ec <__ulp>:
   4c5ec:	295ffc2c 	andhi	r5,r5,32752
   4c5f0:	00bf3034 	movhi	r2,64704
   4c5f4:	2887883a 	add	r3,r5,r2
   4c5f8:	00c0020e 	bge	zero,r3,4c604 <__ulp+0x18>
   4c5fc:	0005883a 	mov	r2,zero
   4c600:	f800283a 	ret
   4c604:	00c7c83a 	sub	r3,zero,r3
   4c608:	1805d53a 	srai	r2,r3,20
   4c60c:	00c004c4 	movi	r3,19
   4c610:	18800a0e 	bge	r3,r2,4c63c <__ulp+0x50>
   4c614:	01000c84 	movi	r4,50
   4c618:	0007883a 	mov	r3,zero
   4c61c:	20800516 	blt	r4,r2,4c634 <__ulp+0x48>
   4c620:	01000cc4 	movi	r4,51
   4c624:	2085c83a 	sub	r2,r4,r2
   4c628:	01000044 	movi	r4,1
   4c62c:	2084983a 	sll	r2,r4,r2
   4c630:	f800283a 	ret
   4c634:	00800044 	movi	r2,1
   4c638:	f800283a 	ret
   4c63c:	00c00234 	movhi	r3,8
   4c640:	1887d83a 	sra	r3,r3,r2
   4c644:	0005883a 	mov	r2,zero
   4c648:	f800283a 	ret

0004c64c <__b2d>:
   4c64c:	defffa04 	addi	sp,sp,-24
   4c650:	dc000015 	stw	r16,0(sp)
   4c654:	24000417 	ldw	r16,16(r4)
   4c658:	dc400115 	stw	r17,4(sp)
   4c65c:	dcc00315 	stw	r19,12(sp)
   4c660:	84000144 	addi	r16,r16,5
   4c664:	8421883a 	add	r16,r16,r16
   4c668:	8421883a 	add	r16,r16,r16
   4c66c:	2421883a 	add	r16,r4,r16
   4c670:	847fff17 	ldw	r17,-4(r16)
   4c674:	24c00504 	addi	r19,r4,20
   4c678:	dd000415 	stw	r20,16(sp)
   4c67c:	8809883a 	mov	r4,r17
   4c680:	dc800215 	stw	r18,8(sp)
   4c684:	2829883a 	mov	r20,r5
   4c688:	dfc00515 	stw	ra,20(sp)
   4c68c:	004be300 	call	4be30 <__hi0bits>
   4c690:	00c00804 	movi	r3,32
   4c694:	1887c83a 	sub	r3,r3,r2
   4c698:	a0c00015 	stw	r3,0(r20)
   4c69c:	00c00284 	movi	r3,10
   4c6a0:	84bfff04 	addi	r18,r16,-4
   4c6a4:	18801216 	blt	r3,r2,4c6f0 <__b2d+0xa4>
   4c6a8:	010002c4 	movi	r4,11
   4c6ac:	2089c83a 	sub	r4,r4,r2
   4c6b0:	8906d83a 	srl	r3,r17,r4
   4c6b4:	18cffc34 	orhi	r3,r3,16368
   4c6b8:	9c80322e 	bgeu	r19,r18,4c784 <__b2d+0x138>
   4c6bc:	817ffe17 	ldw	r5,-8(r16)
   4c6c0:	2908d83a 	srl	r4,r5,r4
   4c6c4:	10800544 	addi	r2,r2,21
   4c6c8:	88a2983a 	sll	r17,r17,r2
   4c6cc:	2444b03a 	or	r2,r4,r17
   4c6d0:	dfc00517 	ldw	ra,20(sp)
   4c6d4:	dd000417 	ldw	r20,16(sp)
   4c6d8:	dcc00317 	ldw	r19,12(sp)
   4c6dc:	dc800217 	ldw	r18,8(sp)
   4c6e0:	dc400117 	ldw	r17,4(sp)
   4c6e4:	dc000017 	ldw	r16,0(sp)
   4c6e8:	dec00604 	addi	sp,sp,24
   4c6ec:	f800283a 	ret
   4c6f0:	9c801636 	bltu	r19,r18,4c74c <__b2d+0x100>
   4c6f4:	113ffd44 	addi	r4,r2,-11
   4c6f8:	000b883a 	mov	r5,zero
   4c6fc:	20001726 	beq	r4,zero,4c75c <__b2d+0x110>
   4c700:	00c00ac4 	movi	r3,43
   4c704:	1885c83a 	sub	r2,r3,r2
   4c708:	8906983a 	sll	r3,r17,r4
   4c70c:	288cd83a 	srl	r6,r5,r2
   4c710:	18cffc34 	orhi	r3,r3,16368
   4c714:	1986b03a 	or	r3,r3,r6
   4c718:	9c801c2e 	bgeu	r19,r18,4c78c <__b2d+0x140>
   4c71c:	91bfff17 	ldw	r6,-4(r18)
   4c720:	3084d83a 	srl	r2,r6,r2
   4c724:	2908983a 	sll	r4,r5,r4
   4c728:	1104b03a 	or	r2,r2,r4
   4c72c:	dfc00517 	ldw	ra,20(sp)
   4c730:	dd000417 	ldw	r20,16(sp)
   4c734:	dcc00317 	ldw	r19,12(sp)
   4c738:	dc800217 	ldw	r18,8(sp)
   4c73c:	dc400117 	ldw	r17,4(sp)
   4c740:	dc000017 	ldw	r16,0(sp)
   4c744:	dec00604 	addi	sp,sp,24
   4c748:	f800283a 	ret
   4c74c:	113ffd44 	addi	r4,r2,-11
   4c750:	84bffe04 	addi	r18,r16,-8
   4c754:	817ffe17 	ldw	r5,-8(r16)
   4c758:	203fe91e 	bne	r4,zero,4c700 <__b2d+0xb4>
   4c75c:	88cffc34 	orhi	r3,r17,16368
   4c760:	2805883a 	mov	r2,r5
   4c764:	dfc00517 	ldw	ra,20(sp)
   4c768:	dd000417 	ldw	r20,16(sp)
   4c76c:	dcc00317 	ldw	r19,12(sp)
   4c770:	dc800217 	ldw	r18,8(sp)
   4c774:	dc400117 	ldw	r17,4(sp)
   4c778:	dc000017 	ldw	r16,0(sp)
   4c77c:	dec00604 	addi	sp,sp,24
   4c780:	f800283a 	ret
   4c784:	0009883a 	mov	r4,zero
   4c788:	003fce06 	br	4c6c4 <__b2d+0x78>
   4c78c:	0005883a 	mov	r2,zero
   4c790:	003fe406 	br	4c724 <__b2d+0xd8>

0004c794 <__d2b>:
   4c794:	defff804 	addi	sp,sp,-32
   4c798:	dc400315 	stw	r17,12(sp)
   4c79c:	3023883a 	mov	r17,r6
   4c7a0:	dc800415 	stw	r18,16(sp)
   4c7a4:	8824907a 	slli	r18,r17,1
   4c7a8:	dcc00515 	stw	r19,20(sp)
   4c7ac:	2827883a 	mov	r19,r5
   4c7b0:	9024d57a 	srli	r18,r18,21
   4c7b4:	01400044 	movi	r5,1
   4c7b8:	dd000615 	stw	r20,24(sp)
   4c7bc:	dc000215 	stw	r16,8(sp)
   4c7c0:	dfc00715 	stw	ra,28(sp)
   4c7c4:	3829883a 	mov	r20,r7
   4c7c8:	004bb480 	call	4bb48 <_Balloc>
   4c7cc:	1021883a 	mov	r16,r2
   4c7d0:	00800434 	movhi	r2,16
   4c7d4:	10bfffc4 	addi	r2,r2,-1
   4c7d8:	88a2703a 	and	r17,r17,r2
   4c7dc:	90000126 	beq	r18,zero,4c7e4 <__d2b+0x50>
   4c7e0:	8c400434 	orhi	r17,r17,16
   4c7e4:	dc400015 	stw	r17,0(sp)
   4c7e8:	98002226 	beq	r19,zero,4c874 <__d2b+0xe0>
   4c7ec:	d9000104 	addi	r4,sp,4
   4c7f0:	dcc00115 	stw	r19,4(sp)
   4c7f4:	004be980 	call	4be98 <__lo0bits>
   4c7f8:	d8c00017 	ldw	r3,0(sp)
   4c7fc:	10002d1e 	bne	r2,zero,4c8b4 <__d2b+0x120>
   4c800:	d9000117 	ldw	r4,4(sp)
   4c804:	81000515 	stw	r4,20(r16)
   4c808:	1823003a 	cmpeq	r17,r3,zero
   4c80c:	01000084 	movi	r4,2
   4c810:	2463c83a 	sub	r17,r4,r17
   4c814:	80c00615 	stw	r3,24(r16)
   4c818:	84400415 	stw	r17,16(r16)
   4c81c:	90001d1e 	bne	r18,zero,4c894 <__d2b+0x100>
   4c820:	88c00104 	addi	r3,r17,4
   4c824:	18c7883a 	add	r3,r3,r3
   4c828:	18c7883a 	add	r3,r3,r3
   4c82c:	80c7883a 	add	r3,r16,r3
   4c830:	19000017 	ldw	r4,0(r3)
   4c834:	10bef384 	addi	r2,r2,-1074
   4c838:	a0800015 	stw	r2,0(r20)
   4c83c:	004be300 	call	4be30 <__hi0bits>
   4c840:	8822917a 	slli	r17,r17,5
   4c844:	d8c00817 	ldw	r3,32(sp)
   4c848:	8885c83a 	sub	r2,r17,r2
   4c84c:	18800015 	stw	r2,0(r3)
   4c850:	8005883a 	mov	r2,r16
   4c854:	dfc00717 	ldw	ra,28(sp)
   4c858:	dd000617 	ldw	r20,24(sp)
   4c85c:	dcc00517 	ldw	r19,20(sp)
   4c860:	dc800417 	ldw	r18,16(sp)
   4c864:	dc400317 	ldw	r17,12(sp)
   4c868:	dc000217 	ldw	r16,8(sp)
   4c86c:	dec00804 	addi	sp,sp,32
   4c870:	f800283a 	ret
   4c874:	d809883a 	mov	r4,sp
   4c878:	004be980 	call	4be98 <__lo0bits>
   4c87c:	d8c00017 	ldw	r3,0(sp)
   4c880:	04400044 	movi	r17,1
   4c884:	84400415 	stw	r17,16(r16)
   4c888:	80c00515 	stw	r3,20(r16)
   4c88c:	10800804 	addi	r2,r2,32
   4c890:	903fe326 	beq	r18,zero,4c820 <__d2b+0x8c>
   4c894:	00c00d44 	movi	r3,53
   4c898:	94bef344 	addi	r18,r18,-1075
   4c89c:	90a5883a 	add	r18,r18,r2
   4c8a0:	1885c83a 	sub	r2,r3,r2
   4c8a4:	d8c00817 	ldw	r3,32(sp)
   4c8a8:	a4800015 	stw	r18,0(r20)
   4c8ac:	18800015 	stw	r2,0(r3)
   4c8b0:	003fe706 	br	4c850 <__d2b+0xbc>
   4c8b4:	01000804 	movi	r4,32
   4c8b8:	2089c83a 	sub	r4,r4,r2
   4c8bc:	1908983a 	sll	r4,r3,r4
   4c8c0:	d9400117 	ldw	r5,4(sp)
   4c8c4:	1886d83a 	srl	r3,r3,r2
   4c8c8:	2148b03a 	or	r4,r4,r5
   4c8cc:	81000515 	stw	r4,20(r16)
   4c8d0:	d8c00015 	stw	r3,0(sp)
   4c8d4:	003fcc06 	br	4c808 <__d2b+0x74>

0004c8d8 <__ratio>:
   4c8d8:	defff904 	addi	sp,sp,-28
   4c8dc:	dc400315 	stw	r17,12(sp)
   4c8e0:	2823883a 	mov	r17,r5
   4c8e4:	d9400104 	addi	r5,sp,4
   4c8e8:	dfc00615 	stw	ra,24(sp)
   4c8ec:	dcc00515 	stw	r19,20(sp)
   4c8f0:	dc800415 	stw	r18,16(sp)
   4c8f4:	2027883a 	mov	r19,r4
   4c8f8:	dc000215 	stw	r16,8(sp)
   4c8fc:	004c64c0 	call	4c64c <__b2d>
   4c900:	8809883a 	mov	r4,r17
   4c904:	d80b883a 	mov	r5,sp
   4c908:	1025883a 	mov	r18,r2
   4c90c:	1821883a 	mov	r16,r3
   4c910:	004c64c0 	call	4c64c <__b2d>
   4c914:	99400417 	ldw	r5,16(r19)
   4c918:	89000417 	ldw	r4,16(r17)
   4c91c:	d9800117 	ldw	r6,4(sp)
   4c920:	2909c83a 	sub	r4,r5,r4
   4c924:	d9400017 	ldw	r5,0(sp)
   4c928:	2008917a 	slli	r4,r4,5
   4c92c:	314bc83a 	sub	r5,r6,r5
   4c930:	290b883a 	add	r5,r5,r4
   4c934:	01400e0e 	bge	zero,r5,4c970 <__ratio+0x98>
   4c938:	280a953a 	slli	r5,r5,20
   4c93c:	2c21883a 	add	r16,r5,r16
   4c940:	9009883a 	mov	r4,r18
   4c944:	800b883a 	mov	r5,r16
   4c948:	100d883a 	mov	r6,r2
   4c94c:	180f883a 	mov	r7,r3
   4c950:	00456480 	call	45648 <__divdf3>
   4c954:	dfc00617 	ldw	ra,24(sp)
   4c958:	dcc00517 	ldw	r19,20(sp)
   4c95c:	dc800417 	ldw	r18,16(sp)
   4c960:	dc400317 	ldw	r17,12(sp)
   4c964:	dc000217 	ldw	r16,8(sp)
   4c968:	dec00704 	addi	sp,sp,28
   4c96c:	f800283a 	ret
   4c970:	280a953a 	slli	r5,r5,20
   4c974:	1947c83a 	sub	r3,r3,r5
   4c978:	003ff106 	br	4c940 <__ratio+0x68>

0004c97c <_mprec_log10>:
   4c97c:	defffe04 	addi	sp,sp,-8
   4c980:	dc000015 	stw	r16,0(sp)
   4c984:	dfc00115 	stw	ra,4(sp)
   4c988:	008005c4 	movi	r2,23
   4c98c:	2021883a 	mov	r16,r4
   4c990:	11000d0e 	bge	r2,r4,4c9c8 <_mprec_log10+0x4c>
   4c994:	0005883a 	mov	r2,zero
   4c998:	00cffc34 	movhi	r3,16368
   4c99c:	843fffc4 	addi	r16,r16,-1
   4c9a0:	1009883a 	mov	r4,r2
   4c9a4:	180b883a 	mov	r5,r3
   4c9a8:	000d883a 	mov	r6,zero
   4c9ac:	01d00934 	movhi	r7,16420
   4c9b0:	00453640 	call	45364 <__muldf3>
   4c9b4:	803ff91e 	bne	r16,zero,4c99c <_mprec_log10+0x20>
   4c9b8:	dfc00117 	ldw	ra,4(sp)
   4c9bc:	dc000017 	ldw	r16,0(sp)
   4c9c0:	dec00204 	addi	sp,sp,8
   4c9c4:	f800283a 	ret
   4c9c8:	202090fa 	slli	r16,r4,3
   4c9cc:	00800174 	movhi	r2,5
   4c9d0:	1086c904 	addi	r2,r2,6948
   4c9d4:	1421883a 	add	r16,r2,r16
   4c9d8:	80800017 	ldw	r2,0(r16)
   4c9dc:	80c00117 	ldw	r3,4(r16)
   4c9e0:	dfc00117 	ldw	ra,4(sp)
   4c9e4:	dc000017 	ldw	r16,0(sp)
   4c9e8:	dec00204 	addi	sp,sp,8
   4c9ec:	f800283a 	ret

0004c9f0 <__copybits>:
   4c9f0:	297fffc4 	addi	r5,r5,-1
   4c9f4:	31c00417 	ldw	r7,16(r6)
   4c9f8:	2811d17a 	srai	r8,r5,5
   4c9fc:	30800504 	addi	r2,r6,20
   4ca00:	39c00144 	addi	r7,r7,5
   4ca04:	42000044 	addi	r8,r8,1
   4ca08:	39cf883a 	add	r7,r7,r7
   4ca0c:	4211883a 	add	r8,r8,r8
   4ca10:	39cf883a 	add	r7,r7,r7
   4ca14:	4211883a 	add	r8,r8,r8
   4ca18:	31cf883a 	add	r7,r6,r7
   4ca1c:	2211883a 	add	r8,r4,r8
   4ca20:	11c00d2e 	bgeu	r2,r7,4ca58 <__copybits+0x68>
   4ca24:	2007883a 	mov	r3,r4
   4ca28:	11400017 	ldw	r5,0(r2)
   4ca2c:	18c00104 	addi	r3,r3,4
   4ca30:	10800104 	addi	r2,r2,4
   4ca34:	197fff15 	stw	r5,-4(r3)
   4ca38:	11fffb36 	bltu	r2,r7,4ca28 <__copybits+0x38>
   4ca3c:	3985c83a 	sub	r2,r7,r6
   4ca40:	10bffac4 	addi	r2,r2,-21
   4ca44:	1004d0ba 	srli	r2,r2,2
   4ca48:	10800044 	addi	r2,r2,1
   4ca4c:	1085883a 	add	r2,r2,r2
   4ca50:	1085883a 	add	r2,r2,r2
   4ca54:	2089883a 	add	r4,r4,r2
   4ca58:	2200032e 	bgeu	r4,r8,4ca68 <__copybits+0x78>
   4ca5c:	20000015 	stw	zero,0(r4)
   4ca60:	21000104 	addi	r4,r4,4
   4ca64:	223ffd36 	bltu	r4,r8,4ca5c <__copybits+0x6c>
   4ca68:	f800283a 	ret

0004ca6c <__any_on>:
   4ca6c:	21800417 	ldw	r6,16(r4)
   4ca70:	2805d17a 	srai	r2,r5,5
   4ca74:	20c00504 	addi	r3,r4,20
   4ca78:	30800f0e 	bge	r6,r2,4cab8 <__any_on+0x4c>
   4ca7c:	3005883a 	mov	r2,r6
   4ca80:	10800144 	addi	r2,r2,5
   4ca84:	1085883a 	add	r2,r2,r2
   4ca88:	1085883a 	add	r2,r2,r2
   4ca8c:	2089883a 	add	r4,r4,r2
   4ca90:	1900152e 	bgeu	r3,r4,4cae8 <__any_on+0x7c>
   4ca94:	20bfff17 	ldw	r2,-4(r4)
   4ca98:	213fff04 	addi	r4,r4,-4
   4ca9c:	1000041e 	bne	r2,zero,4cab0 <__any_on+0x44>
   4caa0:	1900112e 	bgeu	r3,r4,4cae8 <__any_on+0x7c>
   4caa4:	213fff04 	addi	r4,r4,-4
   4caa8:	20800017 	ldw	r2,0(r4)
   4caac:	103ffc26 	beq	r2,zero,4caa0 <__any_on+0x34>
   4cab0:	00800044 	movi	r2,1
   4cab4:	f800283a 	ret
   4cab8:	11bff10e 	bge	r2,r6,4ca80 <__any_on+0x14>
   4cabc:	294007cc 	andi	r5,r5,31
   4cac0:	283fef26 	beq	r5,zero,4ca80 <__any_on+0x14>
   4cac4:	11800144 	addi	r6,r2,5
   4cac8:	318d883a 	add	r6,r6,r6
   4cacc:	318d883a 	add	r6,r6,r6
   4cad0:	218d883a 	add	r6,r4,r6
   4cad4:	31800017 	ldw	r6,0(r6)
   4cad8:	314ed83a 	srl	r7,r6,r5
   4cadc:	394a983a 	sll	r5,r7,r5
   4cae0:	29bff31e 	bne	r5,r6,4cab0 <__any_on+0x44>
   4cae4:	003fe606 	br	4ca80 <__any_on+0x14>
   4cae8:	0005883a 	mov	r2,zero
   4caec:	f800283a 	ret

0004caf0 <_realloc_r>:
   4caf0:	defff504 	addi	sp,sp,-44
   4caf4:	dd400615 	stw	r21,24(sp)
   4caf8:	dc800315 	stw	r18,12(sp)
   4cafc:	dc000115 	stw	r16,4(sp)
   4cb00:	dfc00a15 	stw	ra,40(sp)
   4cb04:	df000915 	stw	fp,36(sp)
   4cb08:	ddc00815 	stw	r23,32(sp)
   4cb0c:	dd800715 	stw	r22,28(sp)
   4cb10:	dd000515 	stw	r20,20(sp)
   4cb14:	dcc00415 	stw	r19,16(sp)
   4cb18:	dc400215 	stw	r17,8(sp)
   4cb1c:	2821883a 	mov	r16,r5
   4cb20:	202b883a 	mov	r21,r4
   4cb24:	3025883a 	mov	r18,r6
   4cb28:	28009626 	beq	r5,zero,4cd84 <_realloc_r+0x294>
   4cb2c:	004eca40 	call	4eca4 <__malloc_lock>
   4cb30:	80bfff17 	ldw	r2,-4(r16)
   4cb34:	04ffff04 	movi	r19,-4
   4cb38:	90c002c4 	addi	r3,r18,11
   4cb3c:	01000584 	movi	r4,22
   4cb40:	85bffe04 	addi	r22,r16,-8
   4cb44:	14e6703a 	and	r19,r2,r19
   4cb48:	20c0372e 	bgeu	r4,r3,4cc28 <_realloc_r+0x138>
   4cb4c:	047ffe04 	movi	r17,-8
   4cb50:	1c62703a 	and	r17,r3,r17
   4cb54:	8807883a 	mov	r3,r17
   4cb58:	88005a16 	blt	r17,zero,4ccc4 <_realloc_r+0x1d4>
   4cb5c:	8c805936 	bltu	r17,r18,4ccc4 <_realloc_r+0x1d4>
   4cb60:	98c0340e 	bge	r19,r3,4cc34 <_realloc_r+0x144>
   4cb64:	07000174 	movhi	fp,5
   4cb68:	e7082f04 	addi	fp,fp,8380
   4cb6c:	e1400217 	ldw	r5,8(fp)
   4cb70:	b4c9883a 	add	r4,r22,r19
   4cb74:	29009026 	beq	r5,r4,4cdb8 <_realloc_r+0x2c8>
   4cb78:	21800117 	ldw	r6,4(r4)
   4cb7c:	01ffff84 	movi	r7,-2
   4cb80:	31ce703a 	and	r7,r6,r7
   4cb84:	21cf883a 	add	r7,r4,r7
   4cb88:	39c00117 	ldw	r7,4(r7)
   4cb8c:	39c0004c 	andi	r7,r7,1
   4cb90:	38004326 	beq	r7,zero,4cca0 <_realloc_r+0x1b0>
   4cb94:	000d883a 	mov	r6,zero
   4cb98:	0009883a 	mov	r4,zero
   4cb9c:	1080004c 	andi	r2,r2,1
   4cba0:	10005a1e 	bne	r2,zero,4cd0c <_realloc_r+0x21c>
   4cba4:	85fffe17 	ldw	r23,-8(r16)
   4cba8:	00bfff04 	movi	r2,-4
   4cbac:	b5efc83a 	sub	r23,r22,r23
   4cbb0:	b9c00117 	ldw	r7,4(r23)
   4cbb4:	388e703a 	and	r7,r7,r2
   4cbb8:	3ccf883a 	add	r7,r7,r19
   4cbbc:	20005226 	beq	r4,zero,4cd08 <_realloc_r+0x218>
   4cbc0:	31e9883a 	add	r20,r6,r7
   4cbc4:	2140c726 	beq	r4,r5,4cee4 <_realloc_r+0x3f4>
   4cbc8:	a0c04f16 	blt	r20,r3,4cd08 <_realloc_r+0x218>
   4cbcc:	20800317 	ldw	r2,12(r4)
   4cbd0:	20c00217 	ldw	r3,8(r4)
   4cbd4:	99bfff04 	addi	r6,r19,-4
   4cbd8:	01000904 	movi	r4,36
   4cbdc:	18800315 	stw	r2,12(r3)
   4cbe0:	10c00215 	stw	r3,8(r2)
   4cbe4:	b8c00217 	ldw	r3,8(r23)
   4cbe8:	b8800317 	ldw	r2,12(r23)
   4cbec:	bc800204 	addi	r18,r23,8
   4cbf0:	18800315 	stw	r2,12(r3)
   4cbf4:	10c00215 	stw	r3,8(r2)
   4cbf8:	2180ed36 	bltu	r4,r6,4cfb0 <_realloc_r+0x4c0>
   4cbfc:	008004c4 	movi	r2,19
   4cc00:	11809b2e 	bgeu	r2,r6,4ce70 <_realloc_r+0x380>
   4cc04:	80800017 	ldw	r2,0(r16)
   4cc08:	b8800215 	stw	r2,8(r23)
   4cc0c:	80800117 	ldw	r2,4(r16)
   4cc10:	b8800315 	stw	r2,12(r23)
   4cc14:	008006c4 	movi	r2,27
   4cc18:	1180f936 	bltu	r2,r6,4d000 <_realloc_r+0x510>
   4cc1c:	b8800404 	addi	r2,r23,16
   4cc20:	80c00204 	addi	r3,r16,8
   4cc24:	00009406 	br	4ce78 <_realloc_r+0x388>
   4cc28:	00c00404 	movi	r3,16
   4cc2c:	1823883a 	mov	r17,r3
   4cc30:	003fca06 	br	4cb5c <_realloc_r+0x6c>
   4cc34:	9829883a 	mov	r20,r19
   4cc38:	a447c83a 	sub	r3,r20,r17
   4cc3c:	010003c4 	movi	r4,15
   4cc40:	1080004c 	andi	r2,r2,1
   4cc44:	20c02336 	bltu	r4,r3,4ccd4 <_realloc_r+0x1e4>
   4cc48:	1504b03a 	or	r2,r2,r20
   4cc4c:	b0800115 	stw	r2,4(r22)
   4cc50:	b52d883a 	add	r22,r22,r20
   4cc54:	b0800117 	ldw	r2,4(r22)
   4cc58:	10800054 	ori	r2,r2,1
   4cc5c:	b0800115 	stw	r2,4(r22)
   4cc60:	a809883a 	mov	r4,r21
   4cc64:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4cc68:	8025883a 	mov	r18,r16
   4cc6c:	9005883a 	mov	r2,r18
   4cc70:	dfc00a17 	ldw	ra,40(sp)
   4cc74:	df000917 	ldw	fp,36(sp)
   4cc78:	ddc00817 	ldw	r23,32(sp)
   4cc7c:	dd800717 	ldw	r22,28(sp)
   4cc80:	dd400617 	ldw	r21,24(sp)
   4cc84:	dd000517 	ldw	r20,20(sp)
   4cc88:	dcc00417 	ldw	r19,16(sp)
   4cc8c:	dc800317 	ldw	r18,12(sp)
   4cc90:	dc400217 	ldw	r17,8(sp)
   4cc94:	dc000117 	ldw	r16,4(sp)
   4cc98:	dec00b04 	addi	sp,sp,44
   4cc9c:	f800283a 	ret
   4cca0:	01ffff04 	movi	r7,-4
   4cca4:	31cc703a 	and	r6,r6,r7
   4cca8:	34e9883a 	add	r20,r6,r19
   4ccac:	a0ffbb16 	blt	r20,r3,4cb9c <_realloc_r+0xac>
   4ccb0:	20c00317 	ldw	r3,12(r4)
   4ccb4:	21000217 	ldw	r4,8(r4)
   4ccb8:	20c00315 	stw	r3,12(r4)
   4ccbc:	19000215 	stw	r4,8(r3)
   4ccc0:	003fdd06 	br	4cc38 <_realloc_r+0x148>
   4ccc4:	00800304 	movi	r2,12
   4ccc8:	a8800015 	stw	r2,0(r21)
   4cccc:	0025883a 	mov	r18,zero
   4ccd0:	003fe606 	br	4cc6c <_realloc_r+0x17c>
   4ccd4:	1444b03a 	or	r2,r2,r17
   4ccd8:	b0800115 	stw	r2,4(r22)
   4ccdc:	b44b883a 	add	r5,r22,r17
   4cce0:	18800054 	ori	r2,r3,1
   4cce4:	28800115 	stw	r2,4(r5)
   4cce8:	28c7883a 	add	r3,r5,r3
   4ccec:	18800117 	ldw	r2,4(r3)
   4ccf0:	a809883a 	mov	r4,r21
   4ccf4:	29400204 	addi	r5,r5,8
   4ccf8:	10800054 	ori	r2,r2,1
   4ccfc:	18800115 	stw	r2,4(r3)
   4cd00:	004a4380 	call	4a438 <_free_r>
   4cd04:	003fd606 	br	4cc60 <_realloc_r+0x170>
   4cd08:	38c0330e 	bge	r7,r3,4cdd8 <_realloc_r+0x2e8>
   4cd0c:	900b883a 	mov	r5,r18
   4cd10:	a809883a 	mov	r4,r21
   4cd14:	004afd00 	call	4afd0 <_malloc_r>
   4cd18:	1025883a 	mov	r18,r2
   4cd1c:	10001626 	beq	r2,zero,4cd78 <_realloc_r+0x288>
   4cd20:	80bfff17 	ldw	r2,-4(r16)
   4cd24:	00ffff84 	movi	r3,-2
   4cd28:	913ffe04 	addi	r4,r18,-8
   4cd2c:	10c6703a 	and	r3,r2,r3
   4cd30:	b0c7883a 	add	r3,r22,r3
   4cd34:	20c09926 	beq	r4,r3,4cf9c <_realloc_r+0x4ac>
   4cd38:	99bfff04 	addi	r6,r19,-4
   4cd3c:	00800904 	movi	r2,36
   4cd40:	11806436 	bltu	r2,r6,4ced4 <_realloc_r+0x3e4>
   4cd44:	00c004c4 	movi	r3,19
   4cd48:	19804036 	bltu	r3,r6,4ce4c <_realloc_r+0x35c>
   4cd4c:	9005883a 	mov	r2,r18
   4cd50:	8007883a 	mov	r3,r16
   4cd54:	19000017 	ldw	r4,0(r3)
   4cd58:	11000015 	stw	r4,0(r2)
   4cd5c:	19000117 	ldw	r4,4(r3)
   4cd60:	11000115 	stw	r4,4(r2)
   4cd64:	18c00217 	ldw	r3,8(r3)
   4cd68:	10c00215 	stw	r3,8(r2)
   4cd6c:	a809883a 	mov	r4,r21
   4cd70:	800b883a 	mov	r5,r16
   4cd74:	004a4380 	call	4a438 <_free_r>
   4cd78:	a809883a 	mov	r4,r21
   4cd7c:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4cd80:	003fba06 	br	4cc6c <_realloc_r+0x17c>
   4cd84:	300b883a 	mov	r5,r6
   4cd88:	dfc00a17 	ldw	ra,40(sp)
   4cd8c:	df000917 	ldw	fp,36(sp)
   4cd90:	ddc00817 	ldw	r23,32(sp)
   4cd94:	dd800717 	ldw	r22,28(sp)
   4cd98:	dd400617 	ldw	r21,24(sp)
   4cd9c:	dd000517 	ldw	r20,20(sp)
   4cda0:	dcc00417 	ldw	r19,16(sp)
   4cda4:	dc800317 	ldw	r18,12(sp)
   4cda8:	dc400217 	ldw	r17,8(sp)
   4cdac:	dc000117 	ldw	r16,4(sp)
   4cdb0:	dec00b04 	addi	sp,sp,44
   4cdb4:	004afd01 	jmpi	4afd0 <_malloc_r>
   4cdb8:	29800117 	ldw	r6,4(r5)
   4cdbc:	013fff04 	movi	r4,-4
   4cdc0:	89c00404 	addi	r7,r17,16
   4cdc4:	310c703a 	and	r6,r6,r4
   4cdc8:	34c9883a 	add	r4,r6,r19
   4cdcc:	21c0340e 	bge	r4,r7,4cea0 <_realloc_r+0x3b0>
   4cdd0:	2809883a 	mov	r4,r5
   4cdd4:	003f7106 	br	4cb9c <_realloc_r+0xac>
   4cdd8:	b8800317 	ldw	r2,12(r23)
   4cddc:	b8c00217 	ldw	r3,8(r23)
   4cde0:	99bfff04 	addi	r6,r19,-4
   4cde4:	01000904 	movi	r4,36
   4cde8:	18800315 	stw	r2,12(r3)
   4cdec:	10c00215 	stw	r3,8(r2)
   4cdf0:	bc800204 	addi	r18,r23,8
   4cdf4:	21807836 	bltu	r4,r6,4cfd8 <_realloc_r+0x4e8>
   4cdf8:	008004c4 	movi	r2,19
   4cdfc:	1180732e 	bgeu	r2,r6,4cfcc <_realloc_r+0x4dc>
   4ce00:	80800017 	ldw	r2,0(r16)
   4ce04:	b8800215 	stw	r2,8(r23)
   4ce08:	80800117 	ldw	r2,4(r16)
   4ce0c:	b8800315 	stw	r2,12(r23)
   4ce10:	008006c4 	movi	r2,27
   4ce14:	11808936 	bltu	r2,r6,4d03c <_realloc_r+0x54c>
   4ce18:	b8800404 	addi	r2,r23,16
   4ce1c:	80c00204 	addi	r3,r16,8
   4ce20:	19000017 	ldw	r4,0(r3)
   4ce24:	9021883a 	mov	r16,r18
   4ce28:	3829883a 	mov	r20,r7
   4ce2c:	11000015 	stw	r4,0(r2)
   4ce30:	19000117 	ldw	r4,4(r3)
   4ce34:	b82d883a 	mov	r22,r23
   4ce38:	11000115 	stw	r4,4(r2)
   4ce3c:	18c00217 	ldw	r3,8(r3)
   4ce40:	10c00215 	stw	r3,8(r2)
   4ce44:	b8800117 	ldw	r2,4(r23)
   4ce48:	003f7b06 	br	4cc38 <_realloc_r+0x148>
   4ce4c:	80c00017 	ldw	r3,0(r16)
   4ce50:	90c00015 	stw	r3,0(r18)
   4ce54:	80c00117 	ldw	r3,4(r16)
   4ce58:	90c00115 	stw	r3,4(r18)
   4ce5c:	00c006c4 	movi	r3,27
   4ce60:	19804636 	bltu	r3,r6,4cf7c <_realloc_r+0x48c>
   4ce64:	90800204 	addi	r2,r18,8
   4ce68:	80c00204 	addi	r3,r16,8
   4ce6c:	003fb906 	br	4cd54 <_realloc_r+0x264>
   4ce70:	9005883a 	mov	r2,r18
   4ce74:	8007883a 	mov	r3,r16
   4ce78:	19000017 	ldw	r4,0(r3)
   4ce7c:	9021883a 	mov	r16,r18
   4ce80:	b82d883a 	mov	r22,r23
   4ce84:	11000015 	stw	r4,0(r2)
   4ce88:	19000117 	ldw	r4,4(r3)
   4ce8c:	11000115 	stw	r4,4(r2)
   4ce90:	18c00217 	ldw	r3,8(r3)
   4ce94:	10c00215 	stw	r3,8(r2)
   4ce98:	b8800117 	ldw	r2,4(r23)
   4ce9c:	003f6606 	br	4cc38 <_realloc_r+0x148>
   4cea0:	2445c83a 	sub	r2,r4,r17
   4cea4:	b46d883a 	add	r22,r22,r17
   4cea8:	10800054 	ori	r2,r2,1
   4ceac:	b0800115 	stw	r2,4(r22)
   4ceb0:	80bfff17 	ldw	r2,-4(r16)
   4ceb4:	a809883a 	mov	r4,r21
   4ceb8:	e5800215 	stw	r22,8(fp)
   4cebc:	1080004c 	andi	r2,r2,1
   4cec0:	88a2b03a 	or	r17,r17,r2
   4cec4:	847fff15 	stw	r17,-4(r16)
   4cec8:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4cecc:	8025883a 	mov	r18,r16
   4ced0:	003f6606 	br	4cc6c <_realloc_r+0x17c>
   4ced4:	9009883a 	mov	r4,r18
   4ced8:	800b883a 	mov	r5,r16
   4cedc:	004b9440 	call	4b944 <memmove>
   4cee0:	003fa206 	br	4cd6c <_realloc_r+0x27c>
   4cee4:	88800404 	addi	r2,r17,16
   4cee8:	a0bf8716 	blt	r20,r2,4cd08 <_realloc_r+0x218>
   4ceec:	b8800317 	ldw	r2,12(r23)
   4cef0:	b8c00217 	ldw	r3,8(r23)
   4cef4:	99bfff04 	addi	r6,r19,-4
   4cef8:	01000904 	movi	r4,36
   4cefc:	18800315 	stw	r2,12(r3)
   4cf00:	10c00215 	stw	r3,8(r2)
   4cf04:	bc800204 	addi	r18,r23,8
   4cf08:	21806536 	bltu	r4,r6,4d0a0 <_realloc_r+0x5b0>
   4cf0c:	008004c4 	movi	r2,19
   4cf10:	1180592e 	bgeu	r2,r6,4d078 <_realloc_r+0x588>
   4cf14:	80800017 	ldw	r2,0(r16)
   4cf18:	b8800215 	stw	r2,8(r23)
   4cf1c:	80800117 	ldw	r2,4(r16)
   4cf20:	b8800315 	stw	r2,12(r23)
   4cf24:	008006c4 	movi	r2,27
   4cf28:	11806136 	bltu	r2,r6,4d0b0 <_realloc_r+0x5c0>
   4cf2c:	b8800404 	addi	r2,r23,16
   4cf30:	80c00204 	addi	r3,r16,8
   4cf34:	19000017 	ldw	r4,0(r3)
   4cf38:	11000015 	stw	r4,0(r2)
   4cf3c:	19000117 	ldw	r4,4(r3)
   4cf40:	11000115 	stw	r4,4(r2)
   4cf44:	18c00217 	ldw	r3,8(r3)
   4cf48:	10c00215 	stw	r3,8(r2)
   4cf4c:	a447c83a 	sub	r3,r20,r17
   4cf50:	bc45883a 	add	r2,r23,r17
   4cf54:	18c00054 	ori	r3,r3,1
   4cf58:	10c00115 	stw	r3,4(r2)
   4cf5c:	b8c00117 	ldw	r3,4(r23)
   4cf60:	e0800215 	stw	r2,8(fp)
   4cf64:	a809883a 	mov	r4,r21
   4cf68:	1880004c 	andi	r2,r3,1
   4cf6c:	88a2b03a 	or	r17,r17,r2
   4cf70:	bc400115 	stw	r17,4(r23)
   4cf74:	004ecc40 	call	4ecc4 <__malloc_unlock>
   4cf78:	003f3c06 	br	4cc6c <_realloc_r+0x17c>
   4cf7c:	80c00217 	ldw	r3,8(r16)
   4cf80:	90c00215 	stw	r3,8(r18)
   4cf84:	80c00317 	ldw	r3,12(r16)
   4cf88:	90c00315 	stw	r3,12(r18)
   4cf8c:	30802426 	beq	r6,r2,4d020 <_realloc_r+0x530>
   4cf90:	90800404 	addi	r2,r18,16
   4cf94:	80c00404 	addi	r3,r16,16
   4cf98:	003f6e06 	br	4cd54 <_realloc_r+0x264>
   4cf9c:	953fff17 	ldw	r20,-4(r18)
   4cfa0:	00ffff04 	movi	r3,-4
   4cfa4:	a0e8703a 	and	r20,r20,r3
   4cfa8:	a4e9883a 	add	r20,r20,r19
   4cfac:	003f2206 	br	4cc38 <_realloc_r+0x148>
   4cfb0:	800b883a 	mov	r5,r16
   4cfb4:	9009883a 	mov	r4,r18
   4cfb8:	004b9440 	call	4b944 <memmove>
   4cfbc:	9021883a 	mov	r16,r18
   4cfc0:	b8800117 	ldw	r2,4(r23)
   4cfc4:	b82d883a 	mov	r22,r23
   4cfc8:	003f1b06 	br	4cc38 <_realloc_r+0x148>
   4cfcc:	9005883a 	mov	r2,r18
   4cfd0:	8007883a 	mov	r3,r16
   4cfd4:	003f9206 	br	4ce20 <_realloc_r+0x330>
   4cfd8:	800b883a 	mov	r5,r16
   4cfdc:	9009883a 	mov	r4,r18
   4cfe0:	d9c00015 	stw	r7,0(sp)
   4cfe4:	004b9440 	call	4b944 <memmove>
   4cfe8:	d9c00017 	ldw	r7,0(sp)
   4cfec:	9021883a 	mov	r16,r18
   4cff0:	b8800117 	ldw	r2,4(r23)
   4cff4:	3829883a 	mov	r20,r7
   4cff8:	b82d883a 	mov	r22,r23
   4cffc:	003f0e06 	br	4cc38 <_realloc_r+0x148>
   4d000:	80800217 	ldw	r2,8(r16)
   4d004:	b8800415 	stw	r2,16(r23)
   4d008:	80800317 	ldw	r2,12(r16)
   4d00c:	b8800515 	stw	r2,20(r23)
   4d010:	31001226 	beq	r6,r4,4d05c <_realloc_r+0x56c>
   4d014:	b8800604 	addi	r2,r23,24
   4d018:	80c00404 	addi	r3,r16,16
   4d01c:	003f9606 	br	4ce78 <_realloc_r+0x388>
   4d020:	81000417 	ldw	r4,16(r16)
   4d024:	90800604 	addi	r2,r18,24
   4d028:	80c00604 	addi	r3,r16,24
   4d02c:	91000415 	stw	r4,16(r18)
   4d030:	81000517 	ldw	r4,20(r16)
   4d034:	91000515 	stw	r4,20(r18)
   4d038:	003f4606 	br	4cd54 <_realloc_r+0x264>
   4d03c:	80800217 	ldw	r2,8(r16)
   4d040:	b8800415 	stw	r2,16(r23)
   4d044:	80800317 	ldw	r2,12(r16)
   4d048:	b8800515 	stw	r2,20(r23)
   4d04c:	31000d26 	beq	r6,r4,4d084 <_realloc_r+0x594>
   4d050:	b8800604 	addi	r2,r23,24
   4d054:	80c00404 	addi	r3,r16,16
   4d058:	003f7106 	br	4ce20 <_realloc_r+0x330>
   4d05c:	81000417 	ldw	r4,16(r16)
   4d060:	b8800804 	addi	r2,r23,32
   4d064:	80c00604 	addi	r3,r16,24
   4d068:	b9000615 	stw	r4,24(r23)
   4d06c:	81000517 	ldw	r4,20(r16)
   4d070:	b9000715 	stw	r4,28(r23)
   4d074:	003f8006 	br	4ce78 <_realloc_r+0x388>
   4d078:	9005883a 	mov	r2,r18
   4d07c:	8007883a 	mov	r3,r16
   4d080:	003fac06 	br	4cf34 <_realloc_r+0x444>
   4d084:	81000417 	ldw	r4,16(r16)
   4d088:	b8800804 	addi	r2,r23,32
   4d08c:	80c00604 	addi	r3,r16,24
   4d090:	b9000615 	stw	r4,24(r23)
   4d094:	81000517 	ldw	r4,20(r16)
   4d098:	b9000715 	stw	r4,28(r23)
   4d09c:	003f6006 	br	4ce20 <_realloc_r+0x330>
   4d0a0:	9009883a 	mov	r4,r18
   4d0a4:	800b883a 	mov	r5,r16
   4d0a8:	004b9440 	call	4b944 <memmove>
   4d0ac:	003fa706 	br	4cf4c <_realloc_r+0x45c>
   4d0b0:	80800217 	ldw	r2,8(r16)
   4d0b4:	b8800415 	stw	r2,16(r23)
   4d0b8:	80800317 	ldw	r2,12(r16)
   4d0bc:	b8800515 	stw	r2,20(r23)
   4d0c0:	31000326 	beq	r6,r4,4d0d0 <_realloc_r+0x5e0>
   4d0c4:	b8800604 	addi	r2,r23,24
   4d0c8:	80c00404 	addi	r3,r16,16
   4d0cc:	003f9906 	br	4cf34 <_realloc_r+0x444>
   4d0d0:	81000417 	ldw	r4,16(r16)
   4d0d4:	b8800804 	addi	r2,r23,32
   4d0d8:	80c00604 	addi	r3,r16,24
   4d0dc:	b9000615 	stw	r4,24(r23)
   4d0e0:	81000517 	ldw	r4,20(r16)
   4d0e4:	b9000715 	stw	r4,28(r23)
   4d0e8:	003f9206 	br	4cf34 <_realloc_r+0x444>

0004d0ec <__isinfd>:
   4d0ec:	0105c83a 	sub	r2,zero,r4
   4d0f0:	1108b03a 	or	r4,r2,r4
   4d0f4:	2004d7fa 	srli	r2,r4,31
   4d0f8:	00e00034 	movhi	r3,32768
   4d0fc:	18ffffc4 	addi	r3,r3,-1
   4d100:	28ca703a 	and	r5,r5,r3
   4d104:	1144b03a 	or	r2,r2,r5
   4d108:	00dffc34 	movhi	r3,32752
   4d10c:	1885c83a 	sub	r2,r3,r2
   4d110:	0087c83a 	sub	r3,zero,r2
   4d114:	1884b03a 	or	r2,r3,r2
   4d118:	1005d7fa 	srai	r2,r2,31
   4d11c:	10800044 	addi	r2,r2,1
   4d120:	f800283a 	ret

0004d124 <__isnand>:
   4d124:	0105c83a 	sub	r2,zero,r4
   4d128:	1108b03a 	or	r4,r2,r4
   4d12c:	2004d7fa 	srli	r2,r4,31
   4d130:	00e00034 	movhi	r3,32768
   4d134:	18ffffc4 	addi	r3,r3,-1
   4d138:	28ca703a 	and	r5,r5,r3
   4d13c:	1144b03a 	or	r2,r2,r5
   4d140:	00dffc34 	movhi	r3,32752
   4d144:	1885c83a 	sub	r2,r3,r2
   4d148:	1004d7fa 	srli	r2,r2,31
   4d14c:	f800283a 	ret

0004d150 <_sbrk_r>:
   4d150:	defffd04 	addi	sp,sp,-12
   4d154:	dc400115 	stw	r17,4(sp)
   4d158:	dc000015 	stw	r16,0(sp)
   4d15c:	2023883a 	mov	r17,r4
   4d160:	04000174 	movhi	r16,5
   4d164:	84150c04 	addi	r16,r16,21552
   4d168:	2809883a 	mov	r4,r5
   4d16c:	dfc00215 	stw	ra,8(sp)
   4d170:	80000015 	stw	zero,0(r16)
   4d174:	004f0f40 	call	4f0f4 <sbrk>
   4d178:	00ffffc4 	movi	r3,-1
   4d17c:	10c00526 	beq	r2,r3,4d194 <_sbrk_r+0x44>
   4d180:	dfc00217 	ldw	ra,8(sp)
   4d184:	dc400117 	ldw	r17,4(sp)
   4d188:	dc000017 	ldw	r16,0(sp)
   4d18c:	dec00304 	addi	sp,sp,12
   4d190:	f800283a 	ret
   4d194:	80c00017 	ldw	r3,0(r16)
   4d198:	183ff926 	beq	r3,zero,4d180 <_sbrk_r+0x30>
   4d19c:	88c00015 	stw	r3,0(r17)
   4d1a0:	dfc00217 	ldw	ra,8(sp)
   4d1a4:	dc400117 	ldw	r17,4(sp)
   4d1a8:	dc000017 	ldw	r16,0(sp)
   4d1ac:	dec00304 	addi	sp,sp,12
   4d1b0:	f800283a 	ret

0004d1b4 <__sread>:
   4d1b4:	defffe04 	addi	sp,sp,-8
   4d1b8:	dc000015 	stw	r16,0(sp)
   4d1bc:	2821883a 	mov	r16,r5
   4d1c0:	2940038f 	ldh	r5,14(r5)
   4d1c4:	dfc00115 	stw	ra,4(sp)
   4d1c8:	004d7ac0 	call	4d7ac <_read_r>
   4d1cc:	10000716 	blt	r2,zero,4d1ec <__sread+0x38>
   4d1d0:	80c01417 	ldw	r3,80(r16)
   4d1d4:	1887883a 	add	r3,r3,r2
   4d1d8:	80c01415 	stw	r3,80(r16)
   4d1dc:	dfc00117 	ldw	ra,4(sp)
   4d1e0:	dc000017 	ldw	r16,0(sp)
   4d1e4:	dec00204 	addi	sp,sp,8
   4d1e8:	f800283a 	ret
   4d1ec:	80c0030b 	ldhu	r3,12(r16)
   4d1f0:	18fbffcc 	andi	r3,r3,61439
   4d1f4:	80c0030d 	sth	r3,12(r16)
   4d1f8:	dfc00117 	ldw	ra,4(sp)
   4d1fc:	dc000017 	ldw	r16,0(sp)
   4d200:	dec00204 	addi	sp,sp,8
   4d204:	f800283a 	ret

0004d208 <__swrite>:
   4d208:	2880030b 	ldhu	r2,12(r5)
   4d20c:	defffb04 	addi	sp,sp,-20
   4d210:	dcc00315 	stw	r19,12(sp)
   4d214:	10c0400c 	andi	r3,r2,256
   4d218:	18ffffcc 	andi	r3,r3,65535
   4d21c:	18e0001c 	xori	r3,r3,32768
   4d220:	dc800215 	stw	r18,8(sp)
   4d224:	dc400115 	stw	r17,4(sp)
   4d228:	dc000015 	stw	r16,0(sp)
   4d22c:	dfc00415 	stw	ra,16(sp)
   4d230:	18e00004 	addi	r3,r3,-32768
   4d234:	2821883a 	mov	r16,r5
   4d238:	2027883a 	mov	r19,r4
   4d23c:	3025883a 	mov	r18,r6
   4d240:	3823883a 	mov	r17,r7
   4d244:	18000526 	beq	r3,zero,4d25c <__swrite+0x54>
   4d248:	2940038f 	ldh	r5,14(r5)
   4d24c:	000d883a 	mov	r6,zero
   4d250:	01c00084 	movi	r7,2
   4d254:	004d7400 	call	4d740 <_lseek_r>
   4d258:	8080030b 	ldhu	r2,12(r16)
   4d25c:	8140038f 	ldh	r5,14(r16)
   4d260:	10bbffcc 	andi	r2,r2,61439
   4d264:	9809883a 	mov	r4,r19
   4d268:	900d883a 	mov	r6,r18
   4d26c:	880f883a 	mov	r7,r17
   4d270:	8080030d 	sth	r2,12(r16)
   4d274:	dfc00417 	ldw	ra,16(sp)
   4d278:	dcc00317 	ldw	r19,12(sp)
   4d27c:	dc800217 	ldw	r18,8(sp)
   4d280:	dc400117 	ldw	r17,4(sp)
   4d284:	dc000017 	ldw	r16,0(sp)
   4d288:	dec00504 	addi	sp,sp,20
   4d28c:	004d3981 	jmpi	4d398 <_write_r>

0004d290 <__sseek>:
   4d290:	defffe04 	addi	sp,sp,-8
   4d294:	dc000015 	stw	r16,0(sp)
   4d298:	2821883a 	mov	r16,r5
   4d29c:	2940038f 	ldh	r5,14(r5)
   4d2a0:	dfc00115 	stw	ra,4(sp)
   4d2a4:	004d7400 	call	4d740 <_lseek_r>
   4d2a8:	00ffffc4 	movi	r3,-1
   4d2ac:	10c00826 	beq	r2,r3,4d2d0 <__sseek+0x40>
   4d2b0:	80c0030b 	ldhu	r3,12(r16)
   4d2b4:	80801415 	stw	r2,80(r16)
   4d2b8:	18c40014 	ori	r3,r3,4096
   4d2bc:	80c0030d 	sth	r3,12(r16)
   4d2c0:	dfc00117 	ldw	ra,4(sp)
   4d2c4:	dc000017 	ldw	r16,0(sp)
   4d2c8:	dec00204 	addi	sp,sp,8
   4d2cc:	f800283a 	ret
   4d2d0:	80c0030b 	ldhu	r3,12(r16)
   4d2d4:	18fbffcc 	andi	r3,r3,61439
   4d2d8:	80c0030d 	sth	r3,12(r16)
   4d2dc:	dfc00117 	ldw	ra,4(sp)
   4d2e0:	dc000017 	ldw	r16,0(sp)
   4d2e4:	dec00204 	addi	sp,sp,8
   4d2e8:	f800283a 	ret

0004d2ec <__sclose>:
   4d2ec:	2940038f 	ldh	r5,14(r5)
   4d2f0:	004d4c01 	jmpi	4d4c0 <_close_r>

0004d2f4 <strcmp>:
   4d2f4:	2904b03a 	or	r2,r5,r4
   4d2f8:	108000cc 	andi	r2,r2,3
   4d2fc:	1000171e 	bne	r2,zero,4d35c <strcmp+0x68>
   4d300:	20800017 	ldw	r2,0(r4)
   4d304:	28c00017 	ldw	r3,0(r5)
   4d308:	10c0141e 	bne	r2,r3,4d35c <strcmp+0x68>
   4d30c:	027fbff4 	movhi	r9,65279
   4d310:	4a7fbfc4 	addi	r9,r9,-257
   4d314:	1247883a 	add	r3,r2,r9
   4d318:	0084303a 	nor	r2,zero,r2
   4d31c:	1884703a 	and	r2,r3,r2
   4d320:	02202074 	movhi	r8,32897
   4d324:	42202004 	addi	r8,r8,-32640
   4d328:	1204703a 	and	r2,r2,r8
   4d32c:	10000226 	beq	r2,zero,4d338 <strcmp+0x44>
   4d330:	00001706 	br	4d390 <strcmp+0x9c>
   4d334:	3000161e 	bne	r6,zero,4d390 <strcmp+0x9c>
   4d338:	21000104 	addi	r4,r4,4
   4d33c:	20800017 	ldw	r2,0(r4)
   4d340:	29400104 	addi	r5,r5,4
   4d344:	28c00017 	ldw	r3,0(r5)
   4d348:	124f883a 	add	r7,r2,r9
   4d34c:	008c303a 	nor	r6,zero,r2
   4d350:	398c703a 	and	r6,r7,r6
   4d354:	320c703a 	and	r6,r6,r8
   4d358:	10fff626 	beq	r2,r3,4d334 <strcmp+0x40>
   4d35c:	20800007 	ldb	r2,0(r4)
   4d360:	1000051e 	bne	r2,zero,4d378 <strcmp+0x84>
   4d364:	00000606 	br	4d380 <strcmp+0x8c>
   4d368:	21000044 	addi	r4,r4,1
   4d36c:	20800007 	ldb	r2,0(r4)
   4d370:	29400044 	addi	r5,r5,1
   4d374:	10000226 	beq	r2,zero,4d380 <strcmp+0x8c>
   4d378:	28c00007 	ldb	r3,0(r5)
   4d37c:	10fffa26 	beq	r2,r3,4d368 <strcmp+0x74>
   4d380:	20c00003 	ldbu	r3,0(r4)
   4d384:	28800003 	ldbu	r2,0(r5)
   4d388:	1885c83a 	sub	r2,r3,r2
   4d38c:	f800283a 	ret
   4d390:	0005883a 	mov	r2,zero
   4d394:	f800283a 	ret

0004d398 <_write_r>:
   4d398:	defffd04 	addi	sp,sp,-12
   4d39c:	dc400115 	stw	r17,4(sp)
   4d3a0:	dc000015 	stw	r16,0(sp)
   4d3a4:	2023883a 	mov	r17,r4
   4d3a8:	04000174 	movhi	r16,5
   4d3ac:	84150c04 	addi	r16,r16,21552
   4d3b0:	2809883a 	mov	r4,r5
   4d3b4:	300b883a 	mov	r5,r6
   4d3b8:	380d883a 	mov	r6,r7
   4d3bc:	dfc00215 	stw	ra,8(sp)
   4d3c0:	80000015 	stw	zero,0(r16)
   4d3c4:	004f1f40 	call	4f1f4 <write>
   4d3c8:	00ffffc4 	movi	r3,-1
   4d3cc:	10c00526 	beq	r2,r3,4d3e4 <_write_r+0x4c>
   4d3d0:	dfc00217 	ldw	ra,8(sp)
   4d3d4:	dc400117 	ldw	r17,4(sp)
   4d3d8:	dc000017 	ldw	r16,0(sp)
   4d3dc:	dec00304 	addi	sp,sp,12
   4d3e0:	f800283a 	ret
   4d3e4:	80c00017 	ldw	r3,0(r16)
   4d3e8:	183ff926 	beq	r3,zero,4d3d0 <_write_r+0x38>
   4d3ec:	88c00015 	stw	r3,0(r17)
   4d3f0:	dfc00217 	ldw	ra,8(sp)
   4d3f4:	dc400117 	ldw	r17,4(sp)
   4d3f8:	dc000017 	ldw	r16,0(sp)
   4d3fc:	dec00304 	addi	sp,sp,12
   4d400:	f800283a 	ret

0004d404 <_calloc_r>:
   4d404:	314b383a 	mul	r5,r6,r5
   4d408:	defffe04 	addi	sp,sp,-8
   4d40c:	dc000015 	stw	r16,0(sp)
   4d410:	dfc00115 	stw	ra,4(sp)
   4d414:	004afd00 	call	4afd0 <_malloc_r>
   4d418:	1021883a 	mov	r16,r2
   4d41c:	10000c26 	beq	r2,zero,4d450 <_calloc_r+0x4c>
   4d420:	11bfff17 	ldw	r6,-4(r2)
   4d424:	00ffff04 	movi	r3,-4
   4d428:	00800904 	movi	r2,36
   4d42c:	30cc703a 	and	r6,r6,r3
   4d430:	30cd883a 	add	r6,r6,r3
   4d434:	11801436 	bltu	r2,r6,4d488 <_calloc_r+0x84>
   4d438:	00c004c4 	movi	r3,19
   4d43c:	19800936 	bltu	r3,r6,4d464 <_calloc_r+0x60>
   4d440:	8005883a 	mov	r2,r16
   4d444:	10000015 	stw	zero,0(r2)
   4d448:	10000115 	stw	zero,4(r2)
   4d44c:	10000215 	stw	zero,8(r2)
   4d450:	8005883a 	mov	r2,r16
   4d454:	dfc00117 	ldw	ra,4(sp)
   4d458:	dc000017 	ldw	r16,0(sp)
   4d45c:	dec00204 	addi	sp,sp,8
   4d460:	f800283a 	ret
   4d464:	80000015 	stw	zero,0(r16)
   4d468:	80000115 	stw	zero,4(r16)
   4d46c:	00c006c4 	movi	r3,27
   4d470:	19800d2e 	bgeu	r3,r6,4d4a8 <_calloc_r+0xa4>
   4d474:	80000215 	stw	zero,8(r16)
   4d478:	80000315 	stw	zero,12(r16)
   4d47c:	30800c26 	beq	r6,r2,4d4b0 <_calloc_r+0xac>
   4d480:	80800404 	addi	r2,r16,16
   4d484:	003fef06 	br	4d444 <_calloc_r+0x40>
   4d488:	8009883a 	mov	r4,r16
   4d48c:	000b883a 	mov	r5,zero
   4d490:	004ba6c0 	call	4ba6c <memset>
   4d494:	8005883a 	mov	r2,r16
   4d498:	dfc00117 	ldw	ra,4(sp)
   4d49c:	dc000017 	ldw	r16,0(sp)
   4d4a0:	dec00204 	addi	sp,sp,8
   4d4a4:	f800283a 	ret
   4d4a8:	80800204 	addi	r2,r16,8
   4d4ac:	003fe506 	br	4d444 <_calloc_r+0x40>
   4d4b0:	80000415 	stw	zero,16(r16)
   4d4b4:	80000515 	stw	zero,20(r16)
   4d4b8:	80800604 	addi	r2,r16,24
   4d4bc:	003fe106 	br	4d444 <_calloc_r+0x40>

0004d4c0 <_close_r>:
   4d4c0:	defffd04 	addi	sp,sp,-12
   4d4c4:	dc400115 	stw	r17,4(sp)
   4d4c8:	dc000015 	stw	r16,0(sp)
   4d4cc:	2023883a 	mov	r17,r4
   4d4d0:	04000174 	movhi	r16,5
   4d4d4:	84150c04 	addi	r16,r16,21552
   4d4d8:	2809883a 	mov	r4,r5
   4d4dc:	dfc00215 	stw	ra,8(sp)
   4d4e0:	80000015 	stw	zero,0(r16)
   4d4e4:	004e5900 	call	4e590 <close>
   4d4e8:	00ffffc4 	movi	r3,-1
   4d4ec:	10c00526 	beq	r2,r3,4d504 <_close_r+0x44>
   4d4f0:	dfc00217 	ldw	ra,8(sp)
   4d4f4:	dc400117 	ldw	r17,4(sp)
   4d4f8:	dc000017 	ldw	r16,0(sp)
   4d4fc:	dec00304 	addi	sp,sp,12
   4d500:	f800283a 	ret
   4d504:	80c00017 	ldw	r3,0(r16)
   4d508:	183ff926 	beq	r3,zero,4d4f0 <_close_r+0x30>
   4d50c:	88c00015 	stw	r3,0(r17)
   4d510:	dfc00217 	ldw	ra,8(sp)
   4d514:	dc400117 	ldw	r17,4(sp)
   4d518:	dc000017 	ldw	r16,0(sp)
   4d51c:	dec00304 	addi	sp,sp,12
   4d520:	f800283a 	ret

0004d524 <_fclose_r>:
   4d524:	defffc04 	addi	sp,sp,-16
   4d528:	dc400115 	stw	r17,4(sp)
   4d52c:	dc000015 	stw	r16,0(sp)
   4d530:	dfc00315 	stw	ra,12(sp)
   4d534:	dc800215 	stw	r18,8(sp)
   4d538:	2821883a 	mov	r16,r5
   4d53c:	2023883a 	mov	r17,r4
   4d540:	28003426 	beq	r5,zero,4d614 <_fclose_r+0xf0>
   4d544:	004a2bc0 	call	4a2bc <__sfp_lock_acquire>
   4d548:	88000226 	beq	r17,zero,4d554 <_fclose_r+0x30>
   4d54c:	88800e17 	ldw	r2,56(r17)
   4d550:	10003826 	beq	r2,zero,4d634 <_fclose_r+0x110>
   4d554:	8080030f 	ldh	r2,12(r16)
   4d558:	10002526 	beq	r2,zero,4d5f0 <_fclose_r+0xcc>
   4d55c:	8809883a 	mov	r4,r17
   4d560:	800b883a 	mov	r5,r16
   4d564:	0049e0c0 	call	49e0c <_fflush_r>
   4d568:	1025883a 	mov	r18,r2
   4d56c:	80800b17 	ldw	r2,44(r16)
   4d570:	10000426 	beq	r2,zero,4d584 <_fclose_r+0x60>
   4d574:	81400717 	ldw	r5,28(r16)
   4d578:	8809883a 	mov	r4,r17
   4d57c:	103ee83a 	callr	r2
   4d580:	10003516 	blt	r2,zero,4d658 <_fclose_r+0x134>
   4d584:	8080030b 	ldhu	r2,12(r16)
   4d588:	1080200c 	andi	r2,r2,128
   4d58c:	10bfffcc 	andi	r2,r2,65535
   4d590:	10a0001c 	xori	r2,r2,32768
   4d594:	10a00004 	addi	r2,r2,-32768
   4d598:	10002b1e 	bne	r2,zero,4d648 <_fclose_r+0x124>
   4d59c:	81400c17 	ldw	r5,48(r16)
   4d5a0:	28000526 	beq	r5,zero,4d5b8 <_fclose_r+0x94>
   4d5a4:	80801004 	addi	r2,r16,64
   4d5a8:	28800226 	beq	r5,r2,4d5b4 <_fclose_r+0x90>
   4d5ac:	8809883a 	mov	r4,r17
   4d5b0:	004a4380 	call	4a438 <_free_r>
   4d5b4:	80000c15 	stw	zero,48(r16)
   4d5b8:	81401117 	ldw	r5,68(r16)
   4d5bc:	28000326 	beq	r5,zero,4d5cc <_fclose_r+0xa8>
   4d5c0:	8809883a 	mov	r4,r17
   4d5c4:	004a4380 	call	4a438 <_free_r>
   4d5c8:	80001115 	stw	zero,68(r16)
   4d5cc:	8000030d 	sth	zero,12(r16)
   4d5d0:	004a2c00 	call	4a2c0 <__sfp_lock_release>
   4d5d4:	9005883a 	mov	r2,r18
   4d5d8:	dfc00317 	ldw	ra,12(sp)
   4d5dc:	dc800217 	ldw	r18,8(sp)
   4d5e0:	dc400117 	ldw	r17,4(sp)
   4d5e4:	dc000017 	ldw	r16,0(sp)
   4d5e8:	dec00404 	addi	sp,sp,16
   4d5ec:	f800283a 	ret
   4d5f0:	004a2c00 	call	4a2c0 <__sfp_lock_release>
   4d5f4:	0025883a 	mov	r18,zero
   4d5f8:	9005883a 	mov	r2,r18
   4d5fc:	dfc00317 	ldw	ra,12(sp)
   4d600:	dc800217 	ldw	r18,8(sp)
   4d604:	dc400117 	ldw	r17,4(sp)
   4d608:	dc000017 	ldw	r16,0(sp)
   4d60c:	dec00404 	addi	sp,sp,16
   4d610:	f800283a 	ret
   4d614:	0025883a 	mov	r18,zero
   4d618:	9005883a 	mov	r2,r18
   4d61c:	dfc00317 	ldw	ra,12(sp)
   4d620:	dc800217 	ldw	r18,8(sp)
   4d624:	dc400117 	ldw	r17,4(sp)
   4d628:	dc000017 	ldw	r16,0(sp)
   4d62c:	dec00404 	addi	sp,sp,16
   4d630:	f800283a 	ret
   4d634:	8809883a 	mov	r4,r17
   4d638:	004a0b40 	call	4a0b4 <__sinit>
   4d63c:	8080030f 	ldh	r2,12(r16)
   4d640:	103fc61e 	bne	r2,zero,4d55c <_fclose_r+0x38>
   4d644:	003fea06 	br	4d5f0 <_fclose_r+0xcc>
   4d648:	81400417 	ldw	r5,16(r16)
   4d64c:	8809883a 	mov	r4,r17
   4d650:	004a4380 	call	4a438 <_free_r>
   4d654:	003fd106 	br	4d59c <_fclose_r+0x78>
   4d658:	04bfffc4 	movi	r18,-1
   4d65c:	003fc906 	br	4d584 <_fclose_r+0x60>

0004d660 <fclose>:
   4d660:	00800174 	movhi	r2,5
   4d664:	108df004 	addi	r2,r2,14272
   4d668:	200b883a 	mov	r5,r4
   4d66c:	11000017 	ldw	r4,0(r2)
   4d670:	004d5241 	jmpi	4d524 <_fclose_r>

0004d674 <_fstat_r>:
   4d674:	defffd04 	addi	sp,sp,-12
   4d678:	dc400115 	stw	r17,4(sp)
   4d67c:	dc000015 	stw	r16,0(sp)
   4d680:	2023883a 	mov	r17,r4
   4d684:	04000174 	movhi	r16,5
   4d688:	84150c04 	addi	r16,r16,21552
   4d68c:	2809883a 	mov	r4,r5
   4d690:	300b883a 	mov	r5,r6
   4d694:	dfc00215 	stw	ra,8(sp)
   4d698:	80000015 	stw	zero,0(r16)
   4d69c:	004e6d40 	call	4e6d4 <fstat>
   4d6a0:	00ffffc4 	movi	r3,-1
   4d6a4:	10c00526 	beq	r2,r3,4d6bc <_fstat_r+0x48>
   4d6a8:	dfc00217 	ldw	ra,8(sp)
   4d6ac:	dc400117 	ldw	r17,4(sp)
   4d6b0:	dc000017 	ldw	r16,0(sp)
   4d6b4:	dec00304 	addi	sp,sp,12
   4d6b8:	f800283a 	ret
   4d6bc:	80c00017 	ldw	r3,0(r16)
   4d6c0:	183ff926 	beq	r3,zero,4d6a8 <_fstat_r+0x34>
   4d6c4:	88c00015 	stw	r3,0(r17)
   4d6c8:	dfc00217 	ldw	ra,8(sp)
   4d6cc:	dc400117 	ldw	r17,4(sp)
   4d6d0:	dc000017 	ldw	r16,0(sp)
   4d6d4:	dec00304 	addi	sp,sp,12
   4d6d8:	f800283a 	ret

0004d6dc <_isatty_r>:
   4d6dc:	defffd04 	addi	sp,sp,-12
   4d6e0:	dc400115 	stw	r17,4(sp)
   4d6e4:	dc000015 	stw	r16,0(sp)
   4d6e8:	2023883a 	mov	r17,r4
   4d6ec:	04000174 	movhi	r16,5
   4d6f0:	84150c04 	addi	r16,r16,21552
   4d6f4:	2809883a 	mov	r4,r5
   4d6f8:	dfc00215 	stw	ra,8(sp)
   4d6fc:	80000015 	stw	zero,0(r16)
   4d700:	004e9800 	call	4e980 <isatty>
   4d704:	00ffffc4 	movi	r3,-1
   4d708:	10c00526 	beq	r2,r3,4d720 <_isatty_r+0x44>
   4d70c:	dfc00217 	ldw	ra,8(sp)
   4d710:	dc400117 	ldw	r17,4(sp)
   4d714:	dc000017 	ldw	r16,0(sp)
   4d718:	dec00304 	addi	sp,sp,12
   4d71c:	f800283a 	ret
   4d720:	80c00017 	ldw	r3,0(r16)
   4d724:	183ff926 	beq	r3,zero,4d70c <_isatty_r+0x30>
   4d728:	88c00015 	stw	r3,0(r17)
   4d72c:	dfc00217 	ldw	ra,8(sp)
   4d730:	dc400117 	ldw	r17,4(sp)
   4d734:	dc000017 	ldw	r16,0(sp)
   4d738:	dec00304 	addi	sp,sp,12
   4d73c:	f800283a 	ret

0004d740 <_lseek_r>:
   4d740:	defffd04 	addi	sp,sp,-12
   4d744:	dc400115 	stw	r17,4(sp)
   4d748:	dc000015 	stw	r16,0(sp)
   4d74c:	2023883a 	mov	r17,r4
   4d750:	04000174 	movhi	r16,5
   4d754:	84150c04 	addi	r16,r16,21552
   4d758:	2809883a 	mov	r4,r5
   4d75c:	300b883a 	mov	r5,r6
   4d760:	380d883a 	mov	r6,r7
   4d764:	dfc00215 	stw	ra,8(sp)
   4d768:	80000015 	stw	zero,0(r16)
   4d76c:	004eb5c0 	call	4eb5c <lseek>
   4d770:	00ffffc4 	movi	r3,-1
   4d774:	10c00526 	beq	r2,r3,4d78c <_lseek_r+0x4c>
   4d778:	dfc00217 	ldw	ra,8(sp)
   4d77c:	dc400117 	ldw	r17,4(sp)
   4d780:	dc000017 	ldw	r16,0(sp)
   4d784:	dec00304 	addi	sp,sp,12
   4d788:	f800283a 	ret
   4d78c:	80c00017 	ldw	r3,0(r16)
   4d790:	183ff926 	beq	r3,zero,4d778 <_lseek_r+0x38>
   4d794:	88c00015 	stw	r3,0(r17)
   4d798:	dfc00217 	ldw	ra,8(sp)
   4d79c:	dc400117 	ldw	r17,4(sp)
   4d7a0:	dc000017 	ldw	r16,0(sp)
   4d7a4:	dec00304 	addi	sp,sp,12
   4d7a8:	f800283a 	ret

0004d7ac <_read_r>:
   4d7ac:	defffd04 	addi	sp,sp,-12
   4d7b0:	dc400115 	stw	r17,4(sp)
   4d7b4:	dc000015 	stw	r16,0(sp)
   4d7b8:	2023883a 	mov	r17,r4
   4d7bc:	04000174 	movhi	r16,5
   4d7c0:	84150c04 	addi	r16,r16,21552
   4d7c4:	2809883a 	mov	r4,r5
   4d7c8:	300b883a 	mov	r5,r6
   4d7cc:	380d883a 	mov	r6,r7
   4d7d0:	dfc00215 	stw	ra,8(sp)
   4d7d4:	80000015 	stw	zero,0(r16)
   4d7d8:	004efa40 	call	4efa4 <read>
   4d7dc:	00ffffc4 	movi	r3,-1
   4d7e0:	10c00526 	beq	r2,r3,4d7f8 <_read_r+0x4c>
   4d7e4:	dfc00217 	ldw	ra,8(sp)
   4d7e8:	dc400117 	ldw	r17,4(sp)
   4d7ec:	dc000017 	ldw	r16,0(sp)
   4d7f0:	dec00304 	addi	sp,sp,12
   4d7f4:	f800283a 	ret
   4d7f8:	80c00017 	ldw	r3,0(r16)
   4d7fc:	183ff926 	beq	r3,zero,4d7e4 <_read_r+0x38>
   4d800:	88c00015 	stw	r3,0(r17)
   4d804:	dfc00217 	ldw	ra,8(sp)
   4d808:	dc400117 	ldw	r17,4(sp)
   4d80c:	dc000017 	ldw	r16,0(sp)
   4d810:	dec00304 	addi	sp,sp,12
   4d814:	f800283a 	ret

0004d818 <__udivdi3>:
   4d818:	defff504 	addi	sp,sp,-44
   4d81c:	dd000515 	stw	r20,20(sp)
   4d820:	dcc00415 	stw	r19,16(sp)
   4d824:	dc800315 	stw	r18,12(sp)
   4d828:	dc400215 	stw	r17,8(sp)
   4d82c:	dc000115 	stw	r16,4(sp)
   4d830:	dfc00a15 	stw	ra,40(sp)
   4d834:	df000915 	stw	fp,36(sp)
   4d838:	ddc00815 	stw	r23,32(sp)
   4d83c:	dd800715 	stw	r22,28(sp)
   4d840:	dd400615 	stw	r21,24(sp)
   4d844:	2025883a 	mov	r18,r4
   4d848:	2823883a 	mov	r17,r5
   4d84c:	3021883a 	mov	r16,r6
   4d850:	2027883a 	mov	r19,r4
   4d854:	2829883a 	mov	r20,r5
   4d858:	3800401e 	bne	r7,zero,4d95c <__udivdi3+0x144>
   4d85c:	2980602e 	bgeu	r5,r6,4d9e0 <__udivdi3+0x1c8>
   4d860:	00bfffd4 	movui	r2,65535
   4d864:	1180aa36 	bltu	r2,r6,4db10 <__udivdi3+0x2f8>
   4d868:	00803fc4 	movi	r2,255
   4d86c:	11814436 	bltu	r2,r6,4dd80 <__udivdi3+0x568>
   4d870:	0005883a 	mov	r2,zero
   4d874:	0007883a 	mov	r3,zero
   4d878:	3084d83a 	srl	r2,r6,r2
   4d87c:	01000174 	movhi	r4,5
   4d880:	21064604 	addi	r4,r4,6424
   4d884:	2085883a 	add	r2,r4,r2
   4d888:	10800003 	ldbu	r2,0(r2)
   4d88c:	10c7883a 	add	r3,r2,r3
   4d890:	00800804 	movi	r2,32
   4d894:	10c5c83a 	sub	r2,r2,r3
   4d898:	10000526 	beq	r2,zero,4d8b0 <__udivdi3+0x98>
   4d89c:	88a2983a 	sll	r17,r17,r2
   4d8a0:	90c6d83a 	srl	r3,r18,r3
   4d8a4:	30a0983a 	sll	r16,r6,r2
   4d8a8:	90a6983a 	sll	r19,r18,r2
   4d8ac:	88e8b03a 	or	r20,r17,r3
   4d8b0:	8022d43a 	srli	r17,r16,16
   4d8b4:	a009883a 	mov	r4,r20
   4d8b8:	857fffcc 	andi	r21,r16,65535
   4d8bc:	880b883a 	mov	r5,r17
   4d8c0:	0045c280 	call	45c28 <__umodsi3>
   4d8c4:	a009883a 	mov	r4,r20
   4d8c8:	880b883a 	mov	r5,r17
   4d8cc:	102d883a 	mov	r22,r2
   4d8d0:	0045c200 	call	45c20 <__udivsi3>
   4d8d4:	b02c943a 	slli	r22,r22,16
   4d8d8:	9806d43a 	srli	r3,r19,16
   4d8dc:	1549383a 	mul	r4,r2,r21
   4d8e0:	1025883a 	mov	r18,r2
   4d8e4:	b0c6b03a 	or	r3,r22,r3
   4d8e8:	1900052e 	bgeu	r3,r4,4d900 <__udivdi3+0xe8>
   4d8ec:	1c07883a 	add	r3,r3,r16
   4d8f0:	10bfffc4 	addi	r2,r2,-1
   4d8f4:	1c000136 	bltu	r3,r16,4d8fc <__udivdi3+0xe4>
   4d8f8:	19013636 	bltu	r3,r4,4ddd4 <__udivdi3+0x5bc>
   4d8fc:	1025883a 	mov	r18,r2
   4d900:	1929c83a 	sub	r20,r3,r4
   4d904:	a009883a 	mov	r4,r20
   4d908:	880b883a 	mov	r5,r17
   4d90c:	0045c280 	call	45c28 <__umodsi3>
   4d910:	102d883a 	mov	r22,r2
   4d914:	a009883a 	mov	r4,r20
   4d918:	880b883a 	mov	r5,r17
   4d91c:	0045c200 	call	45c20 <__udivsi3>
   4d920:	b02c943a 	slli	r22,r22,16
   4d924:	156b383a 	mul	r21,r2,r21
   4d928:	9cffffcc 	andi	r19,r19,65535
   4d92c:	b4e6b03a 	or	r19,r22,r19
   4d930:	1009883a 	mov	r4,r2
   4d934:	9d40052e 	bgeu	r19,r21,4d94c <__udivdi3+0x134>
   4d938:	9c27883a 	add	r19,r19,r16
   4d93c:	10bfffc4 	addi	r2,r2,-1
   4d940:	9c00f736 	bltu	r19,r16,4dd20 <__udivdi3+0x508>
   4d944:	9d40f62e 	bgeu	r19,r21,4dd20 <__udivdi3+0x508>
   4d948:	213fff84 	addi	r4,r4,-2
   4d94c:	9004943a 	slli	r2,r18,16
   4d950:	0007883a 	mov	r3,zero
   4d954:	2084b03a 	or	r2,r4,r2
   4d958:	00001506 	br	4d9b0 <__udivdi3+0x198>
   4d95c:	29c06536 	bltu	r5,r7,4daf4 <__udivdi3+0x2dc>
   4d960:	00bfffd4 	movui	r2,65535
   4d964:	11c0652e 	bgeu	r2,r7,4dafc <__udivdi3+0x2e4>
   4d968:	00804034 	movhi	r2,256
   4d96c:	10bfffc4 	addi	r2,r2,-1
   4d970:	11c0f736 	bltu	r2,r7,4dd50 <__udivdi3+0x538>
   4d974:	00c00404 	movi	r3,16
   4d978:	180b883a 	mov	r5,r3
   4d97c:	38c6d83a 	srl	r3,r7,r3
   4d980:	01000174 	movhi	r4,5
   4d984:	21064604 	addi	r4,r4,6424
   4d988:	04000804 	movi	r16,32
   4d98c:	20c7883a 	add	r3,r4,r3
   4d990:	18800003 	ldbu	r2,0(r3)
   4d994:	1145883a 	add	r2,r2,r5
   4d998:	80a1c83a 	sub	r16,r16,r2
   4d99c:	8000691e 	bne	r16,zero,4db44 <__udivdi3+0x32c>
   4d9a0:	0007883a 	mov	r3,zero
   4d9a4:	3c406536 	bltu	r7,r17,4db3c <__udivdi3+0x324>
   4d9a8:	9180642e 	bgeu	r18,r6,4db3c <__udivdi3+0x324>
   4d9ac:	0005883a 	mov	r2,zero
   4d9b0:	dfc00a17 	ldw	ra,40(sp)
   4d9b4:	df000917 	ldw	fp,36(sp)
   4d9b8:	ddc00817 	ldw	r23,32(sp)
   4d9bc:	dd800717 	ldw	r22,28(sp)
   4d9c0:	dd400617 	ldw	r21,24(sp)
   4d9c4:	dd000517 	ldw	r20,20(sp)
   4d9c8:	dcc00417 	ldw	r19,16(sp)
   4d9cc:	dc800317 	ldw	r18,12(sp)
   4d9d0:	dc400217 	ldw	r17,8(sp)
   4d9d4:	dc000117 	ldw	r16,4(sp)
   4d9d8:	dec00b04 	addi	sp,sp,44
   4d9dc:	f800283a 	ret
   4d9e0:	3000041e 	bne	r6,zero,4d9f4 <__udivdi3+0x1dc>
   4d9e4:	01000044 	movi	r4,1
   4d9e8:	000b883a 	mov	r5,zero
   4d9ec:	0045c200 	call	45c20 <__udivsi3>
   4d9f0:	1021883a 	mov	r16,r2
   4d9f4:	00bfffd4 	movui	r2,65535
   4d9f8:	14004b2e 	bgeu	r2,r16,4db28 <__udivdi3+0x310>
   4d9fc:	00804034 	movhi	r2,256
   4da00:	10bfffc4 	addi	r2,r2,-1
   4da04:	1400d836 	bltu	r2,r16,4dd68 <__udivdi3+0x550>
   4da08:	00800404 	movi	r2,16
   4da0c:	1007883a 	mov	r3,r2
   4da10:	8084d83a 	srl	r2,r16,r2
   4da14:	01000174 	movhi	r4,5
   4da18:	21064604 	addi	r4,r4,6424
   4da1c:	2085883a 	add	r2,r4,r2
   4da20:	10800003 	ldbu	r2,0(r2)
   4da24:	10c7883a 	add	r3,r2,r3
   4da28:	00800804 	movi	r2,32
   4da2c:	10c5c83a 	sub	r2,r2,r3
   4da30:	1000891e 	bne	r2,zero,4dc58 <__udivdi3+0x440>
   4da34:	8028d43a 	srli	r20,r16,16
   4da38:	8c23c83a 	sub	r17,r17,r16
   4da3c:	84bfffcc 	andi	r18,r16,65535
   4da40:	00c00044 	movi	r3,1
   4da44:	8809883a 	mov	r4,r17
   4da48:	a00b883a 	mov	r5,r20
   4da4c:	d8c00015 	stw	r3,0(sp)
   4da50:	0045c280 	call	45c28 <__umodsi3>
   4da54:	8809883a 	mov	r4,r17
   4da58:	a00b883a 	mov	r5,r20
   4da5c:	102b883a 	mov	r21,r2
   4da60:	0045c200 	call	45c20 <__udivsi3>
   4da64:	a82a943a 	slli	r21,r21,16
   4da68:	9808d43a 	srli	r4,r19,16
   4da6c:	148b383a 	mul	r5,r2,r18
   4da70:	1023883a 	mov	r17,r2
   4da74:	a908b03a 	or	r4,r21,r4
   4da78:	d8c00017 	ldw	r3,0(sp)
   4da7c:	2140052e 	bgeu	r4,r5,4da94 <__udivdi3+0x27c>
   4da80:	2409883a 	add	r4,r4,r16
   4da84:	10bfffc4 	addi	r2,r2,-1
   4da88:	24000136 	bltu	r4,r16,4da90 <__udivdi3+0x278>
   4da8c:	2140ce36 	bltu	r4,r5,4ddc8 <__udivdi3+0x5b0>
   4da90:	1023883a 	mov	r17,r2
   4da94:	216bc83a 	sub	r21,r4,r5
   4da98:	a809883a 	mov	r4,r21
   4da9c:	a00b883a 	mov	r5,r20
   4daa0:	d8c00015 	stw	r3,0(sp)
   4daa4:	0045c280 	call	45c28 <__umodsi3>
   4daa8:	102d883a 	mov	r22,r2
   4daac:	a809883a 	mov	r4,r21
   4dab0:	a00b883a 	mov	r5,r20
   4dab4:	0045c200 	call	45c20 <__udivsi3>
   4dab8:	b02c943a 	slli	r22,r22,16
   4dabc:	14a5383a 	mul	r18,r2,r18
   4dac0:	9cffffcc 	andi	r19,r19,65535
   4dac4:	b4e6b03a 	or	r19,r22,r19
   4dac8:	1009883a 	mov	r4,r2
   4dacc:	d8c00017 	ldw	r3,0(sp)
   4dad0:	9c80052e 	bgeu	r19,r18,4dae8 <__udivdi3+0x2d0>
   4dad4:	9c27883a 	add	r19,r19,r16
   4dad8:	10bfffc4 	addi	r2,r2,-1
   4dadc:	9c009236 	bltu	r19,r16,4dd28 <__udivdi3+0x510>
   4dae0:	9c80912e 	bgeu	r19,r18,4dd28 <__udivdi3+0x510>
   4dae4:	213fff84 	addi	r4,r4,-2
   4dae8:	8804943a 	slli	r2,r17,16
   4daec:	2084b03a 	or	r2,r4,r2
   4daf0:	003faf06 	br	4d9b0 <__udivdi3+0x198>
   4daf4:	0007883a 	mov	r3,zero
   4daf8:	003fac06 	br	4d9ac <__udivdi3+0x194>
   4dafc:	00803fc4 	movi	r2,255
   4db00:	11c09636 	bltu	r2,r7,4dd5c <__udivdi3+0x544>
   4db04:	0007883a 	mov	r3,zero
   4db08:	000b883a 	mov	r5,zero
   4db0c:	003f9b06 	br	4d97c <__udivdi3+0x164>
   4db10:	00804034 	movhi	r2,256
   4db14:	10bfffc4 	addi	r2,r2,-1
   4db18:	11809636 	bltu	r2,r6,4dd74 <__udivdi3+0x55c>
   4db1c:	00800404 	movi	r2,16
   4db20:	1007883a 	mov	r3,r2
   4db24:	003f5406 	br	4d878 <__udivdi3+0x60>
   4db28:	00803fc4 	movi	r2,255
   4db2c:	14009736 	bltu	r2,r16,4dd8c <__udivdi3+0x574>
   4db30:	0005883a 	mov	r2,zero
   4db34:	0007883a 	mov	r3,zero
   4db38:	003fb506 	br	4da10 <__udivdi3+0x1f8>
   4db3c:	00800044 	movi	r2,1
   4db40:	003f9b06 	br	4d9b0 <__udivdi3+0x198>
   4db44:	3086d83a 	srl	r3,r6,r2
   4db48:	3c0e983a 	sll	r7,r7,r16
   4db4c:	88aad83a 	srl	r21,r17,r2
   4db50:	9084d83a 	srl	r2,r18,r2
   4db54:	38e6b03a 	or	r19,r7,r3
   4db58:	9828d43a 	srli	r20,r19,16
   4db5c:	8c22983a 	sll	r17,r17,r16
   4db60:	a809883a 	mov	r4,r21
   4db64:	a00b883a 	mov	r5,r20
   4db68:	342c983a 	sll	r22,r6,r16
   4db6c:	88a2b03a 	or	r17,r17,r2
   4db70:	0045c280 	call	45c28 <__umodsi3>
   4db74:	a809883a 	mov	r4,r21
   4db78:	a00b883a 	mov	r5,r20
   4db7c:	1039883a 	mov	fp,r2
   4db80:	0045c200 	call	45c20 <__udivsi3>
   4db84:	102b883a 	mov	r21,r2
   4db88:	9dffffcc 	andi	r23,r19,65535
   4db8c:	e008943a 	slli	r4,fp,16
   4db90:	8804d43a 	srli	r2,r17,16
   4db94:	adcd383a 	mul	r6,r21,r23
   4db98:	2088b03a 	or	r4,r4,r2
   4db9c:	2180042e 	bgeu	r4,r6,4dbb0 <__udivdi3+0x398>
   4dba0:	24c9883a 	add	r4,r4,r19
   4dba4:	a8bfffc4 	addi	r2,r21,-1
   4dba8:	24c07f2e 	bgeu	r4,r19,4dda8 <__udivdi3+0x590>
   4dbac:	102b883a 	mov	r21,r2
   4dbb0:	21b9c83a 	sub	fp,r4,r6
   4dbb4:	e009883a 	mov	r4,fp
   4dbb8:	a00b883a 	mov	r5,r20
   4dbbc:	0045c280 	call	45c28 <__umodsi3>
   4dbc0:	e009883a 	mov	r4,fp
   4dbc4:	a00b883a 	mov	r5,r20
   4dbc8:	d8800015 	stw	r2,0(sp)
   4dbcc:	0045c200 	call	45c20 <__udivsi3>
   4dbd0:	d8c00017 	ldw	r3,0(sp)
   4dbd4:	15cb383a 	mul	r5,r2,r23
   4dbd8:	8c7fffcc 	andi	r17,r17,65535
   4dbdc:	1806943a 	slli	r3,r3,16
   4dbe0:	1009883a 	mov	r4,r2
   4dbe4:	1c46b03a 	or	r3,r3,r17
   4dbe8:	1940042e 	bgeu	r3,r5,4dbfc <__udivdi3+0x3e4>
   4dbec:	1cc7883a 	add	r3,r3,r19
   4dbf0:	10bfffc4 	addi	r2,r2,-1
   4dbf4:	1cc0682e 	bgeu	r3,r19,4dd98 <__udivdi3+0x580>
   4dbf8:	1009883a 	mov	r4,r2
   4dbfc:	a804943a 	slli	r2,r21,16
   4dc00:	b1ffffcc 	andi	r7,r22,65535
   4dc04:	b02cd43a 	srli	r22,r22,16
   4dc08:	2084b03a 	or	r2,r4,r2
   4dc0c:	113fffcc 	andi	r4,r2,65535
   4dc10:	100cd43a 	srli	r6,r2,16
   4dc14:	21d1383a 	mul	r8,r4,r7
   4dc18:	2589383a 	mul	r4,r4,r22
   4dc1c:	31cf383a 	mul	r7,r6,r7
   4dc20:	4012d43a 	srli	r9,r8,16
   4dc24:	1947c83a 	sub	r3,r3,r5
   4dc28:	3909883a 	add	r4,r7,r4
   4dc2c:	2249883a 	add	r4,r4,r9
   4dc30:	35ad383a 	mul	r22,r6,r22
   4dc34:	21c0022e 	bgeu	r4,r7,4dc40 <__udivdi3+0x428>
   4dc38:	01400074 	movhi	r5,1
   4dc3c:	b16d883a 	add	r22,r22,r5
   4dc40:	200ad43a 	srli	r5,r4,16
   4dc44:	b16d883a 	add	r22,r22,r5
   4dc48:	1d803e36 	bltu	r3,r22,4dd44 <__udivdi3+0x52c>
   4dc4c:	1d803826 	beq	r3,r22,4dd30 <__udivdi3+0x518>
   4dc50:	0007883a 	mov	r3,zero
   4dc54:	003f5606 	br	4d9b0 <__udivdi3+0x198>
   4dc58:	80a0983a 	sll	r16,r16,r2
   4dc5c:	88ead83a 	srl	r21,r17,r3
   4dc60:	90c6d83a 	srl	r3,r18,r3
   4dc64:	8028d43a 	srli	r20,r16,16
   4dc68:	88a2983a 	sll	r17,r17,r2
   4dc6c:	a809883a 	mov	r4,r21
   4dc70:	a00b883a 	mov	r5,r20
   4dc74:	88ecb03a 	or	r22,r17,r3
   4dc78:	90a6983a 	sll	r19,r18,r2
   4dc7c:	0045c280 	call	45c28 <__umodsi3>
   4dc80:	a809883a 	mov	r4,r21
   4dc84:	a00b883a 	mov	r5,r20
   4dc88:	1023883a 	mov	r17,r2
   4dc8c:	0045c200 	call	45c20 <__udivsi3>
   4dc90:	102b883a 	mov	r21,r2
   4dc94:	84bfffcc 	andi	r18,r16,65535
   4dc98:	8808943a 	slli	r4,r17,16
   4dc9c:	b004d43a 	srli	r2,r22,16
   4dca0:	ac87383a 	mul	r3,r21,r18
   4dca4:	2088b03a 	or	r4,r4,r2
   4dca8:	20c0062e 	bgeu	r4,r3,4dcc4 <__udivdi3+0x4ac>
   4dcac:	2409883a 	add	r4,r4,r16
   4dcb0:	a8bfffc4 	addi	r2,r21,-1
   4dcb4:	24004236 	bltu	r4,r16,4ddc0 <__udivdi3+0x5a8>
   4dcb8:	20c0412e 	bgeu	r4,r3,4ddc0 <__udivdi3+0x5a8>
   4dcbc:	ad7fff84 	addi	r21,r21,-2
   4dcc0:	2409883a 	add	r4,r4,r16
   4dcc4:	20efc83a 	sub	r23,r4,r3
   4dcc8:	b809883a 	mov	r4,r23
   4dccc:	a00b883a 	mov	r5,r20
   4dcd0:	0045c280 	call	45c28 <__umodsi3>
   4dcd4:	1023883a 	mov	r17,r2
   4dcd8:	a00b883a 	mov	r5,r20
   4dcdc:	b809883a 	mov	r4,r23
   4dce0:	0045c200 	call	45c20 <__udivsi3>
   4dce4:	8822943a 	slli	r17,r17,16
   4dce8:	148b383a 	mul	r5,r2,r18
   4dcec:	b5bfffcc 	andi	r22,r22,65535
   4dcf0:	8da2b03a 	or	r17,r17,r22
   4dcf4:	8940062e 	bgeu	r17,r5,4dd10 <__udivdi3+0x4f8>
   4dcf8:	8c23883a 	add	r17,r17,r16
   4dcfc:	10ffffc4 	addi	r3,r2,-1
   4dd00:	8c002d36 	bltu	r17,r16,4ddb8 <__udivdi3+0x5a0>
   4dd04:	89402c2e 	bgeu	r17,r5,4ddb8 <__udivdi3+0x5a0>
   4dd08:	10bfff84 	addi	r2,r2,-2
   4dd0c:	8c23883a 	add	r17,r17,r16
   4dd10:	a806943a 	slli	r3,r21,16
   4dd14:	8963c83a 	sub	r17,r17,r5
   4dd18:	10c6b03a 	or	r3,r2,r3
   4dd1c:	003f4906 	br	4da44 <__udivdi3+0x22c>
   4dd20:	1009883a 	mov	r4,r2
   4dd24:	003f0906 	br	4d94c <__udivdi3+0x134>
   4dd28:	1009883a 	mov	r4,r2
   4dd2c:	003f6e06 	br	4dae8 <__udivdi3+0x2d0>
   4dd30:	2008943a 	slli	r4,r4,16
   4dd34:	9420983a 	sll	r16,r18,r16
   4dd38:	423fffcc 	andi	r8,r8,65535
   4dd3c:	2209883a 	add	r4,r4,r8
   4dd40:	813fc32e 	bgeu	r16,r4,4dc50 <__udivdi3+0x438>
   4dd44:	10bfffc4 	addi	r2,r2,-1
   4dd48:	0007883a 	mov	r3,zero
   4dd4c:	003f1806 	br	4d9b0 <__udivdi3+0x198>
   4dd50:	00c00604 	movi	r3,24
   4dd54:	180b883a 	mov	r5,r3
   4dd58:	003f0806 	br	4d97c <__udivdi3+0x164>
   4dd5c:	00c00204 	movi	r3,8
   4dd60:	180b883a 	mov	r5,r3
   4dd64:	003f0506 	br	4d97c <__udivdi3+0x164>
   4dd68:	00800604 	movi	r2,24
   4dd6c:	1007883a 	mov	r3,r2
   4dd70:	003f2706 	br	4da10 <__udivdi3+0x1f8>
   4dd74:	00800604 	movi	r2,24
   4dd78:	1007883a 	mov	r3,r2
   4dd7c:	003ebe06 	br	4d878 <__udivdi3+0x60>
   4dd80:	00800204 	movi	r2,8
   4dd84:	1007883a 	mov	r3,r2
   4dd88:	003ebb06 	br	4d878 <__udivdi3+0x60>
   4dd8c:	00800204 	movi	r2,8
   4dd90:	1007883a 	mov	r3,r2
   4dd94:	003f1e06 	br	4da10 <__udivdi3+0x1f8>
   4dd98:	197f972e 	bgeu	r3,r5,4dbf8 <__udivdi3+0x3e0>
   4dd9c:	213fff84 	addi	r4,r4,-2
   4dda0:	1cc7883a 	add	r3,r3,r19
   4dda4:	003f9506 	br	4dbfc <__udivdi3+0x3e4>
   4dda8:	21bf802e 	bgeu	r4,r6,4dbac <__udivdi3+0x394>
   4ddac:	ad7fff84 	addi	r21,r21,-2
   4ddb0:	24c9883a 	add	r4,r4,r19
   4ddb4:	003f7e06 	br	4dbb0 <__udivdi3+0x398>
   4ddb8:	1805883a 	mov	r2,r3
   4ddbc:	003fd406 	br	4dd10 <__udivdi3+0x4f8>
   4ddc0:	102b883a 	mov	r21,r2
   4ddc4:	003fbf06 	br	4dcc4 <__udivdi3+0x4ac>
   4ddc8:	8c7fff84 	addi	r17,r17,-2
   4ddcc:	2409883a 	add	r4,r4,r16
   4ddd0:	003f3006 	br	4da94 <__udivdi3+0x27c>
   4ddd4:	94bfff84 	addi	r18,r18,-2
   4ddd8:	1c07883a 	add	r3,r3,r16
   4dddc:	003ec806 	br	4d900 <__udivdi3+0xe8>

0004dde0 <__umoddi3>:
   4dde0:	defff504 	addi	sp,sp,-44
   4dde4:	dd000515 	stw	r20,20(sp)
   4dde8:	dcc00415 	stw	r19,16(sp)
   4ddec:	dc800315 	stw	r18,12(sp)
   4ddf0:	dc400215 	stw	r17,8(sp)
   4ddf4:	dc000115 	stw	r16,4(sp)
   4ddf8:	dfc00a15 	stw	ra,40(sp)
   4ddfc:	df000915 	stw	fp,36(sp)
   4de00:	ddc00815 	stw	r23,32(sp)
   4de04:	dd800715 	stw	r22,28(sp)
   4de08:	dd400615 	stw	r21,24(sp)
   4de0c:	2025883a 	mov	r18,r4
   4de10:	2823883a 	mov	r17,r5
   4de14:	3021883a 	mov	r16,r6
   4de18:	2027883a 	mov	r19,r4
   4de1c:	2829883a 	mov	r20,r5
   4de20:	3800351e 	bne	r7,zero,4def8 <__umoddi3+0x118>
   4de24:	29804d2e 	bgeu	r5,r6,4df5c <__umoddi3+0x17c>
   4de28:	00bfffd4 	movui	r2,65535
   4de2c:	11809a36 	bltu	r2,r6,4e098 <__umoddi3+0x2b8>
   4de30:	00803fc4 	movi	r2,255
   4de34:	11813936 	bltu	r2,r6,4e31c <__umoddi3+0x53c>
   4de38:	0005883a 	mov	r2,zero
   4de3c:	0009883a 	mov	r4,zero
   4de40:	3084d83a 	srl	r2,r6,r2
   4de44:	00c00174 	movhi	r3,5
   4de48:	18c64604 	addi	r3,r3,6424
   4de4c:	05400804 	movi	r21,32
   4de50:	1885883a 	add	r2,r3,r2
   4de54:	10800003 	ldbu	r2,0(r2)
   4de58:	1109883a 	add	r4,r2,r4
   4de5c:	a92bc83a 	sub	r21,r21,r4
   4de60:	a800ec26 	beq	r21,zero,4e214 <__umoddi3+0x434>
   4de64:	8d62983a 	sll	r17,r17,r21
   4de68:	9108d83a 	srl	r4,r18,r4
   4de6c:	3560983a 	sll	r16,r6,r21
   4de70:	9566983a 	sll	r19,r18,r21
   4de74:	8928b03a 	or	r20,r17,r4
   4de78:	8022d43a 	srli	r17,r16,16
   4de7c:	a009883a 	mov	r4,r20
   4de80:	84bfffcc 	andi	r18,r16,65535
   4de84:	880b883a 	mov	r5,r17
   4de88:	0045c280 	call	45c28 <__umodsi3>
   4de8c:	a009883a 	mov	r4,r20
   4de90:	880b883a 	mov	r5,r17
   4de94:	102d883a 	mov	r22,r2
   4de98:	0045c200 	call	45c20 <__udivsi3>
   4de9c:	b02c943a 	slli	r22,r22,16
   4dea0:	9806d43a 	srli	r3,r19,16
   4dea4:	1485383a 	mul	r2,r2,r18
   4dea8:	b0c6b03a 	or	r3,r22,r3
   4deac:	1880042e 	bgeu	r3,r2,4dec0 <__umoddi3+0xe0>
   4deb0:	1c07883a 	add	r3,r3,r16
   4deb4:	1c000236 	bltu	r3,r16,4dec0 <__umoddi3+0xe0>
   4deb8:	1880012e 	bgeu	r3,r2,4dec0 <__umoddi3+0xe0>
   4debc:	1c07883a 	add	r3,r3,r16
   4dec0:	18a9c83a 	sub	r20,r3,r2
   4dec4:	a009883a 	mov	r4,r20
   4dec8:	880b883a 	mov	r5,r17
   4decc:	0045c280 	call	45c28 <__umodsi3>
   4ded0:	102d883a 	mov	r22,r2
   4ded4:	a009883a 	mov	r4,r20
   4ded8:	880b883a 	mov	r5,r17
   4dedc:	0045c200 	call	45c20 <__udivsi3>
   4dee0:	b02c943a 	slli	r22,r22,16
   4dee4:	1485383a 	mul	r2,r2,r18
   4dee8:	9cffffcc 	andi	r19,r19,65535
   4deec:	b4e6b03a 	or	r19,r22,r19
   4def0:	9880522e 	bgeu	r19,r2,4e03c <__umoddi3+0x25c>
   4def4:	00004d06 	br	4e02c <__umoddi3+0x24c>
   4def8:	29c05436 	bltu	r5,r7,4e04c <__umoddi3+0x26c>
   4defc:	00bfffd4 	movui	r2,65535
   4df00:	11c0602e 	bgeu	r2,r7,4e084 <__umoddi3+0x2a4>
   4df04:	00804034 	movhi	r2,256
   4df08:	10bfffc4 	addi	r2,r2,-1
   4df0c:	11c0f736 	bltu	r2,r7,4e2ec <__umoddi3+0x50c>
   4df10:	00c00404 	movi	r3,16
   4df14:	1827883a 	mov	r19,r3
   4df18:	38c6d83a 	srl	r3,r7,r3
   4df1c:	01000174 	movhi	r4,5
   4df20:	21064604 	addi	r4,r4,6424
   4df24:	04000804 	movi	r16,32
   4df28:	20c7883a 	add	r3,r4,r3
   4df2c:	18800003 	ldbu	r2,0(r3)
   4df30:	14e7883a 	add	r19,r2,r19
   4df34:	84e1c83a 	sub	r16,r16,r19
   4df38:	8000621e 	bne	r16,zero,4e0c4 <__umoddi3+0x2e4>
   4df3c:	3c400136 	bltu	r7,r17,4df44 <__umoddi3+0x164>
   4df40:	91810336 	bltu	r18,r6,4e350 <__umoddi3+0x570>
   4df44:	9185c83a 	sub	r2,r18,r6
   4df48:	89e3c83a 	sub	r17,r17,r7
   4df4c:	90a5803a 	cmpltu	r18,r18,r2
   4df50:	8ca9c83a 	sub	r20,r17,r18
   4df54:	a007883a 	mov	r3,r20
   4df58:	00003e06 	br	4e054 <__umoddi3+0x274>
   4df5c:	3000041e 	bne	r6,zero,4df70 <__umoddi3+0x190>
   4df60:	01000044 	movi	r4,1
   4df64:	000b883a 	mov	r5,zero
   4df68:	0045c200 	call	45c20 <__udivsi3>
   4df6c:	1021883a 	mov	r16,r2
   4df70:	00bfffd4 	movui	r2,65535
   4df74:	14004e2e 	bgeu	r2,r16,4e0b0 <__umoddi3+0x2d0>
   4df78:	00804034 	movhi	r2,256
   4df7c:	10bfffc4 	addi	r2,r2,-1
   4df80:	1400e336 	bltu	r2,r16,4e310 <__umoddi3+0x530>
   4df84:	00800404 	movi	r2,16
   4df88:	1007883a 	mov	r3,r2
   4df8c:	8084d83a 	srl	r2,r16,r2
   4df90:	01000174 	movhi	r4,5
   4df94:	21064604 	addi	r4,r4,6424
   4df98:	05400804 	movi	r21,32
   4df9c:	2085883a 	add	r2,r4,r2
   4dfa0:	10800003 	ldbu	r2,0(r2)
   4dfa4:	10c7883a 	add	r3,r2,r3
   4dfa8:	a8ebc83a 	sub	r21,r21,r3
   4dfac:	a8009b1e 	bne	r21,zero,4e21c <__umoddi3+0x43c>
   4dfb0:	8028d43a 	srli	r20,r16,16
   4dfb4:	8c23c83a 	sub	r17,r17,r16
   4dfb8:	85bfffcc 	andi	r22,r16,65535
   4dfbc:	8809883a 	mov	r4,r17
   4dfc0:	a00b883a 	mov	r5,r20
   4dfc4:	0045c280 	call	45c28 <__umodsi3>
   4dfc8:	8809883a 	mov	r4,r17
   4dfcc:	a00b883a 	mov	r5,r20
   4dfd0:	1025883a 	mov	r18,r2
   4dfd4:	0045c200 	call	45c20 <__udivsi3>
   4dfd8:	9024943a 	slli	r18,r18,16
   4dfdc:	9806d43a 	srli	r3,r19,16
   4dfe0:	1585383a 	mul	r2,r2,r22
   4dfe4:	90c6b03a 	or	r3,r18,r3
   4dfe8:	1880032e 	bgeu	r3,r2,4dff8 <__umoddi3+0x218>
   4dfec:	1c07883a 	add	r3,r3,r16
   4dff0:	1c000136 	bltu	r3,r16,4dff8 <__umoddi3+0x218>
   4dff4:	1880d436 	bltu	r3,r2,4e348 <__umoddi3+0x568>
   4dff8:	18a3c83a 	sub	r17,r3,r2
   4dffc:	8809883a 	mov	r4,r17
   4e000:	a00b883a 	mov	r5,r20
   4e004:	0045c280 	call	45c28 <__umodsi3>
   4e008:	1025883a 	mov	r18,r2
   4e00c:	8809883a 	mov	r4,r17
   4e010:	a00b883a 	mov	r5,r20
   4e014:	0045c200 	call	45c20 <__udivsi3>
   4e018:	9024943a 	slli	r18,r18,16
   4e01c:	1585383a 	mul	r2,r2,r22
   4e020:	9cffffcc 	andi	r19,r19,65535
   4e024:	94e6b03a 	or	r19,r18,r19
   4e028:	9880042e 	bgeu	r19,r2,4e03c <__umoddi3+0x25c>
   4e02c:	9c27883a 	add	r19,r19,r16
   4e030:	9c000236 	bltu	r19,r16,4e03c <__umoddi3+0x25c>
   4e034:	9880012e 	bgeu	r19,r2,4e03c <__umoddi3+0x25c>
   4e038:	9c27883a 	add	r19,r19,r16
   4e03c:	98a7c83a 	sub	r19,r19,r2
   4e040:	9d44d83a 	srl	r2,r19,r21
   4e044:	0007883a 	mov	r3,zero
   4e048:	00000206 	br	4e054 <__umoddi3+0x274>
   4e04c:	2005883a 	mov	r2,r4
   4e050:	2807883a 	mov	r3,r5
   4e054:	dfc00a17 	ldw	ra,40(sp)
   4e058:	df000917 	ldw	fp,36(sp)
   4e05c:	ddc00817 	ldw	r23,32(sp)
   4e060:	dd800717 	ldw	r22,28(sp)
   4e064:	dd400617 	ldw	r21,24(sp)
   4e068:	dd000517 	ldw	r20,20(sp)
   4e06c:	dcc00417 	ldw	r19,16(sp)
   4e070:	dc800317 	ldw	r18,12(sp)
   4e074:	dc400217 	ldw	r17,8(sp)
   4e078:	dc000117 	ldw	r16,4(sp)
   4e07c:	dec00b04 	addi	sp,sp,44
   4e080:	f800283a 	ret
   4e084:	00803fc4 	movi	r2,255
   4e088:	11c09536 	bltu	r2,r7,4e2e0 <__umoddi3+0x500>
   4e08c:	0007883a 	mov	r3,zero
   4e090:	0027883a 	mov	r19,zero
   4e094:	003fa006 	br	4df18 <__umoddi3+0x138>
   4e098:	00804034 	movhi	r2,256
   4e09c:	10bfffc4 	addi	r2,r2,-1
   4e0a0:	11809536 	bltu	r2,r6,4e2f8 <__umoddi3+0x518>
   4e0a4:	00800404 	movi	r2,16
   4e0a8:	1009883a 	mov	r4,r2
   4e0ac:	003f6406 	br	4de40 <__umoddi3+0x60>
   4e0b0:	00803fc4 	movi	r2,255
   4e0b4:	14009336 	bltu	r2,r16,4e304 <__umoddi3+0x524>
   4e0b8:	0005883a 	mov	r2,zero
   4e0bc:	0007883a 	mov	r3,zero
   4e0c0:	003fb206 	br	4df8c <__umoddi3+0x1ac>
   4e0c4:	34c4d83a 	srl	r2,r6,r19
   4e0c8:	3c0e983a 	sll	r7,r7,r16
   4e0cc:	8ceed83a 	srl	r23,r17,r19
   4e0d0:	8c22983a 	sll	r17,r17,r16
   4e0d4:	38a8b03a 	or	r20,r7,r2
   4e0d8:	a02ad43a 	srli	r21,r20,16
   4e0dc:	94c4d83a 	srl	r2,r18,r19
   4e0e0:	b809883a 	mov	r4,r23
   4e0e4:	a80b883a 	mov	r5,r21
   4e0e8:	88a2b03a 	or	r17,r17,r2
   4e0ec:	342c983a 	sll	r22,r6,r16
   4e0f0:	0045c280 	call	45c28 <__umodsi3>
   4e0f4:	b809883a 	mov	r4,r23
   4e0f8:	a80b883a 	mov	r5,r21
   4e0fc:	d8800015 	stw	r2,0(sp)
   4e100:	0045c200 	call	45c20 <__udivsi3>
   4e104:	d8c00017 	ldw	r3,0(sp)
   4e108:	102f883a 	mov	r23,r2
   4e10c:	a73fffcc 	andi	fp,r20,65535
   4e110:	180a943a 	slli	r5,r3,16
   4e114:	8804d43a 	srli	r2,r17,16
   4e118:	bf09383a 	mul	r4,r23,fp
   4e11c:	9424983a 	sll	r18,r18,r16
   4e120:	288ab03a 	or	r5,r5,r2
   4e124:	2900042e 	bgeu	r5,r4,4e138 <__umoddi3+0x358>
   4e128:	2d0b883a 	add	r5,r5,r20
   4e12c:	b8bfffc4 	addi	r2,r23,-1
   4e130:	2d00812e 	bgeu	r5,r20,4e338 <__umoddi3+0x558>
   4e134:	102f883a 	mov	r23,r2
   4e138:	2907c83a 	sub	r3,r5,r4
   4e13c:	1809883a 	mov	r4,r3
   4e140:	a80b883a 	mov	r5,r21
   4e144:	d8c00015 	stw	r3,0(sp)
   4e148:	0045c280 	call	45c28 <__umodsi3>
   4e14c:	d8c00017 	ldw	r3,0(sp)
   4e150:	a80b883a 	mov	r5,r21
   4e154:	d8800015 	stw	r2,0(sp)
   4e158:	1809883a 	mov	r4,r3
   4e15c:	0045c200 	call	45c20 <__udivsi3>
   4e160:	d9800017 	ldw	r6,0(sp)
   4e164:	8c7fffcc 	andi	r17,r17,65535
   4e168:	3008943a 	slli	r4,r6,16
   4e16c:	170d383a 	mul	r6,r2,fp
   4e170:	2448b03a 	or	r4,r4,r17
   4e174:	2180042e 	bgeu	r4,r6,4e188 <__umoddi3+0x3a8>
   4e178:	2509883a 	add	r4,r4,r20
   4e17c:	10ffffc4 	addi	r3,r2,-1
   4e180:	2500692e 	bgeu	r4,r20,4e328 <__umoddi3+0x548>
   4e184:	1805883a 	mov	r2,r3
   4e188:	b82e943a 	slli	r23,r23,16
   4e18c:	b010d43a 	srli	r8,r22,16
   4e190:	b1ffffcc 	andi	r7,r22,65535
   4e194:	15eeb03a 	or	r23,r2,r23
   4e198:	b8bfffcc 	andi	r2,r23,65535
   4e19c:	b82ed43a 	srli	r23,r23,16
   4e1a0:	11c7383a 	mul	r3,r2,r7
   4e1a4:	1205383a 	mul	r2,r2,r8
   4e1a8:	b9cf383a 	mul	r7,r23,r7
   4e1ac:	400b883a 	mov	r5,r8
   4e1b0:	1810d43a 	srli	r8,r3,16
   4e1b4:	3885883a 	add	r2,r7,r2
   4e1b8:	2189c83a 	sub	r4,r4,r6
   4e1bc:	1205883a 	add	r2,r2,r8
   4e1c0:	b94b383a 	mul	r5,r23,r5
   4e1c4:	11c0022e 	bgeu	r2,r7,4e1d0 <__umoddi3+0x3f0>
   4e1c8:	01800074 	movhi	r6,1
   4e1cc:	298b883a 	add	r5,r5,r6
   4e1d0:	100cd43a 	srli	r6,r2,16
   4e1d4:	1004943a 	slli	r2,r2,16
   4e1d8:	18ffffcc 	andi	r3,r3,65535
   4e1dc:	298b883a 	add	r5,r5,r6
   4e1e0:	10c5883a 	add	r2,r2,r3
   4e1e4:	21403836 	bltu	r4,r5,4e2c8 <__umoddi3+0x4e8>
   4e1e8:	21405c26 	beq	r4,r5,4e35c <__umoddi3+0x57c>
   4e1ec:	2147c83a 	sub	r3,r4,r5
   4e1f0:	102d883a 	mov	r22,r2
   4e1f4:	95adc83a 	sub	r22,r18,r22
   4e1f8:	95a5803a 	cmpltu	r18,r18,r22
   4e1fc:	1c87c83a 	sub	r3,r3,r18
   4e200:	1cc4983a 	sll	r2,r3,r19
   4e204:	b42cd83a 	srl	r22,r22,r16
   4e208:	1c06d83a 	srl	r3,r3,r16
   4e20c:	1584b03a 	or	r2,r2,r22
   4e210:	003f9006 	br	4e054 <__umoddi3+0x274>
   4e214:	002b883a 	mov	r21,zero
   4e218:	003f1706 	br	4de78 <__umoddi3+0x98>
   4e21c:	8560983a 	sll	r16,r16,r21
   4e220:	88e6d83a 	srl	r19,r17,r3
   4e224:	90c6d83a 	srl	r3,r18,r3
   4e228:	8028d43a 	srli	r20,r16,16
   4e22c:	8d62983a 	sll	r17,r17,r21
   4e230:	9809883a 	mov	r4,r19
   4e234:	a00b883a 	mov	r5,r20
   4e238:	88eeb03a 	or	r23,r17,r3
   4e23c:	0045c280 	call	45c28 <__umodsi3>
   4e240:	9809883a 	mov	r4,r19
   4e244:	a00b883a 	mov	r5,r20
   4e248:	1023883a 	mov	r17,r2
   4e24c:	0045c200 	call	45c20 <__udivsi3>
   4e250:	85bfffcc 	andi	r22,r16,65535
   4e254:	880a943a 	slli	r5,r17,16
   4e258:	b806d43a 	srli	r3,r23,16
   4e25c:	1585383a 	mul	r2,r2,r22
   4e260:	9566983a 	sll	r19,r18,r21
   4e264:	28cab03a 	or	r5,r5,r3
   4e268:	2880042e 	bgeu	r5,r2,4e27c <__umoddi3+0x49c>
   4e26c:	2c0b883a 	add	r5,r5,r16
   4e270:	2c000236 	bltu	r5,r16,4e27c <__umoddi3+0x49c>
   4e274:	2880012e 	bgeu	r5,r2,4e27c <__umoddi3+0x49c>
   4e278:	2c0b883a 	add	r5,r5,r16
   4e27c:	28a5c83a 	sub	r18,r5,r2
   4e280:	9009883a 	mov	r4,r18
   4e284:	a00b883a 	mov	r5,r20
   4e288:	0045c280 	call	45c28 <__umodsi3>
   4e28c:	1023883a 	mov	r17,r2
   4e290:	9009883a 	mov	r4,r18
   4e294:	a00b883a 	mov	r5,r20
   4e298:	0045c200 	call	45c20 <__udivsi3>
   4e29c:	8822943a 	slli	r17,r17,16
   4e2a0:	1585383a 	mul	r2,r2,r22
   4e2a4:	bdffffcc 	andi	r23,r23,65535
   4e2a8:	8de2b03a 	or	r17,r17,r23
   4e2ac:	8880042e 	bgeu	r17,r2,4e2c0 <__umoddi3+0x4e0>
   4e2b0:	8c23883a 	add	r17,r17,r16
   4e2b4:	8c000236 	bltu	r17,r16,4e2c0 <__umoddi3+0x4e0>
   4e2b8:	8880012e 	bgeu	r17,r2,4e2c0 <__umoddi3+0x4e0>
   4e2bc:	8c23883a 	add	r17,r17,r16
   4e2c0:	88a3c83a 	sub	r17,r17,r2
   4e2c4:	003f3d06 	br	4dfbc <__umoddi3+0x1dc>
   4e2c8:	15adc83a 	sub	r22,r2,r22
   4e2cc:	2d07c83a 	sub	r3,r5,r20
   4e2d0:	1585803a 	cmpltu	r2,r2,r22
   4e2d4:	1887c83a 	sub	r3,r3,r2
   4e2d8:	20c7c83a 	sub	r3,r4,r3
   4e2dc:	003fc506 	br	4e1f4 <__umoddi3+0x414>
   4e2e0:	00c00204 	movi	r3,8
   4e2e4:	1827883a 	mov	r19,r3
   4e2e8:	003f0b06 	br	4df18 <__umoddi3+0x138>
   4e2ec:	00c00604 	movi	r3,24
   4e2f0:	1827883a 	mov	r19,r3
   4e2f4:	003f0806 	br	4df18 <__umoddi3+0x138>
   4e2f8:	00800604 	movi	r2,24
   4e2fc:	1009883a 	mov	r4,r2
   4e300:	003ecf06 	br	4de40 <__umoddi3+0x60>
   4e304:	00800204 	movi	r2,8
   4e308:	1007883a 	mov	r3,r2
   4e30c:	003f1f06 	br	4df8c <__umoddi3+0x1ac>
   4e310:	00800604 	movi	r2,24
   4e314:	1007883a 	mov	r3,r2
   4e318:	003f1c06 	br	4df8c <__umoddi3+0x1ac>
   4e31c:	00800204 	movi	r2,8
   4e320:	1009883a 	mov	r4,r2
   4e324:	003ec606 	br	4de40 <__umoddi3+0x60>
   4e328:	21bf962e 	bgeu	r4,r6,4e184 <__umoddi3+0x3a4>
   4e32c:	10bfff84 	addi	r2,r2,-2
   4e330:	2509883a 	add	r4,r4,r20
   4e334:	003f9406 	br	4e188 <__umoddi3+0x3a8>
   4e338:	293f7e2e 	bgeu	r5,r4,4e134 <__umoddi3+0x354>
   4e33c:	bdffff84 	addi	r23,r23,-2
   4e340:	2d0b883a 	add	r5,r5,r20
   4e344:	003f7c06 	br	4e138 <__umoddi3+0x358>
   4e348:	1c07883a 	add	r3,r3,r16
   4e34c:	003f2a06 	br	4dff8 <__umoddi3+0x218>
   4e350:	9005883a 	mov	r2,r18
   4e354:	a007883a 	mov	r3,r20
   4e358:	003f3e06 	br	4e054 <__umoddi3+0x274>
   4e35c:	90bfda36 	bltu	r18,r2,4e2c8 <__umoddi3+0x4e8>
   4e360:	102d883a 	mov	r22,r2
   4e364:	0007883a 	mov	r3,zero
   4e368:	003fa206 	br	4e1f4 <__umoddi3+0x414>

0004e36c <__nedf2>:
   4e36c:	defff104 	addi	sp,sp,-60
   4e370:	d9000c15 	stw	r4,48(sp)
   4e374:	d9400d15 	stw	r5,52(sp)
   4e378:	d9000c04 	addi	r4,sp,48
   4e37c:	d9400504 	addi	r5,sp,20
   4e380:	dfc00e15 	stw	ra,56(sp)
   4e384:	d9800a15 	stw	r6,40(sp)
   4e388:	d9c00b15 	stw	r7,44(sp)
   4e38c:	00461540 	call	46154 <__unpack_d>
   4e390:	d9000a04 	addi	r4,sp,40
   4e394:	d80b883a 	mov	r5,sp
   4e398:	00461540 	call	46154 <__unpack_d>
   4e39c:	d8c00517 	ldw	r3,20(sp)
   4e3a0:	00800044 	movi	r2,1
   4e3a4:	10c0052e 	bgeu	r2,r3,4e3bc <__nedf2+0x50>
   4e3a8:	d8c00017 	ldw	r3,0(sp)
   4e3ac:	10c0032e 	bgeu	r2,r3,4e3bc <__nedf2+0x50>
   4e3b0:	d9000504 	addi	r4,sp,20
   4e3b4:	d80b883a 	mov	r5,sp
   4e3b8:	00462580 	call	46258 <__fpcmp_parts_d>
   4e3bc:	dfc00e17 	ldw	ra,56(sp)
   4e3c0:	dec00f04 	addi	sp,sp,60
   4e3c4:	f800283a 	ret

0004e3c8 <__ltdf2>:
   4e3c8:	defff104 	addi	sp,sp,-60
   4e3cc:	d9000c15 	stw	r4,48(sp)
   4e3d0:	d9400d15 	stw	r5,52(sp)
   4e3d4:	d9000c04 	addi	r4,sp,48
   4e3d8:	d9400504 	addi	r5,sp,20
   4e3dc:	dfc00e15 	stw	ra,56(sp)
   4e3e0:	d9800a15 	stw	r6,40(sp)
   4e3e4:	d9c00b15 	stw	r7,44(sp)
   4e3e8:	00461540 	call	46154 <__unpack_d>
   4e3ec:	d9000a04 	addi	r4,sp,40
   4e3f0:	d80b883a 	mov	r5,sp
   4e3f4:	00461540 	call	46154 <__unpack_d>
   4e3f8:	d8c00517 	ldw	r3,20(sp)
   4e3fc:	00800044 	movi	r2,1
   4e400:	10c0052e 	bgeu	r2,r3,4e418 <__ltdf2+0x50>
   4e404:	d8c00017 	ldw	r3,0(sp)
   4e408:	10c0032e 	bgeu	r2,r3,4e418 <__ltdf2+0x50>
   4e40c:	d9000504 	addi	r4,sp,20
   4e410:	d80b883a 	mov	r5,sp
   4e414:	00462580 	call	46258 <__fpcmp_parts_d>
   4e418:	dfc00e17 	ldw	ra,56(sp)
   4e41c:	dec00f04 	addi	sp,sp,60
   4e420:	f800283a 	ret

0004e424 <__floatunsidf>:
   4e424:	defff904 	addi	sp,sp,-28
   4e428:	dc000515 	stw	r16,20(sp)
   4e42c:	dfc00615 	stw	ra,24(sp)
   4e430:	d8000115 	stw	zero,4(sp)
   4e434:	2021883a 	mov	r16,r4
   4e438:	20001726 	beq	r4,zero,4e498 <__floatunsidf+0x74>
   4e43c:	008000c4 	movi	r2,3
   4e440:	d8800015 	stw	r2,0(sp)
   4e444:	00800f04 	movi	r2,60
   4e448:	d8800215 	stw	r2,8(sp)
   4e44c:	0045c900 	call	45c90 <__clzsi2>
   4e450:	10c00744 	addi	r3,r2,29
   4e454:	18001816 	blt	r3,zero,4e4b8 <__floatunsidf+0x94>
   4e458:	18002d26 	beq	r3,zero,4e510 <__floatunsidf+0xec>
   4e45c:	113fff44 	addi	r4,r2,-3
   4e460:	20002e16 	blt	r4,zero,4e51c <__floatunsidf+0xf8>
   4e464:	8108983a 	sll	r4,r16,r4
   4e468:	0021883a 	mov	r16,zero
   4e46c:	014007c4 	movi	r5,31
   4e470:	2885c83a 	sub	r2,r5,r2
   4e474:	dc000315 	stw	r16,12(sp)
   4e478:	d9000415 	stw	r4,16(sp)
   4e47c:	d8800215 	stw	r2,8(sp)
   4e480:	d809883a 	mov	r4,sp
   4e484:	0045f300 	call	45f30 <__pack_d>
   4e488:	dfc00617 	ldw	ra,24(sp)
   4e48c:	dc000517 	ldw	r16,20(sp)
   4e490:	dec00704 	addi	sp,sp,28
   4e494:	f800283a 	ret
   4e498:	00800084 	movi	r2,2
   4e49c:	d809883a 	mov	r4,sp
   4e4a0:	d8800015 	stw	r2,0(sp)
   4e4a4:	0045f300 	call	45f30 <__pack_d>
   4e4a8:	dfc00617 	ldw	ra,24(sp)
   4e4ac:	dc000517 	ldw	r16,20(sp)
   4e4b0:	dec00704 	addi	sp,sp,28
   4e4b4:	f800283a 	ret
   4e4b8:	00c7c83a 	sub	r3,zero,r3
   4e4bc:	193ff804 	addi	r4,r3,-32
   4e4c0:	20001c16 	blt	r4,zero,4e534 <__floatunsidf+0x110>
   4e4c4:	000b883a 	mov	r5,zero
   4e4c8:	2009d7fa 	srai	r4,r4,31
   4e4cc:	80c6d83a 	srl	r3,r16,r3
   4e4d0:	297fffc4 	addi	r5,r5,-1
   4e4d4:	2c20703a 	and	r16,r5,r16
   4e4d8:	8020c03a 	cmpne	r16,r16,zero
   4e4dc:	1906703a 	and	r3,r3,r4
   4e4e0:	010007c4 	movi	r4,31
   4e4e4:	80c6b03a 	or	r3,r16,r3
   4e4e8:	2085c83a 	sub	r2,r4,r2
   4e4ec:	d809883a 	mov	r4,sp
   4e4f0:	d8c00315 	stw	r3,12(sp)
   4e4f4:	d8000415 	stw	zero,16(sp)
   4e4f8:	d8800215 	stw	r2,8(sp)
   4e4fc:	0045f300 	call	45f30 <__pack_d>
   4e500:	dfc00617 	ldw	ra,24(sp)
   4e504:	dc000517 	ldw	r16,20(sp)
   4e508:	dec00704 	addi	sp,sp,28
   4e50c:	f800283a 	ret
   4e510:	dc000315 	stw	r16,12(sp)
   4e514:	d8000415 	stw	zero,16(sp)
   4e518:	003fd906 	br	4e480 <__floatunsidf+0x5c>
   4e51c:	800ad07a 	srli	r5,r16,1
   4e520:	010007c4 	movi	r4,31
   4e524:	20c9c83a 	sub	r4,r4,r3
   4e528:	2908d83a 	srl	r4,r5,r4
   4e52c:	80e0983a 	sll	r16,r16,r3
   4e530:	003fce06 	br	4e46c <__floatunsidf+0x48>
   4e534:	01400044 	movi	r5,1
   4e538:	28ca983a 	sll	r5,r5,r3
   4e53c:	003fe206 	br	4e4c8 <__floatunsidf+0xa4>

0004e540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e540:	defffe04 	addi	sp,sp,-8
   4e544:	dfc00115 	stw	ra,4(sp)
   4e548:	df000015 	stw	fp,0(sp)
   4e54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e550:	00800174 	movhi	r2,5
   4e554:	108df904 	addi	r2,r2,14308
   4e558:	10800017 	ldw	r2,0(r2)
   4e55c:	10000526 	beq	r2,zero,4e574 <alt_get_errno+0x34>
   4e560:	00800174 	movhi	r2,5
   4e564:	108df904 	addi	r2,r2,14308
   4e568:	10800017 	ldw	r2,0(r2)
   4e56c:	103ee83a 	callr	r2
   4e570:	00000206 	br	4e57c <alt_get_errno+0x3c>
   4e574:	00800174 	movhi	r2,5
   4e578:	10950c04 	addi	r2,r2,21552
}
   4e57c:	e037883a 	mov	sp,fp
   4e580:	dfc00117 	ldw	ra,4(sp)
   4e584:	df000017 	ldw	fp,0(sp)
   4e588:	dec00204 	addi	sp,sp,8
   4e58c:	f800283a 	ret

0004e590 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4e590:	defffb04 	addi	sp,sp,-20
   4e594:	dfc00415 	stw	ra,16(sp)
   4e598:	df000315 	stw	fp,12(sp)
   4e59c:	df000304 	addi	fp,sp,12
   4e5a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4e5a4:	e0bfff17 	ldw	r2,-4(fp)
   4e5a8:	10000616 	blt	r2,zero,4e5c4 <close+0x34>
   4e5ac:	e0bfff17 	ldw	r2,-4(fp)
   4e5b0:	10c00324 	muli	r3,r2,12
   4e5b4:	00800174 	movhi	r2,5
   4e5b8:	10893b04 	addi	r2,r2,9452
   4e5bc:	1885883a 	add	r2,r3,r2
   4e5c0:	00000106 	br	4e5c8 <close+0x38>
   4e5c4:	0005883a 	mov	r2,zero
   4e5c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4e5cc:	e0bffd17 	ldw	r2,-12(fp)
   4e5d0:	10001826 	beq	r2,zero,4e634 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4e5d4:	e0bffd17 	ldw	r2,-12(fp)
   4e5d8:	10800017 	ldw	r2,0(r2)
   4e5dc:	10800417 	ldw	r2,16(r2)
   4e5e0:	10000626 	beq	r2,zero,4e5fc <close+0x6c>
   4e5e4:	e0bffd17 	ldw	r2,-12(fp)
   4e5e8:	10800017 	ldw	r2,0(r2)
   4e5ec:	10800417 	ldw	r2,16(r2)
   4e5f0:	e13ffd17 	ldw	r4,-12(fp)
   4e5f4:	103ee83a 	callr	r2
   4e5f8:	00000106 	br	4e600 <close+0x70>
   4e5fc:	0005883a 	mov	r2,zero
   4e600:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4e604:	e13fff17 	ldw	r4,-4(fp)
   4e608:	004f0940 	call	4f094 <alt_release_fd>
    if (rval < 0)
   4e60c:	e0bffe17 	ldw	r2,-8(fp)
   4e610:	1000060e 	bge	r2,zero,4e62c <close+0x9c>
    {
      ALT_ERRNO = -rval;
   4e614:	004e5400 	call	4e540 <alt_get_errno>
   4e618:	e0fffe17 	ldw	r3,-8(fp)
   4e61c:	00c7c83a 	sub	r3,zero,r3
   4e620:	10c00015 	stw	r3,0(r2)
      return -1;
   4e624:	00bfffc4 	movi	r2,-1
   4e628:	00000606 	br	4e644 <close+0xb4>
    }
    return 0;
   4e62c:	0005883a 	mov	r2,zero
   4e630:	00000406 	br	4e644 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e634:	004e5400 	call	4e540 <alt_get_errno>
   4e638:	00c01444 	movi	r3,81
   4e63c:	10c00015 	stw	r3,0(r2)
    return -1;
   4e640:	00bfffc4 	movi	r2,-1
  }
}
   4e644:	e037883a 	mov	sp,fp
   4e648:	dfc00117 	ldw	ra,4(sp)
   4e64c:	df000017 	ldw	fp,0(sp)
   4e650:	dec00204 	addi	sp,sp,8
   4e654:	f800283a 	ret

0004e658 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4e658:	defffc04 	addi	sp,sp,-16
   4e65c:	df000315 	stw	fp,12(sp)
   4e660:	df000304 	addi	fp,sp,12
   4e664:	e13ffd15 	stw	r4,-12(fp)
   4e668:	e17ffe15 	stw	r5,-8(fp)
   4e66c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4e670:	e0bfff17 	ldw	r2,-4(fp)
}
   4e674:	e037883a 	mov	sp,fp
   4e678:	df000017 	ldw	fp,0(sp)
   4e67c:	dec00104 	addi	sp,sp,4
   4e680:	f800283a 	ret

0004e684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e684:	defffe04 	addi	sp,sp,-8
   4e688:	dfc00115 	stw	ra,4(sp)
   4e68c:	df000015 	stw	fp,0(sp)
   4e690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e694:	00800174 	movhi	r2,5
   4e698:	108df904 	addi	r2,r2,14308
   4e69c:	10800017 	ldw	r2,0(r2)
   4e6a0:	10000526 	beq	r2,zero,4e6b8 <alt_get_errno+0x34>
   4e6a4:	00800174 	movhi	r2,5
   4e6a8:	108df904 	addi	r2,r2,14308
   4e6ac:	10800017 	ldw	r2,0(r2)
   4e6b0:	103ee83a 	callr	r2
   4e6b4:	00000206 	br	4e6c0 <alt_get_errno+0x3c>
   4e6b8:	00800174 	movhi	r2,5
   4e6bc:	10950c04 	addi	r2,r2,21552
}
   4e6c0:	e037883a 	mov	sp,fp
   4e6c4:	dfc00117 	ldw	ra,4(sp)
   4e6c8:	df000017 	ldw	fp,0(sp)
   4e6cc:	dec00204 	addi	sp,sp,8
   4e6d0:	f800283a 	ret

0004e6d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4e6d4:	defffb04 	addi	sp,sp,-20
   4e6d8:	dfc00415 	stw	ra,16(sp)
   4e6dc:	df000315 	stw	fp,12(sp)
   4e6e0:	df000304 	addi	fp,sp,12
   4e6e4:	e13ffe15 	stw	r4,-8(fp)
   4e6e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e6ec:	e0bffe17 	ldw	r2,-8(fp)
   4e6f0:	10000616 	blt	r2,zero,4e70c <fstat+0x38>
   4e6f4:	e0bffe17 	ldw	r2,-8(fp)
   4e6f8:	10c00324 	muli	r3,r2,12
   4e6fc:	00800174 	movhi	r2,5
   4e700:	10893b04 	addi	r2,r2,9452
   4e704:	1885883a 	add	r2,r3,r2
   4e708:	00000106 	br	4e710 <fstat+0x3c>
   4e70c:	0005883a 	mov	r2,zero
   4e710:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4e714:	e0bffd17 	ldw	r2,-12(fp)
   4e718:	10001026 	beq	r2,zero,4e75c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4e71c:	e0bffd17 	ldw	r2,-12(fp)
   4e720:	10800017 	ldw	r2,0(r2)
   4e724:	10800817 	ldw	r2,32(r2)
   4e728:	10000726 	beq	r2,zero,4e748 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4e72c:	e0bffd17 	ldw	r2,-12(fp)
   4e730:	10800017 	ldw	r2,0(r2)
   4e734:	10800817 	ldw	r2,32(r2)
   4e738:	e13ffd17 	ldw	r4,-12(fp)
   4e73c:	e17fff17 	ldw	r5,-4(fp)
   4e740:	103ee83a 	callr	r2
   4e744:	00000906 	br	4e76c <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4e748:	e0bfff17 	ldw	r2,-4(fp)
   4e74c:	00c80004 	movi	r3,8192
   4e750:	10c00115 	stw	r3,4(r2)
      return 0;
   4e754:	0005883a 	mov	r2,zero
   4e758:	00000406 	br	4e76c <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e75c:	004e6840 	call	4e684 <alt_get_errno>
   4e760:	00c01444 	movi	r3,81
   4e764:	10c00015 	stw	r3,0(r2)
    return -1;
   4e768:	00bfffc4 	movi	r2,-1
  }
}
   4e76c:	e037883a 	mov	sp,fp
   4e770:	dfc00117 	ldw	ra,4(sp)
   4e774:	df000017 	ldw	fp,0(sp)
   4e778:	dec00204 	addi	sp,sp,8
   4e77c:	f800283a 	ret

0004e780 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   4e780:	defff004 	addi	sp,sp,-64
   4e784:	df000f15 	stw	fp,60(sp)
   4e788:	df000f04 	addi	fp,sp,60
   4e78c:	e13ffd15 	stw	r4,-12(fp)
   4e790:	e17ffe15 	stw	r5,-8(fp)
   4e794:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   4e798:	00bffa84 	movi	r2,-22
   4e79c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4e7a0:	e0bffd17 	ldw	r2,-12(fp)
   4e7a4:	10800828 	cmpgeui	r2,r2,32
   4e7a8:	10005c1e 	bne	r2,zero,4e91c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e7ac:	0005303a 	rdctl	r2,status
   4e7b0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e7b4:	e0fff317 	ldw	r3,-52(fp)
   4e7b8:	00bfff84 	movi	r2,-2
   4e7bc:	1884703a 	and	r2,r3,r2
   4e7c0:	1001703a 	wrctl	status,r2
  
  return context;
   4e7c4:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   4e7c8:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   4e7cc:	00c00174 	movhi	r3,5
   4e7d0:	18daae04 	addi	r3,r3,27320
   4e7d4:	e0bffd17 	ldw	r2,-12(fp)
   4e7d8:	100490fa 	slli	r2,r2,3
   4e7dc:	1885883a 	add	r2,r3,r2
   4e7e0:	e0ffff17 	ldw	r3,-4(fp)
   4e7e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   4e7e8:	00c00174 	movhi	r3,5
   4e7ec:	18daae04 	addi	r3,r3,27320
   4e7f0:	e0bffd17 	ldw	r2,-12(fp)
   4e7f4:	100490fa 	slli	r2,r2,3
   4e7f8:	1885883a 	add	r2,r3,r2
   4e7fc:	10800104 	addi	r2,r2,4
   4e800:	e0fffe17 	ldw	r3,-8(fp)
   4e804:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   4e808:	e0bfff17 	ldw	r2,-4(fp)
   4e80c:	10001f26 	beq	r2,zero,4e88c <alt_irq_register+0x10c>
   4e810:	e0bffd17 	ldw	r2,-12(fp)
   4e814:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e818:	0005303a 	rdctl	r2,status
   4e81c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e820:	e0fff517 	ldw	r3,-44(fp)
   4e824:	00bfff84 	movi	r2,-2
   4e828:	1884703a 	and	r2,r3,r2
   4e82c:	1001703a 	wrctl	status,r2
  
  return context;
   4e830:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4e834:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   4e838:	e0bff417 	ldw	r2,-48(fp)
   4e83c:	00c00044 	movi	r3,1
   4e840:	1884983a 	sll	r2,r3,r2
   4e844:	1007883a 	mov	r3,r2
   4e848:	00800174 	movhi	r2,5
   4e84c:	10950d04 	addi	r2,r2,21556
   4e850:	10800017 	ldw	r2,0(r2)
   4e854:	1886b03a 	or	r3,r3,r2
   4e858:	00800174 	movhi	r2,5
   4e85c:	10950d04 	addi	r2,r2,21556
   4e860:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4e864:	00800174 	movhi	r2,5
   4e868:	10950d04 	addi	r2,r2,21556
   4e86c:	10800017 	ldw	r2,0(r2)
   4e870:	100170fa 	wrctl	ienable,r2
   4e874:	e0bff617 	ldw	r2,-40(fp)
   4e878:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e87c:	e0bff717 	ldw	r2,-36(fp)
   4e880:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4e884:	0005883a 	mov	r2,zero
   4e888:	00001f06 	br	4e908 <alt_irq_register+0x188>
   4e88c:	e0bffd17 	ldw	r2,-12(fp)
   4e890:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e894:	0005303a 	rdctl	r2,status
   4e898:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e89c:	e0fff917 	ldw	r3,-28(fp)
   4e8a0:	00bfff84 	movi	r2,-2
   4e8a4:	1884703a 	and	r2,r3,r2
   4e8a8:	1001703a 	wrctl	status,r2
  
  return context;
   4e8ac:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4e8b0:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   4e8b4:	e0bff817 	ldw	r2,-32(fp)
   4e8b8:	00c00044 	movi	r3,1
   4e8bc:	1884983a 	sll	r2,r3,r2
   4e8c0:	0084303a 	nor	r2,zero,r2
   4e8c4:	1007883a 	mov	r3,r2
   4e8c8:	00800174 	movhi	r2,5
   4e8cc:	10950d04 	addi	r2,r2,21556
   4e8d0:	10800017 	ldw	r2,0(r2)
   4e8d4:	1886703a 	and	r3,r3,r2
   4e8d8:	00800174 	movhi	r2,5
   4e8dc:	10950d04 	addi	r2,r2,21556
   4e8e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4e8e4:	00800174 	movhi	r2,5
   4e8e8:	10950d04 	addi	r2,r2,21556
   4e8ec:	10800017 	ldw	r2,0(r2)
   4e8f0:	100170fa 	wrctl	ienable,r2
   4e8f4:	e0bffa17 	ldw	r2,-24(fp)
   4e8f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e8fc:	e0bffb17 	ldw	r2,-20(fp)
   4e900:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4e904:	0005883a 	mov	r2,zero
   4e908:	e0bff115 	stw	r2,-60(fp)
   4e90c:	e0bff217 	ldw	r2,-56(fp)
   4e910:	e0bffc15 	stw	r2,-16(fp)
   4e914:	e0bffc17 	ldw	r2,-16(fp)
   4e918:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   4e91c:	e0bff117 	ldw	r2,-60(fp)
}
   4e920:	e037883a 	mov	sp,fp
   4e924:	df000017 	ldw	fp,0(sp)
   4e928:	dec00104 	addi	sp,sp,4
   4e92c:	f800283a 	ret

0004e930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e930:	defffe04 	addi	sp,sp,-8
   4e934:	dfc00115 	stw	ra,4(sp)
   4e938:	df000015 	stw	fp,0(sp)
   4e93c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e940:	00800174 	movhi	r2,5
   4e944:	108df904 	addi	r2,r2,14308
   4e948:	10800017 	ldw	r2,0(r2)
   4e94c:	10000526 	beq	r2,zero,4e964 <alt_get_errno+0x34>
   4e950:	00800174 	movhi	r2,5
   4e954:	108df904 	addi	r2,r2,14308
   4e958:	10800017 	ldw	r2,0(r2)
   4e95c:	103ee83a 	callr	r2
   4e960:	00000206 	br	4e96c <alt_get_errno+0x3c>
   4e964:	00800174 	movhi	r2,5
   4e968:	10950c04 	addi	r2,r2,21552
}
   4e96c:	e037883a 	mov	sp,fp
   4e970:	dfc00117 	ldw	ra,4(sp)
   4e974:	df000017 	ldw	fp,0(sp)
   4e978:	dec00204 	addi	sp,sp,8
   4e97c:	f800283a 	ret

0004e980 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4e980:	deffed04 	addi	sp,sp,-76
   4e984:	dfc01215 	stw	ra,72(sp)
   4e988:	df001115 	stw	fp,68(sp)
   4e98c:	df001104 	addi	fp,sp,68
   4e990:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e994:	e0bfff17 	ldw	r2,-4(fp)
   4e998:	10000616 	blt	r2,zero,4e9b4 <isatty+0x34>
   4e99c:	e0bfff17 	ldw	r2,-4(fp)
   4e9a0:	10c00324 	muli	r3,r2,12
   4e9a4:	00800174 	movhi	r2,5
   4e9a8:	10893b04 	addi	r2,r2,9452
   4e9ac:	1885883a 	add	r2,r3,r2
   4e9b0:	00000106 	br	4e9b8 <isatty+0x38>
   4e9b4:	0005883a 	mov	r2,zero
   4e9b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4e9bc:	e0bfef17 	ldw	r2,-68(fp)
   4e9c0:	10000e26 	beq	r2,zero,4e9fc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4e9c4:	e0bfef17 	ldw	r2,-68(fp)
   4e9c8:	10800017 	ldw	r2,0(r2)
   4e9cc:	10800817 	ldw	r2,32(r2)
   4e9d0:	1000021e 	bne	r2,zero,4e9dc <isatty+0x5c>
    {
      return 1;
   4e9d4:	00800044 	movi	r2,1
   4e9d8:	00000c06 	br	4ea0c <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4e9dc:	e0bff004 	addi	r2,fp,-64
   4e9e0:	e13fff17 	ldw	r4,-4(fp)
   4e9e4:	100b883a 	mov	r5,r2
   4e9e8:	004e6d40 	call	4e6d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4e9ec:	e0bff117 	ldw	r2,-60(fp)
   4e9f0:	10880020 	cmpeqi	r2,r2,8192
   4e9f4:	10803fcc 	andi	r2,r2,255
   4e9f8:	00000406 	br	4ea0c <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e9fc:	004e9300 	call	4e930 <alt_get_errno>
   4ea00:	00c01444 	movi	r3,81
   4ea04:	10c00015 	stw	r3,0(r2)
    return 0;
   4ea08:	0005883a 	mov	r2,zero
  }
}
   4ea0c:	e037883a 	mov	sp,fp
   4ea10:	dfc00117 	ldw	ra,4(sp)
   4ea14:	df000017 	ldw	fp,0(sp)
   4ea18:	dec00204 	addi	sp,sp,8
   4ea1c:	f800283a 	ret

0004ea20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4ea20:	defffc04 	addi	sp,sp,-16
   4ea24:	df000315 	stw	fp,12(sp)
   4ea28:	df000304 	addi	fp,sp,12
   4ea2c:	e13ffd15 	stw	r4,-12(fp)
   4ea30:	e17ffe15 	stw	r5,-8(fp)
   4ea34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4ea38:	e0fffe17 	ldw	r3,-8(fp)
   4ea3c:	e0bffd17 	ldw	r2,-12(fp)
   4ea40:	18800e26 	beq	r3,r2,4ea7c <alt_load_section+0x5c>
  {
    while( to != end )
   4ea44:	00000a06 	br	4ea70 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4ea48:	e0bffd17 	ldw	r2,-12(fp)
   4ea4c:	10c00017 	ldw	r3,0(r2)
   4ea50:	e0bffe17 	ldw	r2,-8(fp)
   4ea54:	10c00015 	stw	r3,0(r2)
   4ea58:	e0bffe17 	ldw	r2,-8(fp)
   4ea5c:	10800104 	addi	r2,r2,4
   4ea60:	e0bffe15 	stw	r2,-8(fp)
   4ea64:	e0bffd17 	ldw	r2,-12(fp)
   4ea68:	10800104 	addi	r2,r2,4
   4ea6c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4ea70:	e0fffe17 	ldw	r3,-8(fp)
   4ea74:	e0bfff17 	ldw	r2,-4(fp)
   4ea78:	18bff31e 	bne	r3,r2,4ea48 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4ea7c:	e037883a 	mov	sp,fp
   4ea80:	df000017 	ldw	fp,0(sp)
   4ea84:	dec00104 	addi	sp,sp,4
   4ea88:	f800283a 	ret

0004ea8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4ea8c:	defffe04 	addi	sp,sp,-8
   4ea90:	dfc00115 	stw	ra,4(sp)
   4ea94:	df000015 	stw	fp,0(sp)
   4ea98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4ea9c:	01000174 	movhi	r4,5
   4eaa0:	210dfe04 	addi	r4,r4,14328
   4eaa4:	01400174 	movhi	r5,5
   4eaa8:	29470c04 	addi	r5,r5,7216
   4eaac:	01800174 	movhi	r6,5
   4eab0:	318dfe04 	addi	r6,r6,14328
   4eab4:	004ea200 	call	4ea20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4eab8:	01000134 	movhi	r4,4
   4eabc:	21000804 	addi	r4,r4,32
   4eac0:	01400134 	movhi	r5,4
   4eac4:	29400804 	addi	r5,r5,32
   4eac8:	01800134 	movhi	r6,4
   4eacc:	31806e04 	addi	r6,r6,440
   4ead0:	004ea200 	call	4ea20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4ead4:	01000174 	movhi	r4,5
   4ead8:	2105bb04 	addi	r4,r4,5868
   4eadc:	01400174 	movhi	r5,5
   4eae0:	2945bb04 	addi	r5,r5,5868
   4eae4:	01800174 	movhi	r6,5
   4eae8:	31870c04 	addi	r6,r6,7216
   4eaec:	004ea200 	call	4ea20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4eaf0:	005085c0 	call	5085c <alt_dcache_flush_all>
  alt_icache_flush_all();
   4eaf4:	0050ca00 	call	50ca0 <alt_icache_flush_all>
}
   4eaf8:	e037883a 	mov	sp,fp
   4eafc:	dfc00117 	ldw	ra,4(sp)
   4eb00:	df000017 	ldw	fp,0(sp)
   4eb04:	dec00204 	addi	sp,sp,8
   4eb08:	f800283a 	ret

0004eb0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eb0c:	defffe04 	addi	sp,sp,-8
   4eb10:	dfc00115 	stw	ra,4(sp)
   4eb14:	df000015 	stw	fp,0(sp)
   4eb18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4eb1c:	00800174 	movhi	r2,5
   4eb20:	108df904 	addi	r2,r2,14308
   4eb24:	10800017 	ldw	r2,0(r2)
   4eb28:	10000526 	beq	r2,zero,4eb40 <alt_get_errno+0x34>
   4eb2c:	00800174 	movhi	r2,5
   4eb30:	108df904 	addi	r2,r2,14308
   4eb34:	10800017 	ldw	r2,0(r2)
   4eb38:	103ee83a 	callr	r2
   4eb3c:	00000206 	br	4eb48 <alt_get_errno+0x3c>
   4eb40:	00800174 	movhi	r2,5
   4eb44:	10950c04 	addi	r2,r2,21552
}
   4eb48:	e037883a 	mov	sp,fp
   4eb4c:	dfc00117 	ldw	ra,4(sp)
   4eb50:	df000017 	ldw	fp,0(sp)
   4eb54:	dec00204 	addi	sp,sp,8
   4eb58:	f800283a 	ret

0004eb5c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4eb5c:	defff904 	addi	sp,sp,-28
   4eb60:	dfc00615 	stw	ra,24(sp)
   4eb64:	df000515 	stw	fp,20(sp)
   4eb68:	df000504 	addi	fp,sp,20
   4eb6c:	e13ffd15 	stw	r4,-12(fp)
   4eb70:	e17ffe15 	stw	r5,-8(fp)
   4eb74:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4eb78:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4eb7c:	e0bffd17 	ldw	r2,-12(fp)
   4eb80:	10000616 	blt	r2,zero,4eb9c <lseek+0x40>
   4eb84:	e0bffd17 	ldw	r2,-12(fp)
   4eb88:	10c00324 	muli	r3,r2,12
   4eb8c:	00800174 	movhi	r2,5
   4eb90:	10893b04 	addi	r2,r2,9452
   4eb94:	1885883a 	add	r2,r3,r2
   4eb98:	00000106 	br	4eba0 <lseek+0x44>
   4eb9c:	0005883a 	mov	r2,zero
   4eba0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4eba4:	e0bffc17 	ldw	r2,-16(fp)
   4eba8:	10001026 	beq	r2,zero,4ebec <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4ebac:	e0bffc17 	ldw	r2,-16(fp)
   4ebb0:	10800017 	ldw	r2,0(r2)
   4ebb4:	10800717 	ldw	r2,28(r2)
   4ebb8:	10000926 	beq	r2,zero,4ebe0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4ebbc:	e0bffc17 	ldw	r2,-16(fp)
   4ebc0:	10800017 	ldw	r2,0(r2)
   4ebc4:	10800717 	ldw	r2,28(r2)
   4ebc8:	e13ffc17 	ldw	r4,-16(fp)
   4ebcc:	e17ffe17 	ldw	r5,-8(fp)
   4ebd0:	e1bfff17 	ldw	r6,-4(fp)
   4ebd4:	103ee83a 	callr	r2
   4ebd8:	e0bffb15 	stw	r2,-20(fp)
   4ebdc:	00000506 	br	4ebf4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4ebe0:	00bfde84 	movi	r2,-134
   4ebe4:	e0bffb15 	stw	r2,-20(fp)
   4ebe8:	00000206 	br	4ebf4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4ebec:	00bfebc4 	movi	r2,-81
   4ebf0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4ebf4:	e0bffb17 	ldw	r2,-20(fp)
   4ebf8:	1000060e 	bge	r2,zero,4ec14 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
   4ebfc:	004eb0c0 	call	4eb0c <alt_get_errno>
   4ec00:	e0fffb17 	ldw	r3,-20(fp)
   4ec04:	00c7c83a 	sub	r3,zero,r3
   4ec08:	10c00015 	stw	r3,0(r2)
    rc = -1;
   4ec0c:	00bfffc4 	movi	r2,-1
   4ec10:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4ec14:	e0bffb17 	ldw	r2,-20(fp)
}
   4ec18:	e037883a 	mov	sp,fp
   4ec1c:	dfc00117 	ldw	ra,4(sp)
   4ec20:	df000017 	ldw	fp,0(sp)
   4ec24:	dec00204 	addi	sp,sp,8
   4ec28:	f800283a 	ret

0004ec2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4ec2c:	defffd04 	addi	sp,sp,-12
   4ec30:	dfc00215 	stw	ra,8(sp)
   4ec34:	df000115 	stw	fp,4(sp)
   4ec38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4ec3c:	0009883a 	mov	r4,zero
   4ec40:	004f3180 	call	4f318 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4ec44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4ec48:	004f34c0 	call	4f34c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4ec4c:	01000174 	movhi	r4,5
   4ec50:	21070104 	addi	r4,r4,7172
   4ec54:	01400174 	movhi	r5,5
   4ec58:	29470104 	addi	r5,r5,7172
   4ec5c:	01800174 	movhi	r6,5
   4ec60:	31870104 	addi	r6,r6,7172
   4ec64:	00510580 	call	51058 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4ec68:	00509900 	call	50990 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4ec6c:	01000174 	movhi	r4,5
   4ec70:	21027b04 	addi	r4,r4,2540
   4ec74:	00513180 	call	51318 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4ec78:	d1272a17 	ldw	r4,-25432(gp)
   4ec7c:	d0e72b17 	ldw	r3,-25428(gp)
   4ec80:	d0a72c17 	ldw	r2,-25424(gp)
   4ec84:	180b883a 	mov	r5,r3
   4ec88:	100d883a 	mov	r6,r2
   4ec8c:	00422880 	call	42288 <main>
   4ec90:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4ec94:	01000044 	movi	r4,1
   4ec98:	004e5900 	call	4e590 <close>
  exit (result);
   4ec9c:	e13fff17 	ldw	r4,-4(fp)
   4eca0:	005132c0 	call	5132c <exit>

0004eca4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4eca4:	defffe04 	addi	sp,sp,-8
   4eca8:	df000115 	stw	fp,4(sp)
   4ecac:	df000104 	addi	fp,sp,4
   4ecb0:	e13fff15 	stw	r4,-4(fp)
}
   4ecb4:	e037883a 	mov	sp,fp
   4ecb8:	df000017 	ldw	fp,0(sp)
   4ecbc:	dec00104 	addi	sp,sp,4
   4ecc0:	f800283a 	ret

0004ecc4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4ecc4:	defffe04 	addi	sp,sp,-8
   4ecc8:	df000115 	stw	fp,4(sp)
   4eccc:	df000104 	addi	fp,sp,4
   4ecd0:	e13fff15 	stw	r4,-4(fp)
}
   4ecd4:	e037883a 	mov	sp,fp
   4ecd8:	df000017 	ldw	fp,0(sp)
   4ecdc:	dec00104 	addi	sp,sp,4
   4ece0:	f800283a 	ret

0004ece4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ece4:	defffe04 	addi	sp,sp,-8
   4ece8:	dfc00115 	stw	ra,4(sp)
   4ecec:	df000015 	stw	fp,0(sp)
   4ecf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ecf4:	00800174 	movhi	r2,5
   4ecf8:	108df904 	addi	r2,r2,14308
   4ecfc:	10800017 	ldw	r2,0(r2)
   4ed00:	10000526 	beq	r2,zero,4ed18 <alt_get_errno+0x34>
   4ed04:	00800174 	movhi	r2,5
   4ed08:	108df904 	addi	r2,r2,14308
   4ed0c:	10800017 	ldw	r2,0(r2)
   4ed10:	103ee83a 	callr	r2
   4ed14:	00000206 	br	4ed20 <alt_get_errno+0x3c>
   4ed18:	00800174 	movhi	r2,5
   4ed1c:	10950c04 	addi	r2,r2,21552
}
   4ed20:	e037883a 	mov	sp,fp
   4ed24:	dfc00117 	ldw	ra,4(sp)
   4ed28:	df000017 	ldw	fp,0(sp)
   4ed2c:	dec00204 	addi	sp,sp,8
   4ed30:	f800283a 	ret

0004ed34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4ed34:	defffd04 	addi	sp,sp,-12
   4ed38:	df000215 	stw	fp,8(sp)
   4ed3c:	df000204 	addi	fp,sp,8
   4ed40:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4ed44:	e0bfff17 	ldw	r2,-4(fp)
   4ed48:	10800217 	ldw	r2,8(r2)
   4ed4c:	10d00034 	orhi	r3,r2,16384
   4ed50:	e0bfff17 	ldw	r2,-4(fp)
   4ed54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4ed58:	e03ffe15 	stw	zero,-8(fp)
   4ed5c:	00001d06 	br	4edd4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4ed60:	00c00174 	movhi	r3,5
   4ed64:	18c93b04 	addi	r3,r3,9452
   4ed68:	e0bffe17 	ldw	r2,-8(fp)
   4ed6c:	10800324 	muli	r2,r2,12
   4ed70:	1885883a 	add	r2,r3,r2
   4ed74:	10c00017 	ldw	r3,0(r2)
   4ed78:	e0bfff17 	ldw	r2,-4(fp)
   4ed7c:	10800017 	ldw	r2,0(r2)
   4ed80:	1880111e 	bne	r3,r2,4edc8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4ed84:	00c00174 	movhi	r3,5
   4ed88:	18c93b04 	addi	r3,r3,9452
   4ed8c:	e0bffe17 	ldw	r2,-8(fp)
   4ed90:	10800324 	muli	r2,r2,12
   4ed94:	1885883a 	add	r2,r3,r2
   4ed98:	10800204 	addi	r2,r2,8
   4ed9c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4eda0:	1000090e 	bge	r2,zero,4edc8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4eda4:	e0bffe17 	ldw	r2,-8(fp)
   4eda8:	10c00324 	muli	r3,r2,12
   4edac:	00800174 	movhi	r2,5
   4edb0:	10893b04 	addi	r2,r2,9452
   4edb4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4edb8:	e0bfff17 	ldw	r2,-4(fp)
   4edbc:	18800226 	beq	r3,r2,4edc8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4edc0:	00bffcc4 	movi	r2,-13
   4edc4:	00000a06 	br	4edf0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4edc8:	e0bffe17 	ldw	r2,-8(fp)
   4edcc:	10800044 	addi	r2,r2,1
   4edd0:	e0bffe15 	stw	r2,-8(fp)
   4edd4:	00800174 	movhi	r2,5
   4edd8:	108df804 	addi	r2,r2,14304
   4eddc:	10800017 	ldw	r2,0(r2)
   4ede0:	1007883a 	mov	r3,r2
   4ede4:	e0bffe17 	ldw	r2,-8(fp)
   4ede8:	18bfdd2e 	bgeu	r3,r2,4ed60 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4edec:	0005883a 	mov	r2,zero
}
   4edf0:	e037883a 	mov	sp,fp
   4edf4:	df000017 	ldw	fp,0(sp)
   4edf8:	dec00104 	addi	sp,sp,4
   4edfc:	f800283a 	ret

0004ee00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4ee00:	defff604 	addi	sp,sp,-40
   4ee04:	dfc00915 	stw	ra,36(sp)
   4ee08:	df000815 	stw	fp,32(sp)
   4ee0c:	df000804 	addi	fp,sp,32
   4ee10:	e13ffd15 	stw	r4,-12(fp)
   4ee14:	e17ffe15 	stw	r5,-8(fp)
   4ee18:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4ee1c:	00bfffc4 	movi	r2,-1
   4ee20:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4ee24:	00bffb44 	movi	r2,-19
   4ee28:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4ee2c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4ee30:	e13ffd17 	ldw	r4,-12(fp)
   4ee34:	01400174 	movhi	r5,5
   4ee38:	294df604 	addi	r5,r5,14296
   4ee3c:	0050a480 	call	50a48 <alt_find_dev>
   4ee40:	e0bff815 	stw	r2,-32(fp)
   4ee44:	e0bff817 	ldw	r2,-32(fp)
   4ee48:	1000051e 	bne	r2,zero,4ee60 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4ee4c:	e13ffd17 	ldw	r4,-12(fp)
   4ee50:	0050ad80 	call	50ad8 <alt_find_file>
   4ee54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4ee58:	00800044 	movi	r2,1
   4ee5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4ee60:	e0bff817 	ldw	r2,-32(fp)
   4ee64:	10002926 	beq	r2,zero,4ef0c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4ee68:	e13ff817 	ldw	r4,-32(fp)
   4ee6c:	0050bec0 	call	50bec <alt_get_fd>
   4ee70:	e0bff915 	stw	r2,-28(fp)
   4ee74:	e0bff917 	ldw	r2,-28(fp)
   4ee78:	1000030e 	bge	r2,zero,4ee88 <open+0x88>
    {
      status = index;
   4ee7c:	e0bff917 	ldw	r2,-28(fp)
   4ee80:	e0bffa15 	stw	r2,-24(fp)
   4ee84:	00002306 	br	4ef14 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   4ee88:	e0bff917 	ldw	r2,-28(fp)
   4ee8c:	10c00324 	muli	r3,r2,12
   4ee90:	00800174 	movhi	r2,5
   4ee94:	10893b04 	addi	r2,r2,9452
   4ee98:	1885883a 	add	r2,r3,r2
   4ee9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4eea0:	e0fffe17 	ldw	r3,-8(fp)
   4eea4:	00900034 	movhi	r2,16384
   4eea8:	10bfffc4 	addi	r2,r2,-1
   4eeac:	1886703a 	and	r3,r3,r2
   4eeb0:	e0bffc17 	ldw	r2,-16(fp)
   4eeb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4eeb8:	e0bffb17 	ldw	r2,-20(fp)
   4eebc:	1000051e 	bne	r2,zero,4eed4 <open+0xd4>
   4eec0:	e13ffc17 	ldw	r4,-16(fp)
   4eec4:	004ed340 	call	4ed34 <alt_file_locked>
   4eec8:	e0bffa15 	stw	r2,-24(fp)
   4eecc:	e0bffa17 	ldw	r2,-24(fp)
   4eed0:	10001016 	blt	r2,zero,4ef14 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4eed4:	e0bff817 	ldw	r2,-32(fp)
   4eed8:	10800317 	ldw	r2,12(r2)
   4eedc:	10000826 	beq	r2,zero,4ef00 <open+0x100>
   4eee0:	e0bff817 	ldw	r2,-32(fp)
   4eee4:	10800317 	ldw	r2,12(r2)
   4eee8:	e13ffc17 	ldw	r4,-16(fp)
   4eeec:	e17ffd17 	ldw	r5,-12(fp)
   4eef0:	e1bffe17 	ldw	r6,-8(fp)
   4eef4:	e1ffff17 	ldw	r7,-4(fp)
   4eef8:	103ee83a 	callr	r2
   4eefc:	00000106 	br	4ef04 <open+0x104>
   4ef00:	0005883a 	mov	r2,zero
   4ef04:	e0bffa15 	stw	r2,-24(fp)
   4ef08:	00000206 	br	4ef14 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4ef0c:	00bffb44 	movi	r2,-19
   4ef10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4ef14:	e0bffa17 	ldw	r2,-24(fp)
   4ef18:	1000080e 	bge	r2,zero,4ef3c <open+0x13c>
  {
    alt_release_fd (index);  
   4ef1c:	e13ff917 	ldw	r4,-28(fp)
   4ef20:	004f0940 	call	4f094 <alt_release_fd>
    ALT_ERRNO = -status;
   4ef24:	004ece40 	call	4ece4 <alt_get_errno>
   4ef28:	e0fffa17 	ldw	r3,-24(fp)
   4ef2c:	00c7c83a 	sub	r3,zero,r3
   4ef30:	10c00015 	stw	r3,0(r2)
    return -1;
   4ef34:	00bfffc4 	movi	r2,-1
   4ef38:	00000106 	br	4ef40 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4ef3c:	e0bff917 	ldw	r2,-28(fp)
}
   4ef40:	e037883a 	mov	sp,fp
   4ef44:	dfc00117 	ldw	ra,4(sp)
   4ef48:	df000017 	ldw	fp,0(sp)
   4ef4c:	dec00204 	addi	sp,sp,8
   4ef50:	f800283a 	ret

0004ef54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ef54:	defffe04 	addi	sp,sp,-8
   4ef58:	dfc00115 	stw	ra,4(sp)
   4ef5c:	df000015 	stw	fp,0(sp)
   4ef60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ef64:	00800174 	movhi	r2,5
   4ef68:	108df904 	addi	r2,r2,14308
   4ef6c:	10800017 	ldw	r2,0(r2)
   4ef70:	10000526 	beq	r2,zero,4ef88 <alt_get_errno+0x34>
   4ef74:	00800174 	movhi	r2,5
   4ef78:	108df904 	addi	r2,r2,14308
   4ef7c:	10800017 	ldw	r2,0(r2)
   4ef80:	103ee83a 	callr	r2
   4ef84:	00000206 	br	4ef90 <alt_get_errno+0x3c>
   4ef88:	00800174 	movhi	r2,5
   4ef8c:	10950c04 	addi	r2,r2,21552
}
   4ef90:	e037883a 	mov	sp,fp
   4ef94:	dfc00117 	ldw	ra,4(sp)
   4ef98:	df000017 	ldw	fp,0(sp)
   4ef9c:	dec00204 	addi	sp,sp,8
   4efa0:	f800283a 	ret

0004efa4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4efa4:	defff904 	addi	sp,sp,-28
   4efa8:	dfc00615 	stw	ra,24(sp)
   4efac:	df000515 	stw	fp,20(sp)
   4efb0:	df000504 	addi	fp,sp,20
   4efb4:	e13ffd15 	stw	r4,-12(fp)
   4efb8:	e17ffe15 	stw	r5,-8(fp)
   4efbc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4efc0:	e0bffd17 	ldw	r2,-12(fp)
   4efc4:	10000616 	blt	r2,zero,4efe0 <read+0x3c>
   4efc8:	e0bffd17 	ldw	r2,-12(fp)
   4efcc:	10c00324 	muli	r3,r2,12
   4efd0:	00800174 	movhi	r2,5
   4efd4:	10893b04 	addi	r2,r2,9452
   4efd8:	1885883a 	add	r2,r3,r2
   4efdc:	00000106 	br	4efe4 <read+0x40>
   4efe0:	0005883a 	mov	r2,zero
   4efe4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4efe8:	e0bffb17 	ldw	r2,-20(fp)
   4efec:	10002026 	beq	r2,zero,4f070 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4eff0:	e0bffb17 	ldw	r2,-20(fp)
   4eff4:	10800217 	ldw	r2,8(r2)
   4eff8:	108000cc 	andi	r2,r2,3
   4effc:	10800060 	cmpeqi	r2,r2,1
   4f000:	1000171e 	bne	r2,zero,4f060 <read+0xbc>
        (fd->dev->read))
   4f004:	e0bffb17 	ldw	r2,-20(fp)
   4f008:	10800017 	ldw	r2,0(r2)
   4f00c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4f010:	10001326 	beq	r2,zero,4f060 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4f014:	e0bffb17 	ldw	r2,-20(fp)
   4f018:	10800017 	ldw	r2,0(r2)
   4f01c:	10c00517 	ldw	r3,20(r2)
   4f020:	e0bfff17 	ldw	r2,-4(fp)
   4f024:	e13ffb17 	ldw	r4,-20(fp)
   4f028:	e17ffe17 	ldw	r5,-8(fp)
   4f02c:	100d883a 	mov	r6,r2
   4f030:	183ee83a 	callr	r3
   4f034:	e0bffc15 	stw	r2,-16(fp)
   4f038:	e0bffc17 	ldw	r2,-16(fp)
   4f03c:	1000060e 	bge	r2,zero,4f058 <read+0xb4>
        {
          ALT_ERRNO = -rval;
   4f040:	004ef540 	call	4ef54 <alt_get_errno>
   4f044:	e0fffc17 	ldw	r3,-16(fp)
   4f048:	00c7c83a 	sub	r3,zero,r3
   4f04c:	10c00015 	stw	r3,0(r2)
          return -1;
   4f050:	00bfffc4 	movi	r2,-1
   4f054:	00000a06 	br	4f080 <read+0xdc>
        }
        return rval;
   4f058:	e0bffc17 	ldw	r2,-16(fp)
   4f05c:	00000806 	br	4f080 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4f060:	004ef540 	call	4ef54 <alt_get_errno>
   4f064:	00c00344 	movi	r3,13
   4f068:	10c00015 	stw	r3,0(r2)
   4f06c:	00000306 	br	4f07c <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4f070:	004ef540 	call	4ef54 <alt_get_errno>
   4f074:	00c01444 	movi	r3,81
   4f078:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4f07c:	00bfffc4 	movi	r2,-1
}
   4f080:	e037883a 	mov	sp,fp
   4f084:	dfc00117 	ldw	ra,4(sp)
   4f088:	df000017 	ldw	fp,0(sp)
   4f08c:	dec00204 	addi	sp,sp,8
   4f090:	f800283a 	ret

0004f094 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4f094:	defffe04 	addi	sp,sp,-8
   4f098:	df000115 	stw	fp,4(sp)
   4f09c:	df000104 	addi	fp,sp,4
   4f0a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4f0a4:	e0bfff17 	ldw	r2,-4(fp)
   4f0a8:	108000d0 	cmplti	r2,r2,3
   4f0ac:	10000d1e 	bne	r2,zero,4f0e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4f0b0:	00c00174 	movhi	r3,5
   4f0b4:	18c93b04 	addi	r3,r3,9452
   4f0b8:	e0bfff17 	ldw	r2,-4(fp)
   4f0bc:	10800324 	muli	r2,r2,12
   4f0c0:	1885883a 	add	r2,r3,r2
   4f0c4:	10800204 	addi	r2,r2,8
   4f0c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4f0cc:	00c00174 	movhi	r3,5
   4f0d0:	18c93b04 	addi	r3,r3,9452
   4f0d4:	e0bfff17 	ldw	r2,-4(fp)
   4f0d8:	10800324 	muli	r2,r2,12
   4f0dc:	1885883a 	add	r2,r3,r2
   4f0e0:	10000015 	stw	zero,0(r2)
  }
}
   4f0e4:	e037883a 	mov	sp,fp
   4f0e8:	df000017 	ldw	fp,0(sp)
   4f0ec:	dec00104 	addi	sp,sp,4
   4f0f0:	f800283a 	ret

0004f0f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4f0f4:	defff904 	addi	sp,sp,-28
   4f0f8:	df000615 	stw	fp,24(sp)
   4f0fc:	df000604 	addi	fp,sp,24
   4f100:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f104:	0005303a 	rdctl	r2,status
   4f108:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f10c:	e0fffc17 	ldw	r3,-16(fp)
   4f110:	00bfff84 	movi	r2,-2
   4f114:	1884703a 	and	r2,r3,r2
   4f118:	1001703a 	wrctl	status,r2
  
  return context;
   4f11c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4f120:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4f124:	d0a01717 	ldw	r2,-32676(gp)
   4f128:	10c000c4 	addi	r3,r2,3
   4f12c:	00bfff04 	movi	r2,-4
   4f130:	1884703a 	and	r2,r3,r2
   4f134:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4f138:	d0e01717 	ldw	r3,-32676(gp)
   4f13c:	e0bfff17 	ldw	r2,-4(fp)
   4f140:	1885883a 	add	r2,r3,r2
   4f144:	00c001f4 	movhi	r3,7
   4f148:	18c80004 	addi	r3,r3,8192
   4f14c:	1880062e 	bgeu	r3,r2,4f168 <sbrk+0x74>
   4f150:	e0bffa17 	ldw	r2,-24(fp)
   4f154:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f158:	e0bffd17 	ldw	r2,-12(fp)
   4f15c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4f160:	00bfffc4 	movi	r2,-1
   4f164:	00000b06 	br	4f194 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4f168:	d0a01717 	ldw	r2,-32676(gp)
   4f16c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4f170:	d0e01717 	ldw	r3,-32676(gp)
   4f174:	e0bfff17 	ldw	r2,-4(fp)
   4f178:	1885883a 	add	r2,r3,r2
   4f17c:	d0a01715 	stw	r2,-32676(gp)
   4f180:	e0bffa17 	ldw	r2,-24(fp)
   4f184:	e0bffe15 	stw	r2,-8(fp)
   4f188:	e0bffe17 	ldw	r2,-8(fp)
   4f18c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4f190:	e0bffb17 	ldw	r2,-20(fp)
} 
   4f194:	e037883a 	mov	sp,fp
   4f198:	df000017 	ldw	fp,0(sp)
   4f19c:	dec00104 	addi	sp,sp,4
   4f1a0:	f800283a 	ret

0004f1a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f1a4:	defffe04 	addi	sp,sp,-8
   4f1a8:	dfc00115 	stw	ra,4(sp)
   4f1ac:	df000015 	stw	fp,0(sp)
   4f1b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f1b4:	00800174 	movhi	r2,5
   4f1b8:	108df904 	addi	r2,r2,14308
   4f1bc:	10800017 	ldw	r2,0(r2)
   4f1c0:	10000526 	beq	r2,zero,4f1d8 <alt_get_errno+0x34>
   4f1c4:	00800174 	movhi	r2,5
   4f1c8:	108df904 	addi	r2,r2,14308
   4f1cc:	10800017 	ldw	r2,0(r2)
   4f1d0:	103ee83a 	callr	r2
   4f1d4:	00000206 	br	4f1e0 <alt_get_errno+0x3c>
   4f1d8:	00800174 	movhi	r2,5
   4f1dc:	10950c04 	addi	r2,r2,21552
}
   4f1e0:	e037883a 	mov	sp,fp
   4f1e4:	dfc00117 	ldw	ra,4(sp)
   4f1e8:	df000017 	ldw	fp,0(sp)
   4f1ec:	dec00204 	addi	sp,sp,8
   4f1f0:	f800283a 	ret

0004f1f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4f1f4:	defff904 	addi	sp,sp,-28
   4f1f8:	dfc00615 	stw	ra,24(sp)
   4f1fc:	df000515 	stw	fp,20(sp)
   4f200:	df000504 	addi	fp,sp,20
   4f204:	e13ffd15 	stw	r4,-12(fp)
   4f208:	e17ffe15 	stw	r5,-8(fp)
   4f20c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4f210:	e0bffd17 	ldw	r2,-12(fp)
   4f214:	10000616 	blt	r2,zero,4f230 <write+0x3c>
   4f218:	e0bffd17 	ldw	r2,-12(fp)
   4f21c:	10c00324 	muli	r3,r2,12
   4f220:	00800174 	movhi	r2,5
   4f224:	10893b04 	addi	r2,r2,9452
   4f228:	1885883a 	add	r2,r3,r2
   4f22c:	00000106 	br	4f234 <write+0x40>
   4f230:	0005883a 	mov	r2,zero
   4f234:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4f238:	e0bffb17 	ldw	r2,-20(fp)
   4f23c:	10001f26 	beq	r2,zero,4f2bc <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4f240:	e0bffb17 	ldw	r2,-20(fp)
   4f244:	10800217 	ldw	r2,8(r2)
   4f248:	108000cc 	andi	r2,r2,3
   4f24c:	10001726 	beq	r2,zero,4f2ac <write+0xb8>
   4f250:	e0bffb17 	ldw	r2,-20(fp)
   4f254:	10800017 	ldw	r2,0(r2)
   4f258:	10800617 	ldw	r2,24(r2)
   4f25c:	10001326 	beq	r2,zero,4f2ac <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4f260:	e0bffb17 	ldw	r2,-20(fp)
   4f264:	10800017 	ldw	r2,0(r2)
   4f268:	10c00617 	ldw	r3,24(r2)
   4f26c:	e0bfff17 	ldw	r2,-4(fp)
   4f270:	e13ffb17 	ldw	r4,-20(fp)
   4f274:	e17ffe17 	ldw	r5,-8(fp)
   4f278:	100d883a 	mov	r6,r2
   4f27c:	183ee83a 	callr	r3
   4f280:	e0bffc15 	stw	r2,-16(fp)
   4f284:	e0bffc17 	ldw	r2,-16(fp)
   4f288:	1000060e 	bge	r2,zero,4f2a4 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   4f28c:	004f1a40 	call	4f1a4 <alt_get_errno>
   4f290:	e0fffc17 	ldw	r3,-16(fp)
   4f294:	00c7c83a 	sub	r3,zero,r3
   4f298:	10c00015 	stw	r3,0(r2)
        return -1;
   4f29c:	00bfffc4 	movi	r2,-1
   4f2a0:	00000a06 	br	4f2cc <write+0xd8>
      }
      return rval;
   4f2a4:	e0bffc17 	ldw	r2,-16(fp)
   4f2a8:	00000806 	br	4f2cc <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4f2ac:	004f1a40 	call	4f1a4 <alt_get_errno>
   4f2b0:	00c00344 	movi	r3,13
   4f2b4:	10c00015 	stw	r3,0(r2)
   4f2b8:	00000306 	br	4f2c8 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4f2bc:	004f1a40 	call	4f1a4 <alt_get_errno>
   4f2c0:	00c01444 	movi	r3,81
   4f2c4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4f2c8:	00bfffc4 	movi	r2,-1
}
   4f2cc:	e037883a 	mov	sp,fp
   4f2d0:	dfc00117 	ldw	ra,4(sp)
   4f2d4:	df000017 	ldw	fp,0(sp)
   4f2d8:	dec00204 	addi	sp,sp,8
   4f2dc:	f800283a 	ret

0004f2e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4f2e0:	defffd04 	addi	sp,sp,-12
   4f2e4:	dfc00215 	stw	ra,8(sp)
   4f2e8:	df000115 	stw	fp,4(sp)
   4f2ec:	df000104 	addi	fp,sp,4
   4f2f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4f2f4:	e13fff17 	ldw	r4,-4(fp)
   4f2f8:	01400174 	movhi	r5,5
   4f2fc:	294df604 	addi	r5,r5,14296
   4f300:	00508f00 	call	508f0 <alt_dev_llist_insert>
}
   4f304:	e037883a 	mov	sp,fp
   4f308:	dfc00117 	ldw	ra,4(sp)
   4f30c:	df000017 	ldw	fp,0(sp)
   4f310:	dec00204 	addi	sp,sp,8
   4f314:	f800283a 	ret

0004f318 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4f318:	defffd04 	addi	sp,sp,-12
   4f31c:	dfc00215 	stw	ra,8(sp)
   4f320:	df000115 	stw	fp,4(sp)
   4f324:	df000104 	addi	fp,sp,4
   4f328:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4f32c:	005126c0 	call	5126c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4f330:	00800044 	movi	r2,1
   4f334:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4f338:	e037883a 	mov	sp,fp
   4f33c:	dfc00117 	ldw	ra,4(sp)
   4f340:	df000017 	ldw	fp,0(sp)
   4f344:	dec00204 	addi	sp,sp,8
   4f348:	f800283a 	ret

0004f34c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4f34c:	defffe04 	addi	sp,sp,-8
   4f350:	dfc00115 	stw	ra,4(sp)
   4f354:	df000015 	stw	fp,0(sp)
   4f358:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4f35c:	01000174 	movhi	r4,5
   4f360:	2109a504 	addi	r4,r4,9876
   4f364:	000b883a 	mov	r5,zero
   4f368:	000d883a 	mov	r6,zero
   4f36c:	004f5180 	call	4f518 <altera_avalon_jtag_uart_init>
   4f370:	01000174 	movhi	r4,5
   4f374:	21099b04 	addi	r4,r4,9836
   4f378:	004f2e00 	call	4f2e0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   4f37c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   4f380:	01000174 	movhi	r4,5
   4f384:	210dbd04 	addi	r4,r4,14068
   4f388:	000b883a 	mov	r5,zero
   4f38c:	01800044 	movi	r6,1
   4f390:	004ff280 	call	4ff28 <altera_avalon_uart_init>
   4f394:	01000174 	movhi	r4,5
   4f398:	210db304 	addi	r4,r4,14028
   4f39c:	004f2e00 	call	4f2e0 <alt_dev_reg>
}
   4f3a0:	e037883a 	mov	sp,fp
   4f3a4:	dfc00117 	ldw	ra,4(sp)
   4f3a8:	df000017 	ldw	fp,0(sp)
   4f3ac:	dec00204 	addi	sp,sp,8
   4f3b0:	f800283a 	ret

0004f3b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4f3b4:	defffa04 	addi	sp,sp,-24
   4f3b8:	dfc00515 	stw	ra,20(sp)
   4f3bc:	df000415 	stw	fp,16(sp)
   4f3c0:	df000404 	addi	fp,sp,16
   4f3c4:	e13ffd15 	stw	r4,-12(fp)
   4f3c8:	e17ffe15 	stw	r5,-8(fp)
   4f3cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f3d0:	e0bffd17 	ldw	r2,-12(fp)
   4f3d4:	10800017 	ldw	r2,0(r2)
   4f3d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4f3dc:	e0bffc17 	ldw	r2,-16(fp)
   4f3e0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4f3e4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4f3e8:	10800217 	ldw	r2,8(r2)
   4f3ec:	1809883a 	mov	r4,r3
   4f3f0:	e17ffe17 	ldw	r5,-8(fp)
   4f3f4:	e1bfff17 	ldw	r6,-4(fp)
   4f3f8:	100f883a 	mov	r7,r2
   4f3fc:	004f9dc0 	call	4f9dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4f400:	e037883a 	mov	sp,fp
   4f404:	dfc00117 	ldw	ra,4(sp)
   4f408:	df000017 	ldw	fp,0(sp)
   4f40c:	dec00204 	addi	sp,sp,8
   4f410:	f800283a 	ret

0004f414 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4f414:	defffa04 	addi	sp,sp,-24
   4f418:	dfc00515 	stw	ra,20(sp)
   4f41c:	df000415 	stw	fp,16(sp)
   4f420:	df000404 	addi	fp,sp,16
   4f424:	e13ffd15 	stw	r4,-12(fp)
   4f428:	e17ffe15 	stw	r5,-8(fp)
   4f42c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f430:	e0bffd17 	ldw	r2,-12(fp)
   4f434:	10800017 	ldw	r2,0(r2)
   4f438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4f43c:	e0bffc17 	ldw	r2,-16(fp)
   4f440:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4f444:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4f448:	10800217 	ldw	r2,8(r2)
   4f44c:	1809883a 	mov	r4,r3
   4f450:	e17ffe17 	ldw	r5,-8(fp)
   4f454:	e1bfff17 	ldw	r6,-4(fp)
   4f458:	100f883a 	mov	r7,r2
   4f45c:	004fbf40 	call	4fbf4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4f460:	e037883a 	mov	sp,fp
   4f464:	dfc00117 	ldw	ra,4(sp)
   4f468:	df000017 	ldw	fp,0(sp)
   4f46c:	dec00204 	addi	sp,sp,8
   4f470:	f800283a 	ret

0004f474 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4f474:	defffc04 	addi	sp,sp,-16
   4f478:	dfc00315 	stw	ra,12(sp)
   4f47c:	df000215 	stw	fp,8(sp)
   4f480:	df000204 	addi	fp,sp,8
   4f484:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f488:	e0bfff17 	ldw	r2,-4(fp)
   4f48c:	10800017 	ldw	r2,0(r2)
   4f490:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4f494:	e0bffe17 	ldw	r2,-8(fp)
   4f498:	10c00a04 	addi	r3,r2,40
   4f49c:	e0bfff17 	ldw	r2,-4(fp)
   4f4a0:	10800217 	ldw	r2,8(r2)
   4f4a4:	1809883a 	mov	r4,r3
   4f4a8:	100b883a 	mov	r5,r2
   4f4ac:	004f8800 	call	4f880 <altera_avalon_jtag_uart_close>
}
   4f4b0:	e037883a 	mov	sp,fp
   4f4b4:	dfc00117 	ldw	ra,4(sp)
   4f4b8:	df000017 	ldw	fp,0(sp)
   4f4bc:	dec00204 	addi	sp,sp,8
   4f4c0:	f800283a 	ret

0004f4c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4f4c4:	defffa04 	addi	sp,sp,-24
   4f4c8:	dfc00515 	stw	ra,20(sp)
   4f4cc:	df000415 	stw	fp,16(sp)
   4f4d0:	df000404 	addi	fp,sp,16
   4f4d4:	e13ffd15 	stw	r4,-12(fp)
   4f4d8:	e17ffe15 	stw	r5,-8(fp)
   4f4dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4f4e0:	e0bffd17 	ldw	r2,-12(fp)
   4f4e4:	10800017 	ldw	r2,0(r2)
   4f4e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4f4ec:	e0bffc17 	ldw	r2,-16(fp)
   4f4f0:	10800a04 	addi	r2,r2,40
   4f4f4:	1009883a 	mov	r4,r2
   4f4f8:	e17ffe17 	ldw	r5,-8(fp)
   4f4fc:	e1bfff17 	ldw	r6,-4(fp)
   4f500:	004f8e80 	call	4f8e8 <altera_avalon_jtag_uart_ioctl>
}
   4f504:	e037883a 	mov	sp,fp
   4f508:	dfc00117 	ldw	ra,4(sp)
   4f50c:	df000017 	ldw	fp,0(sp)
   4f510:	dec00204 	addi	sp,sp,8
   4f514:	f800283a 	ret

0004f518 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4f518:	defffa04 	addi	sp,sp,-24
   4f51c:	dfc00515 	stw	ra,20(sp)
   4f520:	df000415 	stw	fp,16(sp)
   4f524:	df000404 	addi	fp,sp,16
   4f528:	e13ffd15 	stw	r4,-12(fp)
   4f52c:	e17ffe15 	stw	r5,-8(fp)
   4f530:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f534:	e0bffd17 	ldw	r2,-12(fp)
   4f538:	00c00044 	movi	r3,1
   4f53c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4f540:	e0bffd17 	ldw	r2,-12(fp)
   4f544:	10800017 	ldw	r2,0(r2)
   4f548:	10800104 	addi	r2,r2,4
   4f54c:	e0fffd17 	ldw	r3,-12(fp)
   4f550:	18c00817 	ldw	r3,32(r3)
   4f554:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4f558:	e0fffe17 	ldw	r3,-8(fp)
   4f55c:	e0bfff17 	ldw	r2,-4(fp)
   4f560:	d8000015 	stw	zero,0(sp)
   4f564:	1809883a 	mov	r4,r3
   4f568:	100b883a 	mov	r5,r2
   4f56c:	01800174 	movhi	r6,5
   4f570:	31bd7604 	addi	r6,r6,-2600
   4f574:	e1fffd17 	ldw	r7,-12(fp)
   4f578:	0050cd00 	call	50cd0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4f57c:	e0bffd17 	ldw	r2,-12(fp)
   4f580:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4f584:	e0bffd17 	ldw	r2,-12(fp)
   4f588:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4f58c:	00800174 	movhi	r2,5
   4f590:	10951104 	addi	r2,r2,21572
   4f594:	10800017 	ldw	r2,0(r2)
   4f598:	1809883a 	mov	r4,r3
   4f59c:	100b883a 	mov	r5,r2
   4f5a0:	01800174 	movhi	r6,5
   4f5a4:	31bdf704 	addi	r6,r6,-2084
   4f5a8:	e1fffd17 	ldw	r7,-12(fp)
   4f5ac:	005071c0 	call	5071c <alt_alarm_start>
   4f5b0:	1000040e 	bge	r2,zero,4f5c4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4f5b4:	e0bffd17 	ldw	r2,-12(fp)
   4f5b8:	00e00034 	movhi	r3,32768
   4f5bc:	18ffffc4 	addi	r3,r3,-1
   4f5c0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4f5c4:	e037883a 	mov	sp,fp
   4f5c8:	dfc00117 	ldw	ra,4(sp)
   4f5cc:	df000017 	ldw	fp,0(sp)
   4f5d0:	dec00204 	addi	sp,sp,8
   4f5d4:	f800283a 	ret

0004f5d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4f5d8:	defff804 	addi	sp,sp,-32
   4f5dc:	df000715 	stw	fp,28(sp)
   4f5e0:	df000704 	addi	fp,sp,28
   4f5e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4f5e8:	e0bfff17 	ldw	r2,-4(fp)
   4f5ec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4f5f0:	e0bffb17 	ldw	r2,-20(fp)
   4f5f4:	10800017 	ldw	r2,0(r2)
   4f5f8:	e0bffc15 	stw	r2,-16(fp)
   4f5fc:	00000106 	br	4f604 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4f600:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f604:	e0bffc17 	ldw	r2,-16(fp)
   4f608:	10800104 	addi	r2,r2,4
   4f60c:	10800037 	ldwio	r2,0(r2)
   4f610:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4f614:	e0bffd17 	ldw	r2,-12(fp)
   4f618:	1080c00c 	andi	r2,r2,768
   4f61c:	10006a26 	beq	r2,zero,4f7c8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4f620:	e0bffd17 	ldw	r2,-12(fp)
   4f624:	1080400c 	andi	r2,r2,256
   4f628:	10003326 	beq	r2,zero,4f6f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4f62c:	00800074 	movhi	r2,1
   4f630:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f634:	e0bffb17 	ldw	r2,-20(fp)
   4f638:	10800a17 	ldw	r2,40(r2)
   4f63c:	10800044 	addi	r2,r2,1
   4f640:	1081ffcc 	andi	r2,r2,2047
   4f644:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4f648:	e0bffb17 	ldw	r2,-20(fp)
   4f64c:	10c00b17 	ldw	r3,44(r2)
   4f650:	e0bffe17 	ldw	r2,-8(fp)
   4f654:	18801426 	beq	r3,r2,4f6a8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4f658:	e0bffc17 	ldw	r2,-16(fp)
   4f65c:	10800037 	ldwio	r2,0(r2)
   4f660:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4f664:	e0bff917 	ldw	r2,-28(fp)
   4f668:	10a0000c 	andi	r2,r2,32768
   4f66c:	10001026 	beq	r2,zero,4f6b0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4f670:	e0bffb17 	ldw	r2,-20(fp)
   4f674:	10800a17 	ldw	r2,40(r2)
   4f678:	e0fff917 	ldw	r3,-28(fp)
   4f67c:	e13ffb17 	ldw	r4,-20(fp)
   4f680:	2085883a 	add	r2,r4,r2
   4f684:	10800e04 	addi	r2,r2,56
   4f688:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f68c:	e0bffb17 	ldw	r2,-20(fp)
   4f690:	10800a17 	ldw	r2,40(r2)
   4f694:	10800044 	addi	r2,r2,1
   4f698:	10c1ffcc 	andi	r3,r2,2047
   4f69c:	e0bffb17 	ldw	r2,-20(fp)
   4f6a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4f6a4:	003fe306 	br	4f634 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4f6a8:	0001883a 	nop
   4f6ac:	00000106 	br	4f6b4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4f6b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4f6b4:	e0bff917 	ldw	r2,-28(fp)
   4f6b8:	10bfffec 	andhi	r2,r2,65535
   4f6bc:	10000e26 	beq	r2,zero,4f6f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f6c0:	e0bffb17 	ldw	r2,-20(fp)
   4f6c4:	10c00817 	ldw	r3,32(r2)
   4f6c8:	00bfff84 	movi	r2,-2
   4f6cc:	1886703a 	and	r3,r3,r2
   4f6d0:	e0bffb17 	ldw	r2,-20(fp)
   4f6d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4f6d8:	e0bffc17 	ldw	r2,-16(fp)
   4f6dc:	10800104 	addi	r2,r2,4
   4f6e0:	e0fffb17 	ldw	r3,-20(fp)
   4f6e4:	18c00817 	ldw	r3,32(r3)
   4f6e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f6ec:	e0bffc17 	ldw	r2,-16(fp)
   4f6f0:	10800104 	addi	r2,r2,4
   4f6f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4f6f8:	e0bffd17 	ldw	r2,-12(fp)
   4f6fc:	1080800c 	andi	r2,r2,512
   4f700:	103fbf26 	beq	r2,zero,4f600 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4f704:	e0bffd17 	ldw	r2,-12(fp)
   4f708:	1004d43a 	srli	r2,r2,16
   4f70c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4f710:	00001406 	br	4f764 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4f714:	e0bffc17 	ldw	r2,-16(fp)
   4f718:	e0fffb17 	ldw	r3,-20(fp)
   4f71c:	18c00d17 	ldw	r3,52(r3)
   4f720:	e13ffb17 	ldw	r4,-20(fp)
   4f724:	20c7883a 	add	r3,r4,r3
   4f728:	18c20e04 	addi	r3,r3,2104
   4f72c:	18c00003 	ldbu	r3,0(r3)
   4f730:	18c03fcc 	andi	r3,r3,255
   4f734:	18c0201c 	xori	r3,r3,128
   4f738:	18ffe004 	addi	r3,r3,-128
   4f73c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f740:	e0bffb17 	ldw	r2,-20(fp)
   4f744:	10800d17 	ldw	r2,52(r2)
   4f748:	10800044 	addi	r2,r2,1
   4f74c:	10c1ffcc 	andi	r3,r2,2047
   4f750:	e0bffb17 	ldw	r2,-20(fp)
   4f754:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4f758:	e0bffa17 	ldw	r2,-24(fp)
   4f75c:	10bfffc4 	addi	r2,r2,-1
   4f760:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4f764:	e0bffa17 	ldw	r2,-24(fp)
   4f768:	10000526 	beq	r2,zero,4f780 <altera_avalon_jtag_uart_irq+0x1a8>
   4f76c:	e0bffb17 	ldw	r2,-20(fp)
   4f770:	10c00d17 	ldw	r3,52(r2)
   4f774:	e0bffb17 	ldw	r2,-20(fp)
   4f778:	10800c17 	ldw	r2,48(r2)
   4f77c:	18bfe51e 	bne	r3,r2,4f714 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4f780:	e0bffa17 	ldw	r2,-24(fp)
   4f784:	103f9e26 	beq	r2,zero,4f600 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4f788:	e0bffb17 	ldw	r2,-20(fp)
   4f78c:	10c00817 	ldw	r3,32(r2)
   4f790:	00bfff44 	movi	r2,-3
   4f794:	1886703a 	and	r3,r3,r2
   4f798:	e0bffb17 	ldw	r2,-20(fp)
   4f79c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4f7a0:	e0bffb17 	ldw	r2,-20(fp)
   4f7a4:	10800017 	ldw	r2,0(r2)
   4f7a8:	10800104 	addi	r2,r2,4
   4f7ac:	e0fffb17 	ldw	r3,-20(fp)
   4f7b0:	18c00817 	ldw	r3,32(r3)
   4f7b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f7b8:	e0bffc17 	ldw	r2,-16(fp)
   4f7bc:	10800104 	addi	r2,r2,4
   4f7c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4f7c4:	003f8e06 	br	4f600 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4f7c8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4f7cc:	e037883a 	mov	sp,fp
   4f7d0:	df000017 	ldw	fp,0(sp)
   4f7d4:	dec00104 	addi	sp,sp,4
   4f7d8:	f800283a 	ret

0004f7dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4f7dc:	defffc04 	addi	sp,sp,-16
   4f7e0:	df000315 	stw	fp,12(sp)
   4f7e4:	df000304 	addi	fp,sp,12
   4f7e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4f7ec:	e0bfff17 	ldw	r2,-4(fp)
   4f7f0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4f7f4:	e0bffd17 	ldw	r2,-12(fp)
   4f7f8:	10800017 	ldw	r2,0(r2)
   4f7fc:	10800104 	addi	r2,r2,4
   4f800:	10800037 	ldwio	r2,0(r2)
   4f804:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4f808:	e0bffe17 	ldw	r2,-8(fp)
   4f80c:	1081000c 	andi	r2,r2,1024
   4f810:	10000a26 	beq	r2,zero,4f83c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4f814:	e0bffd17 	ldw	r2,-12(fp)
   4f818:	10800017 	ldw	r2,0(r2)
   4f81c:	10800104 	addi	r2,r2,4
   4f820:	e0fffd17 	ldw	r3,-12(fp)
   4f824:	18c00817 	ldw	r3,32(r3)
   4f828:	18c10014 	ori	r3,r3,1024
   4f82c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4f830:	e0bffd17 	ldw	r2,-12(fp)
   4f834:	10000915 	stw	zero,36(r2)
   4f838:	00000a06 	br	4f864 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4f83c:	e0bffd17 	ldw	r2,-12(fp)
   4f840:	10800917 	ldw	r2,36(r2)
   4f844:	00e00034 	movhi	r3,32768
   4f848:	18ffff04 	addi	r3,r3,-4
   4f84c:	18800536 	bltu	r3,r2,4f864 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4f850:	e0bffd17 	ldw	r2,-12(fp)
   4f854:	10800917 	ldw	r2,36(r2)
   4f858:	10c00044 	addi	r3,r2,1
   4f85c:	e0bffd17 	ldw	r2,-12(fp)
   4f860:	10c00915 	stw	r3,36(r2)
   4f864:	00800174 	movhi	r2,5
   4f868:	10951104 	addi	r2,r2,21572
   4f86c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4f870:	e037883a 	mov	sp,fp
   4f874:	df000017 	ldw	fp,0(sp)
   4f878:	dec00104 	addi	sp,sp,4
   4f87c:	f800283a 	ret

0004f880 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4f880:	defffd04 	addi	sp,sp,-12
   4f884:	df000215 	stw	fp,8(sp)
   4f888:	df000204 	addi	fp,sp,8
   4f88c:	e13ffe15 	stw	r4,-8(fp)
   4f890:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4f894:	00000506 	br	4f8ac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4f898:	e0bfff17 	ldw	r2,-4(fp)
   4f89c:	1090000c 	andi	r2,r2,16384
   4f8a0:	10000226 	beq	r2,zero,4f8ac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4f8a4:	00bffd44 	movi	r2,-11
   4f8a8:	00000b06 	br	4f8d8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4f8ac:	e0bffe17 	ldw	r2,-8(fp)
   4f8b0:	10c00d17 	ldw	r3,52(r2)
   4f8b4:	e0bffe17 	ldw	r2,-8(fp)
   4f8b8:	10800c17 	ldw	r2,48(r2)
   4f8bc:	18800526 	beq	r3,r2,4f8d4 <altera_avalon_jtag_uart_close+0x54>
   4f8c0:	e0bffe17 	ldw	r2,-8(fp)
   4f8c4:	10c00917 	ldw	r3,36(r2)
   4f8c8:	e0bffe17 	ldw	r2,-8(fp)
   4f8cc:	10800117 	ldw	r2,4(r2)
   4f8d0:	18bff136 	bltu	r3,r2,4f898 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4f8d4:	0005883a 	mov	r2,zero
}
   4f8d8:	e037883a 	mov	sp,fp
   4f8dc:	df000017 	ldw	fp,0(sp)
   4f8e0:	dec00104 	addi	sp,sp,4
   4f8e4:	f800283a 	ret

0004f8e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4f8e8:	defffa04 	addi	sp,sp,-24
   4f8ec:	df000515 	stw	fp,20(sp)
   4f8f0:	df000504 	addi	fp,sp,20
   4f8f4:	e13ffd15 	stw	r4,-12(fp)
   4f8f8:	e17ffe15 	stw	r5,-8(fp)
   4f8fc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4f900:	00bff9c4 	movi	r2,-25
   4f904:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4f908:	e0bffe17 	ldw	r2,-8(fp)
   4f90c:	10da8060 	cmpeqi	r3,r2,27137
   4f910:	1800031e 	bne	r3,zero,4f920 <altera_avalon_jtag_uart_ioctl+0x38>
   4f914:	109a80a0 	cmpeqi	r2,r2,27138
   4f918:	1000181e 	bne	r2,zero,4f97c <altera_avalon_jtag_uart_ioctl+0x94>
   4f91c:	00002606 	br	4f9b8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4f920:	e0bffd17 	ldw	r2,-12(fp)
   4f924:	10c00117 	ldw	r3,4(r2)
   4f928:	00a00034 	movhi	r2,32768
   4f92c:	10bfffc4 	addi	r2,r2,-1
   4f930:	18802226 	beq	r3,r2,4f9bc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   4f934:	e0bfff17 	ldw	r2,-4(fp)
   4f938:	10800017 	ldw	r2,0(r2)
   4f93c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4f940:	e0bffc17 	ldw	r2,-16(fp)
   4f944:	10800090 	cmplti	r2,r2,2
   4f948:	1000061e 	bne	r2,zero,4f964 <altera_avalon_jtag_uart_ioctl+0x7c>
   4f94c:	e0fffc17 	ldw	r3,-16(fp)
   4f950:	00a00034 	movhi	r2,32768
   4f954:	10bfffc4 	addi	r2,r2,-1
   4f958:	18800226 	beq	r3,r2,4f964 <altera_avalon_jtag_uart_ioctl+0x7c>
   4f95c:	e0bffc17 	ldw	r2,-16(fp)
   4f960:	00000206 	br	4f96c <altera_avalon_jtag_uart_ioctl+0x84>
   4f964:	00a00034 	movhi	r2,32768
   4f968:	10bfff84 	addi	r2,r2,-2
   4f96c:	e0fffd17 	ldw	r3,-12(fp)
   4f970:	18800115 	stw	r2,4(r3)
      rc = 0;
   4f974:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4f978:	00001006 	br	4f9bc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4f97c:	e0bffd17 	ldw	r2,-12(fp)
   4f980:	10c00117 	ldw	r3,4(r2)
   4f984:	00a00034 	movhi	r2,32768
   4f988:	10bfffc4 	addi	r2,r2,-1
   4f98c:	18800d26 	beq	r3,r2,4f9c4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4f990:	e0bffd17 	ldw	r2,-12(fp)
   4f994:	10c00917 	ldw	r3,36(r2)
   4f998:	e0bffd17 	ldw	r2,-12(fp)
   4f99c:	10800117 	ldw	r2,4(r2)
   4f9a0:	1885803a 	cmpltu	r2,r3,r2
   4f9a4:	10c03fcc 	andi	r3,r2,255
   4f9a8:	e0bfff17 	ldw	r2,-4(fp)
   4f9ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4f9b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4f9b4:	00000306 	br	4f9c4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   4f9b8:	00000306 	br	4f9c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4f9bc:	0001883a 	nop
   4f9c0:	00000106 	br	4f9c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4f9c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4f9c8:	e0bffb17 	ldw	r2,-20(fp)
}
   4f9cc:	e037883a 	mov	sp,fp
   4f9d0:	df000017 	ldw	fp,0(sp)
   4f9d4:	dec00104 	addi	sp,sp,4
   4f9d8:	f800283a 	ret

0004f9dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4f9dc:	defff304 	addi	sp,sp,-52
   4f9e0:	dfc00c15 	stw	ra,48(sp)
   4f9e4:	df000b15 	stw	fp,44(sp)
   4f9e8:	df000b04 	addi	fp,sp,44
   4f9ec:	e13ffc15 	stw	r4,-16(fp)
   4f9f0:	e17ffd15 	stw	r5,-12(fp)
   4f9f4:	e1bffe15 	stw	r6,-8(fp)
   4f9f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4f9fc:	e0bffd17 	ldw	r2,-12(fp)
   4fa00:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4fa04:	00004706 	br	4fb24 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4fa08:	e0bffc17 	ldw	r2,-16(fp)
   4fa0c:	10800a17 	ldw	r2,40(r2)
   4fa10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4fa14:	e0bffc17 	ldw	r2,-16(fp)
   4fa18:	10800b17 	ldw	r2,44(r2)
   4fa1c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4fa20:	e0fff717 	ldw	r3,-36(fp)
   4fa24:	e0bff817 	ldw	r2,-32(fp)
   4fa28:	18800536 	bltu	r3,r2,4fa40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4fa2c:	e0fff717 	ldw	r3,-36(fp)
   4fa30:	e0bff817 	ldw	r2,-32(fp)
   4fa34:	1885c83a 	sub	r2,r3,r2
   4fa38:	e0bff615 	stw	r2,-40(fp)
   4fa3c:	00000406 	br	4fa50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4fa40:	00c20004 	movi	r3,2048
   4fa44:	e0bff817 	ldw	r2,-32(fp)
   4fa48:	1885c83a 	sub	r2,r3,r2
   4fa4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4fa50:	e0bff617 	ldw	r2,-40(fp)
   4fa54:	10001e26 	beq	r2,zero,4fad0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4fa58:	e0fffe17 	ldw	r3,-8(fp)
   4fa5c:	e0bff617 	ldw	r2,-40(fp)
   4fa60:	1880022e 	bgeu	r3,r2,4fa6c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4fa64:	e0bffe17 	ldw	r2,-8(fp)
   4fa68:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4fa6c:	e0bff817 	ldw	r2,-32(fp)
   4fa70:	10800e04 	addi	r2,r2,56
   4fa74:	e0fffc17 	ldw	r3,-16(fp)
   4fa78:	1885883a 	add	r2,r3,r2
   4fa7c:	e13ff517 	ldw	r4,-44(fp)
   4fa80:	100b883a 	mov	r5,r2
   4fa84:	e1bff617 	ldw	r6,-40(fp)
   4fa88:	004b84c0 	call	4b84c <memcpy>
      ptr   += n;
   4fa8c:	e0fff517 	ldw	r3,-44(fp)
   4fa90:	e0bff617 	ldw	r2,-40(fp)
   4fa94:	1885883a 	add	r2,r3,r2
   4fa98:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4fa9c:	e0fffe17 	ldw	r3,-8(fp)
   4faa0:	e0bff617 	ldw	r2,-40(fp)
   4faa4:	1885c83a 	sub	r2,r3,r2
   4faa8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4faac:	e0fff817 	ldw	r3,-32(fp)
   4fab0:	e0bff617 	ldw	r2,-40(fp)
   4fab4:	1885883a 	add	r2,r3,r2
   4fab8:	10c1ffcc 	andi	r3,r2,2047
   4fabc:	e0bffc17 	ldw	r2,-16(fp)
   4fac0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4fac4:	e0bffe17 	ldw	r2,-8(fp)
   4fac8:	00bfcf16 	blt	zero,r2,4fa08 <altera_avalon_jtag_uart_read+0x2c>
   4facc:	00000106 	br	4fad4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4fad0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4fad4:	e0fff517 	ldw	r3,-44(fp)
   4fad8:	e0bffd17 	ldw	r2,-12(fp)
   4fadc:	1880141e 	bne	r3,r2,4fb30 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4fae0:	e0bfff17 	ldw	r2,-4(fp)
   4fae4:	1090000c 	andi	r2,r2,16384
   4fae8:	1000131e 	bne	r2,zero,4fb38 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4faec:	0001883a 	nop
   4faf0:	e0bffc17 	ldw	r2,-16(fp)
   4faf4:	10c00a17 	ldw	r3,40(r2)
   4faf8:	e0bff717 	ldw	r2,-36(fp)
   4fafc:	1880051e 	bne	r3,r2,4fb14 <altera_avalon_jtag_uart_read+0x138>
   4fb00:	e0bffc17 	ldw	r2,-16(fp)
   4fb04:	10c00917 	ldw	r3,36(r2)
   4fb08:	e0bffc17 	ldw	r2,-16(fp)
   4fb0c:	10800117 	ldw	r2,4(r2)
   4fb10:	18bff736 	bltu	r3,r2,4faf0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4fb14:	e0bffc17 	ldw	r2,-16(fp)
   4fb18:	10c00a17 	ldw	r3,40(r2)
   4fb1c:	e0bff717 	ldw	r2,-36(fp)
   4fb20:	18800726 	beq	r3,r2,4fb40 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4fb24:	e0bffe17 	ldw	r2,-8(fp)
   4fb28:	00bfb716 	blt	zero,r2,4fa08 <altera_avalon_jtag_uart_read+0x2c>
   4fb2c:	00000506 	br	4fb44 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4fb30:	0001883a 	nop
   4fb34:	00000306 	br	4fb44 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4fb38:	0001883a 	nop
   4fb3c:	00000106 	br	4fb44 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4fb40:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4fb44:	e0fff517 	ldw	r3,-44(fp)
   4fb48:	e0bffd17 	ldw	r2,-12(fp)
   4fb4c:	18801726 	beq	r3,r2,4fbac <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fb50:	0005303a 	rdctl	r2,status
   4fb54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fb58:	e0fffa17 	ldw	r3,-24(fp)
   4fb5c:	00bfff84 	movi	r2,-2
   4fb60:	1884703a 	and	r2,r3,r2
   4fb64:	1001703a 	wrctl	status,r2
  
  return context;
   4fb68:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4fb6c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4fb70:	e0bffc17 	ldw	r2,-16(fp)
   4fb74:	10800817 	ldw	r2,32(r2)
   4fb78:	10c00054 	ori	r3,r2,1
   4fb7c:	e0bffc17 	ldw	r2,-16(fp)
   4fb80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4fb84:	e0bffc17 	ldw	r2,-16(fp)
   4fb88:	10800017 	ldw	r2,0(r2)
   4fb8c:	10800104 	addi	r2,r2,4
   4fb90:	e0fffc17 	ldw	r3,-16(fp)
   4fb94:	18c00817 	ldw	r3,32(r3)
   4fb98:	10c00035 	stwio	r3,0(r2)
   4fb9c:	e0bff917 	ldw	r2,-28(fp)
   4fba0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fba4:	e0bffb17 	ldw	r2,-20(fp)
   4fba8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4fbac:	e0fff517 	ldw	r3,-44(fp)
   4fbb0:	e0bffd17 	ldw	r2,-12(fp)
   4fbb4:	18800426 	beq	r3,r2,4fbc8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4fbb8:	e0fff517 	ldw	r3,-44(fp)
   4fbbc:	e0bffd17 	ldw	r2,-12(fp)
   4fbc0:	1885c83a 	sub	r2,r3,r2
   4fbc4:	00000606 	br	4fbe0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4fbc8:	e0bfff17 	ldw	r2,-4(fp)
   4fbcc:	1090000c 	andi	r2,r2,16384
   4fbd0:	10000226 	beq	r2,zero,4fbdc <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   4fbd4:	00bffd44 	movi	r2,-11
   4fbd8:	00000106 	br	4fbe0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   4fbdc:	00bffec4 	movi	r2,-5
}
   4fbe0:	e037883a 	mov	sp,fp
   4fbe4:	dfc00117 	ldw	ra,4(sp)
   4fbe8:	df000017 	ldw	fp,0(sp)
   4fbec:	dec00204 	addi	sp,sp,8
   4fbf0:	f800283a 	ret

0004fbf4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4fbf4:	defff304 	addi	sp,sp,-52
   4fbf8:	dfc00c15 	stw	ra,48(sp)
   4fbfc:	df000b15 	stw	fp,44(sp)
   4fc00:	df000b04 	addi	fp,sp,44
   4fc04:	e13ffc15 	stw	r4,-16(fp)
   4fc08:	e17ffd15 	stw	r5,-12(fp)
   4fc0c:	e1bffe15 	stw	r6,-8(fp)
   4fc10:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4fc14:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4fc18:	e0bffd17 	ldw	r2,-12(fp)
   4fc1c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4fc20:	00003706 	br	4fd00 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4fc24:	e0bffc17 	ldw	r2,-16(fp)
   4fc28:	10800c17 	ldw	r2,48(r2)
   4fc2c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4fc30:	e0bffc17 	ldw	r2,-16(fp)
   4fc34:	10800d17 	ldw	r2,52(r2)
   4fc38:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4fc3c:	e0fff817 	ldw	r3,-32(fp)
   4fc40:	e0bff517 	ldw	r2,-44(fp)
   4fc44:	1880062e 	bgeu	r3,r2,4fc60 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4fc48:	e0fff517 	ldw	r3,-44(fp)
   4fc4c:	e0bff817 	ldw	r2,-32(fp)
   4fc50:	1885c83a 	sub	r2,r3,r2
   4fc54:	10bfffc4 	addi	r2,r2,-1
   4fc58:	e0bff615 	stw	r2,-40(fp)
   4fc5c:	00000b06 	br	4fc8c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4fc60:	e0bff517 	ldw	r2,-44(fp)
   4fc64:	10000526 	beq	r2,zero,4fc7c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4fc68:	00c20004 	movi	r3,2048
   4fc6c:	e0bff817 	ldw	r2,-32(fp)
   4fc70:	1885c83a 	sub	r2,r3,r2
   4fc74:	e0bff615 	stw	r2,-40(fp)
   4fc78:	00000406 	br	4fc8c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4fc7c:	00c1ffc4 	movi	r3,2047
   4fc80:	e0bff817 	ldw	r2,-32(fp)
   4fc84:	1885c83a 	sub	r2,r3,r2
   4fc88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4fc8c:	e0bff617 	ldw	r2,-40(fp)
   4fc90:	10001e26 	beq	r2,zero,4fd0c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4fc94:	e0fffe17 	ldw	r3,-8(fp)
   4fc98:	e0bff617 	ldw	r2,-40(fp)
   4fc9c:	1880022e 	bgeu	r3,r2,4fca8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4fca0:	e0bffe17 	ldw	r2,-8(fp)
   4fca4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4fca8:	e0bff817 	ldw	r2,-32(fp)
   4fcac:	10820e04 	addi	r2,r2,2104
   4fcb0:	e0fffc17 	ldw	r3,-16(fp)
   4fcb4:	1885883a 	add	r2,r3,r2
   4fcb8:	1009883a 	mov	r4,r2
   4fcbc:	e17ffd17 	ldw	r5,-12(fp)
   4fcc0:	e1bff617 	ldw	r6,-40(fp)
   4fcc4:	004b84c0 	call	4b84c <memcpy>
      ptr   += n;
   4fcc8:	e0fffd17 	ldw	r3,-12(fp)
   4fccc:	e0bff617 	ldw	r2,-40(fp)
   4fcd0:	1885883a 	add	r2,r3,r2
   4fcd4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4fcd8:	e0fffe17 	ldw	r3,-8(fp)
   4fcdc:	e0bff617 	ldw	r2,-40(fp)
   4fce0:	1885c83a 	sub	r2,r3,r2
   4fce4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fce8:	e0fff817 	ldw	r3,-32(fp)
   4fcec:	e0bff617 	ldw	r2,-40(fp)
   4fcf0:	1885883a 	add	r2,r3,r2
   4fcf4:	10c1ffcc 	andi	r3,r2,2047
   4fcf8:	e0bffc17 	ldw	r2,-16(fp)
   4fcfc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4fd00:	e0bffe17 	ldw	r2,-8(fp)
   4fd04:	00bfc716 	blt	zero,r2,4fc24 <altera_avalon_jtag_uart_write+0x30>
   4fd08:	00000106 	br	4fd10 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4fd0c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fd10:	0005303a 	rdctl	r2,status
   4fd14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fd18:	e0fffa17 	ldw	r3,-24(fp)
   4fd1c:	00bfff84 	movi	r2,-2
   4fd20:	1884703a 	and	r2,r3,r2
   4fd24:	1001703a 	wrctl	status,r2
  
  return context;
   4fd28:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4fd2c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4fd30:	e0bffc17 	ldw	r2,-16(fp)
   4fd34:	10800817 	ldw	r2,32(r2)
   4fd38:	10c00094 	ori	r3,r2,2
   4fd3c:	e0bffc17 	ldw	r2,-16(fp)
   4fd40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4fd44:	e0bffc17 	ldw	r2,-16(fp)
   4fd48:	10800017 	ldw	r2,0(r2)
   4fd4c:	10800104 	addi	r2,r2,4
   4fd50:	e0fffc17 	ldw	r3,-16(fp)
   4fd54:	18c00817 	ldw	r3,32(r3)
   4fd58:	10c00035 	stwio	r3,0(r2)
   4fd5c:	e0bff917 	ldw	r2,-28(fp)
   4fd60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fd64:	e0bffb17 	ldw	r2,-20(fp)
   4fd68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4fd6c:	e0bffe17 	ldw	r2,-8(fp)
   4fd70:	0080110e 	bge	zero,r2,4fdb8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4fd74:	e0bfff17 	ldw	r2,-4(fp)
   4fd78:	1090000c 	andi	r2,r2,16384
   4fd7c:	1000111e 	bne	r2,zero,4fdc4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4fd80:	0001883a 	nop
   4fd84:	e0bffc17 	ldw	r2,-16(fp)
   4fd88:	10c00d17 	ldw	r3,52(r2)
   4fd8c:	e0bff517 	ldw	r2,-44(fp)
   4fd90:	1880051e 	bne	r3,r2,4fda8 <altera_avalon_jtag_uart_write+0x1b4>
   4fd94:	e0bffc17 	ldw	r2,-16(fp)
   4fd98:	10c00917 	ldw	r3,36(r2)
   4fd9c:	e0bffc17 	ldw	r2,-16(fp)
   4fda0:	10800117 	ldw	r2,4(r2)
   4fda4:	18bff736 	bltu	r3,r2,4fd84 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4fda8:	e0bffc17 	ldw	r2,-16(fp)
   4fdac:	10c00d17 	ldw	r3,52(r2)
   4fdb0:	e0bff517 	ldw	r2,-44(fp)
   4fdb4:	18800526 	beq	r3,r2,4fdcc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4fdb8:	e0bffe17 	ldw	r2,-8(fp)
   4fdbc:	00bfd016 	blt	zero,r2,4fd00 <altera_avalon_jtag_uart_write+0x10c>
   4fdc0:	00000306 	br	4fdd0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4fdc4:	0001883a 	nop
   4fdc8:	00000106 	br	4fdd0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   4fdcc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4fdd0:	e0fffd17 	ldw	r3,-12(fp)
   4fdd4:	e0bff717 	ldw	r2,-36(fp)
   4fdd8:	18800426 	beq	r3,r2,4fdec <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4fddc:	e0fffd17 	ldw	r3,-12(fp)
   4fde0:	e0bff717 	ldw	r2,-36(fp)
   4fde4:	1885c83a 	sub	r2,r3,r2
   4fde8:	00000606 	br	4fe04 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4fdec:	e0bfff17 	ldw	r2,-4(fp)
   4fdf0:	1090000c 	andi	r2,r2,16384
   4fdf4:	10000226 	beq	r2,zero,4fe00 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4fdf8:	00bffd44 	movi	r2,-11
   4fdfc:	00000106 	br	4fe04 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4fe00:	00bffec4 	movi	r2,-5
}
   4fe04:	e037883a 	mov	sp,fp
   4fe08:	dfc00117 	ldw	ra,4(sp)
   4fe0c:	df000017 	ldw	fp,0(sp)
   4fe10:	dec00204 	addi	sp,sp,8
   4fe14:	f800283a 	ret

0004fe18 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4fe18:	defffa04 	addi	sp,sp,-24
   4fe1c:	dfc00515 	stw	ra,20(sp)
   4fe20:	df000415 	stw	fp,16(sp)
   4fe24:	df000404 	addi	fp,sp,16
   4fe28:	e13ffd15 	stw	r4,-12(fp)
   4fe2c:	e17ffe15 	stw	r5,-8(fp)
   4fe30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4fe34:	e0bffd17 	ldw	r2,-12(fp)
   4fe38:	10800017 	ldw	r2,0(r2)
   4fe3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   4fe40:	e0bffc17 	ldw	r2,-16(fp)
   4fe44:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4fe48:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   4fe4c:	10800217 	ldw	r2,8(r2)
   4fe50:	1809883a 	mov	r4,r3
   4fe54:	e17ffe17 	ldw	r5,-8(fp)
   4fe58:	e1bfff17 	ldw	r6,-4(fp)
   4fe5c:	100f883a 	mov	r7,r2
   4fe60:	00503200 	call	50320 <altera_avalon_uart_read>
      fd->fd_flags);
}
   4fe64:	e037883a 	mov	sp,fp
   4fe68:	dfc00117 	ldw	ra,4(sp)
   4fe6c:	df000017 	ldw	fp,0(sp)
   4fe70:	dec00204 	addi	sp,sp,8
   4fe74:	f800283a 	ret

0004fe78 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4fe78:	defffa04 	addi	sp,sp,-24
   4fe7c:	dfc00515 	stw	ra,20(sp)
   4fe80:	df000415 	stw	fp,16(sp)
   4fe84:	df000404 	addi	fp,sp,16
   4fe88:	e13ffd15 	stw	r4,-12(fp)
   4fe8c:	e17ffe15 	stw	r5,-8(fp)
   4fe90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4fe94:	e0bffd17 	ldw	r2,-12(fp)
   4fe98:	10800017 	ldw	r2,0(r2)
   4fe9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   4fea0:	e0bffc17 	ldw	r2,-16(fp)
   4fea4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4fea8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   4feac:	10800217 	ldw	r2,8(r2)
   4feb0:	1809883a 	mov	r4,r3
   4feb4:	e17ffe17 	ldw	r5,-8(fp)
   4feb8:	e1bfff17 	ldw	r6,-4(fp)
   4febc:	100f883a 	mov	r7,r2
   4fec0:	00505740 	call	50574 <altera_avalon_uart_write>
      fd->fd_flags);
}
   4fec4:	e037883a 	mov	sp,fp
   4fec8:	dfc00117 	ldw	ra,4(sp)
   4fecc:	df000017 	ldw	fp,0(sp)
   4fed0:	dec00204 	addi	sp,sp,8
   4fed4:	f800283a 	ret

0004fed8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   4fed8:	defffc04 	addi	sp,sp,-16
   4fedc:	dfc00315 	stw	ra,12(sp)
   4fee0:	df000215 	stw	fp,8(sp)
   4fee4:	df000204 	addi	fp,sp,8
   4fee8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4feec:	e0bfff17 	ldw	r2,-4(fp)
   4fef0:	10800017 	ldw	r2,0(r2)
   4fef4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   4fef8:	e0bffe17 	ldw	r2,-8(fp)
   4fefc:	10c00a04 	addi	r3,r2,40
   4ff00:	e0bfff17 	ldw	r2,-4(fp)
   4ff04:	10800217 	ldw	r2,8(r2)
   4ff08:	1809883a 	mov	r4,r3
   4ff0c:	100b883a 	mov	r5,r2
   4ff10:	005027c0 	call	5027c <altera_avalon_uart_close>
}
   4ff14:	e037883a 	mov	sp,fp
   4ff18:	dfc00117 	ldw	ra,4(sp)
   4ff1c:	df000017 	ldw	fp,0(sp)
   4ff20:	dec00204 	addi	sp,sp,8
   4ff24:	f800283a 	ret

0004ff28 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   4ff28:	defff804 	addi	sp,sp,-32
   4ff2c:	dfc00715 	stw	ra,28(sp)
   4ff30:	df000615 	stw	fp,24(sp)
   4ff34:	df000604 	addi	fp,sp,24
   4ff38:	e13ffd15 	stw	r4,-12(fp)
   4ff3c:	e17ffe15 	stw	r5,-8(fp)
   4ff40:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   4ff44:	e0bffd17 	ldw	r2,-12(fp)
   4ff48:	10800017 	ldw	r2,0(r2)
   4ff4c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   4ff50:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   4ff54:	1000041e 	bne	r2,zero,4ff68 <altera_avalon_uart_init+0x40>
   4ff58:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4ff5c:	1000021e 	bne	r2,zero,4ff68 <altera_avalon_uart_init+0x40>
   4ff60:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   4ff64:	10000226 	beq	r2,zero,4ff70 <altera_avalon_uart_init+0x48>
   4ff68:	00800044 	movi	r2,1
   4ff6c:	00000106 	br	4ff74 <altera_avalon_uart_init+0x4c>
   4ff70:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4ff74:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   4ff78:	e0bffc17 	ldw	r2,-16(fp)
   4ff7c:	10000f1e 	bne	r2,zero,4ffbc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   4ff80:	e0bffd17 	ldw	r2,-12(fp)
   4ff84:	00c32004 	movi	r3,3200
   4ff88:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   4ff8c:	e0bffb17 	ldw	r2,-20(fp)
   4ff90:	10800304 	addi	r2,r2,12
   4ff94:	e0fffd17 	ldw	r3,-12(fp)
   4ff98:	18c00117 	ldw	r3,4(r3)
   4ff9c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   4ffa0:	d8000015 	stw	zero,0(sp)
   4ffa4:	e13ffe17 	ldw	r4,-8(fp)
   4ffa8:	e17fff17 	ldw	r5,-4(fp)
   4ffac:	01800174 	movhi	r6,5
   4ffb0:	31bff404 	addi	r6,r6,-48
   4ffb4:	e1fffd17 	ldw	r7,-12(fp)
   4ffb8:	0050cd00 	call	50cd0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   4ffbc:	e037883a 	mov	sp,fp
   4ffc0:	dfc00117 	ldw	ra,4(sp)
   4ffc4:	df000017 	ldw	fp,0(sp)
   4ffc8:	dec00204 	addi	sp,sp,8
   4ffcc:	f800283a 	ret

0004ffd0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   4ffd0:	defffa04 	addi	sp,sp,-24
   4ffd4:	dfc00515 	stw	ra,20(sp)
   4ffd8:	df000415 	stw	fp,16(sp)
   4ffdc:	df000404 	addi	fp,sp,16
   4ffe0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   4ffe4:	e0bfff17 	ldw	r2,-4(fp)
   4ffe8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   4ffec:	e0bffc17 	ldw	r2,-16(fp)
   4fff0:	10800017 	ldw	r2,0(r2)
   4fff4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   4fff8:	e0bffd17 	ldw	r2,-12(fp)
   4fffc:	10800204 	addi	r2,r2,8
   50000:	10800037 	ldwio	r2,0(r2)
   50004:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   50008:	e0bffd17 	ldw	r2,-12(fp)
   5000c:	10800204 	addi	r2,r2,8
   50010:	0007883a 	mov	r3,zero
   50014:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   50018:	e0bffd17 	ldw	r2,-12(fp)
   5001c:	10800204 	addi	r2,r2,8
   50020:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   50024:	e0bffe17 	ldw	r2,-8(fp)
   50028:	1080200c 	andi	r2,r2,128
   5002c:	10000326 	beq	r2,zero,5003c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   50030:	e13ffc17 	ldw	r4,-16(fp)
   50034:	e17ffe17 	ldw	r5,-8(fp)
   50038:	00500680 	call	50068 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   5003c:	e0bffe17 	ldw	r2,-8(fp)
   50040:	1081100c 	andi	r2,r2,1088
   50044:	10000326 	beq	r2,zero,50054 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   50048:	e13ffc17 	ldw	r4,-16(fp)
   5004c:	e17ffe17 	ldw	r5,-8(fp)
   50050:	00501400 	call	50140 <altera_avalon_uart_txirq>
  }
  

}
   50054:	e037883a 	mov	sp,fp
   50058:	dfc00117 	ldw	ra,4(sp)
   5005c:	df000017 	ldw	fp,0(sp)
   50060:	dec00204 	addi	sp,sp,8
   50064:	f800283a 	ret

00050068 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   50068:	defffc04 	addi	sp,sp,-16
   5006c:	df000315 	stw	fp,12(sp)
   50070:	df000304 	addi	fp,sp,12
   50074:	e13ffe15 	stw	r4,-8(fp)
   50078:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   5007c:	e0bfff17 	ldw	r2,-4(fp)
   50080:	108000cc 	andi	r2,r2,3
   50084:	1000291e 	bne	r2,zero,5012c <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   50088:	e0bffe17 	ldw	r2,-8(fp)
   5008c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   50090:	e0bffe17 	ldw	r2,-8(fp)
   50094:	10800317 	ldw	r2,12(r2)
   50098:	10800044 	addi	r2,r2,1
   5009c:	10800fcc 	andi	r2,r2,63
   500a0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   500a4:	e0bffe17 	ldw	r2,-8(fp)
   500a8:	10800317 	ldw	r2,12(r2)
   500ac:	e0fffe17 	ldw	r3,-8(fp)
   500b0:	18c00017 	ldw	r3,0(r3)
   500b4:	18c00037 	ldwio	r3,0(r3)
   500b8:	e13ffe17 	ldw	r4,-8(fp)
   500bc:	2085883a 	add	r2,r4,r2
   500c0:	10800704 	addi	r2,r2,28
   500c4:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   500c8:	e0bffe17 	ldw	r2,-8(fp)
   500cc:	e0fffd17 	ldw	r3,-12(fp)
   500d0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   500d4:	e0bffe17 	ldw	r2,-8(fp)
   500d8:	10800317 	ldw	r2,12(r2)
   500dc:	10800044 	addi	r2,r2,1
   500e0:	10800fcc 	andi	r2,r2,63
   500e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   500e8:	e0bffe17 	ldw	r2,-8(fp)
   500ec:	10c00217 	ldw	r3,8(r2)
   500f0:	e0bffd17 	ldw	r2,-12(fp)
   500f4:	18800e1e 	bne	r3,r2,50130 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   500f8:	e0bffe17 	ldw	r2,-8(fp)
   500fc:	10c00117 	ldw	r3,4(r2)
   50100:	00bfdfc4 	movi	r2,-129
   50104:	1886703a 	and	r3,r3,r2
   50108:	e0bffe17 	ldw	r2,-8(fp)
   5010c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   50110:	e0bffe17 	ldw	r2,-8(fp)
   50114:	10800017 	ldw	r2,0(r2)
   50118:	10800304 	addi	r2,r2,12
   5011c:	e0fffe17 	ldw	r3,-8(fp)
   50120:	18c00117 	ldw	r3,4(r3)
   50124:	10c00035 	stwio	r3,0(r2)
   50128:	00000106 	br	50130 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   5012c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   50130:	e037883a 	mov	sp,fp
   50134:	df000017 	ldw	fp,0(sp)
   50138:	dec00104 	addi	sp,sp,4
   5013c:	f800283a 	ret

00050140 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   50140:	defffd04 	addi	sp,sp,-12
   50144:	df000215 	stw	fp,8(sp)
   50148:	df000204 	addi	fp,sp,8
   5014c:	e13ffe15 	stw	r4,-8(fp)
   50150:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   50154:	e0bffe17 	ldw	r2,-8(fp)
   50158:	10c00417 	ldw	r3,16(r2)
   5015c:	e0bffe17 	ldw	r2,-8(fp)
   50160:	10800517 	ldw	r2,20(r2)
   50164:	18803026 	beq	r3,r2,50228 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   50168:	e0bffe17 	ldw	r2,-8(fp)
   5016c:	10800617 	ldw	r2,24(r2)
   50170:	1080008c 	andi	r2,r2,2
   50174:	10000326 	beq	r2,zero,50184 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   50178:	e0bfff17 	ldw	r2,-4(fp)
   5017c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   50180:	10001b26 	beq	r2,zero,501f0 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   50184:	e0bffe17 	ldw	r2,-8(fp)
   50188:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   5018c:	e0bffe17 	ldw	r2,-8(fp)
   50190:	10800017 	ldw	r2,0(r2)
   50194:	10800104 	addi	r2,r2,4
   50198:	e0fffe17 	ldw	r3,-8(fp)
   5019c:	18c00417 	ldw	r3,16(r3)
   501a0:	e13ffe17 	ldw	r4,-8(fp)
   501a4:	20c7883a 	add	r3,r4,r3
   501a8:	18c01704 	addi	r3,r3,92
   501ac:	18c00003 	ldbu	r3,0(r3)
   501b0:	18c03fcc 	andi	r3,r3,255
   501b4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   501b8:	e0bffe17 	ldw	r2,-8(fp)
   501bc:	10800417 	ldw	r2,16(r2)
   501c0:	10800044 	addi	r2,r2,1
   501c4:	e0fffe17 	ldw	r3,-8(fp)
   501c8:	18800415 	stw	r2,16(r3)
   501cc:	10c00fcc 	andi	r3,r2,63
   501d0:	e0bffe17 	ldw	r2,-8(fp)
   501d4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   501d8:	e0bffe17 	ldw	r2,-8(fp)
   501dc:	10800117 	ldw	r2,4(r2)
   501e0:	10c01014 	ori	r3,r2,64
   501e4:	e0bffe17 	ldw	r2,-8(fp)
   501e8:	10c00115 	stw	r3,4(r2)
   501ec:	00000e06 	br	50228 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   501f0:	e0bffe17 	ldw	r2,-8(fp)
   501f4:	10800017 	ldw	r2,0(r2)
   501f8:	10800204 	addi	r2,r2,8
   501fc:	10800037 	ldwio	r2,0(r2)
   50200:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   50204:	e0bfff17 	ldw	r2,-4(fp)
   50208:	1082000c 	andi	r2,r2,2048
   5020c:	1000061e 	bne	r2,zero,50228 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   50210:	e0bffe17 	ldw	r2,-8(fp)
   50214:	10c00117 	ldw	r3,4(r2)
   50218:	00bfefc4 	movi	r2,-65
   5021c:	1886703a 	and	r3,r3,r2
   50220:	e0bffe17 	ldw	r2,-8(fp)
   50224:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   50228:	e0bffe17 	ldw	r2,-8(fp)
   5022c:	10c00417 	ldw	r3,16(r2)
   50230:	e0bffe17 	ldw	r2,-8(fp)
   50234:	10800517 	ldw	r2,20(r2)
   50238:	1880061e 	bne	r3,r2,50254 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   5023c:	e0bffe17 	ldw	r2,-8(fp)
   50240:	10c00117 	ldw	r3,4(r2)
   50244:	00beefc4 	movi	r2,-1089
   50248:	1886703a 	and	r3,r3,r2
   5024c:	e0bffe17 	ldw	r2,-8(fp)
   50250:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   50254:	e0bffe17 	ldw	r2,-8(fp)
   50258:	10800017 	ldw	r2,0(r2)
   5025c:	10800304 	addi	r2,r2,12
   50260:	e0fffe17 	ldw	r3,-8(fp)
   50264:	18c00117 	ldw	r3,4(r3)
   50268:	10c00035 	stwio	r3,0(r2)
}
   5026c:	e037883a 	mov	sp,fp
   50270:	df000017 	ldw	fp,0(sp)
   50274:	dec00104 	addi	sp,sp,4
   50278:	f800283a 	ret

0005027c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   5027c:	defffd04 	addi	sp,sp,-12
   50280:	df000215 	stw	fp,8(sp)
   50284:	df000204 	addi	fp,sp,8
   50288:	e13ffe15 	stw	r4,-8(fp)
   5028c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   50290:	00000506 	br	502a8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   50294:	e0bfff17 	ldw	r2,-4(fp)
   50298:	1090000c 	andi	r2,r2,16384
   5029c:	10000226 	beq	r2,zero,502a8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   502a0:	00bffd44 	movi	r2,-11
   502a4:	00000606 	br	502c0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   502a8:	e0bffe17 	ldw	r2,-8(fp)
   502ac:	10c00417 	ldw	r3,16(r2)
   502b0:	e0bffe17 	ldw	r2,-8(fp)
   502b4:	10800517 	ldw	r2,20(r2)
   502b8:	18bff61e 	bne	r3,r2,50294 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   502bc:	0005883a 	mov	r2,zero
}
   502c0:	e037883a 	mov	sp,fp
   502c4:	df000017 	ldw	fp,0(sp)
   502c8:	dec00104 	addi	sp,sp,4
   502cc:	f800283a 	ret

000502d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   502d0:	defffe04 	addi	sp,sp,-8
   502d4:	dfc00115 	stw	ra,4(sp)
   502d8:	df000015 	stw	fp,0(sp)
   502dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   502e0:	00800174 	movhi	r2,5
   502e4:	108df904 	addi	r2,r2,14308
   502e8:	10800017 	ldw	r2,0(r2)
   502ec:	10000526 	beq	r2,zero,50304 <alt_get_errno+0x34>
   502f0:	00800174 	movhi	r2,5
   502f4:	108df904 	addi	r2,r2,14308
   502f8:	10800017 	ldw	r2,0(r2)
   502fc:	103ee83a 	callr	r2
   50300:	00000206 	br	5030c <alt_get_errno+0x3c>
   50304:	00800174 	movhi	r2,5
   50308:	10950c04 	addi	r2,r2,21552
}
   5030c:	e037883a 	mov	sp,fp
   50310:	dfc00117 	ldw	ra,4(sp)
   50314:	df000017 	ldw	fp,0(sp)
   50318:	dec00204 	addi	sp,sp,8
   5031c:	f800283a 	ret

00050320 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   50320:	defff104 	addi	sp,sp,-60
   50324:	dfc00e15 	stw	ra,56(sp)
   50328:	df000d15 	stw	fp,52(sp)
   5032c:	df000d04 	addi	fp,sp,52
   50330:	e13ffc15 	stw	r4,-16(fp)
   50334:	e17ffd15 	stw	r5,-12(fp)
   50338:	e1bffe15 	stw	r6,-8(fp)
   5033c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   50340:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
   50344:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   50348:	e0bfff17 	ldw	r2,-4(fp)
   5034c:	1090000c 	andi	r2,r2,16384
   50350:	1005003a 	cmpeq	r2,r2,zero
   50354:	10803fcc 	andi	r2,r2,255
   50358:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   5035c:	e0bffc17 	ldw	r2,-16(fp)
   50360:	10800217 	ldw	r2,8(r2)
   50364:	10800044 	addi	r2,r2,1
   50368:	10800fcc 	andi	r2,r2,63
   5036c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   50370:	00001906 	br	503d8 <altera_avalon_uart_read+0xb8>
    {
      count++;
   50374:	e0bff417 	ldw	r2,-48(fp)
   50378:	10800044 	addi	r2,r2,1
   5037c:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   50380:	e0bffc17 	ldw	r2,-16(fp)
   50384:	10800217 	ldw	r2,8(r2)
   50388:	e0fffc17 	ldw	r3,-16(fp)
   5038c:	1885883a 	add	r2,r3,r2
   50390:	10800704 	addi	r2,r2,28
   50394:	10800003 	ldbu	r2,0(r2)
   50398:	1007883a 	mov	r3,r2
   5039c:	e0bffd17 	ldw	r2,-12(fp)
   503a0:	10c00005 	stb	r3,0(r2)
   503a4:	e0bffd17 	ldw	r2,-12(fp)
   503a8:	10800044 	addi	r2,r2,1
   503ac:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   503b0:	e0bffc17 	ldw	r2,-16(fp)
   503b4:	10800217 	ldw	r2,8(r2)
   503b8:	10c00044 	addi	r3,r2,1
   503bc:	e0bffc17 	ldw	r2,-16(fp)
   503c0:	10c00215 	stw	r3,8(r2)
   503c4:	e0bffc17 	ldw	r2,-16(fp)
   503c8:	10800217 	ldw	r2,8(r2)
   503cc:	10c00fcc 	andi	r3,r2,63
   503d0:	e0bffc17 	ldw	r2,-16(fp)
   503d4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   503d8:	e0fff417 	ldw	r3,-48(fp)
   503dc:	e0bffe17 	ldw	r2,-8(fp)
   503e0:	1880050e 	bge	r3,r2,503f8 <altera_avalon_uart_read+0xd8>
   503e4:	e0bffc17 	ldw	r2,-16(fp)
   503e8:	10c00217 	ldw	r3,8(r2)
   503ec:	e0bffc17 	ldw	r2,-16(fp)
   503f0:	10800317 	ldw	r2,12(r2)
   503f4:	18bfdf1e 	bne	r3,r2,50374 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   503f8:	e0bff417 	ldw	r2,-48(fp)
   503fc:	1000241e 	bne	r2,zero,50490 <altera_avalon_uart_read+0x170>
   50400:	e0bffc17 	ldw	r2,-16(fp)
   50404:	10c00217 	ldw	r3,8(r2)
   50408:	e0bffc17 	ldw	r2,-16(fp)
   5040c:	10800317 	ldw	r2,12(r2)
   50410:	18801f1e 	bne	r3,r2,50490 <altera_avalon_uart_read+0x170>
    {
      if (!block)
   50414:	e0bff517 	ldw	r2,-44(fp)
   50418:	1000061e 	bne	r2,zero,50434 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   5041c:	00502d00 	call	502d0 <alt_get_errno>
   50420:	00c002c4 	movi	r3,11
   50424:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   50428:	00800044 	movi	r2,1
   5042c:	e0bff305 	stb	r2,-52(fp)
        break;
   50430:	00001b06 	br	504a0 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50434:	0005303a 	rdctl	r2,status
   50438:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5043c:	e0fff817 	ldw	r3,-32(fp)
   50440:	00bfff84 	movi	r2,-2
   50444:	1884703a 	and	r2,r3,r2
   50448:	1001703a 	wrctl	status,r2
  
  return context;
   5044c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   50450:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   50454:	e0bffc17 	ldw	r2,-16(fp)
   50458:	10800117 	ldw	r2,4(r2)
   5045c:	10c02014 	ori	r3,r2,128
   50460:	e0bffc17 	ldw	r2,-16(fp)
   50464:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   50468:	e0bffc17 	ldw	r2,-16(fp)
   5046c:	10800017 	ldw	r2,0(r2)
   50470:	10800304 	addi	r2,r2,12
   50474:	e0fffc17 	ldw	r3,-16(fp)
   50478:	18c00117 	ldw	r3,4(r3)
   5047c:	10c00035 	stwio	r3,0(r2)
   50480:	e0bff717 	ldw	r2,-36(fp)
   50484:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50488:	e0bff917 	ldw	r2,-28(fp)
   5048c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   50490:	e0bff417 	ldw	r2,-48(fp)
   50494:	1000021e 	bne	r2,zero,504a0 <altera_avalon_uart_read+0x180>
   50498:	e0bffe17 	ldw	r2,-8(fp)
   5049c:	103fce1e 	bne	r2,zero,503d8 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   504a0:	0005303a 	rdctl	r2,status
   504a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   504a8:	e0fffa17 	ldw	r3,-24(fp)
   504ac:	00bfff84 	movi	r2,-2
   504b0:	1884703a 	and	r2,r3,r2
   504b4:	1001703a 	wrctl	status,r2
  
  return context;
   504b8:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   504bc:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   504c0:	e0bffc17 	ldw	r2,-16(fp)
   504c4:	10800117 	ldw	r2,4(r2)
   504c8:	10c02014 	ori	r3,r2,128
   504cc:	e0bffc17 	ldw	r2,-16(fp)
   504d0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   504d4:	e0bffc17 	ldw	r2,-16(fp)
   504d8:	10800017 	ldw	r2,0(r2)
   504dc:	10800304 	addi	r2,r2,12
   504e0:	e0fffc17 	ldw	r3,-16(fp)
   504e4:	18c00117 	ldw	r3,4(r3)
   504e8:	10c00035 	stwio	r3,0(r2)
   504ec:	e0bff717 	ldw	r2,-36(fp)
   504f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   504f4:	e0bffb17 	ldw	r2,-20(fp)
   504f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   504fc:	e0bff303 	ldbu	r2,-52(fp)
   50500:	10000226 	beq	r2,zero,5050c <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
   50504:	00bffd44 	movi	r2,-11
   50508:	00000106 	br	50510 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
   5050c:	e0bff417 	ldw	r2,-48(fp)
  }
}
   50510:	e037883a 	mov	sp,fp
   50514:	dfc00117 	ldw	ra,4(sp)
   50518:	df000017 	ldw	fp,0(sp)
   5051c:	dec00204 	addi	sp,sp,8
   50520:	f800283a 	ret

00050524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50524:	defffe04 	addi	sp,sp,-8
   50528:	dfc00115 	stw	ra,4(sp)
   5052c:	df000015 	stw	fp,0(sp)
   50530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50534:	00800174 	movhi	r2,5
   50538:	108df904 	addi	r2,r2,14308
   5053c:	10800017 	ldw	r2,0(r2)
   50540:	10000526 	beq	r2,zero,50558 <alt_get_errno+0x34>
   50544:	00800174 	movhi	r2,5
   50548:	108df904 	addi	r2,r2,14308
   5054c:	10800017 	ldw	r2,0(r2)
   50550:	103ee83a 	callr	r2
   50554:	00000206 	br	50560 <alt_get_errno+0x3c>
   50558:	00800174 	movhi	r2,5
   5055c:	10950c04 	addi	r2,r2,21552
}
   50560:	e037883a 	mov	sp,fp
   50564:	dfc00117 	ldw	ra,4(sp)
   50568:	df000017 	ldw	fp,0(sp)
   5056c:	dec00204 	addi	sp,sp,8
   50570:	f800283a 	ret

00050574 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   50574:	defff204 	addi	sp,sp,-56
   50578:	dfc00d15 	stw	ra,52(sp)
   5057c:	df000c15 	stw	fp,48(sp)
   50580:	df000c04 	addi	fp,sp,48
   50584:	e13ffc15 	stw	r4,-16(fp)
   50588:	e17ffd15 	stw	r5,-12(fp)
   5058c:	e1bffe15 	stw	r6,-8(fp)
   50590:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   50594:	e0bffe17 	ldw	r2,-8(fp)
   50598:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   5059c:	e0bfff17 	ldw	r2,-4(fp)
   505a0:	1090000c 	andi	r2,r2,16384
   505a4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   505a8:	00003b06 	br	50698 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   505ac:	e0bffc17 	ldw	r2,-16(fp)
   505b0:	10800517 	ldw	r2,20(r2)
   505b4:	10800044 	addi	r2,r2,1
   505b8:	10800fcc 	andi	r2,r2,63
   505bc:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   505c0:	e0bffc17 	ldw	r2,-16(fp)
   505c4:	10c00417 	ldw	r3,16(r2)
   505c8:	e0bff617 	ldw	r2,-40(fp)
   505cc:	1880211e 	bne	r3,r2,50654 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
   505d0:	e0bff517 	ldw	r2,-44(fp)
   505d4:	10000426 	beq	r2,zero,505e8 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   505d8:	00505240 	call	50524 <alt_get_errno>
   505dc:	00c002c4 	movi	r3,11
   505e0:	10c00015 	stw	r3,0(r2)
        break;
   505e4:	00002e06 	br	506a0 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   505e8:	0005303a 	rdctl	r2,status
   505ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   505f0:	e0fff817 	ldw	r3,-32(fp)
   505f4:	00bfff84 	movi	r2,-2
   505f8:	1884703a 	and	r2,r3,r2
   505fc:	1001703a 	wrctl	status,r2
  
  return context;
   50600:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   50604:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   50608:	e0bffc17 	ldw	r2,-16(fp)
   5060c:	10800117 	ldw	r2,4(r2)
   50610:	10c11014 	ori	r3,r2,1088
   50614:	e0bffc17 	ldw	r2,-16(fp)
   50618:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   5061c:	e0bffc17 	ldw	r2,-16(fp)
   50620:	10800017 	ldw	r2,0(r2)
   50624:	10800304 	addi	r2,r2,12
   50628:	e0fffc17 	ldw	r3,-16(fp)
   5062c:	18c00117 	ldw	r3,4(r3)
   50630:	10c00035 	stwio	r3,0(r2)
   50634:	e0bff717 	ldw	r2,-36(fp)
   50638:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5063c:	e0bff917 	ldw	r2,-28(fp)
   50640:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   50644:	e0bffc17 	ldw	r2,-16(fp)
   50648:	10c00417 	ldw	r3,16(r2)
   5064c:	e0bff617 	ldw	r2,-40(fp)
   50650:	18bffc26 	beq	r3,r2,50644 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
   50654:	e0bff417 	ldw	r2,-48(fp)
   50658:	10bfffc4 	addi	r2,r2,-1
   5065c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   50660:	e0bffc17 	ldw	r2,-16(fp)
   50664:	10800517 	ldw	r2,20(r2)
   50668:	e0fffd17 	ldw	r3,-12(fp)
   5066c:	18c00003 	ldbu	r3,0(r3)
   50670:	e13ffc17 	ldw	r4,-16(fp)
   50674:	2085883a 	add	r2,r4,r2
   50678:	10801704 	addi	r2,r2,92
   5067c:	10c00005 	stb	r3,0(r2)
   50680:	e0bffd17 	ldw	r2,-12(fp)
   50684:	10800044 	addi	r2,r2,1
   50688:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   5068c:	e0bffc17 	ldw	r2,-16(fp)
   50690:	e0fff617 	ldw	r3,-40(fp)
   50694:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   50698:	e0bff417 	ldw	r2,-48(fp)
   5069c:	103fc31e 	bne	r2,zero,505ac <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   506a0:	0005303a 	rdctl	r2,status
   506a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   506a8:	e0fffa17 	ldw	r3,-24(fp)
   506ac:	00bfff84 	movi	r2,-2
   506b0:	1884703a 	and	r2,r3,r2
   506b4:	1001703a 	wrctl	status,r2
  
  return context;
   506b8:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   506bc:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   506c0:	e0bffc17 	ldw	r2,-16(fp)
   506c4:	10800117 	ldw	r2,4(r2)
   506c8:	10c11014 	ori	r3,r2,1088
   506cc:	e0bffc17 	ldw	r2,-16(fp)
   506d0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   506d4:	e0bffc17 	ldw	r2,-16(fp)
   506d8:	10800017 	ldw	r2,0(r2)
   506dc:	10800304 	addi	r2,r2,12
   506e0:	e0fffc17 	ldw	r3,-16(fp)
   506e4:	18c00117 	ldw	r3,4(r3)
   506e8:	10c00035 	stwio	r3,0(r2)
   506ec:	e0bff717 	ldw	r2,-36(fp)
   506f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   506f4:	e0bffb17 	ldw	r2,-20(fp)
   506f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   506fc:	e0fffe17 	ldw	r3,-8(fp)
   50700:	e0bff417 	ldw	r2,-48(fp)
   50704:	1885c83a 	sub	r2,r3,r2
}
   50708:	e037883a 	mov	sp,fp
   5070c:	dfc00117 	ldw	ra,4(sp)
   50710:	df000017 	ldw	fp,0(sp)
   50714:	dec00204 	addi	sp,sp,8
   50718:	f800283a 	ret

0005071c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5071c:	defff504 	addi	sp,sp,-44
   50720:	df000a15 	stw	fp,40(sp)
   50724:	df000a04 	addi	fp,sp,40
   50728:	e13ffc15 	stw	r4,-16(fp)
   5072c:	e17ffd15 	stw	r5,-12(fp)
   50730:	e1bffe15 	stw	r6,-8(fp)
   50734:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   50738:	e03ff615 	stw	zero,-40(fp)
   5073c:	00800174 	movhi	r2,5
   50740:	10951104 	addi	r2,r2,21572
   50744:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   50748:	10003f26 	beq	r2,zero,50848 <alt_alarm_start+0x12c>
  {
    if (alarm)
   5074c:	e0bffc17 	ldw	r2,-16(fp)
   50750:	10003b26 	beq	r2,zero,50840 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   50754:	e0bffc17 	ldw	r2,-16(fp)
   50758:	e0fffe17 	ldw	r3,-8(fp)
   5075c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   50760:	e0bffc17 	ldw	r2,-16(fp)
   50764:	e0ffff17 	ldw	r3,-4(fp)
   50768:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5076c:	0005303a 	rdctl	r2,status
   50770:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50774:	e0fff817 	ldw	r3,-32(fp)
   50778:	00bfff84 	movi	r2,-2
   5077c:	1884703a 	and	r2,r3,r2
   50780:	1001703a 	wrctl	status,r2
  
  return context;
   50784:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   50788:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   5078c:	00800174 	movhi	r2,5
   50790:	10951204 	addi	r2,r2,21576
   50794:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   50798:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   5079c:	e0fffd17 	ldw	r3,-12(fp)
   507a0:	e0bff617 	ldw	r2,-40(fp)
   507a4:	1885883a 	add	r2,r3,r2
   507a8:	10c00044 	addi	r3,r2,1
   507ac:	e0bffc17 	ldw	r2,-16(fp)
   507b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   507b4:	e0bffc17 	ldw	r2,-16(fp)
   507b8:	10c00217 	ldw	r3,8(r2)
   507bc:	e0bff617 	ldw	r2,-40(fp)
   507c0:	1880042e 	bgeu	r3,r2,507d4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   507c4:	e0bffc17 	ldw	r2,-16(fp)
   507c8:	00c00044 	movi	r3,1
   507cc:	10c00405 	stb	r3,16(r2)
   507d0:	00000206 	br	507dc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   507d4:	e0bffc17 	ldw	r2,-16(fp)
   507d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   507dc:	e0bffc17 	ldw	r2,-16(fp)
   507e0:	00c00174 	movhi	r3,5
   507e4:	18cdfc04 	addi	r3,r3,14320
   507e8:	e0fff915 	stw	r3,-28(fp)
   507ec:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   507f0:	e0bffa17 	ldw	r2,-24(fp)
   507f4:	e0fff917 	ldw	r3,-28(fp)
   507f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   507fc:	e0bff917 	ldw	r2,-28(fp)
   50800:	10c00017 	ldw	r3,0(r2)
   50804:	e0bffa17 	ldw	r2,-24(fp)
   50808:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5080c:	e0bff917 	ldw	r2,-28(fp)
   50810:	10800017 	ldw	r2,0(r2)
   50814:	e0fffa17 	ldw	r3,-24(fp)
   50818:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5081c:	e0bff917 	ldw	r2,-28(fp)
   50820:	e0fffa17 	ldw	r3,-24(fp)
   50824:	10c00015 	stw	r3,0(r2)
   50828:	e0bff717 	ldw	r2,-36(fp)
   5082c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50830:	e0bffb17 	ldw	r2,-20(fp)
   50834:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   50838:	0005883a 	mov	r2,zero
   5083c:	00000306 	br	5084c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   50840:	00bffa84 	movi	r2,-22
   50844:	00000106 	br	5084c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   50848:	00bfde84 	movi	r2,-134
  }
}
   5084c:	e037883a 	mov	sp,fp
   50850:	df000017 	ldw	fp,0(sp)
   50854:	dec00104 	addi	sp,sp,4
   50858:	f800283a 	ret

0005085c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   5085c:	defffe04 	addi	sp,sp,-8
   50860:	df000115 	stw	fp,4(sp)
   50864:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   50868:	e03fff15 	stw	zero,-4(fp)
   5086c:	00000506 	br	50884 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   50870:	e0bfff17 	ldw	r2,-4(fp)
   50874:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   50878:	e0bfff17 	ldw	r2,-4(fp)
   5087c:	10800804 	addi	r2,r2,32
   50880:	e0bfff15 	stw	r2,-4(fp)
   50884:	e0bfff17 	ldw	r2,-4(fp)
   50888:	10820030 	cmpltui	r2,r2,2048
   5088c:	103ff81e 	bne	r2,zero,50870 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   50890:	e037883a 	mov	sp,fp
   50894:	df000017 	ldw	fp,0(sp)
   50898:	dec00104 	addi	sp,sp,4
   5089c:	f800283a 	ret

000508a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   508a0:	defffe04 	addi	sp,sp,-8
   508a4:	dfc00115 	stw	ra,4(sp)
   508a8:	df000015 	stw	fp,0(sp)
   508ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   508b0:	00800174 	movhi	r2,5
   508b4:	108df904 	addi	r2,r2,14308
   508b8:	10800017 	ldw	r2,0(r2)
   508bc:	10000526 	beq	r2,zero,508d4 <alt_get_errno+0x34>
   508c0:	00800174 	movhi	r2,5
   508c4:	108df904 	addi	r2,r2,14308
   508c8:	10800017 	ldw	r2,0(r2)
   508cc:	103ee83a 	callr	r2
   508d0:	00000206 	br	508dc <alt_get_errno+0x3c>
   508d4:	00800174 	movhi	r2,5
   508d8:	10950c04 	addi	r2,r2,21552
}
   508dc:	e037883a 	mov	sp,fp
   508e0:	dfc00117 	ldw	ra,4(sp)
   508e4:	df000017 	ldw	fp,0(sp)
   508e8:	dec00204 	addi	sp,sp,8
   508ec:	f800283a 	ret

000508f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   508f0:	defffa04 	addi	sp,sp,-24
   508f4:	dfc00515 	stw	ra,20(sp)
   508f8:	df000415 	stw	fp,16(sp)
   508fc:	df000404 	addi	fp,sp,16
   50900:	e13ffe15 	stw	r4,-8(fp)
   50904:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   50908:	e0bffe17 	ldw	r2,-8(fp)
   5090c:	10000326 	beq	r2,zero,5091c <alt_dev_llist_insert+0x2c>
   50910:	e0bffe17 	ldw	r2,-8(fp)
   50914:	10800217 	ldw	r2,8(r2)
   50918:	1000051e 	bne	r2,zero,50930 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   5091c:	00508a00 	call	508a0 <alt_get_errno>
   50920:	00c00584 	movi	r3,22
   50924:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   50928:	00bffa84 	movi	r2,-22
   5092c:	00001306 	br	5097c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   50930:	e0bffe17 	ldw	r2,-8(fp)
   50934:	e0ffff17 	ldw	r3,-4(fp)
   50938:	e0fffc15 	stw	r3,-16(fp)
   5093c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50940:	e0bffd17 	ldw	r2,-12(fp)
   50944:	e0fffc17 	ldw	r3,-16(fp)
   50948:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5094c:	e0bffc17 	ldw	r2,-16(fp)
   50950:	10c00017 	ldw	r3,0(r2)
   50954:	e0bffd17 	ldw	r2,-12(fp)
   50958:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5095c:	e0bffc17 	ldw	r2,-16(fp)
   50960:	10800017 	ldw	r2,0(r2)
   50964:	e0fffd17 	ldw	r3,-12(fp)
   50968:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5096c:	e0bffc17 	ldw	r2,-16(fp)
   50970:	e0fffd17 	ldw	r3,-12(fp)
   50974:	10c00015 	stw	r3,0(r2)

  return 0;  
   50978:	0005883a 	mov	r2,zero
}
   5097c:	e037883a 	mov	sp,fp
   50980:	dfc00117 	ldw	ra,4(sp)
   50984:	df000017 	ldw	fp,0(sp)
   50988:	dec00204 	addi	sp,sp,8
   5098c:	f800283a 	ret

00050990 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   50990:	defffd04 	addi	sp,sp,-12
   50994:	dfc00215 	stw	ra,8(sp)
   50998:	df000115 	stw	fp,4(sp)
   5099c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   509a0:	00800174 	movhi	r2,5
   509a4:	1085ba04 	addi	r2,r2,5864
   509a8:	e0bfff15 	stw	r2,-4(fp)
   509ac:	00000606 	br	509c8 <_do_ctors+0x38>
        (*ctor) (); 
   509b0:	e0bfff17 	ldw	r2,-4(fp)
   509b4:	10800017 	ldw	r2,0(r2)
   509b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   509bc:	e0bfff17 	ldw	r2,-4(fp)
   509c0:	10bfff04 	addi	r2,r2,-4
   509c4:	e0bfff15 	stw	r2,-4(fp)
   509c8:	e0ffff17 	ldw	r3,-4(fp)
   509cc:	00800174 	movhi	r2,5
   509d0:	1085bb04 	addi	r2,r2,5868
   509d4:	18bff62e 	bgeu	r3,r2,509b0 <_do_ctors+0x20>
        (*ctor) (); 
}
   509d8:	e037883a 	mov	sp,fp
   509dc:	dfc00117 	ldw	ra,4(sp)
   509e0:	df000017 	ldw	fp,0(sp)
   509e4:	dec00204 	addi	sp,sp,8
   509e8:	f800283a 	ret

000509ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   509ec:	defffd04 	addi	sp,sp,-12
   509f0:	dfc00215 	stw	ra,8(sp)
   509f4:	df000115 	stw	fp,4(sp)
   509f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   509fc:	00800174 	movhi	r2,5
   50a00:	1085ba04 	addi	r2,r2,5864
   50a04:	e0bfff15 	stw	r2,-4(fp)
   50a08:	00000606 	br	50a24 <_do_dtors+0x38>
        (*dtor) (); 
   50a0c:	e0bfff17 	ldw	r2,-4(fp)
   50a10:	10800017 	ldw	r2,0(r2)
   50a14:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   50a18:	e0bfff17 	ldw	r2,-4(fp)
   50a1c:	10bfff04 	addi	r2,r2,-4
   50a20:	e0bfff15 	stw	r2,-4(fp)
   50a24:	e0ffff17 	ldw	r3,-4(fp)
   50a28:	00800174 	movhi	r2,5
   50a2c:	1085bb04 	addi	r2,r2,5868
   50a30:	18bff62e 	bgeu	r3,r2,50a0c <_do_dtors+0x20>
        (*dtor) (); 
}
   50a34:	e037883a 	mov	sp,fp
   50a38:	dfc00117 	ldw	ra,4(sp)
   50a3c:	df000017 	ldw	fp,0(sp)
   50a40:	dec00204 	addi	sp,sp,8
   50a44:	f800283a 	ret

00050a48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   50a48:	defffa04 	addi	sp,sp,-24
   50a4c:	dfc00515 	stw	ra,20(sp)
   50a50:	df000415 	stw	fp,16(sp)
   50a54:	df000404 	addi	fp,sp,16
   50a58:	e13ffe15 	stw	r4,-8(fp)
   50a5c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   50a60:	e0bfff17 	ldw	r2,-4(fp)
   50a64:	10800017 	ldw	r2,0(r2)
   50a68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   50a6c:	e13ffe17 	ldw	r4,-8(fp)
   50a70:	00465980 	call	46598 <strlen>
   50a74:	10800044 	addi	r2,r2,1
   50a78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   50a7c:	00000d06 	br	50ab4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   50a80:	e0bffc17 	ldw	r2,-16(fp)
   50a84:	10c00217 	ldw	r3,8(r2)
   50a88:	e0bffd17 	ldw	r2,-12(fp)
   50a8c:	1809883a 	mov	r4,r3
   50a90:	e17ffe17 	ldw	r5,-8(fp)
   50a94:	100d883a 	mov	r6,r2
   50a98:	00513640 	call	51364 <memcmp>
   50a9c:	1000021e 	bne	r2,zero,50aa8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   50aa0:	e0bffc17 	ldw	r2,-16(fp)
   50aa4:	00000706 	br	50ac4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   50aa8:	e0bffc17 	ldw	r2,-16(fp)
   50aac:	10800017 	ldw	r2,0(r2)
   50ab0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   50ab4:	e0fffc17 	ldw	r3,-16(fp)
   50ab8:	e0bfff17 	ldw	r2,-4(fp)
   50abc:	18bff01e 	bne	r3,r2,50a80 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   50ac0:	0005883a 	mov	r2,zero
}
   50ac4:	e037883a 	mov	sp,fp
   50ac8:	dfc00117 	ldw	ra,4(sp)
   50acc:	df000017 	ldw	fp,0(sp)
   50ad0:	dec00204 	addi	sp,sp,8
   50ad4:	f800283a 	ret

00050ad8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   50ad8:	defffb04 	addi	sp,sp,-20
   50adc:	dfc00415 	stw	ra,16(sp)
   50ae0:	df000315 	stw	fp,12(sp)
   50ae4:	df000304 	addi	fp,sp,12
   50ae8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   50aec:	00800174 	movhi	r2,5
   50af0:	108df404 	addi	r2,r2,14288
   50af4:	10800017 	ldw	r2,0(r2)
   50af8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50afc:	00003106 	br	50bc4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   50b00:	e0bffd17 	ldw	r2,-12(fp)
   50b04:	10800217 	ldw	r2,8(r2)
   50b08:	1009883a 	mov	r4,r2
   50b0c:	00465980 	call	46598 <strlen>
   50b10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   50b14:	e0bffd17 	ldw	r2,-12(fp)
   50b18:	10c00217 	ldw	r3,8(r2)
   50b1c:	e0bffe17 	ldw	r2,-8(fp)
   50b20:	10bfffc4 	addi	r2,r2,-1
   50b24:	1885883a 	add	r2,r3,r2
   50b28:	10800003 	ldbu	r2,0(r2)
   50b2c:	10803fcc 	andi	r2,r2,255
   50b30:	1080201c 	xori	r2,r2,128
   50b34:	10bfe004 	addi	r2,r2,-128
   50b38:	10800bd8 	cmpnei	r2,r2,47
   50b3c:	1000031e 	bne	r2,zero,50b4c <alt_find_file+0x74>
    {
      len -= 1;
   50b40:	e0bffe17 	ldw	r2,-8(fp)
   50b44:	10bfffc4 	addi	r2,r2,-1
   50b48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50b4c:	e0bffe17 	ldw	r2,-8(fp)
   50b50:	e0ffff17 	ldw	r3,-4(fp)
   50b54:	1885883a 	add	r2,r3,r2
   50b58:	10800003 	ldbu	r2,0(r2)
   50b5c:	10803fcc 	andi	r2,r2,255
   50b60:	1080201c 	xori	r2,r2,128
   50b64:	10bfe004 	addi	r2,r2,-128
   50b68:	10800be0 	cmpeqi	r2,r2,47
   50b6c:	1000081e 	bne	r2,zero,50b90 <alt_find_file+0xb8>
   50b70:	e0bffe17 	ldw	r2,-8(fp)
   50b74:	e0ffff17 	ldw	r3,-4(fp)
   50b78:	1885883a 	add	r2,r3,r2
   50b7c:	10800003 	ldbu	r2,0(r2)
   50b80:	10803fcc 	andi	r2,r2,255
   50b84:	1080201c 	xori	r2,r2,128
   50b88:	10bfe004 	addi	r2,r2,-128
   50b8c:	10000a1e 	bne	r2,zero,50bb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   50b90:	e0bffd17 	ldw	r2,-12(fp)
   50b94:	10c00217 	ldw	r3,8(r2)
   50b98:	e0bffe17 	ldw	r2,-8(fp)
   50b9c:	1809883a 	mov	r4,r3
   50ba0:	e17fff17 	ldw	r5,-4(fp)
   50ba4:	100d883a 	mov	r6,r2
   50ba8:	00513640 	call	51364 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50bac:	1000021e 	bne	r2,zero,50bb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   50bb0:	e0bffd17 	ldw	r2,-12(fp)
   50bb4:	00000806 	br	50bd8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   50bb8:	e0bffd17 	ldw	r2,-12(fp)
   50bbc:	10800017 	ldw	r2,0(r2)
   50bc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50bc4:	e0fffd17 	ldw	r3,-12(fp)
   50bc8:	00800174 	movhi	r2,5
   50bcc:	108df404 	addi	r2,r2,14288
   50bd0:	18bfcb1e 	bne	r3,r2,50b00 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   50bd4:	0005883a 	mov	r2,zero
}
   50bd8:	e037883a 	mov	sp,fp
   50bdc:	dfc00117 	ldw	ra,4(sp)
   50be0:	df000017 	ldw	fp,0(sp)
   50be4:	dec00204 	addi	sp,sp,8
   50be8:	f800283a 	ret

00050bec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   50bec:	defffc04 	addi	sp,sp,-16
   50bf0:	df000315 	stw	fp,12(sp)
   50bf4:	df000304 	addi	fp,sp,12
   50bf8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   50bfc:	00bffa04 	movi	r2,-24
   50c00:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50c04:	e03ffd15 	stw	zero,-12(fp)
   50c08:	00001d06 	br	50c80 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   50c0c:	00c00174 	movhi	r3,5
   50c10:	18c93b04 	addi	r3,r3,9452
   50c14:	e0bffd17 	ldw	r2,-12(fp)
   50c18:	10800324 	muli	r2,r2,12
   50c1c:	1885883a 	add	r2,r3,r2
   50c20:	10800017 	ldw	r2,0(r2)
   50c24:	1000131e 	bne	r2,zero,50c74 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   50c28:	00c00174 	movhi	r3,5
   50c2c:	18c93b04 	addi	r3,r3,9452
   50c30:	e0bffd17 	ldw	r2,-12(fp)
   50c34:	10800324 	muli	r2,r2,12
   50c38:	1885883a 	add	r2,r3,r2
   50c3c:	e0ffff17 	ldw	r3,-4(fp)
   50c40:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   50c44:	00800174 	movhi	r2,5
   50c48:	108df804 	addi	r2,r2,14304
   50c4c:	10c00017 	ldw	r3,0(r2)
   50c50:	e0bffd17 	ldw	r2,-12(fp)
   50c54:	1880040e 	bge	r3,r2,50c68 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   50c58:	00800174 	movhi	r2,5
   50c5c:	108df804 	addi	r2,r2,14304
   50c60:	e0fffd17 	ldw	r3,-12(fp)
   50c64:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   50c68:	e0bffd17 	ldw	r2,-12(fp)
   50c6c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   50c70:	00000606 	br	50c8c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50c74:	e0bffd17 	ldw	r2,-12(fp)
   50c78:	10800044 	addi	r2,r2,1
   50c7c:	e0bffd15 	stw	r2,-12(fp)
   50c80:	e0bffd17 	ldw	r2,-12(fp)
   50c84:	10800810 	cmplti	r2,r2,32
   50c88:	103fe01e 	bne	r2,zero,50c0c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   50c8c:	e0bffe17 	ldw	r2,-8(fp)
}
   50c90:	e037883a 	mov	sp,fp
   50c94:	df000017 	ldw	fp,0(sp)
   50c98:	dec00104 	addi	sp,sp,4
   50c9c:	f800283a 	ret

00050ca0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   50ca0:	defffe04 	addi	sp,sp,-8
   50ca4:	dfc00115 	stw	ra,4(sp)
   50ca8:	df000015 	stw	fp,0(sp)
   50cac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   50cb0:	0009883a 	mov	r4,zero
   50cb4:	01440004 	movi	r5,4096
   50cb8:	005128c0 	call	5128c <alt_icache_flush>
#endif
}
   50cbc:	e037883a 	mov	sp,fp
   50cc0:	dfc00117 	ldw	ra,4(sp)
   50cc4:	df000017 	ldw	fp,0(sp)
   50cc8:	dec00204 	addi	sp,sp,8
   50ccc:	f800283a 	ret

00050cd0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   50cd0:	defff904 	addi	sp,sp,-28
   50cd4:	dfc00615 	stw	ra,24(sp)
   50cd8:	df000515 	stw	fp,20(sp)
   50cdc:	df000504 	addi	fp,sp,20
   50ce0:	e13ffc15 	stw	r4,-16(fp)
   50ce4:	e17ffd15 	stw	r5,-12(fp)
   50ce8:	e1bffe15 	stw	r6,-8(fp)
   50cec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   50cf0:	e0800217 	ldw	r2,8(fp)
   50cf4:	d8800015 	stw	r2,0(sp)
   50cf8:	e13ffc17 	ldw	r4,-16(fp)
   50cfc:	e17ffd17 	ldw	r5,-12(fp)
   50d00:	e1bffe17 	ldw	r6,-8(fp)
   50d04:	e1ffff17 	ldw	r7,-4(fp)
   50d08:	0050ea80 	call	50ea8 <alt_iic_isr_register>
}  
   50d0c:	e037883a 	mov	sp,fp
   50d10:	dfc00117 	ldw	ra,4(sp)
   50d14:	df000017 	ldw	fp,0(sp)
   50d18:	dec00204 	addi	sp,sp,8
   50d1c:	f800283a 	ret

00050d20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   50d20:	defff904 	addi	sp,sp,-28
   50d24:	df000615 	stw	fp,24(sp)
   50d28:	df000604 	addi	fp,sp,24
   50d2c:	e13ffe15 	stw	r4,-8(fp)
   50d30:	e17fff15 	stw	r5,-4(fp)
   50d34:	e0bfff17 	ldw	r2,-4(fp)
   50d38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50d3c:	0005303a 	rdctl	r2,status
   50d40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50d44:	e0fffb17 	ldw	r3,-20(fp)
   50d48:	00bfff84 	movi	r2,-2
   50d4c:	1884703a 	and	r2,r3,r2
   50d50:	1001703a 	wrctl	status,r2
  
  return context;
   50d54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   50d58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   50d5c:	e0bffa17 	ldw	r2,-24(fp)
   50d60:	00c00044 	movi	r3,1
   50d64:	1884983a 	sll	r2,r3,r2
   50d68:	1007883a 	mov	r3,r2
   50d6c:	00800174 	movhi	r2,5
   50d70:	10950d04 	addi	r2,r2,21556
   50d74:	10800017 	ldw	r2,0(r2)
   50d78:	1886b03a 	or	r3,r3,r2
   50d7c:	00800174 	movhi	r2,5
   50d80:	10950d04 	addi	r2,r2,21556
   50d84:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   50d88:	00800174 	movhi	r2,5
   50d8c:	10950d04 	addi	r2,r2,21556
   50d90:	10800017 	ldw	r2,0(r2)
   50d94:	100170fa 	wrctl	ienable,r2
   50d98:	e0bffc17 	ldw	r2,-16(fp)
   50d9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50da0:	e0bffd17 	ldw	r2,-12(fp)
   50da4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50da8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   50dac:	e037883a 	mov	sp,fp
   50db0:	df000017 	ldw	fp,0(sp)
   50db4:	dec00104 	addi	sp,sp,4
   50db8:	f800283a 	ret

00050dbc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   50dbc:	defff904 	addi	sp,sp,-28
   50dc0:	df000615 	stw	fp,24(sp)
   50dc4:	df000604 	addi	fp,sp,24
   50dc8:	e13ffe15 	stw	r4,-8(fp)
   50dcc:	e17fff15 	stw	r5,-4(fp)
   50dd0:	e0bfff17 	ldw	r2,-4(fp)
   50dd4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50dd8:	0005303a 	rdctl	r2,status
   50ddc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50de0:	e0fffb17 	ldw	r3,-20(fp)
   50de4:	00bfff84 	movi	r2,-2
   50de8:	1884703a 	and	r2,r3,r2
   50dec:	1001703a 	wrctl	status,r2
  
  return context;
   50df0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   50df4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   50df8:	e0bffa17 	ldw	r2,-24(fp)
   50dfc:	00c00044 	movi	r3,1
   50e00:	1884983a 	sll	r2,r3,r2
   50e04:	0084303a 	nor	r2,zero,r2
   50e08:	1007883a 	mov	r3,r2
   50e0c:	00800174 	movhi	r2,5
   50e10:	10950d04 	addi	r2,r2,21556
   50e14:	10800017 	ldw	r2,0(r2)
   50e18:	1886703a 	and	r3,r3,r2
   50e1c:	00800174 	movhi	r2,5
   50e20:	10950d04 	addi	r2,r2,21556
   50e24:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   50e28:	00800174 	movhi	r2,5
   50e2c:	10950d04 	addi	r2,r2,21556
   50e30:	10800017 	ldw	r2,0(r2)
   50e34:	100170fa 	wrctl	ienable,r2
   50e38:	e0bffc17 	ldw	r2,-16(fp)
   50e3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50e40:	e0bffd17 	ldw	r2,-12(fp)
   50e44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50e48:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   50e4c:	e037883a 	mov	sp,fp
   50e50:	df000017 	ldw	fp,0(sp)
   50e54:	dec00104 	addi	sp,sp,4
   50e58:	f800283a 	ret

00050e5c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   50e5c:	defffc04 	addi	sp,sp,-16
   50e60:	df000315 	stw	fp,12(sp)
   50e64:	df000304 	addi	fp,sp,12
   50e68:	e13ffe15 	stw	r4,-8(fp)
   50e6c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   50e70:	000530fa 	rdctl	r2,ienable
   50e74:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   50e78:	e0bfff17 	ldw	r2,-4(fp)
   50e7c:	00c00044 	movi	r3,1
   50e80:	1884983a 	sll	r2,r3,r2
   50e84:	1007883a 	mov	r3,r2
   50e88:	e0bffd17 	ldw	r2,-12(fp)
   50e8c:	1884703a 	and	r2,r3,r2
   50e90:	1004c03a 	cmpne	r2,r2,zero
   50e94:	10803fcc 	andi	r2,r2,255
}
   50e98:	e037883a 	mov	sp,fp
   50e9c:	df000017 	ldw	fp,0(sp)
   50ea0:	dec00104 	addi	sp,sp,4
   50ea4:	f800283a 	ret

00050ea8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   50ea8:	defff504 	addi	sp,sp,-44
   50eac:	dfc00a15 	stw	ra,40(sp)
   50eb0:	df000915 	stw	fp,36(sp)
   50eb4:	df000904 	addi	fp,sp,36
   50eb8:	e13ffc15 	stw	r4,-16(fp)
   50ebc:	e17ffd15 	stw	r5,-12(fp)
   50ec0:	e1bffe15 	stw	r6,-8(fp)
   50ec4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   50ec8:	00bffa84 	movi	r2,-22
   50ecc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   50ed0:	e0bffd17 	ldw	r2,-12(fp)
   50ed4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   50ed8:	e0bff817 	ldw	r2,-32(fp)
   50edc:	10800808 	cmpgei	r2,r2,32
   50ee0:	1000271e 	bne	r2,zero,50f80 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50ee4:	0005303a 	rdctl	r2,status
   50ee8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50eec:	e0fffa17 	ldw	r3,-24(fp)
   50ef0:	00bfff84 	movi	r2,-2
   50ef4:	1884703a 	and	r2,r3,r2
   50ef8:	1001703a 	wrctl	status,r2
  
  return context;
   50efc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   50f00:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   50f04:	00c00174 	movhi	r3,5
   50f08:	18daae04 	addi	r3,r3,27320
   50f0c:	e0bff817 	ldw	r2,-32(fp)
   50f10:	100490fa 	slli	r2,r2,3
   50f14:	1885883a 	add	r2,r3,r2
   50f18:	e0fffe17 	ldw	r3,-8(fp)
   50f1c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   50f20:	00c00174 	movhi	r3,5
   50f24:	18daae04 	addi	r3,r3,27320
   50f28:	e0bff817 	ldw	r2,-32(fp)
   50f2c:	100490fa 	slli	r2,r2,3
   50f30:	1885883a 	add	r2,r3,r2
   50f34:	10800104 	addi	r2,r2,4
   50f38:	e0ffff17 	ldw	r3,-4(fp)
   50f3c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   50f40:	e0bffe17 	ldw	r2,-8(fp)
   50f44:	10000526 	beq	r2,zero,50f5c <alt_iic_isr_register+0xb4>
   50f48:	e0bff817 	ldw	r2,-32(fp)
   50f4c:	e13ffc17 	ldw	r4,-16(fp)
   50f50:	100b883a 	mov	r5,r2
   50f54:	0050d200 	call	50d20 <alt_ic_irq_enable>
   50f58:	00000406 	br	50f6c <alt_iic_isr_register+0xc4>
   50f5c:	e0bff817 	ldw	r2,-32(fp)
   50f60:	e13ffc17 	ldw	r4,-16(fp)
   50f64:	100b883a 	mov	r5,r2
   50f68:	0050dbc0 	call	50dbc <alt_ic_irq_disable>
   50f6c:	e0bff715 	stw	r2,-36(fp)
   50f70:	e0bff917 	ldw	r2,-28(fp)
   50f74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50f78:	e0bffb17 	ldw	r2,-20(fp)
   50f7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   50f80:	e0bff717 	ldw	r2,-36(fp)
}
   50f84:	e037883a 	mov	sp,fp
   50f88:	dfc00117 	ldw	ra,4(sp)
   50f8c:	df000017 	ldw	fp,0(sp)
   50f90:	dec00204 	addi	sp,sp,8
   50f94:	f800283a 	ret

00050f98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   50f98:	defff904 	addi	sp,sp,-28
   50f9c:	dfc00615 	stw	ra,24(sp)
   50fa0:	df000515 	stw	fp,20(sp)
   50fa4:	df000504 	addi	fp,sp,20
   50fa8:	e13ffc15 	stw	r4,-16(fp)
   50fac:	e17ffd15 	stw	r5,-12(fp)
   50fb0:	e1bffe15 	stw	r6,-8(fp)
   50fb4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   50fb8:	e13ffd17 	ldw	r4,-12(fp)
   50fbc:	e17ffe17 	ldw	r5,-8(fp)
   50fc0:	e1bfff17 	ldw	r6,-4(fp)
   50fc4:	004ee000 	call	4ee00 <open>
   50fc8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   50fcc:	e0bffb17 	ldw	r2,-20(fp)
   50fd0:	10001c16 	blt	r2,zero,51044 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   50fd4:	00c00174 	movhi	r3,5
   50fd8:	18c93b04 	addi	r3,r3,9452
   50fdc:	e0bffb17 	ldw	r2,-20(fp)
   50fe0:	10800324 	muli	r2,r2,12
   50fe4:	1885883a 	add	r2,r3,r2
   50fe8:	10c00017 	ldw	r3,0(r2)
   50fec:	e0bffc17 	ldw	r2,-16(fp)
   50ff0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   50ff4:	00c00174 	movhi	r3,5
   50ff8:	18c93b04 	addi	r3,r3,9452
   50ffc:	e0bffb17 	ldw	r2,-20(fp)
   51000:	10800324 	muli	r2,r2,12
   51004:	1885883a 	add	r2,r3,r2
   51008:	10800104 	addi	r2,r2,4
   5100c:	10c00017 	ldw	r3,0(r2)
   51010:	e0bffc17 	ldw	r2,-16(fp)
   51014:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   51018:	00c00174 	movhi	r3,5
   5101c:	18c93b04 	addi	r3,r3,9452
   51020:	e0bffb17 	ldw	r2,-20(fp)
   51024:	10800324 	muli	r2,r2,12
   51028:	1885883a 	add	r2,r3,r2
   5102c:	10800204 	addi	r2,r2,8
   51030:	10c00017 	ldw	r3,0(r2)
   51034:	e0bffc17 	ldw	r2,-16(fp)
   51038:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   5103c:	e13ffb17 	ldw	r4,-20(fp)
   51040:	004f0940 	call	4f094 <alt_release_fd>
  }
} 
   51044:	e037883a 	mov	sp,fp
   51048:	dfc00117 	ldw	ra,4(sp)
   5104c:	df000017 	ldw	fp,0(sp)
   51050:	dec00204 	addi	sp,sp,8
   51054:	f800283a 	ret

00051058 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   51058:	defffb04 	addi	sp,sp,-20
   5105c:	dfc00415 	stw	ra,16(sp)
   51060:	df000315 	stw	fp,12(sp)
   51064:	df000304 	addi	fp,sp,12
   51068:	e13ffd15 	stw	r4,-12(fp)
   5106c:	e17ffe15 	stw	r5,-8(fp)
   51070:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   51074:	01000174 	movhi	r4,5
   51078:	21093e04 	addi	r4,r4,9464
   5107c:	e17ffd17 	ldw	r5,-12(fp)
   51080:	01800044 	movi	r6,1
   51084:	01c07fc4 	movi	r7,511
   51088:	0050f980 	call	50f98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   5108c:	01000174 	movhi	r4,5
   51090:	21093b04 	addi	r4,r4,9452
   51094:	e17ffe17 	ldw	r5,-8(fp)
   51098:	000d883a 	mov	r6,zero
   5109c:	01c07fc4 	movi	r7,511
   510a0:	0050f980 	call	50f98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   510a4:	01000174 	movhi	r4,5
   510a8:	21094104 	addi	r4,r4,9476
   510ac:	e17fff17 	ldw	r5,-4(fp)
   510b0:	01800044 	movi	r6,1
   510b4:	01c07fc4 	movi	r7,511
   510b8:	0050f980 	call	50f98 <alt_open_fd>
}  
   510bc:	e037883a 	mov	sp,fp
   510c0:	dfc00117 	ldw	ra,4(sp)
   510c4:	df000017 	ldw	fp,0(sp)
   510c8:	dec00204 	addi	sp,sp,8
   510cc:	f800283a 	ret

000510d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   510d0:	defffa04 	addi	sp,sp,-24
   510d4:	df000515 	stw	fp,20(sp)
   510d8:	df000504 	addi	fp,sp,20
   510dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   510e0:	0005303a 	rdctl	r2,status
   510e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   510e8:	e0fffc17 	ldw	r3,-16(fp)
   510ec:	00bfff84 	movi	r2,-2
   510f0:	1884703a 	and	r2,r3,r2
   510f4:	1001703a 	wrctl	status,r2
  
  return context;
   510f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   510fc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   51100:	e0bfff17 	ldw	r2,-4(fp)
   51104:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   51108:	e0bffd17 	ldw	r2,-12(fp)
   5110c:	10800017 	ldw	r2,0(r2)
   51110:	e0fffd17 	ldw	r3,-12(fp)
   51114:	18c00117 	ldw	r3,4(r3)
   51118:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   5111c:	e0bffd17 	ldw	r2,-12(fp)
   51120:	10800117 	ldw	r2,4(r2)
   51124:	e0fffd17 	ldw	r3,-12(fp)
   51128:	18c00017 	ldw	r3,0(r3)
   5112c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   51130:	e0bffd17 	ldw	r2,-12(fp)
   51134:	e0fffd17 	ldw	r3,-12(fp)
   51138:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   5113c:	e0bffd17 	ldw	r2,-12(fp)
   51140:	e0fffd17 	ldw	r3,-12(fp)
   51144:	10c00015 	stw	r3,0(r2)
   51148:	e0bffb17 	ldw	r2,-20(fp)
   5114c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51150:	e0bffe17 	ldw	r2,-8(fp)
   51154:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   51158:	e037883a 	mov	sp,fp
   5115c:	df000017 	ldw	fp,0(sp)
   51160:	dec00104 	addi	sp,sp,4
   51164:	f800283a 	ret

00051168 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   51168:	defffb04 	addi	sp,sp,-20
   5116c:	dfc00415 	stw	ra,16(sp)
   51170:	df000315 	stw	fp,12(sp)
   51174:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   51178:	d0a01817 	ldw	r2,-32672(gp)
   5117c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   51180:	d0a72e17 	ldw	r2,-25416(gp)
   51184:	10800044 	addi	r2,r2,1
   51188:	d0a72e15 	stw	r2,-25416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5118c:	00002e06 	br	51248 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   51190:	e0bffd17 	ldw	r2,-12(fp)
   51194:	10800017 	ldw	r2,0(r2)
   51198:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   5119c:	e0bffd17 	ldw	r2,-12(fp)
   511a0:	10800403 	ldbu	r2,16(r2)
   511a4:	10803fcc 	andi	r2,r2,255
   511a8:	10000426 	beq	r2,zero,511bc <alt_tick+0x54>
   511ac:	d0a72e17 	ldw	r2,-25416(gp)
   511b0:	1000021e 	bne	r2,zero,511bc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   511b4:	e0bffd17 	ldw	r2,-12(fp)
   511b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   511bc:	e0bffd17 	ldw	r2,-12(fp)
   511c0:	10800217 	ldw	r2,8(r2)
   511c4:	d0e72e17 	ldw	r3,-25416(gp)
   511c8:	18801d36 	bltu	r3,r2,51240 <alt_tick+0xd8>
   511cc:	e0bffd17 	ldw	r2,-12(fp)
   511d0:	10800403 	ldbu	r2,16(r2)
   511d4:	10803fcc 	andi	r2,r2,255
   511d8:	1000191e 	bne	r2,zero,51240 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   511dc:	e0bffd17 	ldw	r2,-12(fp)
   511e0:	10c00317 	ldw	r3,12(r2)
   511e4:	e0bffd17 	ldw	r2,-12(fp)
   511e8:	10800517 	ldw	r2,20(r2)
   511ec:	1009883a 	mov	r4,r2
   511f0:	183ee83a 	callr	r3
   511f4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   511f8:	e0bfff17 	ldw	r2,-4(fp)
   511fc:	1000031e 	bne	r2,zero,5120c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   51200:	e13ffd17 	ldw	r4,-12(fp)
   51204:	00510d00 	call	510d0 <alt_alarm_stop>
   51208:	00000d06 	br	51240 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   5120c:	e0bffd17 	ldw	r2,-12(fp)
   51210:	10c00217 	ldw	r3,8(r2)
   51214:	e0bfff17 	ldw	r2,-4(fp)
   51218:	1887883a 	add	r3,r3,r2
   5121c:	e0bffd17 	ldw	r2,-12(fp)
   51220:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   51224:	e0bffd17 	ldw	r2,-12(fp)
   51228:	10c00217 	ldw	r3,8(r2)
   5122c:	d0a72e17 	ldw	r2,-25416(gp)
   51230:	1880032e 	bgeu	r3,r2,51240 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   51234:	e0bffd17 	ldw	r2,-12(fp)
   51238:	00c00044 	movi	r3,1
   5123c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   51240:	e0bffe17 	ldw	r2,-8(fp)
   51244:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   51248:	e0fffd17 	ldw	r3,-12(fp)
   5124c:	d0a01804 	addi	r2,gp,-32672
   51250:	18bfcf1e 	bne	r3,r2,51190 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   51254:	0001883a 	nop
}
   51258:	e037883a 	mov	sp,fp
   5125c:	dfc00117 	ldw	ra,4(sp)
   51260:	df000017 	ldw	fp,0(sp)
   51264:	dec00204 	addi	sp,sp,8
   51268:	f800283a 	ret

0005126c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   5126c:	deffff04 	addi	sp,sp,-4
   51270:	df000015 	stw	fp,0(sp)
   51274:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   51278:	000170fa 	wrctl	ienable,zero
}
   5127c:	e037883a 	mov	sp,fp
   51280:	df000017 	ldw	fp,0(sp)
   51284:	dec00104 	addi	sp,sp,4
   51288:	f800283a 	ret

0005128c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   5128c:	defffb04 	addi	sp,sp,-20
   51290:	df000415 	stw	fp,16(sp)
   51294:	df000404 	addi	fp,sp,16
   51298:	e13ffe15 	stw	r4,-8(fp)
   5129c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   512a0:	e0bfff17 	ldw	r2,-4(fp)
   512a4:	10840070 	cmpltui	r2,r2,4097
   512a8:	1000021e 	bne	r2,zero,512b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   512ac:	00840004 	movi	r2,4096
   512b0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   512b4:	e0fffe17 	ldw	r3,-8(fp)
   512b8:	e0bfff17 	ldw	r2,-4(fp)
   512bc:	1885883a 	add	r2,r3,r2
   512c0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   512c4:	e0bffe17 	ldw	r2,-8(fp)
   512c8:	e0bffc15 	stw	r2,-16(fp)
   512cc:	00000506 	br	512e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   512d0:	e0bffc17 	ldw	r2,-16(fp)
   512d4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   512d8:	e0bffc17 	ldw	r2,-16(fp)
   512dc:	10800804 	addi	r2,r2,32
   512e0:	e0bffc15 	stw	r2,-16(fp)
   512e4:	e0fffc17 	ldw	r3,-16(fp)
   512e8:	e0bffd17 	ldw	r2,-12(fp)
   512ec:	18bff836 	bltu	r3,r2,512d0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   512f0:	e0bffe17 	ldw	r2,-8(fp)
   512f4:	108007cc 	andi	r2,r2,31
   512f8:	10000226 	beq	r2,zero,51304 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   512fc:	e0bffc17 	ldw	r2,-16(fp)
   51300:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   51304:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   51308:	e037883a 	mov	sp,fp
   5130c:	df000017 	ldw	fp,0(sp)
   51310:	dec00104 	addi	sp,sp,4
   51314:	f800283a 	ret

00051318 <atexit>:
   51318:	200b883a 	mov	r5,r4
   5131c:	000d883a 	mov	r6,zero
   51320:	0009883a 	mov	r4,zero
   51324:	000f883a 	mov	r7,zero
   51328:	00513e01 	jmpi	513e0 <__register_exitproc>

0005132c <exit>:
   5132c:	defffe04 	addi	sp,sp,-8
   51330:	000b883a 	mov	r5,zero
   51334:	dc000015 	stw	r16,0(sp)
   51338:	dfc00115 	stw	ra,4(sp)
   5133c:	2021883a 	mov	r16,r4
   51340:	00515100 	call	51510 <__call_exitprocs>
   51344:	00800174 	movhi	r2,5
   51348:	108def04 	addi	r2,r2,14268
   5134c:	11000017 	ldw	r4,0(r2)
   51350:	20800f17 	ldw	r2,60(r4)
   51354:	10000126 	beq	r2,zero,5135c <exit+0x30>
   51358:	103ee83a 	callr	r2
   5135c:	8009883a 	mov	r4,r16
   51360:	00516b00 	call	516b0 <_exit>

00051364 <memcmp>:
   51364:	01c000c4 	movi	r7,3
   51368:	3980192e 	bgeu	r7,r6,513d0 <memcmp+0x6c>
   5136c:	2904b03a 	or	r2,r5,r4
   51370:	11c4703a 	and	r2,r2,r7
   51374:	10000f26 	beq	r2,zero,513b4 <memcmp+0x50>
   51378:	20c00003 	ldbu	r3,0(r4)
   5137c:	28800003 	ldbu	r2,0(r5)
   51380:	1880151e 	bne	r3,r2,513d8 <memcmp+0x74>
   51384:	31bfff84 	addi	r6,r6,-2
   51388:	01ffffc4 	movi	r7,-1
   5138c:	00000406 	br	513a0 <memcmp+0x3c>
   51390:	20c00003 	ldbu	r3,0(r4)
   51394:	28800003 	ldbu	r2,0(r5)
   51398:	31bfffc4 	addi	r6,r6,-1
   5139c:	18800e1e 	bne	r3,r2,513d8 <memcmp+0x74>
   513a0:	21000044 	addi	r4,r4,1
   513a4:	29400044 	addi	r5,r5,1
   513a8:	31fff91e 	bne	r6,r7,51390 <memcmp+0x2c>
   513ac:	0005883a 	mov	r2,zero
   513b0:	f800283a 	ret
   513b4:	20c00017 	ldw	r3,0(r4)
   513b8:	28800017 	ldw	r2,0(r5)
   513bc:	1880041e 	bne	r3,r2,513d0 <memcmp+0x6c>
   513c0:	31bfff04 	addi	r6,r6,-4
   513c4:	21000104 	addi	r4,r4,4
   513c8:	29400104 	addi	r5,r5,4
   513cc:	39bff936 	bltu	r7,r6,513b4 <memcmp+0x50>
   513d0:	303fe91e 	bne	r6,zero,51378 <memcmp+0x14>
   513d4:	003ff506 	br	513ac <memcmp+0x48>
   513d8:	1885c83a 	sub	r2,r3,r2
   513dc:	f800283a 	ret

000513e0 <__register_exitproc>:
   513e0:	defffa04 	addi	sp,sp,-24
   513e4:	00800174 	movhi	r2,5
   513e8:	108def04 	addi	r2,r2,14268
   513ec:	dc000315 	stw	r16,12(sp)
   513f0:	14000017 	ldw	r16,0(r2)
   513f4:	dc400415 	stw	r17,16(sp)
   513f8:	dfc00515 	stw	ra,20(sp)
   513fc:	80805217 	ldw	r2,328(r16)
   51400:	2023883a 	mov	r17,r4
   51404:	10003e26 	beq	r2,zero,51500 <__register_exitproc+0x120>
   51408:	10c00117 	ldw	r3,4(r2)
   5140c:	020007c4 	movi	r8,31
   51410:	40c0180e 	bge	r8,r3,51474 <__register_exitproc+0x94>
   51414:	00800034 	movhi	r2,0
   51418:	10800004 	addi	r2,r2,0
   5141c:	1000061e 	bne	r2,zero,51438 <__register_exitproc+0x58>
   51420:	00bfffc4 	movi	r2,-1
   51424:	dfc00517 	ldw	ra,20(sp)
   51428:	dc400417 	ldw	r17,16(sp)
   5142c:	dc000317 	ldw	r16,12(sp)
   51430:	dec00604 	addi	sp,sp,24
   51434:	f800283a 	ret
   51438:	01006404 	movi	r4,400
   5143c:	d9400015 	stw	r5,0(sp)
   51440:	d9800115 	stw	r6,4(sp)
   51444:	d9c00215 	stw	r7,8(sp)
   51448:	00000000 	call	0 <__reset-0x40000>
   5144c:	d9400017 	ldw	r5,0(sp)
   51450:	d9800117 	ldw	r6,4(sp)
   51454:	d9c00217 	ldw	r7,8(sp)
   51458:	103ff126 	beq	r2,zero,51420 <__register_exitproc+0x40>
   5145c:	80c05217 	ldw	r3,328(r16)
   51460:	10000115 	stw	zero,4(r2)
   51464:	10c00015 	stw	r3,0(r2)
   51468:	80805215 	stw	r2,328(r16)
   5146c:	10006215 	stw	zero,392(r2)
   51470:	10006315 	stw	zero,396(r2)
   51474:	10c00117 	ldw	r3,4(r2)
   51478:	88000d1e 	bne	r17,zero,514b0 <__register_exitproc+0xd0>
   5147c:	19000084 	addi	r4,r3,2
   51480:	2109883a 	add	r4,r4,r4
   51484:	18c00044 	addi	r3,r3,1
   51488:	2109883a 	add	r4,r4,r4
   5148c:	1109883a 	add	r4,r2,r4
   51490:	10c00115 	stw	r3,4(r2)
   51494:	0005883a 	mov	r2,zero
   51498:	21400015 	stw	r5,0(r4)
   5149c:	dfc00517 	ldw	ra,20(sp)
   514a0:	dc400417 	ldw	r17,16(sp)
   514a4:	dc000317 	ldw	r16,12(sp)
   514a8:	dec00604 	addi	sp,sp,24
   514ac:	f800283a 	ret
   514b0:	02400044 	movi	r9,1
   514b4:	12806217 	ldw	r10,392(r2)
   514b8:	48d2983a 	sll	r9,r9,r3
   514bc:	19000804 	addi	r4,r3,32
   514c0:	18d1883a 	add	r8,r3,r3
   514c4:	2109883a 	add	r4,r4,r4
   514c8:	4211883a 	add	r8,r8,r8
   514cc:	2109883a 	add	r4,r4,r4
   514d0:	1109883a 	add	r4,r2,r4
   514d4:	1211883a 	add	r8,r2,r8
   514d8:	5254b03a 	or	r10,r10,r9
   514dc:	21c02215 	stw	r7,136(r4)
   514e0:	41802215 	stw	r6,136(r8)
   514e4:	12806215 	stw	r10,392(r2)
   514e8:	01000084 	movi	r4,2
   514ec:	893fe31e 	bne	r17,r4,5147c <__register_exitproc+0x9c>
   514f0:	11006317 	ldw	r4,396(r2)
   514f4:	2252b03a 	or	r9,r4,r9
   514f8:	12406315 	stw	r9,396(r2)
   514fc:	003fdf06 	br	5147c <__register_exitproc+0x9c>
   51500:	00800174 	movhi	r2,5
   51504:	109aee04 	addi	r2,r2,27576
   51508:	80805215 	stw	r2,328(r16)
   5150c:	003fbe06 	br	51408 <__register_exitproc+0x28>

00051510 <__call_exitprocs>:
   51510:	00800174 	movhi	r2,5
   51514:	108def04 	addi	r2,r2,14268
   51518:	10800017 	ldw	r2,0(r2)
   5151c:	defff304 	addi	sp,sp,-52
   51520:	df000b15 	stw	fp,44(sp)
   51524:	d8800015 	stw	r2,0(sp)
   51528:	10805204 	addi	r2,r2,328
   5152c:	dd400815 	stw	r21,32(sp)
   51530:	dfc00c15 	stw	ra,48(sp)
   51534:	ddc00a15 	stw	r23,40(sp)
   51538:	dd800915 	stw	r22,36(sp)
   5153c:	dd000715 	stw	r20,28(sp)
   51540:	dcc00615 	stw	r19,24(sp)
   51544:	dc800515 	stw	r18,20(sp)
   51548:	dc400415 	stw	r17,16(sp)
   5154c:	dc000315 	stw	r16,12(sp)
   51550:	d9000115 	stw	r4,4(sp)
   51554:	2839883a 	mov	fp,r5
   51558:	d8800215 	stw	r2,8(sp)
   5155c:	057fffc4 	movi	r21,-1
   51560:	d8800017 	ldw	r2,0(sp)
   51564:	ddc00217 	ldw	r23,8(sp)
   51568:	14805217 	ldw	r18,328(r2)
   5156c:	90001726 	beq	r18,zero,515cc <__call_exitprocs+0xbc>
   51570:	94400117 	ldw	r17,4(r18)
   51574:	8c3fffc4 	addi	r16,r17,-1
   51578:	80001116 	blt	r16,zero,515c0 <__call_exitprocs+0xb0>
   5157c:	8c400044 	addi	r17,r17,1
   51580:	8427883a 	add	r19,r16,r16
   51584:	8c63883a 	add	r17,r17,r17
   51588:	95802204 	addi	r22,r18,136
   5158c:	9ce7883a 	add	r19,r19,r19
   51590:	8c63883a 	add	r17,r17,r17
   51594:	b4e7883a 	add	r19,r22,r19
   51598:	9463883a 	add	r17,r18,r17
   5159c:	e0001726 	beq	fp,zero,515fc <__call_exitprocs+0xec>
   515a0:	8c87c83a 	sub	r3,r17,r18
   515a4:	b0c7883a 	add	r3,r22,r3
   515a8:	18c01e17 	ldw	r3,120(r3)
   515ac:	1f001326 	beq	r3,fp,515fc <__call_exitprocs+0xec>
   515b0:	843fffc4 	addi	r16,r16,-1
   515b4:	9cffff04 	addi	r19,r19,-4
   515b8:	8c7fff04 	addi	r17,r17,-4
   515bc:	857ff71e 	bne	r16,r21,5159c <__call_exitprocs+0x8c>
   515c0:	00800034 	movhi	r2,0
   515c4:	10800004 	addi	r2,r2,0
   515c8:	10002a1e 	bne	r2,zero,51674 <__call_exitprocs+0x164>
   515cc:	dfc00c17 	ldw	ra,48(sp)
   515d0:	df000b17 	ldw	fp,44(sp)
   515d4:	ddc00a17 	ldw	r23,40(sp)
   515d8:	dd800917 	ldw	r22,36(sp)
   515dc:	dd400817 	ldw	r21,32(sp)
   515e0:	dd000717 	ldw	r20,28(sp)
   515e4:	dcc00617 	ldw	r19,24(sp)
   515e8:	dc800517 	ldw	r18,20(sp)
   515ec:	dc400417 	ldw	r17,16(sp)
   515f0:	dc000317 	ldw	r16,12(sp)
   515f4:	dec00d04 	addi	sp,sp,52
   515f8:	f800283a 	ret
   515fc:	91000117 	ldw	r4,4(r18)
   51600:	88c00017 	ldw	r3,0(r17)
   51604:	213fffc4 	addi	r4,r4,-1
   51608:	24001526 	beq	r4,r16,51660 <__call_exitprocs+0x150>
   5160c:	88000015 	stw	zero,0(r17)
   51610:	183fe726 	beq	r3,zero,515b0 <__call_exitprocs+0xa0>
   51614:	00800044 	movi	r2,1
   51618:	1408983a 	sll	r4,r2,r16
   5161c:	91406217 	ldw	r5,392(r18)
   51620:	95000117 	ldw	r20,4(r18)
   51624:	214a703a 	and	r5,r4,r5
   51628:	28000b26 	beq	r5,zero,51658 <__call_exitprocs+0x148>
   5162c:	91406317 	ldw	r5,396(r18)
   51630:	2148703a 	and	r4,r4,r5
   51634:	20000c1e 	bne	r4,zero,51668 <__call_exitprocs+0x158>
   51638:	99400017 	ldw	r5,0(r19)
   5163c:	d9000117 	ldw	r4,4(sp)
   51640:	183ee83a 	callr	r3
   51644:	90c00117 	ldw	r3,4(r18)
   51648:	1d3fc51e 	bne	r3,r20,51560 <__call_exitprocs+0x50>
   5164c:	b8c00017 	ldw	r3,0(r23)
   51650:	1cbfd726 	beq	r3,r18,515b0 <__call_exitprocs+0xa0>
   51654:	003fc206 	br	51560 <__call_exitprocs+0x50>
   51658:	183ee83a 	callr	r3
   5165c:	003ff906 	br	51644 <__call_exitprocs+0x134>
   51660:	94000115 	stw	r16,4(r18)
   51664:	003fea06 	br	51610 <__call_exitprocs+0x100>
   51668:	99000017 	ldw	r4,0(r19)
   5166c:	183ee83a 	callr	r3
   51670:	003ff406 	br	51644 <__call_exitprocs+0x134>
   51674:	90c00117 	ldw	r3,4(r18)
   51678:	1800071e 	bne	r3,zero,51698 <__call_exitprocs+0x188>
   5167c:	90c00017 	ldw	r3,0(r18)
   51680:	18000926 	beq	r3,zero,516a8 <__call_exitprocs+0x198>
   51684:	9009883a 	mov	r4,r18
   51688:	b8c00015 	stw	r3,0(r23)
   5168c:	00000000 	call	0 <__reset-0x40000>
   51690:	bc800017 	ldw	r18,0(r23)
   51694:	003fb506 	br	5156c <__call_exitprocs+0x5c>
   51698:	90c00017 	ldw	r3,0(r18)
   5169c:	902f883a 	mov	r23,r18
   516a0:	1825883a 	mov	r18,r3
   516a4:	003fb106 	br	5156c <__call_exitprocs+0x5c>
   516a8:	0007883a 	mov	r3,zero
   516ac:	003ffb06 	br	5169c <__call_exitprocs+0x18c>

000516b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   516b0:	defffc04 	addi	sp,sp,-16
   516b4:	df000315 	stw	fp,12(sp)
   516b8:	df000304 	addi	fp,sp,12
   516bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   516c0:	0001883a 	nop
   516c4:	e0bfff17 	ldw	r2,-4(fp)
   516c8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   516cc:	e0bffd17 	ldw	r2,-12(fp)
   516d0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   516d4:	e0bffe17 	ldw	r2,-8(fp)
   516d8:	10000226 	beq	r2,zero,516e4 <_exit+0x34>
    ALT_SIM_FAIL();
   516dc:	002af070 	cmpltui	zero,zero,43969
   516e0:	00000106 	br	516e8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   516e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   516e8:	003fff06 	br	516e8 <_exit+0x38>
