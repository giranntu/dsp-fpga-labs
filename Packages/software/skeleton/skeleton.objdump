
skeleton.elf:     file format elf32-littlenios2
skeleton.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00014d24 memsz 0x00014d24 flags r-x
    LOAD off    0x00015d44 vaddr 0x00054d44 paddr 0x000569b4 align 2**12
         filesz 0x00001c70 memsz 0x00001c70 flags rw-
    LOAD off    0x00018624 vaddr 0x00058624 paddr 0x00058624 align 2**12
         filesz 0x00000000 memsz 0x000017fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001467c  000401bc  000401bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000050c  00054838  00054838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c70  00054d44  000569b4  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000017fc  00058624  00058624  00018624  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00059e20  00059e20  000179b4  2**0
                  CONTENTS
  7 .comment      00000049  00000000  00000000  000179b4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010c0  00000000  00000000  00017a00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000001c  00000000  00000000  00018ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000247e5  00000000  00000000  00018adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009e21  00000000  00000000  0003d2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cc0b  00000000  00000000  000470e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002e98  00000000  00000000  00053cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003d2a  00000000  00000000  00056b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019e2f  00000000  00000000  0005a8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000746e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a20  00000000  00000000  00074718  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007a3a9  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  0007a3ac  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007a3b6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007a3b7  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007a3b8  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007a3bc  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007a3c0  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007a3c4  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007a3cd  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007a3d6  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0007a3df  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000f  00000000  00000000  0007a3e7  2**0
                  CONTENTS, READONLY
 30 .jdi          00004b68  00000000  00000000  0007a3f6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00119e53  00000000  00000000  0007ef5e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401bc l    d  .text	00000000 .text
00054838 l    d  .rodata	00000000 .rodata
00054d44 l    d  .rwdata	00000000 .rwdata
00058624 l    d  .bss	00000000 .bss
00059e20 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../skeleton_bsp//obj/HAL/src/crt0.o
00040204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 aic23.c
00054d70 l     O .rwdata	0000002c aic23_default_config
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 i2s_control.c
00000000 l    df *ABS*	00000000 main.c
00041b54 l     F .text	00000050 handle_switch0_interrupt
00041ba4 l     F .text	00000050 handle_switch1_interrupt
00041bf4 l     F .text	00000148 handle_key0_interrupt
00041d3c l     F .text	00000058 handle_key1_interrupt
00041d94 l     F .text	00000050 handle_key2_interrupt
00041de4 l     F .text	00000060 handle_key3_interrupt
00041eb4 l     F .text	000000bc handle_leftready_interrupt_test
00041f70 l     F .text	000000b0 handle_rightready_interrupt_test
00000000 l    df *ABS*	00000000 spi_control.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000548e8 l     O .rodata	00000108 two_over_pi
00054868 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00054a30 l     O .rodata	00000010 init_jk
000549f0 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00044a94 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00054b86 l     O .rodata	00000010 zeroes.4240
00054b96 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 dtoa.c
0004a264 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00054dd8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0005521c l     O .rwdata	00000020 lc_ctype_charset
000551fc l     O .rwdata	00000020 lc_message_charset
0005523c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00054bc8 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00054cec l     O .rodata	00000010 zeroes.4184
00054cfc l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004f974 l     F .text	00000008 __fp_lock
0004f97c l     F .text	00000008 __fp_unlock
0004f990 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000516b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000517d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00051800 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00051ab0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00051ba4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00051c88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00051e64 l     F .text	00000050 alt_get_errno
00051eb4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
000520d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000569a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00052334 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0005247c l     F .text	00000038 alt_dev_reg
00055824 l     O .rwdata	00001060 jtag_uart
00056884 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00052778 l     F .text	00000204 altera_avalon_jtag_uart_irq
0005297c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00053154 l     F .text	00000098 altera_avalon_uart_irq
000531ec l     F .text	000000e0 altera_avalon_uart_rxirq
000532cc l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00053464 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00053690 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00053a10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00054114 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0004da78 g     F .text	00000074 _mprec_log10
0004db64 g     F .text	0000008c __any_on
000508d4 g     F .text	00000054 _isatty_r
00054bd4 g     O .rodata	00000028 __mprec_tinytens
00051dac g     F .text	00000078 alt_main
00040f9c g     F .text	00000068 AIC23_format
00040c80 g     F .text	0000006c AIC23_deemp
00047fc4 g     F .text	000000a8 _puts_r
00059d20 g     O .bss	00000100 alt_irq
000446a4 g     F .text	00000014 fabs
00050928 g     F .text	0000005c _lseek_r
00040a60 g     F .text	0000006c AIC23_bypass
000569b4 g       *ABS*	00000000 __flash_rwdata_start
00046ba0 g     F .text	00000084 .hidden __eqdf2
00054d9c g     O .rwdata	00000028 aic23_demo
00059e20 g       *ABS*	00000000 __alt_heap_start
00056954 g     O .rwdata	00000004 key1_id
0005694c g     O .rwdata	00000004 switch1_id
00050664 g     F .text	0000005c __sseek
0004fcc4 g     F .text	00000010 __sinit
0004c04c g     F .text	0000007c _setlocale_r
0004fb2c g     F .text	00000068 __sfmoreglue
00051e44 g     F .text	00000020 __malloc_unlock
0004249c g     F .text	00000180 spi_send
000586dc g     O .bss	00000200 datatest
000405f4 g     F .text	00000068 AIC23_line_rim
000588dc g     O .bss	00000036 leftChannelData
00058670 g     O .bss	00000004 setFreqFlag
0004caf4 g     F .text	0000015c memmove
00041e44 g     F .text	00000030 unsigned2signed
0004fcac g     F .text	00000018 _cleanup
00048158 g     F .text	000000e4 snprintf
000403dc g     F .text	0000003c AIC_setFreq
0004cc50 g     F .text	000000a8 _Balloc
000459c0 g     F .text	00000078 .hidden __fixsfsi
00040208 g     F .text	000000ac AIC23_init
00046c24 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040988 g     F .text	0000006c AIC23_sidetone_add
00040020 g       *ABS*	00000000 __flash_exceptions_start
0005087c g     F .text	00000058 _fstat_r
00058698 g     O .bss	00000004 errno
000446b8 g     F .text	000001f4 floor
000505e0 g     F .text	00000008 __seofread
0004e490 g     F .text	00001038 ___svfiprintf_internal_r
00042670 g     F .text	00000074 uart_sendInt16
000586a4 g     O .bss	00000004 alt_argv
0005e948 g       *ABS*	00000000 _gp
00041004 g     F .text	0000006c AIC23_clkin
000454c4 g     F .text	000004fc .hidden __subsf3
000402b4 g     F .text	00000030 AIC23_reset
00058674 g     O .bss	00000002 loop
000556a4 g     O .rwdata	00000180 alt_fd_list
00040458 g     F .text	00000068 AIC23_line_lrs
000411b8 g     F .text	00000068 AIC23_clk_mode
00042a74 g     F .text	0000079c __ieee754_rem_pio2
00053bbc g     F .text	00000090 alt_find_dev
0004c9bc g     F .text	00000138 memcpy
00040790 g     F .text	00000064 AIC23_head_lhv
0004f984 g     F .text	0000000c _cleanup_r
00047d80 g     F .text	000000d0 .hidden __floatsidf
000541d4 g     F .text	00000078 alt_io_redirect
00051530 g     F .text	000000e0 .hidden __ltdf2
00054838 g       *ABS*	00000000 __DTOR_END__
0004806c g     F .text	00000014 puts
0004e158 g     F .text	00000074 __fpclassifyd
0004d9d4 g     F .text	000000a4 __ratio
000404c0 g     F .text	00000068 AIC23_line_lim
00052b78 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00044bb0 g     F .text	00000008 .hidden __udivsi3
00051b00 g     F .text	000000a4 isatty
000407f4 g     F .text	00000068 AIC23_head_rls
00054c24 g     O .rodata	000000c8 __mprec_tens
0004c0c8 g     F .text	0000000c __locale_charset
00043210 g     F .text	000004a4 __kernel_cos
00054408 g     F .text	0000008c alt_icache_flush
00058694 g     O .bss	00000004 __malloc_top_pad
00056980 g     O .rwdata	00000004 __mb_cur_max
0004c0f8 g     F .text	0000000c _localeconv_r
0004d05c g     F .text	0000003c __i2b
0004bb8c g     F .text	000004c0 __sfvwrite_r
0004e1cc g     F .text	00000054 _sbrk_r
000410dc g     F .text	00000070 AIC23_setFreq
00050984 g     F .text	0000005c _read_r
00056958 g     O .rwdata	00000004 key2_id
0005699c g     O .rwdata	00000004 alt_max_fd
00050778 g     F .text	000000f0 _fclose_r
0004f944 g     F .text	00000030 fflush
00058690 g     O .bss	00000004 __malloc_max_sbrked_mem
00051900 g     F .text	000001b0 alt_irq_register
00056964 g     O .rwdata	00000004 rightready_id
000443dc g     F .text	000002c8 __kernel_sin
00047e50 g     F .text	00000110 .hidden __extendsfdf2
00041e74 g     F .text	00000040 signed2unsigned
00040528 g     F .text	00000064 AIC23_line_liv
00045a38 g     F .text	0000089c .hidden __adddf3
0005696c g     O .rwdata	00000004 sampleFrequency
0004d77c g     F .text	0000011c __b2d
0005864c g     O .bss	00000004 convIndex
00059cea g     O .bss	00000036 DataBufferCopy
00050fa0 g     F .text	00000590 .hidden __umoddi3
00051cd8 g     F .text	000000d4 lseek
00056978 g     O .rwdata	00000004 _global_impure_ptr
0004dbf0 g     F .text	00000568 _realloc_r
00059e20 g       *ABS*	00000000 __bss_end
00054024 g     F .text	000000f0 alt_iic_isr_register
000542e4 g     F .text	00000104 alt_tick
000414bc g     F .text	000000e4 I2S_send_left
000509e0 g     F .text	000005c0 .hidden __udivdi3
00054bfc g     O .rodata	00000028 __mprec_bigtens
0004ce40 g     F .text	00000104 __s2b
00051610 g     F .text	000000a4 .hidden __floatunsidf
0004d524 g     F .text	00000060 __mcmp
000530ac g     F .text	000000a8 altera_avalon_uart_init
00041220 g     F .text	00000030 AIC23_on
0004fce4 g     F .text	00000018 __fp_lock_all
00053fd8 g     F .text	0000004c alt_ic_irq_enabled
00040b3c g     F .text	00000070 AIC23_mic_mute
0005424c g     F .text	00000098 alt_alarm_stop
0005869c g     O .bss	00000004 alt_irq_active
000413cc g     F .text	000000f0 I2S_collect_right
000400ec g     F .exceptions	000000d0 alt_irq_handler
0005567c g     O .rwdata	00000028 alt_dev_null
000436b4 g     F .text	00000d28 __kernel_rem_pio2
000539cc g     F .text	00000044 alt_dcache_flush_all
0004cf44 g     F .text	00000068 __hi0bits
00047cf8 g     F .text	00000088 .hidden __fixdfsi
000569b4 g       *ABS*	00000000 __ram_rwdata_end
00056994 g     O .rwdata	00000008 alt_dev_list
00052384 g     F .text	000000f8 write
00058912 g     O .bss	00000400 rx_buffer
0004065c g     F .text	00000064 AIC23_line_riv
0004114c g     F .text	0000006c AIC23_bosr
00054d44 g       *ABS*	00000000 __ram_rodata_end
00051850 g     F .text	000000b0 fstat
00051530 g     F .text	000000e0 .hidden __ledf2
000412d4 g     F .text	000000f8 I2S_collect_left
0004d294 g     F .text	00000140 __pow5mult
00058688 g     O .bss	00000004 __nlocale_changed
00044bb8 g     F .text	00000008 .hidden __umodsi3
00040cec g     F .text	00000068 AIC23_adc_highpass
00059e20 g       *ABS*	00000000 end
000415a0 g     F .text	000000e4 I2S_send_right
00058660 g     O .bss	00000004 leftBufferFull
000536e0 g     F .text	000001ac altera_avalon_uart_write
0005862c g     O .bss	00000004 key0
00058630 g     O .bss	00000004 key1
000526b4 g     F .text	000000c4 altera_avalon_jtag_uart_init
00042834 g     F .text	000000ac uart_SendTestBuff
00054838 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
00052ffc g     F .text	00000060 altera_avalon_uart_write_fd
00047f60 g     F .text	00000064 .hidden __clzsi2
00048080 g     F .text	000000d8 _snprintf_r
0005305c g     F .text	00000050 altera_avalon_uart_close_fd
00052d84 g     F .text	00000218 altera_avalon_jtag_uart_write
0004fcd4 g     F .text	00000004 __sfp_lock_acquire
0004c8d4 g     F .text	000000e8 memchr
0004fe38 g     F .text	000002f0 _free_r
0004c0d4 g     F .text	00000010 __locale_mb_cur_max
00054670 g     F .text	00000194 __call_exitprocs
00058d14 g     O .bss	00000fa0 convResultBuffer
00040e54 g     F .text	0000006c AIC23_lr_swap
00040de8 g     F .text	0000006c AIC23_mode
00058684 g     O .bss	00000004 __mlocale_changed
00040334 g     F .text	000000a8 AIC23_demo
00056984 g     O .rwdata	00000004 __malloc_sbrk_base
000401bc g     F .text	0000004c _start
00058654 g     O .bss	00000004 leftCount
000586ac g     O .bss	00000004 _alt_tick_rate
00042984 g     F .text	000000f0 sin
0004d3d4 g     F .text	00000150 __lshift
000586b0 g     O .bss	00000004 _alt_nticks
00052128 g     F .text	000000fc read
000524e8 g     F .text	00000068 alt_sys_init
0004e2c4 g     F .text	000001cc __ssprint_r
00040d9c g     F .text	0000004c AIC23_power_off
0005455c g     F .text	00000114 __register_exitproc
0004d098 g     F .text	000001fc __multiply
00052a24 g     F .text	00000068 altera_avalon_jtag_uart_close
00054d44 g       *ABS*	00000000 __ram_rwdata_start
00054838 g       *ABS*	00000000 __ram_rodata_start
000586b4 g     O .bss	00000028 __malloc_current_mallinfo
00058668 g     O .bss	00000004 uartStartRecvFlag
0004d898 g     F .text	0000013c __d2b
00058658 g     O .bss	00000004 lefttestCount
00041070 g     F .text	0000006c AIC23_clkout
00040acc g     F .text	00000070 AIC23_input
00052550 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000428e0 g     F .text	000000a4 uart_SendConvBuff
00053d60 g     F .text	000000b4 alt_get_fd
00042020 g     F .text	00000254 system_initialization
00050724 g     F .text	00000054 _close_r
00041250 g     F .text	00000030 AIC23_off
00056950 g     O .rwdata	00000004 key0_id
000544e0 g     F .text	0000007c memcmp
00052610 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00059e20 g       *ABS*	00000000 __alt_stack_base
00052660 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00040bac g     F .text	00000068 AIC23_mic_boost
00040ec0 g     F .text	0000006c AIC23_lr_phase
0004f4c8 g     F .text	00000154 __swsetup_r
0005863c g     O .bss	00000004 leftready
000462d4 g     F .text	000008cc .hidden __divdf3
0004fb94 g     F .text	00000118 __sfp
00058664 g     O .bss	00000004 uartStartSendFlag
0004daec g     F .text	00000078 __copybits
00055274 g     O .rwdata	00000408 __malloc_av_
0004fce0 g     F .text	00000004 __sinit_lock_release
00046d04 g     F .text	00000724 .hidden __muldf3
0005058c g     F .text	00000054 __sread
0005867c g     O .bss	00000004 counter
00053c4c g     F .text	00000114 alt_find_file
00053a60 g     F .text	000000a4 alt_dev_llist_insert
00051e24 g     F .text	00000020 __malloc_lock
00052284 g     F .text	000000b0 sbrk
000482d4 g     F .text	00001f90 ___svfprintf_internal_r
0004085c g     F .text	0000006c AIC23_head_rzc
0004f8e8 g     F .text	0000005c _fflush_r
0004f61c g     F .text	000000c4 _calloc_r
00058624 g       *ABS*	00000000 __bss_start
00050468 g     F .text	00000124 memset
00056968 g     O .rwdata	00000004 uart_id
00042274 g     F .text	00000228 main
00056948 g     O .rwdata	00000004 switch0_id
000586a8 g     O .bss	00000004 alt_envp
0005868c g     O .bss	00000004 __malloc_max_total_mem
000525b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000406c0 g     F .text	00000068 AIC23_head_lrs
000506c0 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
00050868 g     F .text	00000014 fclose
0004a464 g     F .text	00001728 _dtoa_r
0004c12c g     F .text	000007a8 _malloc_r
000569a0 g     O .rwdata	00000004 alt_errno
00050128 g     F .text	000000c4 _fwalk
00044b00 g     F .text	00000054 .hidden __divsi3
0004fd14 g     F .text	00000124 _malloc_trim_r
00054838 g       *ABS*	00000000 __CTOR_END__
000450a0 g     F .text	00000424 .hidden __mulsf3
00056974 g     O .rwdata	00000002 gain
0005695c g     O .rwdata	00000004 key3_id
0004e220 g     F .text	000000a4 strcmp
00054838 g       *ABS*	00000000 __flash_rodata_start
00054838 g       *ABS*	00000000 __DTOR_LIST__
000426e4 g     F .text	000000b8 uart_sendFloat
00058638 g     O .bss	00000004 key3
00044a78 g     F .text	0000001c copysign
00041280 g     F .text	00000054 delay
00046ba0 g     F .text	00000084 .hidden __nedf2
000524b4 g     F .text	00000034 alt_irq_init
00052224 g     F .text	00000060 alt_release_fd
000408c8 g     F .text	00000064 AIC23_head_rhv
0004092c g     F .text	0000005c AIC23_sidetone_disable
00054a40 g     O .rodata	00000100 .hidden __clz_tab
00058680 g     O .bss	00000004 _PathLocale
00058628 g     O .bss	00000004 switch1
00054494 g     F .text	00000014 atexit
00040d54 g     F .text	00000048 AIC23_power_on
000506c8 g     F .text	0000005c _write_r
0004c104 g     F .text	0000001c setlocale
00056960 g     O .rwdata	00000004 leftready_id
00054d44 g     O .rwdata	0000002c aic23_config
0005697c g     O .rwdata	00000004 _impure_ptr
000586a0 g     O .bss	00000004 alt_argc
0004f6e0 g     F .text	00000208 __sflush_r
000448ac g     F .text	000001cc scalbn
00040c14 g     F .text	0000006c AIC23_dac_mute
00053b60 g     F .text	0000005c _do_dtors
0004c0f0 g     F .text	00000008 __locale_cjk_lang
00058650 g     O .bss	00000002 RxHead
00040020 g       .exceptions	00000000 alt_irq_entry
0004d71c g     F .text	00000060 __ulp
0004fcfc g     F .text	00000018 __fp_unlock_all
0004058c g     F .text	00000068 AIC23_line_rls
000416c0 g     F .text	00000494 fft
0005698c g     O .rwdata	00000008 alt_fs_list
0004261c g     F .text	00000054 uart_sendByte
00040f2c g     F .text	00000070 AIC23_input_len
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004c120 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00054dc4 g     O .rwdata	00000014 sine_table
0004279c g     F .text	00000098 uart_SendLeftBuff
000409f4 g     F .text	0000006c AIC23_dac_select
00040728 g     F .text	00000068 AIC23_head_lzc
00056970 g     O .rwdata	00000004 calBuffersize
00053e44 g     F .text	00000050 alt_ic_isr_register
000569b4 g       *ABS*	00000000 _edata
00052f9c g     F .text	00000060 altera_avalon_uart_read_fd
00059e20 g       *ABS*	00000000 _end
000401bc g       *ABS*	00000000 __ram_exceptions_end
00052a8c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00058634 g     O .bss	00000004 key2
00058648 g     O .bss	00000004 rightChannel
00058640 g     O .bss	00000004 rightready
00053f34 g     F .text	000000a4 alt_ic_irq_disable
000505e8 g     F .text	0000007c __swrite
00056988 g     O .rwdata	00000004 __malloc_trim_threshold
000543e8 g     F .text	00000020 altera_nios2_qsys_irq_init
0004c0e4 g     F .text	0000000c __locale_msgcharset
000544a8 g     F .text	00000038 exit
000501ec g     F .text	000000c4 _fwalk_reent
0004d584 g     F .text	00000198 __mdiff
00044b54 g     F .text	0000005c .hidden __modsi3
000402e4 g     F .text	00000050 AIC23_config
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00058678 g     O .bss	00000004 uart
0004fcd8 g     F .text	00000004 __sfp_lock_release
00058644 g     O .bss	00000004 leftChannel
00053410 g     F .text	00000054 altera_avalon_uart_close
00054804 g     F .text	00000034 _exit
0005388c g     F .text	00000140 alt_alarm_start
00041684 g     F .text	0000003c I2S_send_lr
000502b0 g     F .text	000001b8 __smakebuf_r
0004823c g     F .text	00000098 strlen
00051f80 g     F .text	00000158 open
00046c24 g     F .text	000000e0 .hidden __gedf2
00053e14 g     F .text	00000030 alt_icache_flush_all
0005866c g     O .bss	00000004 sr
00040418 g     F .text	00000040 AIC23_read
000569a4 g     O .rwdata	00000004 alt_priority_mask
00053e94 g     F .text	000000a0 alt_ic_irq_enable
000534b4 g     F .text	000001dc altera_avalon_uart_read
00059cb4 g     O .bss	00000036 rightChannelData
00047428 g     F .text	000008d0 .hidden __subdf3
0004cfac g     F .text	000000b0 __lo0bits
00058624 g     O .bss	00000004 switch0
000569ac g     O .rwdata	00000008 alt_alarm_list
00053b04 g     F .text	0000005c _do_ctors
00051704 g     F .text	000000d0 close
00044bc0 g     F .text	000004e0 .hidden __addsf3
00051c08 g     F .text	00000080 alt_load
0005865c g     O .bss	00000004 rightCount
00000000  w      *UND*	00000000 free
0004fcdc g     F .text	00000004 __sinit_lock_acquire
0004cd20 g     F .text	00000120 __multadd
0004ccf8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffce004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406f14 	ori	at,at,444
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	008001b4 	movhi	r2,6
   40130:	10a74804 	addi	r2,r2,-25312
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	008001b4 	movhi	r2,6
   40148:	10a74804 	addi	r2,r2,-25312
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	21000104 	addi	r4,r4,4
   40158:	1105883a 	add	r2,r2,r4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffce11c>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffce110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	e037883a 	mov	sp,fp
   401ac:	dfc00117 	ldw	ra,4(sp)
   401b0:	df000017 	ldw	fp,0(sp)
   401b4:	dec00204 	addi	sp,sp,8
   401b8:	f800283a 	ret

Disassembly of section .text:

000401bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   401c8:	00bffd16 	blt	zero,r2,401c0 <__alt_data_end+0xfffce1c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401cc:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401d0:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   401d4:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401d8:	d6ba5214 	ori	gp,gp,59720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401dc:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401e0:	10a18914 	ori	r2,r2,34340

    movhi r3, %hi(__bss_end)
   401e4:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401e8:	18e78814 	ori	r3,r3,40480

    beq r2, r3, 1f
   401ec:	10c00326 	beq	r2,r3,401fc <_start+0x40>

0:
    stw zero, (r2)
   401f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f8:	10fffd36 	bltu	r2,r3,401f0 <__alt_data_end+0xfffce1f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401fc:	0051c080 	call	51c08 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40200:	0051dac0 	call	51dac <alt_main>

00040204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40204:	003fff06 	br	40204 <__alt_data_end+0xfffce204>

00040208 <AIC23_init>:
//AIC Master Mode                                                           0130     0A00    0C00    0E5E   (0001->48k,0019->32k, 0023->44.1k, 001D->96k)
extern unsigned int aic23_demo[10];    // = {0x0017, 0x0017, 0x01f9, 0x01f9, 0x0012, 0x0000, 0x0000, 0x0042, 0x0001, 0x0001};;


// Initializes AIC to default
void AIC23_init(){
   40208:	defffd04 	addi	sp,sp,-12
   4020c:	dfc00215 	stw	ra,8(sp)
   40210:	df000115 	stw	fp,4(sp)
   40214:	df000104 	addi	fp,sp,4
	int i = 0;
   40218:	e03fff15 	stw	zero,-4(fp)
	for(i = 0; i < 11; i++){
   4021c:	e03fff15 	stw	zero,-4(fp)
   40220:	00001c06 	br	40294 <AIC23_init+0x8c>
		spi_send(i, aic23_default_config[i]);
   40224:	e13fff17 	ldw	r4,-4(fp)
   40228:	00800174 	movhi	r2,5
   4022c:	10935c04 	addi	r2,r2,19824
   40230:	e0ffff17 	ldw	r3,-4(fp)
   40234:	18c7883a 	add	r3,r3,r3
   40238:	18c7883a 	add	r3,r3,r3
   4023c:	10c5883a 	add	r2,r2,r3
   40240:	10800017 	ldw	r2,0(r2)
   40244:	100b883a 	mov	r5,r2
   40248:	004249c0 	call	4249c <spi_send>
		aic23_config[i] = aic23_default_config[i];
   4024c:	00800174 	movhi	r2,5
   40250:	10935c04 	addi	r2,r2,19824
   40254:	e0ffff17 	ldw	r3,-4(fp)
   40258:	18c7883a 	add	r3,r3,r3
   4025c:	18c7883a 	add	r3,r3,r3
   40260:	10c5883a 	add	r2,r2,r3
   40264:	10800017 	ldw	r2,0(r2)
   40268:	1009883a 	mov	r4,r2
   4026c:	00800174 	movhi	r2,5
   40270:	10935104 	addi	r2,r2,19780
   40274:	e0ffff17 	ldw	r3,-4(fp)
   40278:	18c7883a 	add	r3,r3,r3
   4027c:	18c7883a 	add	r3,r3,r3
   40280:	10c5883a 	add	r2,r2,r3
   40284:	11000015 	stw	r4,0(r2)


// Initializes AIC to default
void AIC23_init(){
	int i = 0;
	for(i = 0; i < 11; i++){
   40288:	e0bfff17 	ldw	r2,-4(fp)
   4028c:	10800044 	addi	r2,r2,1
   40290:	e0bfff15 	stw	r2,-4(fp)
   40294:	e0bfff17 	ldw	r2,-4(fp)
   40298:	108002d0 	cmplti	r2,r2,11
   4029c:	103fe11e 	bne	r2,zero,40224 <__alt_data_end+0xfffce224>
		spi_send(i, aic23_default_config[i]);
		aic23_config[i] = aic23_default_config[i];
	}
}
   402a0:	e037883a 	mov	sp,fp
   402a4:	dfc00117 	ldw	ra,4(sp)
   402a8:	df000017 	ldw	fp,0(sp)
   402ac:	dec00204 	addi	sp,sp,8
   402b0:	f800283a 	ret

000402b4 <AIC23_reset>:

void AIC23_reset(){
   402b4:	defffe04 	addi	sp,sp,-8
   402b8:	dfc00115 	stw	ra,4(sp)
   402bc:	df000015 	stw	fp,0(sp)
   402c0:	d839883a 	mov	fp,sp
	spi_send(0x0F, 0x00);
   402c4:	010003c4 	movi	r4,15
   402c8:	000b883a 	mov	r5,zero
   402cc:	004249c0 	call	4249c <spi_send>
}
   402d0:	e037883a 	mov	sp,fp
   402d4:	dfc00117 	ldw	ra,4(sp)
   402d8:	df000017 	ldw	fp,0(sp)
   402dc:	dec00204 	addi	sp,sp,8
   402e0:	f800283a 	ret

000402e4 <AIC23_config>:

void AIC23_config(int address, int setting){
   402e4:	defffc04 	addi	sp,sp,-16
   402e8:	dfc00315 	stw	ra,12(sp)
   402ec:	df000215 	stw	fp,8(sp)
   402f0:	df000204 	addi	fp,sp,8
   402f4:	e13ffe15 	stw	r4,-8(fp)
   402f8:	e17fff15 	stw	r5,-4(fp)
	aic23_demo[address] = setting;
   402fc:	e13fff17 	ldw	r4,-4(fp)
   40300:	00800174 	movhi	r2,5
   40304:	10936704 	addi	r2,r2,19868
   40308:	e0fffe17 	ldw	r3,-8(fp)
   4030c:	18c7883a 	add	r3,r3,r3
   40310:	18c7883a 	add	r3,r3,r3
   40314:	10c5883a 	add	r2,r2,r3
   40318:	11000015 	stw	r4,0(r2)
	AIC23_demo();
   4031c:	00403340 	call	40334 <AIC23_demo>
}
   40320:	e037883a 	mov	sp,fp
   40324:	dfc00117 	ldw	ra,4(sp)
   40328:	df000017 	ldw	fp,0(sp)
   4032c:	dec00204 	addi	sp,sp,8
   40330:	f800283a 	ret

00040334 <AIC23_demo>:

/*AIC configuration function: Update all control registers*/
void AIC23_demo(){
   40334:	defffd04 	addi	sp,sp,-12
   40338:	dfc00215 	stw	ra,8(sp)
   4033c:	df000115 	stw	fp,4(sp)
   40340:	df000104 	addi	fp,sp,4
	int i = 0;
   40344:	e03fff15 	stw	zero,-4(fp)
	for(i = 0; i < 10; i++){
   40348:	e03fff15 	stw	zero,-4(fp)
   4034c:	00001b06 	br	403bc <AIC23_demo+0x88>
		spi_send(i, aic23_demo[i]);
   40350:	e13fff17 	ldw	r4,-4(fp)
   40354:	00800174 	movhi	r2,5
   40358:	10936704 	addi	r2,r2,19868
   4035c:	e0ffff17 	ldw	r3,-4(fp)
   40360:	18c7883a 	add	r3,r3,r3
   40364:	18c7883a 	add	r3,r3,r3
   40368:	10c5883a 	add	r2,r2,r3
   4036c:	10800017 	ldw	r2,0(r2)
   40370:	100b883a 	mov	r5,r2
   40374:	004249c0 	call	4249c <spi_send>
		aic23_config[i] = aic23_demo[i];
   40378:	00800174 	movhi	r2,5
   4037c:	10936704 	addi	r2,r2,19868
   40380:	e0ffff17 	ldw	r3,-4(fp)
   40384:	18c7883a 	add	r3,r3,r3
   40388:	18c7883a 	add	r3,r3,r3
   4038c:	10c5883a 	add	r2,r2,r3
   40390:	11000017 	ldw	r4,0(r2)
   40394:	00800174 	movhi	r2,5
   40398:	10935104 	addi	r2,r2,19780
   4039c:	e0ffff17 	ldw	r3,-4(fp)
   403a0:	18c7883a 	add	r3,r3,r3
   403a4:	18c7883a 	add	r3,r3,r3
   403a8:	10c5883a 	add	r2,r2,r3
   403ac:	11000015 	stw	r4,0(r2)
}

/*AIC configuration function: Update all control registers*/
void AIC23_demo(){
	int i = 0;
	for(i = 0; i < 10; i++){
   403b0:	e0bfff17 	ldw	r2,-4(fp)
   403b4:	10800044 	addi	r2,r2,1
   403b8:	e0bfff15 	stw	r2,-4(fp)
   403bc:	e0bfff17 	ldw	r2,-4(fp)
   403c0:	10800290 	cmplti	r2,r2,10
   403c4:	103fe21e 	bne	r2,zero,40350 <__alt_data_end+0xfffce350>
		spi_send(i, aic23_demo[i]);
		aic23_config[i] = aic23_demo[i];
	}
}
   403c8:	e037883a 	mov	sp,fp
   403cc:	dfc00117 	ldw	ra,4(sp)
   403d0:	df000017 	ldw	fp,0(sp)
   403d4:	dec00204 	addi	sp,sp,8
   403d8:	f800283a 	ret

000403dc <AIC_setFreq>:



void AIC_setFreq(int sampleRate){
   403dc:	defffd04 	addi	sp,sp,-12
   403e0:	dfc00215 	stw	ra,8(sp)
   403e4:	df000115 	stw	fp,4(sp)
   403e8:	df000104 	addi	fp,sp,4
   403ec:	e13fff15 	stw	r4,-4(fp)
	aic23_demo[8] = sampleRate;
   403f0:	e0ffff17 	ldw	r3,-4(fp)
   403f4:	00800174 	movhi	r2,5
   403f8:	10936704 	addi	r2,r2,19868
   403fc:	10c00815 	stw	r3,32(r2)
	AIC23_demo();
   40400:	00403340 	call	40334 <AIC23_demo>
}
   40404:	e037883a 	mov	sp,fp
   40408:	dfc00117 	ldw	ra,4(sp)
   4040c:	df000017 	ldw	fp,0(sp)
   40410:	dec00204 	addi	sp,sp,8
   40414:	f800283a 	ret

00040418 <AIC23_read>:
	POWER_DOWN
	DIGITAL_AUDIO_INTERFACE
	SAMPLE_RATE
	DIGITAL_INTERFACE_ACTIVATION
 */
unsigned int AIC23_read(unsigned char address){
   40418:	defffe04 	addi	sp,sp,-8
   4041c:	df000115 	stw	fp,4(sp)
   40420:	df000104 	addi	fp,sp,4
   40424:	2005883a 	mov	r2,r4
   40428:	e0bfff05 	stb	r2,-4(fp)
	return aic23_config[address];
   4042c:	e0ffff03 	ldbu	r3,-4(fp)
   40430:	00800174 	movhi	r2,5
   40434:	10935104 	addi	r2,r2,19780
   40438:	18c7883a 	add	r3,r3,r3
   4043c:	18c7883a 	add	r3,r3,r3
   40440:	10c5883a 	add	r2,r2,r3
   40444:	10800017 	ldw	r2,0(r2)
}
   40448:	e037883a 	mov	sp,fp
   4044c:	df000017 	ldw	fp,0(sp)
   40450:	dec00104 	addi	sp,sp,4
   40454:	f800283a 	ret

00040458 <AIC23_line_lrs>:
/* Left/right line simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_line_lrs(unsigned int simultaneous_update){
   40458:	defffd04 	addi	sp,sp,-12
   4045c:	dfc00215 	stw	ra,8(sp)
   40460:	df000115 	stw	fp,4(sp)
   40464:	df000104 	addi	fp,sp,4
   40468:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x00FF) | (simultaneous_update << 8);
   4046c:	00800174 	movhi	r2,5
   40470:	10935104 	addi	r2,r2,19780
   40474:	10800017 	ldw	r2,0(r2)
   40478:	10c03fcc 	andi	r3,r2,255
   4047c:	e0bfff17 	ldw	r2,-4(fp)
   40480:	1004923a 	slli	r2,r2,8
   40484:	1886b03a 	or	r3,r3,r2
   40488:	00800174 	movhi	r2,5
   4048c:	10935104 	addi	r2,r2,19780
   40490:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40494:	00800174 	movhi	r2,5
   40498:	10935104 	addi	r2,r2,19780
   4049c:	10800017 	ldw	r2,0(r2)
   404a0:	0009883a 	mov	r4,zero
   404a4:	100b883a 	mov	r5,r2
   404a8:	004249c0 	call	4249c <spi_send>
}
   404ac:	e037883a 	mov	sp,fp
   404b0:	dfc00117 	ldw	ra,4(sp)
   404b4:	df000017 	ldw	fp,0(sp)
   404b8:	dec00204 	addi	sp,sp,8
   404bc:	f800283a 	ret

000404c0 <AIC23_line_lim>:
/* Left line input mute
   Valid inputs:
		NORMAL
		MUTED
*/
void AIC23_line_lim(unsigned int mute){
   404c0:	defffd04 	addi	sp,sp,-12
   404c4:	dfc00215 	stw	ra,8(sp)
   404c8:	df000115 	stw	fp,4(sp)
   404cc:	df000104 	addi	fp,sp,4
   404d0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x017F) | (mute << 7);
   404d4:	00800174 	movhi	r2,5
   404d8:	10935104 	addi	r2,r2,19780
   404dc:	10800017 	ldw	r2,0(r2)
   404e0:	10c05fcc 	andi	r3,r2,383
   404e4:	e0bfff17 	ldw	r2,-4(fp)
   404e8:	100491fa 	slli	r2,r2,7
   404ec:	1886b03a 	or	r3,r3,r2
   404f0:	00800174 	movhi	r2,5
   404f4:	10935104 	addi	r2,r2,19780
   404f8:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   404fc:	00800174 	movhi	r2,5
   40500:	10935104 	addi	r2,r2,19780
   40504:	10800017 	ldw	r2,0(r2)
   40508:	0009883a 	mov	r4,zero
   4050c:	100b883a 	mov	r5,r2
   40510:	004249c0 	call	4249c <spi_send>
}
   40514:	e037883a 	mov	sp,fp
   40518:	dfc00117 	ldw	ra,4(sp)
   4051c:	df000017 	ldw	fp,0(sp)
   40520:	dec00204 	addi	sp,sp,8
   40524:	f800283a 	ret

00040528 <AIC23_line_liv>:
/* Left line input volume control
   Valid inputs:
		0b10111 = 0dB default
		0b11111 = +12 dB down to 0b00000 = -34.5dB in 1.5dB steps
*/
void AIC23_line_liv(unsigned int volume){
   40528:	defffd04 	addi	sp,sp,-12
   4052c:	dfc00215 	stw	ra,8(sp)
   40530:	df000115 	stw	fp,4(sp)
   40534:	df000104 	addi	fp,sp,4
   40538:	e13fff15 	stw	r4,-4(fp)
	aic23_config[0] = (aic23_config[0] & 0x01E0) | (volume);
   4053c:	00800174 	movhi	r2,5
   40540:	10935104 	addi	r2,r2,19780
   40544:	10800017 	ldw	r2,0(r2)
   40548:	10c0780c 	andi	r3,r2,480
   4054c:	e0bfff17 	ldw	r2,-4(fp)
   40550:	1886b03a 	or	r3,r3,r2
   40554:	00800174 	movhi	r2,5
   40558:	10935104 	addi	r2,r2,19780
   4055c:	10c00015 	stw	r3,0(r2)
	spi_send(0x00, aic23_config[0]);
   40560:	00800174 	movhi	r2,5
   40564:	10935104 	addi	r2,r2,19780
   40568:	10800017 	ldw	r2,0(r2)
   4056c:	0009883a 	mov	r4,zero
   40570:	100b883a 	mov	r5,r2
   40574:	004249c0 	call	4249c <spi_send>
}
   40578:	e037883a 	mov	sp,fp
   4057c:	dfc00117 	ldw	ra,4(sp)
   40580:	df000017 	ldw	fp,0(sp)
   40584:	dec00204 	addi	sp,sp,8
   40588:	f800283a 	ret

0004058c <AIC23_line_rls>:
/* Right/left line simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_line_rls(unsigned int simultaneous_update){
   4058c:	defffd04 	addi	sp,sp,-12
   40590:	dfc00215 	stw	ra,8(sp)
   40594:	df000115 	stw	fp,4(sp)
   40598:	df000104 	addi	fp,sp,4
   4059c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x00FF) | (simultaneous_update << 8);
   405a0:	00800174 	movhi	r2,5
   405a4:	10935104 	addi	r2,r2,19780
   405a8:	10800117 	ldw	r2,4(r2)
   405ac:	10c03fcc 	andi	r3,r2,255
   405b0:	e0bfff17 	ldw	r2,-4(fp)
   405b4:	1004923a 	slli	r2,r2,8
   405b8:	1886b03a 	or	r3,r3,r2
   405bc:	00800174 	movhi	r2,5
   405c0:	10935104 	addi	r2,r2,19780
   405c4:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   405c8:	00800174 	movhi	r2,5
   405cc:	10935104 	addi	r2,r2,19780
   405d0:	10800117 	ldw	r2,4(r2)
   405d4:	01000044 	movi	r4,1
   405d8:	100b883a 	mov	r5,r2
   405dc:	004249c0 	call	4249c <spi_send>
}
   405e0:	e037883a 	mov	sp,fp
   405e4:	dfc00117 	ldw	ra,4(sp)
   405e8:	df000017 	ldw	fp,0(sp)
   405ec:	dec00204 	addi	sp,sp,8
   405f0:	f800283a 	ret

000405f4 <AIC23_line_rim>:
/* Right line input mute
   Valid inputs:
		NORMAL
		MUTED
*/
void AIC23_line_rim(unsigned int mute){
   405f4:	defffd04 	addi	sp,sp,-12
   405f8:	dfc00215 	stw	ra,8(sp)
   405fc:	df000115 	stw	fp,4(sp)
   40600:	df000104 	addi	fp,sp,4
   40604:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x017F) | (mute << 7);
   40608:	00800174 	movhi	r2,5
   4060c:	10935104 	addi	r2,r2,19780
   40610:	10800117 	ldw	r2,4(r2)
   40614:	10c05fcc 	andi	r3,r2,383
   40618:	e0bfff17 	ldw	r2,-4(fp)
   4061c:	100491fa 	slli	r2,r2,7
   40620:	1886b03a 	or	r3,r3,r2
   40624:	00800174 	movhi	r2,5
   40628:	10935104 	addi	r2,r2,19780
   4062c:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   40630:	00800174 	movhi	r2,5
   40634:	10935104 	addi	r2,r2,19780
   40638:	10800117 	ldw	r2,4(r2)
   4063c:	01000044 	movi	r4,1
   40640:	100b883a 	mov	r5,r2
   40644:	004249c0 	call	4249c <spi_send>
}
   40648:	e037883a 	mov	sp,fp
   4064c:	dfc00117 	ldw	ra,4(sp)
   40650:	df000017 	ldw	fp,0(sp)
   40654:	dec00204 	addi	sp,sp,8
   40658:	f800283a 	ret

0004065c <AIC23_line_riv>:
/* Right line input volume control
   Valid inputs:
		0b10111 = 0dB default
		0b11111 = +12 dB down to 0b00000 = -34.5dB in 1.5dB steps
*/
void AIC23_line_riv(unsigned int volume){
   4065c:	defffd04 	addi	sp,sp,-12
   40660:	dfc00215 	stw	ra,8(sp)
   40664:	df000115 	stw	fp,4(sp)
   40668:	df000104 	addi	fp,sp,4
   4066c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[1] = (aic23_config[1] & 0x01E0) | (volume);
   40670:	00800174 	movhi	r2,5
   40674:	10935104 	addi	r2,r2,19780
   40678:	10800117 	ldw	r2,4(r2)
   4067c:	10c0780c 	andi	r3,r2,480
   40680:	e0bfff17 	ldw	r2,-4(fp)
   40684:	1886b03a 	or	r3,r3,r2
   40688:	00800174 	movhi	r2,5
   4068c:	10935104 	addi	r2,r2,19780
   40690:	10c00115 	stw	r3,4(r2)
	spi_send(0x01, aic23_config[1]);
   40694:	00800174 	movhi	r2,5
   40698:	10935104 	addi	r2,r2,19780
   4069c:	10800117 	ldw	r2,4(r2)
   406a0:	01000044 	movi	r4,1
   406a4:	100b883a 	mov	r5,r2
   406a8:	004249c0 	call	4249c <spi_send>
}
   406ac:	e037883a 	mov	sp,fp
   406b0:	dfc00117 	ldw	ra,4(sp)
   406b4:	df000017 	ldw	fp,0(sp)
   406b8:	dec00204 	addi	sp,sp,8
   406bc:	f800283a 	ret

000406c0 <AIC23_head_lrs>:
/* Left/right headphone simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_head_lrs(unsigned int simultaneous_update){
   406c0:	defffd04 	addi	sp,sp,-12
   406c4:	dfc00215 	stw	ra,8(sp)
   406c8:	df000115 	stw	fp,4(sp)
   406cc:	df000104 	addi	fp,sp,4
   406d0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x00FF) | (simultaneous_update << 8);
   406d4:	00800174 	movhi	r2,5
   406d8:	10935104 	addi	r2,r2,19780
   406dc:	10800217 	ldw	r2,8(r2)
   406e0:	10c03fcc 	andi	r3,r2,255
   406e4:	e0bfff17 	ldw	r2,-4(fp)
   406e8:	1004923a 	slli	r2,r2,8
   406ec:	1886b03a 	or	r3,r3,r2
   406f0:	00800174 	movhi	r2,5
   406f4:	10935104 	addi	r2,r2,19780
   406f8:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   406fc:	00800174 	movhi	r2,5
   40700:	10935104 	addi	r2,r2,19780
   40704:	10800217 	ldw	r2,8(r2)
   40708:	01000084 	movi	r4,2
   4070c:	100b883a 	mov	r5,r2
   40710:	004249c0 	call	4249c <spi_send>
}
   40714:	e037883a 	mov	sp,fp
   40718:	dfc00117 	ldw	ra,4(sp)
   4071c:	df000017 	ldw	fp,0(sp)
   40720:	dec00204 	addi	sp,sp,8
   40724:	f800283a 	ret

00040728 <AIC23_head_lzc>:
/* Left Channel Zero-Cross Detect
   Valid inputs:
		ON
		OFF
*/
void AIC23_head_lzc(unsigned int zero){
   40728:	defffd04 	addi	sp,sp,-12
   4072c:	dfc00215 	stw	ra,8(sp)
   40730:	df000115 	stw	fp,4(sp)
   40734:	df000104 	addi	fp,sp,4
   40738:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x017F) | (zero << 7);
   4073c:	00800174 	movhi	r2,5
   40740:	10935104 	addi	r2,r2,19780
   40744:	10800217 	ldw	r2,8(r2)
   40748:	10c05fcc 	andi	r3,r2,383
   4074c:	e0bfff17 	ldw	r2,-4(fp)
   40750:	100491fa 	slli	r2,r2,7
   40754:	1886b03a 	or	r3,r3,r2
   40758:	00800174 	movhi	r2,5
   4075c:	10935104 	addi	r2,r2,19780
   40760:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   40764:	00800174 	movhi	r2,5
   40768:	10935104 	addi	r2,r2,19780
   4076c:	10800217 	ldw	r2,8(r2)
   40770:	01000084 	movi	r4,2
   40774:	100b883a 	mov	r5,r2
   40778:	004249c0 	call	4249c <spi_send>
}
   4077c:	e037883a 	mov	sp,fp
   40780:	dfc00117 	ldw	ra,4(sp)
   40784:	df000017 	ldw	fp,0(sp)
   40788:	dec00204 	addi	sp,sp,8
   4078c:	f800283a 	ret

00040790 <AIC23_head_lhv>:
   Valid Inputs:
   	   0b1111001 = 0dB default
   	   0b1111111 = +6dB down to 0b0110000 = -73dB mute in 1dB increments
   	   Anything lower than -73dB is still mute. 79 steps in between max/min.
 */
void AIC23_head_lhv(unsigned int volume){
   40790:	defffd04 	addi	sp,sp,-12
   40794:	dfc00215 	stw	ra,8(sp)
   40798:	df000115 	stw	fp,4(sp)
   4079c:	df000104 	addi	fp,sp,4
   407a0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[2] = (aic23_config[2] & 0x0180) | volume;
   407a4:	00800174 	movhi	r2,5
   407a8:	10935104 	addi	r2,r2,19780
   407ac:	10800217 	ldw	r2,8(r2)
   407b0:	10c0600c 	andi	r3,r2,384
   407b4:	e0bfff17 	ldw	r2,-4(fp)
   407b8:	1886b03a 	or	r3,r3,r2
   407bc:	00800174 	movhi	r2,5
   407c0:	10935104 	addi	r2,r2,19780
   407c4:	10c00215 	stw	r3,8(r2)
	spi_send(0x02, aic23_config[2]);
   407c8:	00800174 	movhi	r2,5
   407cc:	10935104 	addi	r2,r2,19780
   407d0:	10800217 	ldw	r2,8(r2)
   407d4:	01000084 	movi	r4,2
   407d8:	100b883a 	mov	r5,r2
   407dc:	004249c0 	call	4249c <spi_send>
}
   407e0:	e037883a 	mov	sp,fp
   407e4:	dfc00117 	ldw	ra,4(sp)
   407e8:	df000017 	ldw	fp,0(sp)
   407ec:	dec00204 	addi	sp,sp,8
   407f0:	f800283a 	ret

000407f4 <AIC23_head_rls>:
/* Right/left headphone simultaneous volume/mute update
   Valid inputs:
		ENABLED
		DISABLED
*/
void AIC23_head_rls(unsigned int simultaneous_update){
   407f4:	defffd04 	addi	sp,sp,-12
   407f8:	dfc00215 	stw	ra,8(sp)
   407fc:	df000115 	stw	fp,4(sp)
   40800:	df000104 	addi	fp,sp,4
   40804:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x00FF) | (simultaneous_update << 8);
   40808:	00800174 	movhi	r2,5
   4080c:	10935104 	addi	r2,r2,19780
   40810:	10800317 	ldw	r2,12(r2)
   40814:	10c03fcc 	andi	r3,r2,255
   40818:	e0bfff17 	ldw	r2,-4(fp)
   4081c:	1004923a 	slli	r2,r2,8
   40820:	1886b03a 	or	r3,r3,r2
   40824:	00800174 	movhi	r2,5
   40828:	10935104 	addi	r2,r2,19780
   4082c:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   40830:	00800174 	movhi	r2,5
   40834:	10935104 	addi	r2,r2,19780
   40838:	10800317 	ldw	r2,12(r2)
   4083c:	010000c4 	movi	r4,3
   40840:	100b883a 	mov	r5,r2
   40844:	004249c0 	call	4249c <spi_send>
}
   40848:	e037883a 	mov	sp,fp
   4084c:	dfc00117 	ldw	ra,4(sp)
   40850:	df000017 	ldw	fp,0(sp)
   40854:	dec00204 	addi	sp,sp,8
   40858:	f800283a 	ret

0004085c <AIC23_head_rzc>:
/* Right Channel Zero-Cross Detect
   Valid inputs:
		ON
		OFF
*/
void AIC23_head_rzc(unsigned int zero){
   4085c:	defffd04 	addi	sp,sp,-12
   40860:	dfc00215 	stw	ra,8(sp)
   40864:	df000115 	stw	fp,4(sp)
   40868:	df000104 	addi	fp,sp,4
   4086c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x017F) | ((zero & 0x01) << 7);
   40870:	00800174 	movhi	r2,5
   40874:	10935104 	addi	r2,r2,19780
   40878:	10800317 	ldw	r2,12(r2)
   4087c:	10c05fcc 	andi	r3,r2,383
   40880:	e0bfff17 	ldw	r2,-4(fp)
   40884:	100491fa 	slli	r2,r2,7
   40888:	10803fcc 	andi	r2,r2,255
   4088c:	1886b03a 	or	r3,r3,r2
   40890:	00800174 	movhi	r2,5
   40894:	10935104 	addi	r2,r2,19780
   40898:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   4089c:	00800174 	movhi	r2,5
   408a0:	10935104 	addi	r2,r2,19780
   408a4:	10800317 	ldw	r2,12(r2)
   408a8:	010000c4 	movi	r4,3
   408ac:	100b883a 	mov	r5,r2
   408b0:	004249c0 	call	4249c <spi_send>
}
   408b4:	e037883a 	mov	sp,fp
   408b8:	dfc00117 	ldw	ra,4(sp)
   408bc:	df000017 	ldw	fp,0(sp)
   408c0:	dec00204 	addi	sp,sp,8
   408c4:	f800283a 	ret

000408c8 <AIC23_head_rhv>:
   Valid Inputs:
   	   0b1111001 = 0dB default
   	   0b1111111 = +6dB down to 0b0110000 = -73dB mute in 1dB increments
   	   Anything lower than -73dB is still mute. 79 steps in between max/min.
 */
void AIC23_head_rhv(unsigned int volume){
   408c8:	defffd04 	addi	sp,sp,-12
   408cc:	dfc00215 	stw	ra,8(sp)
   408d0:	df000115 	stw	fp,4(sp)
   408d4:	df000104 	addi	fp,sp,4
   408d8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[3] = (aic23_config[3] & 0x0180) | volume;
   408dc:	00800174 	movhi	r2,5
   408e0:	10935104 	addi	r2,r2,19780
   408e4:	10800317 	ldw	r2,12(r2)
   408e8:	10c0600c 	andi	r3,r2,384
   408ec:	e0bfff17 	ldw	r2,-4(fp)
   408f0:	1886b03a 	or	r3,r3,r2
   408f4:	00800174 	movhi	r2,5
   408f8:	10935104 	addi	r2,r2,19780
   408fc:	10c00315 	stw	r3,12(r2)
	spi_send(0x03, aic23_config[3]);
   40900:	00800174 	movhi	r2,5
   40904:	10935104 	addi	r2,r2,19780
   40908:	10800317 	ldw	r2,12(r2)
   4090c:	010000c4 	movi	r4,3
   40910:	100b883a 	mov	r5,r2
   40914:	004249c0 	call	4249c <spi_send>
}
   40918:	e037883a 	mov	sp,fp
   4091c:	dfc00117 	ldw	ra,4(sp)
   40920:	df000017 	ldw	fp,0(sp)
   40924:	dec00204 	addi	sp,sp,8
   40928:	f800283a 	ret

0004092c <AIC23_sidetone_disable>:
//
// 					Analog Audio Path Control
//
/////////////////////////////////////////////////////////////////

void AIC23_sidetone_disable(unsigned int sidetone){
   4092c:	defffd04 	addi	sp,sp,-12
   40930:	dfc00215 	stw	ra,8(sp)
   40934:	df000115 	stw	fp,4(sp)
   40938:	df000104 	addi	fp,sp,4
   4093c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = aic23_config[4] & 0x01DF;
   40940:	00800174 	movhi	r2,5
   40944:	10935104 	addi	r2,r2,19780
   40948:	10800417 	ldw	r2,16(r2)
   4094c:	10c077cc 	andi	r3,r2,479
   40950:	00800174 	movhi	r2,5
   40954:	10935104 	addi	r2,r2,19780
   40958:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   4095c:	00800174 	movhi	r2,5
   40960:	10935104 	addi	r2,r2,19780
   40964:	10800417 	ldw	r2,16(r2)
   40968:	01000104 	movi	r4,4
   4096c:	100b883a 	mov	r5,r2
   40970:	004249c0 	call	4249c <spi_send>
}
   40974:	e037883a 	mov	sp,fp
   40978:	dfc00117 	ldw	ra,4(sp)
   4097c:	df000017 	ldw	fp,0(sp)
   40980:	dec00204 	addi	sp,sp,8
   40984:	f800283a 	ret

00040988 <AIC23_sidetone_add>:

void AIC23_sidetone_add(unsigned int add){
   40988:	defffd04 	addi	sp,sp,-12
   4098c:	dfc00215 	stw	ra,8(sp)
   40990:	df000115 	stw	fp,4(sp)
   40994:	df000104 	addi	fp,sp,4
   40998:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1F) | ((add & 0x0F) << 5);
   4099c:	00800174 	movhi	r2,5
   409a0:	10935104 	addi	r2,r2,19780
   409a4:	10800417 	ldw	r2,16(r2)
   409a8:	10c007cc 	andi	r3,r2,31
   409ac:	e0bfff17 	ldw	r2,-4(fp)
   409b0:	108003cc 	andi	r2,r2,15
   409b4:	1004917a 	slli	r2,r2,5
   409b8:	1886b03a 	or	r3,r3,r2
   409bc:	00800174 	movhi	r2,5
   409c0:	10935104 	addi	r2,r2,19780
   409c4:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   409c8:	00800174 	movhi	r2,5
   409cc:	10935104 	addi	r2,r2,19780
   409d0:	10800417 	ldw	r2,16(r2)
   409d4:	01000104 	movi	r4,4
   409d8:	100b883a 	mov	r5,r2
   409dc:	004249c0 	call	4249c <spi_send>
}
   409e0:	e037883a 	mov	sp,fp
   409e4:	dfc00117 	ldw	ra,4(sp)
   409e8:	df000017 	ldw	fp,0(sp)
   409ec:	dec00204 	addi	sp,sp,8
   409f0:	f800283a 	ret

000409f4 <AIC23_dac_select>:

void AIC23_dac_select(unsigned int dac){
   409f4:	defffd04 	addi	sp,sp,-12
   409f8:	dfc00215 	stw	ra,8(sp)
   409fc:	df000115 	stw	fp,4(sp)
   40a00:	df000104 	addi	fp,sp,4
   40a04:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1EF) | ((dac & 0x01) << 4);
   40a08:	00800174 	movhi	r2,5
   40a0c:	10935104 	addi	r2,r2,19780
   40a10:	10800417 	ldw	r2,16(r2)
   40a14:	10c07bcc 	andi	r3,r2,495
   40a18:	e0bfff17 	ldw	r2,-4(fp)
   40a1c:	1080004c 	andi	r2,r2,1
   40a20:	1004913a 	slli	r2,r2,4
   40a24:	1886b03a 	or	r3,r3,r2
   40a28:	00800174 	movhi	r2,5
   40a2c:	10935104 	addi	r2,r2,19780
   40a30:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40a34:	00800174 	movhi	r2,5
   40a38:	10935104 	addi	r2,r2,19780
   40a3c:	10800417 	ldw	r2,16(r2)
   40a40:	01000104 	movi	r4,4
   40a44:	100b883a 	mov	r5,r2
   40a48:	004249c0 	call	4249c <spi_send>
}
   40a4c:	e037883a 	mov	sp,fp
   40a50:	dfc00117 	ldw	ra,4(sp)
   40a54:	df000017 	ldw	fp,0(sp)
   40a58:	dec00204 	addi	sp,sp,8
   40a5c:	f800283a 	ret

00040a60 <AIC23_bypass>:
/* Bypass
   Valid Inputs:
   	   ENABLED
   	   DISABLED
 */
void AIC23_bypass(unsigned int bypass){
   40a60:	defffd04 	addi	sp,sp,-12
   40a64:	dfc00215 	stw	ra,8(sp)
   40a68:	df000115 	stw	fp,4(sp)
   40a6c:	df000104 	addi	fp,sp,4
   40a70:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1F7) | ((bypass & 0x01) << 3);
   40a74:	00800174 	movhi	r2,5
   40a78:	10935104 	addi	r2,r2,19780
   40a7c:	10800417 	ldw	r2,16(r2)
   40a80:	10c07dcc 	andi	r3,r2,503
   40a84:	e0bfff17 	ldw	r2,-4(fp)
   40a88:	1080004c 	andi	r2,r2,1
   40a8c:	100490fa 	slli	r2,r2,3
   40a90:	1886b03a 	or	r3,r3,r2
   40a94:	00800174 	movhi	r2,5
   40a98:	10935104 	addi	r2,r2,19780
   40a9c:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40aa0:	00800174 	movhi	r2,5
   40aa4:	10935104 	addi	r2,r2,19780
   40aa8:	10800417 	ldw	r2,16(r2)
   40aac:	01000104 	movi	r4,4
   40ab0:	100b883a 	mov	r5,r2
   40ab4:	004249c0 	call	4249c <spi_send>
}
   40ab8:	e037883a 	mov	sp,fp
   40abc:	dfc00117 	ldw	ra,4(sp)
   40ac0:	df000017 	ldw	fp,0(sp)
   40ac4:	dec00204 	addi	sp,sp,8
   40ac8:	f800283a 	ret

00040acc <AIC23_input>:

void AIC23_input(unsigned int input){
   40acc:	defffd04 	addi	sp,sp,-12
   40ad0:	dfc00215 	stw	ra,8(sp)
   40ad4:	df000115 	stw	fp,4(sp)
   40ad8:	df000104 	addi	fp,sp,4
   40adc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FB) | ((input & 0x01) << 2);
   40ae0:	00800174 	movhi	r2,5
   40ae4:	10935104 	addi	r2,r2,19780
   40ae8:	10800417 	ldw	r2,16(r2)
   40aec:	10c07ecc 	andi	r3,r2,507
   40af0:	e0bfff17 	ldw	r2,-4(fp)
   40af4:	1080004c 	andi	r2,r2,1
   40af8:	1085883a 	add	r2,r2,r2
   40afc:	1085883a 	add	r2,r2,r2
   40b00:	1886b03a 	or	r3,r3,r2
   40b04:	00800174 	movhi	r2,5
   40b08:	10935104 	addi	r2,r2,19780
   40b0c:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40b10:	00800174 	movhi	r2,5
   40b14:	10935104 	addi	r2,r2,19780
   40b18:	10800417 	ldw	r2,16(r2)
   40b1c:	01000104 	movi	r4,4
   40b20:	100b883a 	mov	r5,r2
   40b24:	004249c0 	call	4249c <spi_send>
}
   40b28:	e037883a 	mov	sp,fp
   40b2c:	dfc00117 	ldw	ra,4(sp)
   40b30:	df000017 	ldw	fp,0(sp)
   40b34:	dec00204 	addi	sp,sp,8
   40b38:	f800283a 	ret

00040b3c <AIC23_mic_mute>:

void AIC23_mic_mute(unsigned int mute){
   40b3c:	defffd04 	addi	sp,sp,-12
   40b40:	dfc00215 	stw	ra,8(sp)
   40b44:	df000115 	stw	fp,4(sp)
   40b48:	df000104 	addi	fp,sp,4
   40b4c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FD) | ((mute & 0x01) << 2);
   40b50:	00800174 	movhi	r2,5
   40b54:	10935104 	addi	r2,r2,19780
   40b58:	10800417 	ldw	r2,16(r2)
   40b5c:	10c07f4c 	andi	r3,r2,509
   40b60:	e0bfff17 	ldw	r2,-4(fp)
   40b64:	1080004c 	andi	r2,r2,1
   40b68:	1085883a 	add	r2,r2,r2
   40b6c:	1085883a 	add	r2,r2,r2
   40b70:	1886b03a 	or	r3,r3,r2
   40b74:	00800174 	movhi	r2,5
   40b78:	10935104 	addi	r2,r2,19780
   40b7c:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40b80:	00800174 	movhi	r2,5
   40b84:	10935104 	addi	r2,r2,19780
   40b88:	10800417 	ldw	r2,16(r2)
   40b8c:	01000104 	movi	r4,4
   40b90:	100b883a 	mov	r5,r2
   40b94:	004249c0 	call	4249c <spi_send>
}
   40b98:	e037883a 	mov	sp,fp
   40b9c:	dfc00117 	ldw	ra,4(sp)
   40ba0:	df000017 	ldw	fp,0(sp)
   40ba4:	dec00204 	addi	sp,sp,8
   40ba8:	f800283a 	ret

00040bac <AIC23_mic_boost>:

void AIC23_mic_boost(unsigned int boost){
   40bac:	defffd04 	addi	sp,sp,-12
   40bb0:	dfc00215 	stw	ra,8(sp)
   40bb4:	df000115 	stw	fp,4(sp)
   40bb8:	df000104 	addi	fp,sp,4
   40bbc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[4] = (aic23_config[4] & 0x1FE) | (boost & 0x01);
   40bc0:	00800174 	movhi	r2,5
   40bc4:	10935104 	addi	r2,r2,19780
   40bc8:	10800417 	ldw	r2,16(r2)
   40bcc:	10c07f8c 	andi	r3,r2,510
   40bd0:	e0bfff17 	ldw	r2,-4(fp)
   40bd4:	1080004c 	andi	r2,r2,1
   40bd8:	1886b03a 	or	r3,r3,r2
   40bdc:	00800174 	movhi	r2,5
   40be0:	10935104 	addi	r2,r2,19780
   40be4:	10c00415 	stw	r3,16(r2)
	spi_send(0x04, aic23_config[4]);
   40be8:	00800174 	movhi	r2,5
   40bec:	10935104 	addi	r2,r2,19780
   40bf0:	10800417 	ldw	r2,16(r2)
   40bf4:	01000104 	movi	r4,4
   40bf8:	100b883a 	mov	r5,r2
   40bfc:	004249c0 	call	4249c <spi_send>
}
   40c00:	e037883a 	mov	sp,fp
   40c04:	dfc00117 	ldw	ra,4(sp)
   40c08:	df000017 	ldw	fp,0(sp)
   40c0c:	dec00204 	addi	sp,sp,8
   40c10:	f800283a 	ret

00040c14 <AIC23_dac_mute>:
//
// 					Digital Audio Path Control
//
/////////////////////////////////////////////////////////////////

void AIC23_dac_mute(unsigned int mute){
   40c14:	defffd04 	addi	sp,sp,-12
   40c18:	dfc00215 	stw	ra,8(sp)
   40c1c:	df000115 	stw	fp,4(sp)
   40c20:	df000104 	addi	fp,sp,4
   40c24:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x1F7) | ((mute & 0x01) << 3);
   40c28:	00800174 	movhi	r2,5
   40c2c:	10935104 	addi	r2,r2,19780
   40c30:	10800517 	ldw	r2,20(r2)
   40c34:	10c07dcc 	andi	r3,r2,503
   40c38:	e0bfff17 	ldw	r2,-4(fp)
   40c3c:	1080004c 	andi	r2,r2,1
   40c40:	100490fa 	slli	r2,r2,3
   40c44:	1886b03a 	or	r3,r3,r2
   40c48:	00800174 	movhi	r2,5
   40c4c:	10935104 	addi	r2,r2,19780
   40c50:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40c54:	00800174 	movhi	r2,5
   40c58:	10935104 	addi	r2,r2,19780
   40c5c:	10800517 	ldw	r2,20(r2)
   40c60:	01000144 	movi	r4,5
   40c64:	100b883a 	mov	r5,r2
   40c68:	004249c0 	call	4249c <spi_send>
}
   40c6c:	e037883a 	mov	sp,fp
   40c70:	dfc00117 	ldw	ra,4(sp)
   40c74:	df000017 	ldw	fp,0(sp)
   40c78:	dec00204 	addi	sp,sp,8
   40c7c:	f800283a 	ret

00040c80 <AIC23_deemp>:

void AIC23_deemp(unsigned int deemphasis){
   40c80:	defffd04 	addi	sp,sp,-12
   40c84:	dfc00215 	stw	ra,8(sp)
   40c88:	df000115 	stw	fp,4(sp)
   40c8c:	df000104 	addi	fp,sp,4
   40c90:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x01F9) | ((deemphasis & 0x03) << 1);
   40c94:	00800174 	movhi	r2,5
   40c98:	10935104 	addi	r2,r2,19780
   40c9c:	10800517 	ldw	r2,20(r2)
   40ca0:	10c07e4c 	andi	r3,r2,505
   40ca4:	e0bfff17 	ldw	r2,-4(fp)
   40ca8:	108000cc 	andi	r2,r2,3
   40cac:	1085883a 	add	r2,r2,r2
   40cb0:	1886b03a 	or	r3,r3,r2
   40cb4:	00800174 	movhi	r2,5
   40cb8:	10935104 	addi	r2,r2,19780
   40cbc:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40cc0:	00800174 	movhi	r2,5
   40cc4:	10935104 	addi	r2,r2,19780
   40cc8:	10800517 	ldw	r2,20(r2)
   40ccc:	01000144 	movi	r4,5
   40cd0:	100b883a 	mov	r5,r2
   40cd4:	004249c0 	call	4249c <spi_send>
}
   40cd8:	e037883a 	mov	sp,fp
   40cdc:	dfc00117 	ldw	ra,4(sp)
   40ce0:	df000017 	ldw	fp,0(sp)
   40ce4:	dec00204 	addi	sp,sp,8
   40ce8:	f800283a 	ret

00040cec <AIC23_adc_highpass>:

void AIC23_adc_highpass(unsigned int highpass){
   40cec:	defffd04 	addi	sp,sp,-12
   40cf0:	dfc00215 	stw	ra,8(sp)
   40cf4:	df000115 	stw	fp,4(sp)
   40cf8:	df000104 	addi	fp,sp,4
   40cfc:	e13fff15 	stw	r4,-4(fp)
	aic23_config[5] = (aic23_config[5] & 0x01FE) | (highpass & 0x01);
   40d00:	00800174 	movhi	r2,5
   40d04:	10935104 	addi	r2,r2,19780
   40d08:	10800517 	ldw	r2,20(r2)
   40d0c:	10c07f8c 	andi	r3,r2,510
   40d10:	e0bfff17 	ldw	r2,-4(fp)
   40d14:	1080004c 	andi	r2,r2,1
   40d18:	1886b03a 	or	r3,r3,r2
   40d1c:	00800174 	movhi	r2,5
   40d20:	10935104 	addi	r2,r2,19780
   40d24:	10c00515 	stw	r3,20(r2)
	spi_send(0x05, aic23_config[5]);
   40d28:	00800174 	movhi	r2,5
   40d2c:	10935104 	addi	r2,r2,19780
   40d30:	10800517 	ldw	r2,20(r2)
   40d34:	01000144 	movi	r4,5
   40d38:	100b883a 	mov	r5,r2
   40d3c:	004249c0 	call	4249c <spi_send>
}
   40d40:	e037883a 	mov	sp,fp
   40d44:	dfc00117 	ldw	ra,4(sp)
   40d48:	df000017 	ldw	fp,0(sp)
   40d4c:	dec00204 	addi	sp,sp,8
   40d50:	f800283a 	ret

00040d54 <AIC23_power_on>:
//
// 						Power Down Control
//
/////////////////////////////////////////////////////////////////

void AIC23_power_on(){
   40d54:	defffe04 	addi	sp,sp,-8
   40d58:	dfc00115 	stw	ra,4(sp)
   40d5c:	df000015 	stw	fp,0(sp)
   40d60:	d839883a 	mov	fp,sp
	aic23_config[6] = 0x00;
   40d64:	00800174 	movhi	r2,5
   40d68:	10935104 	addi	r2,r2,19780
   40d6c:	10000615 	stw	zero,24(r2)
	spi_send(0x06, aic23_config[6]);
   40d70:	00800174 	movhi	r2,5
   40d74:	10935104 	addi	r2,r2,19780
   40d78:	10800617 	ldw	r2,24(r2)
   40d7c:	01000184 	movi	r4,6
   40d80:	100b883a 	mov	r5,r2
   40d84:	004249c0 	call	4249c <spi_send>
}
   40d88:	e037883a 	mov	sp,fp
   40d8c:	dfc00117 	ldw	ra,4(sp)
   40d90:	df000017 	ldw	fp,0(sp)
   40d94:	dec00204 	addi	sp,sp,8
   40d98:	f800283a 	ret

00040d9c <AIC23_power_off>:

void AIC23_power_off(){
   40d9c:	defffe04 	addi	sp,sp,-8
   40da0:	dfc00115 	stw	ra,4(sp)
   40da4:	df000015 	stw	fp,0(sp)
   40da8:	d839883a 	mov	fp,sp
	aic23_config[6] = 0xFF;
   40dac:	00800174 	movhi	r2,5
   40db0:	10935104 	addi	r2,r2,19780
   40db4:	00c03fc4 	movi	r3,255
   40db8:	10c00615 	stw	r3,24(r2)
	spi_send(0x06, aic23_config[6]);
   40dbc:	00800174 	movhi	r2,5
   40dc0:	10935104 	addi	r2,r2,19780
   40dc4:	10800617 	ldw	r2,24(r2)
   40dc8:	01000184 	movi	r4,6
   40dcc:	100b883a 	mov	r5,r2
   40dd0:	004249c0 	call	4249c <spi_send>
}
   40dd4:	e037883a 	mov	sp,fp
   40dd8:	dfc00117 	ldw	ra,4(sp)
   40ddc:	df000017 	ldw	fp,0(sp)
   40de0:	dec00204 	addi	sp,sp,8
   40de4:	f800283a 	ret

00040de8 <AIC23_mode>:
//
// 				Digital Audio Interface Format
//
/////////////////////////////////////////////////////////////////

void AIC23_mode(unsigned int mode){
   40de8:	defffd04 	addi	sp,sp,-12
   40dec:	dfc00215 	stw	ra,8(sp)
   40df0:	df000115 	stw	fp,4(sp)
   40df4:	df000104 	addi	fp,sp,4
   40df8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01BF) | ((mode & 0x01) << 6);
   40dfc:	00800174 	movhi	r2,5
   40e00:	10935104 	addi	r2,r2,19780
   40e04:	10800717 	ldw	r2,28(r2)
   40e08:	10c06fcc 	andi	r3,r2,447
   40e0c:	e0bfff17 	ldw	r2,-4(fp)
   40e10:	1080004c 	andi	r2,r2,1
   40e14:	100491ba 	slli	r2,r2,6
   40e18:	1886b03a 	or	r3,r3,r2
   40e1c:	00800174 	movhi	r2,5
   40e20:	10935104 	addi	r2,r2,19780
   40e24:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40e28:	00800174 	movhi	r2,5
   40e2c:	10935104 	addi	r2,r2,19780
   40e30:	10800717 	ldw	r2,28(r2)
   40e34:	010001c4 	movi	r4,7
   40e38:	100b883a 	mov	r5,r2
   40e3c:	004249c0 	call	4249c <spi_send>
}
   40e40:	e037883a 	mov	sp,fp
   40e44:	dfc00117 	ldw	ra,4(sp)
   40e48:	df000017 	ldw	fp,0(sp)
   40e4c:	dec00204 	addi	sp,sp,8
   40e50:	f800283a 	ret

00040e54 <AIC23_lr_swap>:

void AIC23_lr_swap(unsigned int swap){
   40e54:	defffd04 	addi	sp,sp,-12
   40e58:	dfc00215 	stw	ra,8(sp)
   40e5c:	df000115 	stw	fp,4(sp)
   40e60:	df000104 	addi	fp,sp,4
   40e64:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01DF) | ((swap & 0x01) << 5);
   40e68:	00800174 	movhi	r2,5
   40e6c:	10935104 	addi	r2,r2,19780
   40e70:	10800717 	ldw	r2,28(r2)
   40e74:	10c077cc 	andi	r3,r2,479
   40e78:	e0bfff17 	ldw	r2,-4(fp)
   40e7c:	1080004c 	andi	r2,r2,1
   40e80:	1004917a 	slli	r2,r2,5
   40e84:	1886b03a 	or	r3,r3,r2
   40e88:	00800174 	movhi	r2,5
   40e8c:	10935104 	addi	r2,r2,19780
   40e90:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40e94:	00800174 	movhi	r2,5
   40e98:	10935104 	addi	r2,r2,19780
   40e9c:	10800717 	ldw	r2,28(r2)
   40ea0:	010001c4 	movi	r4,7
   40ea4:	100b883a 	mov	r5,r2
   40ea8:	004249c0 	call	4249c <spi_send>

}
   40eac:	e037883a 	mov	sp,fp
   40eb0:	dfc00117 	ldw	ra,4(sp)
   40eb4:	df000017 	ldw	fp,0(sp)
   40eb8:	dec00204 	addi	sp,sp,8
   40ebc:	f800283a 	ret

00040ec0 <AIC23_lr_phase>:

void AIC23_lr_phase(unsigned int phase){
   40ec0:	defffd04 	addi	sp,sp,-12
   40ec4:	dfc00215 	stw	ra,8(sp)
   40ec8:	df000115 	stw	fp,4(sp)
   40ecc:	df000104 	addi	fp,sp,4
   40ed0:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01EF) | ((phase & 0x01) << 4);
   40ed4:	00800174 	movhi	r2,5
   40ed8:	10935104 	addi	r2,r2,19780
   40edc:	10800717 	ldw	r2,28(r2)
   40ee0:	10c07bcc 	andi	r3,r2,495
   40ee4:	e0bfff17 	ldw	r2,-4(fp)
   40ee8:	1080004c 	andi	r2,r2,1
   40eec:	1004913a 	slli	r2,r2,4
   40ef0:	1886b03a 	or	r3,r3,r2
   40ef4:	00800174 	movhi	r2,5
   40ef8:	10935104 	addi	r2,r2,19780
   40efc:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40f00:	00800174 	movhi	r2,5
   40f04:	10935104 	addi	r2,r2,19780
   40f08:	10800717 	ldw	r2,28(r2)
   40f0c:	010001c4 	movi	r4,7
   40f10:	100b883a 	mov	r5,r2
   40f14:	004249c0 	call	4249c <spi_send>
}
   40f18:	e037883a 	mov	sp,fp
   40f1c:	dfc00117 	ldw	ra,4(sp)
   40f20:	df000017 	ldw	fp,0(sp)
   40f24:	dec00204 	addi	sp,sp,8
   40f28:	f800283a 	ret

00040f2c <AIC23_input_len>:

void AIC23_input_len(unsigned int length){
   40f2c:	defffd04 	addi	sp,sp,-12
   40f30:	dfc00215 	stw	ra,8(sp)
   40f34:	df000115 	stw	fp,4(sp)
   40f38:	df000104 	addi	fp,sp,4
   40f3c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01F3) | ((length & 0x03) << 2);
   40f40:	00800174 	movhi	r2,5
   40f44:	10935104 	addi	r2,r2,19780
   40f48:	10800717 	ldw	r2,28(r2)
   40f4c:	10c07ccc 	andi	r3,r2,499
   40f50:	e0bfff17 	ldw	r2,-4(fp)
   40f54:	108000cc 	andi	r2,r2,3
   40f58:	1085883a 	add	r2,r2,r2
   40f5c:	1085883a 	add	r2,r2,r2
   40f60:	1886b03a 	or	r3,r3,r2
   40f64:	00800174 	movhi	r2,5
   40f68:	10935104 	addi	r2,r2,19780
   40f6c:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40f70:	00800174 	movhi	r2,5
   40f74:	10935104 	addi	r2,r2,19780
   40f78:	10800717 	ldw	r2,28(r2)
   40f7c:	010001c4 	movi	r4,7
   40f80:	100b883a 	mov	r5,r2
   40f84:	004249c0 	call	4249c <spi_send>
}
   40f88:	e037883a 	mov	sp,fp
   40f8c:	dfc00117 	ldw	ra,4(sp)
   40f90:	df000017 	ldw	fp,0(sp)
   40f94:	dec00204 	addi	sp,sp,8
   40f98:	f800283a 	ret

00040f9c <AIC23_format>:

void AIC23_format(unsigned int format){
   40f9c:	defffd04 	addi	sp,sp,-12
   40fa0:	dfc00215 	stw	ra,8(sp)
   40fa4:	df000115 	stw	fp,4(sp)
   40fa8:	df000104 	addi	fp,sp,4
   40fac:	e13fff15 	stw	r4,-4(fp)
	aic23_config[7] = (aic23_config[7] & 0x01FC) | (format & 0x03);
   40fb0:	00800174 	movhi	r2,5
   40fb4:	10935104 	addi	r2,r2,19780
   40fb8:	10800717 	ldw	r2,28(r2)
   40fbc:	10c07f0c 	andi	r3,r2,508
   40fc0:	e0bfff17 	ldw	r2,-4(fp)
   40fc4:	108000cc 	andi	r2,r2,3
   40fc8:	1886b03a 	or	r3,r3,r2
   40fcc:	00800174 	movhi	r2,5
   40fd0:	10935104 	addi	r2,r2,19780
   40fd4:	10c00715 	stw	r3,28(r2)
	spi_send(0x07, aic23_config[7]);
   40fd8:	00800174 	movhi	r2,5
   40fdc:	10935104 	addi	r2,r2,19780
   40fe0:	10800717 	ldw	r2,28(r2)
   40fe4:	010001c4 	movi	r4,7
   40fe8:	100b883a 	mov	r5,r2
   40fec:	004249c0 	call	4249c <spi_send>
}
   40ff0:	e037883a 	mov	sp,fp
   40ff4:	dfc00117 	ldw	ra,4(sp)
   40ff8:	df000017 	ldw	fp,0(sp)
   40ffc:	dec00204 	addi	sp,sp,8
   41000:	f800283a 	ret

00041004 <AIC23_clkin>:
//
// 						Sample Rate Control
//
/////////////////////////////////////////////////////////////////

void AIC23_clkin(unsigned int clock){
   41004:	defffd04 	addi	sp,sp,-12
   41008:	dfc00215 	stw	ra,8(sp)
   4100c:	df000115 	stw	fp,4(sp)
   41010:	df000104 	addi	fp,sp,4
   41014:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x01BF) | ((clock & 0x01) << 6);
   41018:	00800174 	movhi	r2,5
   4101c:	10935104 	addi	r2,r2,19780
   41020:	10800817 	ldw	r2,32(r2)
   41024:	10c06fcc 	andi	r3,r2,447
   41028:	e0bfff17 	ldw	r2,-4(fp)
   4102c:	1080004c 	andi	r2,r2,1
   41030:	100491ba 	slli	r2,r2,6
   41034:	1886b03a 	or	r3,r3,r2
   41038:	00800174 	movhi	r2,5
   4103c:	10935104 	addi	r2,r2,19780
   41040:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41044:	00800174 	movhi	r2,5
   41048:	10935104 	addi	r2,r2,19780
   4104c:	10800817 	ldw	r2,32(r2)
   41050:	01000204 	movi	r4,8
   41054:	100b883a 	mov	r5,r2
   41058:	004249c0 	call	4249c <spi_send>
}
   4105c:	e037883a 	mov	sp,fp
   41060:	dfc00117 	ldw	ra,4(sp)
   41064:	df000017 	ldw	fp,0(sp)
   41068:	dec00204 	addi	sp,sp,8
   4106c:	f800283a 	ret

00041070 <AIC23_clkout>:

void AIC23_clkout(unsigned int clock){
   41070:	defffd04 	addi	sp,sp,-12
   41074:	dfc00215 	stw	ra,8(sp)
   41078:	df000115 	stw	fp,4(sp)
   4107c:	df000104 	addi	fp,sp,4
   41080:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x017F) | ((clock & 0x01) << 7);
   41084:	00800174 	movhi	r2,5
   41088:	10935104 	addi	r2,r2,19780
   4108c:	10800817 	ldw	r2,32(r2)
   41090:	10c05fcc 	andi	r3,r2,383
   41094:	e0bfff17 	ldw	r2,-4(fp)
   41098:	100491fa 	slli	r2,r2,7
   4109c:	10803fcc 	andi	r2,r2,255
   410a0:	1886b03a 	or	r3,r3,r2
   410a4:	00800174 	movhi	r2,5
   410a8:	10935104 	addi	r2,r2,19780
   410ac:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   410b0:	00800174 	movhi	r2,5
   410b4:	10935104 	addi	r2,r2,19780
   410b8:	10800817 	ldw	r2,32(r2)
   410bc:	01000204 	movi	r4,8
   410c0:	100b883a 	mov	r5,r2
   410c4:	004249c0 	call	4249c <spi_send>
}
   410c8:	e037883a 	mov	sp,fp
   410cc:	dfc00117 	ldw	ra,4(sp)
   410d0:	df000017 	ldw	fp,0(sp)
   410d4:	dec00204 	addi	sp,sp,8
   410d8:	f800283a 	ret

000410dc <AIC23_setFreq>:
	 AIC23_FREQ_32KHZ 0x0c	// 32000 Hz
	 AIC23_FREQ_44KHZ 0x11	// 44100 Hz
	 AIC23_FREQ_48KHZ 0x00	// 48000 Hz
	 AIC23_FREQ_96KHZ 0x0e	// 96000 Hz
 */
void AIC23_setFreq(unsigned int frequency){
   410dc:	defffd04 	addi	sp,sp,-12
   410e0:	dfc00215 	stw	ra,8(sp)
   410e4:	df000115 	stw	fp,4(sp)
   410e8:	df000104 	addi	fp,sp,4
   410ec:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1C3) | ((frequency & 0x0F) << 2);
   410f0:	00800174 	movhi	r2,5
   410f4:	10935104 	addi	r2,r2,19780
   410f8:	10800817 	ldw	r2,32(r2)
   410fc:	10c070cc 	andi	r3,r2,451
   41100:	e0bfff17 	ldw	r2,-4(fp)
   41104:	108003cc 	andi	r2,r2,15
   41108:	1085883a 	add	r2,r2,r2
   4110c:	1085883a 	add	r2,r2,r2
   41110:	1886b03a 	or	r3,r3,r2
   41114:	00800174 	movhi	r2,5
   41118:	10935104 	addi	r2,r2,19780
   4111c:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   41120:	00800174 	movhi	r2,5
   41124:	10935104 	addi	r2,r2,19780
   41128:	10800817 	ldw	r2,32(r2)
   4112c:	01000204 	movi	r4,8
   41130:	100b883a 	mov	r5,r2
   41134:	004249c0 	call	4249c <spi_send>
}
   41138:	e037883a 	mov	sp,fp
   4113c:	dfc00117 	ldw	ra,4(sp)
   41140:	df000017 	ldw	fp,0(sp)
   41144:	dec00204 	addi	sp,sp,8
   41148:	f800283a 	ret

0004114c <AIC23_bosr>:

void AIC23_bosr(unsigned int frequency){
   4114c:	defffd04 	addi	sp,sp,-12
   41150:	dfc00215 	stw	ra,8(sp)
   41154:	df000115 	stw	fp,4(sp)
   41158:	df000104 	addi	fp,sp,4
   4115c:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1FD) | ((frequency & 0x01) << 1);
   41160:	00800174 	movhi	r2,5
   41164:	10935104 	addi	r2,r2,19780
   41168:	10800817 	ldw	r2,32(r2)
   4116c:	10c07f4c 	andi	r3,r2,509
   41170:	e0bfff17 	ldw	r2,-4(fp)
   41174:	1080004c 	andi	r2,r2,1
   41178:	1085883a 	add	r2,r2,r2
   4117c:	1886b03a 	or	r3,r3,r2
   41180:	00800174 	movhi	r2,5
   41184:	10935104 	addi	r2,r2,19780
   41188:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   4118c:	00800174 	movhi	r2,5
   41190:	10935104 	addi	r2,r2,19780
   41194:	10800817 	ldw	r2,32(r2)
   41198:	01000204 	movi	r4,8
   4119c:	100b883a 	mov	r5,r2
   411a0:	004249c0 	call	4249c <spi_send>
}
   411a4:	e037883a 	mov	sp,fp
   411a8:	dfc00117 	ldw	ra,4(sp)
   411ac:	df000017 	ldw	fp,0(sp)
   411b0:	dec00204 	addi	sp,sp,8
   411b4:	f800283a 	ret

000411b8 <AIC23_clk_mode>:

void AIC23_clk_mode(unsigned int mode){
   411b8:	defffd04 	addi	sp,sp,-12
   411bc:	dfc00215 	stw	ra,8(sp)
   411c0:	df000115 	stw	fp,4(sp)
   411c4:	df000104 	addi	fp,sp,4
   411c8:	e13fff15 	stw	r4,-4(fp)
	aic23_config[8] = (aic23_config[8] & 0x1FE) | (mode & 0x01);
   411cc:	00800174 	movhi	r2,5
   411d0:	10935104 	addi	r2,r2,19780
   411d4:	10800817 	ldw	r2,32(r2)
   411d8:	10c07f8c 	andi	r3,r2,510
   411dc:	e0bfff17 	ldw	r2,-4(fp)
   411e0:	1080004c 	andi	r2,r2,1
   411e4:	1886b03a 	or	r3,r3,r2
   411e8:	00800174 	movhi	r2,5
   411ec:	10935104 	addi	r2,r2,19780
   411f0:	10c00815 	stw	r3,32(r2)
	spi_send(0x08, aic23_config[8]);
   411f4:	00800174 	movhi	r2,5
   411f8:	10935104 	addi	r2,r2,19780
   411fc:	10800817 	ldw	r2,32(r2)
   41200:	01000204 	movi	r4,8
   41204:	100b883a 	mov	r5,r2
   41208:	004249c0 	call	4249c <spi_send>
}
   4120c:	e037883a 	mov	sp,fp
   41210:	dfc00117 	ldw	ra,4(sp)
   41214:	df000017 	ldw	fp,0(sp)
   41218:	dec00204 	addi	sp,sp,8
   4121c:	f800283a 	ret

00041220 <AIC23_on>:
// 					Digital Interface Activation
//
/////////////////////////////////////////////////////////////////

// Turns the AIC23 on
void AIC23_on(){
   41220:	defffe04 	addi	sp,sp,-8
   41224:	dfc00115 	stw	ra,4(sp)
   41228:	df000015 	stw	fp,0(sp)
   4122c:	d839883a 	mov	fp,sp
	spi_send(0x06, 0x00);
   41230:	01000184 	movi	r4,6
   41234:	000b883a 	mov	r5,zero
   41238:	004249c0 	call	4249c <spi_send>
}
   4123c:	e037883a 	mov	sp,fp
   41240:	dfc00117 	ldw	ra,4(sp)
   41244:	df000017 	ldw	fp,0(sp)
   41248:	dec00204 	addi	sp,sp,8
   4124c:	f800283a 	ret

00041250 <AIC23_off>:

// Turns the AIC23 off
void AIC23_off(){
   41250:	defffe04 	addi	sp,sp,-8
   41254:	dfc00115 	stw	ra,4(sp)
   41258:	df000015 	stw	fp,0(sp)
   4125c:	d839883a 	mov	fp,sp
	spi_send(0x06, 0x80);
   41260:	01000184 	movi	r4,6
   41264:	01402004 	movi	r5,128
   41268:	004249c0 	call	4249c <spi_send>
}
   4126c:	e037883a 	mov	sp,fp
   41270:	dfc00117 	ldw	ra,4(sp)
   41274:	df000017 	ldw	fp,0(sp)
   41278:	dec00204 	addi	sp,sp,8
   4127c:	f800283a 	ret

00041280 <delay>:
   41280:	defffc04 	addi	sp,sp,-16
   41284:	df000315 	stw	fp,12(sp)
   41288:	df000304 	addi	fp,sp,12
   4128c:	e13fff15 	stw	r4,-4(fp)
   41290:	e03ffe15 	stw	zero,-8(fp)
   41294:	e03ffd15 	stw	zero,-12(fp)
   41298:	e03ffe15 	stw	zero,-8(fp)
   4129c:	00000606 	br	412b8 <delay+0x38>
   412a0:	e0bffd17 	ldw	r2,-12(fp)
   412a4:	10800044 	addi	r2,r2,1
   412a8:	e0bffd15 	stw	r2,-12(fp)
   412ac:	e0bffe17 	ldw	r2,-8(fp)
   412b0:	10800044 	addi	r2,r2,1
   412b4:	e0bffe15 	stw	r2,-8(fp)
   412b8:	e0fffe17 	ldw	r3,-8(fp)
   412bc:	e0bfff17 	ldw	r2,-4(fp)
   412c0:	18bff716 	blt	r3,r2,412a0 <__alt_data_end+0xfffcf2a0>
   412c4:	e037883a 	mov	sp,fp
   412c8:	df000017 	ldw	fp,0(sp)
   412cc:	dec00104 	addi	sp,sp,4
   412d0:	f800283a 	ret

000412d4 <I2S_collect_left>:
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "delay.h"

int I2S_collect_left(){
   412d4:	defffc04 	addi	sp,sp,-16
   412d8:	dfc00315 	stw	ra,12(sp)
   412dc:	df000215 	stw	fp,8(sp)
   412e0:	df000204 	addi	fp,sp,8
	int k = 0;
   412e4:	e03ffe15 	stw	zero,-8(fp)
	int leftChannel = 0;
   412e8:	e03fff15 	stw	zero,-4(fp)

	//Left channel LRCOUT = 0
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 0);
   412ec:	0007883a 	mov	r3,zero
   412f0:	00800234 	movhi	r2,8
   412f4:	10846004 	addi	r2,r2,4480
   412f8:	10c00035 	stwio	r3,0(r2)
    delay(3);
   412fc:	010000c4 	movi	r4,3
   41300:	00412800 	call	41280 <delay>
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41304:	0007883a 	mov	r3,zero
   41308:	00800234 	movhi	r2,8
   4130c:	10845804 	addi	r2,r2,4448
   41310:	10c00035 	stwio	r3,0(r2)
	delay(3);
   41314:	010000c4 	movi	r4,3
   41318:	00412800 	call	41280 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   4131c:	00c00044 	movi	r3,1
   41320:	00800234 	movhi	r2,8
   41324:	10845804 	addi	r2,r2,4448
   41328:	10c00035 	stwio	r3,0(r2)
	delay(3);
   4132c:	010000c4 	movi	r4,3
   41330:	00412800 	call	41280 <delay>
	for(k = 0; k < 16; k++){
   41334:	e03ffe15 	stw	zero,-8(fp)
   41338:	00001b06 	br	413a8 <I2S_collect_left+0xd4>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   4133c:	0007883a 	mov	r3,zero
   41340:	00800234 	movhi	r2,8
   41344:	10845804 	addi	r2,r2,4448
   41348:	10c00035 	stwio	r3,0(r2)
		delay(3);
   4134c:	010000c4 	movi	r4,3
   41350:	00412800 	call	41280 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41354:	00c00044 	movi	r3,1
   41358:	00800234 	movhi	r2,8
   4135c:	10845804 	addi	r2,r2,4448
   41360:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41364:	010000c4 	movi	r4,3
   41368:	00412800 	call	41280 <delay>
		//printf("%i", IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE));
		leftChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
   4136c:	00800234 	movhi	r2,8
   41370:	10845c04 	addi	r2,r2,4464
   41374:	10800037 	ldwio	r2,0(r2)
   41378:	e0ffff17 	ldw	r3,-4(fp)
   4137c:	1884b03a 	or	r2,r3,r2
   41380:	e0bfff15 	stw	r2,-4(fp)
		if(k < 15)
   41384:	e0bffe17 	ldw	r2,-8(fp)
   41388:	108003c8 	cmpgei	r2,r2,15
   4138c:	1000031e 	bne	r2,zero,4139c <I2S_collect_left+0xc8>
			leftChannel <<= 1;
   41390:	e0bfff17 	ldw	r2,-4(fp)
   41394:	1085883a 	add	r2,r2,r2
   41398:	e0bfff15 	stw	r2,-4(fp)
    delay(3);
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
	delay(3);
	for(k = 0; k < 16; k++){
   4139c:	e0bffe17 	ldw	r2,-8(fp)
   413a0:	10800044 	addi	r2,r2,1
   413a4:	e0bffe15 	stw	r2,-8(fp)
   413a8:	e0bffe17 	ldw	r2,-8(fp)
   413ac:	10800410 	cmplti	r2,r2,16
   413b0:	103fe21e 	bne	r2,zero,4133c <__alt_data_end+0xfffcf33c>
		leftChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
		if(k < 15)
			leftChannel <<= 1;

	}
	return leftChannel;
   413b4:	e0bfff17 	ldw	r2,-4(fp)
}
   413b8:	e037883a 	mov	sp,fp
   413bc:	dfc00117 	ldw	ra,4(sp)
   413c0:	df000017 	ldw	fp,0(sp)
   413c4:	dec00204 	addi	sp,sp,8
   413c8:	f800283a 	ret

000413cc <I2S_collect_right>:

int I2S_collect_right(){
   413cc:	defffc04 	addi	sp,sp,-16
   413d0:	dfc00315 	stw	ra,12(sp)
   413d4:	df000215 	stw	fp,8(sp)
   413d8:	df000204 	addi	fp,sp,8
	int l = 0;
   413dc:	e03ffe15 	stw	zero,-8(fp)
	int rightChannel = 0;
   413e0:	e03fff15 	stw	zero,-4(fp)
	//right channel LRCOUT = 1
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 1);
   413e4:	00c00044 	movi	r3,1
   413e8:	00800234 	movhi	r2,8
   413ec:	10846004 	addi	r2,r2,4480
   413f0:	10c00035 	stwio	r3,0(r2)
    delay(3);
   413f4:	010000c4 	movi	r4,3
   413f8:	00412800 	call	41280 <delay>
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   413fc:	0007883a 	mov	r3,zero
   41400:	00800234 	movhi	r2,8
   41404:	10845804 	addi	r2,r2,4448
   41408:	10c00035 	stwio	r3,0(r2)
	delay(3);
   4140c:	010000c4 	movi	r4,3
   41410:	00412800 	call	41280 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41414:	00c00044 	movi	r3,1
   41418:	00800234 	movhi	r2,8
   4141c:	10845804 	addi	r2,r2,4448
   41420:	10c00035 	stwio	r3,0(r2)
	for(l = 0; l < 16; l++){
   41424:	e03ffe15 	stw	zero,-8(fp)
   41428:	00001b06 	br	41498 <I2S_collect_right+0xcc>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   4142c:	0007883a 	mov	r3,zero
   41430:	00800234 	movhi	r2,8
   41434:	10845804 	addi	r2,r2,4448
   41438:	10c00035 	stwio	r3,0(r2)
		delay(3);
   4143c:	010000c4 	movi	r4,3
   41440:	00412800 	call	41280 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41444:	00c00044 	movi	r3,1
   41448:	00800234 	movhi	r2,8
   4144c:	10845804 	addi	r2,r2,4448
   41450:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41454:	010000c4 	movi	r4,3
   41458:	00412800 	call	41280 <delay>
		rightChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
   4145c:	00800234 	movhi	r2,8
   41460:	10845c04 	addi	r2,r2,4464
   41464:	10800037 	ldwio	r2,0(r2)
   41468:	e0ffff17 	ldw	r3,-4(fp)
   4146c:	1884b03a 	or	r2,r3,r2
   41470:	e0bfff15 	stw	r2,-4(fp)
		if(l < 15)
   41474:	e0bffe17 	ldw	r2,-8(fp)
   41478:	108003c8 	cmpgei	r2,r2,15
   4147c:	1000031e 	bne	r2,zero,4148c <I2S_collect_right+0xc0>
			rightChannel <<= 1;
   41480:	e0bfff17 	ldw	r2,-4(fp)
   41484:	1085883a 	add	r2,r2,r2
   41488:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LRCOUT_BASE, 1);
    delay(3);
    IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
	for(l = 0; l < 16; l++){
   4148c:	e0bffe17 	ldw	r2,-8(fp)
   41490:	10800044 	addi	r2,r2,1
   41494:	e0bffe15 	stw	r2,-8(fp)
   41498:	e0bffe17 	ldw	r2,-8(fp)
   4149c:	10800410 	cmplti	r2,r2,16
   414a0:	103fe21e 	bne	r2,zero,4142c <__alt_data_end+0xfffcf42c>
		rightChannel |= IORD_ALTERA_AVALON_PIO_DATA(DOUT_BASE);
		if(l < 15)
			rightChannel <<= 1;
	}

	return rightChannel;
   414a4:	e0bfff17 	ldw	r2,-4(fp)

}
   414a8:	e037883a 	mov	sp,fp
   414ac:	dfc00117 	ldw	ra,4(sp)
   414b0:	df000017 	ldw	fp,0(sp)
   414b4:	dec00204 	addi	sp,sp,8
   414b8:	f800283a 	ret

000414bc <I2S_send_left>:


void I2S_send_left(int leftdata){
   414bc:	defffc04 	addi	sp,sp,-16
   414c0:	dfc00315 	stw	ra,12(sp)
   414c4:	df000215 	stw	fp,8(sp)
   414c8:	df000204 	addi	fp,sp,8
   414cc:	e13fff15 	stw	r4,-4(fp)
	int temp = 0;
   414d0:	e03ffe15 	stw	zero,-8(fp)

	//Toggle LRCIN to 0
	IOWR_ALTERA_AVALON_PIO_DATA(LRCIN_BASE, 0);
   414d4:	0007883a 	mov	r3,zero
   414d8:	00800234 	movhi	r2,8
   414dc:	10845404 	addi	r2,r2,4432
   414e0:	10c00035 	stwio	r3,0(r2)
	delay(3);
   414e4:	010000c4 	movi	r4,3
   414e8:	00412800 	call	41280 <delay>

	//first Bclk cycle
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   414ec:	0007883a 	mov	r3,zero
   414f0:	00800234 	movhi	r2,8
   414f4:	10845804 	addi	r2,r2,4448
   414f8:	10c00035 	stwio	r3,0(r2)
	delay(3);
   414fc:	010000c4 	movi	r4,3
   41500:	00412800 	call	41280 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41504:	00c00044 	movi	r3,1
   41508:	00800234 	movhi	r2,8
   4150c:	10845804 	addi	r2,r2,4448
   41510:	10c00035 	stwio	r3,0(r2)

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41514:	e03ffe15 	stw	zero,-8(fp)
   41518:	00001906 	br	41580 <I2S_send_left+0xc4>
		//Insert the data to DIN_BASE
		IOWR_ALTERA_AVALON_PIO_DATA(DIN_BASE, !!(leftdata&0x1000));
   4151c:	e0bfff17 	ldw	r2,-4(fp)
   41520:	1084000c 	andi	r2,r2,4096
   41524:	1004c03a 	cmpne	r2,r2,zero
   41528:	10c03fcc 	andi	r3,r2,255
   4152c:	00800234 	movhi	r2,8
   41530:	10846804 	addi	r2,r2,4512
   41534:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   41538:	0007883a 	mov	r3,zero
   4153c:	00800234 	movhi	r2,8
   41540:	10845804 	addi	r2,r2,4448
   41544:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41548:	010000c4 	movi	r4,3
   4154c:	00412800 	call	41280 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41550:	00c00044 	movi	r3,1
   41554:	00800234 	movhi	r2,8
   41558:	10845804 	addi	r2,r2,4448
   4155c:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41560:	010000c4 	movi	r4,3
   41564:	00412800 	call	41280 <delay>
		leftdata <<= 1;
   41568:	e0bfff17 	ldw	r2,-4(fp)
   4156c:	1085883a 	add	r2,r2,r2
   41570:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41574:	e0bffe17 	ldw	r2,-8(fp)
   41578:	10800044 	addi	r2,r2,1
   4157c:	e0bffe15 	stw	r2,-8(fp)
   41580:	e0bffe17 	ldw	r2,-8(fp)
   41584:	10800410 	cmplti	r2,r2,16
   41588:	103fe41e 	bne	r2,zero,4151c <__alt_data_end+0xfffcf51c>
		delay(3);
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
		delay(3);
		leftdata <<= 1;
	}
}
   4158c:	e037883a 	mov	sp,fp
   41590:	dfc00117 	ldw	ra,4(sp)
   41594:	df000017 	ldw	fp,0(sp)
   41598:	dec00204 	addi	sp,sp,8
   4159c:	f800283a 	ret

000415a0 <I2S_send_right>:


void I2S_send_right(int rightdata){
   415a0:	defffc04 	addi	sp,sp,-16
   415a4:	dfc00315 	stw	ra,12(sp)
   415a8:	df000215 	stw	fp,8(sp)
   415ac:	df000204 	addi	fp,sp,8
   415b0:	e13fff15 	stw	r4,-4(fp)
	int temp = 0;
   415b4:	e03ffe15 	stw	zero,-8(fp)
	//Toggle LRCIN to 0
	IOWR_ALTERA_AVALON_PIO_DATA(0x81060, 1);
   415b8:	00c00044 	movi	r3,1
   415bc:	00800234 	movhi	r2,8
   415c0:	10841804 	addi	r2,r2,4192
   415c4:	10c00035 	stwio	r3,0(r2)
	delay(3);
   415c8:	010000c4 	movi	r4,3
   415cc:	00412800 	call	41280 <delay>

	//first Bclk cycle
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   415d0:	0007883a 	mov	r3,zero
   415d4:	00800234 	movhi	r2,8
   415d8:	10845804 	addi	r2,r2,4448
   415dc:	10c00035 	stwio	r3,0(r2)
	delay(3);
   415e0:	010000c4 	movi	r4,3
   415e4:	00412800 	call	41280 <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   415e8:	00c00044 	movi	r3,1
   415ec:	00800234 	movhi	r2,8
   415f0:	10845804 	addi	r2,r2,4448
   415f4:	10c00035 	stwio	r3,0(r2)

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   415f8:	e03ffe15 	stw	zero,-8(fp)
   415fc:	00001906 	br	41664 <I2S_send_right+0xc4>
		//Insert the data to DIN_BASE
		IOWR_ALTERA_AVALON_PIO_DATA(DIN_BASE, !!(rightdata&0x1000));
   41600:	e0bfff17 	ldw	r2,-4(fp)
   41604:	1084000c 	andi	r2,r2,4096
   41608:	1004c03a 	cmpne	r2,r2,zero
   4160c:	10c03fcc 	andi	r3,r2,255
   41610:	00800234 	movhi	r2,8
   41614:	10846804 	addi	r2,r2,4512
   41618:	10c00035 	stwio	r3,0(r2)

		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
   4161c:	0007883a 	mov	r3,zero
   41620:	00800234 	movhi	r2,8
   41624:	10845804 	addi	r2,r2,4448
   41628:	10c00035 	stwio	r3,0(r2)
		delay(3);
   4162c:	010000c4 	movi	r4,3
   41630:	00412800 	call	41280 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
   41634:	00c00044 	movi	r3,1
   41638:	00800234 	movhi	r2,8
   4163c:	10845804 	addi	r2,r2,4448
   41640:	10c00035 	stwio	r3,0(r2)
		delay(3);
   41644:	010000c4 	movi	r4,3
   41648:	00412800 	call	41280 <delay>
		rightdata <<= 1;
   4164c:	e0bfff17 	ldw	r2,-4(fp)
   41650:	1085883a 	add	r2,r2,r2
   41654:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 0);
	delay(3);
	IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);

	//Clock in the data
	for(temp = 0; temp < 16; temp++){
   41658:	e0bffe17 	ldw	r2,-8(fp)
   4165c:	10800044 	addi	r2,r2,1
   41660:	e0bffe15 	stw	r2,-8(fp)
   41664:	e0bffe17 	ldw	r2,-8(fp)
   41668:	10800410 	cmplti	r2,r2,16
   4166c:	103fe41e 	bne	r2,zero,41600 <__alt_data_end+0xfffcf600>
		delay(3);
		IOWR_ALTERA_AVALON_PIO_DATA(BCLK_OUT_BASE, 1);
		delay(3);
		rightdata <<= 1;
	}
}
   41670:	e037883a 	mov	sp,fp
   41674:	dfc00117 	ldw	ra,4(sp)
   41678:	df000017 	ldw	fp,0(sp)
   4167c:	dec00204 	addi	sp,sp,8
   41680:	f800283a 	ret

00041684 <I2S_send_lr>:


void I2S_send_lr(int left, int right){
   41684:	defffc04 	addi	sp,sp,-16
   41688:	dfc00315 	stw	ra,12(sp)
   4168c:	df000215 	stw	fp,8(sp)
   41690:	df000204 	addi	fp,sp,8
   41694:	e13ffe15 	stw	r4,-8(fp)
   41698:	e17fff15 	stw	r5,-4(fp)
	I2S_send_left(left);
   4169c:	e13ffe17 	ldw	r4,-8(fp)
   416a0:	00414bc0 	call	414bc <I2S_send_left>
	I2S_send_right(right);
   416a4:	e13fff17 	ldw	r4,-4(fp)
   416a8:	00415a00 	call	415a0 <I2S_send_right>
}
   416ac:	e037883a 	mov	sp,fp
   416b0:	dfc00117 	ldw	ra,4(sp)
   416b4:	df000017 	ldw	fp,0(sp)
   416b8:	dec00204 	addi	sp,sp,8
   416bc:	f800283a 	ret

000416c0 <fft>:
    float imag;
    };
typedef struct cmpx COMPLEX;

void fft(COMPLEX *Y, int M, COMPLEX *w)       //input sample array, number of points
{
   416c0:	deffec04 	addi	sp,sp,-80
   416c4:	dfc01315 	stw	ra,76(sp)
   416c8:	df001215 	stw	fp,72(sp)
   416cc:	dc401115 	stw	r17,68(sp)
   416d0:	dc001015 	stw	r16,64(sp)
   416d4:	df001204 	addi	fp,sp,72
   416d8:	e13ffb15 	stw	r4,-20(fp)
   416dc:	e17ffc15 	stw	r5,-16(fp)
   416e0:	e1bffd15 	stw	r6,-12(fp)
  COMPLEX temp1,temp2;            //temporary storage variables
  int i,j,k;                      //loop counter variables
  int upper_leg, lower_leg;       //index of upper/lower butterfly leg
  int leg_diff;                   //difference between upper/lower leg
  int num_stages=0;               //number of FFT stages, or iterations
   416e4:	e03ff315 	stw	zero,-52(fp)
  int index, step;                //index and step between twiddle factor
  i=1;                            //log(base 2) of # of points = # of stages
   416e8:	00800044 	movi	r2,1
   416ec:	e0bfee15 	stw	r2,-72(fp)
  do
  {
    num_stages+=1;
   416f0:	e0bff317 	ldw	r2,-52(fp)
   416f4:	10800044 	addi	r2,r2,1
   416f8:	e0bff315 	stw	r2,-52(fp)
    i=i*2;
   416fc:	e0bfee17 	ldw	r2,-72(fp)
   41700:	1085883a 	add	r2,r2,r2
   41704:	e0bfee15 	stw	r2,-72(fp)
  } while (i!=M);
   41708:	e0ffee17 	ldw	r3,-72(fp)
   4170c:	e0bffc17 	ldw	r2,-16(fp)
   41710:	18bff71e 	bne	r3,r2,416f0 <__alt_data_end+0xfffcf6f0>

  leg_diff=M/2;                 //starting difference between upper & lower legs
   41714:	e0bffc17 	ldw	r2,-16(fp)
   41718:	1006d7fa 	srli	r3,r2,31
   4171c:	1885883a 	add	r2,r3,r2
   41720:	1005d07a 	srai	r2,r2,1
   41724:	e0bff215 	stw	r2,-56(fp)
  step=2;                     //step between values in twiddle.h              
   41728:	00800084 	movi	r2,2
   4172c:	e0bff515 	stw	r2,-44(fp)
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
   41730:	e03fee15 	stw	zero,-72(fp)
   41734:	0000ac06 	br	419e8 <fft+0x328>
  {
    index=0;
   41738:	e03ff415 	stw	zero,-48(fp)
    for (j=0;j<leg_diff;j++)
   4173c:	e03fef15 	stw	zero,-68(fp)
   41740:	00009b06 	br	419b0 <fft+0x2f0>
    {
      for (upper_leg=j;upper_leg<M;upper_leg+=(2*leg_diff))
   41744:	e0bfef17 	ldw	r2,-68(fp)
   41748:	e0bff115 	stw	r2,-60(fp)
   4174c:	00008e06 	br	41988 <fft+0x2c8>
      {
        lower_leg=upper_leg+leg_diff;
   41750:	e0fff117 	ldw	r3,-60(fp)
   41754:	e0bff217 	ldw	r2,-56(fp)
   41758:	1885883a 	add	r2,r3,r2
   4175c:	e0bff615 	stw	r2,-40(fp)
        temp1.real=(Y[upper_leg]).real + (Y[lower_leg]).real;
   41760:	e0bff117 	ldw	r2,-60(fp)
   41764:	100490fa 	slli	r2,r2,3
   41768:	e0fffb17 	ldw	r3,-20(fp)
   4176c:	1885883a 	add	r2,r3,r2
   41770:	11000017 	ldw	r4,0(r2)
   41774:	e0bff617 	ldw	r2,-40(fp)
   41778:	100490fa 	slli	r2,r2,3
   4177c:	e0fffb17 	ldw	r3,-20(fp)
   41780:	1885883a 	add	r2,r3,r2
   41784:	10c00017 	ldw	r3,0(r2)
   41788:	180b883a 	mov	r5,r3
   4178c:	0044bc00 	call	44bc0 <__addsf3>
   41790:	1007883a 	mov	r3,r2
   41794:	1805883a 	mov	r2,r3
   41798:	e0bff715 	stw	r2,-36(fp)
        temp1.imag=(Y[upper_leg]).imag + (Y[lower_leg]).imag;
   4179c:	e0bff117 	ldw	r2,-60(fp)
   417a0:	100490fa 	slli	r2,r2,3
   417a4:	e0fffb17 	ldw	r3,-20(fp)
   417a8:	1885883a 	add	r2,r3,r2
   417ac:	11000117 	ldw	r4,4(r2)
   417b0:	e0bff617 	ldw	r2,-40(fp)
   417b4:	100490fa 	slli	r2,r2,3
   417b8:	e0fffb17 	ldw	r3,-20(fp)
   417bc:	1885883a 	add	r2,r3,r2
   417c0:	10c00117 	ldw	r3,4(r2)
   417c4:	180b883a 	mov	r5,r3
   417c8:	0044bc00 	call	44bc0 <__addsf3>
   417cc:	1007883a 	mov	r3,r2
   417d0:	1805883a 	mov	r2,r3
   417d4:	e0bff815 	stw	r2,-32(fp)
        temp2.real=(Y[upper_leg]).real - (Y[lower_leg]).real;
   417d8:	e0bff117 	ldw	r2,-60(fp)
   417dc:	100490fa 	slli	r2,r2,3
   417e0:	e0fffb17 	ldw	r3,-20(fp)
   417e4:	1885883a 	add	r2,r3,r2
   417e8:	11000017 	ldw	r4,0(r2)
   417ec:	e0bff617 	ldw	r2,-40(fp)
   417f0:	100490fa 	slli	r2,r2,3
   417f4:	e0fffb17 	ldw	r3,-20(fp)
   417f8:	1885883a 	add	r2,r3,r2
   417fc:	10c00017 	ldw	r3,0(r2)
   41800:	180b883a 	mov	r5,r3
   41804:	00454c40 	call	454c4 <__subsf3>
   41808:	1007883a 	mov	r3,r2
   4180c:	1805883a 	mov	r2,r3
   41810:	e0bff915 	stw	r2,-28(fp)
        temp2.imag=(Y[upper_leg]).imag - (Y[lower_leg]).imag;
   41814:	e0bff117 	ldw	r2,-60(fp)
   41818:	100490fa 	slli	r2,r2,3
   4181c:	e0fffb17 	ldw	r3,-20(fp)
   41820:	1885883a 	add	r2,r3,r2
   41824:	11000117 	ldw	r4,4(r2)
   41828:	e0bff617 	ldw	r2,-40(fp)
   4182c:	100490fa 	slli	r2,r2,3
   41830:	e0fffb17 	ldw	r3,-20(fp)
   41834:	1885883a 	add	r2,r3,r2
   41838:	10c00117 	ldw	r3,4(r2)
   4183c:	180b883a 	mov	r5,r3
   41840:	00454c40 	call	454c4 <__subsf3>
   41844:	1007883a 	mov	r3,r2
   41848:	1805883a 	mov	r2,r3
   4184c:	e0bffa15 	stw	r2,-24(fp)
        (Y[lower_leg]).real=((temp2.real*(w[index]).real-temp2.imag*(w[index]).imag));
   41850:	e0bff617 	ldw	r2,-40(fp)
   41854:	100490fa 	slli	r2,r2,3
   41858:	e0fffb17 	ldw	r3,-20(fp)
   4185c:	18a1883a 	add	r16,r3,r2
   41860:	e13ff917 	ldw	r4,-28(fp)
   41864:	e0bff417 	ldw	r2,-48(fp)
   41868:	100490fa 	slli	r2,r2,3
   4186c:	e0fffd17 	ldw	r3,-12(fp)
   41870:	1885883a 	add	r2,r3,r2
   41874:	10c00017 	ldw	r3,0(r2)
   41878:	180b883a 	mov	r5,r3
   4187c:	00450a00 	call	450a0 <__mulsf3>
   41880:	1007883a 	mov	r3,r2
   41884:	1823883a 	mov	r17,r3
   41888:	e13ffa17 	ldw	r4,-24(fp)
   4188c:	e0bff417 	ldw	r2,-48(fp)
   41890:	100490fa 	slli	r2,r2,3
   41894:	e0fffd17 	ldw	r3,-12(fp)
   41898:	1885883a 	add	r2,r3,r2
   4189c:	10c00117 	ldw	r3,4(r2)
   418a0:	180b883a 	mov	r5,r3
   418a4:	00450a00 	call	450a0 <__mulsf3>
   418a8:	1007883a 	mov	r3,r2
   418ac:	1805883a 	mov	r2,r3
   418b0:	8809883a 	mov	r4,r17
   418b4:	100b883a 	mov	r5,r2
   418b8:	00454c40 	call	454c4 <__subsf3>
   418bc:	1007883a 	mov	r3,r2
   418c0:	1805883a 	mov	r2,r3
   418c4:	80800015 	stw	r2,0(r16)
        (Y[lower_leg]).imag=((temp2.real*(w[index]).imag+temp2.imag*(w[index]).real));
   418c8:	e0bff617 	ldw	r2,-40(fp)
   418cc:	100490fa 	slli	r2,r2,3
   418d0:	e0fffb17 	ldw	r3,-20(fp)
   418d4:	18a1883a 	add	r16,r3,r2
   418d8:	e13ff917 	ldw	r4,-28(fp)
   418dc:	e0bff417 	ldw	r2,-48(fp)
   418e0:	100490fa 	slli	r2,r2,3
   418e4:	e0fffd17 	ldw	r3,-12(fp)
   418e8:	1885883a 	add	r2,r3,r2
   418ec:	10c00117 	ldw	r3,4(r2)
   418f0:	180b883a 	mov	r5,r3
   418f4:	00450a00 	call	450a0 <__mulsf3>
   418f8:	1007883a 	mov	r3,r2
   418fc:	1823883a 	mov	r17,r3
   41900:	e13ffa17 	ldw	r4,-24(fp)
   41904:	e0bff417 	ldw	r2,-48(fp)
   41908:	100490fa 	slli	r2,r2,3
   4190c:	e0fffd17 	ldw	r3,-12(fp)
   41910:	1885883a 	add	r2,r3,r2
   41914:	10c00017 	ldw	r3,0(r2)
   41918:	180b883a 	mov	r5,r3
   4191c:	00450a00 	call	450a0 <__mulsf3>
   41920:	1007883a 	mov	r3,r2
   41924:	1805883a 	mov	r2,r3
   41928:	8809883a 	mov	r4,r17
   4192c:	100b883a 	mov	r5,r2
   41930:	0044bc00 	call	44bc0 <__addsf3>
   41934:	1007883a 	mov	r3,r2
   41938:	1805883a 	mov	r2,r3
   4193c:	80800115 	stw	r2,4(r16)
        (Y[upper_leg]).real=temp1.real;
   41940:	e0bff117 	ldw	r2,-60(fp)
   41944:	100490fa 	slli	r2,r2,3
   41948:	e0fffb17 	ldw	r3,-20(fp)
   4194c:	1885883a 	add	r2,r3,r2
   41950:	e0fff717 	ldw	r3,-36(fp)
   41954:	10c00015 	stw	r3,0(r2)
        (Y[upper_leg]).imag=temp1.imag;
   41958:	e0bff117 	ldw	r2,-60(fp)
   4195c:	100490fa 	slli	r2,r2,3
   41960:	e0fffb17 	ldw	r3,-20(fp)
   41964:	1885883a 	add	r2,r3,r2
   41968:	e0fff817 	ldw	r3,-32(fp)
   4196c:	10c00115 	stw	r3,4(r2)
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
  {
    index=0;
    for (j=0;j<leg_diff;j++)
    {
      for (upper_leg=j;upper_leg<M;upper_leg+=(2*leg_diff))
   41970:	e0bff217 	ldw	r2,-56(fp)
   41974:	1085883a 	add	r2,r2,r2
   41978:	1007883a 	mov	r3,r2
   4197c:	e0bff117 	ldw	r2,-60(fp)
   41980:	10c5883a 	add	r2,r2,r3
   41984:	e0bff115 	stw	r2,-60(fp)
   41988:	e0fff117 	ldw	r3,-60(fp)
   4198c:	e0bffc17 	ldw	r2,-16(fp)
   41990:	18bf6f16 	blt	r3,r2,41750 <__alt_data_end+0xfffcf750>
        (Y[lower_leg]).real=((temp2.real*(w[index]).real-temp2.imag*(w[index]).imag));
        (Y[lower_leg]).imag=((temp2.real*(w[index]).imag+temp2.imag*(w[index]).real));
        (Y[upper_leg]).real=temp1.real;
        (Y[upper_leg]).imag=temp1.imag;
      }
      index+=step;
   41994:	e0fff417 	ldw	r3,-48(fp)
   41998:	e0bff517 	ldw	r2,-44(fp)
   4199c:	1885883a 	add	r2,r3,r2
   419a0:	e0bff415 	stw	r2,-48(fp)
  leg_diff=M/2;                 //starting difference between upper & lower legs
  step=2;                     //step between values in twiddle.h              
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
  {
    index=0;
    for (j=0;j<leg_diff;j++)
   419a4:	e0bfef17 	ldw	r2,-68(fp)
   419a8:	10800044 	addi	r2,r2,1
   419ac:	e0bfef15 	stw	r2,-68(fp)
   419b0:	e0ffef17 	ldw	r3,-68(fp)
   419b4:	e0bff217 	ldw	r2,-56(fp)
   419b8:	18bf6216 	blt	r3,r2,41744 <__alt_data_end+0xfffcf744>
        (Y[upper_leg]).real=temp1.real;
        (Y[upper_leg]).imag=temp1.imag;
      }
      index+=step;
    }
    leg_diff=leg_diff/2;
   419bc:	e0bff217 	ldw	r2,-56(fp)
   419c0:	1006d7fa 	srli	r3,r2,31
   419c4:	1885883a 	add	r2,r3,r2
   419c8:	1005d07a 	srai	r2,r2,1
   419cc:	e0bff215 	stw	r2,-56(fp)
    step*=2;
   419d0:	e0bff517 	ldw	r2,-44(fp)
   419d4:	1085883a 	add	r2,r2,r2
   419d8:	e0bff515 	stw	r2,-44(fp)
    i=i*2;
  } while (i!=M);

  leg_diff=M/2;                 //starting difference between upper & lower legs
  step=2;                     //step between values in twiddle.h              
  for (i=0;i<num_stages;i++)      //for M-point FFT                 
   419dc:	e0bfee17 	ldw	r2,-72(fp)
   419e0:	10800044 	addi	r2,r2,1
   419e4:	e0bfee15 	stw	r2,-72(fp)
   419e8:	e0ffee17 	ldw	r3,-72(fp)
   419ec:	e0bff317 	ldw	r2,-52(fp)
   419f0:	18bf5116 	blt	r3,r2,41738 <__alt_data_end+0xfffcf738>
    }
    leg_diff=leg_diff/2;
    step*=2;
  }

  j=0;
   419f4:	e03fef15 	stw	zero,-68(fp)
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
   419f8:	00800044 	movi	r2,1
   419fc:	e0bfee15 	stw	r2,-72(fp)
   41a00:	00004806 	br	41b24 <fft+0x464>
  {
    k=M/2;
   41a04:	e0bffc17 	ldw	r2,-16(fp)
   41a08:	1006d7fa 	srli	r3,r2,31
   41a0c:	1885883a 	add	r2,r3,r2
   41a10:	1005d07a 	srai	r2,r2,1
   41a14:	e0bff015 	stw	r2,-64(fp)
    while (k<=j)
   41a18:	00000906 	br	41a40 <fft+0x380>
    {
      j=j-k;
   41a1c:	e0ffef17 	ldw	r3,-68(fp)
   41a20:	e0bff017 	ldw	r2,-64(fp)
   41a24:	1885c83a 	sub	r2,r3,r2
   41a28:	e0bfef15 	stw	r2,-68(fp)
      k=k/2;
   41a2c:	e0bff017 	ldw	r2,-64(fp)
   41a30:	1006d7fa 	srli	r3,r2,31
   41a34:	1885883a 	add	r2,r3,r2
   41a38:	1005d07a 	srai	r2,r2,1
   41a3c:	e0bff015 	stw	r2,-64(fp)

  j=0;
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
  {
    k=M/2;
    while (k<=j)
   41a40:	e0bff017 	ldw	r2,-64(fp)
   41a44:	e0ffef17 	ldw	r3,-68(fp)
   41a48:	18bff40e 	bge	r3,r2,41a1c <__alt_data_end+0xfffcfa1c>
    {
      j=j-k;
      k=k/2;
    }
    j=j+k;
   41a4c:	e0ffef17 	ldw	r3,-68(fp)
   41a50:	e0bff017 	ldw	r2,-64(fp)
   41a54:	1885883a 	add	r2,r3,r2
   41a58:	e0bfef15 	stw	r2,-68(fp)
    if (i<j)
   41a5c:	e0ffee17 	ldw	r3,-72(fp)
   41a60:	e0bfef17 	ldw	r2,-68(fp)
   41a64:	18802c0e 	bge	r3,r2,41b18 <fft+0x458>
    {
      temp1.real=(Y[j]).real;
   41a68:	e0bfef17 	ldw	r2,-68(fp)
   41a6c:	100490fa 	slli	r2,r2,3
   41a70:	e0fffb17 	ldw	r3,-20(fp)
   41a74:	1887883a 	add	r3,r3,r2
   41a78:	18800017 	ldw	r2,0(r3)
   41a7c:	e0bff715 	stw	r2,-36(fp)
      temp1.imag=(Y[j]).imag;
   41a80:	e0bfef17 	ldw	r2,-68(fp)
   41a84:	100490fa 	slli	r2,r2,3
   41a88:	e0fffb17 	ldw	r3,-20(fp)
   41a8c:	1887883a 	add	r3,r3,r2
   41a90:	18800117 	ldw	r2,4(r3)
   41a94:	e0bff815 	stw	r2,-32(fp)
      (Y[j]).real=(Y[i]).real;
   41a98:	e0bfef17 	ldw	r2,-68(fp)
   41a9c:	100490fa 	slli	r2,r2,3
   41aa0:	e0fffb17 	ldw	r3,-20(fp)
   41aa4:	1885883a 	add	r2,r3,r2
   41aa8:	e0ffee17 	ldw	r3,-72(fp)
   41aac:	180690fa 	slli	r3,r3,3
   41ab0:	e13ffb17 	ldw	r4,-20(fp)
   41ab4:	20c9883a 	add	r4,r4,r3
   41ab8:	20c00017 	ldw	r3,0(r4)
   41abc:	10c00015 	stw	r3,0(r2)
      (Y[j]).imag=(Y[i]).imag;
   41ac0:	e0bfef17 	ldw	r2,-68(fp)
   41ac4:	100490fa 	slli	r2,r2,3
   41ac8:	e0fffb17 	ldw	r3,-20(fp)
   41acc:	1885883a 	add	r2,r3,r2
   41ad0:	e0ffee17 	ldw	r3,-72(fp)
   41ad4:	180690fa 	slli	r3,r3,3
   41ad8:	e13ffb17 	ldw	r4,-20(fp)
   41adc:	20c9883a 	add	r4,r4,r3
   41ae0:	20c00117 	ldw	r3,4(r4)
   41ae4:	10c00115 	stw	r3,4(r2)
      (Y[i]).real=temp1.real;
   41ae8:	e0bfee17 	ldw	r2,-72(fp)
   41aec:	100490fa 	slli	r2,r2,3
   41af0:	e0fffb17 	ldw	r3,-20(fp)
   41af4:	1885883a 	add	r2,r3,r2
   41af8:	e0fff717 	ldw	r3,-36(fp)
   41afc:	10c00015 	stw	r3,0(r2)
      (Y[i]).imag=temp1.imag;
   41b00:	e0bfee17 	ldw	r2,-72(fp)
   41b04:	100490fa 	slli	r2,r2,3
   41b08:	e0fffb17 	ldw	r3,-20(fp)
   41b0c:	1885883a 	add	r2,r3,r2
   41b10:	e0fff817 	ldw	r3,-32(fp)
   41b14:	10c00115 	stw	r3,4(r2)
    leg_diff=leg_diff/2;
    step*=2;
  }

  j=0;
  for (i=1;i<(M-1);i++)           //bit reversal for resequencing data
   41b18:	e0bfee17 	ldw	r2,-72(fp)
   41b1c:	10800044 	addi	r2,r2,1
   41b20:	e0bfee15 	stw	r2,-72(fp)
   41b24:	e0bffc17 	ldw	r2,-16(fp)
   41b28:	10bfffc4 	addi	r2,r2,-1
   41b2c:	e0ffee17 	ldw	r3,-72(fp)
   41b30:	18bfb416 	blt	r3,r2,41a04 <__alt_data_end+0xfffcfa04>
      (Y[i]).real=temp1.real;
      (Y[i]).imag=temp1.imag;
    }
  }

  return;
   41b34:	0001883a 	nop
}                                 //end of fft()
   41b38:	e6fffe04 	addi	sp,fp,-8
   41b3c:	dfc00317 	ldw	ra,12(sp)
   41b40:	df000217 	ldw	fp,8(sp)
   41b44:	dc400117 	ldw	r17,4(sp)
   41b48:	dc000017 	ldw	r16,0(sp)
   41b4c:	dec00404 	addi	sp,sp,16
   41b50:	f800283a 	ret

00041b54 <handle_switch0_interrupt>:
extern int setFreqFlag;

/*uart object*/
extern int uart;

static void handle_switch0_interrupt(void* context, alt_u32 id) {
   41b54:	defffc04 	addi	sp,sp,-16
   41b58:	df000315 	stw	fp,12(sp)
   41b5c:	df000304 	addi	fp,sp,12
   41b60:	e13ffe15 	stw	r4,-8(fp)
   41b64:	e17fff15 	stw	r5,-4(fp)
	 volatile int* switch0ptr = (volatile int *)context;
   41b68:	e0bffe17 	ldw	r2,-8(fp)
   41b6c:	e0bffd15 	stw	r2,-12(fp)
	 *switch0ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE);
   41b70:	00800234 	movhi	r2,8
   41b74:	10848304 	addi	r2,r2,4620
   41b78:	10c00037 	ldwio	r3,0(r2)
   41b7c:	e0bffd17 	ldw	r2,-12(fp)
   41b80:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0);
   41b84:	0007883a 	mov	r3,zero
   41b88:	00800234 	movhi	r2,8
   41b8c:	10848304 	addi	r2,r2,4620
   41b90:	10c00035 	stwio	r3,0(r2)

	 /*Perform Jobs*/


}
   41b94:	e037883a 	mov	sp,fp
   41b98:	df000017 	ldw	fp,0(sp)
   41b9c:	dec00104 	addi	sp,sp,4
   41ba0:	f800283a 	ret

00041ba4 <handle_switch1_interrupt>:

static void handle_switch1_interrupt(void* context, alt_u32 id) {
   41ba4:	defffc04 	addi	sp,sp,-16
   41ba8:	df000315 	stw	fp,12(sp)
   41bac:	df000304 	addi	fp,sp,12
   41bb0:	e13ffe15 	stw	r4,-8(fp)
   41bb4:	e17fff15 	stw	r5,-4(fp)
	 volatile int* switch1ptr = (volatile int *)context;
   41bb8:	e0bffe17 	ldw	r2,-8(fp)
   41bbc:	e0bffd15 	stw	r2,-12(fp)
	 *switch1ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE);
   41bc0:	00800234 	movhi	r2,8
   41bc4:	10844704 	addi	r2,r2,4380
   41bc8:	10c00037 	ldwio	r3,0(r2)
   41bcc:	e0bffd17 	ldw	r2,-12(fp)
   41bd0:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE, 0);
   41bd4:	0007883a 	mov	r3,zero
   41bd8:	00800234 	movhi	r2,8
   41bdc:	10844704 	addi	r2,r2,4380
   41be0:	10c00035 	stwio	r3,0(r2)

	 /*Perform Jobs*/
}
   41be4:	e037883a 	mov	sp,fp
   41be8:	df000017 	ldw	fp,0(sp)
   41bec:	dec00104 	addi	sp,sp,4
   41bf0:	f800283a 	ret

00041bf4 <handle_key0_interrupt>:

/* Enable the flag to send recent
 * channel buffer to host computer.
 */
static void handle_key0_interrupt(void* context, alt_u32 id) {
   41bf4:	defff404 	addi	sp,sp,-48
   41bf8:	df000b15 	stw	fp,44(sp)
   41bfc:	df000b04 	addi	fp,sp,44
   41c00:	e13ffe15 	stw	r4,-8(fp)
   41c04:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key0ptr = (volatile int *)context;
   41c08:	e0bffe17 	ldw	r2,-8(fp)
   41c0c:	e0bff515 	stw	r2,-44(fp)
	 *key0ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE);
   41c10:	00800234 	movhi	r2,8
   41c14:	10847f04 	addi	r2,r2,4604
   41c18:	10c00037 	ldwio	r3,0(r2)
   41c1c:	e0bff517 	ldw	r2,-44(fp)
   41c20:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE, 0);
   41c24:	0007883a 	mov	r3,zero
   41c28:	00800234 	movhi	r2,8
   41c2c:	10847f04 	addi	r2,r2,4604
   41c30:	10c00035 	stwio	r3,0(r2)

	 uartStartSendFlag = 1;
   41c34:	00800044 	movi	r2,1
   41c38:	d0a74715 	stw	r2,-25316(gp)
	 alt_irq_disable(leftready_id);
   41c3c:	d0a00617 	ldw	r2,-32744(gp)
   41c40:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41c44:	0005303a 	rdctl	r2,status
   41c48:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41c4c:	e0fff717 	ldw	r3,-36(fp)
   41c50:	00bfff84 	movi	r2,-2
   41c54:	1884703a 	and	r2,r3,r2
   41c58:	1001703a 	wrctl	status,r2
  
  return context;
   41c5c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41c60:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active &= ~(1 << id);
   41c64:	e0bff617 	ldw	r2,-40(fp)
   41c68:	00c00044 	movi	r3,1
   41c6c:	1884983a 	sll	r2,r3,r2
   41c70:	0084303a 	nor	r2,zero,r2
   41c74:	1007883a 	mov	r3,r2
   41c78:	008001b4 	movhi	r2,6
   41c7c:	10a1a704 	addi	r2,r2,-31076
   41c80:	10800017 	ldw	r2,0(r2)
   41c84:	1886703a 	and	r3,r3,r2
   41c88:	008001b4 	movhi	r2,6
   41c8c:	10a1a704 	addi	r2,r2,-31076
   41c90:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41c94:	008001b4 	movhi	r2,6
   41c98:	10a1a704 	addi	r2,r2,-31076
   41c9c:	10800017 	ldw	r2,0(r2)
   41ca0:	100170fa 	wrctl	ienable,r2
   41ca4:	e0bff817 	ldw	r2,-32(fp)
   41ca8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41cac:	e0bff917 	ldw	r2,-28(fp)
   41cb0:	1001703a 	wrctl	status,r2
	 alt_irq_disable(rightready_id);
   41cb4:	d0a00717 	ldw	r2,-32740(gp)
   41cb8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41cbc:	0005303a 	rdctl	r2,status
   41cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41cc4:	e0fffb17 	ldw	r3,-20(fp)
   41cc8:	00bfff84 	movi	r2,-2
   41ccc:	1884703a 	and	r2,r3,r2
   41cd0:	1001703a 	wrctl	status,r2
  
  return context;
   41cd4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41cd8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   41cdc:	e0bffa17 	ldw	r2,-24(fp)
   41ce0:	00c00044 	movi	r3,1
   41ce4:	1884983a 	sll	r2,r3,r2
   41ce8:	0084303a 	nor	r2,zero,r2
   41cec:	1007883a 	mov	r3,r2
   41cf0:	008001b4 	movhi	r2,6
   41cf4:	10a1a704 	addi	r2,r2,-31076
   41cf8:	10800017 	ldw	r2,0(r2)
   41cfc:	1886703a 	and	r3,r3,r2
   41d00:	008001b4 	movhi	r2,6
   41d04:	10a1a704 	addi	r2,r2,-31076
   41d08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41d0c:	008001b4 	movhi	r2,6
   41d10:	10a1a704 	addi	r2,r2,-31076
   41d14:	10800017 	ldw	r2,0(r2)
   41d18:	100170fa 	wrctl	ienable,r2
   41d1c:	e0bffc17 	ldw	r2,-16(fp)
   41d20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41d24:	e0bffd17 	ldw	r2,-12(fp)
   41d28:	1001703a 	wrctl	status,r2
}
   41d2c:	e037883a 	mov	sp,fp
   41d30:	df000017 	ldw	fp,0(sp)
   41d34:	dec00104 	addi	sp,sp,4
   41d38:	f800283a 	ret

00041d3c <handle_key1_interrupt>:

/* Enable the flag to update the
 * ADC sampling frequency on AIC23.
 */
static void handle_key1_interrupt(void* context, alt_u32 id) {
   41d3c:	defffc04 	addi	sp,sp,-16
   41d40:	df000315 	stw	fp,12(sp)
   41d44:	df000304 	addi	fp,sp,12
   41d48:	e13ffe15 	stw	r4,-8(fp)
   41d4c:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key1ptr = (volatile int *)context;
   41d50:	e0bffe17 	ldw	r2,-8(fp)
   41d54:	e0bffd15 	stw	r2,-12(fp)
	 *key1ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE);
   41d58:	00800234 	movhi	r2,8
   41d5c:	10847f04 	addi	r2,r2,4604
   41d60:	10c00037 	ldwio	r3,0(r2)
   41d64:	e0bffd17 	ldw	r2,-12(fp)
   41d68:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY1_BASE, 0);
   41d6c:	0007883a 	mov	r3,zero
   41d70:	00800234 	movhi	r2,8
   41d74:	10845304 	addi	r2,r2,4428
   41d78:	10c00035 	stwio	r3,0(r2)

	 //IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH1_BASE, 0x01);
	 setFreqFlag = 1;
   41d7c:	00800044 	movi	r2,1
   41d80:	d0a74a15 	stw	r2,-25304(gp)
}
   41d84:	e037883a 	mov	sp,fp
   41d88:	df000017 	ldw	fp,0(sp)
   41d8c:	dec00104 	addi	sp,sp,4
   41d90:	f800283a 	ret

00041d94 <handle_key2_interrupt>:

static void handle_key2_interrupt(void* context, alt_u32 id) {
   41d94:	defffc04 	addi	sp,sp,-16
   41d98:	df000315 	stw	fp,12(sp)
   41d9c:	df000304 	addi	fp,sp,12
   41da0:	e13ffe15 	stw	r4,-8(fp)
   41da4:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key2ptr = (volatile int *)context;
   41da8:	e0bffe17 	ldw	r2,-8(fp)
   41dac:	e0bffd15 	stw	r2,-12(fp)
	 *key2ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE);
   41db0:	00800234 	movhi	r2,8
   41db4:	10844f04 	addi	r2,r2,4412
   41db8:	10c00037 	ldwio	r3,0(r2)
   41dbc:	e0bffd17 	ldw	r2,-12(fp)
   41dc0:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE, 0);
   41dc4:	0007883a 	mov	r3,zero
   41dc8:	00800234 	movhi	r2,8
   41dcc:	10844f04 	addi	r2,r2,4412
   41dd0:	10c00035 	stwio	r3,0(r2)

}
   41dd4:	e037883a 	mov	sp,fp
   41dd8:	df000017 	ldw	fp,0(sp)
   41ddc:	dec00104 	addi	sp,sp,4
   41de0:	f800283a 	ret

00041de4 <handle_key3_interrupt>:

static void handle_key3_interrupt(void* context, alt_u32 id) {
   41de4:	defffc04 	addi	sp,sp,-16
   41de8:	df000315 	stw	fp,12(sp)
   41dec:	df000304 	addi	fp,sp,12
   41df0:	e13ffe15 	stw	r4,-8(fp)
   41df4:	e17fff15 	stw	r5,-4(fp)
	 volatile int* key3ptr = (volatile int *)context;
   41df8:	e0bffe17 	ldw	r2,-8(fp)
   41dfc:	e0bffd15 	stw	r2,-12(fp)
	 *key3ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE);
   41e00:	00800234 	movhi	r2,8
   41e04:	10844b04 	addi	r2,r2,4396
   41e08:	10c00037 	ldwio	r3,0(r2)
   41e0c:	e0bffd17 	ldw	r2,-12(fp)
   41e10:	10c00015 	stw	r3,0(r2)

	 /* Write to the edge capture register to reset it. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE, 0);
   41e14:	0007883a 	mov	r3,zero
   41e18:	00800234 	movhi	r2,8
   41e1c:	10844b04 	addi	r2,r2,4396
   41e20:	10c00035 	stwio	r3,0(r2)

	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x10);
   41e24:	00c00404 	movi	r3,16
   41e28:	00800234 	movhi	r2,8
   41e2c:	10848404 	addi	r2,r2,4624
   41e30:	10c00035 	stwio	r3,0(r2)
}
   41e34:	e037883a 	mov	sp,fp
   41e38:	df000017 	ldw	fp,0(sp)
   41e3c:	dec00104 	addi	sp,sp,4
   41e40:	f800283a 	ret

00041e44 <unsigned2signed>:
 *  store in buffer,
 *  instantly play back.
 *
 */

int unsigned2signed(alt_16 unsign){
   41e44:	defffd04 	addi	sp,sp,-12
   41e48:	df000215 	stw	fp,8(sp)
   41e4c:	df000204 	addi	fp,sp,8
   41e50:	2005883a 	mov	r2,r4
   41e54:	e0bfff0d 	sth	r2,-4(fp)
	int result;
	if(unsign>32767)
		result = unsign - 65536;
	else
		result = unsign;
   41e58:	e0bfff0f 	ldh	r2,-4(fp)
   41e5c:	e0bffe15 	stw	r2,-8(fp)
	return result;
   41e60:	e0bffe17 	ldw	r2,-8(fp)
}
   41e64:	e037883a 	mov	sp,fp
   41e68:	df000017 	ldw	fp,0(sp)
   41e6c:	dec00104 	addi	sp,sp,4
   41e70:	f800283a 	ret

00041e74 <signed2unsigned>:

alt_16 signed2unsigned(int sign){
   41e74:	defffd04 	addi	sp,sp,-12
   41e78:	df000215 	stw	fp,8(sp)
   41e7c:	df000204 	addi	fp,sp,8
   41e80:	e13fff15 	stw	r4,-4(fp)
	alt_16 result;
	if(sign<0)
   41e84:	e0bfff17 	ldw	r2,-4(fp)
   41e88:	1000030e 	bge	r2,zero,41e98 <signed2unsigned+0x24>
		result = sign + 65536;
   41e8c:	e0bfff17 	ldw	r2,-4(fp)
   41e90:	e0bffe0d 	sth	r2,-8(fp)
   41e94:	00000206 	br	41ea0 <signed2unsigned+0x2c>
	else
		result = sign;
   41e98:	e0bfff17 	ldw	r2,-4(fp)
   41e9c:	e0bffe0d 	sth	r2,-8(fp)
	return result;
   41ea0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   41ea4:	e037883a 	mov	sp,fp
   41ea8:	df000017 	ldw	fp,0(sp)
   41eac:	dec00104 	addi	sp,sp,4
   41eb0:	f800283a 	ret

00041eb4 <handle_leftready_interrupt_test>:

static void handle_leftready_interrupt_test(void* context, alt_u32 id) {
   41eb4:	defffc04 	addi	sp,sp,-16
   41eb8:	df000315 	stw	fp,12(sp)
   41ebc:	df000304 	addi	fp,sp,12
   41ec0:	e13ffe15 	stw	r4,-8(fp)
   41ec4:	e17fff15 	stw	r5,-4(fp)
	 volatile int* leftreadyptr = (volatile int *)context;
   41ec8:	e0bffe17 	ldw	r2,-8(fp)
   41ecc:	e0bffd15 	stw	r2,-12(fp)
	 *leftreadyptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE);
   41ed0:	00800234 	movhi	r2,8
   41ed4:	10842b04 	addi	r2,r2,4268
   41ed8:	10c00037 	ldwio	r3,0(r2)
   41edc:	e0bffd17 	ldw	r2,-12(fp)
   41ee0:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE, 0);
   41ee4:	0007883a 	mov	r3,zero
   41ee8:	00800234 	movhi	r2,8
   41eec:	10842b04 	addi	r2,r2,4268
   41ef0:	10c00035 	stwio	r3,0(r2)
	 /*******Read, playback, store data*******/
	 leftChannel = IORD_ALTERA_AVALON_PIO_DATA(LEFTDATA_BASE);
   41ef4:	00800234 	movhi	r2,8
   41ef8:	10843004 	addi	r2,r2,4288
   41efc:	10800037 	ldwio	r2,0(r2)
   41f00:	d0a73f15 	stw	r2,-25348(gp)
	 IOWR_ALTERA_AVALON_PIO_DATA(LEFTSENDDATA_BASE, leftChannel);
   41f04:	d0e73f17 	ldw	r3,-25348(gp)
   41f08:	00800234 	movhi	r2,8
   41f0c:	10842004 	addi	r2,r2,4224
   41f10:	10c00035 	stwio	r3,0(r2)
	 datatest[leftCount] = leftChannel;
   41f14:	d0e74317 	ldw	r3,-25332(gp)
   41f18:	d0a73f17 	ldw	r2,-25348(gp)
   41f1c:	1009883a 	mov	r4,r2
   41f20:	008001b4 	movhi	r2,6
   41f24:	10a1b704 	addi	r2,r2,-31012
   41f28:	18c7883a 	add	r3,r3,r3
   41f2c:	10c5883a 	add	r2,r2,r3
   41f30:	1100000d 	sth	r4,0(r2)
	 leftCount = (leftCount+1)%256;
   41f34:	d0a74317 	ldw	r2,-25332(gp)
   41f38:	10c00044 	addi	r3,r2,1
   41f3c:	00a00034 	movhi	r2,32768
   41f40:	10803fc4 	addi	r2,r2,255
   41f44:	1884703a 	and	r2,r3,r2
   41f48:	1000040e 	bge	r2,zero,41f5c <handle_leftready_interrupt_test+0xa8>
   41f4c:	10bfffc4 	addi	r2,r2,-1
   41f50:	00ffc004 	movi	r3,-256
   41f54:	10c4b03a 	or	r2,r2,r3
   41f58:	10800044 	addi	r2,r2,1
   41f5c:	d0a74315 	stw	r2,-25332(gp)
//	 /****************************************/

}
   41f60:	e037883a 	mov	sp,fp
   41f64:	df000017 	ldw	fp,0(sp)
   41f68:	dec00104 	addi	sp,sp,4
   41f6c:	f800283a 	ret

00041f70 <handle_rightready_interrupt_test>:
/*  Detect right channel ready interrupt and do:
 *  Collect data,
 *  store in buffer,
 *  instantly play back.
 */
static void handle_rightready_interrupt_test(void* context, alt_u32 id) {
   41f70:	defffb04 	addi	sp,sp,-20
   41f74:	dfc00415 	stw	ra,16(sp)
   41f78:	df000315 	stw	fp,12(sp)
   41f7c:	df000304 	addi	fp,sp,12
   41f80:	e13ffe15 	stw	r4,-8(fp)
   41f84:	e17fff15 	stw	r5,-4(fp)
	 volatile int* rightreadyptr = (volatile int *)context;
   41f88:	e0bffe17 	ldw	r2,-8(fp)
   41f8c:	e0bffd15 	stw	r2,-12(fp)
	 *rightreadyptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE);
   41f90:	00800234 	movhi	r2,8
   41f94:	10842704 	addi	r2,r2,4252
   41f98:	10c00037 	ldwio	r3,0(r2)
   41f9c:	e0bffd17 	ldw	r2,-12(fp)
   41fa0:	10c00015 	stw	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE, 0);
   41fa4:	0007883a 	mov	r3,zero
   41fa8:	00800234 	movhi	r2,8
   41fac:	10842704 	addi	r2,r2,4252
   41fb0:	10c00035 	stwio	r3,0(r2)
	 /*******Read, playback, store data*******/
	 rightChannel = IORD_ALTERA_AVALON_PIO_DATA(RIGHTDATA_BASE);
   41fb4:	00800234 	movhi	r2,8
   41fb8:	10842c04 	addi	r2,r2,4272
   41fbc:	10800037 	ldwio	r2,0(r2)
   41fc0:	d0a74015 	stw	r2,-25344(gp)
	 IOWR_ALTERA_AVALON_PIO_DATA(RIGHTSENDDATA_BASE, rightChannel);
   41fc4:	d0e74017 	ldw	r3,-25344(gp)
   41fc8:	00800234 	movhi	r2,8
   41fcc:	10841c04 	addi	r2,r2,4208
   41fd0:	10c00035 	stwio	r3,0(r2)
	 rightChannelData[rightCount] = rightChannel;
   41fd4:	d0e74517 	ldw	r3,-25324(gp)
   41fd8:	d0a74017 	ldw	r2,-25344(gp)
   41fdc:	1009883a 	mov	r4,r2
   41fe0:	008001b4 	movhi	r2,6
   41fe4:	10a72d04 	addi	r2,r2,-25420
   41fe8:	18c7883a 	add	r3,r3,r3
   41fec:	10c5883a 	add	r2,r2,r3
   41ff0:	1100000d 	sth	r4,0(r2)
	 rightCount = (rightCount+1) % BUFFERSIZE;
   41ff4:	d0a74517 	ldw	r2,-25324(gp)
   41ff8:	10800044 	addi	r2,r2,1
   41ffc:	1009883a 	mov	r4,r2
   42000:	014006c4 	movi	r5,27
   42004:	0044b540 	call	44b54 <__modsi3>
   42008:	d0a74515 	stw	r2,-25324(gp)
	 /****************************************/
}
   4200c:	e037883a 	mov	sp,fp
   42010:	dfc00117 	ldw	ra,4(sp)
   42014:	df000017 	ldw	fp,0(sp)
   42018:	dec00204 	addi	sp,sp,8
   4201c:	f800283a 	ret

00042020 <system_initialization>:

/*uart object*/
int uart;

/*System initialization function. Should be called before your while(1)*/
void system_initialization(){
   42020:	defffe04 	addi	sp,sp,-8
   42024:	dfc00115 	stw	ra,4(sp)
   42028:	df000015 	stw	fp,0(sp)
   4202c:	d839883a 	mov	fp,sp
	/*Hard-code to 1 right here, you can use ISR
	 *to change the value by yourself
	*/
	uartStartRecvFlag = 1;
   42030:	00800044 	movi	r2,1
   42034:	d0a74815 	stw	r2,-25312(gp)

	 /*Open Uart port and ready to transmit and receive*/
	 uart = open(UART_NAME, O_ACCMODE);
   42038:	01000174 	movhi	r4,5
   4203c:	21120e04 	addi	r4,r4,18488
   42040:	014000c4 	movi	r5,3
   42044:	0051f800 	call	51f80 <open>
   42048:	d0a74c15 	stw	r2,-25296(gp)
	 if(!uart){
   4204c:	d0a74c17 	ldw	r2,-25296(gp)
   42050:	1000041e 	bne	r2,zero,42064 <system_initialization+0x44>
		 printf("failed to open uart\n");
   42054:	01000174 	movhi	r4,5
   42058:	21121104 	addi	r4,r4,18500
   4205c:	004806c0 	call	4806c <puts>
   42060:	00000306 	br	42070 <system_initialization+0x50>
		 //return 0;
	 } else {
		 printf("Uart ready!\n");
   42064:	01000174 	movhi	r4,5
   42068:	21121604 	addi	r4,r4,18520
   4206c:	004806c0 	call	4806c <puts>
	 }

	 //Interrupts Registrations
	 alt_irq_register(switch0_id, (void *)&switch0, handle_switch0_interrupt);
   42070:	d0a00017 	ldw	r2,-32768(gp)
   42074:	1009883a 	mov	r4,r2
   42078:	d1673704 	addi	r5,gp,-25380
   4207c:	01800134 	movhi	r6,4
   42080:	3186d504 	addi	r6,r6,6996
   42084:	00519000 	call	51900 <alt_irq_register>
	 alt_irq_register(switch1_id, (void *)&switch1, handle_switch1_interrupt);
   42088:	d0a00117 	ldw	r2,-32764(gp)
   4208c:	1009883a 	mov	r4,r2
   42090:	d1673804 	addi	r5,gp,-25376
   42094:	01800134 	movhi	r6,4
   42098:	3186e904 	addi	r6,r6,7076
   4209c:	00519000 	call	51900 <alt_irq_register>
	 alt_irq_register(key0_id, (void *)&key0, handle_key0_interrupt);
   420a0:	d0a00217 	ldw	r2,-32760(gp)
   420a4:	1009883a 	mov	r4,r2
   420a8:	d1673904 	addi	r5,gp,-25372
   420ac:	01800134 	movhi	r6,4
   420b0:	3186fd04 	addi	r6,r6,7156
   420b4:	00519000 	call	51900 <alt_irq_register>
	 alt_irq_register(key1_id, (void *)&key1, handle_key1_interrupt);
   420b8:	d0a00317 	ldw	r2,-32756(gp)
   420bc:	1009883a 	mov	r4,r2
   420c0:	d1673a04 	addi	r5,gp,-25368
   420c4:	01800134 	movhi	r6,4
   420c8:	31874f04 	addi	r6,r6,7484
   420cc:	00519000 	call	51900 <alt_irq_register>
	 alt_irq_register(key2_id, (void *)&key2, handle_key2_interrupt);
   420d0:	d0a00417 	ldw	r2,-32752(gp)
   420d4:	1009883a 	mov	r4,r2
   420d8:	d1673b04 	addi	r5,gp,-25364
   420dc:	01800134 	movhi	r6,4
   420e0:	31876504 	addi	r6,r6,7572
   420e4:	00519000 	call	51900 <alt_irq_register>
	 alt_irq_register(key3_id, (void *)&key3, handle_key3_interrupt);
   420e8:	d0a00517 	ldw	r2,-32748(gp)
   420ec:	1009883a 	mov	r4,r2
   420f0:	d1673c04 	addi	r5,gp,-25360
   420f4:	01800134 	movhi	r6,4
   420f8:	31877904 	addi	r6,r6,7652
   420fc:	00519000 	call	51900 <alt_irq_register>
	 alt_irq_register(leftready_id, (void *)&leftready, handle_leftready_interrupt_test);
   42100:	d0a00617 	ldw	r2,-32744(gp)
   42104:	1009883a 	mov	r4,r2
   42108:	d1673d04 	addi	r5,gp,-25356
   4210c:	01800134 	movhi	r6,4
   42110:	3187ad04 	addi	r6,r6,7860
   42114:	00519000 	call	51900 <alt_irq_register>
	 alt_irq_register(rightready_id, (void *)&rightready, handle_rightready_interrupt_test);
   42118:	d0a00717 	ldw	r2,-32740(gp)
   4211c:	1009883a 	mov	r4,r2
   42120:	d1673e04 	addi	r5,gp,-25352
   42124:	01800134 	movhi	r6,4
   42128:	3187dc04 	addi	r6,r6,8048
   4212c:	00519000 	call	51900 <alt_irq_register>

	 /*Interrupt enable -> mask to enable it*/
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH0_BASE, 1);
   42130:	00c00044 	movi	r3,1
   42134:	00800234 	movhi	r2,8
   42138:	10848204 	addi	r2,r2,4616
   4213c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH1_BASE, 1);
   42140:	00c00044 	movi	r3,1
   42144:	00800234 	movhi	r2,8
   42148:	10844604 	addi	r2,r2,4376
   4214c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY0_BASE, 1);
   42150:	00c00044 	movi	r3,1
   42154:	00800234 	movhi	r2,8
   42158:	10847e04 	addi	r2,r2,4600
   4215c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY1_BASE, 1);
   42160:	00c00044 	movi	r3,1
   42164:	00800234 	movhi	r2,8
   42168:	10845204 	addi	r2,r2,4424
   4216c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY2_BASE, 1);
   42170:	00c00044 	movi	r3,1
   42174:	00800234 	movhi	r2,8
   42178:	10844e04 	addi	r2,r2,4408
   4217c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY3_BASE, 1);
   42180:	00c00044 	movi	r3,1
   42184:	00800234 	movhi	r2,8
   42188:	10844a04 	addi	r2,r2,4392
   4218c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(LEFTREADY_BASE, 1);
   42190:	00c00044 	movi	r3,1
   42194:	00800234 	movhi	r2,8
   42198:	10842a04 	addi	r2,r2,4264
   4219c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(RIGHTREADY_BASE, 1);
   421a0:	00c00044 	movi	r3,1
   421a4:	00800234 	movhi	r2,8
   421a8:	10842604 	addi	r2,r2,4248
   421ac:	10c00035 	stwio	r3,0(r2)

	 /*Reset edge capture bit*/
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0);
   421b0:	0007883a 	mov	r3,zero
   421b4:	00800234 	movhi	r2,8
   421b8:	10848304 	addi	r2,r2,4620
   421bc:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH1_BASE, 0);
   421c0:	0007883a 	mov	r3,zero
   421c4:	00800234 	movhi	r2,8
   421c8:	10844704 	addi	r2,r2,4380
   421cc:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY0_BASE, 0);
   421d0:	0007883a 	mov	r3,zero
   421d4:	00800234 	movhi	r2,8
   421d8:	10847f04 	addi	r2,r2,4604
   421dc:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY1_BASE, 0);
   421e0:	0007883a 	mov	r3,zero
   421e4:	00800234 	movhi	r2,8
   421e8:	10845304 	addi	r2,r2,4428
   421ec:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY2_BASE, 0);
   421f0:	0007883a 	mov	r3,zero
   421f4:	00800234 	movhi	r2,8
   421f8:	10844f04 	addi	r2,r2,4412
   421fc:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY3_BASE, 0);
   42200:	0007883a 	mov	r3,zero
   42204:	00800234 	movhi	r2,8
   42208:	10844b04 	addi	r2,r2,4396
   4220c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(LEFTREADY_BASE, 0);
   42210:	0007883a 	mov	r3,zero
   42214:	00800234 	movhi	r2,8
   42218:	10842b04 	addi	r2,r2,4268
   4221c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(RIGHTREADY_BASE, 0);
   42220:	0007883a 	mov	r3,zero
   42224:	00800234 	movhi	r2,8
   42228:	10842704 	addi	r2,r2,4252
   4222c:	10c00035 	stwio	r3,0(r2)

	 /*turn off all LEDs*/
	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   42230:	0007883a 	mov	r3,zero
   42234:	00800234 	movhi	r2,8
   42238:	10848404 	addi	r2,r2,4624
   4223c:	10c00035 	stwio	r3,0(r2)

	 /*initialize SPI transmission*/
	 IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 1); // ~CS low
   42240:	00c00044 	movi	r3,1
   42244:	00800234 	movhi	r2,8
   42248:	10847404 	addi	r2,r2,4560
   4224c:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0); // Initialize SCLK to high
   42250:	0007883a 	mov	r3,zero
   42254:	00800234 	movhi	r2,8
   42258:	10847004 	addi	r2,r2,4544
   4225c:	10c00035 	stwio	r3,0(r2)
}
   42260:	e037883a 	mov	sp,fp
   42264:	dfc00117 	ldw	ra,4(sp)
   42268:	df000017 	ldw	fp,0(sp)
   4226c:	dec00204 	addi	sp,sp,8
   42270:	f800283a 	ret

00042274 <main>:
to verify. Also take advantage of the data exporting via UART (see the example in Lecture Note 1 about
transferring a chunk of data to Matlab via UART), use the appropriate Matlab command to plot the 256
most recent output samples in the time domain, as well as the FFT magnitudes of these 256 samples.
 *
 * */
int main(void) {
   42274:	defefd04 	addi	sp,sp,-1036
   42278:	dfc10215 	stw	ra,1032(sp)
   4227c:	df010115 	stw	fp,1028(sp)
   42280:	df010104 	addi	fp,sp,1028
	 system_initialization();
   42284:	00420200 	call	42020 <system_initialization>
     // set frequency
	 sampleFrequency = 0x000C; //8k
   42288:	00800304 	movi	r2,12
   4228c:	d0a00915 	stw	r2,-32732(gp)
	 //sampleFrequency = 0x0019; //32k
	 //sampleFrequency = 0x0023; //44.1k
	 //sampleFrequency = 0x0001; //48k
	 aic23_demo[8] = sampleFrequency;
   42290:	d0a00917 	ldw	r2,-32732(gp)
   42294:	1007883a 	mov	r3,r2
   42298:	00800174 	movhi	r2,5
   4229c:	10936704 	addi	r2,r2,19868
   422a0:	10c00815 	stw	r3,32(r2)
	 AIC23_demo();
   422a4:	00403340 	call	40334 <AIC23_demo>

	 int UARTData[256];
	 int i;
	 for(i=0; i<256; i++){
   422a8:	e03eff15 	stw	zero,-1028(fp)
   422ac:	00003506 	br	42384 <main+0x110>
		 UARTData[i] = (int) 1000 * sin(2*PI*i/256);
   422b0:	e13eff17 	ldw	r4,-1028(fp)
   422b4:	0047d800 	call	47d80 <__floatsidf>
   422b8:	100b883a 	mov	r5,r2
   422bc:	180d883a 	mov	r6,r3
   422c0:	2809883a 	mov	r4,r5
   422c4:	300b883a 	mov	r5,r6
   422c8:	01bf22f4 	movhi	r6,64651
   422cc:	31801e84 	addi	r6,r6,122
   422d0:	01d00674 	movhi	r7,16409
   422d4:	39c87e84 	addi	r7,r7,8698
   422d8:	0046d040 	call	46d04 <__muldf3>
   422dc:	1009883a 	mov	r4,r2
   422e0:	180b883a 	mov	r5,r3
   422e4:	2005883a 	mov	r2,r4
   422e8:	2807883a 	mov	r3,r5
   422ec:	1009883a 	mov	r4,r2
   422f0:	180b883a 	mov	r5,r3
   422f4:	000d883a 	mov	r6,zero
   422f8:	01d01c34 	movhi	r7,16496
   422fc:	00462d40 	call	462d4 <__divdf3>
   42300:	1009883a 	mov	r4,r2
   42304:	180b883a 	mov	r5,r3
   42308:	2005883a 	mov	r2,r4
   4230c:	2807883a 	mov	r3,r5
   42310:	1009883a 	mov	r4,r2
   42314:	180b883a 	mov	r5,r3
   42318:	00429840 	call	42984 <sin>
   4231c:	100b883a 	mov	r5,r2
   42320:	180d883a 	mov	r6,r3
   42324:	2809883a 	mov	r4,r5
   42328:	300b883a 	mov	r5,r6
   4232c:	000d883a 	mov	r6,zero
   42330:	01d023f4 	movhi	r7,16527
   42334:	39d00004 	addi	r7,r7,16384
   42338:	0046d040 	call	46d04 <__muldf3>
   4233c:	1009883a 	mov	r4,r2
   42340:	180b883a 	mov	r5,r3
   42344:	2005883a 	mov	r2,r4
   42348:	2807883a 	mov	r3,r5
   4234c:	1009883a 	mov	r4,r2
   42350:	180b883a 	mov	r5,r3
   42354:	0047cf80 	call	47cf8 <__fixdfsi>
   42358:	1007883a 	mov	r3,r2
   4235c:	e0beff17 	ldw	r2,-1028(fp)
   42360:	1085883a 	add	r2,r2,r2
   42364:	1085883a 	add	r2,r2,r2
   42368:	e13eff04 	addi	r4,fp,-1028
   4236c:	2085883a 	add	r2,r4,r2
   42370:	10800104 	addi	r2,r2,4
   42374:	10c00015 	stw	r3,0(r2)
	 aic23_demo[8] = sampleFrequency;
	 AIC23_demo();

	 int UARTData[256];
	 int i;
	 for(i=0; i<256; i++){
   42378:	e0beff17 	ldw	r2,-1028(fp)
   4237c:	10800044 	addi	r2,r2,1
   42380:	e0beff15 	stw	r2,-1028(fp)
   42384:	e0beff17 	ldw	r2,-1028(fp)
   42388:	10804010 	cmplti	r2,r2,256
   4238c:	103fc81e 	bne	r2,zero,422b0 <__alt_data_end+0xfffd02b0>
		 UARTData[i] = (int) 1000 * sin(2*PI*i/256);
		 //UARTData[ii] = sine_table[ii%10];
	 }
	 i = 0;
   42390:	e03eff15 	stw	zero,-1028(fp)
	 /*Your main infinity while loop*/
	 while(1){
		 if (uartStartSendFlag) {
   42394:	d0a74717 	ldw	r2,-25316(gp)
   42398:	10001226 	beq	r2,zero,423e4 <main+0x170>
			 for (i = 0; i<256; i++) {
   4239c:	e03eff15 	stw	zero,-1028(fp)
   423a0:	00000c06 	br	423d4 <main+0x160>
				uart_sendInt16(UARTData[i]);
   423a4:	e0beff17 	ldw	r2,-1028(fp)
   423a8:	1085883a 	add	r2,r2,r2
   423ac:	1085883a 	add	r2,r2,r2
   423b0:	e0feff04 	addi	r3,fp,-1028
   423b4:	1885883a 	add	r2,r3,r2
   423b8:	10800104 	addi	r2,r2,4
   423bc:	10800017 	ldw	r2,0(r2)
   423c0:	1009883a 	mov	r4,r2
   423c4:	00426700 	call	42670 <uart_sendInt16>
	 }
	 i = 0;
	 /*Your main infinity while loop*/
	 while(1){
		 if (uartStartSendFlag) {
			 for (i = 0; i<256; i++) {
   423c8:	e0beff17 	ldw	r2,-1028(fp)
   423cc:	10800044 	addi	r2,r2,1
   423d0:	e0beff15 	stw	r2,-1028(fp)
   423d4:	e0beff17 	ldw	r2,-1028(fp)
   423d8:	10804010 	cmplti	r2,r2,256
   423dc:	103ff11e 	bne	r2,zero,423a4 <__alt_data_end+0xfffd03a4>
				uart_sendInt16(UARTData[i]);
			 }
			 uartStartSendFlag = 0;
   423e0:	d0274715 	stw	zero,-25316(gp)
		 }

		 if(IORD_ALTERA_AVALON_PIO_DATA(SWITCH0_BASE) == 1) // if DIP switch #0 on
   423e4:	00800234 	movhi	r2,8
   423e8:	10848004 	addi	r2,r2,4608
   423ec:	10800037 	ldwio	r2,0(r2)
   423f0:	10800058 	cmpnei	r2,r2,1
   423f4:	1000241e 	bne	r2,zero,42488 <main+0x214>
		 {
			 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x01); //turn LED #0 ON
   423f8:	00c00044 	movi	r3,1
   423fc:	00800234 	movhi	r2,8
   42400:	10848404 	addi	r2,r2,4624
   42404:	10c00035 	stwio	r3,0(r2)
			 IOWR_ALTERA_AVALON_PIO_DATA(LEFTSENDDATA_BASE, gain*sine_table[loop]); //output to AIC23 D/A
   42408:	d0a00b0b 	ldhu	r2,-32724(gp)
   4240c:	113fffcc 	andi	r4,r2,65535
   42410:	2120001c 	xori	r4,r4,32768
   42414:	21200004 	addi	r4,r4,-32768
   42418:	d0a74b0b 	ldhu	r2,-25300(gp)
   4241c:	10ffffcc 	andi	r3,r2,65535
   42420:	18e0001c 	xori	r3,r3,32768
   42424:	18e00004 	addi	r3,r3,-32768
   42428:	00800174 	movhi	r2,5
   4242c:	10937104 	addi	r2,r2,19908
   42430:	18c7883a 	add	r3,r3,r3
   42434:	10c5883a 	add	r2,r2,r3
   42438:	1080000b 	ldhu	r2,0(r2)
   4243c:	10bfffcc 	andi	r2,r2,65535
   42440:	10a0001c 	xori	r2,r2,32768
   42444:	10a00004 	addi	r2,r2,-32768
   42448:	2087383a 	mul	r3,r4,r2
   4244c:	00800234 	movhi	r2,8
   42450:	10842004 	addi	r2,r2,4224
   42454:	10c00035 	stwio	r3,0(r2)
			 if (loop < 9) ++loop; //check for end of table
   42458:	d0a74b0b 	ldhu	r2,-25300(gp)
   4245c:	10bfffcc 	andi	r2,r2,65535
   42460:	10a0001c 	xori	r2,r2,32768
   42464:	10a00004 	addi	r2,r2,-32768
   42468:	10800248 	cmpgei	r2,r2,9
   4246c:	1000041e 	bne	r2,zero,42480 <main+0x20c>
   42470:	d0a74b0b 	ldhu	r2,-25300(gp)
   42474:	10800044 	addi	r2,r2,1
   42478:	d0a74b0d 	sth	r2,-25300(gp)
   4247c:	00000606 	br	42498 <main+0x224>
			 else loop = 0; //reinit loop index
   42480:	d0274b0d 	sth	zero,-25300(gp)
   42484:	003fc306 	br	42394 <__alt_data_end+0xfffd0394>

		 }
		 else IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   42488:	0007883a 	mov	r3,zero
   4248c:	00800234 	movhi	r2,8
   42490:	10848404 	addi	r2,r2,4624
   42494:	10c00035 	stwio	r3,0(r2)
	 }
   42498:	003fbe06 	br	42394 <__alt_data_end+0xfffd0394>

0004249c <spi_send>:

#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "delay.h"

void spi_send(unsigned int address, unsigned int data){
   4249c:	defffb04 	addi	sp,sp,-20
   424a0:	dfc00415 	stw	ra,16(sp)
   424a4:	df000315 	stw	fp,12(sp)
   424a8:	df000304 	addi	fp,sp,12
   424ac:	e13ffe15 	stw	r4,-8(fp)
   424b0:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
   424b4:	e03ffd15 	stw	zero,-12(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 0); // Begin
   424b8:	0007883a 	mov	r3,zero
   424bc:	00800234 	movhi	r2,8
   424c0:	10847404 	addi	r2,r2,4560
   424c4:	10c00035 	stwio	r3,0(r2)
	delay(150);
   424c8:	01002584 	movi	r4,150
   424cc:	00412800 	call	41280 <delay>
	for(i = 0; i < 7; i++){
   424d0:	e03ffd15 	stw	zero,-12(fp)
   424d4:	00002006 	br	42558 <spi_send+0xbc>
		if((address & 0x40) != 0){
   424d8:	e0bffe17 	ldw	r2,-8(fp)
   424dc:	1080100c 	andi	r2,r2,64
   424e0:	10000526 	beq	r2,zero,424f8 <spi_send+0x5c>
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 1);
   424e4:	00c00044 	movi	r3,1
   424e8:	00800234 	movhi	r2,8
   424ec:	10846c04 	addi	r2,r2,4528
   424f0:	10c00035 	stwio	r3,0(r2)
   424f4:	00000406 	br	42508 <spi_send+0x6c>
			//printf("1");
		}else{
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 0);
   424f8:	0007883a 	mov	r3,zero
   424fc:	00800234 	movhi	r2,8
   42500:	10846c04 	addi	r2,r2,4528
   42504:	10c00035 	stwio	r3,0(r2)
			//printf("0");
		}
		delay(1000);
   42508:	0100fa04 	movi	r4,1000
   4250c:	00412800 	call	41280 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
   42510:	00c00044 	movi	r3,1
   42514:	00800234 	movhi	r2,8
   42518:	10847004 	addi	r2,r2,4544
   4251c:	10c00035 	stwio	r3,0(r2)
		delay(1000);
   42520:	0100fa04 	movi	r4,1000
   42524:	00412800 	call	41280 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0);
   42528:	0007883a 	mov	r3,zero
   4252c:	00800234 	movhi	r2,8
   42530:	10847004 	addi	r2,r2,4544
   42534:	10c00035 	stwio	r3,0(r2)
		delay(1000);
   42538:	0100fa04 	movi	r4,1000
   4253c:	00412800 	call	41280 <delay>

		address <<= 1;
   42540:	e0bffe17 	ldw	r2,-8(fp)
   42544:	1085883a 	add	r2,r2,r2
   42548:	e0bffe15 	stw	r2,-8(fp)
void spi_send(unsigned int address, unsigned int data){
	int i = 0;

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 0); // Begin
	delay(150);
	for(i = 0; i < 7; i++){
   4254c:	e0bffd17 	ldw	r2,-12(fp)
   42550:	10800044 	addi	r2,r2,1
   42554:	e0bffd15 	stw	r2,-12(fp)
   42558:	e0bffd17 	ldw	r2,-12(fp)
   4255c:	108001d0 	cmplti	r2,r2,7
   42560:	103fdd1e 	bne	r2,zero,424d8 <__alt_data_end+0xfffd04d8>
		delay(1000);

		address <<= 1;
	}

	for(i = 0; i < 9; i++){
   42564:	e03ffd15 	stw	zero,-12(fp)
   42568:	00002006 	br	425ec <spi_send+0x150>
		if((data & 0x100) != 0){
   4256c:	e0bfff17 	ldw	r2,-4(fp)
   42570:	1080400c 	andi	r2,r2,256
   42574:	10000526 	beq	r2,zero,4258c <spi_send+0xf0>
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 1);
   42578:	00c00044 	movi	r3,1
   4257c:	00800234 	movhi	r2,8
   42580:	10846c04 	addi	r2,r2,4528
   42584:	10c00035 	stwio	r3,0(r2)
   42588:	00000406 	br	4259c <spi_send+0x100>
			//printf("1");
		}else{
			IOWR_ALTERA_AVALON_PIO_DATA(SDIN_BASE, 0);
   4258c:	0007883a 	mov	r3,zero
   42590:	00800234 	movhi	r2,8
   42594:	10846c04 	addi	r2,r2,4528
   42598:	10c00035 	stwio	r3,0(r2)
			//printf("0");
		}
		delay(1000);
   4259c:	0100fa04 	movi	r4,1000
   425a0:	00412800 	call	41280 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
   425a4:	00c00044 	movi	r3,1
   425a8:	00800234 	movhi	r2,8
   425ac:	10847004 	addi	r2,r2,4544
   425b0:	10c00035 	stwio	r3,0(r2)
		delay(1000);
   425b4:	0100fa04 	movi	r4,1000
   425b8:	00412800 	call	41280 <delay>
		IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 0);
   425bc:	0007883a 	mov	r3,zero
   425c0:	00800234 	movhi	r2,8
   425c4:	10847004 	addi	r2,r2,4544
   425c8:	10c00035 	stwio	r3,0(r2)
		delay(1000);
   425cc:	0100fa04 	movi	r4,1000
   425d0:	00412800 	call	41280 <delay>

		data <<= 1;
   425d4:	e0bfff17 	ldw	r2,-4(fp)
   425d8:	1085883a 	add	r2,r2,r2
   425dc:	e0bfff15 	stw	r2,-4(fp)
		delay(1000);

		address <<= 1;
	}

	for(i = 0; i < 9; i++){
   425e0:	e0bffd17 	ldw	r2,-12(fp)
   425e4:	10800044 	addi	r2,r2,1
   425e8:	e0bffd15 	stw	r2,-12(fp)
   425ec:	e0bffd17 	ldw	r2,-12(fp)
   425f0:	10800250 	cmplti	r2,r2,9
   425f4:	103fdd1e 	bne	r2,zero,4256c <__alt_data_end+0xfffd056c>
		delay(1000);

		data <<= 1;
	}

	IOWR_ALTERA_AVALON_PIO_DATA(CS_BASE, 1); // Latches word to AIC
   425f8:	00c00044 	movi	r3,1
   425fc:	00800234 	movhi	r2,8
   42600:	10847404 	addi	r2,r2,4560
   42604:	10c00035 	stwio	r3,0(r2)
	//IOWR_ALTERA_AVALON_PIO_DATA(SCLK_BASE, 1);
}
   42608:	e037883a 	mov	sp,fp
   4260c:	dfc00117 	ldw	ra,4(sp)
   42610:	df000017 	ldw	fp,0(sp)
   42614:	dec00204 	addi	sp,sp,8
   42618:	f800283a 	ret

0004261c <uart_sendByte>:

int counter = 0;

/*-------------------------- Send data---------------------------*/
/*Send integer value through UART*/
void uart_sendByte(char data){
   4261c:	defffd04 	addi	sp,sp,-12
   42620:	dfc00215 	stw	ra,8(sp)
   42624:	df000115 	stw	fp,4(sp)
   42628:	df000104 	addi	fp,sp,4
   4262c:	2005883a 	mov	r2,r4
   42630:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data);
   42634:	e0ffff07 	ldb	r3,-4(fp)
   42638:	00800234 	movhi	r2,8
   4263c:	10840104 	addi	r2,r2,4100
   42640:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY); //not sure about delay parameter
   42644:	0100e104 	movi	r4,900
   42648:	00412800 	call	41280 <delay>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, '\n');
   4264c:	00c00284 	movi	r3,10
   42650:	00800234 	movhi	r2,8
   42654:	10840104 	addi	r2,r2,4100
   42658:	10c00035 	stwio	r3,0(r2)
}
   4265c:	e037883a 	mov	sp,fp
   42660:	dfc00117 	ldw	ra,4(sp)
   42664:	df000017 	ldw	fp,0(sp)
   42668:	dec00204 	addi	sp,sp,8
   4266c:	f800283a 	ret

00042670 <uart_sendInt16>:

/*Send integer value through UART  -> Higher 8 bits first */
void uart_sendInt16(alt_16 data){
   42670:	defffd04 	addi	sp,sp,-12
   42674:	dfc00215 	stw	ra,8(sp)
   42678:	df000115 	stw	fp,4(sp)
   4267c:	df000104 	addi	fp,sp,4
   42680:	2005883a 	mov	r2,r4
   42684:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data & 0xFF);
   42688:	e0bfff0b 	ldhu	r2,-4(fp)
   4268c:	10bfffcc 	andi	r2,r2,65535
   42690:	10c03fcc 	andi	r3,r2,255
   42694:	00800234 	movhi	r2,8
   42698:	10840104 	addi	r2,r2,4100
   4269c:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY);
   426a0:	0100e104 	movi	r4,900
   426a4:	00412800 	call	41280 <delay>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, data >> 8);
   426a8:	e0bfff0f 	ldh	r2,-4(fp)
   426ac:	1005d23a 	srai	r2,r2,8
   426b0:	10ffffcc 	andi	r3,r2,65535
   426b4:	18e0001c 	xori	r3,r3,32768
   426b8:	18e00004 	addi	r3,r3,-32768
   426bc:	00800234 	movhi	r2,8
   426c0:	10840104 	addi	r2,r2,4100
   426c4:	10c00035 	stwio	r3,0(r2)
	delay(UART_SEND_DELAY);
   426c8:	0100e104 	movi	r4,900
   426cc:	00412800 	call	41280 <delay>

}
   426d0:	e037883a 	mov	sp,fp
   426d4:	dfc00117 	ldw	ra,4(sp)
   426d8:	df000017 	ldw	fp,0(sp)
   426dc:	dec00204 	addi	sp,sp,8
   426e0:	f800283a 	ret

000426e4 <uart_sendFloat>:



void uart_sendFloat(float data){
   426e4:	defff804 	addi	sp,sp,-32
   426e8:	dfc00715 	stw	ra,28(sp)
   426ec:	df000615 	stw	fp,24(sp)
   426f0:	df000604 	addi	fp,sp,24
   426f4:	e13fff15 	stw	r4,-4(fp)
	char number[10];
	int i = 0;
   426f8:	e03ffb15 	stw	zero,-20(fp)
	snprintf(number, sizeof(number), "%f", data);
   426fc:	e13fff17 	ldw	r4,-4(fp)
   42700:	0047e500 	call	47e50 <__extendsfdf2>
   42704:	1009883a 	mov	r4,r2
   42708:	180b883a 	mov	r5,r3
   4270c:	e0bffc04 	addi	r2,fp,-16
   42710:	d9400015 	stw	r5,0(sp)
   42714:	200f883a 	mov	r7,r4
   42718:	1009883a 	mov	r4,r2
   4271c:	01400284 	movi	r5,10
   42720:	01800174 	movhi	r6,5
   42724:	31921904 	addi	r6,r6,18532
   42728:	00481580 	call	48158 <snprintf>
	while(i < 10){
   4272c:	00000f06 	br	4276c <uart_sendFloat+0x88>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, number[i]);
   42730:	e0fffc04 	addi	r3,fp,-16
   42734:	e0bffb17 	ldw	r2,-20(fp)
   42738:	1885883a 	add	r2,r3,r2
   4273c:	10800003 	ldbu	r2,0(r2)
   42740:	10c03fcc 	andi	r3,r2,255
   42744:	18c0201c 	xori	r3,r3,128
   42748:	18ffe004 	addi	r3,r3,-128
   4274c:	00800234 	movhi	r2,8
   42750:	10840104 	addi	r2,r2,4100
   42754:	10c00035 	stwio	r3,0(r2)
		delay(UART_SEND_DELAY); //not sure about delay parameter
   42758:	0100e104 	movi	r4,900
   4275c:	00412800 	call	41280 <delay>
		i++;
   42760:	e0bffb17 	ldw	r2,-20(fp)
   42764:	10800044 	addi	r2,r2,1
   42768:	e0bffb15 	stw	r2,-20(fp)

void uart_sendFloat(float data){
	char number[10];
	int i = 0;
	snprintf(number, sizeof(number), "%f", data);
	while(i < 10){
   4276c:	e0bffb17 	ldw	r2,-20(fp)
   42770:	10800290 	cmplti	r2,r2,10
   42774:	103fee1e 	bne	r2,zero,42730 <__alt_data_end+0xfffd0730>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, number[i]);
		delay(UART_SEND_DELAY); //not sure about delay parameter
		i++;
	}
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, '\n');
   42778:	00c00284 	movi	r3,10
   4277c:	00800234 	movhi	r2,8
   42780:	10840104 	addi	r2,r2,4100
   42784:	10c00035 	stwio	r3,0(r2)

}
   42788:	e037883a 	mov	sp,fp
   4278c:	dfc00117 	ldw	ra,4(sp)
   42790:	df000017 	ldw	fp,0(sp)
   42794:	dec00204 	addi	sp,sp,8
   42798:	f800283a 	ret

0004279c <uart_SendLeftBuff>:
//		if (++RxHead > (RX_BUFFER_SIZE-1)) RxHead = 0;
//	}
//}

/*Send the whole buffer to the PC through UART*/
void uart_SendLeftBuff(void){
   4279c:	defffd04 	addi	sp,sp,-12
   427a0:	dfc00215 	stw	ra,8(sp)
   427a4:	df000115 	stw	fp,4(sp)
   427a8:	df000104 	addi	fp,sp,4
	int temp;
	temp = leftCount;
   427ac:	008001b4 	movhi	r2,6
   427b0:	10a19504 	addi	r2,r2,-31148
   427b4:	10800017 	ldw	r2,0(r2)
   427b8:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (BUFFERSIZE + temp); counter++){
   427bc:	e0bfff17 	ldw	r2,-4(fp)
   427c0:	d0a74d15 	stw	r2,-25292(gp)
   427c4:	00001206 	br	42810 <uart_SendLeftBuff+0x74>
		uart_sendInt16(leftChannelData[(counter % BUFFERSIZE)]);
   427c8:	d0a74d17 	ldw	r2,-25292(gp)
   427cc:	1009883a 	mov	r4,r2
   427d0:	014006c4 	movi	r5,27
   427d4:	0044b540 	call	44b54 <__modsi3>
   427d8:	1007883a 	mov	r3,r2
   427dc:	008001b4 	movhi	r2,6
   427e0:	10a23704 	addi	r2,r2,-30500
   427e4:	18c7883a 	add	r3,r3,r3
   427e8:	10c5883a 	add	r2,r2,r3
   427ec:	1080000b 	ldhu	r2,0(r2)
   427f0:	10bfffcc 	andi	r2,r2,65535
   427f4:	10a0001c 	xori	r2,r2,32768
   427f8:	10a00004 	addi	r2,r2,-32768
   427fc:	1009883a 	mov	r4,r2
   42800:	00426700 	call	42670 <uart_sendInt16>

/*Send the whole buffer to the PC through UART*/
void uart_SendLeftBuff(void){
	int temp;
	temp = leftCount;
	for (counter = temp; counter < (BUFFERSIZE + temp); counter++){
   42804:	d0a74d17 	ldw	r2,-25292(gp)
   42808:	10800044 	addi	r2,r2,1
   4280c:	d0a74d15 	stw	r2,-25292(gp)
   42810:	e0bfff17 	ldw	r2,-4(fp)
   42814:	108006c4 	addi	r2,r2,27
   42818:	d0e74d17 	ldw	r3,-25292(gp)
   4281c:	18bfea16 	blt	r3,r2,427c8 <__alt_data_end+0xfffd07c8>
		uart_sendInt16(leftChannelData[(counter % BUFFERSIZE)]);
	}
}
   42820:	e037883a 	mov	sp,fp
   42824:	dfc00117 	ldw	ra,4(sp)
   42828:	df000017 	ldw	fp,0(sp)
   4282c:	dec00204 	addi	sp,sp,8
   42830:	f800283a 	ret

00042834 <uart_SendTestBuff>:

/*Send the whole testing 1000 data buffer to the PC through UART*/
void uart_SendTestBuff(void){
   42834:	defffd04 	addi	sp,sp,-12
   42838:	dfc00215 	stw	ra,8(sp)
   4283c:	df000115 	stw	fp,4(sp)
   42840:	df000104 	addi	fp,sp,4
	int temp;
	temp = lefttestCount;
   42844:	008001b4 	movhi	r2,6
   42848:	10a19604 	addi	r2,r2,-31144
   4284c:	10800017 	ldw	r2,0(r2)
   42850:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (256 + temp); counter++){
   42854:	e0bfff17 	ldw	r2,-4(fp)
   42858:	d0a74d15 	stw	r2,-25292(gp)
   4285c:	00001706 	br	428bc <uart_SendTestBuff+0x88>
		uart_sendInt16(datatest[counter % 256]);
   42860:	d0e74d17 	ldw	r3,-25292(gp)
   42864:	00a00034 	movhi	r2,32768
   42868:	10803fc4 	addi	r2,r2,255
   4286c:	1884703a 	and	r2,r3,r2
   42870:	1000040e 	bge	r2,zero,42884 <uart_SendTestBuff+0x50>
   42874:	10bfffc4 	addi	r2,r2,-1
   42878:	00ffc004 	movi	r3,-256
   4287c:	10c4b03a 	or	r2,r2,r3
   42880:	10800044 	addi	r2,r2,1
   42884:	1007883a 	mov	r3,r2
   42888:	008001b4 	movhi	r2,6
   4288c:	10a1b704 	addi	r2,r2,-31012
   42890:	18c7883a 	add	r3,r3,r3
   42894:	10c5883a 	add	r2,r2,r3
   42898:	1080000b 	ldhu	r2,0(r2)
   4289c:	10bfffcc 	andi	r2,r2,65535
   428a0:	10a0001c 	xori	r2,r2,32768
   428a4:	10a00004 	addi	r2,r2,-32768
   428a8:	1009883a 	mov	r4,r2
   428ac:	00426700 	call	42670 <uart_sendInt16>

/*Send the whole testing 1000 data buffer to the PC through UART*/
void uart_SendTestBuff(void){
	int temp;
	temp = lefttestCount;
	for (counter = temp; counter < (256 + temp); counter++){
   428b0:	d0a74d17 	ldw	r2,-25292(gp)
   428b4:	10800044 	addi	r2,r2,1
   428b8:	d0a74d15 	stw	r2,-25292(gp)
   428bc:	e0bfff17 	ldw	r2,-4(fp)
   428c0:	10804004 	addi	r2,r2,256
   428c4:	d0e74d17 	ldw	r3,-25292(gp)
   428c8:	18bfe516 	blt	r3,r2,42860 <__alt_data_end+0xfffd0860>
		uart_sendInt16(datatest[counter % 256]);
	}
}
   428cc:	e037883a 	mov	sp,fp
   428d0:	dfc00117 	ldw	ra,4(sp)
   428d4:	df000017 	ldw	fp,0(sp)
   428d8:	dec00204 	addi	sp,sp,8
   428dc:	f800283a 	ret

000428e0 <uart_SendConvBuff>:

/*Send the whole buffer to the PC through UART*/
void uart_SendConvBuff(void){
   428e0:	defffd04 	addi	sp,sp,-12
   428e4:	dfc00215 	stw	ra,8(sp)
   428e8:	df000115 	stw	fp,4(sp)
   428ec:	df000104 	addi	fp,sp,4
	int temp;
	temp = convIndex;
   428f0:	008001b4 	movhi	r2,6
   428f4:	10a19304 	addi	r2,r2,-31156
   428f8:	10800017 	ldw	r2,0(r2)
   428fc:	e0bfff15 	stw	r2,-4(fp)
	for (counter = temp; counter < (CONVBUFFSIZE + temp); counter++){
   42900:	e0bfff17 	ldw	r2,-4(fp)
   42904:	d0a74d15 	stw	r2,-25292(gp)
   42908:	00001506 	br	42960 <uart_SendConvBuff+0x80>
		uart_sendInt16((alt_16)convResultBuffer[counter % (CONVBUFFSIZE)]);
   4290c:	d0a74d17 	ldw	r2,-25292(gp)
   42910:	1009883a 	mov	r4,r2
   42914:	0140fa04 	movi	r5,1000
   42918:	0044b540 	call	44b54 <__modsi3>
   4291c:	1007883a 	mov	r3,r2
   42920:	008001b4 	movhi	r2,6
   42924:	10a34504 	addi	r2,r2,-29420
   42928:	18c7883a 	add	r3,r3,r3
   4292c:	18c7883a 	add	r3,r3,r3
   42930:	10c5883a 	add	r2,r2,r3
   42934:	10c00017 	ldw	r3,0(r2)
   42938:	1809883a 	mov	r4,r3
   4293c:	00459c00 	call	459c0 <__fixsfsi>
   42940:	10bfffcc 	andi	r2,r2,65535
   42944:	10a0001c 	xori	r2,r2,32768
   42948:	10a00004 	addi	r2,r2,-32768
   4294c:	1009883a 	mov	r4,r2
   42950:	00426700 	call	42670 <uart_sendInt16>

/*Send the whole buffer to the PC through UART*/
void uart_SendConvBuff(void){
	int temp;
	temp = convIndex;
	for (counter = temp; counter < (CONVBUFFSIZE + temp); counter++){
   42954:	d0a74d17 	ldw	r2,-25292(gp)
   42958:	10800044 	addi	r2,r2,1
   4295c:	d0a74d15 	stw	r2,-25292(gp)
   42960:	e0bfff17 	ldw	r2,-4(fp)
   42964:	1080fa04 	addi	r2,r2,1000
   42968:	d0e74d17 	ldw	r3,-25292(gp)
   4296c:	18bfe716 	blt	r3,r2,4290c <__alt_data_end+0xfffd090c>
		uart_sendInt16((alt_16)convResultBuffer[counter % (CONVBUFFSIZE)]);
	}
}
   42970:	e037883a 	mov	sp,fp
   42974:	dfc00117 	ldw	ra,4(sp)
   42978:	df000017 	ldw	fp,0(sp)
   4297c:	dec00204 	addi	sp,sp,8
   42980:	f800283a 	ret

00042984 <sin>:
   42984:	00a00034 	movhi	r2,32768
   42988:	defffa04 	addi	sp,sp,-24
   4298c:	10bfffc4 	addi	r2,r2,-1
   42990:	00cffa74 	movhi	r3,16361
   42994:	dfc00515 	stw	ra,20(sp)
   42998:	2884703a 	and	r2,r5,r2
   4299c:	18c87ec4 	addi	r3,r3,8699
   429a0:	280f883a 	mov	r7,r5
   429a4:	1880170e 	bge	r3,r2,42a04 <sin+0x80>
   429a8:	00dffc34 	movhi	r3,32752
   429ac:	18ffffc4 	addi	r3,r3,-1
   429b0:	1880050e 	bge	r3,r2,429c8 <sin+0x44>
   429b4:	200d883a 	mov	r6,r4
   429b8:	00474280 	call	47428 <__subdf3>
   429bc:	dfc00517 	ldw	ra,20(sp)
   429c0:	dec00604 	addi	sp,sp,24
   429c4:	f800283a 	ret
   429c8:	d9800104 	addi	r6,sp,4
   429cc:	0042a740 	call	42a74 <__ieee754_rem_pio2>
   429d0:	108000cc 	andi	r2,r2,3
   429d4:	00c00044 	movi	r3,1
   429d8:	10c01926 	beq	r2,r3,42a40 <sin+0xbc>
   429dc:	01000084 	movi	r4,2
   429e0:	11000f26 	beq	r2,r4,42a20 <sin+0x9c>
   429e4:	10001c26 	beq	r2,zero,42a58 <sin+0xd4>
   429e8:	d9000117 	ldw	r4,4(sp)
   429ec:	d9400217 	ldw	r5,8(sp)
   429f0:	d9800317 	ldw	r6,12(sp)
   429f4:	d9c00417 	ldw	r7,16(sp)
   429f8:	00432100 	call	43210 <__kernel_cos>
   429fc:	18e0003c 	xorhi	r3,r3,32768
   42a00:	003fee06 	br	429bc <__alt_data_end+0xfffd09bc>
   42a04:	d8000015 	stw	zero,0(sp)
   42a08:	000d883a 	mov	r6,zero
   42a0c:	000f883a 	mov	r7,zero
   42a10:	00443dc0 	call	443dc <__kernel_sin>
   42a14:	dfc00517 	ldw	ra,20(sp)
   42a18:	dec00604 	addi	sp,sp,24
   42a1c:	f800283a 	ret
   42a20:	d9000117 	ldw	r4,4(sp)
   42a24:	d9400217 	ldw	r5,8(sp)
   42a28:	d9800317 	ldw	r6,12(sp)
   42a2c:	d9c00417 	ldw	r7,16(sp)
   42a30:	d8c00015 	stw	r3,0(sp)
   42a34:	00443dc0 	call	443dc <__kernel_sin>
   42a38:	18e0003c 	xorhi	r3,r3,32768
   42a3c:	003fdf06 	br	429bc <__alt_data_end+0xfffd09bc>
   42a40:	d9000117 	ldw	r4,4(sp)
   42a44:	d9400217 	ldw	r5,8(sp)
   42a48:	d9800317 	ldw	r6,12(sp)
   42a4c:	d9c00417 	ldw	r7,16(sp)
   42a50:	00432100 	call	43210 <__kernel_cos>
   42a54:	003fd906 	br	429bc <__alt_data_end+0xfffd09bc>
   42a58:	d9000117 	ldw	r4,4(sp)
   42a5c:	d9400217 	ldw	r5,8(sp)
   42a60:	d9800317 	ldw	r6,12(sp)
   42a64:	d9c00417 	ldw	r7,16(sp)
   42a68:	d8c00015 	stw	r3,0(sp)
   42a6c:	00443dc0 	call	443dc <__kernel_sin>
   42a70:	003fd206 	br	429bc <__alt_data_end+0xfffd09bc>

00042a74 <__ieee754_rem_pio2>:
   42a74:	02200034 	movhi	r8,32768
   42a78:	deffea04 	addi	sp,sp,-88
   42a7c:	423fffc4 	addi	r8,r8,-1
   42a80:	00cffa74 	movhi	r3,16361
   42a84:	ddc01315 	stw	r23,76(sp)
   42a88:	dc400d15 	stw	r17,52(sp)
   42a8c:	dfc01515 	stw	ra,84(sp)
   42a90:	df001415 	stw	fp,80(sp)
   42a94:	dd801215 	stw	r22,72(sp)
   42a98:	dd401115 	stw	r21,68(sp)
   42a9c:	dd001015 	stw	r20,64(sp)
   42aa0:	dcc00f15 	stw	r19,60(sp)
   42aa4:	dc800e15 	stw	r18,56(sp)
   42aa8:	dc000c15 	stw	r16,48(sp)
   42aac:	2a2e703a 	and	r23,r5,r8
   42ab0:	18c87ec4 	addi	r3,r3,8699
   42ab4:	2823883a 	mov	r17,r5
   42ab8:	1dc0790e 	bge	r3,r23,42ca0 <__ieee754_rem_pio2+0x22c>
   42abc:	009000f4 	movhi	r2,16387
   42ac0:	10b65ec4 	addi	r2,r2,-9861
   42ac4:	3021883a 	mov	r16,r6
   42ac8:	2027883a 	mov	r19,r4
   42acc:	15c02316 	blt	r2,r23,42b5c <__ieee754_rem_pio2+0xe8>
   42ad0:	01cffe74 	movhi	r7,16377
   42ad4:	39c87ec4 	addi	r7,r7,8699
   42ad8:	01951034 	movhi	r6,21568
   42adc:	0141800e 	bge	zero,r5,430e0 <__ieee754_rem_pio2+0x66c>
   42ae0:	00474280 	call	47428 <__subdf3>
   42ae4:	1025883a 	mov	r18,r2
   42ae8:	008ffe74 	movhi	r2,16377
   42aec:	10887ec4 	addi	r2,r2,8699
   42af0:	1823883a 	mov	r17,r3
   42af4:	b8808426 	beq	r23,r2,42d08 <__ieee754_rem_pio2+0x294>
   42af8:	018698b4 	movhi	r6,6754
   42afc:	01cf7474 	movhi	r7,15825
   42b00:	3198cc44 	addi	r6,r6,25393
   42b04:	39ed1844 	addi	r7,r7,-19359
   42b08:	9009883a 	mov	r4,r18
   42b0c:	180b883a 	mov	r5,r3
   42b10:	00474280 	call	47428 <__subdf3>
   42b14:	100d883a 	mov	r6,r2
   42b18:	180f883a 	mov	r7,r3
   42b1c:	9009883a 	mov	r4,r18
   42b20:	880b883a 	mov	r5,r17
   42b24:	80800015 	stw	r2,0(r16)
   42b28:	80c00115 	stw	r3,4(r16)
   42b2c:	00474280 	call	47428 <__subdf3>
   42b30:	018698b4 	movhi	r6,6754
   42b34:	01cf7474 	movhi	r7,15825
   42b38:	1009883a 	mov	r4,r2
   42b3c:	180b883a 	mov	r5,r3
   42b40:	3198cc44 	addi	r6,r6,25393
   42b44:	39ed1844 	addi	r7,r7,-19359
   42b48:	00474280 	call	47428 <__subdf3>
   42b4c:	80800215 	stw	r2,8(r16)
   42b50:	80c00315 	stw	r3,12(r16)
   42b54:	00800044 	movi	r2,1
   42b58:	00005606 	br	42cb4 <__ieee754_rem_pio2+0x240>
   42b5c:	00904e74 	movhi	r2,16697
   42b60:	10887ec4 	addi	r2,r2,8699
   42b64:	15c0890e 	bge	r2,r23,42d8c <__ieee754_rem_pio2+0x318>
   42b68:	009ffc34 	movhi	r2,32752
   42b6c:	10bfffc4 	addi	r2,r2,-1
   42b70:	15c05c16 	blt	r2,r23,42ce4 <__ieee754_rem_pio2+0x270>
   42b74:	b829d53a 	srai	r20,r23,20
   42b78:	a53efa84 	addi	r20,r20,-1046
   42b7c:	a024953a 	slli	r18,r20,20
   42b80:	bca5c83a 	sub	r18,r23,r18
   42b84:	900b883a 	mov	r5,r18
   42b88:	0047cf80 	call	47cf8 <__fixdfsi>
   42b8c:	1009883a 	mov	r4,r2
   42b90:	0047d800 	call	47d80 <__floatsidf>
   42b94:	9809883a 	mov	r4,r19
   42b98:	900b883a 	mov	r5,r18
   42b9c:	100d883a 	mov	r6,r2
   42ba0:	180f883a 	mov	r7,r3
   42ba4:	d8800215 	stw	r2,8(sp)
   42ba8:	d8c00315 	stw	r3,12(sp)
   42bac:	00474280 	call	47428 <__subdf3>
   42bb0:	000d883a 	mov	r6,zero
   42bb4:	01d05c34 	movhi	r7,16752
   42bb8:	1009883a 	mov	r4,r2
   42bbc:	180b883a 	mov	r5,r3
   42bc0:	0046d040 	call	46d04 <__muldf3>
   42bc4:	180b883a 	mov	r5,r3
   42bc8:	1009883a 	mov	r4,r2
   42bcc:	182b883a 	mov	r21,r3
   42bd0:	102d883a 	mov	r22,r2
   42bd4:	0047cf80 	call	47cf8 <__fixdfsi>
   42bd8:	1009883a 	mov	r4,r2
   42bdc:	0047d800 	call	47d80 <__floatsidf>
   42be0:	100d883a 	mov	r6,r2
   42be4:	180f883a 	mov	r7,r3
   42be8:	b009883a 	mov	r4,r22
   42bec:	a80b883a 	mov	r5,r21
   42bf0:	1027883a 	mov	r19,r2
   42bf4:	1825883a 	mov	r18,r3
   42bf8:	d8800415 	stw	r2,16(sp)
   42bfc:	d8c00515 	stw	r3,20(sp)
   42c00:	00474280 	call	47428 <__subdf3>
   42c04:	1009883a 	mov	r4,r2
   42c08:	180b883a 	mov	r5,r3
   42c0c:	000d883a 	mov	r6,zero
   42c10:	01d05c34 	movhi	r7,16752
   42c14:	0046d040 	call	46d04 <__muldf3>
   42c18:	1009883a 	mov	r4,r2
   42c1c:	180b883a 	mov	r5,r3
   42c20:	000d883a 	mov	r6,zero
   42c24:	000f883a 	mov	r7,zero
   42c28:	d8800615 	stw	r2,24(sp)
   42c2c:	d8c00715 	stw	r3,28(sp)
   42c30:	0046ba00 	call	46ba0 <__eqdf2>
   42c34:	1001491e 	bne	r2,zero,4315c <__ieee754_rem_pio2+0x6e8>
   42c38:	000f883a 	mov	r7,zero
   42c3c:	9809883a 	mov	r4,r19
   42c40:	900b883a 	mov	r5,r18
   42c44:	000d883a 	mov	r6,zero
   42c48:	0046ba00 	call	46ba0 <__eqdf2>
   42c4c:	100f003a 	cmpeq	r7,r2,zero
   42c50:	00800084 	movi	r2,2
   42c54:	11cfc83a 	sub	r7,r2,r7
   42c58:	00800084 	movi	r2,2
   42c5c:	d8800015 	stw	r2,0(sp)
   42c60:	00800174 	movhi	r2,5
   42c64:	10923a04 	addi	r2,r2,18664
   42c68:	d8800115 	stw	r2,4(sp)
   42c6c:	d9000204 	addi	r4,sp,8
   42c70:	800b883a 	mov	r5,r16
   42c74:	a00d883a 	mov	r6,r20
   42c78:	00436b40 	call	436b4 <__kernel_rem_pio2>
   42c7c:	88000d0e 	bge	r17,zero,42cb4 <__ieee754_rem_pio2+0x240>
   42c80:	81000117 	ldw	r4,4(r16)
   42c84:	80c00317 	ldw	r3,12(r16)
   42c88:	0085c83a 	sub	r2,zero,r2
   42c8c:	2120003c 	xorhi	r4,r4,32768
   42c90:	18e0003c 	xorhi	r3,r3,32768
   42c94:	81000115 	stw	r4,4(r16)
   42c98:	80c00315 	stw	r3,12(r16)
   42c9c:	00000506 	br	42cb4 <__ieee754_rem_pio2+0x240>
   42ca0:	31000015 	stw	r4,0(r6)
   42ca4:	31400115 	stw	r5,4(r6)
   42ca8:	30000215 	stw	zero,8(r6)
   42cac:	30000315 	stw	zero,12(r6)
   42cb0:	0005883a 	mov	r2,zero
   42cb4:	dfc01517 	ldw	ra,84(sp)
   42cb8:	df001417 	ldw	fp,80(sp)
   42cbc:	ddc01317 	ldw	r23,76(sp)
   42cc0:	dd801217 	ldw	r22,72(sp)
   42cc4:	dd401117 	ldw	r21,68(sp)
   42cc8:	dd001017 	ldw	r20,64(sp)
   42ccc:	dcc00f17 	ldw	r19,60(sp)
   42cd0:	dc800e17 	ldw	r18,56(sp)
   42cd4:	dc400d17 	ldw	r17,52(sp)
   42cd8:	dc000c17 	ldw	r16,48(sp)
   42cdc:	dec01604 	addi	sp,sp,88
   42ce0:	f800283a 	ret
   42ce4:	200d883a 	mov	r6,r4
   42ce8:	280f883a 	mov	r7,r5
   42cec:	00474280 	call	47428 <__subdf3>
   42cf0:	80800215 	stw	r2,8(r16)
   42cf4:	80800015 	stw	r2,0(r16)
   42cf8:	80c00315 	stw	r3,12(r16)
   42cfc:	80c00115 	stw	r3,4(r16)
   42d00:	0005883a 	mov	r2,zero
   42d04:	003feb06 	br	42cb4 <__alt_data_end+0xfffd0cb4>
   42d08:	01cf7474 	movhi	r7,15825
   42d0c:	9009883a 	mov	r4,r18
   42d10:	39ed1844 	addi	r7,r7,-19359
   42d14:	01869834 	movhi	r6,6752
   42d18:	180b883a 	mov	r5,r3
   42d1c:	00474280 	call	47428 <__subdf3>
   42d20:	018b80f4 	movhi	r6,11779
   42d24:	01cee8f4 	movhi	r7,15267
   42d28:	1009883a 	mov	r4,r2
   42d2c:	180b883a 	mov	r5,r3
   42d30:	319c1cc4 	addi	r6,r6,28787
   42d34:	39c66284 	addi	r7,r7,6538
   42d38:	1025883a 	mov	r18,r2
   42d3c:	1823883a 	mov	r17,r3
   42d40:	00474280 	call	47428 <__subdf3>
   42d44:	100d883a 	mov	r6,r2
   42d48:	180f883a 	mov	r7,r3
   42d4c:	9009883a 	mov	r4,r18
   42d50:	880b883a 	mov	r5,r17
   42d54:	80800015 	stw	r2,0(r16)
   42d58:	80c00115 	stw	r3,4(r16)
   42d5c:	00474280 	call	47428 <__subdf3>
   42d60:	018b80f4 	movhi	r6,11779
   42d64:	01cee8f4 	movhi	r7,15267
   42d68:	1009883a 	mov	r4,r2
   42d6c:	180b883a 	mov	r5,r3
   42d70:	319c1cc4 	addi	r6,r6,28787
   42d74:	39c66284 	addi	r7,r7,6538
   42d78:	00474280 	call	47428 <__subdf3>
   42d7c:	80800215 	stw	r2,8(r16)
   42d80:	80c00315 	stw	r3,12(r16)
   42d84:	00800044 	movi	r2,1
   42d88:	003fca06 	br	42cb4 <__alt_data_end+0xfffd0cb4>
   42d8c:	00446a40 	call	446a4 <fabs>
   42d90:	019b72b4 	movhi	r6,28106
   42d94:	01cff934 	movhi	r7,16356
   42d98:	1009883a 	mov	r4,r2
   42d9c:	180b883a 	mov	r5,r3
   42da0:	31b220c4 	addi	r6,r6,-14205
   42da4:	39d7cc04 	addi	r7,r7,24368
   42da8:	102d883a 	mov	r22,r2
   42dac:	182b883a 	mov	r21,r3
   42db0:	0046d040 	call	46d04 <__muldf3>
   42db4:	000d883a 	mov	r6,zero
   42db8:	01cff834 	movhi	r7,16352
   42dbc:	1009883a 	mov	r4,r2
   42dc0:	180b883a 	mov	r5,r3
   42dc4:	0045a380 	call	45a38 <__adddf3>
   42dc8:	180b883a 	mov	r5,r3
   42dcc:	1009883a 	mov	r4,r2
   42dd0:	0047cf80 	call	47cf8 <__fixdfsi>
   42dd4:	1009883a 	mov	r4,r2
   42dd8:	1025883a 	mov	r18,r2
   42ddc:	0047d800 	call	47d80 <__floatsidf>
   42de0:	01cffe74 	movhi	r7,16377
   42de4:	1009883a 	mov	r4,r2
   42de8:	180b883a 	mov	r5,r3
   42dec:	39c87ec4 	addi	r7,r7,8699
   42df0:	01951034 	movhi	r6,21568
   42df4:	1029883a 	mov	r20,r2
   42df8:	1827883a 	mov	r19,r3
   42dfc:	0046d040 	call	46d04 <__muldf3>
   42e00:	b009883a 	mov	r4,r22
   42e04:	a80b883a 	mov	r5,r21
   42e08:	100d883a 	mov	r6,r2
   42e0c:	180f883a 	mov	r7,r3
   42e10:	00474280 	call	47428 <__subdf3>
   42e14:	018698b4 	movhi	r6,6754
   42e18:	01cf7474 	movhi	r7,15825
   42e1c:	a009883a 	mov	r4,r20
   42e20:	3198cc44 	addi	r6,r6,25393
   42e24:	39ed1844 	addi	r7,r7,-19359
   42e28:	980b883a 	mov	r5,r19
   42e2c:	1039883a 	mov	fp,r2
   42e30:	d8c00815 	stw	r3,32(sp)
   42e34:	0046d040 	call	46d04 <__muldf3>
   42e38:	010007c4 	movi	r4,31
   42e3c:	e017883a 	mov	r11,fp
   42e40:	da800817 	ldw	r10,32(sp)
   42e44:	102d883a 	mov	r22,r2
   42e48:	182b883a 	mov	r21,r3
   42e4c:	24802816 	blt	r4,r18,42ef0 <__ieee754_rem_pio2+0x47c>
   42e50:	927fffc4 	addi	r9,r18,-1
   42e54:	4a53883a 	add	r9,r9,r9
   42e58:	01000174 	movhi	r4,5
   42e5c:	21121a04 	addi	r4,r4,18536
   42e60:	4a53883a 	add	r9,r9,r9
   42e64:	2253883a 	add	r9,r4,r9
   42e68:	49000017 	ldw	r4,0(r9)
   42e6c:	25c02026 	beq	r4,r23,42ef0 <__ieee754_rem_pio2+0x47c>
   42e70:	e009883a 	mov	r4,fp
   42e74:	500b883a 	mov	r5,r10
   42e78:	100d883a 	mov	r6,r2
   42e7c:	180f883a 	mov	r7,r3
   42e80:	da800b15 	stw	r10,44(sp)
   42e84:	df000a15 	stw	fp,40(sp)
   42e88:	00474280 	call	47428 <__subdf3>
   42e8c:	da800b17 	ldw	r10,44(sp)
   42e90:	dac00a17 	ldw	r11,40(sp)
   42e94:	1019883a 	mov	r12,r2
   42e98:	1813883a 	mov	r9,r3
   42e9c:	80800015 	stw	r2,0(r16)
   42ea0:	80c00115 	stw	r3,4(r16)
   42ea4:	600d883a 	mov	r6,r12
   42ea8:	480f883a 	mov	r7,r9
   42eac:	5809883a 	mov	r4,r11
   42eb0:	500b883a 	mov	r5,r10
   42eb4:	da400b15 	stw	r9,44(sp)
   42eb8:	db000a15 	stw	r12,40(sp)
   42ebc:	00474280 	call	47428 <__subdf3>
   42ec0:	1009883a 	mov	r4,r2
   42ec4:	180b883a 	mov	r5,r3
   42ec8:	b00d883a 	mov	r6,r22
   42ecc:	a80f883a 	mov	r7,r21
   42ed0:	00474280 	call	47428 <__subdf3>
   42ed4:	80800215 	stw	r2,8(r16)
   42ed8:	80c00315 	stw	r3,12(r16)
   42edc:	da400b17 	ldw	r9,44(sp)
   42ee0:	db000a17 	ldw	r12,40(sp)
   42ee4:	88009f16 	blt	r17,zero,43164 <__ieee754_rem_pio2+0x6f0>
   42ee8:	9005883a 	mov	r2,r18
   42eec:	003f7106 	br	42cb4 <__alt_data_end+0xfffd0cb4>
   42ef0:	d9400817 	ldw	r5,32(sp)
   42ef4:	e009883a 	mov	r4,fp
   42ef8:	100d883a 	mov	r6,r2
   42efc:	180f883a 	mov	r7,r3
   42f00:	da800b15 	stw	r10,44(sp)
   42f04:	dac00a15 	stw	r11,40(sp)
   42f08:	00474280 	call	47428 <__subdf3>
   42f0c:	1019883a 	mov	r12,r2
   42f10:	1804d53a 	srli	r2,r3,20
   42f14:	b811d53a 	srai	r8,r23,20
   42f18:	1813883a 	mov	r9,r3
   42f1c:	1081ffcc 	andi	r2,r2,2047
   42f20:	80c00115 	stw	r3,4(r16)
   42f24:	83000015 	stw	r12,0(r16)
   42f28:	4085c83a 	sub	r2,r8,r2
   42f2c:	00c00404 	movi	r3,16
   42f30:	da800b17 	ldw	r10,44(sp)
   42f34:	dac00a17 	ldw	r11,40(sp)
   42f38:	18bfda0e 	bge	r3,r2,42ea4 <__alt_data_end+0xfffd0ea4>
   42f3c:	01cf7474 	movhi	r7,15825
   42f40:	39ed1844 	addi	r7,r7,-19359
   42f44:	a009883a 	mov	r4,r20
   42f48:	980b883a 	mov	r5,r19
   42f4c:	01869834 	movhi	r6,6752
   42f50:	da000a15 	stw	r8,40(sp)
   42f54:	0046d040 	call	46d04 <__muldf3>
   42f58:	d9400817 	ldw	r5,32(sp)
   42f5c:	e009883a 	mov	r4,fp
   42f60:	100d883a 	mov	r6,r2
   42f64:	180f883a 	mov	r7,r3
   42f68:	102d883a 	mov	r22,r2
   42f6c:	182b883a 	mov	r21,r3
   42f70:	00474280 	call	47428 <__subdf3>
   42f74:	d9400817 	ldw	r5,32(sp)
   42f78:	e009883a 	mov	r4,fp
   42f7c:	100d883a 	mov	r6,r2
   42f80:	180f883a 	mov	r7,r3
   42f84:	182f883a 	mov	r23,r3
   42f88:	d8800915 	stw	r2,36(sp)
   42f8c:	00474280 	call	47428 <__subdf3>
   42f90:	b00d883a 	mov	r6,r22
   42f94:	a80f883a 	mov	r7,r21
   42f98:	1009883a 	mov	r4,r2
   42f9c:	180b883a 	mov	r5,r3
   42fa0:	00474280 	call	47428 <__subdf3>
   42fa4:	018b80f4 	movhi	r6,11779
   42fa8:	01cee8f4 	movhi	r7,15267
   42fac:	a009883a 	mov	r4,r20
   42fb0:	980b883a 	mov	r5,r19
   42fb4:	319c1cc4 	addi	r6,r6,28787
   42fb8:	39c66284 	addi	r7,r7,6538
   42fbc:	102d883a 	mov	r22,r2
   42fc0:	182b883a 	mov	r21,r3
   42fc4:	0046d040 	call	46d04 <__muldf3>
   42fc8:	b00d883a 	mov	r6,r22
   42fcc:	a80f883a 	mov	r7,r21
   42fd0:	1009883a 	mov	r4,r2
   42fd4:	180b883a 	mov	r5,r3
   42fd8:	00474280 	call	47428 <__subdf3>
   42fdc:	d9000917 	ldw	r4,36(sp)
   42fe0:	b80b883a 	mov	r5,r23
   42fe4:	100d883a 	mov	r6,r2
   42fe8:	180f883a 	mov	r7,r3
   42fec:	102d883a 	mov	r22,r2
   42ff0:	182b883a 	mov	r21,r3
   42ff4:	00474280 	call	47428 <__subdf3>
   42ff8:	1019883a 	mov	r12,r2
   42ffc:	1804d53a 	srli	r2,r3,20
   43000:	da000a17 	ldw	r8,40(sp)
   43004:	83000015 	stw	r12,0(r16)
   43008:	1081ffcc 	andi	r2,r2,2047
   4300c:	4091c83a 	sub	r8,r8,r2
   43010:	80c00115 	stw	r3,4(r16)
   43014:	00800c44 	movi	r2,49
   43018:	1813883a 	mov	r9,r3
   4301c:	1200790e 	bge	r2,r8,43204 <__ieee754_rem_pio2+0x790>
   43020:	01cee8f4 	movhi	r7,15267
   43024:	39c66284 	addi	r7,r7,6538
   43028:	a009883a 	mov	r4,r20
   4302c:	980b883a 	mov	r5,r19
   43030:	018b8034 	movhi	r6,11776
   43034:	0046d040 	call	46d04 <__muldf3>
   43038:	d9000917 	ldw	r4,36(sp)
   4303c:	b80b883a 	mov	r5,r23
   43040:	100d883a 	mov	r6,r2
   43044:	180f883a 	mov	r7,r3
   43048:	102d883a 	mov	r22,r2
   4304c:	182b883a 	mov	r21,r3
   43050:	00474280 	call	47428 <__subdf3>
   43054:	d9000917 	ldw	r4,36(sp)
   43058:	b80b883a 	mov	r5,r23
   4305c:	100d883a 	mov	r6,r2
   43060:	180f883a 	mov	r7,r3
   43064:	d8c00b15 	stw	r3,44(sp)
   43068:	d8800a15 	stw	r2,40(sp)
   4306c:	00474280 	call	47428 <__subdf3>
   43070:	b00d883a 	mov	r6,r22
   43074:	a80f883a 	mov	r7,r21
   43078:	1009883a 	mov	r4,r2
   4307c:	180b883a 	mov	r5,r3
   43080:	00474280 	call	47428 <__subdf3>
   43084:	01894834 	movhi	r6,9504
   43088:	01ce5f34 	movhi	r7,14716
   4308c:	a009883a 	mov	r4,r20
   43090:	980b883a 	mov	r5,r19
   43094:	31927044 	addi	r6,r6,18881
   43098:	39e0e684 	addi	r7,r7,-31846
   4309c:	102d883a 	mov	r22,r2
   430a0:	182b883a 	mov	r21,r3
   430a4:	0046d040 	call	46d04 <__muldf3>
   430a8:	b00d883a 	mov	r6,r22
   430ac:	a80f883a 	mov	r7,r21
   430b0:	1009883a 	mov	r4,r2
   430b4:	180b883a 	mov	r5,r3
   430b8:	00474280 	call	47428 <__subdf3>
   430bc:	dac00a17 	ldw	r11,40(sp)
   430c0:	da800b17 	ldw	r10,44(sp)
   430c4:	102d883a 	mov	r22,r2
   430c8:	182b883a 	mov	r21,r3
   430cc:	5809883a 	mov	r4,r11
   430d0:	500b883a 	mov	r5,r10
   430d4:	100d883a 	mov	r6,r2
   430d8:	180f883a 	mov	r7,r3
   430dc:	003f6a06 	br	42e88 <__alt_data_end+0xfffd0e88>
   430e0:	0045a380 	call	45a38 <__adddf3>
   430e4:	1025883a 	mov	r18,r2
   430e8:	008ffe74 	movhi	r2,16377
   430ec:	10887ec4 	addi	r2,r2,8699
   430f0:	1823883a 	mov	r17,r3
   430f4:	b8802226 	beq	r23,r2,43180 <__ieee754_rem_pio2+0x70c>
   430f8:	018698b4 	movhi	r6,6754
   430fc:	01cf7474 	movhi	r7,15825
   43100:	3198cc44 	addi	r6,r6,25393
   43104:	39ed1844 	addi	r7,r7,-19359
   43108:	9009883a 	mov	r4,r18
   4310c:	180b883a 	mov	r5,r3
   43110:	0045a380 	call	45a38 <__adddf3>
   43114:	100d883a 	mov	r6,r2
   43118:	180f883a 	mov	r7,r3
   4311c:	9009883a 	mov	r4,r18
   43120:	880b883a 	mov	r5,r17
   43124:	80800015 	stw	r2,0(r16)
   43128:	80c00115 	stw	r3,4(r16)
   4312c:	00474280 	call	47428 <__subdf3>
   43130:	018698b4 	movhi	r6,6754
   43134:	01cf7474 	movhi	r7,15825
   43138:	1009883a 	mov	r4,r2
   4313c:	180b883a 	mov	r5,r3
   43140:	3198cc44 	addi	r6,r6,25393
   43144:	39ed1844 	addi	r7,r7,-19359
   43148:	0045a380 	call	45a38 <__adddf3>
   4314c:	80800215 	stw	r2,8(r16)
   43150:	80c00315 	stw	r3,12(r16)
   43154:	00bfffc4 	movi	r2,-1
   43158:	003ed606 	br	42cb4 <__alt_data_end+0xfffd0cb4>
   4315c:	01c000c4 	movi	r7,3
   43160:	003ebd06 	br	42c58 <__alt_data_end+0xfffd0c58>
   43164:	4a60003c 	xorhi	r9,r9,32768
   43168:	18e0003c 	xorhi	r3,r3,32768
   4316c:	83000015 	stw	r12,0(r16)
   43170:	82400115 	stw	r9,4(r16)
   43174:	80c00315 	stw	r3,12(r16)
   43178:	0485c83a 	sub	r2,zero,r18
   4317c:	003ecd06 	br	42cb4 <__alt_data_end+0xfffd0cb4>
   43180:	01cf7474 	movhi	r7,15825
   43184:	9009883a 	mov	r4,r18
   43188:	39ed1844 	addi	r7,r7,-19359
   4318c:	01869834 	movhi	r6,6752
   43190:	180b883a 	mov	r5,r3
   43194:	0045a380 	call	45a38 <__adddf3>
   43198:	018b80f4 	movhi	r6,11779
   4319c:	01cee8f4 	movhi	r7,15267
   431a0:	1009883a 	mov	r4,r2
   431a4:	180b883a 	mov	r5,r3
   431a8:	319c1cc4 	addi	r6,r6,28787
   431ac:	39c66284 	addi	r7,r7,6538
   431b0:	1025883a 	mov	r18,r2
   431b4:	1823883a 	mov	r17,r3
   431b8:	0045a380 	call	45a38 <__adddf3>
   431bc:	100d883a 	mov	r6,r2
   431c0:	180f883a 	mov	r7,r3
   431c4:	9009883a 	mov	r4,r18
   431c8:	880b883a 	mov	r5,r17
   431cc:	80800015 	stw	r2,0(r16)
   431d0:	80c00115 	stw	r3,4(r16)
   431d4:	00474280 	call	47428 <__subdf3>
   431d8:	018b80f4 	movhi	r6,11779
   431dc:	01cee8f4 	movhi	r7,15267
   431e0:	1009883a 	mov	r4,r2
   431e4:	180b883a 	mov	r5,r3
   431e8:	319c1cc4 	addi	r6,r6,28787
   431ec:	39c66284 	addi	r7,r7,6538
   431f0:	0045a380 	call	45a38 <__adddf3>
   431f4:	80800215 	stw	r2,8(r16)
   431f8:	80c00315 	stw	r3,12(r16)
   431fc:	00bfffc4 	movi	r2,-1
   43200:	003eac06 	br	42cb4 <__alt_data_end+0xfffd0cb4>
   43204:	dac00917 	ldw	r11,36(sp)
   43208:	b815883a 	mov	r10,r23
   4320c:	003f2506 	br	42ea4 <__alt_data_end+0xfffd0ea4>

00043210 <__kernel_cos>:
   43210:	defff304 	addi	sp,sp,-52
   43214:	dc000315 	stw	r16,12(sp)
   43218:	04200034 	movhi	r16,32768
   4321c:	843fffc4 	addi	r16,r16,-1
   43220:	008f9034 	movhi	r2,15936
   43224:	df000b15 	stw	fp,44(sp)
   43228:	ddc00a15 	stw	r23,40(sp)
   4322c:	dd800915 	stw	r22,36(sp)
   43230:	dcc00615 	stw	r19,24(sp)
   43234:	dfc00c15 	stw	ra,48(sp)
   43238:	dd400815 	stw	r21,32(sp)
   4323c:	dd000715 	stw	r20,28(sp)
   43240:	dc800515 	stw	r18,20(sp)
   43244:	dc400415 	stw	r17,16(sp)
   43248:	2c20703a 	and	r16,r5,r16
   4324c:	10bfffc4 	addi	r2,r2,-1
   43250:	2827883a 	mov	r19,r5
   43254:	202d883a 	mov	r22,r4
   43258:	302f883a 	mov	r23,r6
   4325c:	3839883a 	mov	fp,r7
   43260:	14007516 	blt	r2,r16,43438 <__kernel_cos+0x228>
   43264:	0047cf80 	call	47cf8 <__fixdfsi>
   43268:	10010f26 	beq	r2,zero,436a8 <__kernel_cos+0x498>
   4326c:	b00d883a 	mov	r6,r22
   43270:	980f883a 	mov	r7,r19
   43274:	b009883a 	mov	r4,r22
   43278:	980b883a 	mov	r5,r19
   4327c:	0046d040 	call	46d04 <__muldf3>
   43280:	01afa234 	movhi	r6,48776
   43284:	01ef6a74 	movhi	r7,48553
   43288:	1009883a 	mov	r4,r2
   4328c:	180b883a 	mov	r5,r3
   43290:	318e3504 	addi	r6,r6,14548
   43294:	39feba44 	addi	r7,r7,-1303
   43298:	102b883a 	mov	r21,r2
   4329c:	1829883a 	mov	r20,r3
   432a0:	0046d040 	call	46d04 <__muldf3>
   432a4:	01af6d74 	movhi	r6,48565
   432a8:	01cf88b4 	movhi	r7,15906
   432ac:	1009883a 	mov	r4,r2
   432b0:	180b883a 	mov	r5,r3
   432b4:	31ac7104 	addi	r6,r6,-20028
   432b8:	39fba784 	addi	r7,r7,-4450
   432bc:	0045a380 	call	45a38 <__adddf3>
   432c0:	1009883a 	mov	r4,r2
   432c4:	180b883a 	mov	r5,r3
   432c8:	a80d883a 	mov	r6,r21
   432cc:	a00f883a 	mov	r7,r20
   432d0:	0046d040 	call	46d04 <__muldf3>
   432d4:	01a02734 	movhi	r6,32924
   432d8:	01cfa4b4 	movhi	r7,16018
   432dc:	1009883a 	mov	r4,r2
   432e0:	180b883a 	mov	r5,r3
   432e4:	3194ab44 	addi	r6,r6,21165
   432e8:	39df93c4 	addi	r7,r7,32335
   432ec:	00474280 	call	47428 <__subdf3>
   432f0:	1009883a 	mov	r4,r2
   432f4:	180b883a 	mov	r5,r3
   432f8:	a80d883a 	mov	r6,r21
   432fc:	a00f883a 	mov	r7,r20
   43300:	0046d040 	call	46d04 <__muldf3>
   43304:	018672f4 	movhi	r6,6603
   43308:	01cfbeb4 	movhi	r7,16122
   4330c:	1009883a 	mov	r4,r2
   43310:	180b883a 	mov	r5,r3
   43314:	31856404 	addi	r6,r6,5520
   43318:	39c06804 	addi	r7,r7,416
   4331c:	0045a380 	call	45a38 <__adddf3>
   43320:	1009883a 	mov	r4,r2
   43324:	180b883a 	mov	r5,r3
   43328:	a80d883a 	mov	r6,r21
   4332c:	a00f883a 	mov	r7,r20
   43330:	0046d040 	call	46d04 <__muldf3>
   43334:	0185b074 	movhi	r6,5825
   43338:	01cfd5f4 	movhi	r7,16215
   4333c:	1009883a 	mov	r4,r2
   43340:	180b883a 	mov	r5,r3
   43344:	31945dc4 	addi	r6,r6,20855
   43348:	39f05b04 	addi	r7,r7,-16020
   4334c:	00474280 	call	47428 <__subdf3>
   43350:	1009883a 	mov	r4,r2
   43354:	180b883a 	mov	r5,r3
   43358:	a80d883a 	mov	r6,r21
   4335c:	a00f883a 	mov	r7,r20
   43360:	0046d040 	call	46d04 <__muldf3>
   43364:	01955574 	movhi	r6,21845
   43368:	01cfe974 	movhi	r7,16293
   4336c:	1009883a 	mov	r4,r2
   43370:	180b883a 	mov	r5,r3
   43374:	31955304 	addi	r6,r6,21836
   43378:	39d55544 	addi	r7,r7,21845
   4337c:	0045a380 	call	45a38 <__adddf3>
   43380:	1009883a 	mov	r4,r2
   43384:	180b883a 	mov	r5,r3
   43388:	a80d883a 	mov	r6,r21
   4338c:	a00f883a 	mov	r7,r20
   43390:	0046d040 	call	46d04 <__muldf3>
   43394:	1017883a 	mov	r11,r2
   43398:	1815883a 	mov	r10,r3
   4339c:	a809883a 	mov	r4,r21
   433a0:	a00b883a 	mov	r5,r20
   433a4:	000d883a 	mov	r6,zero
   433a8:	01cff834 	movhi	r7,16352
   433ac:	da800215 	stw	r10,8(sp)
   433b0:	dac00115 	stw	r11,4(sp)
   433b4:	0046d040 	call	46d04 <__muldf3>
   433b8:	dac00117 	ldw	r11,4(sp)
   433bc:	da800217 	ldw	r10,8(sp)
   433c0:	a809883a 	mov	r4,r21
   433c4:	580d883a 	mov	r6,r11
   433c8:	500f883a 	mov	r7,r10
   433cc:	a00b883a 	mov	r5,r20
   433d0:	1023883a 	mov	r17,r2
   433d4:	1821883a 	mov	r16,r3
   433d8:	0046d040 	call	46d04 <__muldf3>
   433dc:	b009883a 	mov	r4,r22
   433e0:	980b883a 	mov	r5,r19
   433e4:	b80d883a 	mov	r6,r23
   433e8:	e00f883a 	mov	r7,fp
   433ec:	1029883a 	mov	r20,r2
   433f0:	1825883a 	mov	r18,r3
   433f4:	0046d040 	call	46d04 <__muldf3>
   433f8:	a009883a 	mov	r4,r20
   433fc:	900b883a 	mov	r5,r18
   43400:	100d883a 	mov	r6,r2
   43404:	180f883a 	mov	r7,r3
   43408:	00474280 	call	47428 <__subdf3>
   4340c:	8809883a 	mov	r4,r17
   43410:	800b883a 	mov	r5,r16
   43414:	100d883a 	mov	r6,r2
   43418:	180f883a 	mov	r7,r3
   4341c:	00474280 	call	47428 <__subdf3>
   43420:	0009883a 	mov	r4,zero
   43424:	014ffc34 	movhi	r5,16368
   43428:	100d883a 	mov	r6,r2
   4342c:	180f883a 	mov	r7,r3
   43430:	00474280 	call	47428 <__subdf3>
   43434:	00008b06 	br	43664 <__kernel_cos+0x454>
   43438:	200d883a 	mov	r6,r4
   4343c:	280f883a 	mov	r7,r5
   43440:	0046d040 	call	46d04 <__muldf3>
   43444:	01afa234 	movhi	r6,48776
   43448:	01ef6a74 	movhi	r7,48553
   4344c:	318e3504 	addi	r6,r6,14548
   43450:	39feba44 	addi	r7,r7,-1303
   43454:	1009883a 	mov	r4,r2
   43458:	180b883a 	mov	r5,r3
   4345c:	1025883a 	mov	r18,r2
   43460:	1823883a 	mov	r17,r3
   43464:	0046d040 	call	46d04 <__muldf3>
   43468:	01af6d74 	movhi	r6,48565
   4346c:	01cf88b4 	movhi	r7,15906
   43470:	1009883a 	mov	r4,r2
   43474:	180b883a 	mov	r5,r3
   43478:	31ac7104 	addi	r6,r6,-20028
   4347c:	39fba784 	addi	r7,r7,-4450
   43480:	0045a380 	call	45a38 <__adddf3>
   43484:	1009883a 	mov	r4,r2
   43488:	180b883a 	mov	r5,r3
   4348c:	900d883a 	mov	r6,r18
   43490:	880f883a 	mov	r7,r17
   43494:	0046d040 	call	46d04 <__muldf3>
   43498:	01a02734 	movhi	r6,32924
   4349c:	01cfa4b4 	movhi	r7,16018
   434a0:	1009883a 	mov	r4,r2
   434a4:	180b883a 	mov	r5,r3
   434a8:	3194ab44 	addi	r6,r6,21165
   434ac:	39df93c4 	addi	r7,r7,32335
   434b0:	00474280 	call	47428 <__subdf3>
   434b4:	1009883a 	mov	r4,r2
   434b8:	180b883a 	mov	r5,r3
   434bc:	900d883a 	mov	r6,r18
   434c0:	880f883a 	mov	r7,r17
   434c4:	0046d040 	call	46d04 <__muldf3>
   434c8:	018672f4 	movhi	r6,6603
   434cc:	01cfbeb4 	movhi	r7,16122
   434d0:	1009883a 	mov	r4,r2
   434d4:	180b883a 	mov	r5,r3
   434d8:	31856404 	addi	r6,r6,5520
   434dc:	39c06804 	addi	r7,r7,416
   434e0:	0045a380 	call	45a38 <__adddf3>
   434e4:	1009883a 	mov	r4,r2
   434e8:	180b883a 	mov	r5,r3
   434ec:	900d883a 	mov	r6,r18
   434f0:	880f883a 	mov	r7,r17
   434f4:	0046d040 	call	46d04 <__muldf3>
   434f8:	0185b074 	movhi	r6,5825
   434fc:	01cfd5f4 	movhi	r7,16215
   43500:	1009883a 	mov	r4,r2
   43504:	180b883a 	mov	r5,r3
   43508:	31945dc4 	addi	r6,r6,20855
   4350c:	39f05b04 	addi	r7,r7,-16020
   43510:	00474280 	call	47428 <__subdf3>
   43514:	1009883a 	mov	r4,r2
   43518:	180b883a 	mov	r5,r3
   4351c:	900d883a 	mov	r6,r18
   43520:	880f883a 	mov	r7,r17
   43524:	0046d040 	call	46d04 <__muldf3>
   43528:	01955574 	movhi	r6,21845
   4352c:	01cfe974 	movhi	r7,16293
   43530:	1009883a 	mov	r4,r2
   43534:	180b883a 	mov	r5,r3
   43538:	31955304 	addi	r6,r6,21836
   4353c:	39d55544 	addi	r7,r7,21845
   43540:	0045a380 	call	45a38 <__adddf3>
   43544:	1009883a 	mov	r4,r2
   43548:	180b883a 	mov	r5,r3
   4354c:	900d883a 	mov	r6,r18
   43550:	880f883a 	mov	r7,r17
   43554:	0046d040 	call	46d04 <__muldf3>
   43558:	1013883a 	mov	r9,r2
   4355c:	1017883a 	mov	r11,r2
   43560:	008ff4f4 	movhi	r2,16339
   43564:	108ccc84 	addi	r2,r2,13106
   43568:	902b883a 	mov	r21,r18
   4356c:	8829883a 	mov	r20,r17
   43570:	1811883a 	mov	r8,r3
   43574:	1815883a 	mov	r10,r3
   43578:	143f880e 	bge	r2,r16,4339c <__alt_data_end+0xfffd139c>
   4357c:	008ffa74 	movhi	r2,16361
   43580:	14004416 	blt	r2,r16,43694 <__kernel_cos+0x484>
   43584:	00bff834 	movhi	r2,65504
   43588:	80a1883a 	add	r16,r16,r2
   4358c:	0009883a 	mov	r4,zero
   43590:	014ffc34 	movhi	r5,16368
   43594:	000d883a 	mov	r6,zero
   43598:	800f883a 	mov	r7,r16
   4359c:	da400115 	stw	r9,4(sp)
   435a0:	d8c00215 	stw	r3,8(sp)
   435a4:	00474280 	call	47428 <__subdf3>
   435a8:	da000217 	ldw	r8,8(sp)
   435ac:	da400117 	ldw	r9,4(sp)
   435b0:	102b883a 	mov	r21,r2
   435b4:	d8c00015 	stw	r3,0(sp)
   435b8:	9009883a 	mov	r4,r18
   435bc:	880b883a 	mov	r5,r17
   435c0:	000d883a 	mov	r6,zero
   435c4:	01cff834 	movhi	r7,16352
   435c8:	da000215 	stw	r8,8(sp)
   435cc:	da400115 	stw	r9,4(sp)
   435d0:	0046d040 	call	46d04 <__muldf3>
   435d4:	800f883a 	mov	r7,r16
   435d8:	1009883a 	mov	r4,r2
   435dc:	180b883a 	mov	r5,r3
   435e0:	000d883a 	mov	r6,zero
   435e4:	00474280 	call	47428 <__subdf3>
   435e8:	da400117 	ldw	r9,4(sp)
   435ec:	da000217 	ldw	r8,8(sp)
   435f0:	9009883a 	mov	r4,r18
   435f4:	480d883a 	mov	r6,r9
   435f8:	400f883a 	mov	r7,r8
   435fc:	880b883a 	mov	r5,r17
   43600:	1029883a 	mov	r20,r2
   43604:	1821883a 	mov	r16,r3
   43608:	0046d040 	call	46d04 <__muldf3>
   4360c:	b009883a 	mov	r4,r22
   43610:	980b883a 	mov	r5,r19
   43614:	b80d883a 	mov	r6,r23
   43618:	e00f883a 	mov	r7,fp
   4361c:	1025883a 	mov	r18,r2
   43620:	1823883a 	mov	r17,r3
   43624:	0046d040 	call	46d04 <__muldf3>
   43628:	9009883a 	mov	r4,r18
   4362c:	880b883a 	mov	r5,r17
   43630:	100d883a 	mov	r6,r2
   43634:	180f883a 	mov	r7,r3
   43638:	00474280 	call	47428 <__subdf3>
   4363c:	a009883a 	mov	r4,r20
   43640:	800b883a 	mov	r5,r16
   43644:	100d883a 	mov	r6,r2
   43648:	180f883a 	mov	r7,r3
   4364c:	00474280 	call	47428 <__subdf3>
   43650:	d9400017 	ldw	r5,0(sp)
   43654:	a809883a 	mov	r4,r21
   43658:	100d883a 	mov	r6,r2
   4365c:	180f883a 	mov	r7,r3
   43660:	00474280 	call	47428 <__subdf3>
   43664:	dfc00c17 	ldw	ra,48(sp)
   43668:	df000b17 	ldw	fp,44(sp)
   4366c:	ddc00a17 	ldw	r23,40(sp)
   43670:	dd800917 	ldw	r22,36(sp)
   43674:	dd400817 	ldw	r21,32(sp)
   43678:	dd000717 	ldw	r20,28(sp)
   4367c:	dcc00617 	ldw	r19,24(sp)
   43680:	dc800517 	ldw	r18,20(sp)
   43684:	dc400417 	ldw	r17,16(sp)
   43688:	dc000317 	ldw	r16,12(sp)
   4368c:	dec00d04 	addi	sp,sp,52
   43690:	f800283a 	ret
   43694:	008ff9f4 	movhi	r2,16359
   43698:	002b883a 	mov	r21,zero
   4369c:	d8800015 	stw	r2,0(sp)
   436a0:	040ff4b4 	movhi	r16,16338
   436a4:	003fc406 	br	435b8 <__alt_data_end+0xfffd15b8>
   436a8:	0005883a 	mov	r2,zero
   436ac:	00cffc34 	movhi	r3,16368
   436b0:	003fec06 	br	43664 <__alt_data_end+0xfffd1664>

000436b4 <__kernel_rem_pio2>:
   436b4:	deff5b04 	addi	sp,sp,-660
   436b8:	da00a517 	ldw	r8,660(sp)
   436bc:	00c00174 	movhi	r3,5
   436c0:	18d28c04 	addi	r3,r3,18992
   436c4:	4205883a 	add	r2,r8,r8
   436c8:	1085883a 	add	r2,r2,r2
   436cc:	1885883a 	add	r2,r3,r2
   436d0:	d9008d15 	stw	r4,564(sp)
   436d4:	d9409015 	stw	r5,576(sp)
   436d8:	313fff44 	addi	r4,r6,-3
   436dc:	01400604 	movi	r5,24
   436e0:	dd80a115 	stw	r22,644(sp)
   436e4:	dc009b15 	stw	r16,620(sp)
   436e8:	dfc0a415 	stw	ra,656(sp)
   436ec:	df00a315 	stw	fp,652(sp)
   436f0:	ddc0a215 	stw	r23,648(sp)
   436f4:	dd40a015 	stw	r21,640(sp)
   436f8:	dd009f15 	stw	r20,636(sp)
   436fc:	dcc09e15 	stw	r19,632(sp)
   43700:	dc809d15 	stw	r18,628(sp)
   43704:	dc409c15 	stw	r17,624(sp)
   43708:	3021883a 	mov	r16,r6
   4370c:	d9c09315 	stw	r7,588(sp)
   43710:	15800017 	ldw	r22,0(r2)
   43714:	0044b000 	call	44b00 <__divsi3>
   43718:	da009317 	ldw	r8,588(sp)
   4371c:	d8809215 	stw	r2,584(sp)
   43720:	423fffc4 	addi	r8,r8,-1
   43724:	da008c15 	stw	r8,560(sp)
   43728:	10032a16 	blt	r2,zero,443d4 <__kernel_rem_pio2+0xd20>
   4372c:	da009217 	ldw	r8,584(sp)
   43730:	d9009217 	ldw	r4,584(sp)
   43734:	0206303a 	nor	r3,zero,r8
   43738:	18c00624 	muli	r3,r3,24
   4373c:	da008c17 	ldw	r8,560(sp)
   43740:	1c07883a 	add	r3,r3,r16
   43744:	4585883a 	add	r2,r8,r22
   43748:	d8c08f15 	stw	r3,572(sp)
   4374c:	2223c83a 	sub	r17,r4,r8
   43750:	10001016 	blt	r2,zero,43794 <__kernel_rem_pio2+0xe0>
   43754:	da00a617 	ldw	r8,664(sp)
   43758:	8c65883a 	add	r18,r17,r17
   4375c:	94a5883a 	add	r18,r18,r18
   43760:	8885883a 	add	r2,r17,r2
   43764:	dcc05004 	addi	r19,sp,320
   43768:	44a5883a 	add	r18,r8,r18
   4376c:	14000044 	addi	r16,r2,1
   43770:	88014516 	blt	r17,zero,43c88 <__kernel_rem_pio2+0x5d4>
   43774:	91000017 	ldw	r4,0(r18)
   43778:	0047d800 	call	47d80 <__floatsidf>
   4377c:	98800015 	stw	r2,0(r19)
   43780:	98c00115 	stw	r3,4(r19)
   43784:	8c400044 	addi	r17,r17,1
   43788:	9cc00204 	addi	r19,r19,8
   4378c:	94800104 	addi	r18,r18,4
   43790:	8c3ff71e 	bne	r17,r16,43770 <__alt_data_end+0xfffd1770>
   43794:	b0002116 	blt	r22,zero,4381c <__kernel_rem_pio2+0x168>
   43798:	da009317 	ldw	r8,588(sp)
   4379c:	b02490fa 	slli	r18,r22,3
   437a0:	d8805004 	addi	r2,sp,320
   437a4:	402e90fa 	slli	r23,r8,3
   437a8:	d823883a 	mov	r17,sp
   437ac:	dc004e04 	addi	r16,sp,312
   437b0:	14b9883a 	add	fp,r2,r18
   437b4:	da008c17 	ldw	r8,560(sp)
   437b8:	40015816 	blt	r8,zero,43d1c <__kernel_rem_pio2+0x668>
   437bc:	dcc08d17 	ldw	r19,564(sp)
   437c0:	85e5883a 	add	r18,r16,r23
   437c4:	002b883a 	mov	r21,zero
   437c8:	0029883a 	mov	r20,zero
   437cc:	99000017 	ldw	r4,0(r19)
   437d0:	99400117 	ldw	r5,4(r19)
   437d4:	91800017 	ldw	r6,0(r18)
   437d8:	91c00117 	ldw	r7,4(r18)
   437dc:	94bffe04 	addi	r18,r18,-8
   437e0:	9cc00204 	addi	r19,r19,8
   437e4:	0046d040 	call	46d04 <__muldf3>
   437e8:	a809883a 	mov	r4,r21
   437ec:	a00b883a 	mov	r5,r20
   437f0:	100d883a 	mov	r6,r2
   437f4:	180f883a 	mov	r7,r3
   437f8:	0045a380 	call	45a38 <__adddf3>
   437fc:	102b883a 	mov	r21,r2
   43800:	1829883a 	mov	r20,r3
   43804:	84bff11e 	bne	r16,r18,437cc <__alt_data_end+0xfffd17cc>
   43808:	8d400015 	stw	r21,0(r17)
   4380c:	8d000115 	stw	r20,4(r17)
   43810:	84000204 	addi	r16,r16,8
   43814:	8c400204 	addi	r17,r17,8
   43818:	873fe61e 	bne	r16,fp,437b4 <__alt_data_end+0xfffd17b4>
   4381c:	da009317 	ldw	r8,588(sp)
   43820:	b00690ba 	slli	r3,r22,2
   43824:	b0bfffc4 	addi	r2,r22,-1
   43828:	423ffe24 	muli	r8,r8,-8
   4382c:	193fff04 	addi	r4,r3,-4
   43830:	1085883a 	add	r2,r2,r2
   43834:	da008e15 	stw	r8,568(sp)
   43838:	18fffe04 	addi	r3,r3,-8
   4383c:	da007804 	addi	r8,sp,480
   43840:	40d1883a 	add	r8,r8,r3
   43844:	1085883a 	add	r2,r2,r2
   43848:	d885883a 	add	r2,sp,r2
   4384c:	da009515 	stw	r8,596(sp)
   43850:	da007804 	addi	r8,sp,480
   43854:	4111883a 	add	r8,r8,r4
   43858:	10807804 	addi	r2,r2,480
   4385c:	da009615 	stw	r8,600(sp)
   43860:	b021883a 	mov	r16,r22
   43864:	d8809715 	stw	r2,604(sp)
   43868:	dd809415 	stw	r22,592(sp)
   4386c:	800490fa 	slli	r2,r16,3
   43870:	d885883a 	add	r2,sp,r2
   43874:	15c00017 	ldw	r23,0(r2)
   43878:	15000117 	ldw	r20,4(r2)
   4387c:	04002d0e 	bge	zero,r16,43934 <__kernel_rem_pio2+0x280>
   43880:	00880034 	movhi	r2,8192
   43884:	10bfffc4 	addi	r2,r2,-1
   43888:	80a5883a 	add	r18,r16,r2
   4388c:	902490fa 	slli	r18,r18,3
   43890:	8423883a 	add	r17,r16,r16
   43894:	8c63883a 	add	r17,r17,r17
   43898:	dcc07804 	addi	r19,sp,480
   4389c:	dca5883a 	add	r18,sp,r18
   438a0:	9c63883a 	add	r17,r19,r17
   438a4:	000d883a 	mov	r6,zero
   438a8:	01cf9c34 	movhi	r7,15984
   438ac:	b809883a 	mov	r4,r23
   438b0:	a00b883a 	mov	r5,r20
   438b4:	0046d040 	call	46d04 <__muldf3>
   438b8:	180b883a 	mov	r5,r3
   438bc:	1009883a 	mov	r4,r2
   438c0:	0047cf80 	call	47cf8 <__fixdfsi>
   438c4:	1009883a 	mov	r4,r2
   438c8:	0047d800 	call	47d80 <__floatsidf>
   438cc:	1009883a 	mov	r4,r2
   438d0:	180b883a 	mov	r5,r3
   438d4:	000d883a 	mov	r6,zero
   438d8:	01d05c34 	movhi	r7,16752
   438dc:	102d883a 	mov	r22,r2
   438e0:	182b883a 	mov	r21,r3
   438e4:	0046d040 	call	46d04 <__muldf3>
   438e8:	b809883a 	mov	r4,r23
   438ec:	a00b883a 	mov	r5,r20
   438f0:	100d883a 	mov	r6,r2
   438f4:	180f883a 	mov	r7,r3
   438f8:	00474280 	call	47428 <__subdf3>
   438fc:	180b883a 	mov	r5,r3
   43900:	1009883a 	mov	r4,r2
   43904:	0047cf80 	call	47cf8 <__fixdfsi>
   43908:	91800017 	ldw	r6,0(r18)
   4390c:	91c00117 	ldw	r7,4(r18)
   43910:	98800015 	stw	r2,0(r19)
   43914:	b009883a 	mov	r4,r22
   43918:	a80b883a 	mov	r5,r21
   4391c:	0045a380 	call	45a38 <__adddf3>
   43920:	9cc00104 	addi	r19,r19,4
   43924:	102f883a 	mov	r23,r2
   43928:	1829883a 	mov	r20,r3
   4392c:	94bffe04 	addi	r18,r18,-8
   43930:	9c7fdc1e 	bne	r19,r17,438a4 <__alt_data_end+0xfffd18a4>
   43934:	d9808f17 	ldw	r6,572(sp)
   43938:	a00b883a 	mov	r5,r20
   4393c:	b809883a 	mov	r4,r23
   43940:	00448ac0 	call	448ac <scalbn>
   43944:	000d883a 	mov	r6,zero
   43948:	01cff034 	movhi	r7,16320
   4394c:	1009883a 	mov	r4,r2
   43950:	180b883a 	mov	r5,r3
   43954:	1025883a 	mov	r18,r2
   43958:	1823883a 	mov	r17,r3
   4395c:	0046d040 	call	46d04 <__muldf3>
   43960:	1009883a 	mov	r4,r2
   43964:	180b883a 	mov	r5,r3
   43968:	00446b80 	call	446b8 <floor>
   4396c:	1009883a 	mov	r4,r2
   43970:	180b883a 	mov	r5,r3
   43974:	000d883a 	mov	r6,zero
   43978:	01d00834 	movhi	r7,16416
   4397c:	0046d040 	call	46d04 <__muldf3>
   43980:	100d883a 	mov	r6,r2
   43984:	180f883a 	mov	r7,r3
   43988:	9009883a 	mov	r4,r18
   4398c:	880b883a 	mov	r5,r17
   43990:	00474280 	call	47428 <__subdf3>
   43994:	180b883a 	mov	r5,r3
   43998:	1009883a 	mov	r4,r2
   4399c:	1825883a 	mov	r18,r3
   439a0:	1027883a 	mov	r19,r2
   439a4:	0047cf80 	call	47cf8 <__fixdfsi>
   439a8:	1009883a 	mov	r4,r2
   439ac:	1023883a 	mov	r17,r2
   439b0:	0047d800 	call	47d80 <__floatsidf>
   439b4:	9809883a 	mov	r4,r19
   439b8:	900b883a 	mov	r5,r18
   439bc:	100d883a 	mov	r6,r2
   439c0:	180f883a 	mov	r7,r3
   439c4:	00474280 	call	47428 <__subdf3>
   439c8:	da008f17 	ldw	r8,572(sp)
   439cc:	1019883a 	mov	r12,r2
   439d0:	1029883a 	mov	r20,r2
   439d4:	1817883a 	mov	r11,r3
   439d8:	0200ae0e 	bge	zero,r8,43c94 <__kernel_rem_pio2+0x5e0>
   439dc:	80bfffc4 	addi	r2,r16,-1
   439e0:	1085883a 	add	r2,r2,r2
   439e4:	1085883a 	add	r2,r2,r2
   439e8:	d885883a 	add	r2,sp,r2
   439ec:	10807804 	addi	r2,r2,480
   439f0:	11400017 	ldw	r5,0(r2)
   439f4:	01000604 	movi	r4,24
   439f8:	2209c83a 	sub	r4,r4,r8
   439fc:	290dd83a 	sra	r6,r5,r4
   43a00:	048005c4 	movi	r18,23
   43a04:	9225c83a 	sub	r18,r18,r8
   43a08:	3108983a 	sll	r4,r6,r4
   43a0c:	89a3883a 	add	r17,r17,r6
   43a10:	2909c83a 	sub	r4,r5,r4
   43a14:	24a5d83a 	sra	r18,r4,r18
   43a18:	11000015 	stw	r4,0(r2)
   43a1c:	04802a0e 	bge	zero,r18,43ac8 <__kernel_rem_pio2+0x414>
   43a20:	8c400044 	addi	r17,r17,1
   43a24:	0400c40e 	bge	zero,r16,43d38 <__kernel_rem_pio2+0x684>
   43a28:	01404034 	movhi	r5,256
   43a2c:	297fffc4 	addi	r5,r5,-1
   43a30:	da007804 	addi	r8,sp,480
   43a34:	0015883a 	mov	r10,zero
   43a38:	0027883a 	mov	r19,zero
   43a3c:	01004034 	movhi	r4,256
   43a40:	00000706 	br	43a60 <__kernel_rem_pio2+0x3ac>
   43a44:	208dc83a 	sub	r6,r4,r2
   43a48:	10000226 	beq	r2,zero,43a54 <__kernel_rem_pio2+0x3a0>
   43a4c:	41800015 	stw	r6,0(r8)
   43a50:	04c00044 	movi	r19,1
   43a54:	52800044 	addi	r10,r10,1
   43a58:	42000104 	addi	r8,r8,4
   43a5c:	5400080e 	bge	r10,r16,43a80 <__kernel_rem_pio2+0x3cc>
   43a60:	40800017 	ldw	r2,0(r8)
   43a64:	983ff726 	beq	r19,zero,43a44 <__alt_data_end+0xfffd1a44>
   43a68:	2885c83a 	sub	r2,r5,r2
   43a6c:	40800015 	stw	r2,0(r8)
   43a70:	52800044 	addi	r10,r10,1
   43a74:	04c00044 	movi	r19,1
   43a78:	42000104 	addi	r8,r8,4
   43a7c:	543ff816 	blt	r10,r16,43a60 <__alt_data_end+0xfffd1a60>
   43a80:	da008f17 	ldw	r8,572(sp)
   43a84:	02000e0e 	bge	zero,r8,43ac0 <__kernel_rem_pio2+0x40c>
   43a88:	00800044 	movi	r2,1
   43a8c:	40808a26 	beq	r8,r2,43cb8 <__kernel_rem_pio2+0x604>
   43a90:	00800084 	movi	r2,2
   43a94:	40800a1e 	bne	r8,r2,43ac0 <__kernel_rem_pio2+0x40c>
   43a98:	80bfffc4 	addi	r2,r16,-1
   43a9c:	1085883a 	add	r2,r2,r2
   43aa0:	1085883a 	add	r2,r2,r2
   43aa4:	d885883a 	add	r2,sp,r2
   43aa8:	10807804 	addi	r2,r2,480
   43aac:	11400017 	ldw	r5,0(r2)
   43ab0:	01001034 	movhi	r4,64
   43ab4:	213fffc4 	addi	r4,r4,-1
   43ab8:	2908703a 	and	r4,r5,r4
   43abc:	11000015 	stw	r4,0(r2)
   43ac0:	00800084 	movi	r2,2
   43ac4:	90805a26 	beq	r18,r2,43c30 <__kernel_rem_pio2+0x57c>
   43ac8:	580b883a 	mov	r5,r11
   43acc:	a009883a 	mov	r4,r20
   43ad0:	000d883a 	mov	r6,zero
   43ad4:	000f883a 	mov	r7,zero
   43ad8:	dac09a15 	stw	r11,616(sp)
   43adc:	0046ba00 	call	46ba0 <__eqdf2>
   43ae0:	dac09a17 	ldw	r11,616(sp)
   43ae4:	1000961e 	bne	r2,zero,43d40 <__kernel_rem_pio2+0x68c>
   43ae8:	da009417 	ldw	r8,592(sp)
   43aec:	817fffc4 	addi	r5,r16,-1
   43af0:	2a000b16 	blt	r5,r8,43b20 <__kernel_rem_pio2+0x46c>
   43af4:	800490ba 	slli	r2,r16,2
   43af8:	d9809617 	ldw	r6,600(sp)
   43afc:	d9007804 	addi	r4,sp,480
   43b00:	10bfff04 	addi	r2,r2,-4
   43b04:	0007883a 	mov	r3,zero
   43b08:	2085883a 	add	r2,r4,r2
   43b0c:	11000017 	ldw	r4,0(r2)
   43b10:	10bfff04 	addi	r2,r2,-4
   43b14:	1906b03a 	or	r3,r3,r4
   43b18:	11bffc1e 	bne	r2,r6,43b0c <__alt_data_end+0xfffd1b0c>
   43b1c:	18013c1e 	bne	r3,zero,44010 <__kernel_rem_pio2+0x95c>
   43b20:	da009717 	ldw	r8,604(sp)
   43b24:	40800017 	ldw	r2,0(r8)
   43b28:	1001371e 	bne	r2,zero,44008 <__kernel_rem_pio2+0x954>
   43b2c:	d8809517 	ldw	r2,596(sp)
   43b30:	00c00044 	movi	r3,1
   43b34:	10bfff04 	addi	r2,r2,-4
   43b38:	11000117 	ldw	r4,4(r2)
   43b3c:	18c00044 	addi	r3,r3,1
   43b40:	203ffc26 	beq	r4,zero,43b34 <__alt_data_end+0xfffd1b34>
   43b44:	80c7883a 	add	r3,r16,r3
   43b48:	80800044 	addi	r2,r16,1
   43b4c:	d8c09115 	stw	r3,580(sp)
   43b50:	18803216 	blt	r3,r2,43c1c <__kernel_rem_pio2+0x568>
   43b54:	da009317 	ldw	r8,588(sp)
   43b58:	8223883a 	add	r17,r16,r8
   43b5c:	da009117 	ldw	r8,580(sp)
   43b60:	882290fa 	slli	r17,r17,3
   43b64:	45000044 	addi	r20,r8,1
   43b68:	da009217 	ldw	r8,584(sp)
   43b6c:	a02890fa 	slli	r20,r20,3
   43b70:	1227883a 	add	r19,r2,r8
   43b74:	100490fa 	slli	r2,r2,3
   43b78:	da00a617 	ldw	r8,664(sp)
   43b7c:	9ce7883a 	add	r19,r19,r19
   43b80:	9ce7883a 	add	r19,r19,r19
   43b84:	d8a5883a 	add	r18,sp,r2
   43b88:	d8805004 	addi	r2,sp,320
   43b8c:	44e7883a 	add	r19,r8,r19
   43b90:	1463883a 	add	r17,r2,r17
   43b94:	dd29883a 	add	r20,sp,r20
   43b98:	99000017 	ldw	r4,0(r19)
   43b9c:	0047d800 	call	47d80 <__floatsidf>
   43ba0:	da008c17 	ldw	r8,560(sp)
   43ba4:	88800015 	stw	r2,0(r17)
   43ba8:	88c00115 	stw	r3,4(r17)
   43bac:	40001d16 	blt	r8,zero,43c24 <__kernel_rem_pio2+0x570>
   43bb0:	da008e17 	ldw	r8,568(sp)
   43bb4:	dd808d17 	ldw	r22,564(sp)
   43bb8:	8821883a 	mov	r16,r17
   43bbc:	8a2b883a 	add	r21,r17,r8
   43bc0:	0039883a 	mov	fp,zero
   43bc4:	002f883a 	mov	r23,zero
   43bc8:	b1000017 	ldw	r4,0(r22)
   43bcc:	b1400117 	ldw	r5,4(r22)
   43bd0:	81800017 	ldw	r6,0(r16)
   43bd4:	81c00117 	ldw	r7,4(r16)
   43bd8:	843ffe04 	addi	r16,r16,-8
   43bdc:	b5800204 	addi	r22,r22,8
   43be0:	0046d040 	call	46d04 <__muldf3>
   43be4:	e009883a 	mov	r4,fp
   43be8:	b80b883a 	mov	r5,r23
   43bec:	100d883a 	mov	r6,r2
   43bf0:	180f883a 	mov	r7,r3
   43bf4:	0045a380 	call	45a38 <__adddf3>
   43bf8:	1039883a 	mov	fp,r2
   43bfc:	182f883a 	mov	r23,r3
   43c00:	857ff11e 	bne	r16,r21,43bc8 <__alt_data_end+0xfffd1bc8>
   43c04:	97000015 	stw	fp,0(r18)
   43c08:	95c00115 	stw	r23,4(r18)
   43c0c:	94800204 	addi	r18,r18,8
   43c10:	9cc00104 	addi	r19,r19,4
   43c14:	8c400204 	addi	r17,r17,8
   43c18:	953fdf1e 	bne	r18,r20,43b98 <__alt_data_end+0xfffd1b98>
   43c1c:	dc009117 	ldw	r16,580(sp)
   43c20:	003f1206 	br	4386c <__alt_data_end+0xfffd186c>
   43c24:	0039883a 	mov	fp,zero
   43c28:	002f883a 	mov	r23,zero
   43c2c:	003ff506 	br	43c04 <__alt_data_end+0xfffd1c04>
   43c30:	0009883a 	mov	r4,zero
   43c34:	014ffc34 	movhi	r5,16368
   43c38:	600d883a 	mov	r6,r12
   43c3c:	180f883a 	mov	r7,r3
   43c40:	00474280 	call	47428 <__subdf3>
   43c44:	1029883a 	mov	r20,r2
   43c48:	1817883a 	mov	r11,r3
   43c4c:	983f9e26 	beq	r19,zero,43ac8 <__alt_data_end+0xfffd1ac8>
   43c50:	d9808f17 	ldw	r6,572(sp)
   43c54:	0009883a 	mov	r4,zero
   43c58:	014ffc34 	movhi	r5,16368
   43c5c:	d8c09a15 	stw	r3,616(sp)
   43c60:	00448ac0 	call	448ac <scalbn>
   43c64:	dac09a17 	ldw	r11,616(sp)
   43c68:	a009883a 	mov	r4,r20
   43c6c:	100d883a 	mov	r6,r2
   43c70:	580b883a 	mov	r5,r11
   43c74:	180f883a 	mov	r7,r3
   43c78:	00474280 	call	47428 <__subdf3>
   43c7c:	1029883a 	mov	r20,r2
   43c80:	1817883a 	mov	r11,r3
   43c84:	003f9006 	br	43ac8 <__alt_data_end+0xfffd1ac8>
   43c88:	0005883a 	mov	r2,zero
   43c8c:	0007883a 	mov	r3,zero
   43c90:	003eba06 	br	4377c <__alt_data_end+0xfffd177c>
   43c94:	da008f17 	ldw	r8,572(sp)
   43c98:	4000121e 	bne	r8,zero,43ce4 <__kernel_rem_pio2+0x630>
   43c9c:	80bfffc4 	addi	r2,r16,-1
   43ca0:	1085883a 	add	r2,r2,r2
   43ca4:	1085883a 	add	r2,r2,r2
   43ca8:	d885883a 	add	r2,sp,r2
   43cac:	14807817 	ldw	r18,480(r2)
   43cb0:	9025d5fa 	srai	r18,r18,23
   43cb4:	003f5906 	br	43a1c <__alt_data_end+0xfffd1a1c>
   43cb8:	80bfffc4 	addi	r2,r16,-1
   43cbc:	1085883a 	add	r2,r2,r2
   43cc0:	1085883a 	add	r2,r2,r2
   43cc4:	d885883a 	add	r2,sp,r2
   43cc8:	10807804 	addi	r2,r2,480
   43ccc:	11000017 	ldw	r4,0(r2)
   43cd0:	01402034 	movhi	r5,128
   43cd4:	297fffc4 	addi	r5,r5,-1
   43cd8:	2148703a 	and	r4,r4,r5
   43cdc:	11000015 	stw	r4,0(r2)
   43ce0:	003f7706 	br	43ac0 <__alt_data_end+0xfffd1ac0>
   43ce4:	180b883a 	mov	r5,r3
   43ce8:	1009883a 	mov	r4,r2
   43cec:	000d883a 	mov	r6,zero
   43cf0:	01cff834 	movhi	r7,16352
   43cf4:	d8c09915 	stw	r3,612(sp)
   43cf8:	d8c09a15 	stw	r3,616(sp)
   43cfc:	d8809815 	stw	r2,608(sp)
   43d00:	0046c240 	call	46c24 <__gedf2>
   43d04:	d8c09917 	ldw	r3,612(sp)
   43d08:	dac09a17 	ldw	r11,616(sp)
   43d0c:	db009817 	ldw	r12,608(sp)
   43d10:	1000050e 	bge	r2,zero,43d28 <__kernel_rem_pio2+0x674>
   43d14:	0025883a 	mov	r18,zero
   43d18:	003f6b06 	br	43ac8 <__alt_data_end+0xfffd1ac8>
   43d1c:	002b883a 	mov	r21,zero
   43d20:	0029883a 	mov	r20,zero
   43d24:	003eb806 	br	43808 <__alt_data_end+0xfffd1808>
   43d28:	8c400044 	addi	r17,r17,1
   43d2c:	0401960e 	bge	zero,r16,44388 <__kernel_rem_pio2+0xcd4>
   43d30:	04800084 	movi	r18,2
   43d34:	003f3c06 	br	43a28 <__alt_data_end+0xfffd1a28>
   43d38:	0027883a 	mov	r19,zero
   43d3c:	003f5006 	br	43a80 <__alt_data_end+0xfffd1a80>
   43d40:	da008f17 	ldw	r8,572(sp)
   43d44:	a009883a 	mov	r4,r20
   43d48:	580b883a 	mov	r5,r11
   43d4c:	020dc83a 	sub	r6,zero,r8
   43d50:	dc808c15 	stw	r18,560(sp)
   43d54:	dd809417 	ldw	r22,592(sp)
   43d58:	dc408e15 	stw	r17,568(sp)
   43d5c:	00448ac0 	call	448ac <scalbn>
   43d60:	1009883a 	mov	r4,r2
   43d64:	180b883a 	mov	r5,r3
   43d68:	000d883a 	mov	r6,zero
   43d6c:	01d05c34 	movhi	r7,16752
   43d70:	1029883a 	mov	r20,r2
   43d74:	182f883a 	mov	r23,r3
   43d78:	0046c240 	call	46c24 <__gedf2>
   43d7c:	10018b16 	blt	r2,zero,443ac <__kernel_rem_pio2+0xcf8>
   43d80:	01cf9c34 	movhi	r7,15984
   43d84:	000d883a 	mov	r6,zero
   43d88:	a009883a 	mov	r4,r20
   43d8c:	b80b883a 	mov	r5,r23
   43d90:	0046d040 	call	46d04 <__muldf3>
   43d94:	180b883a 	mov	r5,r3
   43d98:	1009883a 	mov	r4,r2
   43d9c:	0047cf80 	call	47cf8 <__fixdfsi>
   43da0:	840d883a 	add	r6,r16,r16
   43da4:	318d883a 	add	r6,r6,r6
   43da8:	1009883a 	mov	r4,r2
   43dac:	d9a7883a 	add	r19,sp,r6
   43db0:	102b883a 	mov	r21,r2
   43db4:	0047d800 	call	47d80 <__floatsidf>
   43db8:	1009883a 	mov	r4,r2
   43dbc:	180b883a 	mov	r5,r3
   43dc0:	000d883a 	mov	r6,zero
   43dc4:	01d05c34 	movhi	r7,16752
   43dc8:	0046d040 	call	46d04 <__muldf3>
   43dcc:	a009883a 	mov	r4,r20
   43dd0:	b80b883a 	mov	r5,r23
   43dd4:	100d883a 	mov	r6,r2
   43dd8:	180f883a 	mov	r7,r3
   43ddc:	00474280 	call	47428 <__subdf3>
   43de0:	180b883a 	mov	r5,r3
   43de4:	1009883a 	mov	r4,r2
   43de8:	0047cf80 	call	47cf8 <__fixdfsi>
   43dec:	da008f17 	ldw	r8,572(sp)
   43df0:	84400044 	addi	r17,r16,1
   43df4:	8c47883a 	add	r3,r17,r17
   43df8:	9cc07804 	addi	r19,r19,480
   43dfc:	18c7883a 	add	r3,r3,r3
   43e00:	98800015 	stw	r2,0(r19)
   43e04:	d8c7883a 	add	r3,sp,r3
   43e08:	42000604 	addi	r8,r8,24
   43e0c:	da008f15 	stw	r8,572(sp)
   43e10:	1d407815 	stw	r21,480(r3)
   43e14:	d9808f17 	ldw	r6,572(sp)
   43e18:	0009883a 	mov	r4,zero
   43e1c:	014ffc34 	movhi	r5,16368
   43e20:	00448ac0 	call	448ac <scalbn>
   43e24:	1029883a 	mov	r20,r2
   43e28:	182b883a 	mov	r21,r3
   43e2c:	88006e16 	blt	r17,zero,43fe8 <__kernel_rem_pio2+0x934>
   43e30:	881090fa 	slli	r8,r17,3
   43e34:	d8c07804 	addi	r3,sp,480
   43e38:	dc3ffe04 	addi	r16,sp,-8
   43e3c:	da008d15 	stw	r8,564(sp)
   43e40:	d8808d17 	ldw	r2,564(sp)
   43e44:	8c51883a 	add	r8,r17,r17
   43e48:	4211883a 	add	r8,r8,r8
   43e4c:	d8a7883a 	add	r19,sp,r2
   43e50:	1a2f883a 	add	r23,r3,r8
   43e54:	9839883a 	mov	fp,r19
   43e58:	b9000017 	ldw	r4,0(r23)
   43e5c:	e73ffe04 	addi	fp,fp,-8
   43e60:	bdffff04 	addi	r23,r23,-4
   43e64:	0047d800 	call	47d80 <__floatsidf>
   43e68:	a00d883a 	mov	r6,r20
   43e6c:	a80f883a 	mov	r7,r21
   43e70:	1009883a 	mov	r4,r2
   43e74:	180b883a 	mov	r5,r3
   43e78:	0046d040 	call	46d04 <__muldf3>
   43e7c:	a009883a 	mov	r4,r20
   43e80:	a80b883a 	mov	r5,r21
   43e84:	e0800215 	stw	r2,8(fp)
   43e88:	e0c00315 	stw	r3,12(fp)
   43e8c:	000d883a 	mov	r6,zero
   43e90:	01cf9c34 	movhi	r7,15984
   43e94:	0046d040 	call	46d04 <__muldf3>
   43e98:	1029883a 	mov	r20,r2
   43e9c:	182b883a 	mov	r21,r3
   43ea0:	e43fed1e 	bne	fp,r16,43e58 <__alt_data_end+0xfffd1e58>
   43ea4:	8a000044 	addi	r8,r17,1
   43ea8:	0029883a 	mov	r20,zero
   43eac:	4039883a 	mov	fp,r8
   43eb0:	dc408f15 	stw	r17,572(sp)
   43eb4:	b0004916 	blt	r22,zero,43fdc <__kernel_rem_pio2+0x928>
   43eb8:	a0004816 	blt	r20,zero,43fdc <__kernel_rem_pio2+0x928>
   43ebc:	04000174 	movhi	r16,5
   43ec0:	84127c04 	addi	r16,r16,18928
   43ec4:	982b883a 	mov	r21,r19
   43ec8:	0023883a 	mov	r17,zero
   43ecc:	002f883a 	mov	r23,zero
   43ed0:	0025883a 	mov	r18,zero
   43ed4:	00000206 	br	43ee0 <__kernel_rem_pio2+0x82c>
   43ed8:	ad400204 	addi	r21,r21,8
   43edc:	a4800f16 	blt	r20,r18,43f1c <__kernel_rem_pio2+0x868>
   43ee0:	81000017 	ldw	r4,0(r16)
   43ee4:	81400117 	ldw	r5,4(r16)
   43ee8:	a9800017 	ldw	r6,0(r21)
   43eec:	a9c00117 	ldw	r7,4(r21)
   43ef0:	94800044 	addi	r18,r18,1
   43ef4:	84000204 	addi	r16,r16,8
   43ef8:	0046d040 	call	46d04 <__muldf3>
   43efc:	8809883a 	mov	r4,r17
   43f00:	b80b883a 	mov	r5,r23
   43f04:	100d883a 	mov	r6,r2
   43f08:	180f883a 	mov	r7,r3
   43f0c:	0045a380 	call	45a38 <__adddf3>
   43f10:	1023883a 	mov	r17,r2
   43f14:	182f883a 	mov	r23,r3
   43f18:	b4bfef0e 	bge	r22,r18,43ed8 <__alt_data_end+0xfffd1ed8>
   43f1c:	a00490fa 	slli	r2,r20,3
   43f20:	a5000044 	addi	r20,r20,1
   43f24:	9cfffe04 	addi	r19,r19,-8
   43f28:	d885883a 	add	r2,sp,r2
   43f2c:	10802804 	addi	r2,r2,160
   43f30:	14400015 	stw	r17,0(r2)
   43f34:	15c00115 	stw	r23,4(r2)
   43f38:	a73fde1e 	bne	r20,fp,43eb4 <__alt_data_end+0xfffd1eb4>
   43f3c:	da00a517 	ldw	r8,660(sp)
   43f40:	00800084 	movi	r2,2
   43f44:	dc408f17 	ldw	r17,572(sp)
   43f48:	12007316 	blt	r2,r8,44118 <__kernel_rem_pio2+0xa64>
   43f4c:	02004816 	blt	zero,r8,44070 <__kernel_rem_pio2+0x9bc>
   43f50:	4000141e 	bne	r8,zero,43fa4 <__kernel_rem_pio2+0x8f0>
   43f54:	da008d17 	ldw	r8,564(sp)
   43f58:	d8802804 	addi	r2,sp,160
   43f5c:	0007883a 	mov	r3,zero
   43f60:	1221883a 	add	r16,r2,r8
   43f64:	04ffffc4 	movi	r19,-1
   43f68:	0005883a 	mov	r2,zero
   43f6c:	81800017 	ldw	r6,0(r16)
   43f70:	81c00117 	ldw	r7,4(r16)
   43f74:	1009883a 	mov	r4,r2
   43f78:	180b883a 	mov	r5,r3
   43f7c:	8c7fffc4 	addi	r17,r17,-1
   43f80:	0045a380 	call	45a38 <__adddf3>
   43f84:	843ffe04 	addi	r16,r16,-8
   43f88:	8cfff81e 	bne	r17,r19,43f6c <__alt_data_end+0xfffd1f6c>
   43f8c:	da008c17 	ldw	r8,560(sp)
   43f90:	40000126 	beq	r8,zero,43f98 <__kernel_rem_pio2+0x8e4>
   43f94:	18e0003c 	xorhi	r3,r3,32768
   43f98:	da009017 	ldw	r8,576(sp)
   43f9c:	40800015 	stw	r2,0(r8)
   43fa0:	40c00115 	stw	r3,4(r8)
   43fa4:	da008e17 	ldw	r8,568(sp)
   43fa8:	408001cc 	andi	r2,r8,7
   43fac:	dfc0a417 	ldw	ra,656(sp)
   43fb0:	df00a317 	ldw	fp,652(sp)
   43fb4:	ddc0a217 	ldw	r23,648(sp)
   43fb8:	dd80a117 	ldw	r22,644(sp)
   43fbc:	dd40a017 	ldw	r21,640(sp)
   43fc0:	dd009f17 	ldw	r20,636(sp)
   43fc4:	dcc09e17 	ldw	r19,632(sp)
   43fc8:	dc809d17 	ldw	r18,628(sp)
   43fcc:	dc409c17 	ldw	r17,624(sp)
   43fd0:	dc009b17 	ldw	r16,620(sp)
   43fd4:	dec0a504 	addi	sp,sp,660
   43fd8:	f800283a 	ret
   43fdc:	0023883a 	mov	r17,zero
   43fe0:	002f883a 	mov	r23,zero
   43fe4:	003fcd06 	br	43f1c <__alt_data_end+0xfffd1f1c>
   43fe8:	da00a517 	ldw	r8,660(sp)
   43fec:	00800084 	movi	r2,2
   43ff0:	1200d216 	blt	r2,r8,4433c <__kernel_rem_pio2+0xc88>
   43ff4:	0200c016 	blt	zero,r8,442f8 <__kernel_rem_pio2+0xc44>
   43ff8:	403fea1e 	bne	r8,zero,43fa4 <__alt_data_end+0xfffd1fa4>
   43ffc:	0005883a 	mov	r2,zero
   44000:	0007883a 	mov	r3,zero
   44004:	003fe106 	br	43f8c <__alt_data_end+0xfffd1f8c>
   44008:	00c00044 	movi	r3,1
   4400c:	003ecd06 	br	43b44 <__alt_data_end+0xfffd1b44>
   44010:	2945883a 	add	r2,r5,r5
   44014:	da008f17 	ldw	r8,572(sp)
   44018:	1085883a 	add	r2,r2,r2
   4401c:	d885883a 	add	r2,sp,r2
   44020:	10807817 	ldw	r2,480(r2)
   44024:	423ffa04 	addi	r8,r8,-24
   44028:	dc408e15 	stw	r17,568(sp)
   4402c:	dc808c15 	stw	r18,560(sp)
   44030:	da008f15 	stw	r8,572(sp)
   44034:	dd809417 	ldw	r22,592(sp)
   44038:	2823883a 	mov	r17,r5
   4403c:	103f751e 	bne	r2,zero,43e14 <__alt_data_end+0xfffd1e14>
   44040:	280490ba 	slli	r2,r5,2
   44044:	d8c07804 	addi	r3,sp,480
   44048:	10bfff04 	addi	r2,r2,-4
   4404c:	1885883a 	add	r2,r3,r2
   44050:	4007883a 	mov	r3,r8
   44054:	10bfff04 	addi	r2,r2,-4
   44058:	11000117 	ldw	r4,4(r2)
   4405c:	8c7fffc4 	addi	r17,r17,-1
   44060:	18fffa04 	addi	r3,r3,-24
   44064:	203ffb26 	beq	r4,zero,44054 <__alt_data_end+0xfffd2054>
   44068:	d8c08f15 	stw	r3,572(sp)
   4406c:	003f6906 	br	43e14 <__alt_data_end+0xfffd1e14>
   44070:	da008d17 	ldw	r8,564(sp)
   44074:	d8802804 	addi	r2,sp,160
   44078:	dcc02604 	addi	r19,sp,152
   4407c:	1221883a 	add	r16,r2,r8
   44080:	0007883a 	mov	r3,zero
   44084:	0005883a 	mov	r2,zero
   44088:	81800017 	ldw	r6,0(r16)
   4408c:	81c00117 	ldw	r7,4(r16)
   44090:	1009883a 	mov	r4,r2
   44094:	843ffe04 	addi	r16,r16,-8
   44098:	180b883a 	mov	r5,r3
   4409c:	0045a380 	call	45a38 <__adddf3>
   440a0:	84fff91e 	bne	r16,r19,44088 <__alt_data_end+0xfffd2088>
   440a4:	da008c17 	ldw	r8,560(sp)
   440a8:	d9002817 	ldw	r4,160(sp)
   440ac:	d9402917 	ldw	r5,164(sp)
   440b0:	40009726 	beq	r8,zero,44310 <__kernel_rem_pio2+0xc5c>
   440b4:	da009017 	ldw	r8,576(sp)
   440b8:	19a0003c 	xorhi	r6,r3,32768
   440bc:	180f883a 	mov	r7,r3
   440c0:	41800115 	stw	r6,4(r8)
   440c4:	40800015 	stw	r2,0(r8)
   440c8:	100d883a 	mov	r6,r2
   440cc:	00474280 	call	47428 <__subdf3>
   440d0:	04400c0e 	bge	zero,r17,44104 <__kernel_rem_pio2+0xa50>
   440d4:	dc002a04 	addi	r16,sp,168
   440d8:	04c00044 	movi	r19,1
   440dc:	81800017 	ldw	r6,0(r16)
   440e0:	81c00117 	ldw	r7,4(r16)
   440e4:	1009883a 	mov	r4,r2
   440e8:	180b883a 	mov	r5,r3
   440ec:	9cc00044 	addi	r19,r19,1
   440f0:	0045a380 	call	45a38 <__adddf3>
   440f4:	84000204 	addi	r16,r16,8
   440f8:	8cfff80e 	bge	r17,r19,440dc <__alt_data_end+0xfffd20dc>
   440fc:	da008c17 	ldw	r8,560(sp)
   44100:	40000126 	beq	r8,zero,44108 <__kernel_rem_pio2+0xa54>
   44104:	18e0003c 	xorhi	r3,r3,32768
   44108:	da009017 	ldw	r8,576(sp)
   4410c:	40800215 	stw	r2,8(r8)
   44110:	40c00315 	stw	r3,12(r8)
   44114:	003fa306 	br	43fa4 <__alt_data_end+0xfffd1fa4>
   44118:	da00a517 	ldw	r8,660(sp)
   4411c:	008000c4 	movi	r2,3
   44120:	40bfa01e 	bne	r8,r2,43fa4 <__alt_data_end+0xfffd1fa4>
   44124:	0440880e 	bge	zero,r17,44348 <__kernel_rem_pio2+0xc94>
   44128:	da008d17 	ldw	r8,564(sp)
   4412c:	882690fa 	slli	r19,r17,3
   44130:	dd402804 	addi	r21,sp,160
   44134:	da05883a 	add	r2,sp,r8
   44138:	10802804 	addi	r2,r2,160
   4413c:	15c00017 	ldw	r23,0(r2)
   44140:	15800117 	ldw	r22,4(r2)
   44144:	9829883a 	mov	r20,r19
   44148:	9cfffe04 	addi	r19,r19,-8
   4414c:	ace7883a 	add	r19,r21,r19
   44150:	ad29883a 	add	r20,r21,r20
   44154:	dac02604 	addi	r11,sp,152
   44158:	8811883a 	mov	r8,r17
   4415c:	9c400017 	ldw	r17,0(r19)
   44160:	9f000117 	ldw	fp,4(r19)
   44164:	b809883a 	mov	r4,r23
   44168:	b00b883a 	mov	r5,r22
   4416c:	880d883a 	mov	r6,r17
   44170:	e00f883a 	mov	r7,fp
   44174:	da009815 	stw	r8,608(sp)
   44178:	dac09a15 	stw	r11,616(sp)
   4417c:	0045a380 	call	45a38 <__adddf3>
   44180:	8809883a 	mov	r4,r17
   44184:	e00b883a 	mov	r5,fp
   44188:	100d883a 	mov	r6,r2
   4418c:	180f883a 	mov	r7,r3
   44190:	1025883a 	mov	r18,r2
   44194:	1821883a 	mov	r16,r3
   44198:	00474280 	call	47428 <__subdf3>
   4419c:	b809883a 	mov	r4,r23
   441a0:	b00b883a 	mov	r5,r22
   441a4:	100d883a 	mov	r6,r2
   441a8:	180f883a 	mov	r7,r3
   441ac:	0045a380 	call	45a38 <__adddf3>
   441b0:	dac09a17 	ldw	r11,616(sp)
   441b4:	a0800015 	stw	r2,0(r20)
   441b8:	a0c00115 	stw	r3,4(r20)
   441bc:	9c800015 	stw	r18,0(r19)
   441c0:	9c000115 	stw	r16,4(r19)
   441c4:	9cfffe04 	addi	r19,r19,-8
   441c8:	a53ffe04 	addi	r20,r20,-8
   441cc:	902f883a 	mov	r23,r18
   441d0:	802d883a 	mov	r22,r16
   441d4:	da009817 	ldw	r8,608(sp)
   441d8:	9affe01e 	bne	r19,r11,4415c <__alt_data_end+0xfffd215c>
   441dc:	00800044 	movi	r2,1
   441e0:	1200590e 	bge	r2,r8,44348 <__kernel_rem_pio2+0xc94>
   441e4:	402290fa 	slli	r17,r8,3
   441e8:	da008d17 	ldw	r8,564(sp)
   441ec:	8c3ffe04 	addi	r16,r17,-8
   441f0:	da05883a 	add	r2,sp,r8
   441f4:	10802804 	addi	r2,r2,160
   441f8:	15800017 	ldw	r22,0(r2)
   441fc:	15000117 	ldw	r20,4(r2)
   44200:	ac63883a 	add	r17,r21,r17
   44204:	ac21883a 	add	r16,r21,r16
   44208:	8827883a 	mov	r19,r17
   4420c:	8811883a 	mov	r8,r17
   44210:	84400017 	ldw	r17,0(r16)
   44214:	87000117 	ldw	fp,4(r16)
   44218:	b00d883a 	mov	r6,r22
   4421c:	a00f883a 	mov	r7,r20
   44220:	8809883a 	mov	r4,r17
   44224:	e00b883a 	mov	r5,fp
   44228:	da009815 	stw	r8,608(sp)
   4422c:	0045a380 	call	45a38 <__adddf3>
   44230:	8809883a 	mov	r4,r17
   44234:	e00b883a 	mov	r5,fp
   44238:	100d883a 	mov	r6,r2
   4423c:	180f883a 	mov	r7,r3
   44240:	102f883a 	mov	r23,r2
   44244:	1825883a 	mov	r18,r3
   44248:	00474280 	call	47428 <__subdf3>
   4424c:	b00d883a 	mov	r6,r22
   44250:	a00f883a 	mov	r7,r20
   44254:	1009883a 	mov	r4,r2
   44258:	180b883a 	mov	r5,r3
   4425c:	0045a380 	call	45a38 <__adddf3>
   44260:	98800015 	stw	r2,0(r19)
   44264:	98c00115 	stw	r3,4(r19)
   44268:	85c00015 	stw	r23,0(r16)
   4426c:	84800115 	stw	r18,4(r16)
   44270:	843ffe04 	addi	r16,r16,-8
   44274:	9cfffe04 	addi	r19,r19,-8
   44278:	b82d883a 	mov	r22,r23
   4427c:	9029883a 	mov	r20,r18
   44280:	da009817 	ldw	r8,608(sp)
   44284:	ac3fe21e 	bne	r21,r16,44210 <__alt_data_end+0xfffd2210>
   44288:	4023883a 	mov	r17,r8
   4428c:	dc002a04 	addi	r16,sp,168
   44290:	0005883a 	mov	r2,zero
   44294:	0007883a 	mov	r3,zero
   44298:	89800017 	ldw	r6,0(r17)
   4429c:	89c00117 	ldw	r7,4(r17)
   442a0:	1009883a 	mov	r4,r2
   442a4:	8c7ffe04 	addi	r17,r17,-8
   442a8:	180b883a 	mov	r5,r3
   442ac:	0045a380 	call	45a38 <__adddf3>
   442b0:	8c3ff91e 	bne	r17,r16,44298 <__alt_data_end+0xfffd2298>
   442b4:	da008c17 	ldw	r8,560(sp)
   442b8:	40002726 	beq	r8,zero,44358 <__kernel_rem_pio2+0xca4>
   442bc:	d9002b17 	ldw	r4,172(sp)
   442c0:	d9402917 	ldw	r5,164(sp)
   442c4:	d9802a17 	ldw	r6,168(sp)
   442c8:	da009017 	ldw	r8,576(sp)
   442cc:	d9c02817 	ldw	r7,160(sp)
   442d0:	2960003c 	xorhi	r5,r5,32768
   442d4:	2120003c 	xorhi	r4,r4,32768
   442d8:	18e0003c 	xorhi	r3,r3,32768
   442dc:	41c00015 	stw	r7,0(r8)
   442e0:	41400115 	stw	r5,4(r8)
   442e4:	41800215 	stw	r6,8(r8)
   442e8:	41000315 	stw	r4,12(r8)
   442ec:	40800415 	stw	r2,16(r8)
   442f0:	40c00515 	stw	r3,20(r8)
   442f4:	003f2b06 	br	43fa4 <__alt_data_end+0xfffd1fa4>
   442f8:	da008c17 	ldw	r8,560(sp)
   442fc:	0005883a 	mov	r2,zero
   44300:	0007883a 	mov	r3,zero
   44304:	d9002817 	ldw	r4,160(sp)
   44308:	d9402917 	ldw	r5,164(sp)
   4430c:	403f691e 	bne	r8,zero,440b4 <__alt_data_end+0xfffd20b4>
   44310:	da009017 	ldw	r8,576(sp)
   44314:	100d883a 	mov	r6,r2
   44318:	180f883a 	mov	r7,r3
   4431c:	40800015 	stw	r2,0(r8)
   44320:	40c00115 	stw	r3,4(r8)
   44324:	00474280 	call	47428 <__subdf3>
   44328:	047f6a16 	blt	zero,r17,440d4 <__alt_data_end+0xfffd20d4>
   4432c:	da009017 	ldw	r8,576(sp)
   44330:	40800215 	stw	r2,8(r8)
   44334:	40c00315 	stw	r3,12(r8)
   44338:	003f1a06 	br	43fa4 <__alt_data_end+0xfffd1fa4>
   4433c:	da00a517 	ldw	r8,660(sp)
   44340:	008000c4 	movi	r2,3
   44344:	40bf171e 	bne	r8,r2,43fa4 <__alt_data_end+0xfffd1fa4>
   44348:	da008c17 	ldw	r8,560(sp)
   4434c:	0005883a 	mov	r2,zero
   44350:	0007883a 	mov	r3,zero
   44354:	403fd91e 	bne	r8,zero,442bc <__alt_data_end+0xfffd22bc>
   44358:	da009017 	ldw	r8,576(sp)
   4435c:	d9802817 	ldw	r6,160(sp)
   44360:	d9402a17 	ldw	r5,168(sp)
   44364:	d9002b17 	ldw	r4,172(sp)
   44368:	41800015 	stw	r6,0(r8)
   4436c:	d9802917 	ldw	r6,164(sp)
   44370:	41400215 	stw	r5,8(r8)
   44374:	41000315 	stw	r4,12(r8)
   44378:	41800115 	stw	r6,4(r8)
   4437c:	40800415 	stw	r2,16(r8)
   44380:	40c00515 	stw	r3,20(r8)
   44384:	003f0706 	br	43fa4 <__alt_data_end+0xfffd1fa4>
   44388:	a00d883a 	mov	r6,r20
   4438c:	580f883a 	mov	r7,r11
   44390:	0009883a 	mov	r4,zero
   44394:	014ffc34 	movhi	r5,16368
   44398:	00474280 	call	47428 <__subdf3>
   4439c:	1029883a 	mov	r20,r2
   443a0:	1817883a 	mov	r11,r3
   443a4:	04800084 	movi	r18,2
   443a8:	003dc706 	br	43ac8 <__alt_data_end+0xfffd1ac8>
   443ac:	840d883a 	add	r6,r16,r16
   443b0:	318d883a 	add	r6,r6,r6
   443b4:	d9a3883a 	add	r17,sp,r6
   443b8:	a009883a 	mov	r4,r20
   443bc:	b80b883a 	mov	r5,r23
   443c0:	8c407804 	addi	r17,r17,480
   443c4:	0047cf80 	call	47cf8 <__fixdfsi>
   443c8:	88800015 	stw	r2,0(r17)
   443cc:	8023883a 	mov	r17,r16
   443d0:	003e9006 	br	43e14 <__alt_data_end+0xfffd1e14>
   443d4:	d8009215 	stw	zero,584(sp)
   443d8:	003cd406 	br	4372c <__alt_data_end+0xfffd172c>

000443dc <__kernel_sin>:
   443dc:	00a00034 	movhi	r2,32768
   443e0:	defff404 	addi	sp,sp,-48
   443e4:	10bfffc4 	addi	r2,r2,-1
   443e8:	00cf9034 	movhi	r3,15936
   443ec:	ddc00915 	stw	r23,36(sp)
   443f0:	dd800815 	stw	r22,32(sp)
   443f4:	dc400315 	stw	r17,12(sp)
   443f8:	dc000215 	stw	r16,8(sp)
   443fc:	dfc00b15 	stw	ra,44(sp)
   44400:	df000a15 	stw	fp,40(sp)
   44404:	dd400715 	stw	r21,28(sp)
   44408:	dd000615 	stw	r20,24(sp)
   4440c:	dcc00515 	stw	r19,20(sp)
   44410:	dc800415 	stw	r18,16(sp)
   44414:	2884703a 	and	r2,r5,r2
   44418:	18ffffc4 	addi	r3,r3,-1
   4441c:	2821883a 	mov	r16,r5
   44420:	2023883a 	mov	r17,r4
   44424:	302f883a 	mov	r23,r6
   44428:	382d883a 	mov	r22,r7
   4442c:	18800216 	blt	r3,r2,44438 <__kernel_sin+0x5c>
   44430:	0047cf80 	call	47cf8 <__fixdfsi>
   44434:	10009826 	beq	r2,zero,44698 <__kernel_sin+0x2bc>
   44438:	8809883a 	mov	r4,r17
   4443c:	800b883a 	mov	r5,r16
   44440:	880d883a 	mov	r6,r17
   44444:	800f883a 	mov	r7,r16
   44448:	0046d040 	call	46d04 <__muldf3>
   4444c:	1009883a 	mov	r4,r2
   44450:	180b883a 	mov	r5,r3
   44454:	880d883a 	mov	r6,r17
   44458:	800f883a 	mov	r7,r16
   4445c:	1027883a 	mov	r19,r2
   44460:	1825883a 	mov	r18,r3
   44464:	0046d040 	call	46d04 <__muldf3>
   44468:	0196b434 	movhi	r6,23248
   4446c:	01cf79b4 	movhi	r7,15846
   44470:	9809883a 	mov	r4,r19
   44474:	900b883a 	mov	r5,r18
   44478:	31b55f04 	addi	r6,r6,-10884
   4447c:	39f64e84 	addi	r7,r7,-9926
   44480:	102b883a 	mov	r21,r2
   44484:	1829883a 	mov	r20,r3
   44488:	0046d040 	call	46d04 <__muldf3>
   4448c:	01a28b34 	movhi	r6,35372
   44490:	01cf96f4 	movhi	r7,15963
   44494:	1009883a 	mov	r4,r2
   44498:	180b883a 	mov	r5,r3
   4449c:	31a73ac4 	addi	r6,r6,-25365
   444a0:	39f97984 	addi	r7,r7,-6682
   444a4:	00474280 	call	47428 <__subdf3>
   444a8:	1009883a 	mov	r4,r2
   444ac:	180b883a 	mov	r5,r3
   444b0:	980d883a 	mov	r6,r19
   444b4:	900f883a 	mov	r7,r18
   444b8:	0046d040 	call	46d04 <__muldf3>
   444bc:	0195ecb4 	movhi	r6,22450
   444c0:	01cfb1f4 	movhi	r7,16071
   444c4:	1009883a 	mov	r4,r2
   444c8:	180b883a 	mov	r5,r3
   444cc:	31bf9f44 	addi	r6,r6,-387
   444d0:	39c778c4 	addi	r7,r7,7651
   444d4:	0045a380 	call	45a38 <__adddf3>
   444d8:	1009883a 	mov	r4,r2
   444dc:	180b883a 	mov	r5,r3
   444e0:	980d883a 	mov	r6,r19
   444e4:	900f883a 	mov	r7,r18
   444e8:	0046d040 	call	46d04 <__muldf3>
   444ec:	01867074 	movhi	r6,6593
   444f0:	01cfcab4 	movhi	r7,16170
   444f4:	1009883a 	mov	r4,r2
   444f8:	180b883a 	mov	r5,r3
   444fc:	31987544 	addi	r6,r6,25045
   44500:	39c06804 	addi	r7,r7,416
   44504:	00474280 	call	47428 <__subdf3>
   44508:	1009883a 	mov	r4,r2
   4450c:	180b883a 	mov	r5,r3
   44510:	980d883a 	mov	r6,r19
   44514:	900f883a 	mov	r7,r18
   44518:	0046d040 	call	46d04 <__muldf3>
   4451c:	01844474 	movhi	r6,4369
   44520:	01cfe074 	movhi	r7,16257
   44524:	1009883a 	mov	r4,r2
   44528:	180b883a 	mov	r5,r3
   4452c:	31be2984 	addi	r6,r6,-1882
   44530:	39c44444 	addi	r7,r7,4369
   44534:	0045a380 	call	45a38 <__adddf3>
   44538:	d9000c17 	ldw	r4,48(sp)
   4453c:	1839883a 	mov	fp,r3
   44540:	20003e26 	beq	r4,zero,4463c <__kernel_sin+0x260>
   44544:	b809883a 	mov	r4,r23
   44548:	b00b883a 	mov	r5,r22
   4454c:	000d883a 	mov	r6,zero
   44550:	01cff834 	movhi	r7,16352
   44554:	d8800015 	stw	r2,0(sp)
   44558:	0046d040 	call	46d04 <__muldf3>
   4455c:	da000017 	ldw	r8,0(sp)
   44560:	a809883a 	mov	r4,r21
   44564:	a00b883a 	mov	r5,r20
   44568:	400d883a 	mov	r6,r8
   4456c:	e00f883a 	mov	r7,fp
   44570:	d8c00115 	stw	r3,4(sp)
   44574:	d8800015 	stw	r2,0(sp)
   44578:	0046d040 	call	46d04 <__muldf3>
   4457c:	da800017 	ldw	r10,0(sp)
   44580:	da400117 	ldw	r9,4(sp)
   44584:	100d883a 	mov	r6,r2
   44588:	5009883a 	mov	r4,r10
   4458c:	480b883a 	mov	r5,r9
   44590:	180f883a 	mov	r7,r3
   44594:	00474280 	call	47428 <__subdf3>
   44598:	980d883a 	mov	r6,r19
   4459c:	900f883a 	mov	r7,r18
   445a0:	1009883a 	mov	r4,r2
   445a4:	180b883a 	mov	r5,r3
   445a8:	0046d040 	call	46d04 <__muldf3>
   445ac:	1009883a 	mov	r4,r2
   445b0:	180b883a 	mov	r5,r3
   445b4:	b80d883a 	mov	r6,r23
   445b8:	b00f883a 	mov	r7,r22
   445bc:	00474280 	call	47428 <__subdf3>
   445c0:	01955574 	movhi	r6,21845
   445c4:	01cff174 	movhi	r7,16325
   445c8:	a809883a 	mov	r4,r21
   445cc:	a00b883a 	mov	r5,r20
   445d0:	31955244 	addi	r6,r6,21833
   445d4:	39d55544 	addi	r7,r7,21845
   445d8:	1027883a 	mov	r19,r2
   445dc:	1825883a 	mov	r18,r3
   445e0:	0046d040 	call	46d04 <__muldf3>
   445e4:	9809883a 	mov	r4,r19
   445e8:	900b883a 	mov	r5,r18
   445ec:	100d883a 	mov	r6,r2
   445f0:	180f883a 	mov	r7,r3
   445f4:	0045a380 	call	45a38 <__adddf3>
   445f8:	8809883a 	mov	r4,r17
   445fc:	800b883a 	mov	r5,r16
   44600:	100d883a 	mov	r6,r2
   44604:	180f883a 	mov	r7,r3
   44608:	00474280 	call	47428 <__subdf3>
   4460c:	dfc00b17 	ldw	ra,44(sp)
   44610:	df000a17 	ldw	fp,40(sp)
   44614:	ddc00917 	ldw	r23,36(sp)
   44618:	dd800817 	ldw	r22,32(sp)
   4461c:	dd400717 	ldw	r21,28(sp)
   44620:	dd000617 	ldw	r20,24(sp)
   44624:	dcc00517 	ldw	r19,20(sp)
   44628:	dc800417 	ldw	r18,16(sp)
   4462c:	dc400317 	ldw	r17,12(sp)
   44630:	dc000217 	ldw	r16,8(sp)
   44634:	dec00c04 	addi	sp,sp,48
   44638:	f800283a 	ret
   4463c:	9809883a 	mov	r4,r19
   44640:	900b883a 	mov	r5,r18
   44644:	100d883a 	mov	r6,r2
   44648:	180f883a 	mov	r7,r3
   4464c:	0046d040 	call	46d04 <__muldf3>
   44650:	01955574 	movhi	r6,21845
   44654:	01cff174 	movhi	r7,16325
   44658:	1009883a 	mov	r4,r2
   4465c:	180b883a 	mov	r5,r3
   44660:	31955244 	addi	r6,r6,21833
   44664:	39d55544 	addi	r7,r7,21845
   44668:	00474280 	call	47428 <__subdf3>
   4466c:	a80d883a 	mov	r6,r21
   44670:	a00f883a 	mov	r7,r20
   44674:	1009883a 	mov	r4,r2
   44678:	180b883a 	mov	r5,r3
   4467c:	0046d040 	call	46d04 <__muldf3>
   44680:	1009883a 	mov	r4,r2
   44684:	180b883a 	mov	r5,r3
   44688:	880d883a 	mov	r6,r17
   4468c:	800f883a 	mov	r7,r16
   44690:	0045a380 	call	45a38 <__adddf3>
   44694:	003fdd06 	br	4460c <__alt_data_end+0xfffd260c>
   44698:	8805883a 	mov	r2,r17
   4469c:	8007883a 	mov	r3,r16
   446a0:	003fda06 	br	4460c <__alt_data_end+0xfffd260c>

000446a4 <fabs>:
   446a4:	00e00034 	movhi	r3,32768
   446a8:	18ffffc4 	addi	r3,r3,-1
   446ac:	2005883a 	mov	r2,r4
   446b0:	28c6703a 	and	r3,r5,r3
   446b4:	f800283a 	ret

000446b8 <floor>:
   446b8:	defff904 	addi	sp,sp,-28
   446bc:	dc800215 	stw	r18,8(sp)
   446c0:	2825d53a 	srai	r18,r5,20
   446c4:	dd000415 	stw	r20,16(sp)
   446c8:	dcc00315 	stw	r19,12(sp)
   446cc:	9481ffcc 	andi	r18,r18,2047
   446d0:	dc400115 	stw	r17,4(sp)
   446d4:	dc000015 	stw	r16,0(sp)
   446d8:	dfc00615 	stw	ra,24(sp)
   446dc:	dd400515 	stw	r21,20(sp)
   446e0:	94ff0044 	addi	r19,r18,-1023
   446e4:	018004c4 	movi	r6,19
   446e8:	2821883a 	mov	r16,r5
   446ec:	2005883a 	mov	r2,r4
   446f0:	280f883a 	mov	r7,r5
   446f4:	2829883a 	mov	r20,r5
   446f8:	2023883a 	mov	r17,r4
   446fc:	34c01916 	blt	r6,r19,44764 <floor+0xac>
   44700:	98003d16 	blt	r19,zero,447f8 <floor+0x140>
   44704:	04800434 	movhi	r18,16
   44708:	94bfffc4 	addi	r18,r18,-1
   4470c:	94e5d83a 	sra	r18,r18,r19
   44710:	914c703a 	and	r6,r18,r5
   44714:	310cb03a 	or	r6,r6,r4
   44718:	30001626 	beq	r6,zero,44774 <floor+0xbc>
   4471c:	01a20034 	movhi	r6,34816
   44720:	01df8e34 	movhi	r7,32312
   44724:	319d6704 	addi	r6,r6,30108
   44728:	39f90f04 	addi	r7,r7,-7108
   4472c:	0045a380 	call	45a38 <__adddf3>
   44730:	1009883a 	mov	r4,r2
   44734:	180b883a 	mov	r5,r3
   44738:	000d883a 	mov	r6,zero
   4473c:	000f883a 	mov	r7,zero
   44740:	0046c240 	call	46c24 <__gedf2>
   44744:	0080040e 	bge	zero,r2,44758 <floor+0xa0>
   44748:	80003d16 	blt	r16,zero,44840 <floor+0x188>
   4474c:	04a0303a 	nor	r16,zero,r18
   44750:	a420703a 	and	r16,r20,r16
   44754:	0023883a 	mov	r17,zero
   44758:	8805883a 	mov	r2,r17
   4475c:	8007883a 	mov	r3,r16
   44760:	00000506 	br	44778 <floor+0xc0>
   44764:	01800cc4 	movi	r6,51
   44768:	34c00c0e 	bge	r6,r19,4479c <floor+0xe4>
   4476c:	01810004 	movi	r6,1024
   44770:	99803026 	beq	r19,r6,44834 <floor+0x17c>
   44774:	3807883a 	mov	r3,r7
   44778:	dfc00617 	ldw	ra,24(sp)
   4477c:	dd400517 	ldw	r21,20(sp)
   44780:	dd000417 	ldw	r20,16(sp)
   44784:	dcc00317 	ldw	r19,12(sp)
   44788:	dc800217 	ldw	r18,8(sp)
   4478c:	dc400117 	ldw	r17,4(sp)
   44790:	dc000017 	ldw	r16,0(sp)
   44794:	dec00704 	addi	sp,sp,28
   44798:	f800283a 	ret
   4479c:	01bfffc4 	movi	r6,-1
   447a0:	957efb44 	addi	r21,r18,-1043
   447a4:	356ad83a 	srl	r21,r6,r21
   447a8:	a90c703a 	and	r6,r21,r4
   447ac:	303ff126 	beq	r6,zero,44774 <__alt_data_end+0xfffd2774>
   447b0:	01a20034 	movhi	r6,34816
   447b4:	01df8e34 	movhi	r7,32312
   447b8:	319d6704 	addi	r6,r6,30108
   447bc:	39f90f04 	addi	r7,r7,-7108
   447c0:	0045a380 	call	45a38 <__adddf3>
   447c4:	1009883a 	mov	r4,r2
   447c8:	180b883a 	mov	r5,r3
   447cc:	000d883a 	mov	r6,zero
   447d0:	000f883a 	mov	r7,zero
   447d4:	0046c240 	call	46c24 <__gedf2>
   447d8:	00bfdf0e 	bge	zero,r2,44758 <__alt_data_end+0xfffd2758>
   447dc:	80001c16 	blt	r16,zero,44850 <floor+0x198>
   447e0:	056a303a 	nor	r21,zero,r21
   447e4:	a021883a 	mov	r16,r20
   447e8:	8d62703a 	and	r17,r17,r21
   447ec:	8805883a 	mov	r2,r17
   447f0:	8007883a 	mov	r3,r16
   447f4:	003fe006 	br	44778 <__alt_data_end+0xfffd2778>
   447f8:	01a20034 	movhi	r6,34816
   447fc:	01df8e34 	movhi	r7,32312
   44800:	319d6704 	addi	r6,r6,30108
   44804:	39f90f04 	addi	r7,r7,-7108
   44808:	0045a380 	call	45a38 <__adddf3>
   4480c:	1009883a 	mov	r4,r2
   44810:	180b883a 	mov	r5,r3
   44814:	000d883a 	mov	r6,zero
   44818:	000f883a 	mov	r7,zero
   4481c:	0046c240 	call	46c24 <__gedf2>
   44820:	00bfcd0e 	bge	zero,r2,44758 <__alt_data_end+0xfffd2758>
   44824:	80001516 	blt	r16,zero,4487c <floor+0x1c4>
   44828:	0023883a 	mov	r17,zero
   4482c:	0021883a 	mov	r16,zero
   44830:	003fc906 	br	44758 <__alt_data_end+0xfffd2758>
   44834:	200d883a 	mov	r6,r4
   44838:	0045a380 	call	45a38 <__adddf3>
   4483c:	003fce06 	br	44778 <__alt_data_end+0xfffd2778>
   44840:	00800434 	movhi	r2,16
   44844:	14e7d83a 	sra	r19,r2,r19
   44848:	84e9883a 	add	r20,r16,r19
   4484c:	003fbf06 	br	4474c <__alt_data_end+0xfffd274c>
   44850:	00800504 	movi	r2,20
   44854:	98801326 	beq	r19,r2,448a4 <floor+0x1ec>
   44858:	00810cc4 	movi	r2,1075
   4485c:	14a5c83a 	sub	r18,r2,r18
   44860:	00800044 	movi	r2,1
   44864:	1484983a 	sll	r2,r2,r18
   44868:	1445883a 	add	r2,r2,r17
   4486c:	14400b2e 	bgeu	r2,r17,4489c <floor+0x1e4>
   44870:	85000044 	addi	r20,r16,1
   44874:	1023883a 	mov	r17,r2
   44878:	003fd906 	br	447e0 <__alt_data_end+0xfffd27e0>
   4487c:	00a00034 	movhi	r2,32768
   44880:	10bfffc4 	addi	r2,r2,-1
   44884:	8084703a 	and	r2,r16,r2
   44888:	1462b03a 	or	r17,r2,r17
   4488c:	883fb226 	beq	r17,zero,44758 <__alt_data_end+0xfffd2758>
   44890:	0023883a 	mov	r17,zero
   44894:	042ffc34 	movhi	r16,49136
   44898:	003faf06 	br	44758 <__alt_data_end+0xfffd2758>
   4489c:	1023883a 	mov	r17,r2
   448a0:	003fcf06 	br	447e0 <__alt_data_end+0xfffd27e0>
   448a4:	85000044 	addi	r20,r16,1
   448a8:	003fcd06 	br	447e0 <__alt_data_end+0xfffd27e0>

000448ac <scalbn>:
   448ac:	2a1ffc2c 	andhi	r8,r5,32752
   448b0:	4011d53a 	srai	r8,r8,20
   448b4:	defffe04 	addi	sp,sp,-8
   448b8:	dc000015 	stw	r16,0(sp)
   448bc:	dfc00115 	stw	ra,4(sp)
   448c0:	280f883a 	mov	r7,r5
   448c4:	2015883a 	mov	r10,r4
   448c8:	3021883a 	mov	r16,r6
   448cc:	4000251e 	bne	r8,zero,44964 <scalbn+0xb8>
   448d0:	00a00034 	movhi	r2,32768
   448d4:	10bfffc4 	addi	r2,r2,-1
   448d8:	2884703a 	and	r2,r5,r2
   448dc:	1104b03a 	or	r2,r2,r4
   448e0:	10003126 	beq	r2,zero,449a8 <scalbn+0xfc>
   448e4:	01d0d434 	movhi	r7,17232
   448e8:	000d883a 	mov	r6,zero
   448ec:	0046d040 	call	46d04 <__muldf3>
   448f0:	013ffff4 	movhi	r4,65535
   448f4:	210f2c04 	addi	r4,r4,15536
   448f8:	1015883a 	mov	r10,r2
   448fc:	180f883a 	mov	r7,r3
   44900:	81002f16 	blt	r16,r4,449c0 <scalbn+0x114>
   44904:	1a5ffc2c 	andhi	r9,r3,32752
   44908:	4813d53a 	srai	r9,r9,20
   4490c:	0081ff84 	movi	r2,2046
   44910:	180d883a 	mov	r6,r3
   44914:	4a3ff284 	addi	r8,r9,-54
   44918:	4411883a 	add	r8,r8,r16
   4491c:	1200170e 	bge	r2,r8,4497c <scalbn+0xd0>
   44920:	01220034 	movhi	r4,34816
   44924:	015f8e34 	movhi	r5,32312
   44928:	500d883a 	mov	r6,r10
   4492c:	211d6704 	addi	r4,r4,30108
   44930:	29790f04 	addi	r5,r5,-7108
   44934:	0044a780 	call	44a78 <copysign>
   44938:	01a20034 	movhi	r6,34816
   4493c:	01df8e34 	movhi	r7,32312
   44940:	1009883a 	mov	r4,r2
   44944:	180b883a 	mov	r5,r3
   44948:	319d6704 	addi	r6,r6,30108
   4494c:	39f90f04 	addi	r7,r7,-7108
   44950:	0046d040 	call	46d04 <__muldf3>
   44954:	dfc00117 	ldw	ra,4(sp)
   44958:	dc000017 	ldw	r16,0(sp)
   4495c:	dec00204 	addi	sp,sp,8
   44960:	f800283a 	ret
   44964:	0081ffc4 	movi	r2,2047
   44968:	280d883a 	mov	r6,r5
   4496c:	40803126 	beq	r8,r2,44a34 <scalbn+0x188>
   44970:	4411883a 	add	r8,r8,r16
   44974:	0081ff84 	movi	r2,2046
   44978:	123fe916 	blt	r2,r8,44920 <__alt_data_end+0xfffd2920>
   4497c:	02001b0e 	bge	zero,r8,449ec <scalbn+0x140>
   44980:	4010953a 	slli	r8,r8,20
   44984:	00e00434 	movhi	r3,32784
   44988:	18ffffc4 	addi	r3,r3,-1
   4498c:	30ce703a 	and	r7,r6,r3
   44990:	5005883a 	mov	r2,r10
   44994:	41c6b03a 	or	r3,r8,r7
   44998:	dfc00117 	ldw	ra,4(sp)
   4499c:	dc000017 	ldw	r16,0(sp)
   449a0:	dec00204 	addi	sp,sp,8
   449a4:	f800283a 	ret
   449a8:	2005883a 	mov	r2,r4
   449ac:	2807883a 	mov	r3,r5
   449b0:	dfc00117 	ldw	ra,4(sp)
   449b4:	dc000017 	ldw	r16,0(sp)
   449b8:	dec00204 	addi	sp,sp,8
   449bc:	f800283a 	ret
   449c0:	01b0be74 	movhi	r6,49913
   449c4:	01c06974 	movhi	r7,421
   449c8:	31bcd644 	addi	r6,r6,-3239
   449cc:	39db87c4 	addi	r7,r7,28191
   449d0:	1009883a 	mov	r4,r2
   449d4:	180b883a 	mov	r5,r3
   449d8:	0046d040 	call	46d04 <__muldf3>
   449dc:	dfc00117 	ldw	ra,4(sp)
   449e0:	dc000017 	ldw	r16,0(sp)
   449e4:	dec00204 	addi	sp,sp,8
   449e8:	f800283a 	ret
   449ec:	00bff2c4 	movi	r2,-53
   449f0:	4080160e 	bge	r8,r2,44a4c <scalbn+0x1a0>
   449f4:	00b0d414 	movui	r2,50000
   449f8:	143fc916 	blt	r2,r16,44920 <__alt_data_end+0xfffd2920>
   449fc:	0130be74 	movhi	r4,49913
   44a00:	01406974 	movhi	r5,421
   44a04:	500d883a 	mov	r6,r10
   44a08:	213cd644 	addi	r4,r4,-3239
   44a0c:	295b87c4 	addi	r5,r5,28191
   44a10:	0044a780 	call	44a78 <copysign>
   44a14:	01b0be74 	movhi	r6,49913
   44a18:	01c06974 	movhi	r7,421
   44a1c:	1009883a 	mov	r4,r2
   44a20:	180b883a 	mov	r5,r3
   44a24:	31bcd644 	addi	r6,r6,-3239
   44a28:	39db87c4 	addi	r7,r7,28191
   44a2c:	0046d040 	call	46d04 <__muldf3>
   44a30:	003fd906 	br	44998 <__alt_data_end+0xfffd2998>
   44a34:	200d883a 	mov	r6,r4
   44a38:	0045a380 	call	45a38 <__adddf3>
   44a3c:	dfc00117 	ldw	ra,4(sp)
   44a40:	dc000017 	ldw	r16,0(sp)
   44a44:	dec00204 	addi	sp,sp,8
   44a48:	f800283a 	ret
   44a4c:	42000d84 	addi	r8,r8,54
   44a50:	4012953a 	slli	r9,r8,20
   44a54:	01e00434 	movhi	r7,32784
   44a58:	39ffffc4 	addi	r7,r7,-1
   44a5c:	31ca703a 	and	r5,r6,r7
   44a60:	5009883a 	mov	r4,r10
   44a64:	494ab03a 	or	r5,r9,r5
   44a68:	000d883a 	mov	r6,zero
   44a6c:	01cf2434 	movhi	r7,15504
   44a70:	0046d040 	call	46d04 <__muldf3>
   44a74:	003fc806 	br	44998 <__alt_data_end+0xfffd2998>

00044a78 <copysign>:
   44a78:	2005883a 	mov	r2,r4
   44a7c:	01200034 	movhi	r4,32768
   44a80:	213fffc4 	addi	r4,r4,-1
   44a84:	38e0002c 	andhi	r3,r7,32768
   44a88:	290a703a 	and	r5,r5,r4
   44a8c:	1946b03a 	or	r3,r3,r5
   44a90:	f800283a 	ret

00044a94 <udivmodsi4>:
   44a94:	2900182e 	bgeu	r5,r4,44af8 <udivmodsi4+0x64>
   44a98:	28001716 	blt	r5,zero,44af8 <udivmodsi4+0x64>
   44a9c:	00800804 	movi	r2,32
   44aa0:	00c00044 	movi	r3,1
   44aa4:	00000206 	br	44ab0 <udivmodsi4+0x1c>
   44aa8:	10001126 	beq	r2,zero,44af0 <udivmodsi4+0x5c>
   44aac:	28000516 	blt	r5,zero,44ac4 <udivmodsi4+0x30>
   44ab0:	294b883a 	add	r5,r5,r5
   44ab4:	10bfffc4 	addi	r2,r2,-1
   44ab8:	18c7883a 	add	r3,r3,r3
   44abc:	293ffa36 	bltu	r5,r4,44aa8 <__alt_data_end+0xfffd2aa8>
   44ac0:	18000b26 	beq	r3,zero,44af0 <udivmodsi4+0x5c>
   44ac4:	0005883a 	mov	r2,zero
   44ac8:	21400236 	bltu	r4,r5,44ad4 <udivmodsi4+0x40>
   44acc:	2149c83a 	sub	r4,r4,r5
   44ad0:	10c4b03a 	or	r2,r2,r3
   44ad4:	1806d07a 	srli	r3,r3,1
   44ad8:	280ad07a 	srli	r5,r5,1
   44adc:	183ffa1e 	bne	r3,zero,44ac8 <__alt_data_end+0xfffd2ac8>
   44ae0:	3000011e 	bne	r6,zero,44ae8 <udivmodsi4+0x54>
   44ae4:	f800283a 	ret
   44ae8:	2005883a 	mov	r2,r4
   44aec:	f800283a 	ret
   44af0:	0005883a 	mov	r2,zero
   44af4:	003ffa06 	br	44ae0 <__alt_data_end+0xfffd2ae0>
   44af8:	00c00044 	movi	r3,1
   44afc:	003ff106 	br	44ac4 <__alt_data_end+0xfffd2ac4>

00044b00 <__divsi3>:
   44b00:	defffe04 	addi	sp,sp,-8
   44b04:	dfc00115 	stw	ra,4(sp)
   44b08:	dc000015 	stw	r16,0(sp)
   44b0c:	20000b16 	blt	r4,zero,44b3c <__divsi3+0x3c>
   44b10:	0021883a 	mov	r16,zero
   44b14:	28000c16 	blt	r5,zero,44b48 <__divsi3+0x48>
   44b18:	000d883a 	mov	r6,zero
   44b1c:	0044a940 	call	44a94 <udivmodsi4>
   44b20:	0407c83a 	sub	r3,zero,r16
   44b24:	1884f03a 	xor	r2,r3,r2
   44b28:	1405883a 	add	r2,r2,r16
   44b2c:	dfc00117 	ldw	ra,4(sp)
   44b30:	dc000017 	ldw	r16,0(sp)
   44b34:	dec00204 	addi	sp,sp,8
   44b38:	f800283a 	ret
   44b3c:	0109c83a 	sub	r4,zero,r4
   44b40:	04000044 	movi	r16,1
   44b44:	283ff40e 	bge	r5,zero,44b18 <__alt_data_end+0xfffd2b18>
   44b48:	014bc83a 	sub	r5,zero,r5
   44b4c:	8400005c 	xori	r16,r16,1
   44b50:	003ff106 	br	44b18 <__alt_data_end+0xfffd2b18>

00044b54 <__modsi3>:
   44b54:	defffd04 	addi	sp,sp,-12
   44b58:	dfc00215 	stw	ra,8(sp)
   44b5c:	dc400115 	stw	r17,4(sp)
   44b60:	dc000015 	stw	r16,0(sp)
   44b64:	20000c16 	blt	r4,zero,44b98 <__modsi3+0x44>
   44b68:	0023883a 	mov	r17,zero
   44b6c:	0021883a 	mov	r16,zero
   44b70:	28000d16 	blt	r5,zero,44ba8 <__modsi3+0x54>
   44b74:	01800044 	movi	r6,1
   44b78:	0044a940 	call	44a94 <udivmodsi4>
   44b7c:	1404f03a 	xor	r2,r2,r16
   44b80:	8885883a 	add	r2,r17,r2
   44b84:	dfc00217 	ldw	ra,8(sp)
   44b88:	dc400117 	ldw	r17,4(sp)
   44b8c:	dc000017 	ldw	r16,0(sp)
   44b90:	dec00304 	addi	sp,sp,12
   44b94:	f800283a 	ret
   44b98:	0109c83a 	sub	r4,zero,r4
   44b9c:	04400044 	movi	r17,1
   44ba0:	043fffc4 	movi	r16,-1
   44ba4:	283ff30e 	bge	r5,zero,44b74 <__alt_data_end+0xfffd2b74>
   44ba8:	014bc83a 	sub	r5,zero,r5
   44bac:	003ff106 	br	44b74 <__alt_data_end+0xfffd2b74>

00044bb0 <__udivsi3>:
   44bb0:	000d883a 	mov	r6,zero
   44bb4:	0044a941 	jmpi	44a94 <udivmodsi4>

00044bb8 <__umodsi3>:
   44bb8:	01800044 	movi	r6,1
   44bbc:	0044a941 	jmpi	44a94 <udivmodsi4>

00044bc0 <__addsf3>:
   44bc0:	defffc04 	addi	sp,sp,-16
   44bc4:	2004d7fa 	srli	r2,r4,31
   44bc8:	280ed5fa 	srli	r7,r5,23
   44bcc:	dc000015 	stw	r16,0(sp)
   44bd0:	01802034 	movhi	r6,128
   44bd4:	2020d5fa 	srli	r16,r4,23
   44bd8:	31bfffc4 	addi	r6,r6,-1
   44bdc:	2810d7fa 	srli	r8,r5,31
   44be0:	3108703a 	and	r4,r6,r4
   44be4:	dc800215 	stw	r18,8(sp)
   44be8:	314c703a 	and	r6,r6,r5
   44bec:	84003fcc 	andi	r16,r16,255
   44bf0:	200690fa 	slli	r3,r4,3
   44bf4:	dfc00315 	stw	ra,12(sp)
   44bf8:	39003fcc 	andi	r4,r7,255
   44bfc:	dc400115 	stw	r17,4(sp)
   44c00:	14803fcc 	andi	r18,r2,255
   44c04:	300c90fa 	slli	r6,r6,3
   44c08:	810bc83a 	sub	r5,r16,r4
   44c0c:	92004826 	beq	r18,r8,44d30 <__addsf3+0x170>
   44c10:	01406c0e 	bge	zero,r5,44dc4 <__addsf3+0x204>
   44c14:	20001e1e 	bne	r4,zero,44c90 <__addsf3+0xd0>
   44c18:	3000611e 	bne	r6,zero,44da0 <__addsf3+0x1e0>
   44c1c:	188001cc 	andi	r2,r3,7
   44c20:	10000426 	beq	r2,zero,44c34 <__addsf3+0x74>
   44c24:	190003cc 	andi	r4,r3,15
   44c28:	00800104 	movi	r2,4
   44c2c:	20800126 	beq	r4,r2,44c34 <__addsf3+0x74>
   44c30:	18c00104 	addi	r3,r3,4
   44c34:	1901002c 	andhi	r4,r3,1024
   44c38:	9005883a 	mov	r2,r18
   44c3c:	20003426 	beq	r4,zero,44d10 <__addsf3+0x150>
   44c40:	81400044 	addi	r5,r16,1
   44c44:	01003fc4 	movi	r4,255
   44c48:	29006926 	beq	r5,r4,44df0 <__addsf3+0x230>
   44c4c:	180691ba 	slli	r3,r3,6
   44c50:	1808d27a 	srli	r4,r3,9
   44c54:	29403fcc 	andi	r5,r5,255
   44c58:	280a95fa 	slli	r5,r5,23
   44c5c:	10803fcc 	andi	r2,r2,255
   44c60:	00c02034 	movhi	r3,128
   44c64:	100497fa 	slli	r2,r2,31
   44c68:	18ffffc4 	addi	r3,r3,-1
   44c6c:	20c6703a 	and	r3,r4,r3
   44c70:	1946b03a 	or	r3,r3,r5
   44c74:	1884b03a 	or	r2,r3,r2
   44c78:	dfc00317 	ldw	ra,12(sp)
   44c7c:	dc800217 	ldw	r18,8(sp)
   44c80:	dc400117 	ldw	r17,4(sp)
   44c84:	dc000017 	ldw	r16,0(sp)
   44c88:	dec00404 	addi	sp,sp,16
   44c8c:	f800283a 	ret
   44c90:	00803fc4 	movi	r2,255
   44c94:	80bfe126 	beq	r16,r2,44c1c <__alt_data_end+0xfffd2c1c>
   44c98:	31810034 	orhi	r6,r6,1024
   44c9c:	008006c4 	movi	r2,27
   44ca0:	11405b0e 	bge	r2,r5,44e10 <__addsf3+0x250>
   44ca4:	01400044 	movi	r5,1
   44ca8:	1947c83a 	sub	r3,r3,r5
   44cac:	1881002c 	andhi	r2,r3,1024
   44cb0:	10001426 	beq	r2,zero,44d04 <__addsf3+0x144>
   44cb4:	04410034 	movhi	r17,1024
   44cb8:	8c7fffc4 	addi	r17,r17,-1
   44cbc:	1c62703a 	and	r17,r3,r17
   44cc0:	8809883a 	mov	r4,r17
   44cc4:	0047f600 	call	47f60 <__clzsi2>
   44cc8:	10bffec4 	addi	r2,r2,-5
   44ccc:	88a2983a 	sll	r17,r17,r2
   44cd0:	14004a16 	blt	r2,r16,44dfc <__addsf3+0x23c>
   44cd4:	140bc83a 	sub	r5,r2,r16
   44cd8:	00c007c4 	movi	r3,31
   44cdc:	1947c83a 	sub	r3,r3,r5
   44ce0:	88c6983a 	sll	r3,r17,r3
   44ce4:	29400044 	addi	r5,r5,1
   44ce8:	8962d83a 	srl	r17,r17,r5
   44cec:	1806c03a 	cmpne	r3,r3,zero
   44cf0:	0021883a 	mov	r16,zero
   44cf4:	1c46b03a 	or	r3,r3,r17
   44cf8:	003fc806 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44cfc:	1000e526 	beq	r2,zero,45094 <__addsf3+0x4d4>
   44d00:	1007883a 	mov	r3,r2
   44d04:	188001cc 	andi	r2,r3,7
   44d08:	103fc61e 	bne	r2,zero,44c24 <__alt_data_end+0xfffd2c24>
   44d0c:	9005883a 	mov	r2,r18
   44d10:	01003fc4 	movi	r4,255
   44d14:	1806d0fa 	srli	r3,r3,3
   44d18:	81001a26 	beq	r16,r4,44d84 <__addsf3+0x1c4>
   44d1c:	01002034 	movhi	r4,128
   44d20:	213fffc4 	addi	r4,r4,-1
   44d24:	800b883a 	mov	r5,r16
   44d28:	1908703a 	and	r4,r3,r4
   44d2c:	003fc906 	br	44c54 <__alt_data_end+0xfffd2c54>
   44d30:	01403e0e 	bge	zero,r5,44e2c <__addsf3+0x26c>
   44d34:	20001e26 	beq	r4,zero,44db0 <__addsf3+0x1f0>
   44d38:	01003fc4 	movi	r4,255
   44d3c:	813fb726 	beq	r16,r4,44c1c <__alt_data_end+0xfffd2c1c>
   44d40:	31810034 	orhi	r6,r6,1024
   44d44:	010006c4 	movi	r4,27
   44d48:	2140570e 	bge	r4,r5,44ea8 <__addsf3+0x2e8>
   44d4c:	01400044 	movi	r5,1
   44d50:	1947883a 	add	r3,r3,r5
   44d54:	1901002c 	andhi	r4,r3,1024
   44d58:	203fea26 	beq	r4,zero,44d04 <__alt_data_end+0xfffd2d04>
   44d5c:	84000044 	addi	r16,r16,1
   44d60:	01003fc4 	movi	r4,255
   44d64:	81007526 	beq	r16,r4,44f3c <__addsf3+0x37c>
   44d68:	00bf0034 	movhi	r2,64512
   44d6c:	10bfffc4 	addi	r2,r2,-1
   44d70:	1900004c 	andi	r4,r3,1
   44d74:	1886703a 	and	r3,r3,r2
   44d78:	1806d07a 	srli	r3,r3,1
   44d7c:	1906b03a 	or	r3,r3,r4
   44d80:	003fa606 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44d84:	18001a26 	beq	r3,zero,44df0 <__addsf3+0x230>
   44d88:	19001034 	orhi	r4,r3,64
   44d8c:	00c02034 	movhi	r3,128
   44d90:	18ffffc4 	addi	r3,r3,-1
   44d94:	017fffc4 	movi	r5,-1
   44d98:	20c8703a 	and	r4,r4,r3
   44d9c:	003fad06 	br	44c54 <__alt_data_end+0xfffd2c54>
   44da0:	297fffc4 	addi	r5,r5,-1
   44da4:	28002c1e 	bne	r5,zero,44e58 <__addsf3+0x298>
   44da8:	1987c83a 	sub	r3,r3,r6
   44dac:	003fbf06 	br	44cac <__alt_data_end+0xfffd2cac>
   44db0:	303f9a26 	beq	r6,zero,44c1c <__alt_data_end+0xfffd2c1c>
   44db4:	297fffc4 	addi	r5,r5,-1
   44db8:	28004b1e 	bne	r5,zero,44ee8 <__addsf3+0x328>
   44dbc:	1987883a 	add	r3,r3,r6
   44dc0:	003fe406 	br	44d54 <__alt_data_end+0xfffd2d54>
   44dc4:	2800271e 	bne	r5,zero,44e64 <__addsf3+0x2a4>
   44dc8:	80800044 	addi	r2,r16,1
   44dcc:	10803fcc 	andi	r2,r2,255
   44dd0:	01000044 	movi	r4,1
   44dd4:	2080520e 	bge	r4,r2,44f20 <__addsf3+0x360>
   44dd8:	19a3c83a 	sub	r17,r3,r6
   44ddc:	8881002c 	andhi	r2,r17,1024
   44de0:	10002c26 	beq	r2,zero,44e94 <__addsf3+0x2d4>
   44de4:	30e3c83a 	sub	r17,r6,r3
   44de8:	4025883a 	mov	r18,r8
   44dec:	003fb406 	br	44cc0 <__alt_data_end+0xfffd2cc0>
   44df0:	017fffc4 	movi	r5,-1
   44df4:	0009883a 	mov	r4,zero
   44df8:	003f9606 	br	44c54 <__alt_data_end+0xfffd2c54>
   44dfc:	00ff0034 	movhi	r3,64512
   44e00:	18ffffc4 	addi	r3,r3,-1
   44e04:	80a1c83a 	sub	r16,r16,r2
   44e08:	88c6703a 	and	r3,r17,r3
   44e0c:	003f8306 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44e10:	00800804 	movi	r2,32
   44e14:	1145c83a 	sub	r2,r2,r5
   44e18:	3084983a 	sll	r2,r6,r2
   44e1c:	314cd83a 	srl	r6,r6,r5
   44e20:	100ac03a 	cmpne	r5,r2,zero
   44e24:	298ab03a 	or	r5,r5,r6
   44e28:	003f9f06 	br	44ca8 <__alt_data_end+0xfffd2ca8>
   44e2c:	2800451e 	bne	r5,zero,44f44 <__addsf3+0x384>
   44e30:	81000044 	addi	r4,r16,1
   44e34:	21c03fcc 	andi	r7,r4,255
   44e38:	01400044 	movi	r5,1
   44e3c:	29c02d0e 	bge	r5,r7,44ef4 <__addsf3+0x334>
   44e40:	01403fc4 	movi	r5,255
   44e44:	21403c26 	beq	r4,r5,44f38 <__addsf3+0x378>
   44e48:	30c7883a 	add	r3,r6,r3
   44e4c:	1806d07a 	srli	r3,r3,1
   44e50:	2021883a 	mov	r16,r4
   44e54:	003f7106 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44e58:	00803fc4 	movi	r2,255
   44e5c:	80bf8f1e 	bne	r16,r2,44c9c <__alt_data_end+0xfffd2c9c>
   44e60:	003f6e06 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44e64:	80001726 	beq	r16,zero,44ec4 <__addsf3+0x304>
   44e68:	00803fc4 	movi	r2,255
   44e6c:	20801a26 	beq	r4,r2,44ed8 <__addsf3+0x318>
   44e70:	014bc83a 	sub	r5,zero,r5
   44e74:	18c10034 	orhi	r3,r3,1024
   44e78:	008006c4 	movi	r2,27
   44e7c:	1140430e 	bge	r2,r5,44f8c <__addsf3+0x3cc>
   44e80:	00c00044 	movi	r3,1
   44e84:	30c7c83a 	sub	r3,r6,r3
   44e88:	2021883a 	mov	r16,r4
   44e8c:	4025883a 	mov	r18,r8
   44e90:	003f8606 	br	44cac <__alt_data_end+0xfffd2cac>
   44e94:	883f8a1e 	bne	r17,zero,44cc0 <__alt_data_end+0xfffd2cc0>
   44e98:	0007883a 	mov	r3,zero
   44e9c:	0005883a 	mov	r2,zero
   44ea0:	0021883a 	mov	r16,zero
   44ea4:	003f9a06 	br	44d10 <__alt_data_end+0xfffd2d10>
   44ea8:	01000804 	movi	r4,32
   44eac:	2149c83a 	sub	r4,r4,r5
   44eb0:	3108983a 	sll	r4,r6,r4
   44eb4:	314cd83a 	srl	r6,r6,r5
   44eb8:	200ac03a 	cmpne	r5,r4,zero
   44ebc:	298ab03a 	or	r5,r5,r6
   44ec0:	003fa306 	br	44d50 <__alt_data_end+0xfffd2d50>
   44ec4:	18000426 	beq	r3,zero,44ed8 <__addsf3+0x318>
   44ec8:	014a303a 	nor	r5,zero,r5
   44ecc:	283fed26 	beq	r5,zero,44e84 <__alt_data_end+0xfffd2e84>
   44ed0:	00803fc4 	movi	r2,255
   44ed4:	20bfe81e 	bne	r4,r2,44e78 <__alt_data_end+0xfffd2e78>
   44ed8:	3007883a 	mov	r3,r6
   44edc:	2021883a 	mov	r16,r4
   44ee0:	4025883a 	mov	r18,r8
   44ee4:	003f4d06 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44ee8:	01003fc4 	movi	r4,255
   44eec:	813f951e 	bne	r16,r4,44d44 <__alt_data_end+0xfffd2d44>
   44ef0:	003f4a06 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44ef4:	8000471e 	bne	r16,zero,45014 <__addsf3+0x454>
   44ef8:	18006126 	beq	r3,zero,45080 <__addsf3+0x4c0>
   44efc:	303f4726 	beq	r6,zero,44c1c <__alt_data_end+0xfffd2c1c>
   44f00:	1987883a 	add	r3,r3,r6
   44f04:	1881002c 	andhi	r2,r3,1024
   44f08:	103f7e26 	beq	r2,zero,44d04 <__alt_data_end+0xfffd2d04>
   44f0c:	00bf0034 	movhi	r2,64512
   44f10:	10bfffc4 	addi	r2,r2,-1
   44f14:	2821883a 	mov	r16,r5
   44f18:	1886703a 	and	r3,r3,r2
   44f1c:	003f3f06 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44f20:	8000141e 	bne	r16,zero,44f74 <__addsf3+0x3b4>
   44f24:	1800311e 	bne	r3,zero,44fec <__addsf3+0x42c>
   44f28:	30004626 	beq	r6,zero,45044 <__addsf3+0x484>
   44f2c:	3007883a 	mov	r3,r6
   44f30:	4025883a 	mov	r18,r8
   44f34:	003f3906 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44f38:	2021883a 	mov	r16,r4
   44f3c:	0007883a 	mov	r3,zero
   44f40:	003f7306 	br	44d10 <__alt_data_end+0xfffd2d10>
   44f44:	8000181e 	bne	r16,zero,44fa8 <__addsf3+0x3e8>
   44f48:	18002f26 	beq	r3,zero,45008 <__addsf3+0x448>
   44f4c:	014a303a 	nor	r5,zero,r5
   44f50:	28000526 	beq	r5,zero,44f68 <__addsf3+0x3a8>
   44f54:	01c03fc4 	movi	r7,255
   44f58:	21c02b26 	beq	r4,r7,45008 <__addsf3+0x448>
   44f5c:	01c006c4 	movi	r7,27
   44f60:	3940400e 	bge	r7,r5,45064 <__addsf3+0x4a4>
   44f64:	00c00044 	movi	r3,1
   44f68:	1987883a 	add	r3,r3,r6
   44f6c:	2021883a 	mov	r16,r4
   44f70:	003f7806 	br	44d54 <__alt_data_end+0xfffd2d54>
   44f74:	1800111e 	bne	r3,zero,44fbc <__addsf3+0x3fc>
   44f78:	30003526 	beq	r6,zero,45050 <__addsf3+0x490>
   44f7c:	3007883a 	mov	r3,r6
   44f80:	4025883a 	mov	r18,r8
   44f84:	04003fc4 	movi	r16,255
   44f88:	003f2406 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44f8c:	00800804 	movi	r2,32
   44f90:	1145c83a 	sub	r2,r2,r5
   44f94:	1884983a 	sll	r2,r3,r2
   44f98:	194ad83a 	srl	r5,r3,r5
   44f9c:	1006c03a 	cmpne	r3,r2,zero
   44fa0:	1946b03a 	or	r3,r3,r5
   44fa4:	003fb706 	br	44e84 <__alt_data_end+0xfffd2e84>
   44fa8:	01c03fc4 	movi	r7,255
   44fac:	21c01626 	beq	r4,r7,45008 <__addsf3+0x448>
   44fb0:	014bc83a 	sub	r5,zero,r5
   44fb4:	18c10034 	orhi	r3,r3,1024
   44fb8:	003fe806 	br	44f5c <__alt_data_end+0xfffd2f5c>
   44fbc:	30001f26 	beq	r6,zero,4503c <__addsf3+0x47c>
   44fc0:	1806d0fa 	srli	r3,r3,3
   44fc4:	1880102c 	andhi	r2,r3,64
   44fc8:	10000526 	beq	r2,zero,44fe0 <__addsf3+0x420>
   44fcc:	300cd0fa 	srli	r6,r6,3
   44fd0:	3080102c 	andhi	r2,r6,64
   44fd4:	1000021e 	bne	r2,zero,44fe0 <__addsf3+0x420>
   44fd8:	3007883a 	mov	r3,r6
   44fdc:	4025883a 	mov	r18,r8
   44fe0:	180690fa 	slli	r3,r3,3
   44fe4:	04003fc4 	movi	r16,255
   44fe8:	003f0c06 	br	44c1c <__alt_data_end+0xfffd2c1c>
   44fec:	303f0b26 	beq	r6,zero,44c1c <__alt_data_end+0xfffd2c1c>
   44ff0:	1985c83a 	sub	r2,r3,r6
   44ff4:	1101002c 	andhi	r4,r2,1024
   44ff8:	203f4026 	beq	r4,zero,44cfc <__alt_data_end+0xfffd2cfc>
   44ffc:	30c7c83a 	sub	r3,r6,r3
   45000:	4025883a 	mov	r18,r8
   45004:	003f0506 	br	44c1c <__alt_data_end+0xfffd2c1c>
   45008:	3007883a 	mov	r3,r6
   4500c:	2021883a 	mov	r16,r4
   45010:	003f0206 	br	44c1c <__alt_data_end+0xfffd2c1c>
   45014:	18001c26 	beq	r3,zero,45088 <__addsf3+0x4c8>
   45018:	30000826 	beq	r6,zero,4503c <__addsf3+0x47c>
   4501c:	1806d0fa 	srli	r3,r3,3
   45020:	1880102c 	andhi	r2,r3,64
   45024:	103fee26 	beq	r2,zero,44fe0 <__alt_data_end+0xfffd2fe0>
   45028:	300cd0fa 	srli	r6,r6,3
   4502c:	3080102c 	andhi	r2,r6,64
   45030:	103feb1e 	bne	r2,zero,44fe0 <__alt_data_end+0xfffd2fe0>
   45034:	3007883a 	mov	r3,r6
   45038:	003fe906 	br	44fe0 <__alt_data_end+0xfffd2fe0>
   4503c:	04003fc4 	movi	r16,255
   45040:	003ef606 	br	44c1c <__alt_data_end+0xfffd2c1c>
   45044:	8007883a 	mov	r3,r16
   45048:	0005883a 	mov	r2,zero
   4504c:	003f3006 	br	44d10 <__alt_data_end+0xfffd2d10>
   45050:	00c10034 	movhi	r3,1024
   45054:	0005883a 	mov	r2,zero
   45058:	18fffe04 	addi	r3,r3,-8
   4505c:	04003fc4 	movi	r16,255
   45060:	003f2b06 	br	44d10 <__alt_data_end+0xfffd2d10>
   45064:	01c00804 	movi	r7,32
   45068:	394fc83a 	sub	r7,r7,r5
   4506c:	19ce983a 	sll	r7,r3,r7
   45070:	194ad83a 	srl	r5,r3,r5
   45074:	3806c03a 	cmpne	r3,r7,zero
   45078:	1946b03a 	or	r3,r3,r5
   4507c:	003fba06 	br	44f68 <__alt_data_end+0xfffd2f68>
   45080:	3007883a 	mov	r3,r6
   45084:	003ee506 	br	44c1c <__alt_data_end+0xfffd2c1c>
   45088:	3007883a 	mov	r3,r6
   4508c:	04003fc4 	movi	r16,255
   45090:	003ee206 	br	44c1c <__alt_data_end+0xfffd2c1c>
   45094:	0007883a 	mov	r3,zero
   45098:	0005883a 	mov	r2,zero
   4509c:	003f1c06 	br	44d10 <__alt_data_end+0xfffd2d10>

000450a0 <__mulsf3>:
   450a0:	defff504 	addi	sp,sp,-44
   450a4:	dc400215 	stw	r17,8(sp)
   450a8:	2022d5fa 	srli	r17,r4,23
   450ac:	dd400615 	stw	r21,24(sp)
   450b0:	202ad7fa 	srli	r21,r4,31
   450b4:	dc000115 	stw	r16,4(sp)
   450b8:	04002034 	movhi	r16,128
   450bc:	df000915 	stw	fp,36(sp)
   450c0:	dd000515 	stw	r20,20(sp)
   450c4:	843fffc4 	addi	r16,r16,-1
   450c8:	dfc00a15 	stw	ra,40(sp)
   450cc:	ddc00815 	stw	r23,32(sp)
   450d0:	dd800715 	stw	r22,28(sp)
   450d4:	dcc00415 	stw	r19,16(sp)
   450d8:	dc800315 	stw	r18,12(sp)
   450dc:	8c403fcc 	andi	r17,r17,255
   450e0:	8120703a 	and	r16,r16,r4
   450e4:	a829883a 	mov	r20,r21
   450e8:	af003fcc 	andi	fp,r21,255
   450ec:	88005026 	beq	r17,zero,45230 <__mulsf3+0x190>
   450f0:	00803fc4 	movi	r2,255
   450f4:	88802f26 	beq	r17,r2,451b4 <__mulsf3+0x114>
   450f8:	84002034 	orhi	r16,r16,128
   450fc:	802090fa 	slli	r16,r16,3
   45100:	8c7fe044 	addi	r17,r17,-127
   45104:	0025883a 	mov	r18,zero
   45108:	002f883a 	mov	r23,zero
   4510c:	2804d5fa 	srli	r2,r5,23
   45110:	282cd7fa 	srli	r22,r5,31
   45114:	01002034 	movhi	r4,128
   45118:	213fffc4 	addi	r4,r4,-1
   4511c:	10803fcc 	andi	r2,r2,255
   45120:	2166703a 	and	r19,r4,r5
   45124:	b1803fcc 	andi	r6,r22,255
   45128:	10004926 	beq	r2,zero,45250 <__mulsf3+0x1b0>
   4512c:	00c03fc4 	movi	r3,255
   45130:	10c04326 	beq	r2,r3,45240 <__mulsf3+0x1a0>
   45134:	99402034 	orhi	r5,r19,128
   45138:	282690fa 	slli	r19,r5,3
   4513c:	10bfe044 	addi	r2,r2,-127
   45140:	000b883a 	mov	r5,zero
   45144:	8885883a 	add	r2,r17,r2
   45148:	2c86b03a 	or	r3,r5,r18
   4514c:	010003c4 	movi	r4,15
   45150:	adaaf03a 	xor	r21,r21,r22
   45154:	12000044 	addi	r8,r2,1
   45158:	20c06536 	bltu	r4,r3,452f0 <__mulsf3+0x250>
   4515c:	180690ba 	slli	r3,r3,2
   45160:	01000134 	movhi	r4,4
   45164:	21145d04 	addi	r4,r4,20852
   45168:	1907883a 	add	r3,r3,r4
   4516c:	18c00017 	ldw	r3,0(r3)
   45170:	1800683a 	jmp	r3
   45174:	000452f0 	cmpltui	zero,zero,4427
   45178:	000453bc 	xorhi	zero,zero,4430
   4517c:	000453bc 	xorhi	zero,zero,4430
   45180:	000453cc 	andi	zero,zero,4431
   45184:	000451c4 	movi	zero,4423
   45188:	000451c4 	movi	zero,4423
   4518c:	000452dc 	xori	zero,zero,4427
   45190:	000453cc 	andi	zero,zero,4431
   45194:	000451c4 	movi	zero,4423
   45198:	000452dc 	xori	zero,zero,4427
   4519c:	000451c4 	movi	zero,4423
   451a0:	000453cc 	andi	zero,zero,4431
   451a4:	000451c8 	cmpgei	zero,zero,4423
   451a8:	000451c8 	cmpgei	zero,zero,4423
   451ac:	000451c8 	cmpgei	zero,zero,4423
   451b0:	000453dc 	xori	zero,zero,4431
   451b4:	8000311e 	bne	r16,zero,4527c <__mulsf3+0x1dc>
   451b8:	04800204 	movi	r18,8
   451bc:	05c00084 	movi	r23,2
   451c0:	003fd206 	br	4510c <__alt_data_end+0xfffd310c>
   451c4:	a839883a 	mov	fp,r21
   451c8:	00800084 	movi	r2,2
   451cc:	b880231e 	bne	r23,r2,4525c <__mulsf3+0x1bc>
   451d0:	e500004c 	andi	r20,fp,1
   451d4:	00ffffc4 	movi	r3,-1
   451d8:	0009883a 	mov	r4,zero
   451dc:	18c03fcc 	andi	r3,r3,255
   451e0:	180695fa 	slli	r3,r3,23
   451e4:	a0803fcc 	andi	r2,r20,255
   451e8:	04002034 	movhi	r16,128
   451ec:	100497fa 	slli	r2,r2,31
   451f0:	843fffc4 	addi	r16,r16,-1
   451f4:	2420703a 	and	r16,r4,r16
   451f8:	80e0b03a 	or	r16,r16,r3
   451fc:	8084b03a 	or	r2,r16,r2
   45200:	dfc00a17 	ldw	ra,40(sp)
   45204:	df000917 	ldw	fp,36(sp)
   45208:	ddc00817 	ldw	r23,32(sp)
   4520c:	dd800717 	ldw	r22,28(sp)
   45210:	dd400617 	ldw	r21,24(sp)
   45214:	dd000517 	ldw	r20,20(sp)
   45218:	dcc00417 	ldw	r19,16(sp)
   4521c:	dc800317 	ldw	r18,12(sp)
   45220:	dc400217 	ldw	r17,8(sp)
   45224:	dc000117 	ldw	r16,4(sp)
   45228:	dec00b04 	addi	sp,sp,44
   4522c:	f800283a 	ret
   45230:	8000151e 	bne	r16,zero,45288 <__mulsf3+0x1e8>
   45234:	04800104 	movi	r18,4
   45238:	05c00044 	movi	r23,1
   4523c:	003fb306 	br	4510c <__alt_data_end+0xfffd310c>
   45240:	980b003a 	cmpeq	r5,r19,zero
   45244:	00c000c4 	movi	r3,3
   45248:	194bc83a 	sub	r5,r3,r5
   4524c:	003fbd06 	br	45144 <__alt_data_end+0xfffd3144>
   45250:	9800181e 	bne	r19,zero,452b4 <__mulsf3+0x214>
   45254:	01400044 	movi	r5,1
   45258:	003fba06 	br	45144 <__alt_data_end+0xfffd3144>
   4525c:	008000c4 	movi	r2,3
   45260:	b8809226 	beq	r23,r2,454ac <__mulsf3+0x40c>
   45264:	00800044 	movi	r2,1
   45268:	b880771e 	bne	r23,r2,45448 <__mulsf3+0x3a8>
   4526c:	e0a8703a 	and	r20,fp,r2
   45270:	0007883a 	mov	r3,zero
   45274:	0009883a 	mov	r4,zero
   45278:	003fd806 	br	451dc <__alt_data_end+0xfffd31dc>
   4527c:	04800304 	movi	r18,12
   45280:	05c000c4 	movi	r23,3
   45284:	003fa106 	br	4510c <__alt_data_end+0xfffd310c>
   45288:	8009883a 	mov	r4,r16
   4528c:	d9400015 	stw	r5,0(sp)
   45290:	0047f600 	call	47f60 <__clzsi2>
   45294:	10fffec4 	addi	r3,r2,-5
   45298:	047fe284 	movi	r17,-118
   4529c:	80e0983a 	sll	r16,r16,r3
   452a0:	88a3c83a 	sub	r17,r17,r2
   452a4:	0025883a 	mov	r18,zero
   452a8:	002f883a 	mov	r23,zero
   452ac:	d9400017 	ldw	r5,0(sp)
   452b0:	003f9606 	br	4510c <__alt_data_end+0xfffd310c>
   452b4:	9809883a 	mov	r4,r19
   452b8:	d9800015 	stw	r6,0(sp)
   452bc:	0047f600 	call	47f60 <__clzsi2>
   452c0:	10fffec4 	addi	r3,r2,-5
   452c4:	98e6983a 	sll	r19,r19,r3
   452c8:	00ffe284 	movi	r3,-118
   452cc:	1885c83a 	sub	r2,r3,r2
   452d0:	000b883a 	mov	r5,zero
   452d4:	d9800017 	ldw	r6,0(sp)
   452d8:	003f9a06 	br	45144 <__alt_data_end+0xfffd3144>
   452dc:	01002034 	movhi	r4,128
   452e0:	0029883a 	mov	r20,zero
   452e4:	213fffc4 	addi	r4,r4,-1
   452e8:	00ffffc4 	movi	r3,-1
   452ec:	003fbb06 	br	451dc <__alt_data_end+0xfffd31dc>
   452f0:	8006d43a 	srli	r3,r16,16
   452f4:	9812d43a 	srli	r9,r19,16
   452f8:	843fffcc 	andi	r16,r16,65535
   452fc:	997fffcc 	andi	r5,r19,65535
   45300:	2c0f383a 	mul	r7,r5,r16
   45304:	28cb383a 	mul	r5,r5,r3
   45308:	4c21383a 	mul	r16,r9,r16
   4530c:	380cd43a 	srli	r6,r7,16
   45310:	48d3383a 	mul	r9,r9,r3
   45314:	2c21883a 	add	r16,r5,r16
   45318:	8187883a 	add	r3,r16,r6
   4531c:	1940022e 	bgeu	r3,r5,45328 <__mulsf3+0x288>
   45320:	01000074 	movhi	r4,1
   45324:	4913883a 	add	r9,r9,r4
   45328:	1808943a 	slli	r4,r3,16
   4532c:	39ffffcc 	andi	r7,r7,65535
   45330:	1806d43a 	srli	r3,r3,16
   45334:	21c9883a 	add	r4,r4,r7
   45338:	202091ba 	slli	r16,r4,6
   4533c:	48c7883a 	add	r3,r9,r3
   45340:	2008d6ba 	srli	r4,r4,26
   45344:	180691ba 	slli	r3,r3,6
   45348:	8020c03a 	cmpne	r16,r16,zero
   4534c:	8120b03a 	or	r16,r16,r4
   45350:	80e0b03a 	or	r16,r16,r3
   45354:	80c2002c 	andhi	r3,r16,2048
   45358:	18000426 	beq	r3,zero,4536c <__mulsf3+0x2cc>
   4535c:	8006d07a 	srli	r3,r16,1
   45360:	8400004c 	andi	r16,r16,1
   45364:	4005883a 	mov	r2,r8
   45368:	80e0b03a 	or	r16,r16,r3
   4536c:	10c01fc4 	addi	r3,r2,127
   45370:	00c02d0e 	bge	zero,r3,45428 <__mulsf3+0x388>
   45374:	810001cc 	andi	r4,r16,7
   45378:	20000426 	beq	r4,zero,4538c <__mulsf3+0x2ec>
   4537c:	814003cc 	andi	r5,r16,15
   45380:	01000104 	movi	r4,4
   45384:	29000126 	beq	r5,r4,4538c <__mulsf3+0x2ec>
   45388:	8121883a 	add	r16,r16,r4
   4538c:	8102002c 	andhi	r4,r16,2048
   45390:	20000426 	beq	r4,zero,453a4 <__mulsf3+0x304>
   45394:	10c02004 	addi	r3,r2,128
   45398:	00be0034 	movhi	r2,63488
   4539c:	10bfffc4 	addi	r2,r2,-1
   453a0:	80a0703a 	and	r16,r16,r2
   453a4:	00803f84 	movi	r2,254
   453a8:	10c01b0e 	bge	r2,r3,45418 <__mulsf3+0x378>
   453ac:	ad00004c 	andi	r20,r21,1
   453b0:	00ffffc4 	movi	r3,-1
   453b4:	0009883a 	mov	r4,zero
   453b8:	003f8806 	br	451dc <__alt_data_end+0xfffd31dc>
   453bc:	9821883a 	mov	r16,r19
   453c0:	a839883a 	mov	fp,r21
   453c4:	282f883a 	mov	r23,r5
   453c8:	003f7f06 	br	451c8 <__alt_data_end+0xfffd31c8>
   453cc:	9821883a 	mov	r16,r19
   453d0:	3039883a 	mov	fp,r6
   453d4:	282f883a 	mov	r23,r5
   453d8:	003f7b06 	br	451c8 <__alt_data_end+0xfffd31c8>
   453dc:	8080102c 	andhi	r2,r16,64
   453e0:	10000826 	beq	r2,zero,45404 <__mulsf3+0x364>
   453e4:	9880102c 	andhi	r2,r19,64
   453e8:	1000061e 	bne	r2,zero,45404 <__mulsf3+0x364>
   453ec:	00802034 	movhi	r2,128
   453f0:	99001034 	orhi	r4,r19,64
   453f4:	10bfffc4 	addi	r2,r2,-1
   453f8:	b029883a 	mov	r20,r22
   453fc:	2088703a 	and	r4,r4,r2
   45400:	003fb906 	br	452e8 <__alt_data_end+0xfffd32e8>
   45404:	00802034 	movhi	r2,128
   45408:	81001034 	orhi	r4,r16,64
   4540c:	10bfffc4 	addi	r2,r2,-1
   45410:	2088703a 	and	r4,r4,r2
   45414:	003fb406 	br	452e8 <__alt_data_end+0xfffd32e8>
   45418:	802091ba 	slli	r16,r16,6
   4541c:	ad00004c 	andi	r20,r21,1
   45420:	8008d27a 	srli	r4,r16,9
   45424:	003f6d06 	br	451dc <__alt_data_end+0xfffd31dc>
   45428:	00ffe084 	movi	r3,-126
   4542c:	1887c83a 	sub	r3,r3,r2
   45430:	010006c4 	movi	r4,27
   45434:	20c0070e 	bge	r4,r3,45454 <__mulsf3+0x3b4>
   45438:	ad00004c 	andi	r20,r21,1
   4543c:	0007883a 	mov	r3,zero
   45440:	0009883a 	mov	r4,zero
   45444:	003f6506 	br	451dc <__alt_data_end+0xfffd31dc>
   45448:	4005883a 	mov	r2,r8
   4544c:	e02b883a 	mov	r21,fp
   45450:	003fc606 	br	4536c <__alt_data_end+0xfffd336c>
   45454:	10802784 	addi	r2,r2,158
   45458:	8084983a 	sll	r2,r16,r2
   4545c:	80e0d83a 	srl	r16,r16,r3
   45460:	1004c03a 	cmpne	r2,r2,zero
   45464:	1404b03a 	or	r2,r2,r16
   45468:	10c001cc 	andi	r3,r2,7
   4546c:	18000426 	beq	r3,zero,45480 <__mulsf3+0x3e0>
   45470:	110003cc 	andi	r4,r2,15
   45474:	00c00104 	movi	r3,4
   45478:	20c00126 	beq	r4,r3,45480 <__mulsf3+0x3e0>
   4547c:	10c5883a 	add	r2,r2,r3
   45480:	10c1002c 	andhi	r3,r2,1024
   45484:	18000426 	beq	r3,zero,45498 <__mulsf3+0x3f8>
   45488:	ad00004c 	andi	r20,r21,1
   4548c:	00c00044 	movi	r3,1
   45490:	0009883a 	mov	r4,zero
   45494:	003f5106 	br	451dc <__alt_data_end+0xfffd31dc>
   45498:	100491ba 	slli	r2,r2,6
   4549c:	ad00004c 	andi	r20,r21,1
   454a0:	0007883a 	mov	r3,zero
   454a4:	1008d27a 	srli	r4,r2,9
   454a8:	003f4c06 	br	451dc <__alt_data_end+0xfffd31dc>
   454ac:	00802034 	movhi	r2,128
   454b0:	81001034 	orhi	r4,r16,64
   454b4:	10bfffc4 	addi	r2,r2,-1
   454b8:	e500004c 	andi	r20,fp,1
   454bc:	2088703a 	and	r4,r4,r2
   454c0:	003f8906 	br	452e8 <__alt_data_end+0xfffd32e8>

000454c4 <__subsf3>:
   454c4:	defffc04 	addi	sp,sp,-16
   454c8:	280ed5fa 	srli	r7,r5,23
   454cc:	02002034 	movhi	r8,128
   454d0:	280d883a 	mov	r6,r5
   454d4:	423fffc4 	addi	r8,r8,-1
   454d8:	200ad5fa 	srli	r5,r4,23
   454dc:	dc400115 	stw	r17,4(sp)
   454e0:	2022d7fa 	srli	r17,r4,31
   454e4:	4108703a 	and	r4,r8,r4
   454e8:	dc000015 	stw	r16,0(sp)
   454ec:	4190703a 	and	r8,r8,r6
   454f0:	200690fa 	slli	r3,r4,3
   454f4:	dfc00315 	stw	ra,12(sp)
   454f8:	dc800215 	stw	r18,8(sp)
   454fc:	39c03fcc 	andi	r7,r7,255
   45500:	01003fc4 	movi	r4,255
   45504:	8805883a 	mov	r2,r17
   45508:	2c003fcc 	andi	r16,r5,255
   4550c:	8c403fcc 	andi	r17,r17,255
   45510:	300cd7fa 	srli	r6,r6,31
   45514:	401090fa 	slli	r8,r8,3
   45518:	39006126 	beq	r7,r4,456a0 <__subsf3+0x1dc>
   4551c:	3180005c 	xori	r6,r6,1
   45520:	89804926 	beq	r17,r6,45648 <__subsf3+0x184>
   45524:	81c5c83a 	sub	r2,r16,r7
   45528:	0080710e 	bge	zero,r2,456f0 <__subsf3+0x22c>
   4552c:	38001e1e 	bne	r7,zero,455a8 <__subsf3+0xe4>
   45530:	4000651e 	bne	r8,zero,456c8 <__subsf3+0x204>
   45534:	188001cc 	andi	r2,r3,7
   45538:	10000426 	beq	r2,zero,4554c <__subsf3+0x88>
   4553c:	190003cc 	andi	r4,r3,15
   45540:	00800104 	movi	r2,4
   45544:	20800126 	beq	r4,r2,4554c <__subsf3+0x88>
   45548:	18c00104 	addi	r3,r3,4
   4554c:	1901002c 	andhi	r4,r3,1024
   45550:	8880004c 	andi	r2,r17,1
   45554:	20003426 	beq	r4,zero,45628 <__subsf3+0x164>
   45558:	81400044 	addi	r5,r16,1
   4555c:	01003fc4 	movi	r4,255
   45560:	29006e26 	beq	r5,r4,4571c <__subsf3+0x258>
   45564:	180691ba 	slli	r3,r3,6
   45568:	1808d27a 	srli	r4,r3,9
   4556c:	29403fcc 	andi	r5,r5,255
   45570:	280a95fa 	slli	r5,r5,23
   45574:	10803fcc 	andi	r2,r2,255
   45578:	00c02034 	movhi	r3,128
   4557c:	100497fa 	slli	r2,r2,31
   45580:	18ffffc4 	addi	r3,r3,-1
   45584:	20c6703a 	and	r3,r4,r3
   45588:	1946b03a 	or	r3,r3,r5
   4558c:	1884b03a 	or	r2,r3,r2
   45590:	dfc00317 	ldw	ra,12(sp)
   45594:	dc800217 	ldw	r18,8(sp)
   45598:	dc400117 	ldw	r17,4(sp)
   4559c:	dc000017 	ldw	r16,0(sp)
   455a0:	dec00404 	addi	sp,sp,16
   455a4:	f800283a 	ret
   455a8:	01003fc4 	movi	r4,255
   455ac:	813fe126 	beq	r16,r4,45534 <__alt_data_end+0xfffd3534>
   455b0:	42010034 	orhi	r8,r8,1024
   455b4:	010006c4 	movi	r4,27
   455b8:	2080600e 	bge	r4,r2,4573c <__subsf3+0x278>
   455bc:	02000044 	movi	r8,1
   455c0:	1a07c83a 	sub	r3,r3,r8
   455c4:	1881002c 	andhi	r2,r3,1024
   455c8:	10001426 	beq	r2,zero,4561c <__subsf3+0x158>
   455cc:	04810034 	movhi	r18,1024
   455d0:	94bfffc4 	addi	r18,r18,-1
   455d4:	1ca4703a 	and	r18,r3,r18
   455d8:	9009883a 	mov	r4,r18
   455dc:	0047f600 	call	47f60 <__clzsi2>
   455e0:	10bffec4 	addi	r2,r2,-5
   455e4:	90a4983a 	sll	r18,r18,r2
   455e8:	14004f16 	blt	r2,r16,45728 <__subsf3+0x264>
   455ec:	140bc83a 	sub	r5,r2,r16
   455f0:	00c007c4 	movi	r3,31
   455f4:	1947c83a 	sub	r3,r3,r5
   455f8:	90c6983a 	sll	r3,r18,r3
   455fc:	29400044 	addi	r5,r5,1
   45600:	9164d83a 	srl	r18,r18,r5
   45604:	1806c03a 	cmpne	r3,r3,zero
   45608:	0021883a 	mov	r16,zero
   4560c:	1c86b03a 	or	r3,r3,r18
   45610:	003fc806 	br	45534 <__alt_data_end+0xfffd3534>
   45614:	1000e726 	beq	r2,zero,459b4 <__subsf3+0x4f0>
   45618:	1007883a 	mov	r3,r2
   4561c:	188001cc 	andi	r2,r3,7
   45620:	103fc61e 	bne	r2,zero,4553c <__alt_data_end+0xfffd353c>
   45624:	8880004c 	andi	r2,r17,1
   45628:	01003fc4 	movi	r4,255
   4562c:	1806d0fa 	srli	r3,r3,3
   45630:	81001e26 	beq	r16,r4,456ac <__subsf3+0x1e8>
   45634:	01002034 	movhi	r4,128
   45638:	213fffc4 	addi	r4,r4,-1
   4563c:	800b883a 	mov	r5,r16
   45640:	1908703a 	and	r4,r3,r4
   45644:	003fc906 	br	4556c <__alt_data_end+0xfffd356c>
   45648:	81c9c83a 	sub	r4,r16,r7
   4564c:	0100420e 	bge	zero,r4,45758 <__subsf3+0x294>
   45650:	38002226 	beq	r7,zero,456dc <__subsf3+0x218>
   45654:	01403fc4 	movi	r5,255
   45658:	817fb626 	beq	r16,r5,45534 <__alt_data_end+0xfffd3534>
   4565c:	42010034 	orhi	r8,r8,1024
   45660:	014006c4 	movi	r5,27
   45664:	2900580e 	bge	r5,r4,457c8 <__subsf3+0x304>
   45668:	01000044 	movi	r4,1
   4566c:	1907883a 	add	r3,r3,r4
   45670:	1901002c 	andhi	r4,r3,1024
   45674:	203fe926 	beq	r4,zero,4561c <__alt_data_end+0xfffd361c>
   45678:	84000044 	addi	r16,r16,1
   4567c:	01003fc4 	movi	r4,255
   45680:	81007626 	beq	r16,r4,4585c <__subsf3+0x398>
   45684:	00bf0034 	movhi	r2,64512
   45688:	10bfffc4 	addi	r2,r2,-1
   4568c:	1900004c 	andi	r4,r3,1
   45690:	1886703a 	and	r3,r3,r2
   45694:	1806d07a 	srli	r3,r3,1
   45698:	1906b03a 	or	r3,r3,r4
   4569c:	003fa506 	br	45534 <__alt_data_end+0xfffd3534>
   456a0:	403f9e26 	beq	r8,zero,4551c <__alt_data_end+0xfffd351c>
   456a4:	31803fcc 	andi	r6,r6,255
   456a8:	003f9d06 	br	45520 <__alt_data_end+0xfffd3520>
   456ac:	18001b26 	beq	r3,zero,4571c <__subsf3+0x258>
   456b0:	19001034 	orhi	r4,r3,64
   456b4:	00c02034 	movhi	r3,128
   456b8:	18ffffc4 	addi	r3,r3,-1
   456bc:	017fffc4 	movi	r5,-1
   456c0:	20c8703a 	and	r4,r4,r3
   456c4:	003fa906 	br	4556c <__alt_data_end+0xfffd356c>
   456c8:	10bfffc4 	addi	r2,r2,-1
   456cc:	103fbc26 	beq	r2,zero,455c0 <__alt_data_end+0xfffd35c0>
   456d0:	01003fc4 	movi	r4,255
   456d4:	813fb71e 	bne	r16,r4,455b4 <__alt_data_end+0xfffd35b4>
   456d8:	003f9606 	br	45534 <__alt_data_end+0xfffd3534>
   456dc:	403f9526 	beq	r8,zero,45534 <__alt_data_end+0xfffd3534>
   456e0:	213fffc4 	addi	r4,r4,-1
   456e4:	2000481e 	bne	r4,zero,45808 <__subsf3+0x344>
   456e8:	1a07883a 	add	r3,r3,r8
   456ec:	003fe006 	br	45670 <__alt_data_end+0xfffd3670>
   456f0:	1000241e 	bne	r2,zero,45784 <__subsf3+0x2c0>
   456f4:	80800044 	addi	r2,r16,1
   456f8:	10803fcc 	andi	r2,r2,255
   456fc:	01000044 	movi	r4,1
   45700:	20804f0e 	bge	r4,r2,45840 <__subsf3+0x37c>
   45704:	1a25c83a 	sub	r18,r3,r8
   45708:	9081002c 	andhi	r2,r18,1024
   4570c:	10002926 	beq	r2,zero,457b4 <__subsf3+0x2f0>
   45710:	40e5c83a 	sub	r18,r8,r3
   45714:	3023883a 	mov	r17,r6
   45718:	003faf06 	br	455d8 <__alt_data_end+0xfffd35d8>
   4571c:	017fffc4 	movi	r5,-1
   45720:	0009883a 	mov	r4,zero
   45724:	003f9106 	br	4556c <__alt_data_end+0xfffd356c>
   45728:	00ff0034 	movhi	r3,64512
   4572c:	18ffffc4 	addi	r3,r3,-1
   45730:	80a1c83a 	sub	r16,r16,r2
   45734:	90c6703a 	and	r3,r18,r3
   45738:	003f7e06 	br	45534 <__alt_data_end+0xfffd3534>
   4573c:	01000804 	movi	r4,32
   45740:	2089c83a 	sub	r4,r4,r2
   45744:	4108983a 	sll	r4,r8,r4
   45748:	4090d83a 	srl	r8,r8,r2
   4574c:	2004c03a 	cmpne	r2,r4,zero
   45750:	1210b03a 	or	r8,r2,r8
   45754:	003f9a06 	br	455c0 <__alt_data_end+0xfffd35c0>
   45758:	2000421e 	bne	r4,zero,45864 <__subsf3+0x3a0>
   4575c:	81000044 	addi	r4,r16,1
   45760:	21803fcc 	andi	r6,r4,255
   45764:	01400044 	movi	r5,1
   45768:	29802a0e 	bge	r5,r6,45814 <__subsf3+0x350>
   4576c:	01403fc4 	movi	r5,255
   45770:	21403926 	beq	r4,r5,45858 <__subsf3+0x394>
   45774:	40c7883a 	add	r3,r8,r3
   45778:	1806d07a 	srli	r3,r3,1
   4577c:	2021883a 	mov	r16,r4
   45780:	003f6c06 	br	45534 <__alt_data_end+0xfffd3534>
   45784:	80001726 	beq	r16,zero,457e4 <__subsf3+0x320>
   45788:	01003fc4 	movi	r4,255
   4578c:	39001a26 	beq	r7,r4,457f8 <__subsf3+0x334>
   45790:	0085c83a 	sub	r2,zero,r2
   45794:	18c10034 	orhi	r3,r3,1024
   45798:	010006c4 	movi	r4,27
   4579c:	2080430e 	bge	r4,r2,458ac <__subsf3+0x3e8>
   457a0:	00c00044 	movi	r3,1
   457a4:	40c7c83a 	sub	r3,r8,r3
   457a8:	3821883a 	mov	r16,r7
   457ac:	3023883a 	mov	r17,r6
   457b0:	003f8406 	br	455c4 <__alt_data_end+0xfffd35c4>
   457b4:	903f881e 	bne	r18,zero,455d8 <__alt_data_end+0xfffd35d8>
   457b8:	0007883a 	mov	r3,zero
   457bc:	0005883a 	mov	r2,zero
   457c0:	0021883a 	mov	r16,zero
   457c4:	003f9806 	br	45628 <__alt_data_end+0xfffd3628>
   457c8:	01400804 	movi	r5,32
   457cc:	290bc83a 	sub	r5,r5,r4
   457d0:	414a983a 	sll	r5,r8,r5
   457d4:	4110d83a 	srl	r8,r8,r4
   457d8:	2808c03a 	cmpne	r4,r5,zero
   457dc:	2208b03a 	or	r4,r4,r8
   457e0:	003fa206 	br	4566c <__alt_data_end+0xfffd366c>
   457e4:	18000426 	beq	r3,zero,457f8 <__subsf3+0x334>
   457e8:	0084303a 	nor	r2,zero,r2
   457ec:	103fed26 	beq	r2,zero,457a4 <__alt_data_end+0xfffd37a4>
   457f0:	01003fc4 	movi	r4,255
   457f4:	393fe81e 	bne	r7,r4,45798 <__alt_data_end+0xfffd3798>
   457f8:	4007883a 	mov	r3,r8
   457fc:	3821883a 	mov	r16,r7
   45800:	3023883a 	mov	r17,r6
   45804:	003f4b06 	br	45534 <__alt_data_end+0xfffd3534>
   45808:	01403fc4 	movi	r5,255
   4580c:	817f941e 	bne	r16,r5,45660 <__alt_data_end+0xfffd3660>
   45810:	003f4806 	br	45534 <__alt_data_end+0xfffd3534>
   45814:	8000471e 	bne	r16,zero,45934 <__subsf3+0x470>
   45818:	18006126 	beq	r3,zero,459a0 <__subsf3+0x4dc>
   4581c:	403f4526 	beq	r8,zero,45534 <__alt_data_end+0xfffd3534>
   45820:	1a07883a 	add	r3,r3,r8
   45824:	1881002c 	andhi	r2,r3,1024
   45828:	103f7c26 	beq	r2,zero,4561c <__alt_data_end+0xfffd361c>
   4582c:	00bf0034 	movhi	r2,64512
   45830:	10bfffc4 	addi	r2,r2,-1
   45834:	2821883a 	mov	r16,r5
   45838:	1886703a 	and	r3,r3,r2
   4583c:	003f3d06 	br	45534 <__alt_data_end+0xfffd3534>
   45840:	8000141e 	bne	r16,zero,45894 <__subsf3+0x3d0>
   45844:	1800311e 	bne	r3,zero,4590c <__subsf3+0x448>
   45848:	40004626 	beq	r8,zero,45964 <__subsf3+0x4a0>
   4584c:	4007883a 	mov	r3,r8
   45850:	3023883a 	mov	r17,r6
   45854:	003f3706 	br	45534 <__alt_data_end+0xfffd3534>
   45858:	2021883a 	mov	r16,r4
   4585c:	0007883a 	mov	r3,zero
   45860:	003f7106 	br	45628 <__alt_data_end+0xfffd3628>
   45864:	8000181e 	bne	r16,zero,458c8 <__subsf3+0x404>
   45868:	18002f26 	beq	r3,zero,45928 <__subsf3+0x464>
   4586c:	0108303a 	nor	r4,zero,r4
   45870:	20000526 	beq	r4,zero,45888 <__subsf3+0x3c4>
   45874:	01403fc4 	movi	r5,255
   45878:	39402b26 	beq	r7,r5,45928 <__subsf3+0x464>
   4587c:	014006c4 	movi	r5,27
   45880:	2900400e 	bge	r5,r4,45984 <__subsf3+0x4c0>
   45884:	00c00044 	movi	r3,1
   45888:	1a07883a 	add	r3,r3,r8
   4588c:	3821883a 	mov	r16,r7
   45890:	003f7706 	br	45670 <__alt_data_end+0xfffd3670>
   45894:	1800111e 	bne	r3,zero,458dc <__subsf3+0x418>
   45898:	40003526 	beq	r8,zero,45970 <__subsf3+0x4ac>
   4589c:	4007883a 	mov	r3,r8
   458a0:	3023883a 	mov	r17,r6
   458a4:	04003fc4 	movi	r16,255
   458a8:	003f2206 	br	45534 <__alt_data_end+0xfffd3534>
   458ac:	01000804 	movi	r4,32
   458b0:	2089c83a 	sub	r4,r4,r2
   458b4:	1908983a 	sll	r4,r3,r4
   458b8:	1884d83a 	srl	r2,r3,r2
   458bc:	2006c03a 	cmpne	r3,r4,zero
   458c0:	1886b03a 	or	r3,r3,r2
   458c4:	003fb706 	br	457a4 <__alt_data_end+0xfffd37a4>
   458c8:	01403fc4 	movi	r5,255
   458cc:	39401626 	beq	r7,r5,45928 <__subsf3+0x464>
   458d0:	0109c83a 	sub	r4,zero,r4
   458d4:	18c10034 	orhi	r3,r3,1024
   458d8:	003fe806 	br	4587c <__alt_data_end+0xfffd387c>
   458dc:	40001f26 	beq	r8,zero,4595c <__subsf3+0x498>
   458e0:	1806d0fa 	srli	r3,r3,3
   458e4:	1880102c 	andhi	r2,r3,64
   458e8:	10000526 	beq	r2,zero,45900 <__subsf3+0x43c>
   458ec:	4010d0fa 	srli	r8,r8,3
   458f0:	4080102c 	andhi	r2,r8,64
   458f4:	1000021e 	bne	r2,zero,45900 <__subsf3+0x43c>
   458f8:	4007883a 	mov	r3,r8
   458fc:	3023883a 	mov	r17,r6
   45900:	180690fa 	slli	r3,r3,3
   45904:	04003fc4 	movi	r16,255
   45908:	003f0a06 	br	45534 <__alt_data_end+0xfffd3534>
   4590c:	403f0926 	beq	r8,zero,45534 <__alt_data_end+0xfffd3534>
   45910:	1a05c83a 	sub	r2,r3,r8
   45914:	1101002c 	andhi	r4,r2,1024
   45918:	203f3e26 	beq	r4,zero,45614 <__alt_data_end+0xfffd3614>
   4591c:	40c7c83a 	sub	r3,r8,r3
   45920:	3023883a 	mov	r17,r6
   45924:	003f0306 	br	45534 <__alt_data_end+0xfffd3534>
   45928:	4007883a 	mov	r3,r8
   4592c:	3821883a 	mov	r16,r7
   45930:	003f0006 	br	45534 <__alt_data_end+0xfffd3534>
   45934:	18001c26 	beq	r3,zero,459a8 <__subsf3+0x4e4>
   45938:	40000826 	beq	r8,zero,4595c <__subsf3+0x498>
   4593c:	1806d0fa 	srli	r3,r3,3
   45940:	1880102c 	andhi	r2,r3,64
   45944:	103fee26 	beq	r2,zero,45900 <__alt_data_end+0xfffd3900>
   45948:	4010d0fa 	srli	r8,r8,3
   4594c:	4080102c 	andhi	r2,r8,64
   45950:	103feb1e 	bne	r2,zero,45900 <__alt_data_end+0xfffd3900>
   45954:	4007883a 	mov	r3,r8
   45958:	003fe906 	br	45900 <__alt_data_end+0xfffd3900>
   4595c:	04003fc4 	movi	r16,255
   45960:	003ef406 	br	45534 <__alt_data_end+0xfffd3534>
   45964:	8007883a 	mov	r3,r16
   45968:	0005883a 	mov	r2,zero
   4596c:	003f2e06 	br	45628 <__alt_data_end+0xfffd3628>
   45970:	00c10034 	movhi	r3,1024
   45974:	0005883a 	mov	r2,zero
   45978:	18fffe04 	addi	r3,r3,-8
   4597c:	04003fc4 	movi	r16,255
   45980:	003f2906 	br	45628 <__alt_data_end+0xfffd3628>
   45984:	01400804 	movi	r5,32
   45988:	290bc83a 	sub	r5,r5,r4
   4598c:	194a983a 	sll	r5,r3,r5
   45990:	1908d83a 	srl	r4,r3,r4
   45994:	2806c03a 	cmpne	r3,r5,zero
   45998:	1906b03a 	or	r3,r3,r4
   4599c:	003fba06 	br	45888 <__alt_data_end+0xfffd3888>
   459a0:	4007883a 	mov	r3,r8
   459a4:	003ee306 	br	45534 <__alt_data_end+0xfffd3534>
   459a8:	4007883a 	mov	r3,r8
   459ac:	04003fc4 	movi	r16,255
   459b0:	003ee006 	br	45534 <__alt_data_end+0xfffd3534>
   459b4:	0007883a 	mov	r3,zero
   459b8:	0005883a 	mov	r2,zero
   459bc:	003f1a06 	br	45628 <__alt_data_end+0xfffd3628>

000459c0 <__fixsfsi>:
   459c0:	2006d5fa 	srli	r3,r4,23
   459c4:	00802034 	movhi	r2,128
   459c8:	10bfffc4 	addi	r2,r2,-1
   459cc:	18c03fcc 	andi	r3,r3,255
   459d0:	01401f84 	movi	r5,126
   459d4:	1104703a 	and	r2,r2,r4
   459d8:	2008d7fa 	srli	r4,r4,31
   459dc:	28c0110e 	bge	r5,r3,45a24 <__fixsfsi+0x64>
   459e0:	01402744 	movi	r5,157
   459e4:	28c00b16 	blt	r5,r3,45a14 <__fixsfsi+0x54>
   459e8:	01402544 	movi	r5,149
   459ec:	10802034 	orhi	r2,r2,128
   459f0:	28c00e16 	blt	r5,r3,45a2c <__fixsfsi+0x6c>
   459f4:	01402584 	movi	r5,150
   459f8:	28c7c83a 	sub	r3,r5,r3
   459fc:	10c6d83a 	srl	r3,r2,r3
   45a00:	21003fcc 	andi	r4,r4,255
   45a04:	0105c83a 	sub	r2,zero,r4
   45a08:	1886f03a 	xor	r3,r3,r2
   45a0c:	1905883a 	add	r2,r3,r4
   45a10:	f800283a 	ret
   45a14:	00a00034 	movhi	r2,32768
   45a18:	10bfffc4 	addi	r2,r2,-1
   45a1c:	2085883a 	add	r2,r4,r2
   45a20:	f800283a 	ret
   45a24:	0005883a 	mov	r2,zero
   45a28:	f800283a 	ret
   45a2c:	18ffda84 	addi	r3,r3,-150
   45a30:	10c6983a 	sll	r3,r2,r3
   45a34:	003ff206 	br	45a00 <__alt_data_end+0xfffd3a00>

00045a38 <__adddf3>:
   45a38:	02000434 	movhi	r8,16
   45a3c:	423fffc4 	addi	r8,r8,-1
   45a40:	defffb04 	addi	sp,sp,-20
   45a44:	2a12703a 	and	r9,r5,r8
   45a48:	2806d7fa 	srli	r3,r5,31
   45a4c:	3a10703a 	and	r8,r7,r8
   45a50:	3804d53a 	srli	r2,r7,20
   45a54:	3014d77a 	srli	r10,r6,29
   45a58:	dc000015 	stw	r16,0(sp)
   45a5c:	481290fa 	slli	r9,r9,3
   45a60:	2820d53a 	srli	r16,r5,20
   45a64:	401090fa 	slli	r8,r8,3
   45a68:	200ad77a 	srli	r5,r4,29
   45a6c:	380ed7fa 	srli	r7,r7,31
   45a70:	dc800215 	stw	r18,8(sp)
   45a74:	dc400115 	stw	r17,4(sp)
   45a78:	dfc00415 	stw	ra,16(sp)
   45a7c:	dcc00315 	stw	r19,12(sp)
   45a80:	1c803fcc 	andi	r18,r3,255
   45a84:	8401ffcc 	andi	r16,r16,2047
   45a88:	494ab03a 	or	r5,r9,r5
   45a8c:	202290fa 	slli	r17,r4,3
   45a90:	1081ffcc 	andi	r2,r2,2047
   45a94:	4290b03a 	or	r8,r8,r10
   45a98:	300c90fa 	slli	r6,r6,3
   45a9c:	91c07026 	beq	r18,r7,45c60 <__adddf3+0x228>
   45aa0:	8087c83a 	sub	r3,r16,r2
   45aa4:	00c0b30e 	bge	zero,r3,45d74 <__adddf3+0x33c>
   45aa8:	10002a1e 	bne	r2,zero,45b54 <__adddf3+0x11c>
   45aac:	4184b03a 	or	r2,r8,r6
   45ab0:	1000991e 	bne	r2,zero,45d18 <__adddf3+0x2e0>
   45ab4:	888001cc 	andi	r2,r17,7
   45ab8:	10005b26 	beq	r2,zero,45c28 <__adddf3+0x1f0>
   45abc:	88c003cc 	andi	r3,r17,15
   45ac0:	00800104 	movi	r2,4
   45ac4:	18805826 	beq	r3,r2,45c28 <__adddf3+0x1f0>
   45ac8:	89800104 	addi	r6,r17,4
   45acc:	3463803a 	cmpltu	r17,r6,r17
   45ad0:	2c4b883a 	add	r5,r5,r17
   45ad4:	2880202c 	andhi	r2,r5,128
   45ad8:	9007883a 	mov	r3,r18
   45adc:	3023883a 	mov	r17,r6
   45ae0:	10005426 	beq	r2,zero,45c34 <__adddf3+0x1fc>
   45ae4:	84000044 	addi	r16,r16,1
   45ae8:	0081ffc4 	movi	r2,2047
   45aec:	8080c126 	beq	r16,r2,45df4 <__adddf3+0x3bc>
   45af0:	013fe034 	movhi	r4,65408
   45af4:	213fffc4 	addi	r4,r4,-1
   45af8:	290a703a 	and	r5,r5,r4
   45afc:	2804977a 	slli	r2,r5,29
   45b00:	280a927a 	slli	r5,r5,9
   45b04:	8822d0fa 	srli	r17,r17,3
   45b08:	8401ffcc 	andi	r16,r16,2047
   45b0c:	2808d33a 	srli	r4,r5,12
   45b10:	1444b03a 	or	r2,r2,r17
   45b14:	8401ffcc 	andi	r16,r16,2047
   45b18:	800a953a 	slli	r5,r16,20
   45b1c:	18c03fcc 	andi	r3,r3,255
   45b20:	04000434 	movhi	r16,16
   45b24:	180697fa 	slli	r3,r3,31
   45b28:	843fffc4 	addi	r16,r16,-1
   45b2c:	2420703a 	and	r16,r4,r16
   45b30:	8160b03a 	or	r16,r16,r5
   45b34:	80c6b03a 	or	r3,r16,r3
   45b38:	dfc00417 	ldw	ra,16(sp)
   45b3c:	dcc00317 	ldw	r19,12(sp)
   45b40:	dc800217 	ldw	r18,8(sp)
   45b44:	dc400117 	ldw	r17,4(sp)
   45b48:	dc000017 	ldw	r16,0(sp)
   45b4c:	dec00504 	addi	sp,sp,20
   45b50:	f800283a 	ret
   45b54:	0081ffc4 	movi	r2,2047
   45b58:	80bfd626 	beq	r16,r2,45ab4 <__alt_data_end+0xfffd3ab4>
   45b5c:	42002034 	orhi	r8,r8,128
   45b60:	00800e04 	movi	r2,56
   45b64:	10c0a616 	blt	r2,r3,45e00 <__adddf3+0x3c8>
   45b68:	008007c4 	movi	r2,31
   45b6c:	10c0c916 	blt	r2,r3,45e94 <__adddf3+0x45c>
   45b70:	00800804 	movi	r2,32
   45b74:	10c5c83a 	sub	r2,r2,r3
   45b78:	408e983a 	sll	r7,r8,r2
   45b7c:	30c8d83a 	srl	r4,r6,r3
   45b80:	3084983a 	sll	r2,r6,r2
   45b84:	40c6d83a 	srl	r3,r8,r3
   45b88:	390cb03a 	or	r6,r7,r4
   45b8c:	1004c03a 	cmpne	r2,r2,zero
   45b90:	308cb03a 	or	r6,r6,r2
   45b94:	898dc83a 	sub	r6,r17,r6
   45b98:	89a3803a 	cmpltu	r17,r17,r6
   45b9c:	28cbc83a 	sub	r5,r5,r3
   45ba0:	2c4bc83a 	sub	r5,r5,r17
   45ba4:	3023883a 	mov	r17,r6
   45ba8:	2880202c 	andhi	r2,r5,128
   45bac:	10006d26 	beq	r2,zero,45d64 <__adddf3+0x32c>
   45bb0:	04c02034 	movhi	r19,128
   45bb4:	9cffffc4 	addi	r19,r19,-1
   45bb8:	2ce6703a 	and	r19,r5,r19
   45bbc:	98007e26 	beq	r19,zero,45db8 <__adddf3+0x380>
   45bc0:	9809883a 	mov	r4,r19
   45bc4:	0047f600 	call	47f60 <__clzsi2>
   45bc8:	10fffe04 	addi	r3,r2,-8
   45bcc:	010007c4 	movi	r4,31
   45bd0:	20c07f16 	blt	r4,r3,45dd0 <__adddf3+0x398>
   45bd4:	01400a04 	movi	r5,40
   45bd8:	2885c83a 	sub	r2,r5,r2
   45bdc:	888ad83a 	srl	r5,r17,r2
   45be0:	98e6983a 	sll	r19,r19,r3
   45be4:	88e2983a 	sll	r17,r17,r3
   45be8:	2ce6b03a 	or	r19,r5,r19
   45bec:	1c007c16 	blt	r3,r16,45de0 <__adddf3+0x3a8>
   45bf0:	1c21c83a 	sub	r16,r3,r16
   45bf4:	81400044 	addi	r5,r16,1
   45bf8:	00c007c4 	movi	r3,31
   45bfc:	19409816 	blt	r3,r5,45e60 <__adddf3+0x428>
   45c00:	1c21c83a 	sub	r16,r3,r16
   45c04:	8c08983a 	sll	r4,r17,r16
   45c08:	8946d83a 	srl	r3,r17,r5
   45c0c:	9c20983a 	sll	r16,r19,r16
   45c10:	2008c03a 	cmpne	r4,r4,zero
   45c14:	994ad83a 	srl	r5,r19,r5
   45c18:	1c06b03a 	or	r3,r3,r16
   45c1c:	1922b03a 	or	r17,r3,r4
   45c20:	0021883a 	mov	r16,zero
   45c24:	003fa306 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   45c28:	2880202c 	andhi	r2,r5,128
   45c2c:	9007883a 	mov	r3,r18
   45c30:	103fac1e 	bne	r2,zero,45ae4 <__alt_data_end+0xfffd3ae4>
   45c34:	2804977a 	slli	r2,r5,29
   45c38:	8822d0fa 	srli	r17,r17,3
   45c3c:	0101ffc4 	movi	r4,2047
   45c40:	280ad0fa 	srli	r5,r5,3
   45c44:	1444b03a 	or	r2,r2,r17
   45c48:	81002c26 	beq	r16,r4,45cfc <__adddf3+0x2c4>
   45c4c:	8120703a 	and	r16,r16,r4
   45c50:	01000434 	movhi	r4,16
   45c54:	213fffc4 	addi	r4,r4,-1
   45c58:	2908703a 	and	r4,r5,r4
   45c5c:	003fad06 	br	45b14 <__alt_data_end+0xfffd3b14>
   45c60:	8089c83a 	sub	r4,r16,r2
   45c64:	01006a0e 	bge	zero,r4,45e10 <__adddf3+0x3d8>
   45c68:	10003326 	beq	r2,zero,45d38 <__adddf3+0x300>
   45c6c:	0081ffc4 	movi	r2,2047
   45c70:	80bf9026 	beq	r16,r2,45ab4 <__alt_data_end+0xfffd3ab4>
   45c74:	42002034 	orhi	r8,r8,128
   45c78:	00800e04 	movi	r2,56
   45c7c:	1100b116 	blt	r2,r4,45f44 <__adddf3+0x50c>
   45c80:	008007c4 	movi	r2,31
   45c84:	1100e216 	blt	r2,r4,46010 <__adddf3+0x5d8>
   45c88:	00800804 	movi	r2,32
   45c8c:	1105c83a 	sub	r2,r2,r4
   45c90:	4092983a 	sll	r9,r8,r2
   45c94:	310ed83a 	srl	r7,r6,r4
   45c98:	3084983a 	sll	r2,r6,r2
   45c9c:	4110d83a 	srl	r8,r8,r4
   45ca0:	49ccb03a 	or	r6,r9,r7
   45ca4:	1004c03a 	cmpne	r2,r2,zero
   45ca8:	308cb03a 	or	r6,r6,r2
   45cac:	344d883a 	add	r6,r6,r17
   45cb0:	3463803a 	cmpltu	r17,r6,r17
   45cb4:	414b883a 	add	r5,r8,r5
   45cb8:	2c4b883a 	add	r5,r5,r17
   45cbc:	3023883a 	mov	r17,r6
   45cc0:	2880202c 	andhi	r2,r5,128
   45cc4:	10002726 	beq	r2,zero,45d64 <__adddf3+0x32c>
   45cc8:	84000044 	addi	r16,r16,1
   45ccc:	0081ffc4 	movi	r2,2047
   45cd0:	8080ae26 	beq	r16,r2,45f8c <__adddf3+0x554>
   45cd4:	00bfe034 	movhi	r2,65408
   45cd8:	10bfffc4 	addi	r2,r2,-1
   45cdc:	288a703a 	and	r5,r5,r2
   45ce0:	880cd07a 	srli	r6,r17,1
   45ce4:	280897fa 	slli	r4,r5,31
   45ce8:	88c0004c 	andi	r3,r17,1
   45cec:	30e2b03a 	or	r17,r6,r3
   45cf0:	280ad07a 	srli	r5,r5,1
   45cf4:	8922b03a 	or	r17,r17,r4
   45cf8:	003f6e06 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   45cfc:	1148b03a 	or	r4,r2,r5
   45d00:	20003c26 	beq	r4,zero,45df4 <__adddf3+0x3bc>
   45d04:	29000234 	orhi	r4,r5,8
   45d08:	01400434 	movhi	r5,16
   45d0c:	297fffc4 	addi	r5,r5,-1
   45d10:	2148703a 	and	r4,r4,r5
   45d14:	003f7f06 	br	45b14 <__alt_data_end+0xfffd3b14>
   45d18:	18ffffc4 	addi	r3,r3,-1
   45d1c:	18004d1e 	bne	r3,zero,45e54 <__adddf3+0x41c>
   45d20:	898dc83a 	sub	r6,r17,r6
   45d24:	89a3803a 	cmpltu	r17,r17,r6
   45d28:	2a0bc83a 	sub	r5,r5,r8
   45d2c:	2c4bc83a 	sub	r5,r5,r17
   45d30:	3023883a 	mov	r17,r6
   45d34:	003f9c06 	br	45ba8 <__alt_data_end+0xfffd3ba8>
   45d38:	4184b03a 	or	r2,r8,r6
   45d3c:	103f5d26 	beq	r2,zero,45ab4 <__alt_data_end+0xfffd3ab4>
   45d40:	213fffc4 	addi	r4,r4,-1
   45d44:	203fd926 	beq	r4,zero,45cac <__alt_data_end+0xfffd3cac>
   45d48:	0081ffc4 	movi	r2,2047
   45d4c:	80bfca1e 	bne	r16,r2,45c78 <__alt_data_end+0xfffd3c78>
   45d50:	003f5806 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   45d54:	10c8b03a 	or	r4,r2,r3
   45d58:	20008b26 	beq	r4,zero,45f88 <__adddf3+0x550>
   45d5c:	100b883a 	mov	r5,r2
   45d60:	1823883a 	mov	r17,r3
   45d64:	888001cc 	andi	r2,r17,7
   45d68:	103f541e 	bne	r2,zero,45abc <__alt_data_end+0xfffd3abc>
   45d6c:	9007883a 	mov	r3,r18
   45d70:	003fb006 	br	45c34 <__alt_data_end+0xfffd3c34>
   45d74:	1800531e 	bne	r3,zero,45ec4 <__adddf3+0x48c>
   45d78:	80800044 	addi	r2,r16,1
   45d7c:	1081ffcc 	andi	r2,r2,2047
   45d80:	00c00044 	movi	r3,1
   45d84:	1880990e 	bge	r3,r2,45fec <__adddf3+0x5b4>
   45d88:	8985c83a 	sub	r2,r17,r6
   45d8c:	8887803a 	cmpltu	r3,r17,r2
   45d90:	2a27c83a 	sub	r19,r5,r8
   45d94:	98e7c83a 	sub	r19,r19,r3
   45d98:	98c0202c 	andhi	r3,r19,128
   45d9c:	18006226 	beq	r3,zero,45f28 <__adddf3+0x4f0>
   45da0:	3463c83a 	sub	r17,r6,r17
   45da4:	4151c83a 	sub	r8,r8,r5
   45da8:	344d803a 	cmpltu	r6,r6,r17
   45dac:	41a7c83a 	sub	r19,r8,r6
   45db0:	3825883a 	mov	r18,r7
   45db4:	983f821e 	bne	r19,zero,45bc0 <__alt_data_end+0xfffd3bc0>
   45db8:	8809883a 	mov	r4,r17
   45dbc:	0047f600 	call	47f60 <__clzsi2>
   45dc0:	10800804 	addi	r2,r2,32
   45dc4:	10fffe04 	addi	r3,r2,-8
   45dc8:	010007c4 	movi	r4,31
   45dcc:	20ff810e 	bge	r4,r3,45bd4 <__alt_data_end+0xfffd3bd4>
   45dd0:	14fff604 	addi	r19,r2,-40
   45dd4:	8ce6983a 	sll	r19,r17,r19
   45dd8:	0023883a 	mov	r17,zero
   45ddc:	1c3f840e 	bge	r3,r16,45bf0 <__alt_data_end+0xfffd3bf0>
   45de0:	017fe034 	movhi	r5,65408
   45de4:	297fffc4 	addi	r5,r5,-1
   45de8:	80e1c83a 	sub	r16,r16,r3
   45dec:	994a703a 	and	r5,r19,r5
   45df0:	003f3006 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   45df4:	0009883a 	mov	r4,zero
   45df8:	0005883a 	mov	r2,zero
   45dfc:	003f4506 	br	45b14 <__alt_data_end+0xfffd3b14>
   45e00:	418cb03a 	or	r6,r8,r6
   45e04:	300cc03a 	cmpne	r6,r6,zero
   45e08:	0007883a 	mov	r3,zero
   45e0c:	003f6106 	br	45b94 <__alt_data_end+0xfffd3b94>
   45e10:	2000921e 	bne	r4,zero,4605c <__adddf3+0x624>
   45e14:	80800044 	addi	r2,r16,1
   45e18:	11c1ffcc 	andi	r7,r2,2047
   45e1c:	01000044 	movi	r4,1
   45e20:	21c0610e 	bge	r4,r7,45fa8 <__adddf3+0x570>
   45e24:	0101ffc4 	movi	r4,2047
   45e28:	1100a326 	beq	r2,r4,460b8 <__adddf3+0x680>
   45e2c:	344d883a 	add	r6,r6,r17
   45e30:	3463803a 	cmpltu	r17,r6,r17
   45e34:	414b883a 	add	r5,r8,r5
   45e38:	2c4b883a 	add	r5,r5,r17
   45e3c:	282297fa 	slli	r17,r5,31
   45e40:	300cd07a 	srli	r6,r6,1
   45e44:	280ad07a 	srli	r5,r5,1
   45e48:	1021883a 	mov	r16,r2
   45e4c:	89a2b03a 	or	r17,r17,r6
   45e50:	003f1806 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   45e54:	0081ffc4 	movi	r2,2047
   45e58:	80bf411e 	bne	r16,r2,45b60 <__alt_data_end+0xfffd3b60>
   45e5c:	003f1506 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   45e60:	80bff844 	addi	r2,r16,-31
   45e64:	00c00804 	movi	r3,32
   45e68:	9884d83a 	srl	r2,r19,r2
   45e6c:	28c04a26 	beq	r5,r3,45f98 <__adddf3+0x560>
   45e70:	00c00fc4 	movi	r3,63
   45e74:	1c21c83a 	sub	r16,r3,r16
   45e78:	9c26983a 	sll	r19,r19,r16
   45e7c:	9c62b03a 	or	r17,r19,r17
   45e80:	8822c03a 	cmpne	r17,r17,zero
   45e84:	88a2b03a 	or	r17,r17,r2
   45e88:	000b883a 	mov	r5,zero
   45e8c:	0021883a 	mov	r16,zero
   45e90:	003fb406 	br	45d64 <__alt_data_end+0xfffd3d64>
   45e94:	18bff804 	addi	r2,r3,-32
   45e98:	01000804 	movi	r4,32
   45e9c:	4084d83a 	srl	r2,r8,r2
   45ea0:	19003f26 	beq	r3,r4,45fa0 <__adddf3+0x568>
   45ea4:	01001004 	movi	r4,64
   45ea8:	20c7c83a 	sub	r3,r4,r3
   45eac:	40d0983a 	sll	r8,r8,r3
   45eb0:	418cb03a 	or	r6,r8,r6
   45eb4:	300cc03a 	cmpne	r6,r6,zero
   45eb8:	308cb03a 	or	r6,r6,r2
   45ebc:	0007883a 	mov	r3,zero
   45ec0:	003f3406 	br	45b94 <__alt_data_end+0xfffd3b94>
   45ec4:	80002326 	beq	r16,zero,45f54 <__adddf3+0x51c>
   45ec8:	0101ffc4 	movi	r4,2047
   45ecc:	11005e26 	beq	r2,r4,46048 <__adddf3+0x610>
   45ed0:	00c7c83a 	sub	r3,zero,r3
   45ed4:	29402034 	orhi	r5,r5,128
   45ed8:	01000e04 	movi	r4,56
   45edc:	20c07216 	blt	r4,r3,460a8 <__adddf3+0x670>
   45ee0:	010007c4 	movi	r4,31
   45ee4:	20c0ce16 	blt	r4,r3,46220 <__adddf3+0x7e8>
   45ee8:	01000804 	movi	r4,32
   45eec:	20c9c83a 	sub	r4,r4,r3
   45ef0:	2914983a 	sll	r10,r5,r4
   45ef4:	88d2d83a 	srl	r9,r17,r3
   45ef8:	8908983a 	sll	r4,r17,r4
   45efc:	28c6d83a 	srl	r3,r5,r3
   45f00:	5262b03a 	or	r17,r10,r9
   45f04:	2008c03a 	cmpne	r4,r4,zero
   45f08:	8922b03a 	or	r17,r17,r4
   45f0c:	3463c83a 	sub	r17,r6,r17
   45f10:	40c7c83a 	sub	r3,r8,r3
   45f14:	344d803a 	cmpltu	r6,r6,r17
   45f18:	198bc83a 	sub	r5,r3,r6
   45f1c:	1021883a 	mov	r16,r2
   45f20:	3825883a 	mov	r18,r7
   45f24:	003f2006 	br	45ba8 <__alt_data_end+0xfffd3ba8>
   45f28:	9886b03a 	or	r3,r19,r2
   45f2c:	1800141e 	bne	r3,zero,45f80 <__adddf3+0x548>
   45f30:	0007883a 	mov	r3,zero
   45f34:	000b883a 	mov	r5,zero
   45f38:	0023883a 	mov	r17,zero
   45f3c:	0021883a 	mov	r16,zero
   45f40:	003f3c06 	br	45c34 <__alt_data_end+0xfffd3c34>
   45f44:	418cb03a 	or	r6,r8,r6
   45f48:	300cc03a 	cmpne	r6,r6,zero
   45f4c:	0011883a 	mov	r8,zero
   45f50:	003f5606 	br	45cac <__alt_data_end+0xfffd3cac>
   45f54:	2c48b03a 	or	r4,r5,r17
   45f58:	20003b26 	beq	r4,zero,46048 <__adddf3+0x610>
   45f5c:	00c6303a 	nor	r3,zero,r3
   45f60:	1800371e 	bne	r3,zero,46040 <__adddf3+0x608>
   45f64:	3463c83a 	sub	r17,r6,r17
   45f68:	414bc83a 	sub	r5,r8,r5
   45f6c:	344d803a 	cmpltu	r6,r6,r17
   45f70:	298bc83a 	sub	r5,r5,r6
   45f74:	1021883a 	mov	r16,r2
   45f78:	3825883a 	mov	r18,r7
   45f7c:	003f0a06 	br	45ba8 <__alt_data_end+0xfffd3ba8>
   45f80:	1023883a 	mov	r17,r2
   45f84:	003f0d06 	br	45bbc <__alt_data_end+0xfffd3bbc>
   45f88:	0007883a 	mov	r3,zero
   45f8c:	000b883a 	mov	r5,zero
   45f90:	0023883a 	mov	r17,zero
   45f94:	003f2706 	br	45c34 <__alt_data_end+0xfffd3c34>
   45f98:	0027883a 	mov	r19,zero
   45f9c:	003fb706 	br	45e7c <__alt_data_end+0xfffd3e7c>
   45fa0:	0011883a 	mov	r8,zero
   45fa4:	003fc206 	br	45eb0 <__alt_data_end+0xfffd3eb0>
   45fa8:	2c44b03a 	or	r2,r5,r17
   45fac:	8000871e 	bne	r16,zero,461cc <__adddf3+0x794>
   45fb0:	1000b126 	beq	r2,zero,46278 <__adddf3+0x840>
   45fb4:	4184b03a 	or	r2,r8,r6
   45fb8:	103ebe26 	beq	r2,zero,45ab4 <__alt_data_end+0xfffd3ab4>
   45fbc:	3445883a 	add	r2,r6,r17
   45fc0:	1463803a 	cmpltu	r17,r2,r17
   45fc4:	414b883a 	add	r5,r8,r5
   45fc8:	2c4b883a 	add	r5,r5,r17
   45fcc:	28c0202c 	andhi	r3,r5,128
   45fd0:	1023883a 	mov	r17,r2
   45fd4:	183f6326 	beq	r3,zero,45d64 <__alt_data_end+0xfffd3d64>
   45fd8:	00bfe034 	movhi	r2,65408
   45fdc:	10bfffc4 	addi	r2,r2,-1
   45fe0:	2021883a 	mov	r16,r4
   45fe4:	288a703a 	and	r5,r5,r2
   45fe8:	003eb206 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   45fec:	2c44b03a 	or	r2,r5,r17
   45ff0:	8000251e 	bne	r16,zero,46088 <__adddf3+0x650>
   45ff4:	10004b1e 	bne	r2,zero,46124 <__adddf3+0x6ec>
   45ff8:	4184b03a 	or	r2,r8,r6
   45ffc:	103fe226 	beq	r2,zero,45f88 <__alt_data_end+0xfffd3f88>
   46000:	400b883a 	mov	r5,r8
   46004:	3023883a 	mov	r17,r6
   46008:	3825883a 	mov	r18,r7
   4600c:	003ea906 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   46010:	20bff804 	addi	r2,r4,-32
   46014:	01c00804 	movi	r7,32
   46018:	4084d83a 	srl	r2,r8,r2
   4601c:	21c07e26 	beq	r4,r7,46218 <__adddf3+0x7e0>
   46020:	01c01004 	movi	r7,64
   46024:	3909c83a 	sub	r4,r7,r4
   46028:	4110983a 	sll	r8,r8,r4
   4602c:	418cb03a 	or	r6,r8,r6
   46030:	300cc03a 	cmpne	r6,r6,zero
   46034:	308cb03a 	or	r6,r6,r2
   46038:	0011883a 	mov	r8,zero
   4603c:	003f1b06 	br	45cac <__alt_data_end+0xfffd3cac>
   46040:	0101ffc4 	movi	r4,2047
   46044:	113fa41e 	bne	r2,r4,45ed8 <__alt_data_end+0xfffd3ed8>
   46048:	400b883a 	mov	r5,r8
   4604c:	3023883a 	mov	r17,r6
   46050:	1021883a 	mov	r16,r2
   46054:	3825883a 	mov	r18,r7
   46058:	003e9606 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   4605c:	80001a1e 	bne	r16,zero,460c8 <__adddf3+0x690>
   46060:	2c4eb03a 	or	r7,r5,r17
   46064:	38005526 	beq	r7,zero,461bc <__adddf3+0x784>
   46068:	0108303a 	nor	r4,zero,r4
   4606c:	2000511e 	bne	r4,zero,461b4 <__adddf3+0x77c>
   46070:	89a3883a 	add	r17,r17,r6
   46074:	414b883a 	add	r5,r8,r5
   46078:	898d803a 	cmpltu	r6,r17,r6
   4607c:	298b883a 	add	r5,r5,r6
   46080:	1021883a 	mov	r16,r2
   46084:	003f0e06 	br	45cc0 <__alt_data_end+0xfffd3cc0>
   46088:	1000341e 	bne	r2,zero,4615c <__adddf3+0x724>
   4608c:	4184b03a 	or	r2,r8,r6
   46090:	10006f26 	beq	r2,zero,46250 <__adddf3+0x818>
   46094:	400b883a 	mov	r5,r8
   46098:	3023883a 	mov	r17,r6
   4609c:	3825883a 	mov	r18,r7
   460a0:	0401ffc4 	movi	r16,2047
   460a4:	003e8306 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   460a8:	2c62b03a 	or	r17,r5,r17
   460ac:	8822c03a 	cmpne	r17,r17,zero
   460b0:	0007883a 	mov	r3,zero
   460b4:	003f9506 	br	45f0c <__alt_data_end+0xfffd3f0c>
   460b8:	1021883a 	mov	r16,r2
   460bc:	000b883a 	mov	r5,zero
   460c0:	0023883a 	mov	r17,zero
   460c4:	003edb06 	br	45c34 <__alt_data_end+0xfffd3c34>
   460c8:	01c1ffc4 	movi	r7,2047
   460cc:	11c03b26 	beq	r2,r7,461bc <__adddf3+0x784>
   460d0:	0109c83a 	sub	r4,zero,r4
   460d4:	29402034 	orhi	r5,r5,128
   460d8:	01c00e04 	movi	r7,56
   460dc:	39006216 	blt	r7,r4,46268 <__adddf3+0x830>
   460e0:	01c007c4 	movi	r7,31
   460e4:	39006b16 	blt	r7,r4,46294 <__adddf3+0x85c>
   460e8:	01c00804 	movi	r7,32
   460ec:	390fc83a 	sub	r7,r7,r4
   460f0:	29d4983a 	sll	r10,r5,r7
   460f4:	8912d83a 	srl	r9,r17,r4
   460f8:	89ce983a 	sll	r7,r17,r7
   460fc:	2908d83a 	srl	r4,r5,r4
   46100:	5262b03a 	or	r17,r10,r9
   46104:	380ac03a 	cmpne	r5,r7,zero
   46108:	8962b03a 	or	r17,r17,r5
   4610c:	89a3883a 	add	r17,r17,r6
   46110:	2211883a 	add	r8,r4,r8
   46114:	898d803a 	cmpltu	r6,r17,r6
   46118:	418b883a 	add	r5,r8,r6
   4611c:	1021883a 	mov	r16,r2
   46120:	003ee706 	br	45cc0 <__alt_data_end+0xfffd3cc0>
   46124:	4184b03a 	or	r2,r8,r6
   46128:	103e6226 	beq	r2,zero,45ab4 <__alt_data_end+0xfffd3ab4>
   4612c:	8987c83a 	sub	r3,r17,r6
   46130:	88c9803a 	cmpltu	r4,r17,r3
   46134:	2a05c83a 	sub	r2,r5,r8
   46138:	1105c83a 	sub	r2,r2,r4
   4613c:	1100202c 	andhi	r4,r2,128
   46140:	203f0426 	beq	r4,zero,45d54 <__alt_data_end+0xfffd3d54>
   46144:	3463c83a 	sub	r17,r6,r17
   46148:	414bc83a 	sub	r5,r8,r5
   4614c:	344d803a 	cmpltu	r6,r6,r17
   46150:	298bc83a 	sub	r5,r5,r6
   46154:	3825883a 	mov	r18,r7
   46158:	003e5606 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   4615c:	4184b03a 	or	r2,r8,r6
   46160:	10002b26 	beq	r2,zero,46210 <__adddf3+0x7d8>
   46164:	2804d0fa 	srli	r2,r5,3
   46168:	8822d0fa 	srli	r17,r17,3
   4616c:	280a977a 	slli	r5,r5,29
   46170:	10c0022c 	andhi	r3,r2,8
   46174:	2c62b03a 	or	r17,r5,r17
   46178:	18000826 	beq	r3,zero,4619c <__adddf3+0x764>
   4617c:	4008d0fa 	srli	r4,r8,3
   46180:	20c0022c 	andhi	r3,r4,8
   46184:	1800051e 	bne	r3,zero,4619c <__adddf3+0x764>
   46188:	300cd0fa 	srli	r6,r6,3
   4618c:	4010977a 	slli	r8,r8,29
   46190:	2005883a 	mov	r2,r4
   46194:	3825883a 	mov	r18,r7
   46198:	41a2b03a 	or	r17,r8,r6
   4619c:	880ad77a 	srli	r5,r17,29
   461a0:	100490fa 	slli	r2,r2,3
   461a4:	882290fa 	slli	r17,r17,3
   461a8:	0401ffc4 	movi	r16,2047
   461ac:	288ab03a 	or	r5,r5,r2
   461b0:	003e4006 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   461b4:	01c1ffc4 	movi	r7,2047
   461b8:	11ffc71e 	bne	r2,r7,460d8 <__alt_data_end+0xfffd40d8>
   461bc:	400b883a 	mov	r5,r8
   461c0:	3023883a 	mov	r17,r6
   461c4:	1021883a 	mov	r16,r2
   461c8:	003e3a06 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   461cc:	10002d26 	beq	r2,zero,46284 <__adddf3+0x84c>
   461d0:	4184b03a 	or	r2,r8,r6
   461d4:	10000e26 	beq	r2,zero,46210 <__adddf3+0x7d8>
   461d8:	2804d0fa 	srli	r2,r5,3
   461dc:	8822d0fa 	srli	r17,r17,3
   461e0:	280a977a 	slli	r5,r5,29
   461e4:	10c0022c 	andhi	r3,r2,8
   461e8:	2c62b03a 	or	r17,r5,r17
   461ec:	183feb26 	beq	r3,zero,4619c <__alt_data_end+0xfffd419c>
   461f0:	4008d0fa 	srli	r4,r8,3
   461f4:	20c0022c 	andhi	r3,r4,8
   461f8:	183fe81e 	bne	r3,zero,4619c <__alt_data_end+0xfffd419c>
   461fc:	300cd0fa 	srli	r6,r6,3
   46200:	4010977a 	slli	r8,r8,29
   46204:	2005883a 	mov	r2,r4
   46208:	41a2b03a 	or	r17,r8,r6
   4620c:	003fe306 	br	4619c <__alt_data_end+0xfffd419c>
   46210:	0401ffc4 	movi	r16,2047
   46214:	003e2706 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   46218:	0011883a 	mov	r8,zero
   4621c:	003f8306 	br	4602c <__alt_data_end+0xfffd402c>
   46220:	193ff804 	addi	r4,r3,-32
   46224:	02400804 	movi	r9,32
   46228:	2908d83a 	srl	r4,r5,r4
   4622c:	1a402526 	beq	r3,r9,462c4 <__adddf3+0x88c>
   46230:	02401004 	movi	r9,64
   46234:	48c7c83a 	sub	r3,r9,r3
   46238:	28ca983a 	sll	r5,r5,r3
   4623c:	2c62b03a 	or	r17,r5,r17
   46240:	8822c03a 	cmpne	r17,r17,zero
   46244:	8922b03a 	or	r17,r17,r4
   46248:	0007883a 	mov	r3,zero
   4624c:	003f2f06 	br	45f0c <__alt_data_end+0xfffd3f0c>
   46250:	01402034 	movhi	r5,128
   46254:	0007883a 	mov	r3,zero
   46258:	297fffc4 	addi	r5,r5,-1
   4625c:	047ffe04 	movi	r17,-8
   46260:	0401ffc4 	movi	r16,2047
   46264:	003e7306 	br	45c34 <__alt_data_end+0xfffd3c34>
   46268:	2c62b03a 	or	r17,r5,r17
   4626c:	8822c03a 	cmpne	r17,r17,zero
   46270:	0009883a 	mov	r4,zero
   46274:	003fa506 	br	4610c <__alt_data_end+0xfffd410c>
   46278:	400b883a 	mov	r5,r8
   4627c:	3023883a 	mov	r17,r6
   46280:	003e0c06 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   46284:	400b883a 	mov	r5,r8
   46288:	3023883a 	mov	r17,r6
   4628c:	0401ffc4 	movi	r16,2047
   46290:	003e0806 	br	45ab4 <__alt_data_end+0xfffd3ab4>
   46294:	21fff804 	addi	r7,r4,-32
   46298:	02400804 	movi	r9,32
   4629c:	29ced83a 	srl	r7,r5,r7
   462a0:	22400a26 	beq	r4,r9,462cc <__adddf3+0x894>
   462a4:	02401004 	movi	r9,64
   462a8:	4909c83a 	sub	r4,r9,r4
   462ac:	290a983a 	sll	r5,r5,r4
   462b0:	2c62b03a 	or	r17,r5,r17
   462b4:	8822c03a 	cmpne	r17,r17,zero
   462b8:	89e2b03a 	or	r17,r17,r7
   462bc:	0009883a 	mov	r4,zero
   462c0:	003f9206 	br	4610c <__alt_data_end+0xfffd410c>
   462c4:	000b883a 	mov	r5,zero
   462c8:	003fdc06 	br	4623c <__alt_data_end+0xfffd423c>
   462cc:	000b883a 	mov	r5,zero
   462d0:	003ff706 	br	462b0 <__alt_data_end+0xfffd42b0>

000462d4 <__divdf3>:
   462d4:	defff204 	addi	sp,sp,-56
   462d8:	dd000815 	stw	r20,32(sp)
   462dc:	2828d53a 	srli	r20,r5,20
   462e0:	dd800a15 	stw	r22,40(sp)
   462e4:	282cd7fa 	srli	r22,r5,31
   462e8:	dc000415 	stw	r16,16(sp)
   462ec:	04000434 	movhi	r16,16
   462f0:	df000c15 	stw	fp,48(sp)
   462f4:	dcc00715 	stw	r19,28(sp)
   462f8:	dc800615 	stw	r18,24(sp)
   462fc:	dc400515 	stw	r17,20(sp)
   46300:	843fffc4 	addi	r16,r16,-1
   46304:	dfc00d15 	stw	ra,52(sp)
   46308:	ddc00b15 	stw	r23,44(sp)
   4630c:	dd400915 	stw	r21,36(sp)
   46310:	a501ffcc 	andi	r20,r20,2047
   46314:	2025883a 	mov	r18,r4
   46318:	2027883a 	mov	r19,r4
   4631c:	2c22703a 	and	r17,r5,r16
   46320:	b7003fcc 	andi	fp,r22,255
   46324:	a0005e26 	beq	r20,zero,464a0 <__divdf3+0x1cc>
   46328:	0081ffc4 	movi	r2,2047
   4632c:	a0803526 	beq	r20,r2,46404 <__divdf3+0x130>
   46330:	8c000434 	orhi	r16,r17,16
   46334:	2004d77a 	srli	r2,r4,29
   46338:	802090fa 	slli	r16,r16,3
   4633c:	202690fa 	slli	r19,r4,3
   46340:	a53f0044 	addi	r20,r20,-1023
   46344:	80a2b03a 	or	r17,r16,r2
   46348:	0025883a 	mov	r18,zero
   4634c:	0011883a 	mov	r8,zero
   46350:	380ad53a 	srli	r5,r7,20
   46354:	382ed7fa 	srli	r23,r7,31
   46358:	04000434 	movhi	r16,16
   4635c:	843fffc4 	addi	r16,r16,-1
   46360:	2941ffcc 	andi	r5,r5,2047
   46364:	302b883a 	mov	r21,r6
   46368:	3c20703a 	and	r16,r7,r16
   4636c:	ba403fcc 	andi	r9,r23,255
   46370:	28006726 	beq	r5,zero,46510 <__divdf3+0x23c>
   46374:	0081ffc4 	movi	r2,2047
   46378:	28805f26 	beq	r5,r2,464f8 <__divdf3+0x224>
   4637c:	84000434 	orhi	r16,r16,16
   46380:	3004d77a 	srli	r2,r6,29
   46384:	802090fa 	slli	r16,r16,3
   46388:	302a90fa 	slli	r21,r6,3
   4638c:	297f0044 	addi	r5,r5,-1023
   46390:	80a0b03a 	or	r16,r16,r2
   46394:	000f883a 	mov	r7,zero
   46398:	3c86b03a 	or	r3,r7,r18
   4639c:	180690ba 	slli	r3,r3,2
   463a0:	00800134 	movhi	r2,4
   463a4:	1098f104 	addi	r2,r2,25540
   463a8:	1887883a 	add	r3,r3,r2
   463ac:	18c00017 	ldw	r3,0(r3)
   463b0:	b5c8f03a 	xor	r4,r22,r23
   463b4:	200d883a 	mov	r6,r4
   463b8:	24803fcc 	andi	r18,r4,255
   463bc:	a169c83a 	sub	r20,r20,r5
   463c0:	1800683a 	jmp	r3
   463c4:	0004660c 	andi	zero,zero,4504
   463c8:	0004643c 	xorhi	zero,zero,4496
   463cc:	000465d0 	cmplti	zero,zero,4503
   463d0:	00046420 	cmpeqi	zero,zero,4496
   463d4:	000465d0 	cmplti	zero,zero,4503
   463d8:	000465a4 	muli	zero,zero,4502
   463dc:	000465d0 	cmplti	zero,zero,4503
   463e0:	00046420 	cmpeqi	zero,zero,4496
   463e4:	0004643c 	xorhi	zero,zero,4496
   463e8:	0004643c 	xorhi	zero,zero,4496
   463ec:	000465a4 	muli	zero,zero,4502
   463f0:	00046420 	cmpeqi	zero,zero,4496
   463f4:	00046430 	cmpltui	zero,zero,4496
   463f8:	00046430 	cmpltui	zero,zero,4496
   463fc:	00046430 	cmpltui	zero,zero,4496
   46400:	000465e0 	cmpeqi	zero,zero,4503
   46404:	8904b03a 	or	r2,r17,r4
   46408:	1000631e 	bne	r2,zero,46598 <__divdf3+0x2c4>
   4640c:	04800204 	movi	r18,8
   46410:	0023883a 	mov	r17,zero
   46414:	0027883a 	mov	r19,zero
   46418:	02000084 	movi	r8,2
   4641c:	003fcc06 	br	46350 <__alt_data_end+0xfffd4350>
   46420:	8023883a 	mov	r17,r16
   46424:	a827883a 	mov	r19,r21
   46428:	4839883a 	mov	fp,r9
   4642c:	3811883a 	mov	r8,r7
   46430:	00800084 	movi	r2,2
   46434:	40812a1e 	bne	r8,r2,468e0 <__divdf3+0x60c>
   46438:	e025883a 	mov	r18,fp
   4643c:	9180004c 	andi	r6,r18,1
   46440:	0101ffc4 	movi	r4,2047
   46444:	000b883a 	mov	r5,zero
   46448:	0027883a 	mov	r19,zero
   4644c:	2008953a 	slli	r4,r4,20
   46450:	30c03fcc 	andi	r3,r6,255
   46454:	04000434 	movhi	r16,16
   46458:	180697fa 	slli	r3,r3,31
   4645c:	843fffc4 	addi	r16,r16,-1
   46460:	2c20703a 	and	r16,r5,r16
   46464:	8120b03a 	or	r16,r16,r4
   46468:	80c6b03a 	or	r3,r16,r3
   4646c:	9805883a 	mov	r2,r19
   46470:	dfc00d17 	ldw	ra,52(sp)
   46474:	df000c17 	ldw	fp,48(sp)
   46478:	ddc00b17 	ldw	r23,44(sp)
   4647c:	dd800a17 	ldw	r22,40(sp)
   46480:	dd400917 	ldw	r21,36(sp)
   46484:	dd000817 	ldw	r20,32(sp)
   46488:	dcc00717 	ldw	r19,28(sp)
   4648c:	dc800617 	ldw	r18,24(sp)
   46490:	dc400517 	ldw	r17,20(sp)
   46494:	dc000417 	ldw	r16,16(sp)
   46498:	dec00e04 	addi	sp,sp,56
   4649c:	f800283a 	ret
   464a0:	8904b03a 	or	r2,r17,r4
   464a4:	10003726 	beq	r2,zero,46584 <__divdf3+0x2b0>
   464a8:	88011c26 	beq	r17,zero,4691c <__divdf3+0x648>
   464ac:	8809883a 	mov	r4,r17
   464b0:	d9800315 	stw	r6,12(sp)
   464b4:	d9c00115 	stw	r7,4(sp)
   464b8:	0047f600 	call	47f60 <__clzsi2>
   464bc:	d9800317 	ldw	r6,12(sp)
   464c0:	d9c00117 	ldw	r7,4(sp)
   464c4:	1007883a 	mov	r3,r2
   464c8:	01000a04 	movi	r4,40
   464cc:	1cfffe04 	addi	r19,r3,-8
   464d0:	20c9c83a 	sub	r4,r4,r3
   464d4:	8cca983a 	sll	r5,r17,r19
   464d8:	9108d83a 	srl	r4,r18,r4
   464dc:	94e6983a 	sll	r19,r18,r19
   464e0:	2162b03a 	or	r17,r4,r5
   464e4:	053f0344 	movi	r20,-1011
   464e8:	a0e9c83a 	sub	r20,r20,r3
   464ec:	0025883a 	mov	r18,zero
   464f0:	0011883a 	mov	r8,zero
   464f4:	003f9606 	br	46350 <__alt_data_end+0xfffd4350>
   464f8:	8184b03a 	or	r2,r16,r6
   464fc:	10001f1e 	bne	r2,zero,4657c <__divdf3+0x2a8>
   46500:	0021883a 	mov	r16,zero
   46504:	002b883a 	mov	r21,zero
   46508:	01c00084 	movi	r7,2
   4650c:	003fa206 	br	46398 <__alt_data_end+0xfffd4398>
   46510:	8184b03a 	or	r2,r16,r6
   46514:	10001526 	beq	r2,zero,4656c <__divdf3+0x298>
   46518:	80010c26 	beq	r16,zero,4694c <__divdf3+0x678>
   4651c:	8009883a 	mov	r4,r16
   46520:	d9800315 	stw	r6,12(sp)
   46524:	da000215 	stw	r8,8(sp)
   46528:	da400015 	stw	r9,0(sp)
   4652c:	0047f600 	call	47f60 <__clzsi2>
   46530:	d9800317 	ldw	r6,12(sp)
   46534:	da000217 	ldw	r8,8(sp)
   46538:	da400017 	ldw	r9,0(sp)
   4653c:	1007883a 	mov	r3,r2
   46540:	01000a04 	movi	r4,40
   46544:	1d7ffe04 	addi	r21,r3,-8
   46548:	20c9c83a 	sub	r4,r4,r3
   4654c:	8560983a 	sll	r16,r16,r21
   46550:	3108d83a 	srl	r4,r6,r4
   46554:	356a983a 	sll	r21,r6,r21
   46558:	2420b03a 	or	r16,r4,r16
   4655c:	017f0344 	movi	r5,-1011
   46560:	28cbc83a 	sub	r5,r5,r3
   46564:	000f883a 	mov	r7,zero
   46568:	003f8b06 	br	46398 <__alt_data_end+0xfffd4398>
   4656c:	0021883a 	mov	r16,zero
   46570:	002b883a 	mov	r21,zero
   46574:	01c00044 	movi	r7,1
   46578:	003f8706 	br	46398 <__alt_data_end+0xfffd4398>
   4657c:	01c000c4 	movi	r7,3
   46580:	003f8506 	br	46398 <__alt_data_end+0xfffd4398>
   46584:	04800104 	movi	r18,4
   46588:	0023883a 	mov	r17,zero
   4658c:	0027883a 	mov	r19,zero
   46590:	02000044 	movi	r8,1
   46594:	003f6e06 	br	46350 <__alt_data_end+0xfffd4350>
   46598:	04800304 	movi	r18,12
   4659c:	020000c4 	movi	r8,3
   465a0:	003f6b06 	br	46350 <__alt_data_end+0xfffd4350>
   465a4:	01400434 	movhi	r5,16
   465a8:	000d883a 	mov	r6,zero
   465ac:	297fffc4 	addi	r5,r5,-1
   465b0:	04ffffc4 	movi	r19,-1
   465b4:	0101ffc4 	movi	r4,2047
   465b8:	003fa406 	br	4644c <__alt_data_end+0xfffd444c>
   465bc:	043f0084 	movi	r16,-1022
   465c0:	8521c83a 	sub	r16,r16,r20
   465c4:	00800e04 	movi	r2,56
   465c8:	1401200e 	bge	r2,r16,46a4c <__divdf3+0x778>
   465cc:	9180004c 	andi	r6,r18,1
   465d0:	0009883a 	mov	r4,zero
   465d4:	000b883a 	mov	r5,zero
   465d8:	0027883a 	mov	r19,zero
   465dc:	003f9b06 	br	4644c <__alt_data_end+0xfffd444c>
   465e0:	8880022c 	andhi	r2,r17,8
   465e4:	1000c726 	beq	r2,zero,46904 <__divdf3+0x630>
   465e8:	8080022c 	andhi	r2,r16,8
   465ec:	1000c51e 	bne	r2,zero,46904 <__divdf3+0x630>
   465f0:	00800434 	movhi	r2,16
   465f4:	81400234 	orhi	r5,r16,8
   465f8:	10bfffc4 	addi	r2,r2,-1
   465fc:	b80d883a 	mov	r6,r23
   46600:	288a703a 	and	r5,r5,r2
   46604:	a827883a 	mov	r19,r21
   46608:	003fea06 	br	465b4 <__alt_data_end+0xfffd45b4>
   4660c:	8440ea36 	bltu	r16,r17,469b8 <__divdf3+0x6e4>
   46610:	8c00e826 	beq	r17,r16,469b4 <__divdf3+0x6e0>
   46614:	a53fffc4 	addi	r20,r20,-1
   46618:	882d883a 	mov	r22,r17
   4661c:	000d883a 	mov	r6,zero
   46620:	a804d63a 	srli	r2,r21,24
   46624:	8020923a 	slli	r16,r16,8
   46628:	b009883a 	mov	r4,r22
   4662c:	d9800315 	stw	r6,12(sp)
   46630:	1420b03a 	or	r16,r2,r16
   46634:	802ed43a 	srli	r23,r16,16
   46638:	873fffcc 	andi	fp,r16,65535
   4663c:	a82a923a 	slli	r21,r21,8
   46640:	b80b883a 	mov	r5,r23
   46644:	0044bb00 	call	44bb0 <__udivsi3>
   46648:	b009883a 	mov	r4,r22
   4664c:	b80b883a 	mov	r5,r23
   46650:	1023883a 	mov	r17,r2
   46654:	0044bb80 	call	44bb8 <__umodsi3>
   46658:	1004943a 	slli	r2,r2,16
   4665c:	9808d43a 	srli	r4,r19,16
   46660:	8f2d383a 	mul	r22,r17,fp
   46664:	d9800317 	ldw	r6,12(sp)
   46668:	1106b03a 	or	r3,r2,r4
   4666c:	1d80062e 	bgeu	r3,r22,46688 <__divdf3+0x3b4>
   46670:	1c07883a 	add	r3,r3,r16
   46674:	88bfffc4 	addi	r2,r17,-1
   46678:	1c00dc36 	bltu	r3,r16,469ec <__divdf3+0x718>
   4667c:	1d80db2e 	bgeu	r3,r22,469ec <__divdf3+0x718>
   46680:	8c7fff84 	addi	r17,r17,-2
   46684:	1c07883a 	add	r3,r3,r16
   46688:	1dadc83a 	sub	r22,r3,r22
   4668c:	b009883a 	mov	r4,r22
   46690:	b80b883a 	mov	r5,r23
   46694:	d9800315 	stw	r6,12(sp)
   46698:	0044bb00 	call	44bb0 <__udivsi3>
   4669c:	b009883a 	mov	r4,r22
   466a0:	b80b883a 	mov	r5,r23
   466a4:	d8800015 	stw	r2,0(sp)
   466a8:	0044bb80 	call	44bb8 <__umodsi3>
   466ac:	da400017 	ldw	r9,0(sp)
   466b0:	1004943a 	slli	r2,r2,16
   466b4:	9cffffcc 	andi	r19,r19,65535
   466b8:	4f07383a 	mul	r3,r9,fp
   466bc:	14c8b03a 	or	r4,r2,r19
   466c0:	d9800317 	ldw	r6,12(sp)
   466c4:	20c0062e 	bgeu	r4,r3,466e0 <__divdf3+0x40c>
   466c8:	2409883a 	add	r4,r4,r16
   466cc:	48bfffc4 	addi	r2,r9,-1
   466d0:	2400c436 	bltu	r4,r16,469e4 <__divdf3+0x710>
   466d4:	20c0c32e 	bgeu	r4,r3,469e4 <__divdf3+0x710>
   466d8:	4a7fff84 	addi	r9,r9,-2
   466dc:	2409883a 	add	r4,r4,r16
   466e0:	8822943a 	slli	r17,r17,16
   466e4:	a80ed43a 	srli	r7,r21,16
   466e8:	aa3fffcc 	andi	r8,r21,65535
   466ec:	4c62b03a 	or	r17,r9,r17
   466f0:	8816d43a 	srli	r11,r17,16
   466f4:	897fffcc 	andi	r5,r17,65535
   466f8:	2a15383a 	mul	r10,r5,r8
   466fc:	5a19383a 	mul	r12,r11,r8
   46700:	29cb383a 	mul	r5,r5,r7
   46704:	5012d43a 	srli	r9,r10,16
   46708:	20c5c83a 	sub	r2,r4,r3
   4670c:	614b883a 	add	r5,r12,r5
   46710:	2a4b883a 	add	r5,r5,r9
   46714:	59c7383a 	mul	r3,r11,r7
   46718:	2b00022e 	bgeu	r5,r12,46724 <__divdf3+0x450>
   4671c:	01000074 	movhi	r4,1
   46720:	1907883a 	add	r3,r3,r4
   46724:	2808d43a 	srli	r4,r5,16
   46728:	280a943a 	slli	r5,r5,16
   4672c:	54ffffcc 	andi	r19,r10,65535
   46730:	1907883a 	add	r3,r3,r4
   46734:	2ccb883a 	add	r5,r5,r19
   46738:	10c09336 	bltu	r2,r3,46988 <__divdf3+0x6b4>
   4673c:	10c0ad26 	beq	r2,r3,469f4 <__divdf3+0x720>
   46740:	10c7c83a 	sub	r3,r2,r3
   46744:	3167c83a 	sub	r19,r6,r5
   46748:	34ed803a 	cmpltu	r22,r6,r19
   4674c:	1dadc83a 	sub	r22,r3,r22
   46750:	b400b226 	beq	r22,r16,46a1c <__divdf3+0x748>
   46754:	b009883a 	mov	r4,r22
   46758:	b80b883a 	mov	r5,r23
   4675c:	d9c00115 	stw	r7,4(sp)
   46760:	da000215 	stw	r8,8(sp)
   46764:	0044bb00 	call	44bb0 <__udivsi3>
   46768:	b009883a 	mov	r4,r22
   4676c:	b80b883a 	mov	r5,r23
   46770:	d8800315 	stw	r2,12(sp)
   46774:	0044bb80 	call	44bb8 <__umodsi3>
   46778:	d9800317 	ldw	r6,12(sp)
   4677c:	1004943a 	slli	r2,r2,16
   46780:	9808d43a 	srli	r4,r19,16
   46784:	372d383a 	mul	r22,r6,fp
   46788:	d9c00117 	ldw	r7,4(sp)
   4678c:	1106b03a 	or	r3,r2,r4
   46790:	da000217 	ldw	r8,8(sp)
   46794:	1d80062e 	bgeu	r3,r22,467b0 <__divdf3+0x4dc>
   46798:	1c07883a 	add	r3,r3,r16
   4679c:	30bfffc4 	addi	r2,r6,-1
   467a0:	1c00a036 	bltu	r3,r16,46a24 <__divdf3+0x750>
   467a4:	1d809f2e 	bgeu	r3,r22,46a24 <__divdf3+0x750>
   467a8:	31bfff84 	addi	r6,r6,-2
   467ac:	1c07883a 	add	r3,r3,r16
   467b0:	1dadc83a 	sub	r22,r3,r22
   467b4:	b009883a 	mov	r4,r22
   467b8:	b80b883a 	mov	r5,r23
   467bc:	d9800315 	stw	r6,12(sp)
   467c0:	d9c00115 	stw	r7,4(sp)
   467c4:	da000215 	stw	r8,8(sp)
   467c8:	0044bb00 	call	44bb0 <__udivsi3>
   467cc:	b009883a 	mov	r4,r22
   467d0:	b80b883a 	mov	r5,r23
   467d4:	d8800015 	stw	r2,0(sp)
   467d8:	0044bb80 	call	44bb8 <__umodsi3>
   467dc:	da400017 	ldw	r9,0(sp)
   467e0:	1004943a 	slli	r2,r2,16
   467e4:	993fffcc 	andi	r4,r19,65535
   467e8:	4f39383a 	mul	fp,r9,fp
   467ec:	1106b03a 	or	r3,r2,r4
   467f0:	d9800317 	ldw	r6,12(sp)
   467f4:	d9c00117 	ldw	r7,4(sp)
   467f8:	da000217 	ldw	r8,8(sp)
   467fc:	1f00062e 	bgeu	r3,fp,46818 <__divdf3+0x544>
   46800:	1c07883a 	add	r3,r3,r16
   46804:	48bfffc4 	addi	r2,r9,-1
   46808:	1c008836 	bltu	r3,r16,46a2c <__divdf3+0x758>
   4680c:	1f00872e 	bgeu	r3,fp,46a2c <__divdf3+0x758>
   46810:	4a7fff84 	addi	r9,r9,-2
   46814:	1c07883a 	add	r3,r3,r16
   46818:	3008943a 	slli	r4,r6,16
   4681c:	1f07c83a 	sub	r3,r3,fp
   46820:	4926b03a 	or	r19,r9,r4
   46824:	993fffcc 	andi	r4,r19,65535
   46828:	980cd43a 	srli	r6,r19,16
   4682c:	220b383a 	mul	r5,r4,r8
   46830:	21c5383a 	mul	r2,r4,r7
   46834:	3211383a 	mul	r8,r6,r8
   46838:	2808d43a 	srli	r4,r5,16
   4683c:	31cf383a 	mul	r7,r6,r7
   46840:	4085883a 	add	r2,r8,r2
   46844:	1105883a 	add	r2,r2,r4
   46848:	1200022e 	bgeu	r2,r8,46854 <__divdf3+0x580>
   4684c:	01000074 	movhi	r4,1
   46850:	390f883a 	add	r7,r7,r4
   46854:	1008d43a 	srli	r4,r2,16
   46858:	1004943a 	slli	r2,r2,16
   4685c:	297fffcc 	andi	r5,r5,65535
   46860:	390f883a 	add	r7,r7,r4
   46864:	1145883a 	add	r2,r2,r5
   46868:	19c06536 	bltu	r3,r7,46a00 <__divdf3+0x72c>
   4686c:	19c09f26 	beq	r3,r7,46aec <__divdf3+0x818>
   46870:	9cc00054 	ori	r19,r19,1
   46874:	a100ffc4 	addi	r4,r20,1023
   46878:	013f500e 	bge	zero,r4,465bc <__alt_data_end+0xfffd45bc>
   4687c:	988001cc 	andi	r2,r19,7
   46880:	10000726 	beq	r2,zero,468a0 <__divdf3+0x5cc>
   46884:	98c003cc 	andi	r3,r19,15
   46888:	00800104 	movi	r2,4
   4688c:	18800426 	beq	r3,r2,468a0 <__divdf3+0x5cc>
   46890:	9885883a 	add	r2,r19,r2
   46894:	14e1803a 	cmpltu	r16,r2,r19
   46898:	8c23883a 	add	r17,r17,r16
   4689c:	1027883a 	mov	r19,r2
   468a0:	8880402c 	andhi	r2,r17,256
   468a4:	10000426 	beq	r2,zero,468b8 <__divdf3+0x5e4>
   468a8:	00bfc034 	movhi	r2,65280
   468ac:	10bfffc4 	addi	r2,r2,-1
   468b0:	a1010004 	addi	r4,r20,1024
   468b4:	88a2703a 	and	r17,r17,r2
   468b8:	0081ff84 	movi	r2,2046
   468bc:	113edf16 	blt	r2,r4,4643c <__alt_data_end+0xfffd443c>
   468c0:	9826d0fa 	srli	r19,r19,3
   468c4:	8804977a 	slli	r2,r17,29
   468c8:	8820927a 	slli	r16,r17,9
   468cc:	2101ffcc 	andi	r4,r4,2047
   468d0:	14e6b03a 	or	r19,r2,r19
   468d4:	800ad33a 	srli	r5,r16,12
   468d8:	9180004c 	andi	r6,r18,1
   468dc:	003edb06 	br	4644c <__alt_data_end+0xfffd444c>
   468e0:	008000c4 	movi	r2,3
   468e4:	4080a826 	beq	r8,r2,46b88 <__divdf3+0x8b4>
   468e8:	00800044 	movi	r2,1
   468ec:	4080551e 	bne	r8,r2,46a44 <__divdf3+0x770>
   468f0:	e00d883a 	mov	r6,fp
   468f4:	0009883a 	mov	r4,zero
   468f8:	000b883a 	mov	r5,zero
   468fc:	0027883a 	mov	r19,zero
   46900:	003ed206 	br	4644c <__alt_data_end+0xfffd444c>
   46904:	00800434 	movhi	r2,16
   46908:	89400234 	orhi	r5,r17,8
   4690c:	10bfffc4 	addi	r2,r2,-1
   46910:	b00d883a 	mov	r6,r22
   46914:	288a703a 	and	r5,r5,r2
   46918:	003f2606 	br	465b4 <__alt_data_end+0xfffd45b4>
   4691c:	d9800315 	stw	r6,12(sp)
   46920:	d9c00115 	stw	r7,4(sp)
   46924:	0047f600 	call	47f60 <__clzsi2>
   46928:	10c00804 	addi	r3,r2,32
   4692c:	010009c4 	movi	r4,39
   46930:	d9800317 	ldw	r6,12(sp)
   46934:	d9c00117 	ldw	r7,4(sp)
   46938:	20fee30e 	bge	r4,r3,464c8 <__alt_data_end+0xfffd44c8>
   4693c:	117ffe04 	addi	r5,r2,-8
   46940:	9162983a 	sll	r17,r18,r5
   46944:	0027883a 	mov	r19,zero
   46948:	003ee606 	br	464e4 <__alt_data_end+0xfffd44e4>
   4694c:	3009883a 	mov	r4,r6
   46950:	d9800315 	stw	r6,12(sp)
   46954:	da000215 	stw	r8,8(sp)
   46958:	da400015 	stw	r9,0(sp)
   4695c:	0047f600 	call	47f60 <__clzsi2>
   46960:	10c00804 	addi	r3,r2,32
   46964:	010009c4 	movi	r4,39
   46968:	d9800317 	ldw	r6,12(sp)
   4696c:	da000217 	ldw	r8,8(sp)
   46970:	da400017 	ldw	r9,0(sp)
   46974:	20fef20e 	bge	r4,r3,46540 <__alt_data_end+0xfffd4540>
   46978:	10bffe04 	addi	r2,r2,-8
   4697c:	a8a0983a 	sll	r16,r21,r2
   46980:	002b883a 	mov	r21,zero
   46984:	003ef506 	br	4655c <__alt_data_end+0xfffd455c>
   46988:	354d883a 	add	r6,r6,r21
   4698c:	3549803a 	cmpltu	r4,r6,r21
   46990:	2409883a 	add	r4,r4,r16
   46994:	2089883a 	add	r4,r4,r2
   46998:	88bfffc4 	addi	r2,r17,-1
   4699c:	81000c2e 	bgeu	r16,r4,469d0 <__divdf3+0x6fc>
   469a0:	20c04436 	bltu	r4,r3,46ab4 <__divdf3+0x7e0>
   469a4:	19006f26 	beq	r3,r4,46b64 <__divdf3+0x890>
   469a8:	20c7c83a 	sub	r3,r4,r3
   469ac:	1023883a 	mov	r17,r2
   469b0:	003f6406 	br	46744 <__alt_data_end+0xfffd4744>
   469b4:	9d7f1736 	bltu	r19,r21,46614 <__alt_data_end+0xfffd4614>
   469b8:	9806d07a 	srli	r3,r19,1
   469bc:	880497fa 	slli	r2,r17,31
   469c0:	980c97fa 	slli	r6,r19,31
   469c4:	882cd07a 	srli	r22,r17,1
   469c8:	18a6b03a 	or	r19,r3,r2
   469cc:	003f1406 	br	46620 <__alt_data_end+0xfffd4620>
   469d0:	243ff51e 	bne	r4,r16,469a8 <__alt_data_end+0xfffd49a8>
   469d4:	357ff22e 	bgeu	r6,r21,469a0 <__alt_data_end+0xfffd49a0>
   469d8:	80c7c83a 	sub	r3,r16,r3
   469dc:	1023883a 	mov	r17,r2
   469e0:	003f5806 	br	46744 <__alt_data_end+0xfffd4744>
   469e4:	1013883a 	mov	r9,r2
   469e8:	003f3d06 	br	466e0 <__alt_data_end+0xfffd46e0>
   469ec:	1023883a 	mov	r17,r2
   469f0:	003f2506 	br	46688 <__alt_data_end+0xfffd4688>
   469f4:	317fe436 	bltu	r6,r5,46988 <__alt_data_end+0xfffd4988>
   469f8:	0007883a 	mov	r3,zero
   469fc:	003f5106 	br	46744 <__alt_data_end+0xfffd4744>
   46a00:	1c07883a 	add	r3,r3,r16
   46a04:	993fffc4 	addi	r4,r19,-1
   46a08:	1c000a2e 	bgeu	r3,r16,46a34 <__divdf3+0x760>
   46a0c:	2027883a 	mov	r19,r4
   46a10:	19ff971e 	bne	r3,r7,46870 <__alt_data_end+0xfffd4870>
   46a14:	a8bf961e 	bne	r21,r2,46870 <__alt_data_end+0xfffd4870>
   46a18:	003f9606 	br	46874 <__alt_data_end+0xfffd4874>
   46a1c:	04ffffc4 	movi	r19,-1
   46a20:	003f9406 	br	46874 <__alt_data_end+0xfffd4874>
   46a24:	100d883a 	mov	r6,r2
   46a28:	003f6106 	br	467b0 <__alt_data_end+0xfffd47b0>
   46a2c:	1013883a 	mov	r9,r2
   46a30:	003f7906 	br	46818 <__alt_data_end+0xfffd4818>
   46a34:	19c02636 	bltu	r3,r7,46ad0 <__divdf3+0x7fc>
   46a38:	38c04d26 	beq	r7,r3,46b70 <__divdf3+0x89c>
   46a3c:	2027883a 	mov	r19,r4
   46a40:	003f8b06 	br	46870 <__alt_data_end+0xfffd4870>
   46a44:	e025883a 	mov	r18,fp
   46a48:	003f8a06 	br	46874 <__alt_data_end+0xfffd4874>
   46a4c:	008007c4 	movi	r2,31
   46a50:	14002a16 	blt	r2,r16,46afc <__divdf3+0x828>
   46a54:	a5010784 	addi	r20,r20,1054
   46a58:	8d04983a 	sll	r2,r17,r20
   46a5c:	9c06d83a 	srl	r3,r19,r16
   46a60:	9d28983a 	sll	r20,r19,r20
   46a64:	8c20d83a 	srl	r16,r17,r16
   46a68:	1886b03a 	or	r3,r3,r2
   46a6c:	a004c03a 	cmpne	r2,r20,zero
   46a70:	1884b03a 	or	r2,r3,r2
   46a74:	10c001cc 	andi	r3,r2,7
   46a78:	18000726 	beq	r3,zero,46a98 <__divdf3+0x7c4>
   46a7c:	110003cc 	andi	r4,r2,15
   46a80:	00c00104 	movi	r3,4
   46a84:	20c00426 	beq	r4,r3,46a98 <__divdf3+0x7c4>
   46a88:	10c00104 	addi	r3,r2,4
   46a8c:	1885803a 	cmpltu	r2,r3,r2
   46a90:	80a1883a 	add	r16,r16,r2
   46a94:	1805883a 	mov	r2,r3
   46a98:	80c0202c 	andhi	r3,r16,128
   46a9c:	18002d26 	beq	r3,zero,46b54 <__divdf3+0x880>
   46aa0:	9180004c 	andi	r6,r18,1
   46aa4:	01000044 	movi	r4,1
   46aa8:	000b883a 	mov	r5,zero
   46aac:	0027883a 	mov	r19,zero
   46ab0:	003e6606 	br	4644c <__alt_data_end+0xfffd444c>
   46ab4:	354d883a 	add	r6,r6,r21
   46ab8:	356d803a 	cmpltu	r22,r6,r21
   46abc:	b42d883a 	add	r22,r22,r16
   46ac0:	b12d883a 	add	r22,r22,r4
   46ac4:	8c7fff84 	addi	r17,r17,-2
   46ac8:	b0c7c83a 	sub	r3,r22,r3
   46acc:	003f1d06 	br	46744 <__alt_data_end+0xfffd4744>
   46ad0:	ad4b883a 	add	r5,r21,r21
   46ad4:	2d6b803a 	cmpltu	r21,r5,r21
   46ad8:	ac2b883a 	add	r21,r21,r16
   46adc:	1d47883a 	add	r3,r3,r21
   46ae0:	993fff84 	addi	r4,r19,-2
   46ae4:	282b883a 	mov	r21,r5
   46ae8:	003fc806 	br	46a0c <__alt_data_end+0xfffd4a0c>
   46aec:	103fc41e 	bne	r2,zero,46a00 <__alt_data_end+0xfffd4a00>
   46af0:	002b883a 	mov	r21,zero
   46af4:	a8bf5e1e 	bne	r21,r2,46870 <__alt_data_end+0xfffd4870>
   46af8:	003f5e06 	br	46874 <__alt_data_end+0xfffd4874>
   46afc:	00bef884 	movi	r2,-1054
   46b00:	1505c83a 	sub	r2,r2,r20
   46b04:	00c00804 	movi	r3,32
   46b08:	8884d83a 	srl	r2,r17,r2
   46b0c:	80c01c26 	beq	r16,r3,46b80 <__divdf3+0x8ac>
   46b10:	a0c10f84 	addi	r3,r20,1086
   46b14:	88c6983a 	sll	r3,r17,r3
   46b18:	1cc6b03a 	or	r3,r3,r19
   46b1c:	1806c03a 	cmpne	r3,r3,zero
   46b20:	1884b03a 	or	r2,r3,r2
   46b24:	140001cc 	andi	r16,r2,7
   46b28:	8000061e 	bne	r16,zero,46b44 <__divdf3+0x870>
   46b2c:	000b883a 	mov	r5,zero
   46b30:	1004d0fa 	srli	r2,r2,3
   46b34:	9180004c 	andi	r6,r18,1
   46b38:	0009883a 	mov	r4,zero
   46b3c:	1426b03a 	or	r19,r2,r16
   46b40:	003e4206 	br	4644c <__alt_data_end+0xfffd444c>
   46b44:	110003cc 	andi	r4,r2,15
   46b48:	00c00104 	movi	r3,4
   46b4c:	0021883a 	mov	r16,zero
   46b50:	20ffcd1e 	bne	r4,r3,46a88 <__alt_data_end+0xfffd4a88>
   46b54:	800a927a 	slli	r5,r16,9
   46b58:	8020977a 	slli	r16,r16,29
   46b5c:	280ad33a 	srli	r5,r5,12
   46b60:	003ff306 	br	46b30 <__alt_data_end+0xfffd4b30>
   46b64:	317fd336 	bltu	r6,r5,46ab4 <__alt_data_end+0xfffd4ab4>
   46b68:	1023883a 	mov	r17,r2
   46b6c:	003fa206 	br	469f8 <__alt_data_end+0xfffd49f8>
   46b70:	a8bfd736 	bltu	r21,r2,46ad0 <__alt_data_end+0xfffd4ad0>
   46b74:	2027883a 	mov	r19,r4
   46b78:	a8bf3d1e 	bne	r21,r2,46870 <__alt_data_end+0xfffd4870>
   46b7c:	003f3d06 	br	46874 <__alt_data_end+0xfffd4874>
   46b80:	0007883a 	mov	r3,zero
   46b84:	003fe406 	br	46b18 <__alt_data_end+0xfffd4b18>
   46b88:	00800434 	movhi	r2,16
   46b8c:	89400234 	orhi	r5,r17,8
   46b90:	10bfffc4 	addi	r2,r2,-1
   46b94:	e00d883a 	mov	r6,fp
   46b98:	288a703a 	and	r5,r5,r2
   46b9c:	003e8506 	br	465b4 <__alt_data_end+0xfffd45b4>

00046ba0 <__eqdf2>:
   46ba0:	2804d53a 	srli	r2,r5,20
   46ba4:	3806d53a 	srli	r3,r7,20
   46ba8:	02000434 	movhi	r8,16
   46bac:	423fffc4 	addi	r8,r8,-1
   46bb0:	1081ffcc 	andi	r2,r2,2047
   46bb4:	0241ffc4 	movi	r9,2047
   46bb8:	2a14703a 	and	r10,r5,r8
   46bbc:	18c1ffcc 	andi	r3,r3,2047
   46bc0:	3a10703a 	and	r8,r7,r8
   46bc4:	280ad7fa 	srli	r5,r5,31
   46bc8:	380ed7fa 	srli	r7,r7,31
   46bcc:	12400f26 	beq	r2,r9,46c0c <__eqdf2+0x6c>
   46bd0:	0241ffc4 	movi	r9,2047
   46bd4:	1a400326 	beq	r3,r9,46be4 <__eqdf2+0x44>
   46bd8:	10c00526 	beq	r2,r3,46bf0 <__eqdf2+0x50>
   46bdc:	00800044 	movi	r2,1
   46be0:	f800283a 	ret
   46be4:	4192b03a 	or	r9,r8,r6
   46be8:	483ffc1e 	bne	r9,zero,46bdc <__alt_data_end+0xfffd4bdc>
   46bec:	10fffb1e 	bne	r2,r3,46bdc <__alt_data_end+0xfffd4bdc>
   46bf0:	523ffa1e 	bne	r10,r8,46bdc <__alt_data_end+0xfffd4bdc>
   46bf4:	21bff91e 	bne	r4,r6,46bdc <__alt_data_end+0xfffd4bdc>
   46bf8:	29c00826 	beq	r5,r7,46c1c <__eqdf2+0x7c>
   46bfc:	103ff71e 	bne	r2,zero,46bdc <__alt_data_end+0xfffd4bdc>
   46c00:	5104b03a 	or	r2,r10,r4
   46c04:	1004c03a 	cmpne	r2,r2,zero
   46c08:	f800283a 	ret
   46c0c:	5112b03a 	or	r9,r10,r4
   46c10:	483fef26 	beq	r9,zero,46bd0 <__alt_data_end+0xfffd4bd0>
   46c14:	00800044 	movi	r2,1
   46c18:	f800283a 	ret
   46c1c:	0005883a 	mov	r2,zero
   46c20:	f800283a 	ret

00046c24 <__gedf2>:
   46c24:	2804d53a 	srli	r2,r5,20
   46c28:	3806d53a 	srli	r3,r7,20
   46c2c:	02000434 	movhi	r8,16
   46c30:	423fffc4 	addi	r8,r8,-1
   46c34:	0241ffc4 	movi	r9,2047
   46c38:	1081ffcc 	andi	r2,r2,2047
   46c3c:	2a14703a 	and	r10,r5,r8
   46c40:	1a46703a 	and	r3,r3,r9
   46c44:	3a10703a 	and	r8,r7,r8
   46c48:	280ad7fa 	srli	r5,r5,31
   46c4c:	380ed7fa 	srli	r7,r7,31
   46c50:	12400b26 	beq	r2,r9,46c80 <__gedf2+0x5c>
   46c54:	1a401626 	beq	r3,r9,46cb0 <__gedf2+0x8c>
   46c58:	10000c1e 	bne	r2,zero,46c8c <__gedf2+0x68>
   46c5c:	5112b03a 	or	r9,r10,r4
   46c60:	4813003a 	cmpeq	r9,r9,zero
   46c64:	4817883a 	mov	r11,r9
   46c68:	18000c1e 	bne	r3,zero,46c9c <__gedf2+0x78>
   46c6c:	4198b03a 	or	r12,r8,r6
   46c70:	60000a1e 	bne	r12,zero,46c9c <__gedf2+0x78>
   46c74:	48001326 	beq	r9,zero,46cc4 <__gedf2+0xa0>
   46c78:	0005883a 	mov	r2,zero
   46c7c:	f800283a 	ret
   46c80:	5112b03a 	or	r9,r10,r4
   46c84:	4800191e 	bne	r9,zero,46cec <__gedf2+0xc8>
   46c88:	18800926 	beq	r3,r2,46cb0 <__gedf2+0x8c>
   46c8c:	18000b1e 	bne	r3,zero,46cbc <__gedf2+0x98>
   46c90:	4192b03a 	or	r9,r8,r6
   46c94:	0017883a 	mov	r11,zero
   46c98:	48000a26 	beq	r9,zero,46cc4 <__gedf2+0xa0>
   46c9c:	39c03fcc 	andi	r7,r7,255
   46ca0:	58000726 	beq	r11,zero,46cc0 <__gedf2+0x9c>
   46ca4:	3800081e 	bne	r7,zero,46cc8 <__gedf2+0xa4>
   46ca8:	00bfffc4 	movi	r2,-1
   46cac:	f800283a 	ret
   46cb0:	4192b03a 	or	r9,r8,r6
   46cb4:	48000d1e 	bne	r9,zero,46cec <__gedf2+0xc8>
   46cb8:	103fe826 	beq	r2,zero,46c5c <__alt_data_end+0xfffd4c5c>
   46cbc:	39c03fcc 	andi	r7,r7,255
   46cc0:	29c00326 	beq	r5,r7,46cd0 <__gedf2+0xac>
   46cc4:	283ff81e 	bne	r5,zero,46ca8 <__alt_data_end+0xfffd4ca8>
   46cc8:	00800044 	movi	r2,1
   46ccc:	f800283a 	ret
   46cd0:	18bffc16 	blt	r3,r2,46cc4 <__alt_data_end+0xfffd4cc4>
   46cd4:	10c00316 	blt	r2,r3,46ce4 <__gedf2+0xc0>
   46cd8:	42bffa36 	bltu	r8,r10,46cc4 <__alt_data_end+0xfffd4cc4>
   46cdc:	52000526 	beq	r10,r8,46cf4 <__gedf2+0xd0>
   46ce0:	523fe52e 	bgeu	r10,r8,46c78 <__alt_data_end+0xfffd4c78>
   46ce4:	283ff026 	beq	r5,zero,46ca8 <__alt_data_end+0xfffd4ca8>
   46ce8:	003ff706 	br	46cc8 <__alt_data_end+0xfffd4cc8>
   46cec:	00bfff84 	movi	r2,-2
   46cf0:	f800283a 	ret
   46cf4:	313ff336 	bltu	r6,r4,46cc4 <__alt_data_end+0xfffd4cc4>
   46cf8:	21bfdf2e 	bgeu	r4,r6,46c78 <__alt_data_end+0xfffd4c78>
   46cfc:	283fea26 	beq	r5,zero,46ca8 <__alt_data_end+0xfffd4ca8>
   46d00:	003ff106 	br	46cc8 <__alt_data_end+0xfffd4cc8>

00046d04 <__muldf3>:
   46d04:	defff204 	addi	sp,sp,-56
   46d08:	2804d53a 	srli	r2,r5,20
   46d0c:	dd800a15 	stw	r22,40(sp)
   46d10:	282cd7fa 	srli	r22,r5,31
   46d14:	dc000415 	stw	r16,16(sp)
   46d18:	04000434 	movhi	r16,16
   46d1c:	df000c15 	stw	fp,48(sp)
   46d20:	dd000815 	stw	r20,32(sp)
   46d24:	dcc00715 	stw	r19,28(sp)
   46d28:	dc800615 	stw	r18,24(sp)
   46d2c:	dc400515 	stw	r17,20(sp)
   46d30:	843fffc4 	addi	r16,r16,-1
   46d34:	dfc00d15 	stw	ra,52(sp)
   46d38:	ddc00b15 	stw	r23,44(sp)
   46d3c:	dd400915 	stw	r21,36(sp)
   46d40:	1501ffcc 	andi	r20,r2,2047
   46d44:	2023883a 	mov	r17,r4
   46d48:	2025883a 	mov	r18,r4
   46d4c:	2c20703a 	and	r16,r5,r16
   46d50:	b027883a 	mov	r19,r22
   46d54:	b7003fcc 	andi	fp,r22,255
   46d58:	a0005926 	beq	r20,zero,46ec0 <__muldf3+0x1bc>
   46d5c:	0081ffc4 	movi	r2,2047
   46d60:	a0803426 	beq	r20,r2,46e34 <__muldf3+0x130>
   46d64:	84000434 	orhi	r16,r16,16
   46d68:	2004d77a 	srli	r2,r4,29
   46d6c:	802090fa 	slli	r16,r16,3
   46d70:	202490fa 	slli	r18,r4,3
   46d74:	a53f0044 	addi	r20,r20,-1023
   46d78:	80a0b03a 	or	r16,r16,r2
   46d7c:	002b883a 	mov	r21,zero
   46d80:	0015883a 	mov	r10,zero
   46d84:	3812d53a 	srli	r9,r7,20
   46d88:	3806d7fa 	srli	r3,r7,31
   46d8c:	02000434 	movhi	r8,16
   46d90:	423fffc4 	addi	r8,r8,-1
   46d94:	4941ffcc 	andi	r5,r9,2047
   46d98:	302f883a 	mov	r23,r6
   46d9c:	3a22703a 	and	r17,r7,r8
   46da0:	1ac03fcc 	andi	r11,r3,255
   46da4:	28006226 	beq	r5,zero,46f30 <__muldf3+0x22c>
   46da8:	0081ffc4 	movi	r2,2047
   46dac:	28805a26 	beq	r5,r2,46f18 <__muldf3+0x214>
   46db0:	8a000434 	orhi	r8,r17,16
   46db4:	3004d77a 	srli	r2,r6,29
   46db8:	401090fa 	slli	r8,r8,3
   46dbc:	302e90fa 	slli	r23,r6,3
   46dc0:	297f0044 	addi	r5,r5,-1023
   46dc4:	40a2b03a 	or	r17,r8,r2
   46dc8:	0013883a 	mov	r9,zero
   46dcc:	4d4cb03a 	or	r6,r9,r21
   46dd0:	300c90ba 	slli	r6,r6,2
   46dd4:	02000134 	movhi	r8,4
   46dd8:	421b7d04 	addi	r8,r8,28148
   46ddc:	320d883a 	add	r6,r6,r8
   46de0:	31800017 	ldw	r6,0(r6)
   46de4:	a14b883a 	add	r5,r20,r5
   46de8:	1dacf03a 	xor	r22,r3,r22
   46dec:	2b000044 	addi	r12,r5,1
   46df0:	3000683a 	jmp	r6
   46df4:	00047030 	cmpltui	zero,zero,4544
   46df8:	0004701c 	xori	zero,zero,4544
   46dfc:	0004701c 	xori	zero,zero,4544
   46e00:	00047008 	cmpgei	zero,zero,4544
   46e04:	00046e50 	cmplti	zero,zero,4537
   46e08:	00046e50 	cmplti	zero,zero,4537
   46e0c:	00046ff0 	cmpltui	zero,zero,4543
   46e10:	00047008 	cmpgei	zero,zero,4544
   46e14:	00046e50 	cmplti	zero,zero,4537
   46e18:	00046ff0 	cmpltui	zero,zero,4543
   46e1c:	00046e50 	cmplti	zero,zero,4537
   46e20:	00047008 	cmpgei	zero,zero,4544
   46e24:	00046e54 	movui	zero,4537
   46e28:	00046e54 	movui	zero,4537
   46e2c:	00046e54 	movui	zero,4537
   46e30:	0004722c 	andhi	zero,zero,4552
   46e34:	8104b03a 	or	r2,r16,r4
   46e38:	10006a1e 	bne	r2,zero,46fe4 <__muldf3+0x2e0>
   46e3c:	05400204 	movi	r21,8
   46e40:	0021883a 	mov	r16,zero
   46e44:	0025883a 	mov	r18,zero
   46e48:	02800084 	movi	r10,2
   46e4c:	003fcd06 	br	46d84 <__alt_data_end+0xfffd4d84>
   46e50:	b039883a 	mov	fp,r22
   46e54:	00800084 	movi	r2,2
   46e58:	50804e1e 	bne	r10,r2,46f94 <__muldf3+0x290>
   46e5c:	e4c0004c 	andi	r19,fp,1
   46e60:	0101ffc4 	movi	r4,2047
   46e64:	0021883a 	mov	r16,zero
   46e68:	0025883a 	mov	r18,zero
   46e6c:	2008953a 	slli	r4,r4,20
   46e70:	98c03fcc 	andi	r3,r19,255
   46e74:	01400434 	movhi	r5,16
   46e78:	297fffc4 	addi	r5,r5,-1
   46e7c:	180697fa 	slli	r3,r3,31
   46e80:	8160703a 	and	r16,r16,r5
   46e84:	8120b03a 	or	r16,r16,r4
   46e88:	80c6b03a 	or	r3,r16,r3
   46e8c:	9005883a 	mov	r2,r18
   46e90:	dfc00d17 	ldw	ra,52(sp)
   46e94:	df000c17 	ldw	fp,48(sp)
   46e98:	ddc00b17 	ldw	r23,44(sp)
   46e9c:	dd800a17 	ldw	r22,40(sp)
   46ea0:	dd400917 	ldw	r21,36(sp)
   46ea4:	dd000817 	ldw	r20,32(sp)
   46ea8:	dcc00717 	ldw	r19,28(sp)
   46eac:	dc800617 	ldw	r18,24(sp)
   46eb0:	dc400517 	ldw	r17,20(sp)
   46eb4:	dc000417 	ldw	r16,16(sp)
   46eb8:	dec00e04 	addi	sp,sp,56
   46ebc:	f800283a 	ret
   46ec0:	8104b03a 	or	r2,r16,r4
   46ec4:	10004226 	beq	r2,zero,46fd0 <__muldf3+0x2cc>
   46ec8:	8000f926 	beq	r16,zero,472b0 <__muldf3+0x5ac>
   46ecc:	8009883a 	mov	r4,r16
   46ed0:	d9800315 	stw	r6,12(sp)
   46ed4:	d9c00015 	stw	r7,0(sp)
   46ed8:	0047f600 	call	47f60 <__clzsi2>
   46edc:	d9800317 	ldw	r6,12(sp)
   46ee0:	d9c00017 	ldw	r7,0(sp)
   46ee4:	1007883a 	mov	r3,r2
   46ee8:	01000a04 	movi	r4,40
   46eec:	18bffe04 	addi	r2,r3,-8
   46ef0:	20c9c83a 	sub	r4,r4,r3
   46ef4:	80a0983a 	sll	r16,r16,r2
   46ef8:	8908d83a 	srl	r4,r17,r4
   46efc:	88a4983a 	sll	r18,r17,r2
   46f00:	2420b03a 	or	r16,r4,r16
   46f04:	017f0344 	movi	r5,-1011
   46f08:	28e9c83a 	sub	r20,r5,r3
   46f0c:	002b883a 	mov	r21,zero
   46f10:	0015883a 	mov	r10,zero
   46f14:	003f9b06 	br	46d84 <__alt_data_end+0xfffd4d84>
   46f18:	8984b03a 	or	r2,r17,r6
   46f1c:	10002a1e 	bne	r2,zero,46fc8 <__muldf3+0x2c4>
   46f20:	0023883a 	mov	r17,zero
   46f24:	002f883a 	mov	r23,zero
   46f28:	02400084 	movi	r9,2
   46f2c:	003fa706 	br	46dcc <__alt_data_end+0xfffd4dcc>
   46f30:	8984b03a 	or	r2,r17,r6
   46f34:	10002026 	beq	r2,zero,46fb8 <__muldf3+0x2b4>
   46f38:	8800cc26 	beq	r17,zero,4726c <__muldf3+0x568>
   46f3c:	8809883a 	mov	r4,r17
   46f40:	d8c00215 	stw	r3,8(sp)
   46f44:	d9800315 	stw	r6,12(sp)
   46f48:	da800015 	stw	r10,0(sp)
   46f4c:	dac00115 	stw	r11,4(sp)
   46f50:	0047f600 	call	47f60 <__clzsi2>
   46f54:	d8c00217 	ldw	r3,8(sp)
   46f58:	d9800317 	ldw	r6,12(sp)
   46f5c:	da800017 	ldw	r10,0(sp)
   46f60:	dac00117 	ldw	r11,4(sp)
   46f64:	1009883a 	mov	r4,r2
   46f68:	01400a04 	movi	r5,40
   46f6c:	25fffe04 	addi	r23,r4,-8
   46f70:	290bc83a 	sub	r5,r5,r4
   46f74:	8dd0983a 	sll	r8,r17,r23
   46f78:	314ad83a 	srl	r5,r6,r5
   46f7c:	35ee983a 	sll	r23,r6,r23
   46f80:	2a22b03a 	or	r17,r5,r8
   46f84:	017f0344 	movi	r5,-1011
   46f88:	290bc83a 	sub	r5,r5,r4
   46f8c:	0013883a 	mov	r9,zero
   46f90:	003f8e06 	br	46dcc <__alt_data_end+0xfffd4dcc>
   46f94:	008000c4 	movi	r2,3
   46f98:	50811d26 	beq	r10,r2,47410 <__muldf3+0x70c>
   46f9c:	00800044 	movi	r2,1
   46fa0:	5080e01e 	bne	r10,r2,47324 <__muldf3+0x620>
   46fa4:	e0a6703a 	and	r19,fp,r2
   46fa8:	0009883a 	mov	r4,zero
   46fac:	0021883a 	mov	r16,zero
   46fb0:	0025883a 	mov	r18,zero
   46fb4:	003fad06 	br	46e6c <__alt_data_end+0xfffd4e6c>
   46fb8:	0023883a 	mov	r17,zero
   46fbc:	002f883a 	mov	r23,zero
   46fc0:	02400044 	movi	r9,1
   46fc4:	003f8106 	br	46dcc <__alt_data_end+0xfffd4dcc>
   46fc8:	024000c4 	movi	r9,3
   46fcc:	003f7f06 	br	46dcc <__alt_data_end+0xfffd4dcc>
   46fd0:	05400104 	movi	r21,4
   46fd4:	0021883a 	mov	r16,zero
   46fd8:	0025883a 	mov	r18,zero
   46fdc:	02800044 	movi	r10,1
   46fe0:	003f6806 	br	46d84 <__alt_data_end+0xfffd4d84>
   46fe4:	05400304 	movi	r21,12
   46fe8:	028000c4 	movi	r10,3
   46fec:	003f6506 	br	46d84 <__alt_data_end+0xfffd4d84>
   46ff0:	04000434 	movhi	r16,16
   46ff4:	0027883a 	mov	r19,zero
   46ff8:	843fffc4 	addi	r16,r16,-1
   46ffc:	04bfffc4 	movi	r18,-1
   47000:	0101ffc4 	movi	r4,2047
   47004:	003f9906 	br	46e6c <__alt_data_end+0xfffd4e6c>
   47008:	8821883a 	mov	r16,r17
   4700c:	b825883a 	mov	r18,r23
   47010:	5839883a 	mov	fp,r11
   47014:	4815883a 	mov	r10,r9
   47018:	003f8e06 	br	46e54 <__alt_data_end+0xfffd4e54>
   4701c:	8821883a 	mov	r16,r17
   47020:	b825883a 	mov	r18,r23
   47024:	b039883a 	mov	fp,r22
   47028:	4815883a 	mov	r10,r9
   4702c:	003f8906 	br	46e54 <__alt_data_end+0xfffd4e54>
   47030:	b80cd43a 	srli	r6,r23,16
   47034:	9006d43a 	srli	r3,r18,16
   47038:	90bfffcc 	andi	r2,r18,65535
   4703c:	bdffffcc 	andi	r23,r23,65535
   47040:	b891383a 	mul	r8,r23,r2
   47044:	b8c9383a 	mul	r4,r23,r3
   47048:	309b383a 	mul	r13,r6,r2
   4704c:	400ed43a 	srli	r7,r8,16
   47050:	30df383a 	mul	r15,r6,r3
   47054:	235b883a 	add	r13,r4,r13
   47058:	69db883a 	add	r13,r13,r7
   4705c:	6900022e 	bgeu	r13,r4,47068 <__muldf3+0x364>
   47060:	01000074 	movhi	r4,1
   47064:	791f883a 	add	r15,r15,r4
   47068:	8828d43a 	srli	r20,r17,16
   4706c:	8c7fffcc 	andi	r17,r17,65535
   47070:	888f383a 	mul	r7,r17,r2
   47074:	88d3383a 	mul	r9,r17,r3
   47078:	a0a5383a 	mul	r18,r20,r2
   4707c:	3816d43a 	srli	r11,r7,16
   47080:	6814943a 	slli	r10,r13,16
   47084:	4ca5883a 	add	r18,r9,r18
   47088:	423fffcc 	andi	r8,r8,65535
   4708c:	92e5883a 	add	r18,r18,r11
   47090:	6808d43a 	srli	r4,r13,16
   47094:	5215883a 	add	r10,r10,r8
   47098:	a0c7383a 	mul	r3,r20,r3
   4709c:	9240022e 	bgeu	r18,r9,470a8 <__muldf3+0x3a4>
   470a0:	00800074 	movhi	r2,1
   470a4:	1887883a 	add	r3,r3,r2
   470a8:	802ad43a 	srli	r21,r16,16
   470ac:	80bfffcc 	andi	r2,r16,65535
   470b0:	b893383a 	mul	r9,r23,r2
   470b4:	3091383a 	mul	r8,r6,r2
   470b8:	bd6f383a 	mul	r23,r23,r21
   470bc:	9026943a 	slli	r19,r18,16
   470c0:	481ad43a 	srli	r13,r9,16
   470c4:	9024d43a 	srli	r18,r18,16
   470c8:	39ffffcc 	andi	r7,r7,65535
   470cc:	ba11883a 	add	r8,r23,r8
   470d0:	99e7883a 	add	r19,r19,r7
   470d4:	4351883a 	add	r8,r8,r13
   470d8:	1c97883a 	add	r11,r3,r18
   470dc:	354d383a 	mul	r6,r6,r21
   470e0:	9925883a 	add	r18,r19,r4
   470e4:	45c0022e 	bgeu	r8,r23,470f0 <__muldf3+0x3ec>
   470e8:	00c00074 	movhi	r3,1
   470ec:	30cd883a 	add	r6,r6,r3
   470f0:	8889383a 	mul	r4,r17,r2
   470f4:	8d63383a 	mul	r17,r17,r21
   470f8:	a085383a 	mul	r2,r20,r2
   470fc:	200ed43a 	srli	r7,r4,16
   47100:	401cd43a 	srli	r14,r8,16
   47104:	401a943a 	slli	r13,r8,16
   47108:	8885883a 	add	r2,r17,r2
   4710c:	4a3fffcc 	andi	r8,r9,65535
   47110:	11c5883a 	add	r2,r2,r7
   47114:	339d883a 	add	r14,r6,r14
   47118:	6a11883a 	add	r8,r13,r8
   4711c:	a561383a 	mul	r16,r20,r21
   47120:	1440022e 	bgeu	r2,r17,4712c <__muldf3+0x428>
   47124:	00c00074 	movhi	r3,1
   47128:	80e1883a 	add	r16,r16,r3
   4712c:	1006943a 	slli	r3,r2,16
   47130:	213fffcc 	andi	r4,r4,65535
   47134:	93db883a 	add	r13,r18,r15
   47138:	1909883a 	add	r4,r3,r4
   4713c:	22c7883a 	add	r3,r4,r11
   47140:	6cd3803a 	cmpltu	r9,r13,r19
   47144:	6a09883a 	add	r4,r13,r8
   47148:	1a5b883a 	add	r13,r3,r9
   4714c:	2211803a 	cmpltu	r8,r4,r8
   47150:	734d883a 	add	r6,r14,r13
   47154:	100ed43a 	srli	r7,r2,16
   47158:	6a53803a 	cmpltu	r9,r13,r9
   4715c:	3205883a 	add	r2,r6,r8
   47160:	1ac7803a 	cmpltu	r3,r3,r11
   47164:	1211803a 	cmpltu	r8,r2,r8
   47168:	48c6b03a 	or	r3,r9,r3
   4716c:	338d803a 	cmpltu	r6,r6,r14
   47170:	19c7883a 	add	r3,r3,r7
   47174:	418cb03a 	or	r6,r8,r6
   47178:	1987883a 	add	r3,r3,r6
   4717c:	2024927a 	slli	r18,r4,9
   47180:	1c07883a 	add	r3,r3,r16
   47184:	1806927a 	slli	r3,r3,9
   47188:	1020d5fa 	srli	r16,r2,23
   4718c:	2008d5fa 	srli	r4,r4,23
   47190:	9294b03a 	or	r10,r18,r10
   47194:	1004927a 	slli	r2,r2,9
   47198:	5024c03a 	cmpne	r18,r10,zero
   4719c:	1c20b03a 	or	r16,r3,r16
   471a0:	9108b03a 	or	r4,r18,r4
   471a4:	80c0402c 	andhi	r3,r16,256
   471a8:	20a4b03a 	or	r18,r4,r2
   471ac:	18000726 	beq	r3,zero,471cc <__muldf3+0x4c8>
   471b0:	9006d07a 	srli	r3,r18,1
   471b4:	800897fa 	slli	r4,r16,31
   471b8:	9080004c 	andi	r2,r18,1
   471bc:	8020d07a 	srli	r16,r16,1
   471c0:	10c4b03a 	or	r2,r2,r3
   471c4:	1124b03a 	or	r18,r2,r4
   471c8:	600b883a 	mov	r5,r12
   471cc:	2900ffc4 	addi	r4,r5,1023
   471d0:	01004b0e 	bge	zero,r4,47300 <__muldf3+0x5fc>
   471d4:	908001cc 	andi	r2,r18,7
   471d8:	10000726 	beq	r2,zero,471f8 <__muldf3+0x4f4>
   471dc:	90c003cc 	andi	r3,r18,15
   471e0:	00800104 	movi	r2,4
   471e4:	18800426 	beq	r3,r2,471f8 <__muldf3+0x4f4>
   471e8:	9087883a 	add	r3,r18,r2
   471ec:	1c85803a 	cmpltu	r2,r3,r18
   471f0:	80a1883a 	add	r16,r16,r2
   471f4:	1825883a 	mov	r18,r3
   471f8:	8080402c 	andhi	r2,r16,256
   471fc:	10000426 	beq	r2,zero,47210 <__muldf3+0x50c>
   47200:	00bfc034 	movhi	r2,65280
   47204:	10bfffc4 	addi	r2,r2,-1
   47208:	29010004 	addi	r4,r5,1024
   4720c:	80a0703a 	and	r16,r16,r2
   47210:	0081ff84 	movi	r2,2046
   47214:	1100320e 	bge	r2,r4,472e0 <__muldf3+0x5dc>
   47218:	b4c0004c 	andi	r19,r22,1
   4721c:	0101ffc4 	movi	r4,2047
   47220:	0021883a 	mov	r16,zero
   47224:	0025883a 	mov	r18,zero
   47228:	003f1006 	br	46e6c <__alt_data_end+0xfffd4e6c>
   4722c:	8080022c 	andhi	r2,r16,8
   47230:	10000926 	beq	r2,zero,47258 <__muldf3+0x554>
   47234:	8880022c 	andhi	r2,r17,8
   47238:	1000071e 	bne	r2,zero,47258 <__muldf3+0x554>
   4723c:	00800434 	movhi	r2,16
   47240:	8c000234 	orhi	r16,r17,8
   47244:	10bfffc4 	addi	r2,r2,-1
   47248:	1827883a 	mov	r19,r3
   4724c:	80a0703a 	and	r16,r16,r2
   47250:	b825883a 	mov	r18,r23
   47254:	003f6a06 	br	47000 <__alt_data_end+0xfffd5000>
   47258:	00800434 	movhi	r2,16
   4725c:	84000234 	orhi	r16,r16,8
   47260:	10bfffc4 	addi	r2,r2,-1
   47264:	80a0703a 	and	r16,r16,r2
   47268:	003f6506 	br	47000 <__alt_data_end+0xfffd5000>
   4726c:	3009883a 	mov	r4,r6
   47270:	d8c00215 	stw	r3,8(sp)
   47274:	d9800315 	stw	r6,12(sp)
   47278:	da800015 	stw	r10,0(sp)
   4727c:	dac00115 	stw	r11,4(sp)
   47280:	0047f600 	call	47f60 <__clzsi2>
   47284:	11000804 	addi	r4,r2,32
   47288:	014009c4 	movi	r5,39
   4728c:	d8c00217 	ldw	r3,8(sp)
   47290:	d9800317 	ldw	r6,12(sp)
   47294:	da800017 	ldw	r10,0(sp)
   47298:	dac00117 	ldw	r11,4(sp)
   4729c:	293f320e 	bge	r5,r4,46f68 <__alt_data_end+0xfffd4f68>
   472a0:	10bffe04 	addi	r2,r2,-8
   472a4:	b8a2983a 	sll	r17,r23,r2
   472a8:	002f883a 	mov	r23,zero
   472ac:	003f3506 	br	46f84 <__alt_data_end+0xfffd4f84>
   472b0:	d9800315 	stw	r6,12(sp)
   472b4:	d9c00015 	stw	r7,0(sp)
   472b8:	0047f600 	call	47f60 <__clzsi2>
   472bc:	10c00804 	addi	r3,r2,32
   472c0:	010009c4 	movi	r4,39
   472c4:	d9800317 	ldw	r6,12(sp)
   472c8:	d9c00017 	ldw	r7,0(sp)
   472cc:	20ff060e 	bge	r4,r3,46ee8 <__alt_data_end+0xfffd4ee8>
   472d0:	10bffe04 	addi	r2,r2,-8
   472d4:	88a0983a 	sll	r16,r17,r2
   472d8:	0025883a 	mov	r18,zero
   472dc:	003f0906 	br	46f04 <__alt_data_end+0xfffd4f04>
   472e0:	9004d0fa 	srli	r2,r18,3
   472e4:	8024977a 	slli	r18,r16,29
   472e8:	8020927a 	slli	r16,r16,9
   472ec:	2101ffcc 	andi	r4,r4,2047
   472f0:	90a4b03a 	or	r18,r18,r2
   472f4:	8020d33a 	srli	r16,r16,12
   472f8:	b4c0004c 	andi	r19,r22,1
   472fc:	003edb06 	br	46e6c <__alt_data_end+0xfffd4e6c>
   47300:	00ff0084 	movi	r3,-1022
   47304:	1947c83a 	sub	r3,r3,r5
   47308:	00800e04 	movi	r2,56
   4730c:	10c0080e 	bge	r2,r3,47330 <__muldf3+0x62c>
   47310:	b4c0004c 	andi	r19,r22,1
   47314:	0009883a 	mov	r4,zero
   47318:	0021883a 	mov	r16,zero
   4731c:	0025883a 	mov	r18,zero
   47320:	003ed206 	br	46e6c <__alt_data_end+0xfffd4e6c>
   47324:	600b883a 	mov	r5,r12
   47328:	e02d883a 	mov	r22,fp
   4732c:	003fa706 	br	471cc <__alt_data_end+0xfffd51cc>
   47330:	008007c4 	movi	r2,31
   47334:	10c01816 	blt	r2,r3,47398 <__muldf3+0x694>
   47338:	29410784 	addi	r5,r5,1054
   4733c:	8144983a 	sll	r2,r16,r5
   47340:	90c8d83a 	srl	r4,r18,r3
   47344:	914a983a 	sll	r5,r18,r5
   47348:	80c6d83a 	srl	r3,r16,r3
   4734c:	2088b03a 	or	r4,r4,r2
   47350:	2804c03a 	cmpne	r2,r5,zero
   47354:	2084b03a 	or	r2,r4,r2
   47358:	110001cc 	andi	r4,r2,7
   4735c:	20000726 	beq	r4,zero,4737c <__muldf3+0x678>
   47360:	114003cc 	andi	r5,r2,15
   47364:	01000104 	movi	r4,4
   47368:	29000426 	beq	r5,r4,4737c <__muldf3+0x678>
   4736c:	11000104 	addi	r4,r2,4
   47370:	2085803a 	cmpltu	r2,r4,r2
   47374:	1887883a 	add	r3,r3,r2
   47378:	2005883a 	mov	r2,r4
   4737c:	1900202c 	andhi	r4,r3,128
   47380:	20001826 	beq	r4,zero,473e4 <__muldf3+0x6e0>
   47384:	b4c0004c 	andi	r19,r22,1
   47388:	01000044 	movi	r4,1
   4738c:	0021883a 	mov	r16,zero
   47390:	0025883a 	mov	r18,zero
   47394:	003eb506 	br	46e6c <__alt_data_end+0xfffd4e6c>
   47398:	00bef884 	movi	r2,-1054
   4739c:	1145c83a 	sub	r2,r2,r5
   473a0:	8088d83a 	srl	r4,r16,r2
   473a4:	00800804 	movi	r2,32
   473a8:	18801726 	beq	r3,r2,47408 <__muldf3+0x704>
   473ac:	28810f84 	addi	r2,r5,1086
   473b0:	8084983a 	sll	r2,r16,r2
   473b4:	1484b03a 	or	r2,r2,r18
   473b8:	1004c03a 	cmpne	r2,r2,zero
   473bc:	1104b03a 	or	r2,r2,r4
   473c0:	10c001cc 	andi	r3,r2,7
   473c4:	18000b1e 	bne	r3,zero,473f4 <__muldf3+0x6f0>
   473c8:	0021883a 	mov	r16,zero
   473cc:	1004d0fa 	srli	r2,r2,3
   473d0:	b4c0004c 	andi	r19,r22,1
   473d4:	0009883a 	mov	r4,zero
   473d8:	10e4b03a 	or	r18,r2,r3
   473dc:	003ea306 	br	46e6c <__alt_data_end+0xfffd4e6c>
   473e0:	0007883a 	mov	r3,zero
   473e4:	1820927a 	slli	r16,r3,9
   473e8:	1806977a 	slli	r3,r3,29
   473ec:	8020d33a 	srli	r16,r16,12
   473f0:	003ff606 	br	473cc <__alt_data_end+0xfffd53cc>
   473f4:	110003cc 	andi	r4,r2,15
   473f8:	00c00104 	movi	r3,4
   473fc:	20fff826 	beq	r4,r3,473e0 <__alt_data_end+0xfffd53e0>
   47400:	0007883a 	mov	r3,zero
   47404:	003fd906 	br	4736c <__alt_data_end+0xfffd536c>
   47408:	0005883a 	mov	r2,zero
   4740c:	003fe906 	br	473b4 <__alt_data_end+0xfffd53b4>
   47410:	00800434 	movhi	r2,16
   47414:	84000234 	orhi	r16,r16,8
   47418:	10bfffc4 	addi	r2,r2,-1
   4741c:	e4c0004c 	andi	r19,fp,1
   47420:	80a0703a 	and	r16,r16,r2
   47424:	003ef606 	br	47000 <__alt_data_end+0xfffd5000>

00047428 <__subdf3>:
   47428:	00c00434 	movhi	r3,16
   4742c:	18ffffc4 	addi	r3,r3,-1
   47430:	defffb04 	addi	sp,sp,-20
   47434:	28d2703a 	and	r9,r5,r3
   47438:	3814d53a 	srli	r10,r7,20
   4743c:	38c6703a 	and	r3,r7,r3
   47440:	3004d77a 	srli	r2,r6,29
   47444:	dc800215 	stw	r18,8(sp)
   47448:	dc000015 	stw	r16,0(sp)
   4744c:	2824d7fa 	srli	r18,r5,31
   47450:	2820d53a 	srli	r16,r5,20
   47454:	481290fa 	slli	r9,r9,3
   47458:	200ad77a 	srli	r5,r4,29
   4745c:	180690fa 	slli	r3,r3,3
   47460:	dc400115 	stw	r17,4(sp)
   47464:	dfc00415 	stw	ra,16(sp)
   47468:	202290fa 	slli	r17,r4,3
   4746c:	dcc00315 	stw	r19,12(sp)
   47470:	5281ffcc 	andi	r10,r10,2047
   47474:	0101ffc4 	movi	r4,2047
   47478:	9011883a 	mov	r8,r18
   4747c:	8401ffcc 	andi	r16,r16,2047
   47480:	94803fcc 	andi	r18,r18,255
   47484:	494ab03a 	or	r5,r9,r5
   47488:	380ed7fa 	srli	r7,r7,31
   4748c:	1886b03a 	or	r3,r3,r2
   47490:	300c90fa 	slli	r6,r6,3
   47494:	51009026 	beq	r10,r4,476d8 <__subdf3+0x2b0>
   47498:	39c0005c 	xori	r7,r7,1
   4749c:	8285c83a 	sub	r2,r16,r10
   474a0:	91c06f26 	beq	r18,r7,47660 <__subdf3+0x238>
   474a4:	0080b10e 	bge	zero,r2,4776c <__subdf3+0x344>
   474a8:	50002a1e 	bne	r10,zero,47554 <__subdf3+0x12c>
   474ac:	1988b03a 	or	r4,r3,r6
   474b0:	2000941e 	bne	r4,zero,47704 <__subdf3+0x2dc>
   474b4:	888001cc 	andi	r2,r17,7
   474b8:	10005b26 	beq	r2,zero,47628 <__subdf3+0x200>
   474bc:	88c003cc 	andi	r3,r17,15
   474c0:	00800104 	movi	r2,4
   474c4:	18805826 	beq	r3,r2,47628 <__subdf3+0x200>
   474c8:	88c00104 	addi	r3,r17,4
   474cc:	1c63803a 	cmpltu	r17,r3,r17
   474d0:	2c4b883a 	add	r5,r5,r17
   474d4:	2880202c 	andhi	r2,r5,128
   474d8:	9200004c 	andi	r8,r18,1
   474dc:	1823883a 	mov	r17,r3
   474e0:	10005426 	beq	r2,zero,47634 <__subdf3+0x20c>
   474e4:	84000044 	addi	r16,r16,1
   474e8:	0081ffc4 	movi	r2,2047
   474ec:	8080bf26 	beq	r16,r2,477ec <__subdf3+0x3c4>
   474f0:	013fe034 	movhi	r4,65408
   474f4:	213fffc4 	addi	r4,r4,-1
   474f8:	290a703a 	and	r5,r5,r4
   474fc:	2804977a 	slli	r2,r5,29
   47500:	280a927a 	slli	r5,r5,9
   47504:	8822d0fa 	srli	r17,r17,3
   47508:	8401ffcc 	andi	r16,r16,2047
   4750c:	2808d33a 	srli	r4,r5,12
   47510:	1444b03a 	or	r2,r2,r17
   47514:	8401ffcc 	andi	r16,r16,2047
   47518:	800a953a 	slli	r5,r16,20
   4751c:	40c03fcc 	andi	r3,r8,255
   47520:	04000434 	movhi	r16,16
   47524:	180697fa 	slli	r3,r3,31
   47528:	843fffc4 	addi	r16,r16,-1
   4752c:	2420703a 	and	r16,r4,r16
   47530:	8160b03a 	or	r16,r16,r5
   47534:	80c6b03a 	or	r3,r16,r3
   47538:	dfc00417 	ldw	ra,16(sp)
   4753c:	dcc00317 	ldw	r19,12(sp)
   47540:	dc800217 	ldw	r18,8(sp)
   47544:	dc400117 	ldw	r17,4(sp)
   47548:	dc000017 	ldw	r16,0(sp)
   4754c:	dec00504 	addi	sp,sp,20
   47550:	f800283a 	ret
   47554:	0101ffc4 	movi	r4,2047
   47558:	813fd626 	beq	r16,r4,474b4 <__alt_data_end+0xfffd54b4>
   4755c:	18c02034 	orhi	r3,r3,128
   47560:	01000e04 	movi	r4,56
   47564:	2080a416 	blt	r4,r2,477f8 <__subdf3+0x3d0>
   47568:	010007c4 	movi	r4,31
   4756c:	2080c716 	blt	r4,r2,4788c <__subdf3+0x464>
   47570:	01000804 	movi	r4,32
   47574:	2089c83a 	sub	r4,r4,r2
   47578:	1910983a 	sll	r8,r3,r4
   4757c:	308ed83a 	srl	r7,r6,r2
   47580:	3108983a 	sll	r4,r6,r4
   47584:	1884d83a 	srl	r2,r3,r2
   47588:	41ccb03a 	or	r6,r8,r7
   4758c:	2008c03a 	cmpne	r4,r4,zero
   47590:	310cb03a 	or	r6,r6,r4
   47594:	898dc83a 	sub	r6,r17,r6
   47598:	89a3803a 	cmpltu	r17,r17,r6
   4759c:	288bc83a 	sub	r5,r5,r2
   475a0:	2c4bc83a 	sub	r5,r5,r17
   475a4:	3023883a 	mov	r17,r6
   475a8:	2880202c 	andhi	r2,r5,128
   475ac:	10006b26 	beq	r2,zero,4775c <__subdf3+0x334>
   475b0:	04c02034 	movhi	r19,128
   475b4:	9cffffc4 	addi	r19,r19,-1
   475b8:	2ce6703a 	and	r19,r5,r19
   475bc:	98007c26 	beq	r19,zero,477b0 <__subdf3+0x388>
   475c0:	9809883a 	mov	r4,r19
   475c4:	0047f600 	call	47f60 <__clzsi2>
   475c8:	10fffe04 	addi	r3,r2,-8
   475cc:	010007c4 	movi	r4,31
   475d0:	20c07d16 	blt	r4,r3,477c8 <__subdf3+0x3a0>
   475d4:	01400a04 	movi	r5,40
   475d8:	2885c83a 	sub	r2,r5,r2
   475dc:	888ad83a 	srl	r5,r17,r2
   475e0:	98e6983a 	sll	r19,r19,r3
   475e4:	88e2983a 	sll	r17,r17,r3
   475e8:	2ce6b03a 	or	r19,r5,r19
   475ec:	1c007a16 	blt	r3,r16,477d8 <__subdf3+0x3b0>
   475f0:	1c21c83a 	sub	r16,r3,r16
   475f4:	81400044 	addi	r5,r16,1
   475f8:	00c007c4 	movi	r3,31
   475fc:	19409616 	blt	r3,r5,47858 <__subdf3+0x430>
   47600:	1c21c83a 	sub	r16,r3,r16
   47604:	8c08983a 	sll	r4,r17,r16
   47608:	8946d83a 	srl	r3,r17,r5
   4760c:	9c20983a 	sll	r16,r19,r16
   47610:	2008c03a 	cmpne	r4,r4,zero
   47614:	994ad83a 	srl	r5,r19,r5
   47618:	1c06b03a 	or	r3,r3,r16
   4761c:	1922b03a 	or	r17,r3,r4
   47620:	0021883a 	mov	r16,zero
   47624:	003fa306 	br	474b4 <__alt_data_end+0xfffd54b4>
   47628:	2880202c 	andhi	r2,r5,128
   4762c:	9200004c 	andi	r8,r18,1
   47630:	103fac1e 	bne	r2,zero,474e4 <__alt_data_end+0xfffd54e4>
   47634:	2804977a 	slli	r2,r5,29
   47638:	8822d0fa 	srli	r17,r17,3
   4763c:	00c1ffc4 	movi	r3,2047
   47640:	280ad0fa 	srli	r5,r5,3
   47644:	1444b03a 	or	r2,r2,r17
   47648:	80c02726 	beq	r16,r3,476e8 <__subdf3+0x2c0>
   4764c:	01000434 	movhi	r4,16
   47650:	213fffc4 	addi	r4,r4,-1
   47654:	80e0703a 	and	r16,r16,r3
   47658:	2908703a 	and	r4,r5,r4
   4765c:	003fad06 	br	47514 <__alt_data_end+0xfffd5514>
   47660:	0080690e 	bge	zero,r2,47808 <__subdf3+0x3e0>
   47664:	50002f26 	beq	r10,zero,47724 <__subdf3+0x2fc>
   47668:	0101ffc4 	movi	r4,2047
   4766c:	813f9126 	beq	r16,r4,474b4 <__alt_data_end+0xfffd54b4>
   47670:	18c02034 	orhi	r3,r3,128
   47674:	01000e04 	movi	r4,56
   47678:	2080b00e 	bge	r4,r2,4793c <__subdf3+0x514>
   4767c:	198cb03a 	or	r6,r3,r6
   47680:	300ec03a 	cmpne	r7,r6,zero
   47684:	0005883a 	mov	r2,zero
   47688:	3c4f883a 	add	r7,r7,r17
   4768c:	3c63803a 	cmpltu	r17,r7,r17
   47690:	114b883a 	add	r5,r2,r5
   47694:	2c4b883a 	add	r5,r5,r17
   47698:	3823883a 	mov	r17,r7
   4769c:	2880202c 	andhi	r2,r5,128
   476a0:	10002e26 	beq	r2,zero,4775c <__subdf3+0x334>
   476a4:	84000044 	addi	r16,r16,1
   476a8:	0081ffc4 	movi	r2,2047
   476ac:	8080de26 	beq	r16,r2,47a28 <__subdf3+0x600>
   476b0:	00bfe034 	movhi	r2,65408
   476b4:	10bfffc4 	addi	r2,r2,-1
   476b8:	288a703a 	and	r5,r5,r2
   476bc:	880cd07a 	srli	r6,r17,1
   476c0:	280897fa 	slli	r4,r5,31
   476c4:	88c0004c 	andi	r3,r17,1
   476c8:	30e2b03a 	or	r17,r6,r3
   476cc:	280ad07a 	srli	r5,r5,1
   476d0:	8922b03a 	or	r17,r17,r4
   476d4:	003f7706 	br	474b4 <__alt_data_end+0xfffd54b4>
   476d8:	1984b03a 	or	r2,r3,r6
   476dc:	103f6e26 	beq	r2,zero,47498 <__alt_data_end+0xfffd5498>
   476e0:	39c03fcc 	andi	r7,r7,255
   476e4:	003f6d06 	br	4749c <__alt_data_end+0xfffd549c>
   476e8:	1146b03a 	or	r3,r2,r5
   476ec:	18003f26 	beq	r3,zero,477ec <__subdf3+0x3c4>
   476f0:	00c00434 	movhi	r3,16
   476f4:	29000234 	orhi	r4,r5,8
   476f8:	18ffffc4 	addi	r3,r3,-1
   476fc:	20c8703a 	and	r4,r4,r3
   47700:	003f8406 	br	47514 <__alt_data_end+0xfffd5514>
   47704:	10bfffc4 	addi	r2,r2,-1
   47708:	1000501e 	bne	r2,zero,4784c <__subdf3+0x424>
   4770c:	898fc83a 	sub	r7,r17,r6
   47710:	89e3803a 	cmpltu	r17,r17,r7
   47714:	28cbc83a 	sub	r5,r5,r3
   47718:	2c4bc83a 	sub	r5,r5,r17
   4771c:	3823883a 	mov	r17,r7
   47720:	003fa106 	br	475a8 <__alt_data_end+0xfffd55a8>
   47724:	1988b03a 	or	r4,r3,r6
   47728:	203f6226 	beq	r4,zero,474b4 <__alt_data_end+0xfffd54b4>
   4772c:	10bfffc4 	addi	r2,r2,-1
   47730:	10009b1e 	bne	r2,zero,479a0 <__subdf3+0x578>
   47734:	344d883a 	add	r6,r6,r17
   47738:	3463803a 	cmpltu	r17,r6,r17
   4773c:	194b883a 	add	r5,r3,r5
   47740:	2c4b883a 	add	r5,r5,r17
   47744:	3023883a 	mov	r17,r6
   47748:	003fd406 	br	4769c <__alt_data_end+0xfffd569c>
   4774c:	1106b03a 	or	r3,r2,r4
   47750:	1800b426 	beq	r3,zero,47a24 <__subdf3+0x5fc>
   47754:	100b883a 	mov	r5,r2
   47758:	2023883a 	mov	r17,r4
   4775c:	888001cc 	andi	r2,r17,7
   47760:	103f561e 	bne	r2,zero,474bc <__alt_data_end+0xfffd54bc>
   47764:	9200004c 	andi	r8,r18,1
   47768:	003fb206 	br	47634 <__alt_data_end+0xfffd5634>
   4776c:	1000531e 	bne	r2,zero,478bc <__subdf3+0x494>
   47770:	80800044 	addi	r2,r16,1
   47774:	1081ffcc 	andi	r2,r2,2047
   47778:	01000044 	movi	r4,1
   4777c:	2080a00e 	bge	r4,r2,47a00 <__subdf3+0x5d8>
   47780:	8985c83a 	sub	r2,r17,r6
   47784:	8889803a 	cmpltu	r4,r17,r2
   47788:	28e7c83a 	sub	r19,r5,r3
   4778c:	9927c83a 	sub	r19,r19,r4
   47790:	9900202c 	andhi	r4,r19,128
   47794:	20006226 	beq	r4,zero,47920 <__subdf3+0x4f8>
   47798:	3463c83a 	sub	r17,r6,r17
   4779c:	194bc83a 	sub	r5,r3,r5
   477a0:	344d803a 	cmpltu	r6,r6,r17
   477a4:	29a7c83a 	sub	r19,r5,r6
   477a8:	3825883a 	mov	r18,r7
   477ac:	983f841e 	bne	r19,zero,475c0 <__alt_data_end+0xfffd55c0>
   477b0:	8809883a 	mov	r4,r17
   477b4:	0047f600 	call	47f60 <__clzsi2>
   477b8:	10800804 	addi	r2,r2,32
   477bc:	10fffe04 	addi	r3,r2,-8
   477c0:	010007c4 	movi	r4,31
   477c4:	20ff830e 	bge	r4,r3,475d4 <__alt_data_end+0xfffd55d4>
   477c8:	14fff604 	addi	r19,r2,-40
   477cc:	8ce6983a 	sll	r19,r17,r19
   477d0:	0023883a 	mov	r17,zero
   477d4:	1c3f860e 	bge	r3,r16,475f0 <__alt_data_end+0xfffd55f0>
   477d8:	017fe034 	movhi	r5,65408
   477dc:	297fffc4 	addi	r5,r5,-1
   477e0:	80e1c83a 	sub	r16,r16,r3
   477e4:	994a703a 	and	r5,r19,r5
   477e8:	003f3206 	br	474b4 <__alt_data_end+0xfffd54b4>
   477ec:	0009883a 	mov	r4,zero
   477f0:	0005883a 	mov	r2,zero
   477f4:	003f4706 	br	47514 <__alt_data_end+0xfffd5514>
   477f8:	198cb03a 	or	r6,r3,r6
   477fc:	300cc03a 	cmpne	r6,r6,zero
   47800:	0005883a 	mov	r2,zero
   47804:	003f6306 	br	47594 <__alt_data_end+0xfffd5594>
   47808:	10009d1e 	bne	r2,zero,47a80 <__subdf3+0x658>
   4780c:	81c00044 	addi	r7,r16,1
   47810:	3881ffcc 	andi	r2,r7,2047
   47814:	02400044 	movi	r9,1
   47818:	4880680e 	bge	r9,r2,479bc <__subdf3+0x594>
   4781c:	0081ffc4 	movi	r2,2047
   47820:	3880ae26 	beq	r7,r2,47adc <__subdf3+0x6b4>
   47824:	344d883a 	add	r6,r6,r17
   47828:	3463803a 	cmpltu	r17,r6,r17
   4782c:	194b883a 	add	r5,r3,r5
   47830:	2c4b883a 	add	r5,r5,r17
   47834:	282297fa 	slli	r17,r5,31
   47838:	300cd07a 	srli	r6,r6,1
   4783c:	280ad07a 	srli	r5,r5,1
   47840:	3821883a 	mov	r16,r7
   47844:	89a2b03a 	or	r17,r17,r6
   47848:	003f1a06 	br	474b4 <__alt_data_end+0xfffd54b4>
   4784c:	0101ffc4 	movi	r4,2047
   47850:	813f431e 	bne	r16,r4,47560 <__alt_data_end+0xfffd5560>
   47854:	003f1706 	br	474b4 <__alt_data_end+0xfffd54b4>
   47858:	80bff844 	addi	r2,r16,-31
   4785c:	00c00804 	movi	r3,32
   47860:	9884d83a 	srl	r2,r19,r2
   47864:	28c05126 	beq	r5,r3,479ac <__subdf3+0x584>
   47868:	00c00fc4 	movi	r3,63
   4786c:	1c21c83a 	sub	r16,r3,r16
   47870:	9c26983a 	sll	r19,r19,r16
   47874:	9c62b03a 	or	r17,r19,r17
   47878:	8822c03a 	cmpne	r17,r17,zero
   4787c:	88a2b03a 	or	r17,r17,r2
   47880:	000b883a 	mov	r5,zero
   47884:	0021883a 	mov	r16,zero
   47888:	003fb406 	br	4775c <__alt_data_end+0xfffd575c>
   4788c:	113ff804 	addi	r4,r2,-32
   47890:	01c00804 	movi	r7,32
   47894:	1908d83a 	srl	r4,r3,r4
   47898:	11c04626 	beq	r2,r7,479b4 <__subdf3+0x58c>
   4789c:	01c01004 	movi	r7,64
   478a0:	3885c83a 	sub	r2,r7,r2
   478a4:	1884983a 	sll	r2,r3,r2
   478a8:	118cb03a 	or	r6,r2,r6
   478ac:	300cc03a 	cmpne	r6,r6,zero
   478b0:	310cb03a 	or	r6,r6,r4
   478b4:	0005883a 	mov	r2,zero
   478b8:	003f3606 	br	47594 <__alt_data_end+0xfffd5594>
   478bc:	80002b26 	beq	r16,zero,4796c <__subdf3+0x544>
   478c0:	0101ffc4 	movi	r4,2047
   478c4:	51006926 	beq	r10,r4,47a6c <__subdf3+0x644>
   478c8:	0085c83a 	sub	r2,zero,r2
   478cc:	29402034 	orhi	r5,r5,128
   478d0:	01000e04 	movi	r4,56
   478d4:	20807d16 	blt	r4,r2,47acc <__subdf3+0x6a4>
   478d8:	010007c4 	movi	r4,31
   478dc:	2080d916 	blt	r4,r2,47c44 <__subdf3+0x81c>
   478e0:	01000804 	movi	r4,32
   478e4:	2089c83a 	sub	r4,r4,r2
   478e8:	2912983a 	sll	r9,r5,r4
   478ec:	8890d83a 	srl	r8,r17,r2
   478f0:	8908983a 	sll	r4,r17,r4
   478f4:	2884d83a 	srl	r2,r5,r2
   478f8:	4a22b03a 	or	r17,r9,r8
   478fc:	2008c03a 	cmpne	r4,r4,zero
   47900:	8922b03a 	or	r17,r17,r4
   47904:	3463c83a 	sub	r17,r6,r17
   47908:	1885c83a 	sub	r2,r3,r2
   4790c:	344d803a 	cmpltu	r6,r6,r17
   47910:	118bc83a 	sub	r5,r2,r6
   47914:	5021883a 	mov	r16,r10
   47918:	3825883a 	mov	r18,r7
   4791c:	003f2206 	br	475a8 <__alt_data_end+0xfffd55a8>
   47920:	9886b03a 	or	r3,r19,r2
   47924:	18001c1e 	bne	r3,zero,47998 <__subdf3+0x570>
   47928:	0011883a 	mov	r8,zero
   4792c:	000b883a 	mov	r5,zero
   47930:	0023883a 	mov	r17,zero
   47934:	0021883a 	mov	r16,zero
   47938:	003f3e06 	br	47634 <__alt_data_end+0xfffd5634>
   4793c:	010007c4 	movi	r4,31
   47940:	20803c16 	blt	r4,r2,47a34 <__subdf3+0x60c>
   47944:	01000804 	movi	r4,32
   47948:	2089c83a 	sub	r4,r4,r2
   4794c:	1912983a 	sll	r9,r3,r4
   47950:	308ed83a 	srl	r7,r6,r2
   47954:	3108983a 	sll	r4,r6,r4
   47958:	1884d83a 	srl	r2,r3,r2
   4795c:	49ceb03a 	or	r7,r9,r7
   47960:	2008c03a 	cmpne	r4,r4,zero
   47964:	390eb03a 	or	r7,r7,r4
   47968:	003f4706 	br	47688 <__alt_data_end+0xfffd5688>
   4796c:	2c48b03a 	or	r4,r5,r17
   47970:	20003e26 	beq	r4,zero,47a6c <__subdf3+0x644>
   47974:	0084303a 	nor	r2,zero,r2
   47978:	10003a1e 	bne	r2,zero,47a64 <__subdf3+0x63c>
   4797c:	3463c83a 	sub	r17,r6,r17
   47980:	194bc83a 	sub	r5,r3,r5
   47984:	344d803a 	cmpltu	r6,r6,r17
   47988:	298bc83a 	sub	r5,r5,r6
   4798c:	5021883a 	mov	r16,r10
   47990:	3825883a 	mov	r18,r7
   47994:	003f0406 	br	475a8 <__alt_data_end+0xfffd55a8>
   47998:	1023883a 	mov	r17,r2
   4799c:	003f0706 	br	475bc <__alt_data_end+0xfffd55bc>
   479a0:	0101ffc4 	movi	r4,2047
   479a4:	813f331e 	bne	r16,r4,47674 <__alt_data_end+0xfffd5674>
   479a8:	003ec206 	br	474b4 <__alt_data_end+0xfffd54b4>
   479ac:	0027883a 	mov	r19,zero
   479b0:	003fb006 	br	47874 <__alt_data_end+0xfffd5874>
   479b4:	0005883a 	mov	r2,zero
   479b8:	003fbb06 	br	478a8 <__alt_data_end+0xfffd58a8>
   479bc:	2c44b03a 	or	r2,r5,r17
   479c0:	80008b1e 	bne	r16,zero,47bf0 <__subdf3+0x7c8>
   479c4:	1000b526 	beq	r2,zero,47c9c <__subdf3+0x874>
   479c8:	1984b03a 	or	r2,r3,r6
   479cc:	103eb926 	beq	r2,zero,474b4 <__alt_data_end+0xfffd54b4>
   479d0:	3449883a 	add	r4,r6,r17
   479d4:	2463803a 	cmpltu	r17,r4,r17
   479d8:	194b883a 	add	r5,r3,r5
   479dc:	2c4b883a 	add	r5,r5,r17
   479e0:	2880202c 	andhi	r2,r5,128
   479e4:	2023883a 	mov	r17,r4
   479e8:	103f5c26 	beq	r2,zero,4775c <__alt_data_end+0xfffd575c>
   479ec:	00bfe034 	movhi	r2,65408
   479f0:	10bfffc4 	addi	r2,r2,-1
   479f4:	4821883a 	mov	r16,r9
   479f8:	288a703a 	and	r5,r5,r2
   479fc:	003ead06 	br	474b4 <__alt_data_end+0xfffd54b4>
   47a00:	2c44b03a 	or	r2,r5,r17
   47a04:	8000291e 	bne	r16,zero,47aac <__subdf3+0x684>
   47a08:	10004f1e 	bne	r2,zero,47b48 <__subdf3+0x720>
   47a0c:	1984b03a 	or	r2,r3,r6
   47a10:	10000426 	beq	r2,zero,47a24 <__subdf3+0x5fc>
   47a14:	180b883a 	mov	r5,r3
   47a18:	3023883a 	mov	r17,r6
   47a1c:	3825883a 	mov	r18,r7
   47a20:	003ea406 	br	474b4 <__alt_data_end+0xfffd54b4>
   47a24:	0011883a 	mov	r8,zero
   47a28:	000b883a 	mov	r5,zero
   47a2c:	0023883a 	mov	r17,zero
   47a30:	003f0006 	br	47634 <__alt_data_end+0xfffd5634>
   47a34:	11fff804 	addi	r7,r2,-32
   47a38:	19c8d83a 	srl	r4,r3,r7
   47a3c:	01c00804 	movi	r7,32
   47a40:	11c07e26 	beq	r2,r7,47c3c <__subdf3+0x814>
   47a44:	01c01004 	movi	r7,64
   47a48:	3885c83a 	sub	r2,r7,r2
   47a4c:	1884983a 	sll	r2,r3,r2
   47a50:	118cb03a 	or	r6,r2,r6
   47a54:	300ec03a 	cmpne	r7,r6,zero
   47a58:	390eb03a 	or	r7,r7,r4
   47a5c:	0005883a 	mov	r2,zero
   47a60:	003f0906 	br	47688 <__alt_data_end+0xfffd5688>
   47a64:	0101ffc4 	movi	r4,2047
   47a68:	513f991e 	bne	r10,r4,478d0 <__alt_data_end+0xfffd58d0>
   47a6c:	180b883a 	mov	r5,r3
   47a70:	3023883a 	mov	r17,r6
   47a74:	5021883a 	mov	r16,r10
   47a78:	3825883a 	mov	r18,r7
   47a7c:	003e8d06 	br	474b4 <__alt_data_end+0xfffd54b4>
   47a80:	80001a1e 	bne	r16,zero,47aec <__subdf3+0x6c4>
   47a84:	2c48b03a 	or	r4,r5,r17
   47a88:	20005526 	beq	r4,zero,47be0 <__subdf3+0x7b8>
   47a8c:	0084303a 	nor	r2,zero,r2
   47a90:	1000511e 	bne	r2,zero,47bd8 <__subdf3+0x7b0>
   47a94:	89a3883a 	add	r17,r17,r6
   47a98:	194b883a 	add	r5,r3,r5
   47a9c:	898d803a 	cmpltu	r6,r17,r6
   47aa0:	298b883a 	add	r5,r5,r6
   47aa4:	5021883a 	mov	r16,r10
   47aa8:	003efc06 	br	4769c <__alt_data_end+0xfffd569c>
   47aac:	1000341e 	bne	r2,zero,47b80 <__subdf3+0x758>
   47ab0:	1984b03a 	or	r2,r3,r6
   47ab4:	10006f26 	beq	r2,zero,47c74 <__subdf3+0x84c>
   47ab8:	180b883a 	mov	r5,r3
   47abc:	3023883a 	mov	r17,r6
   47ac0:	3825883a 	mov	r18,r7
   47ac4:	0401ffc4 	movi	r16,2047
   47ac8:	003e7a06 	br	474b4 <__alt_data_end+0xfffd54b4>
   47acc:	2c62b03a 	or	r17,r5,r17
   47ad0:	8822c03a 	cmpne	r17,r17,zero
   47ad4:	0005883a 	mov	r2,zero
   47ad8:	003f8a06 	br	47904 <__alt_data_end+0xfffd5904>
   47adc:	3821883a 	mov	r16,r7
   47ae0:	000b883a 	mov	r5,zero
   47ae4:	0023883a 	mov	r17,zero
   47ae8:	003ed206 	br	47634 <__alt_data_end+0xfffd5634>
   47aec:	0101ffc4 	movi	r4,2047
   47af0:	51003b26 	beq	r10,r4,47be0 <__subdf3+0x7b8>
   47af4:	0085c83a 	sub	r2,zero,r2
   47af8:	29402034 	orhi	r5,r5,128
   47afc:	01000e04 	movi	r4,56
   47b00:	20806216 	blt	r4,r2,47c8c <__subdf3+0x864>
   47b04:	010007c4 	movi	r4,31
   47b08:	20806b16 	blt	r4,r2,47cb8 <__subdf3+0x890>
   47b0c:	01000804 	movi	r4,32
   47b10:	2089c83a 	sub	r4,r4,r2
   47b14:	2912983a 	sll	r9,r5,r4
   47b18:	888ed83a 	srl	r7,r17,r2
   47b1c:	8908983a 	sll	r4,r17,r4
   47b20:	2884d83a 	srl	r2,r5,r2
   47b24:	49e2b03a 	or	r17,r9,r7
   47b28:	2008c03a 	cmpne	r4,r4,zero
   47b2c:	8922b03a 	or	r17,r17,r4
   47b30:	89a3883a 	add	r17,r17,r6
   47b34:	10c5883a 	add	r2,r2,r3
   47b38:	898d803a 	cmpltu	r6,r17,r6
   47b3c:	118b883a 	add	r5,r2,r6
   47b40:	5021883a 	mov	r16,r10
   47b44:	003ed506 	br	4769c <__alt_data_end+0xfffd569c>
   47b48:	1984b03a 	or	r2,r3,r6
   47b4c:	103e5926 	beq	r2,zero,474b4 <__alt_data_end+0xfffd54b4>
   47b50:	8989c83a 	sub	r4,r17,r6
   47b54:	8911803a 	cmpltu	r8,r17,r4
   47b58:	28c5c83a 	sub	r2,r5,r3
   47b5c:	1205c83a 	sub	r2,r2,r8
   47b60:	1200202c 	andhi	r8,r2,128
   47b64:	403ef926 	beq	r8,zero,4774c <__alt_data_end+0xfffd574c>
   47b68:	3463c83a 	sub	r17,r6,r17
   47b6c:	194bc83a 	sub	r5,r3,r5
   47b70:	344d803a 	cmpltu	r6,r6,r17
   47b74:	298bc83a 	sub	r5,r5,r6
   47b78:	3825883a 	mov	r18,r7
   47b7c:	003e4d06 	br	474b4 <__alt_data_end+0xfffd54b4>
   47b80:	1984b03a 	or	r2,r3,r6
   47b84:	10002b26 	beq	r2,zero,47c34 <__subdf3+0x80c>
   47b88:	2808d0fa 	srli	r4,r5,3
   47b8c:	8822d0fa 	srli	r17,r17,3
   47b90:	280a977a 	slli	r5,r5,29
   47b94:	2080022c 	andhi	r2,r4,8
   47b98:	2c62b03a 	or	r17,r5,r17
   47b9c:	10000826 	beq	r2,zero,47bc0 <__subdf3+0x798>
   47ba0:	1810d0fa 	srli	r8,r3,3
   47ba4:	4080022c 	andhi	r2,r8,8
   47ba8:	1000051e 	bne	r2,zero,47bc0 <__subdf3+0x798>
   47bac:	300cd0fa 	srli	r6,r6,3
   47bb0:	1804977a 	slli	r2,r3,29
   47bb4:	4009883a 	mov	r4,r8
   47bb8:	3825883a 	mov	r18,r7
   47bbc:	11a2b03a 	or	r17,r2,r6
   47bc0:	880ad77a 	srli	r5,r17,29
   47bc4:	200890fa 	slli	r4,r4,3
   47bc8:	882290fa 	slli	r17,r17,3
   47bcc:	0401ffc4 	movi	r16,2047
   47bd0:	290ab03a 	or	r5,r5,r4
   47bd4:	003e3706 	br	474b4 <__alt_data_end+0xfffd54b4>
   47bd8:	0101ffc4 	movi	r4,2047
   47bdc:	513fc71e 	bne	r10,r4,47afc <__alt_data_end+0xfffd5afc>
   47be0:	180b883a 	mov	r5,r3
   47be4:	3023883a 	mov	r17,r6
   47be8:	5021883a 	mov	r16,r10
   47bec:	003e3106 	br	474b4 <__alt_data_end+0xfffd54b4>
   47bf0:	10002d26 	beq	r2,zero,47ca8 <__subdf3+0x880>
   47bf4:	1984b03a 	or	r2,r3,r6
   47bf8:	10000e26 	beq	r2,zero,47c34 <__subdf3+0x80c>
   47bfc:	2808d0fa 	srli	r4,r5,3
   47c00:	8822d0fa 	srli	r17,r17,3
   47c04:	280a977a 	slli	r5,r5,29
   47c08:	2080022c 	andhi	r2,r4,8
   47c0c:	2c62b03a 	or	r17,r5,r17
   47c10:	103feb26 	beq	r2,zero,47bc0 <__alt_data_end+0xfffd5bc0>
   47c14:	180ed0fa 	srli	r7,r3,3
   47c18:	3880022c 	andhi	r2,r7,8
   47c1c:	103fe81e 	bne	r2,zero,47bc0 <__alt_data_end+0xfffd5bc0>
   47c20:	300cd0fa 	srli	r6,r6,3
   47c24:	1804977a 	slli	r2,r3,29
   47c28:	3809883a 	mov	r4,r7
   47c2c:	11a2b03a 	or	r17,r2,r6
   47c30:	003fe306 	br	47bc0 <__alt_data_end+0xfffd5bc0>
   47c34:	0401ffc4 	movi	r16,2047
   47c38:	003e1e06 	br	474b4 <__alt_data_end+0xfffd54b4>
   47c3c:	0005883a 	mov	r2,zero
   47c40:	003f8306 	br	47a50 <__alt_data_end+0xfffd5a50>
   47c44:	113ff804 	addi	r4,r2,-32
   47c48:	02000804 	movi	r8,32
   47c4c:	2908d83a 	srl	r4,r5,r4
   47c50:	12002526 	beq	r2,r8,47ce8 <__subdf3+0x8c0>
   47c54:	02001004 	movi	r8,64
   47c58:	4085c83a 	sub	r2,r8,r2
   47c5c:	288a983a 	sll	r5,r5,r2
   47c60:	2c62b03a 	or	r17,r5,r17
   47c64:	8822c03a 	cmpne	r17,r17,zero
   47c68:	8922b03a 	or	r17,r17,r4
   47c6c:	0005883a 	mov	r2,zero
   47c70:	003f2406 	br	47904 <__alt_data_end+0xfffd5904>
   47c74:	01402034 	movhi	r5,128
   47c78:	0011883a 	mov	r8,zero
   47c7c:	297fffc4 	addi	r5,r5,-1
   47c80:	047ffe04 	movi	r17,-8
   47c84:	0401ffc4 	movi	r16,2047
   47c88:	003e6a06 	br	47634 <__alt_data_end+0xfffd5634>
   47c8c:	2c62b03a 	or	r17,r5,r17
   47c90:	8822c03a 	cmpne	r17,r17,zero
   47c94:	0005883a 	mov	r2,zero
   47c98:	003fa506 	br	47b30 <__alt_data_end+0xfffd5b30>
   47c9c:	180b883a 	mov	r5,r3
   47ca0:	3023883a 	mov	r17,r6
   47ca4:	003e0306 	br	474b4 <__alt_data_end+0xfffd54b4>
   47ca8:	180b883a 	mov	r5,r3
   47cac:	3023883a 	mov	r17,r6
   47cb0:	0401ffc4 	movi	r16,2047
   47cb4:	003dff06 	br	474b4 <__alt_data_end+0xfffd54b4>
   47cb8:	113ff804 	addi	r4,r2,-32
   47cbc:	01c00804 	movi	r7,32
   47cc0:	2908d83a 	srl	r4,r5,r4
   47cc4:	11c00a26 	beq	r2,r7,47cf0 <__subdf3+0x8c8>
   47cc8:	01c01004 	movi	r7,64
   47ccc:	3885c83a 	sub	r2,r7,r2
   47cd0:	288a983a 	sll	r5,r5,r2
   47cd4:	2c62b03a 	or	r17,r5,r17
   47cd8:	8822c03a 	cmpne	r17,r17,zero
   47cdc:	8922b03a 	or	r17,r17,r4
   47ce0:	0005883a 	mov	r2,zero
   47ce4:	003f9206 	br	47b30 <__alt_data_end+0xfffd5b30>
   47ce8:	000b883a 	mov	r5,zero
   47cec:	003fdc06 	br	47c60 <__alt_data_end+0xfffd5c60>
   47cf0:	000b883a 	mov	r5,zero
   47cf4:	003ff706 	br	47cd4 <__alt_data_end+0xfffd5cd4>

00047cf8 <__fixdfsi>:
   47cf8:	2806d53a 	srli	r3,r5,20
   47cfc:	00800434 	movhi	r2,16
   47d00:	10bfffc4 	addi	r2,r2,-1
   47d04:	18c1ffcc 	andi	r3,r3,2047
   47d08:	0180ff84 	movi	r6,1022
   47d0c:	2884703a 	and	r2,r5,r2
   47d10:	280ad7fa 	srli	r5,r5,31
   47d14:	30c0130e 	bge	r6,r3,47d64 <__fixdfsi+0x6c>
   47d18:	01810744 	movi	r6,1053
   47d1c:	30c00d16 	blt	r6,r3,47d54 <__fixdfsi+0x5c>
   47d20:	01810cc4 	movi	r6,1075
   47d24:	30cdc83a 	sub	r6,r6,r3
   47d28:	01c007c4 	movi	r7,31
   47d2c:	10800434 	orhi	r2,r2,16
   47d30:	39800e0e 	bge	r7,r6,47d6c <__fixdfsi+0x74>
   47d34:	010104c4 	movi	r4,1043
   47d38:	20c7c83a 	sub	r3,r4,r3
   47d3c:	10c6d83a 	srl	r3,r2,r3
   47d40:	29403fcc 	andi	r5,r5,255
   47d44:	0145c83a 	sub	r2,zero,r5
   47d48:	1884f03a 	xor	r2,r3,r2
   47d4c:	1145883a 	add	r2,r2,r5
   47d50:	f800283a 	ret
   47d54:	00a00034 	movhi	r2,32768
   47d58:	10bfffc4 	addi	r2,r2,-1
   47d5c:	2885883a 	add	r2,r5,r2
   47d60:	f800283a 	ret
   47d64:	0005883a 	mov	r2,zero
   47d68:	f800283a 	ret
   47d6c:	18fefb44 	addi	r3,r3,-1043
   47d70:	2188d83a 	srl	r4,r4,r6
   47d74:	10c6983a 	sll	r3,r2,r3
   47d78:	20c6b03a 	or	r3,r4,r3
   47d7c:	003ff006 	br	47d40 <__alt_data_end+0xfffd5d40>

00047d80 <__floatsidf>:
   47d80:	defffd04 	addi	sp,sp,-12
   47d84:	dc400115 	stw	r17,4(sp)
   47d88:	dfc00215 	stw	ra,8(sp)
   47d8c:	dc000015 	stw	r16,0(sp)
   47d90:	2023883a 	mov	r17,r4
   47d94:	20001426 	beq	r4,zero,47de8 <__floatsidf+0x68>
   47d98:	2020d7fa 	srli	r16,r4,31
   47d9c:	80000126 	beq	r16,zero,47da4 <__floatsidf+0x24>
   47da0:	0123c83a 	sub	r17,zero,r4
   47da4:	8809883a 	mov	r4,r17
   47da8:	0047f600 	call	47f60 <__clzsi2>
   47dac:	01410784 	movi	r5,1054
   47db0:	00c00284 	movi	r3,10
   47db4:	288bc83a 	sub	r5,r5,r2
   47db8:	18801c16 	blt	r3,r2,47e2c <__floatsidf+0xac>
   47dbc:	00c002c4 	movi	r3,11
   47dc0:	1887c83a 	sub	r3,r3,r2
   47dc4:	88c8d83a 	srl	r4,r17,r3
   47dc8:	00c00434 	movhi	r3,16
   47dcc:	18ffffc4 	addi	r3,r3,-1
   47dd0:	10800544 	addi	r2,r2,21
   47dd4:	20c8703a 	and	r4,r4,r3
   47dd8:	8884983a 	sll	r2,r17,r2
   47ddc:	28c1ffcc 	andi	r3,r5,2047
   47de0:	800d883a 	mov	r6,r16
   47de4:	00000406 	br	47df8 <__floatsidf+0x78>
   47de8:	000d883a 	mov	r6,zero
   47dec:	0007883a 	mov	r3,zero
   47df0:	0009883a 	mov	r4,zero
   47df4:	0005883a 	mov	r2,zero
   47df8:	180a953a 	slli	r5,r3,20
   47dfc:	31803fcc 	andi	r6,r6,255
   47e00:	00c00434 	movhi	r3,16
   47e04:	300c97fa 	slli	r6,r6,31
   47e08:	18ffffc4 	addi	r3,r3,-1
   47e0c:	20c6703a 	and	r3,r4,r3
   47e10:	1946b03a 	or	r3,r3,r5
   47e14:	1986b03a 	or	r3,r3,r6
   47e18:	dfc00217 	ldw	ra,8(sp)
   47e1c:	dc400117 	ldw	r17,4(sp)
   47e20:	dc000017 	ldw	r16,0(sp)
   47e24:	dec00304 	addi	sp,sp,12
   47e28:	f800283a 	ret
   47e2c:	10fffd44 	addi	r3,r2,-11
   47e30:	88c8983a 	sll	r4,r17,r3
   47e34:	00800434 	movhi	r2,16
   47e38:	10bfffc4 	addi	r2,r2,-1
   47e3c:	2088703a 	and	r4,r4,r2
   47e40:	28c1ffcc 	andi	r3,r5,2047
   47e44:	800d883a 	mov	r6,r16
   47e48:	0005883a 	mov	r2,zero
   47e4c:	003fea06 	br	47df8 <__alt_data_end+0xfffd5df8>

00047e50 <__extendsfdf2>:
   47e50:	200ad5fa 	srli	r5,r4,23
   47e54:	defffd04 	addi	sp,sp,-12
   47e58:	dc400115 	stw	r17,4(sp)
   47e5c:	29403fcc 	andi	r5,r5,255
   47e60:	29800044 	addi	r6,r5,1
   47e64:	04402034 	movhi	r17,128
   47e68:	dc000015 	stw	r16,0(sp)
   47e6c:	8c7fffc4 	addi	r17,r17,-1
   47e70:	dfc00215 	stw	ra,8(sp)
   47e74:	31803fcc 	andi	r6,r6,255
   47e78:	00800044 	movi	r2,1
   47e7c:	8922703a 	and	r17,r17,r4
   47e80:	2020d7fa 	srli	r16,r4,31
   47e84:	1180110e 	bge	r2,r6,47ecc <__extendsfdf2+0x7c>
   47e88:	880ed0fa 	srli	r7,r17,3
   47e8c:	8822977a 	slli	r17,r17,29
   47e90:	2940e004 	addi	r5,r5,896
   47e94:	2941ffcc 	andi	r5,r5,2047
   47e98:	280c953a 	slli	r6,r5,20
   47e9c:	01400434 	movhi	r5,16
   47ea0:	800697fa 	slli	r3,r16,31
   47ea4:	297fffc4 	addi	r5,r5,-1
   47ea8:	394a703a 	and	r5,r7,r5
   47eac:	298ab03a 	or	r5,r5,r6
   47eb0:	8805883a 	mov	r2,r17
   47eb4:	28c6b03a 	or	r3,r5,r3
   47eb8:	dfc00217 	ldw	ra,8(sp)
   47ebc:	dc400117 	ldw	r17,4(sp)
   47ec0:	dc000017 	ldw	r16,0(sp)
   47ec4:	dec00304 	addi	sp,sp,12
   47ec8:	f800283a 	ret
   47ecc:	2800111e 	bne	r5,zero,47f14 <__extendsfdf2+0xc4>
   47ed0:	88001c26 	beq	r17,zero,47f44 <__extendsfdf2+0xf4>
   47ed4:	8809883a 	mov	r4,r17
   47ed8:	0047f600 	call	47f60 <__clzsi2>
   47edc:	00c00284 	movi	r3,10
   47ee0:	18801b16 	blt	r3,r2,47f50 <__extendsfdf2+0x100>
   47ee4:	01c002c4 	movi	r7,11
   47ee8:	388fc83a 	sub	r7,r7,r2
   47eec:	10c00544 	addi	r3,r2,21
   47ef0:	89ced83a 	srl	r7,r17,r7
   47ef4:	88e2983a 	sll	r17,r17,r3
   47ef8:	0180e244 	movi	r6,905
   47efc:	308bc83a 	sub	r5,r6,r2
   47f00:	01800434 	movhi	r6,16
   47f04:	31bfffc4 	addi	r6,r6,-1
   47f08:	398e703a 	and	r7,r7,r6
   47f0c:	2941ffcc 	andi	r5,r5,2047
   47f10:	003fe006 	br	47e94 <__alt_data_end+0xfffd5e94>
   47f14:	88000826 	beq	r17,zero,47f38 <__extendsfdf2+0xe8>
   47f18:	880ed0fa 	srli	r7,r17,3
   47f1c:	00800434 	movhi	r2,16
   47f20:	10bfffc4 	addi	r2,r2,-1
   47f24:	39c00234 	orhi	r7,r7,8
   47f28:	8822977a 	slli	r17,r17,29
   47f2c:	388e703a 	and	r7,r7,r2
   47f30:	0141ffc4 	movi	r5,2047
   47f34:	003fd706 	br	47e94 <__alt_data_end+0xfffd5e94>
   47f38:	0141ffc4 	movi	r5,2047
   47f3c:	000f883a 	mov	r7,zero
   47f40:	003fd406 	br	47e94 <__alt_data_end+0xfffd5e94>
   47f44:	000b883a 	mov	r5,zero
   47f48:	000f883a 	mov	r7,zero
   47f4c:	003fd106 	br	47e94 <__alt_data_end+0xfffd5e94>
   47f50:	11fffd44 	addi	r7,r2,-11
   47f54:	89ce983a 	sll	r7,r17,r7
   47f58:	0023883a 	mov	r17,zero
   47f5c:	003fe606 	br	47ef8 <__alt_data_end+0xfffd5ef8>

00047f60 <__clzsi2>:
   47f60:	00bfffd4 	movui	r2,65535
   47f64:	11000b36 	bltu	r2,r4,47f94 <__clzsi2+0x34>
   47f68:	00803fc4 	movi	r2,255
   47f6c:	1100122e 	bgeu	r2,r4,47fb8 <__clzsi2+0x58>
   47f70:	00c00204 	movi	r3,8
   47f74:	01400604 	movi	r5,24
   47f78:	20c8d83a 	srl	r4,r4,r3
   47f7c:	00800174 	movhi	r2,5
   47f80:	10929004 	addi	r2,r2,19008
   47f84:	1109883a 	add	r4,r2,r4
   47f88:	20800003 	ldbu	r2,0(r4)
   47f8c:	2885c83a 	sub	r2,r5,r2
   47f90:	f800283a 	ret
   47f94:	00804034 	movhi	r2,256
   47f98:	10bfffc4 	addi	r2,r2,-1
   47f9c:	11000336 	bltu	r2,r4,47fac <__clzsi2+0x4c>
   47fa0:	00c00404 	movi	r3,16
   47fa4:	180b883a 	mov	r5,r3
   47fa8:	003ff306 	br	47f78 <__alt_data_end+0xfffd5f78>
   47fac:	00c00604 	movi	r3,24
   47fb0:	01400204 	movi	r5,8
   47fb4:	003ff006 	br	47f78 <__alt_data_end+0xfffd5f78>
   47fb8:	0007883a 	mov	r3,zero
   47fbc:	01400804 	movi	r5,32
   47fc0:	003fed06 	br	47f78 <__alt_data_end+0xfffd5f78>

00047fc4 <_puts_r>:
   47fc4:	defff604 	addi	sp,sp,-40
   47fc8:	dc000715 	stw	r16,28(sp)
   47fcc:	2021883a 	mov	r16,r4
   47fd0:	2809883a 	mov	r4,r5
   47fd4:	dc400815 	stw	r17,32(sp)
   47fd8:	dfc00915 	stw	ra,36(sp)
   47fdc:	2823883a 	mov	r17,r5
   47fe0:	004823c0 	call	4823c <strlen>
   47fe4:	81400217 	ldw	r5,8(r16)
   47fe8:	11000044 	addi	r4,r2,1
   47fec:	d8800115 	stw	r2,4(sp)
   47ff0:	00800174 	movhi	r2,5
   47ff4:	2980030b 	ldhu	r6,12(r5)
   47ff8:	1092d004 	addi	r2,r2,19264
   47ffc:	d8800215 	stw	r2,8(sp)
   48000:	00800044 	movi	r2,1
   48004:	d8800315 	stw	r2,12(sp)
   48008:	00800084 	movi	r2,2
   4800c:	d8800515 	stw	r2,20(sp)
   48010:	dc400015 	stw	r17,0(sp)
   48014:	d9000615 	stw	r4,24(sp)
   48018:	dec00415 	stw	sp,16(sp)
   4801c:	3088000c 	andi	r2,r6,8192
   48020:	1000061e 	bne	r2,zero,4803c <_puts_r+0x78>
   48024:	29001917 	ldw	r4,100(r5)
   48028:	00b7ffc4 	movi	r2,-8193
   4802c:	31880014 	ori	r6,r6,8192
   48030:	2084703a 	and	r2,r4,r2
   48034:	2980030d 	sth	r6,12(r5)
   48038:	28801915 	stw	r2,100(r5)
   4803c:	8009883a 	mov	r4,r16
   48040:	d9800404 	addi	r6,sp,16
   48044:	004bb8c0 	call	4bb8c <__sfvwrite_r>
   48048:	1000061e 	bne	r2,zero,48064 <_puts_r+0xa0>
   4804c:	00800284 	movi	r2,10
   48050:	dfc00917 	ldw	ra,36(sp)
   48054:	dc400817 	ldw	r17,32(sp)
   48058:	dc000717 	ldw	r16,28(sp)
   4805c:	dec00a04 	addi	sp,sp,40
   48060:	f800283a 	ret
   48064:	00bfffc4 	movi	r2,-1
   48068:	003ff906 	br	48050 <__alt_data_end+0xfffd6050>

0004806c <puts>:
   4806c:	00800174 	movhi	r2,5
   48070:	109a5f04 	addi	r2,r2,27004
   48074:	200b883a 	mov	r5,r4
   48078:	11000017 	ldw	r4,0(r2)
   4807c:	0047fc41 	jmpi	47fc4 <_puts_r>

00048080 <_snprintf_r>:
   48080:	3005883a 	mov	r2,r6
   48084:	30003016 	blt	r6,zero,48148 <_snprintf_r+0xc8>
   48088:	deffe404 	addi	sp,sp,-112
   4808c:	00c08204 	movi	r3,520
   48090:	dc001a15 	stw	r16,104(sp)
   48094:	dfc01b15 	stw	ra,108(sp)
   48098:	d8c0030d 	sth	r3,12(sp)
   4809c:	d9400015 	stw	r5,0(sp)
   480a0:	d9400415 	stw	r5,16(sp)
   480a4:	380d883a 	mov	r6,r7
   480a8:	2021883a 	mov	r16,r4
   480ac:	10001026 	beq	r2,zero,480f0 <_snprintf_r+0x70>
   480b0:	10bfffc4 	addi	r2,r2,-1
   480b4:	d8800215 	stw	r2,8(sp)
   480b8:	d8800515 	stw	r2,20(sp)
   480bc:	d80b883a 	mov	r5,sp
   480c0:	00bfffc4 	movi	r2,-1
   480c4:	d9c01c04 	addi	r7,sp,112
   480c8:	d880038d 	sth	r2,14(sp)
   480cc:	00482d40 	call	482d4 <___svfprintf_internal_r>
   480d0:	00ffffc4 	movi	r3,-1
   480d4:	10c01916 	blt	r2,r3,4813c <_snprintf_r+0xbc>
   480d8:	d8c00017 	ldw	r3,0(sp)
   480dc:	18000005 	stb	zero,0(r3)
   480e0:	dfc01b17 	ldw	ra,108(sp)
   480e4:	dc001a17 	ldw	r16,104(sp)
   480e8:	dec01c04 	addi	sp,sp,112
   480ec:	f800283a 	ret
   480f0:	00bfffc4 	movi	r2,-1
   480f4:	d80b883a 	mov	r5,sp
   480f8:	d9c01c04 	addi	r7,sp,112
   480fc:	d8000215 	stw	zero,8(sp)
   48100:	d8000515 	stw	zero,20(sp)
   48104:	d880038d 	sth	r2,14(sp)
   48108:	00482d40 	call	482d4 <___svfprintf_internal_r>
   4810c:	00ffffc4 	movi	r3,-1
   48110:	10c00416 	blt	r2,r3,48124 <_snprintf_r+0xa4>
   48114:	dfc01b17 	ldw	ra,108(sp)
   48118:	dc001a17 	ldw	r16,104(sp)
   4811c:	dec01c04 	addi	sp,sp,112
   48120:	f800283a 	ret
   48124:	00c022c4 	movi	r3,139
   48128:	80c00015 	stw	r3,0(r16)
   4812c:	dfc01b17 	ldw	ra,108(sp)
   48130:	dc001a17 	ldw	r16,104(sp)
   48134:	dec01c04 	addi	sp,sp,112
   48138:	f800283a 	ret
   4813c:	00c022c4 	movi	r3,139
   48140:	80c00015 	stw	r3,0(r16)
   48144:	003fe406 	br	480d8 <__alt_data_end+0xfffd60d8>
   48148:	008022c4 	movi	r2,139
   4814c:	20800015 	stw	r2,0(r4)
   48150:	00bfffc4 	movi	r2,-1
   48154:	f800283a 	ret

00048158 <snprintf>:
   48158:	deffe304 	addi	sp,sp,-116
   4815c:	dfc01b15 	stw	ra,108(sp)
   48160:	dc001a15 	stw	r16,104(sp)
   48164:	d9c01c15 	stw	r7,112(sp)
   48168:	00800174 	movhi	r2,5
   4816c:	109a5f04 	addi	r2,r2,27004
   48170:	14000017 	ldw	r16,0(r2)
   48174:	28002d16 	blt	r5,zero,4822c <snprintf+0xd4>
   48178:	00c08204 	movi	r3,520
   4817c:	d8c0030d 	sth	r3,12(sp)
   48180:	d9000015 	stw	r4,0(sp)
   48184:	d9000415 	stw	r4,16(sp)
   48188:	28001126 	beq	r5,zero,481d0 <snprintf+0x78>
   4818c:	28bfffc4 	addi	r2,r5,-1
   48190:	d8800215 	stw	r2,8(sp)
   48194:	d8800515 	stw	r2,20(sp)
   48198:	8009883a 	mov	r4,r16
   4819c:	00bfffc4 	movi	r2,-1
   481a0:	d80b883a 	mov	r5,sp
   481a4:	d9c01c04 	addi	r7,sp,112
   481a8:	d880038d 	sth	r2,14(sp)
   481ac:	00482d40 	call	482d4 <___svfprintf_internal_r>
   481b0:	00ffffc4 	movi	r3,-1
   481b4:	10c01a16 	blt	r2,r3,48220 <snprintf+0xc8>
   481b8:	d8c00017 	ldw	r3,0(sp)
   481bc:	18000005 	stb	zero,0(r3)
   481c0:	dfc01b17 	ldw	ra,108(sp)
   481c4:	dc001a17 	ldw	r16,104(sp)
   481c8:	dec01d04 	addi	sp,sp,116
   481cc:	f800283a 	ret
   481d0:	00bfffc4 	movi	r2,-1
   481d4:	8009883a 	mov	r4,r16
   481d8:	d80b883a 	mov	r5,sp
   481dc:	d9c01c04 	addi	r7,sp,112
   481e0:	d8000215 	stw	zero,8(sp)
   481e4:	d8000515 	stw	zero,20(sp)
   481e8:	d880038d 	sth	r2,14(sp)
   481ec:	00482d40 	call	482d4 <___svfprintf_internal_r>
   481f0:	00ffffc4 	movi	r3,-1
   481f4:	10c00416 	blt	r2,r3,48208 <snprintf+0xb0>
   481f8:	dfc01b17 	ldw	ra,108(sp)
   481fc:	dc001a17 	ldw	r16,104(sp)
   48200:	dec01d04 	addi	sp,sp,116
   48204:	f800283a 	ret
   48208:	00c022c4 	movi	r3,139
   4820c:	80c00015 	stw	r3,0(r16)
   48210:	dfc01b17 	ldw	ra,108(sp)
   48214:	dc001a17 	ldw	r16,104(sp)
   48218:	dec01d04 	addi	sp,sp,116
   4821c:	f800283a 	ret
   48220:	00c022c4 	movi	r3,139
   48224:	80c00015 	stw	r3,0(r16)
   48228:	003fe306 	br	481b8 <__alt_data_end+0xfffd61b8>
   4822c:	008022c4 	movi	r2,139
   48230:	80800015 	stw	r2,0(r16)
   48234:	00bfffc4 	movi	r2,-1
   48238:	003fef06 	br	481f8 <__alt_data_end+0xfffd61f8>

0004823c <strlen>:
   4823c:	208000cc 	andi	r2,r4,3
   48240:	10002026 	beq	r2,zero,482c4 <strlen+0x88>
   48244:	20800007 	ldb	r2,0(r4)
   48248:	10002026 	beq	r2,zero,482cc <strlen+0x90>
   4824c:	2005883a 	mov	r2,r4
   48250:	00000206 	br	4825c <strlen+0x20>
   48254:	10c00007 	ldb	r3,0(r2)
   48258:	18001826 	beq	r3,zero,482bc <strlen+0x80>
   4825c:	10800044 	addi	r2,r2,1
   48260:	10c000cc 	andi	r3,r2,3
   48264:	183ffb1e 	bne	r3,zero,48254 <__alt_data_end+0xfffd6254>
   48268:	10c00017 	ldw	r3,0(r2)
   4826c:	01ffbff4 	movhi	r7,65279
   48270:	39ffbfc4 	addi	r7,r7,-257
   48274:	00ca303a 	nor	r5,zero,r3
   48278:	01a02074 	movhi	r6,32897
   4827c:	19c7883a 	add	r3,r3,r7
   48280:	31a02004 	addi	r6,r6,-32640
   48284:	1946703a 	and	r3,r3,r5
   48288:	1986703a 	and	r3,r3,r6
   4828c:	1800091e 	bne	r3,zero,482b4 <strlen+0x78>
   48290:	10800104 	addi	r2,r2,4
   48294:	10c00017 	ldw	r3,0(r2)
   48298:	19cb883a 	add	r5,r3,r7
   4829c:	00c6303a 	nor	r3,zero,r3
   482a0:	28c6703a 	and	r3,r5,r3
   482a4:	1986703a 	and	r3,r3,r6
   482a8:	183ff926 	beq	r3,zero,48290 <__alt_data_end+0xfffd6290>
   482ac:	00000106 	br	482b4 <strlen+0x78>
   482b0:	10800044 	addi	r2,r2,1
   482b4:	10c00007 	ldb	r3,0(r2)
   482b8:	183ffd1e 	bne	r3,zero,482b0 <__alt_data_end+0xfffd62b0>
   482bc:	1105c83a 	sub	r2,r2,r4
   482c0:	f800283a 	ret
   482c4:	2005883a 	mov	r2,r4
   482c8:	003fe706 	br	48268 <__alt_data_end+0xfffd6268>
   482cc:	0005883a 	mov	r2,zero
   482d0:	f800283a 	ret

000482d4 <___svfprintf_internal_r>:
   482d4:	deffb504 	addi	sp,sp,-300
   482d8:	dfc04a15 	stw	ra,296(sp)
   482dc:	ddc04815 	stw	r23,288(sp)
   482e0:	d9002f15 	stw	r4,188(sp)
   482e4:	282f883a 	mov	r23,r5
   482e8:	d9802915 	stw	r6,164(sp)
   482ec:	d9c02d15 	stw	r7,180(sp)
   482f0:	df004915 	stw	fp,292(sp)
   482f4:	dd804715 	stw	r22,284(sp)
   482f8:	dd404615 	stw	r21,280(sp)
   482fc:	dd004515 	stw	r20,276(sp)
   48300:	dcc04415 	stw	r19,272(sp)
   48304:	dc804315 	stw	r18,268(sp)
   48308:	dc404215 	stw	r17,264(sp)
   4830c:	dc004115 	stw	r16,260(sp)
   48310:	004c0f80 	call	4c0f8 <_localeconv_r>
   48314:	10800017 	ldw	r2,0(r2)
   48318:	1009883a 	mov	r4,r2
   4831c:	d8803515 	stw	r2,212(sp)
   48320:	004823c0 	call	4823c <strlen>
   48324:	d8803915 	stw	r2,228(sp)
   48328:	b880030b 	ldhu	r2,12(r23)
   4832c:	1080200c 	andi	r2,r2,128
   48330:	10000226 	beq	r2,zero,4833c <___svfprintf_internal_r+0x68>
   48334:	b8800417 	ldw	r2,16(r23)
   48338:	10065f26 	beq	r2,zero,49cb8 <___svfprintf_internal_r+0x19e4>
   4833c:	db001dc4 	addi	r12,sp,119
   48340:	dd801e04 	addi	r22,sp,120
   48344:	d8800404 	addi	r2,sp,16
   48348:	05000174 	movhi	r20,5
   4834c:	b317c83a 	sub	r11,r22,r12
   48350:	a512e184 	addi	r20,r20,19334
   48354:	db002815 	stw	r12,160(sp)
   48358:	d8801e15 	stw	r2,120(sp)
   4835c:	d8002015 	stw	zero,128(sp)
   48360:	d8001f15 	stw	zero,124(sp)
   48364:	d8003315 	stw	zero,204(sp)
   48368:	d8003715 	stw	zero,220(sp)
   4836c:	d8003815 	stw	zero,224(sp)
   48370:	1011883a 	mov	r8,r2
   48374:	d8003b15 	stw	zero,236(sp)
   48378:	d8003a15 	stw	zero,232(sp)
   4837c:	d8003015 	stw	zero,192(sp)
   48380:	dac03d15 	stw	r11,244(sp)
   48384:	db002917 	ldw	r12,164(sp)
   48388:	60800007 	ldb	r2,0(r12)
   4838c:	1000ab26 	beq	r2,zero,4863c <___svfprintf_internal_r+0x368>
   48390:	00c00944 	movi	r3,37
   48394:	10c0a926 	beq	r2,r3,4863c <___svfprintf_internal_r+0x368>
   48398:	6021883a 	mov	r16,r12
   4839c:	00000106 	br	483a4 <___svfprintf_internal_r+0xd0>
   483a0:	10c08426 	beq	r2,r3,485b4 <___svfprintf_internal_r+0x2e0>
   483a4:	84000044 	addi	r16,r16,1
   483a8:	80800007 	ldb	r2,0(r16)
   483ac:	103ffc1e 	bne	r2,zero,483a0 <__alt_data_end+0xfffd63a0>
   483b0:	dac02917 	ldw	r11,164(sp)
   483b4:	82e3c83a 	sub	r17,r16,r11
   483b8:	88000f26 	beq	r17,zero,483f8 <___svfprintf_internal_r+0x124>
   483bc:	d8c02017 	ldw	r3,128(sp)
   483c0:	d8801f17 	ldw	r2,124(sp)
   483c4:	dac02917 	ldw	r11,164(sp)
   483c8:	1c47883a 	add	r3,r3,r17
   483cc:	10800044 	addi	r2,r2,1
   483d0:	d8c02015 	stw	r3,128(sp)
   483d4:	42c00015 	stw	r11,0(r8)
   483d8:	44400115 	stw	r17,4(r8)
   483dc:	d8801f15 	stw	r2,124(sp)
   483e0:	00c001c4 	movi	r3,7
   483e4:	18807616 	blt	r3,r2,485c0 <___svfprintf_internal_r+0x2ec>
   483e8:	42000204 	addi	r8,r8,8
   483ec:	db003017 	ldw	r12,192(sp)
   483f0:	6459883a 	add	r12,r12,r17
   483f4:	db003015 	stw	r12,192(sp)
   483f8:	80800007 	ldb	r2,0(r16)
   483fc:	10007726 	beq	r2,zero,485dc <___svfprintf_internal_r+0x308>
   48400:	80800044 	addi	r2,r16,1
   48404:	84000047 	ldb	r16,1(r16)
   48408:	d8002785 	stb	zero,158(sp)
   4840c:	000d883a 	mov	r6,zero
   48410:	027fffc4 	movi	r9,-1
   48414:	d8002e15 	stw	zero,184(sp)
   48418:	0023883a 	mov	r17,zero
   4841c:	01001604 	movi	r4,88
   48420:	01400244 	movi	r5,9
   48424:	02800a84 	movi	r10,42
   48428:	01c01b04 	movi	r7,108
   4842c:	10c00044 	addi	r3,r2,1
   48430:	80bff804 	addi	r2,r16,-32
   48434:	2082e636 	bltu	r4,r2,48fd0 <___svfprintf_internal_r+0xcfc>
   48438:	100490ba 	slli	r2,r2,2
   4843c:	02c00174 	movhi	r11,5
   48440:	5ae11404 	addi	r11,r11,-31664
   48444:	12c5883a 	add	r2,r2,r11
   48448:	10800017 	ldw	r2,0(r2)
   4844c:	1000683a 	jmp	r2
   48450:	00048db0 	cmpltui	zero,zero,4662
   48454:	00048fd0 	cmplti	zero,zero,4671
   48458:	00048fd0 	cmplti	zero,zero,4671
   4845c:	00048dd0 	cmplti	zero,zero,4663
   48460:	00048fd0 	cmplti	zero,zero,4671
   48464:	00048fd0 	cmplti	zero,zero,4671
   48468:	00048fd0 	cmplti	zero,zero,4671
   4846c:	00048fd0 	cmplti	zero,zero,4671
   48470:	00048fd0 	cmplti	zero,zero,4671
   48474:	00048fd0 	cmplti	zero,zero,4671
   48478:	00048de0 	cmpeqi	zero,zero,4663
   4847c:	00048e0c 	andi	zero,zero,4664
   48480:	00048fd0 	cmplti	zero,zero,4671
   48484:	00048644 	movi	zero,4633
   48488:	00048654 	movui	zero,4633
   4848c:	00048fd0 	cmplti	zero,zero,4671
   48490:	00048694 	movui	zero,4634
   48494:	00048c74 	movhi	zero,4657
   48498:	00048c74 	movhi	zero,4657
   4849c:	00048c74 	movhi	zero,4657
   484a0:	00048c74 	movhi	zero,4657
   484a4:	00048c74 	movhi	zero,4657
   484a8:	00048c74 	movhi	zero,4657
   484ac:	00048c74 	movhi	zero,4657
   484b0:	00048c74 	movhi	zero,4657
   484b4:	00048c74 	movhi	zero,4657
   484b8:	00048fd0 	cmplti	zero,zero,4671
   484bc:	00048fd0 	cmplti	zero,zero,4671
   484c0:	00048fd0 	cmplti	zero,zero,4671
   484c4:	00048fd0 	cmplti	zero,zero,4671
   484c8:	00048fd0 	cmplti	zero,zero,4671
   484cc:	00048fd0 	cmplti	zero,zero,4671
   484d0:	00048fd0 	cmplti	zero,zero,4671
   484d4:	00048fd0 	cmplti	zero,zero,4671
   484d8:	00048fd0 	cmplti	zero,zero,4671
   484dc:	00048fd0 	cmplti	zero,zero,4671
   484e0:	000486a4 	muli	zero,zero,4634
   484e4:	00048b24 	muli	zero,zero,4652
   484e8:	00048fd0 	cmplti	zero,zero,4671
   484ec:	00048b24 	muli	zero,zero,4652
   484f0:	00048fd0 	cmplti	zero,zero,4671
   484f4:	00048fd0 	cmplti	zero,zero,4671
   484f8:	00048fd0 	cmplti	zero,zero,4671
   484fc:	00048fd0 	cmplti	zero,zero,4671
   48500:	00048bc8 	cmpgei	zero,zero,4655
   48504:	00048fd0 	cmplti	zero,zero,4671
   48508:	00048fd0 	cmplti	zero,zero,4671
   4850c:	00048f64 	muli	zero,zero,4669
   48510:	00048fd0 	cmplti	zero,zero,4671
   48514:	00048fd0 	cmplti	zero,zero,4671
   48518:	00048fd0 	cmplti	zero,zero,4671
   4851c:	00048fd0 	cmplti	zero,zero,4671
   48520:	00048fd0 	cmplti	zero,zero,4671
   48524:	00048bd8 	cmpnei	zero,zero,4655
   48528:	00048fd0 	cmplti	zero,zero,4671
   4852c:	00048fd0 	cmplti	zero,zero,4671
   48530:	00048c18 	cmpnei	zero,zero,4656
   48534:	00048fd0 	cmplti	zero,zero,4671
   48538:	00048fd0 	cmplti	zero,zero,4671
   4853c:	00048fd0 	cmplti	zero,zero,4671
   48540:	00048fd0 	cmplti	zero,zero,4671
   48544:	00048fd0 	cmplti	zero,zero,4671
   48548:	00048fd0 	cmplti	zero,zero,4671
   4854c:	00048fd0 	cmplti	zero,zero,4671
   48550:	00048fd0 	cmplti	zero,zero,4671
   48554:	00048fd0 	cmplti	zero,zero,4671
   48558:	00048fd0 	cmplti	zero,zero,4671
   4855c:	00048ebc 	xorhi	zero,zero,4666
   48560:	00048efc 	xorhi	zero,zero,4667
   48564:	00048b24 	muli	zero,zero,4652
   48568:	00048b24 	muli	zero,zero,4652
   4856c:	00048b24 	muli	zero,zero,4652
   48570:	00048e1c 	xori	zero,zero,4664
   48574:	00048efc 	xorhi	zero,zero,4667
   48578:	00048fd0 	cmplti	zero,zero,4671
   4857c:	00048fd0 	cmplti	zero,zero,4671
   48580:	00048e2c 	andhi	zero,zero,4664
   48584:	00048fd0 	cmplti	zero,zero,4671
   48588:	00048e40 	call	48e4 <__alt_mem_onchip_memory2-0x3b71c>
   4858c:	00048f94 	movui	zero,4670
   48590:	00048e74 	movhi	zero,4665
   48594:	00048ca8 	cmpgeui	zero,zero,4658
   48598:	00048fd0 	cmplti	zero,zero,4671
   4859c:	00048cb8 	rdprs	zero,zero,4658
   485a0:	00048fd0 	cmplti	zero,zero,4671
   485a4:	00048d30 	cmpltui	zero,zero,4660
   485a8:	00048fd0 	cmplti	zero,zero,4671
   485ac:	00048fd0 	cmplti	zero,zero,4671
   485b0:	00048d70 	cmpltui	zero,zero,4661
   485b4:	db002917 	ldw	r12,164(sp)
   485b8:	8323c83a 	sub	r17,r16,r12
   485bc:	003f7e06 	br	483b8 <__alt_data_end+0xfffd63b8>
   485c0:	d9002f17 	ldw	r4,188(sp)
   485c4:	b80b883a 	mov	r5,r23
   485c8:	b00d883a 	mov	r6,r22
   485cc:	004e2c40 	call	4e2c4 <__ssprint_r>
   485d0:	1000081e 	bne	r2,zero,485f4 <___svfprintf_internal_r+0x320>
   485d4:	da000404 	addi	r8,sp,16
   485d8:	003f8406 	br	483ec <__alt_data_end+0xfffd63ec>
   485dc:	d8802017 	ldw	r2,128(sp)
   485e0:	10000426 	beq	r2,zero,485f4 <___svfprintf_internal_r+0x320>
   485e4:	d9002f17 	ldw	r4,188(sp)
   485e8:	b80b883a 	mov	r5,r23
   485ec:	d9801e04 	addi	r6,sp,120
   485f0:	004e2c40 	call	4e2c4 <__ssprint_r>
   485f4:	b880030b 	ldhu	r2,12(r23)
   485f8:	1080100c 	andi	r2,r2,64
   485fc:	10000d1e 	bne	r2,zero,48634 <___svfprintf_internal_r+0x360>
   48600:	d8803017 	ldw	r2,192(sp)
   48604:	dfc04a17 	ldw	ra,296(sp)
   48608:	df004917 	ldw	fp,292(sp)
   4860c:	ddc04817 	ldw	r23,288(sp)
   48610:	dd804717 	ldw	r22,284(sp)
   48614:	dd404617 	ldw	r21,280(sp)
   48618:	dd004517 	ldw	r20,276(sp)
   4861c:	dcc04417 	ldw	r19,272(sp)
   48620:	dc804317 	ldw	r18,268(sp)
   48624:	dc404217 	ldw	r17,264(sp)
   48628:	dc004117 	ldw	r16,260(sp)
   4862c:	dec04b04 	addi	sp,sp,300
   48630:	f800283a 	ret
   48634:	00bfffc4 	movi	r2,-1
   48638:	003ff206 	br	48604 <__alt_data_end+0xfffd6604>
   4863c:	dc002917 	ldw	r16,164(sp)
   48640:	003f6d06 	br	483f8 <__alt_data_end+0xfffd63f8>
   48644:	1805883a 	mov	r2,r3
   48648:	8c400114 	ori	r17,r17,4
   4864c:	1c000007 	ldb	r16,0(r3)
   48650:	003f7606 	br	4842c <__alt_data_end+0xfffd642c>
   48654:	1c000007 	ldb	r16,0(r3)
   48658:	18800044 	addi	r2,r3,1
   4865c:	8286e726 	beq	r16,r10,4a1fc <___svfprintf_internal_r+0x1f28>
   48660:	82fff404 	addi	r11,r16,-48
   48664:	1007883a 	mov	r3,r2
   48668:	0013883a 	mov	r9,zero
   4866c:	2aff7036 	bltu	r5,r11,48430 <__alt_data_end+0xfffd6430>
   48670:	1c000007 	ldb	r16,0(r3)
   48674:	4a4002a4 	muli	r9,r9,10
   48678:	18c00044 	addi	r3,r3,1
   4867c:	5a53883a 	add	r9,r11,r9
   48680:	82fff404 	addi	r11,r16,-48
   48684:	2afffa2e 	bgeu	r5,r11,48670 <__alt_data_end+0xfffd6670>
   48688:	483f690e 	bge	r9,zero,48430 <__alt_data_end+0xfffd6430>
   4868c:	027fffc4 	movi	r9,-1
   48690:	003f6706 	br	48430 <__alt_data_end+0xfffd6430>
   48694:	8c402014 	ori	r17,r17,128
   48698:	1805883a 	mov	r2,r3
   4869c:	1c000007 	ldb	r16,0(r3)
   486a0:	003f6206 	br	4842c <__alt_data_end+0xfffd642c>
   486a4:	8c400414 	ori	r17,r17,16
   486a8:	d8c02915 	stw	r3,164(sp)
   486ac:	d9802785 	stb	r6,158(sp)
   486b0:	8880080c 	andi	r2,r17,32
   486b4:	d8c02d17 	ldw	r3,180(sp)
   486b8:	10021526 	beq	r2,zero,48f10 <___svfprintf_internal_r+0xc3c>
   486bc:	db002d17 	ldw	r12,180(sp)
   486c0:	18800117 	ldw	r2,4(r3)
   486c4:	1cc00017 	ldw	r19,0(r3)
   486c8:	63000204 	addi	r12,r12,8
   486cc:	db002d15 	stw	r12,180(sp)
   486d0:	1039883a 	mov	fp,r2
   486d4:	10021916 	blt	r2,zero,48f3c <___svfprintf_internal_r+0xc68>
   486d8:	dd402783 	ldbu	r21,158(sp)
   486dc:	da403215 	stw	r9,200(sp)
   486e0:	00800044 	movi	r2,1
   486e4:	9f06b03a 	or	r3,r19,fp
   486e8:	48000216 	blt	r9,zero,486f4 <___svfprintf_internal_r+0x420>
   486ec:	013fdfc4 	movi	r4,-129
   486f0:	8922703a 	and	r17,r17,r4
   486f4:	1802461e 	bne	r3,zero,49010 <___svfprintf_internal_r+0xd3c>
   486f8:	48035426 	beq	r9,zero,4944c <___svfprintf_internal_r+0x1178>
   486fc:	10803fcc 	andi	r2,r2,255
   48700:	00c00044 	movi	r3,1
   48704:	10c26726 	beq	r2,r3,490a4 <___svfprintf_internal_r+0xdd0>
   48708:	00c00084 	movi	r3,2
   4870c:	10c2ea26 	beq	r2,r3,492b8 <___svfprintf_internal_r+0xfe4>
   48710:	b007883a 	mov	r3,r22
   48714:	9808d0fa 	srli	r4,r19,3
   48718:	e00a977a 	slli	r5,fp,29
   4871c:	e038d0fa 	srli	fp,fp,3
   48720:	9cc001cc 	andi	r19,r19,7
   48724:	98800c04 	addi	r2,r19,48
   48728:	18ffffc4 	addi	r3,r3,-1
   4872c:	2926b03a 	or	r19,r5,r4
   48730:	18800005 	stb	r2,0(r3)
   48734:	9f08b03a 	or	r4,r19,fp
   48738:	203ff61e 	bne	r4,zero,48714 <__alt_data_end+0xfffd6714>
   4873c:	8900004c 	andi	r4,r17,1
   48740:	d8c03115 	stw	r3,196(sp)
   48744:	2002ea26 	beq	r4,zero,492f0 <___svfprintf_internal_r+0x101c>
   48748:	10803fcc 	andi	r2,r2,255
   4874c:	1080201c 	xori	r2,r2,128
   48750:	10bfe004 	addi	r2,r2,-128
   48754:	01000c04 	movi	r4,48
   48758:	11057526 	beq	r2,r4,49d30 <___svfprintf_internal_r+0x1a5c>
   4875c:	dac03117 	ldw	r11,196(sp)
   48760:	193fffc5 	stb	r4,-1(r3)
   48764:	5affffc4 	addi	r11,r11,-1
   48768:	dac03115 	stw	r11,196(sp)
   4876c:	b2e5c83a 	sub	r18,r22,r11
   48770:	9005883a 	mov	r2,r18
   48774:	9240010e 	bge	r18,r9,4877c <___svfprintf_internal_r+0x4a8>
   48778:	4805883a 	mov	r2,r9
   4877c:	d8802a15 	stw	r2,168(sp)
   48780:	d8003415 	stw	zero,208(sp)
   48784:	a8803fcc 	andi	r2,r21,255
   48788:	1080201c 	xori	r2,r2,128
   4878c:	10bfe004 	addi	r2,r2,-128
   48790:	10000326 	beq	r2,zero,487a0 <___svfprintf_internal_r+0x4cc>
   48794:	d8c02a17 	ldw	r3,168(sp)
   48798:	18c00044 	addi	r3,r3,1
   4879c:	d8c02a15 	stw	r3,168(sp)
   487a0:	8ac0008c 	andi	r11,r17,2
   487a4:	dac02b15 	stw	r11,172(sp)
   487a8:	58000326 	beq	r11,zero,487b8 <___svfprintf_internal_r+0x4e4>
   487ac:	db002a17 	ldw	r12,168(sp)
   487b0:	63000084 	addi	r12,r12,2
   487b4:	db002a15 	stw	r12,168(sp)
   487b8:	88c0210c 	andi	r3,r17,132
   487bc:	d8c02c15 	stw	r3,176(sp)
   487c0:	1802111e 	bne	r3,zero,49008 <___svfprintf_internal_r+0xd34>
   487c4:	dac02e17 	ldw	r11,184(sp)
   487c8:	db002a17 	ldw	r12,168(sp)
   487cc:	5b39c83a 	sub	fp,r11,r12
   487d0:	07020d0e 	bge	zero,fp,49008 <___svfprintf_internal_r+0xd34>
   487d4:	02400404 	movi	r9,16
   487d8:	d8c02017 	ldw	r3,128(sp)
   487dc:	d8801f17 	ldw	r2,124(sp)
   487e0:	4f058c0e 	bge	r9,fp,49e14 <___svfprintf_internal_r+0x1b40>
   487e4:	01400174 	movhi	r5,5
   487e8:	e009883a 	mov	r4,fp
   487ec:	2952e584 	addi	r5,r5,19350
   487f0:	dc003c15 	stw	r16,240(sp)
   487f4:	9039883a 	mov	fp,r18
   487f8:	d9403615 	stw	r5,216(sp)
   487fc:	8825883a 	mov	r18,r17
   48800:	482b883a 	mov	r21,r9
   48804:	04c001c4 	movi	r19,7
   48808:	dc002f17 	ldw	r16,188(sp)
   4880c:	2023883a 	mov	r17,r4
   48810:	00000306 	br	48820 <___svfprintf_internal_r+0x54c>
   48814:	8c7ffc04 	addi	r17,r17,-16
   48818:	42000204 	addi	r8,r8,8
   4881c:	ac40130e 	bge	r21,r17,4886c <___svfprintf_internal_r+0x598>
   48820:	02c00174 	movhi	r11,5
   48824:	18c00404 	addi	r3,r3,16
   48828:	10800044 	addi	r2,r2,1
   4882c:	5ad2e584 	addi	r11,r11,19350
   48830:	42c00015 	stw	r11,0(r8)
   48834:	45400115 	stw	r21,4(r8)
   48838:	d8c02015 	stw	r3,128(sp)
   4883c:	d8801f15 	stw	r2,124(sp)
   48840:	98bff40e 	bge	r19,r2,48814 <__alt_data_end+0xfffd6814>
   48844:	8009883a 	mov	r4,r16
   48848:	b80b883a 	mov	r5,r23
   4884c:	b00d883a 	mov	r6,r22
   48850:	004e2c40 	call	4e2c4 <__ssprint_r>
   48854:	103f671e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   48858:	8c7ffc04 	addi	r17,r17,-16
   4885c:	d8c02017 	ldw	r3,128(sp)
   48860:	d8801f17 	ldw	r2,124(sp)
   48864:	da000404 	addi	r8,sp,16
   48868:	ac7fed16 	blt	r21,r17,48820 <__alt_data_end+0xfffd6820>
   4886c:	dc003c17 	ldw	r16,240(sp)
   48870:	8809883a 	mov	r4,r17
   48874:	9023883a 	mov	r17,r18
   48878:	e025883a 	mov	r18,fp
   4887c:	2039883a 	mov	fp,r4
   48880:	db003617 	ldw	r12,216(sp)
   48884:	e0c7883a 	add	r3,fp,r3
   48888:	10800044 	addi	r2,r2,1
   4888c:	43000015 	stw	r12,0(r8)
   48890:	47000115 	stw	fp,4(r8)
   48894:	d8c02015 	stw	r3,128(sp)
   48898:	d8801f15 	stw	r2,124(sp)
   4889c:	010001c4 	movi	r4,7
   488a0:	20834416 	blt	r4,r2,495b4 <___svfprintf_internal_r+0x12e0>
   488a4:	d8802787 	ldb	r2,158(sp)
   488a8:	42000204 	addi	r8,r8,8
   488ac:	10000c26 	beq	r2,zero,488e0 <___svfprintf_internal_r+0x60c>
   488b0:	d8801f17 	ldw	r2,124(sp)
   488b4:	d9002784 	addi	r4,sp,158
   488b8:	18c00044 	addi	r3,r3,1
   488bc:	10800044 	addi	r2,r2,1
   488c0:	41000015 	stw	r4,0(r8)
   488c4:	01000044 	movi	r4,1
   488c8:	41000115 	stw	r4,4(r8)
   488cc:	d8c02015 	stw	r3,128(sp)
   488d0:	d8801f15 	stw	r2,124(sp)
   488d4:	010001c4 	movi	r4,7
   488d8:	2082f616 	blt	r4,r2,494b4 <___svfprintf_internal_r+0x11e0>
   488dc:	42000204 	addi	r8,r8,8
   488e0:	dac02b17 	ldw	r11,172(sp)
   488e4:	58000c26 	beq	r11,zero,48918 <___svfprintf_internal_r+0x644>
   488e8:	d8801f17 	ldw	r2,124(sp)
   488ec:	d9002704 	addi	r4,sp,156
   488f0:	18c00084 	addi	r3,r3,2
   488f4:	10800044 	addi	r2,r2,1
   488f8:	41000015 	stw	r4,0(r8)
   488fc:	01000084 	movi	r4,2
   48900:	41000115 	stw	r4,4(r8)
   48904:	d8c02015 	stw	r3,128(sp)
   48908:	d8801f15 	stw	r2,124(sp)
   4890c:	010001c4 	movi	r4,7
   48910:	2082e016 	blt	r4,r2,49494 <___svfprintf_internal_r+0x11c0>
   48914:	42000204 	addi	r8,r8,8
   48918:	db002c17 	ldw	r12,176(sp)
   4891c:	00802004 	movi	r2,128
   48920:	60822f26 	beq	r12,r2,491e0 <___svfprintf_internal_r+0xf0c>
   48924:	db003217 	ldw	r12,200(sp)
   48928:	64abc83a 	sub	r21,r12,r18
   4892c:	0540310e 	bge	zero,r21,489f4 <___svfprintf_internal_r+0x720>
   48930:	07000404 	movi	fp,16
   48934:	d8801f17 	ldw	r2,124(sp)
   48938:	e544270e 	bge	fp,r21,499d8 <___svfprintf_internal_r+0x1704>
   4893c:	01400174 	movhi	r5,5
   48940:	a809883a 	mov	r4,r21
   48944:	2952e184 	addi	r5,r5,19334
   48948:	dc002c15 	stw	r16,176(sp)
   4894c:	902b883a 	mov	r21,r18
   48950:	d9402b15 	stw	r5,172(sp)
   48954:	8825883a 	mov	r18,r17
   48958:	04c001c4 	movi	r19,7
   4895c:	dc002f17 	ldw	r16,188(sp)
   48960:	2023883a 	mov	r17,r4
   48964:	00000306 	br	48974 <___svfprintf_internal_r+0x6a0>
   48968:	8c7ffc04 	addi	r17,r17,-16
   4896c:	42000204 	addi	r8,r8,8
   48970:	e440110e 	bge	fp,r17,489b8 <___svfprintf_internal_r+0x6e4>
   48974:	18c00404 	addi	r3,r3,16
   48978:	10800044 	addi	r2,r2,1
   4897c:	45000015 	stw	r20,0(r8)
   48980:	47000115 	stw	fp,4(r8)
   48984:	d8c02015 	stw	r3,128(sp)
   48988:	d8801f15 	stw	r2,124(sp)
   4898c:	98bff60e 	bge	r19,r2,48968 <__alt_data_end+0xfffd6968>
   48990:	8009883a 	mov	r4,r16
   48994:	b80b883a 	mov	r5,r23
   48998:	b00d883a 	mov	r6,r22
   4899c:	004e2c40 	call	4e2c4 <__ssprint_r>
   489a0:	103f141e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   489a4:	8c7ffc04 	addi	r17,r17,-16
   489a8:	d8c02017 	ldw	r3,128(sp)
   489ac:	d8801f17 	ldw	r2,124(sp)
   489b0:	da000404 	addi	r8,sp,16
   489b4:	e47fef16 	blt	fp,r17,48974 <__alt_data_end+0xfffd6974>
   489b8:	dc002c17 	ldw	r16,176(sp)
   489bc:	8809883a 	mov	r4,r17
   489c0:	9023883a 	mov	r17,r18
   489c4:	a825883a 	mov	r18,r21
   489c8:	202b883a 	mov	r21,r4
   489cc:	dac02b17 	ldw	r11,172(sp)
   489d0:	1d47883a 	add	r3,r3,r21
   489d4:	10800044 	addi	r2,r2,1
   489d8:	42c00015 	stw	r11,0(r8)
   489dc:	45400115 	stw	r21,4(r8)
   489e0:	d8c02015 	stw	r3,128(sp)
   489e4:	d8801f15 	stw	r2,124(sp)
   489e8:	010001c4 	movi	r4,7
   489ec:	2082a116 	blt	r4,r2,49474 <___svfprintf_internal_r+0x11a0>
   489f0:	42000204 	addi	r8,r8,8
   489f4:	8880400c 	andi	r2,r17,256
   489f8:	1001b01e 	bne	r2,zero,490bc <___svfprintf_internal_r+0xde8>
   489fc:	d8801f17 	ldw	r2,124(sp)
   48a00:	db003117 	ldw	r12,196(sp)
   48a04:	1c87883a 	add	r3,r3,r18
   48a08:	10800044 	addi	r2,r2,1
   48a0c:	43000015 	stw	r12,0(r8)
   48a10:	44800115 	stw	r18,4(r8)
   48a14:	d8c02015 	stw	r3,128(sp)
   48a18:	d8801f15 	stw	r2,124(sp)
   48a1c:	010001c4 	movi	r4,7
   48a20:	20828216 	blt	r4,r2,4942c <___svfprintf_internal_r+0x1158>
   48a24:	42000204 	addi	r8,r8,8
   48a28:	8c40010c 	andi	r17,r17,4
   48a2c:	88003226 	beq	r17,zero,48af8 <___svfprintf_internal_r+0x824>
   48a30:	db002e17 	ldw	r12,184(sp)
   48a34:	dac02a17 	ldw	r11,168(sp)
   48a38:	62e1c83a 	sub	r16,r12,r11
   48a3c:	04002e0e 	bge	zero,r16,48af8 <___svfprintf_internal_r+0x824>
   48a40:	04400404 	movi	r17,16
   48a44:	d8801f17 	ldw	r2,124(sp)
   48a48:	8c05330e 	bge	r17,r16,49f18 <___svfprintf_internal_r+0x1c44>
   48a4c:	01000174 	movhi	r4,5
   48a50:	2112e584 	addi	r4,r4,19350
   48a54:	d9003615 	stw	r4,216(sp)
   48a58:	048001c4 	movi	r18,7
   48a5c:	dcc02f17 	ldw	r19,188(sp)
   48a60:	00000306 	br	48a70 <___svfprintf_internal_r+0x79c>
   48a64:	843ffc04 	addi	r16,r16,-16
   48a68:	42000204 	addi	r8,r8,8
   48a6c:	8c00130e 	bge	r17,r16,48abc <___svfprintf_internal_r+0x7e8>
   48a70:	01400174 	movhi	r5,5
   48a74:	18c00404 	addi	r3,r3,16
   48a78:	10800044 	addi	r2,r2,1
   48a7c:	2952e584 	addi	r5,r5,19350
   48a80:	41400015 	stw	r5,0(r8)
   48a84:	44400115 	stw	r17,4(r8)
   48a88:	d8c02015 	stw	r3,128(sp)
   48a8c:	d8801f15 	stw	r2,124(sp)
   48a90:	90bff40e 	bge	r18,r2,48a64 <__alt_data_end+0xfffd6a64>
   48a94:	9809883a 	mov	r4,r19
   48a98:	b80b883a 	mov	r5,r23
   48a9c:	b00d883a 	mov	r6,r22
   48aa0:	004e2c40 	call	4e2c4 <__ssprint_r>
   48aa4:	103ed31e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   48aa8:	843ffc04 	addi	r16,r16,-16
   48aac:	d8c02017 	ldw	r3,128(sp)
   48ab0:	d8801f17 	ldw	r2,124(sp)
   48ab4:	da000404 	addi	r8,sp,16
   48ab8:	8c3fed16 	blt	r17,r16,48a70 <__alt_data_end+0xfffd6a70>
   48abc:	dac03617 	ldw	r11,216(sp)
   48ac0:	1c07883a 	add	r3,r3,r16
   48ac4:	10800044 	addi	r2,r2,1
   48ac8:	42c00015 	stw	r11,0(r8)
   48acc:	44000115 	stw	r16,4(r8)
   48ad0:	d8c02015 	stw	r3,128(sp)
   48ad4:	d8801f15 	stw	r2,124(sp)
   48ad8:	010001c4 	movi	r4,7
   48adc:	2080060e 	bge	r4,r2,48af8 <___svfprintf_internal_r+0x824>
   48ae0:	d9002f17 	ldw	r4,188(sp)
   48ae4:	b80b883a 	mov	r5,r23
   48ae8:	b00d883a 	mov	r6,r22
   48aec:	004e2c40 	call	4e2c4 <__ssprint_r>
   48af0:	103ec01e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   48af4:	d8c02017 	ldw	r3,128(sp)
   48af8:	d8802a17 	ldw	r2,168(sp)
   48afc:	db002e17 	ldw	r12,184(sp)
   48b00:	1300010e 	bge	r2,r12,48b08 <___svfprintf_internal_r+0x834>
   48b04:	6005883a 	mov	r2,r12
   48b08:	dac03017 	ldw	r11,192(sp)
   48b0c:	5897883a 	add	r11,r11,r2
   48b10:	dac03015 	stw	r11,192(sp)
   48b14:	1802331e 	bne	r3,zero,493e4 <___svfprintf_internal_r+0x1110>
   48b18:	d8001f15 	stw	zero,124(sp)
   48b1c:	da000404 	addi	r8,sp,16
   48b20:	003e1806 	br	48384 <__alt_data_end+0xfffd6384>
   48b24:	db002d17 	ldw	r12,180(sp)
   48b28:	dac02d17 	ldw	r11,180(sp)
   48b2c:	d8c02915 	stw	r3,164(sp)
   48b30:	63000017 	ldw	r12,0(r12)
   48b34:	5ac00117 	ldw	r11,4(r11)
   48b38:	d9802785 	stb	r6,158(sp)
   48b3c:	6009883a 	mov	r4,r12
   48b40:	580b883a 	mov	r5,r11
   48b44:	db003715 	stw	r12,220(sp)
   48b48:	da004015 	stw	r8,256(sp)
   48b4c:	da403f15 	stw	r9,252(sp)
   48b50:	dac03815 	stw	r11,224(sp)
   48b54:	004e1580 	call	4e158 <__fpclassifyd>
   48b58:	db002d17 	ldw	r12,180(sp)
   48b5c:	04800044 	movi	r18,1
   48b60:	da004017 	ldw	r8,256(sp)
   48b64:	64c00204 	addi	r19,r12,8
   48b68:	da403f17 	ldw	r9,252(sp)
   48b6c:	d9003717 	ldw	r4,220(sp)
   48b70:	d9403817 	ldw	r5,224(sp)
   48b74:	1483561e 	bne	r2,r18,498d0 <___svfprintf_internal_r+0x15fc>
   48b78:	000d883a 	mov	r6,zero
   48b7c:	000f883a 	mov	r7,zero
   48b80:	00515300 	call	51530 <__ledf2>
   48b84:	da004017 	ldw	r8,256(sp)
   48b88:	1004ee16 	blt	r2,zero,49f44 <___svfprintf_internal_r+0x1c70>
   48b8c:	dd402783 	ldbu	r21,158(sp)
   48b90:	008011c4 	movi	r2,71
   48b94:	1404440e 	bge	r2,r16,49ca8 <___svfprintf_internal_r+0x19d4>
   48b98:	00c00174 	movhi	r3,5
   48b9c:	18d2d204 	addi	r3,r3,19272
   48ba0:	d8c03115 	stw	r3,196(sp)
   48ba4:	02c000c4 	movi	r11,3
   48ba8:	00bfdfc4 	movi	r2,-129
   48bac:	dac02a15 	stw	r11,168(sp)
   48bb0:	88a2703a 	and	r17,r17,r2
   48bb4:	dcc02d15 	stw	r19,180(sp)
   48bb8:	5825883a 	mov	r18,r11
   48bbc:	d8003215 	stw	zero,200(sp)
   48bc0:	d8003415 	stw	zero,208(sp)
   48bc4:	003eef06 	br	48784 <__alt_data_end+0xfffd6784>
   48bc8:	8c400214 	ori	r17,r17,8
   48bcc:	1805883a 	mov	r2,r3
   48bd0:	1c000007 	ldb	r16,0(r3)
   48bd4:	003e1506 	br	4842c <__alt_data_end+0xfffd642c>
   48bd8:	8c400414 	ori	r17,r17,16
   48bdc:	d8c02915 	stw	r3,164(sp)
   48be0:	88c0080c 	andi	r3,r17,32
   48be4:	d8802d17 	ldw	r2,180(sp)
   48be8:	18005526 	beq	r3,zero,48d40 <___svfprintf_internal_r+0xa6c>
   48bec:	dac02d17 	ldw	r11,180(sp)
   48bf0:	14c00017 	ldw	r19,0(r2)
   48bf4:	17000117 	ldw	fp,4(r2)
   48bf8:	5ac00204 	addi	r11,r11,8
   48bfc:	dac02d15 	stw	r11,180(sp)
   48c00:	00800044 	movi	r2,1
   48c04:	9f06b03a 	or	r3,r19,fp
   48c08:	d8002785 	stb	zero,158(sp)
   48c0c:	da403215 	stw	r9,200(sp)
   48c10:	002b883a 	mov	r21,zero
   48c14:	003eb406 	br	486e8 <__alt_data_end+0xfffd66e8>
   48c18:	03000174 	movhi	r12,5
   48c1c:	6312d504 	addi	r12,r12,19284
   48c20:	d8c02915 	stw	r3,164(sp)
   48c24:	d9802785 	stb	r6,158(sp)
   48c28:	db003b15 	stw	r12,236(sp)
   48c2c:	88c0080c 	andi	r3,r17,32
   48c30:	d8802d17 	ldw	r2,180(sp)
   48c34:	18005626 	beq	r3,zero,48d90 <___svfprintf_internal_r+0xabc>
   48c38:	dac02d17 	ldw	r11,180(sp)
   48c3c:	14c00017 	ldw	r19,0(r2)
   48c40:	17000117 	ldw	fp,4(r2)
   48c44:	5ac00204 	addi	r11,r11,8
   48c48:	dac02d15 	stw	r11,180(sp)
   48c4c:	8880004c 	andi	r2,r17,1
   48c50:	10029326 	beq	r2,zero,496a0 <___svfprintf_internal_r+0x13cc>
   48c54:	9f06b03a 	or	r3,r19,fp
   48c58:	18033526 	beq	r3,zero,49930 <___svfprintf_internal_r+0x165c>
   48c5c:	00800c04 	movi	r2,48
   48c60:	d8802705 	stb	r2,156(sp)
   48c64:	dc002745 	stb	r16,157(sp)
   48c68:	8c400094 	ori	r17,r17,2
   48c6c:	00800084 	movi	r2,2
   48c70:	003fe506 	br	48c08 <__alt_data_end+0xfffd6c08>
   48c74:	1805883a 	mov	r2,r3
   48c78:	d8002e15 	stw	zero,184(sp)
   48c7c:	82fff404 	addi	r11,r16,-48
   48c80:	0019883a 	mov	r12,zero
   48c84:	14000007 	ldb	r16,0(r2)
   48c88:	630002a4 	muli	r12,r12,10
   48c8c:	18c00044 	addi	r3,r3,1
   48c90:	1805883a 	mov	r2,r3
   48c94:	62d9883a 	add	r12,r12,r11
   48c98:	82fff404 	addi	r11,r16,-48
   48c9c:	2afff92e 	bgeu	r5,r11,48c84 <__alt_data_end+0xfffd6c84>
   48ca0:	db002e15 	stw	r12,184(sp)
   48ca4:	003de206 	br	48430 <__alt_data_end+0xfffd6430>
   48ca8:	8c400814 	ori	r17,r17,32
   48cac:	1805883a 	mov	r2,r3
   48cb0:	1c000007 	ldb	r16,0(r3)
   48cb4:	003ddd06 	br	4842c <__alt_data_end+0xfffd642c>
   48cb8:	dac02d17 	ldw	r11,180(sp)
   48cbc:	db002d17 	ldw	r12,180(sp)
   48cc0:	d8c02915 	stw	r3,164(sp)
   48cc4:	5ac00017 	ldw	r11,0(r11)
   48cc8:	d8002785 	stb	zero,158(sp)
   48ccc:	64c00104 	addi	r19,r12,4
   48cd0:	dac03115 	stw	r11,196(sp)
   48cd4:	58048126 	beq	r11,zero,49edc <___svfprintf_internal_r+0x1c08>
   48cd8:	d9003117 	ldw	r4,196(sp)
   48cdc:	48041716 	blt	r9,zero,49d3c <___svfprintf_internal_r+0x1a68>
   48ce0:	480d883a 	mov	r6,r9
   48ce4:	000b883a 	mov	r5,zero
   48ce8:	da004015 	stw	r8,256(sp)
   48cec:	da403f15 	stw	r9,252(sp)
   48cf0:	004c8d40 	call	4c8d4 <memchr>
   48cf4:	da004017 	ldw	r8,256(sp)
   48cf8:	da403f17 	ldw	r9,252(sp)
   48cfc:	1004db26 	beq	r2,zero,4a06c <___svfprintf_internal_r+0x1d98>
   48d00:	d8c03117 	ldw	r3,196(sp)
   48d04:	10e5c83a 	sub	r18,r2,r3
   48d08:	4c80010e 	bge	r9,r18,48d10 <___svfprintf_internal_r+0xa3c>
   48d0c:	4825883a 	mov	r18,r9
   48d10:	9005883a 	mov	r2,r18
   48d14:	90040e16 	blt	r18,zero,49d50 <___svfprintf_internal_r+0x1a7c>
   48d18:	dd402783 	ldbu	r21,158(sp)
   48d1c:	d8802a15 	stw	r2,168(sp)
   48d20:	dcc02d15 	stw	r19,180(sp)
   48d24:	d8003215 	stw	zero,200(sp)
   48d28:	d8003415 	stw	zero,208(sp)
   48d2c:	003e9506 	br	48784 <__alt_data_end+0xfffd6784>
   48d30:	d8c02915 	stw	r3,164(sp)
   48d34:	88c0080c 	andi	r3,r17,32
   48d38:	d8802d17 	ldw	r2,180(sp)
   48d3c:	183fab1e 	bne	r3,zero,48bec <__alt_data_end+0xfffd6bec>
   48d40:	88c0040c 	andi	r3,r17,16
   48d44:	1802681e 	bne	r3,zero,496e8 <___svfprintf_internal_r+0x1414>
   48d48:	88c0100c 	andi	r3,r17,64
   48d4c:	18026626 	beq	r3,zero,496e8 <___svfprintf_internal_r+0x1414>
   48d50:	dac02d17 	ldw	r11,180(sp)
   48d54:	14c0000b 	ldhu	r19,0(r2)
   48d58:	0039883a 	mov	fp,zero
   48d5c:	5ac00104 	addi	r11,r11,4
   48d60:	dac02d15 	stw	r11,180(sp)
   48d64:	00800044 	movi	r2,1
   48d68:	9807883a 	mov	r3,r19
   48d6c:	003fa606 	br	48c08 <__alt_data_end+0xfffd6c08>
   48d70:	00800174 	movhi	r2,5
   48d74:	1092da04 	addi	r2,r2,19304
   48d78:	d8c02915 	stw	r3,164(sp)
   48d7c:	d8803b15 	stw	r2,236(sp)
   48d80:	d9802785 	stb	r6,158(sp)
   48d84:	88c0080c 	andi	r3,r17,32
   48d88:	d8802d17 	ldw	r2,180(sp)
   48d8c:	183faa1e 	bne	r3,zero,48c38 <__alt_data_end+0xfffd6c38>
   48d90:	88c0040c 	andi	r3,r17,16
   48d94:	1802e826 	beq	r3,zero,49938 <___svfprintf_internal_r+0x1664>
   48d98:	db002d17 	ldw	r12,180(sp)
   48d9c:	14c00017 	ldw	r19,0(r2)
   48da0:	0039883a 	mov	fp,zero
   48da4:	63000104 	addi	r12,r12,4
   48da8:	db002d15 	stw	r12,180(sp)
   48dac:	003fa706 	br	48c4c <__alt_data_end+0xfffd6c4c>
   48db0:	30803fcc 	andi	r2,r6,255
   48db4:	1080201c 	xori	r2,r2,128
   48db8:	10bfe004 	addi	r2,r2,-128
   48dbc:	1002d91e 	bne	r2,zero,49924 <___svfprintf_internal_r+0x1650>
   48dc0:	1805883a 	mov	r2,r3
   48dc4:	01800804 	movi	r6,32
   48dc8:	1c000007 	ldb	r16,0(r3)
   48dcc:	003d9706 	br	4842c <__alt_data_end+0xfffd642c>
   48dd0:	8c400054 	ori	r17,r17,1
   48dd4:	1805883a 	mov	r2,r3
   48dd8:	1c000007 	ldb	r16,0(r3)
   48ddc:	003d9306 	br	4842c <__alt_data_end+0xfffd642c>
   48de0:	dac02d17 	ldw	r11,180(sp)
   48de4:	db002d17 	ldw	r12,180(sp)
   48de8:	5ac00017 	ldw	r11,0(r11)
   48dec:	dac02e15 	stw	r11,184(sp)
   48df0:	62c00104 	addi	r11,r12,4
   48df4:	db002e17 	ldw	r12,184(sp)
   48df8:	60033e16 	blt	r12,zero,49af4 <___svfprintf_internal_r+0x1820>
   48dfc:	dac02d15 	stw	r11,180(sp)
   48e00:	1805883a 	mov	r2,r3
   48e04:	1c000007 	ldb	r16,0(r3)
   48e08:	003d8806 	br	4842c <__alt_data_end+0xfffd642c>
   48e0c:	1805883a 	mov	r2,r3
   48e10:	01800ac4 	movi	r6,43
   48e14:	1c000007 	ldb	r16,0(r3)
   48e18:	003d8406 	br	4842c <__alt_data_end+0xfffd642c>
   48e1c:	8c401014 	ori	r17,r17,64
   48e20:	1805883a 	mov	r2,r3
   48e24:	1c000007 	ldb	r16,0(r3)
   48e28:	003d8006 	br	4842c <__alt_data_end+0xfffd642c>
   48e2c:	1c000007 	ldb	r16,0(r3)
   48e30:	81c33626 	beq	r16,r7,49b0c <___svfprintf_internal_r+0x1838>
   48e34:	8c400414 	ori	r17,r17,16
   48e38:	1805883a 	mov	r2,r3
   48e3c:	003d7b06 	br	4842c <__alt_data_end+0xfffd642c>
   48e40:	d8c02915 	stw	r3,164(sp)
   48e44:	d9802785 	stb	r6,158(sp)
   48e48:	8880080c 	andi	r2,r17,32
   48e4c:	1002c226 	beq	r2,zero,49958 <___svfprintf_internal_r+0x1684>
   48e50:	db002d17 	ldw	r12,180(sp)
   48e54:	dac03017 	ldw	r11,192(sp)
   48e58:	60800017 	ldw	r2,0(r12)
   48e5c:	5807d7fa 	srai	r3,r11,31
   48e60:	63000104 	addi	r12,r12,4
   48e64:	db002d15 	stw	r12,180(sp)
   48e68:	12c00015 	stw	r11,0(r2)
   48e6c:	10c00115 	stw	r3,4(r2)
   48e70:	003d4406 	br	48384 <__alt_data_end+0xfffd6384>
   48e74:	db002d17 	ldw	r12,180(sp)
   48e78:	00800c04 	movi	r2,48
   48e7c:	d8802705 	stb	r2,156(sp)
   48e80:	64c00017 	ldw	r19,0(r12)
   48e84:	00801e04 	movi	r2,120
   48e88:	d8802745 	stb	r2,157(sp)
   48e8c:	00800174 	movhi	r2,5
   48e90:	1092da04 	addi	r2,r2,19304
   48e94:	63000104 	addi	r12,r12,4
   48e98:	d8c02915 	stw	r3,164(sp)
   48e9c:	d8803b15 	stw	r2,236(sp)
   48ea0:	0039883a 	mov	fp,zero
   48ea4:	8c400094 	ori	r17,r17,2
   48ea8:	db002d15 	stw	r12,180(sp)
   48eac:	00800084 	movi	r2,2
   48eb0:	04001e04 	movi	r16,120
   48eb4:	9807883a 	mov	r3,r19
   48eb8:	003f5306 	br	48c08 <__alt_data_end+0xfffd6c08>
   48ebc:	db002d17 	ldw	r12,180(sp)
   48ec0:	d8c02915 	stw	r3,164(sp)
   48ec4:	dac01404 	addi	r11,sp,80
   48ec8:	60800017 	ldw	r2,0(r12)
   48ecc:	00c00044 	movi	r3,1
   48ed0:	63000104 	addi	r12,r12,4
   48ed4:	d8801405 	stb	r2,80(sp)
   48ed8:	d8c02a15 	stw	r3,168(sp)
   48edc:	d8002785 	stb	zero,158(sp)
   48ee0:	db002d15 	stw	r12,180(sp)
   48ee4:	1825883a 	mov	r18,r3
   48ee8:	d8003215 	stw	zero,200(sp)
   48eec:	d8003415 	stw	zero,208(sp)
   48ef0:	dac03115 	stw	r11,196(sp)
   48ef4:	0005883a 	mov	r2,zero
   48ef8:	003e2906 	br	487a0 <__alt_data_end+0xfffd67a0>
   48efc:	d8c02915 	stw	r3,164(sp)
   48f00:	d9802785 	stb	r6,158(sp)
   48f04:	8880080c 	andi	r2,r17,32
   48f08:	d8c02d17 	ldw	r3,180(sp)
   48f0c:	103deb1e 	bne	r2,zero,486bc <__alt_data_end+0xfffd66bc>
   48f10:	8880040c 	andi	r2,r17,16
   48f14:	1001e51e 	bne	r2,zero,496ac <___svfprintf_internal_r+0x13d8>
   48f18:	8880100c 	andi	r2,r17,64
   48f1c:	1001e326 	beq	r2,zero,496ac <___svfprintf_internal_r+0x13d8>
   48f20:	1cc0000f 	ldh	r19,0(r3)
   48f24:	db002d17 	ldw	r12,180(sp)
   48f28:	9839d7fa 	srai	fp,r19,31
   48f2c:	63000104 	addi	r12,r12,4
   48f30:	db002d15 	stw	r12,180(sp)
   48f34:	e005883a 	mov	r2,fp
   48f38:	103de70e 	bge	r2,zero,486d8 <__alt_data_end+0xfffd66d8>
   48f3c:	04e7c83a 	sub	r19,zero,r19
   48f40:	9804c03a 	cmpne	r2,r19,zero
   48f44:	0739c83a 	sub	fp,zero,fp
   48f48:	e0b9c83a 	sub	fp,fp,r2
   48f4c:	05400b44 	movi	r21,45
   48f50:	dd402785 	stb	r21,158(sp)
   48f54:	da403215 	stw	r9,200(sp)
   48f58:	00800044 	movi	r2,1
   48f5c:	9f06b03a 	or	r3,r19,fp
   48f60:	003de106 	br	486e8 <__alt_data_end+0xfffd66e8>
   48f64:	8c400414 	ori	r17,r17,16
   48f68:	d8c02915 	stw	r3,164(sp)
   48f6c:	8880080c 	andi	r2,r17,32
   48f70:	10000b26 	beq	r2,zero,48fa0 <___svfprintf_internal_r+0xccc>
   48f74:	db002d17 	ldw	r12,180(sp)
   48f78:	0005883a 	mov	r2,zero
   48f7c:	64c00017 	ldw	r19,0(r12)
   48f80:	67000117 	ldw	fp,4(r12)
   48f84:	63000204 	addi	r12,r12,8
   48f88:	db002d15 	stw	r12,180(sp)
   48f8c:	9f06b03a 	or	r3,r19,fp
   48f90:	003f1d06 	br	48c08 <__alt_data_end+0xfffd6c08>
   48f94:	d8c02915 	stw	r3,164(sp)
   48f98:	8880080c 	andi	r2,r17,32
   48f9c:	103ff51e 	bne	r2,zero,48f74 <__alt_data_end+0xfffd6f74>
   48fa0:	8880040c 	andi	r2,r17,16
   48fa4:	1001c81e 	bne	r2,zero,496c8 <___svfprintf_internal_r+0x13f4>
   48fa8:	8880100c 	andi	r2,r17,64
   48fac:	1001c626 	beq	r2,zero,496c8 <___svfprintf_internal_r+0x13f4>
   48fb0:	db002d17 	ldw	r12,180(sp)
   48fb4:	0039883a 	mov	fp,zero
   48fb8:	0005883a 	mov	r2,zero
   48fbc:	64c0000b 	ldhu	r19,0(r12)
   48fc0:	63000104 	addi	r12,r12,4
   48fc4:	db002d15 	stw	r12,180(sp)
   48fc8:	9807883a 	mov	r3,r19
   48fcc:	003f0e06 	br	48c08 <__alt_data_end+0xfffd6c08>
   48fd0:	d8c02915 	stw	r3,164(sp)
   48fd4:	d9802785 	stb	r6,158(sp)
   48fd8:	803d8026 	beq	r16,zero,485dc <__alt_data_end+0xfffd65dc>
   48fdc:	02c00044 	movi	r11,1
   48fe0:	db001404 	addi	r12,sp,80
   48fe4:	dac02a15 	stw	r11,168(sp)
   48fe8:	dc001405 	stb	r16,80(sp)
   48fec:	d8002785 	stb	zero,158(sp)
   48ff0:	5825883a 	mov	r18,r11
   48ff4:	d8003215 	stw	zero,200(sp)
   48ff8:	d8003415 	stw	zero,208(sp)
   48ffc:	db003115 	stw	r12,196(sp)
   49000:	0005883a 	mov	r2,zero
   49004:	003de606 	br	487a0 <__alt_data_end+0xfffd67a0>
   49008:	d8c02017 	ldw	r3,128(sp)
   4900c:	003e2706 	br	488ac <__alt_data_end+0xfffd68ac>
   49010:	10803fcc 	andi	r2,r2,255
   49014:	00c00044 	movi	r3,1
   49018:	10fdbb1e 	bne	r2,r3,48708 <__alt_data_end+0xfffd6708>
   4901c:	e000021e 	bne	fp,zero,49028 <___svfprintf_internal_r+0xd54>
   49020:	00800244 	movi	r2,9
   49024:	14c01f2e 	bgeu	r2,r19,490a4 <___svfprintf_internal_r+0xdd0>
   49028:	dc002a15 	stw	r16,168(sp)
   4902c:	dc402b15 	stw	r17,172(sp)
   49030:	9821883a 	mov	r16,r19
   49034:	e023883a 	mov	r17,fp
   49038:	b025883a 	mov	r18,r22
   4903c:	4827883a 	mov	r19,r9
   49040:	4039883a 	mov	fp,r8
   49044:	8009883a 	mov	r4,r16
   49048:	880b883a 	mov	r5,r17
   4904c:	01800284 	movi	r6,10
   49050:	000f883a 	mov	r7,zero
   49054:	0050fa00 	call	50fa0 <__umoddi3>
   49058:	10800c04 	addi	r2,r2,48
   4905c:	94bfffc4 	addi	r18,r18,-1
   49060:	8009883a 	mov	r4,r16
   49064:	880b883a 	mov	r5,r17
   49068:	01800284 	movi	r6,10
   4906c:	000f883a 	mov	r7,zero
   49070:	90800005 	stb	r2,0(r18)
   49074:	00509e00 	call	509e0 <__udivdi3>
   49078:	1021883a 	mov	r16,r2
   4907c:	10c4b03a 	or	r2,r2,r3
   49080:	1823883a 	mov	r17,r3
   49084:	103fef1e 	bne	r2,zero,49044 <__alt_data_end+0xfffd7044>
   49088:	dc803115 	stw	r18,196(sp)
   4908c:	dc002a17 	ldw	r16,168(sp)
   49090:	dc402b17 	ldw	r17,172(sp)
   49094:	9813883a 	mov	r9,r19
   49098:	e011883a 	mov	r8,fp
   4909c:	b4a5c83a 	sub	r18,r22,r18
   490a0:	003db306 	br	48770 <__alt_data_end+0xfffd6770>
   490a4:	9cc00c04 	addi	r19,r19,48
   490a8:	db001dc4 	addi	r12,sp,119
   490ac:	dcc01dc5 	stb	r19,119(sp)
   490b0:	dc803d17 	ldw	r18,244(sp)
   490b4:	db003115 	stw	r12,196(sp)
   490b8:	003dad06 	br	48770 <__alt_data_end+0xfffd6770>
   490bc:	00801944 	movi	r2,101
   490c0:	14008d0e 	bge	r2,r16,492f8 <___svfprintf_internal_r+0x1024>
   490c4:	d9003717 	ldw	r4,220(sp)
   490c8:	d9403817 	ldw	r5,224(sp)
   490cc:	000d883a 	mov	r6,zero
   490d0:	000f883a 	mov	r7,zero
   490d4:	d8c03e15 	stw	r3,248(sp)
   490d8:	da004015 	stw	r8,256(sp)
   490dc:	0046ba00 	call	46ba0 <__eqdf2>
   490e0:	d8c03e17 	ldw	r3,248(sp)
   490e4:	da004017 	ldw	r8,256(sp)
   490e8:	1000fd1e 	bne	r2,zero,494e0 <___svfprintf_internal_r+0x120c>
   490ec:	d8801f17 	ldw	r2,124(sp)
   490f0:	01000174 	movhi	r4,5
   490f4:	2112e104 	addi	r4,r4,19332
   490f8:	18c00044 	addi	r3,r3,1
   490fc:	10800044 	addi	r2,r2,1
   49100:	41000015 	stw	r4,0(r8)
   49104:	01000044 	movi	r4,1
   49108:	41000115 	stw	r4,4(r8)
   4910c:	d8c02015 	stw	r3,128(sp)
   49110:	d8801f15 	stw	r2,124(sp)
   49114:	010001c4 	movi	r4,7
   49118:	20823316 	blt	r4,r2,499e8 <___svfprintf_internal_r+0x1714>
   4911c:	42000204 	addi	r8,r8,8
   49120:	d8802617 	ldw	r2,152(sp)
   49124:	dac03317 	ldw	r11,204(sp)
   49128:	12c00216 	blt	r2,r11,49134 <___svfprintf_internal_r+0xe60>
   4912c:	8880004c 	andi	r2,r17,1
   49130:	103e3d26 	beq	r2,zero,48a28 <__alt_data_end+0xfffd6a28>
   49134:	db003917 	ldw	r12,228(sp)
   49138:	d8801f17 	ldw	r2,124(sp)
   4913c:	dac03517 	ldw	r11,212(sp)
   49140:	1b07883a 	add	r3,r3,r12
   49144:	10800044 	addi	r2,r2,1
   49148:	42c00015 	stw	r11,0(r8)
   4914c:	43000115 	stw	r12,4(r8)
   49150:	d8c02015 	stw	r3,128(sp)
   49154:	d8801f15 	stw	r2,124(sp)
   49158:	010001c4 	movi	r4,7
   4915c:	20826f16 	blt	r4,r2,49b1c <___svfprintf_internal_r+0x1848>
   49160:	42000204 	addi	r8,r8,8
   49164:	db003317 	ldw	r12,204(sp)
   49168:	643fffc4 	addi	r16,r12,-1
   4916c:	043e2e0e 	bge	zero,r16,48a28 <__alt_data_end+0xfffd6a28>
   49170:	04800404 	movi	r18,16
   49174:	d8801f17 	ldw	r2,124(sp)
   49178:	9400a00e 	bge	r18,r16,493fc <___svfprintf_internal_r+0x1128>
   4917c:	01400174 	movhi	r5,5
   49180:	2952e184 	addi	r5,r5,19334
   49184:	d9402b15 	stw	r5,172(sp)
   49188:	054001c4 	movi	r21,7
   4918c:	dcc02f17 	ldw	r19,188(sp)
   49190:	00000306 	br	491a0 <___svfprintf_internal_r+0xecc>
   49194:	42000204 	addi	r8,r8,8
   49198:	843ffc04 	addi	r16,r16,-16
   4919c:	94009a0e 	bge	r18,r16,49408 <___svfprintf_internal_r+0x1134>
   491a0:	18c00404 	addi	r3,r3,16
   491a4:	10800044 	addi	r2,r2,1
   491a8:	45000015 	stw	r20,0(r8)
   491ac:	44800115 	stw	r18,4(r8)
   491b0:	d8c02015 	stw	r3,128(sp)
   491b4:	d8801f15 	stw	r2,124(sp)
   491b8:	a8bff60e 	bge	r21,r2,49194 <__alt_data_end+0xfffd7194>
   491bc:	9809883a 	mov	r4,r19
   491c0:	b80b883a 	mov	r5,r23
   491c4:	b00d883a 	mov	r6,r22
   491c8:	004e2c40 	call	4e2c4 <__ssprint_r>
   491cc:	103d091e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   491d0:	d8c02017 	ldw	r3,128(sp)
   491d4:	d8801f17 	ldw	r2,124(sp)
   491d8:	da000404 	addi	r8,sp,16
   491dc:	003fee06 	br	49198 <__alt_data_end+0xfffd7198>
   491e0:	dac02e17 	ldw	r11,184(sp)
   491e4:	db002a17 	ldw	r12,168(sp)
   491e8:	5b2bc83a 	sub	r21,r11,r12
   491ec:	057dcd0e 	bge	zero,r21,48924 <__alt_data_end+0xfffd6924>
   491f0:	07000404 	movi	fp,16
   491f4:	d8801f17 	ldw	r2,124(sp)
   491f8:	e5435d0e 	bge	fp,r21,49f70 <___svfprintf_internal_r+0x1c9c>
   491fc:	01400174 	movhi	r5,5
   49200:	a809883a 	mov	r4,r21
   49204:	2952e184 	addi	r5,r5,19334
   49208:	dc002c15 	stw	r16,176(sp)
   4920c:	902b883a 	mov	r21,r18
   49210:	d9402b15 	stw	r5,172(sp)
   49214:	8825883a 	mov	r18,r17
   49218:	04c001c4 	movi	r19,7
   4921c:	dc002f17 	ldw	r16,188(sp)
   49220:	2023883a 	mov	r17,r4
   49224:	00000306 	br	49234 <___svfprintf_internal_r+0xf60>
   49228:	8c7ffc04 	addi	r17,r17,-16
   4922c:	42000204 	addi	r8,r8,8
   49230:	e440110e 	bge	fp,r17,49278 <___svfprintf_internal_r+0xfa4>
   49234:	18c00404 	addi	r3,r3,16
   49238:	10800044 	addi	r2,r2,1
   4923c:	45000015 	stw	r20,0(r8)
   49240:	47000115 	stw	fp,4(r8)
   49244:	d8c02015 	stw	r3,128(sp)
   49248:	d8801f15 	stw	r2,124(sp)
   4924c:	98bff60e 	bge	r19,r2,49228 <__alt_data_end+0xfffd7228>
   49250:	8009883a 	mov	r4,r16
   49254:	b80b883a 	mov	r5,r23
   49258:	b00d883a 	mov	r6,r22
   4925c:	004e2c40 	call	4e2c4 <__ssprint_r>
   49260:	103ce41e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49264:	8c7ffc04 	addi	r17,r17,-16
   49268:	d8c02017 	ldw	r3,128(sp)
   4926c:	d8801f17 	ldw	r2,124(sp)
   49270:	da000404 	addi	r8,sp,16
   49274:	e47fef16 	blt	fp,r17,49234 <__alt_data_end+0xfffd7234>
   49278:	dc002c17 	ldw	r16,176(sp)
   4927c:	8809883a 	mov	r4,r17
   49280:	9023883a 	mov	r17,r18
   49284:	a825883a 	mov	r18,r21
   49288:	202b883a 	mov	r21,r4
   4928c:	dac02b17 	ldw	r11,172(sp)
   49290:	1d47883a 	add	r3,r3,r21
   49294:	10800044 	addi	r2,r2,1
   49298:	42c00015 	stw	r11,0(r8)
   4929c:	45400115 	stw	r21,4(r8)
   492a0:	d8c02015 	stw	r3,128(sp)
   492a4:	d8801f15 	stw	r2,124(sp)
   492a8:	010001c4 	movi	r4,7
   492ac:	20818016 	blt	r4,r2,498b0 <___svfprintf_internal_r+0x15dc>
   492b0:	42000204 	addi	r8,r8,8
   492b4:	003d9b06 	br	48924 <__alt_data_end+0xfffd6924>
   492b8:	d9403b17 	ldw	r5,236(sp)
   492bc:	b007883a 	mov	r3,r22
   492c0:	988003cc 	andi	r2,r19,15
   492c4:	e008973a 	slli	r4,fp,28
   492c8:	2885883a 	add	r2,r5,r2
   492cc:	9826d13a 	srli	r19,r19,4
   492d0:	10800003 	ldbu	r2,0(r2)
   492d4:	e038d13a 	srli	fp,fp,4
   492d8:	18ffffc4 	addi	r3,r3,-1
   492dc:	24e6b03a 	or	r19,r4,r19
   492e0:	18800005 	stb	r2,0(r3)
   492e4:	9f04b03a 	or	r2,r19,fp
   492e8:	103ff51e 	bne	r2,zero,492c0 <__alt_data_end+0xfffd72c0>
   492ec:	d8c03115 	stw	r3,196(sp)
   492f0:	b0e5c83a 	sub	r18,r22,r3
   492f4:	003d1e06 	br	48770 <__alt_data_end+0xfffd6770>
   492f8:	db003317 	ldw	r12,204(sp)
   492fc:	00800044 	movi	r2,1
   49300:	18c00044 	addi	r3,r3,1
   49304:	13014b0e 	bge	r2,r12,49834 <___svfprintf_internal_r+0x1560>
   49308:	dc001f17 	ldw	r16,124(sp)
   4930c:	dac03117 	ldw	r11,196(sp)
   49310:	00800044 	movi	r2,1
   49314:	84000044 	addi	r16,r16,1
   49318:	40800115 	stw	r2,4(r8)
   4931c:	42c00015 	stw	r11,0(r8)
   49320:	d8c02015 	stw	r3,128(sp)
   49324:	dc001f15 	stw	r16,124(sp)
   49328:	008001c4 	movi	r2,7
   4932c:	14014e16 	blt	r2,r16,49868 <___svfprintf_internal_r+0x1594>
   49330:	42000204 	addi	r8,r8,8
   49334:	db003917 	ldw	r12,228(sp)
   49338:	dac03517 	ldw	r11,212(sp)
   4933c:	84000044 	addi	r16,r16,1
   49340:	1b07883a 	add	r3,r3,r12
   49344:	42c00015 	stw	r11,0(r8)
   49348:	43000115 	stw	r12,4(r8)
   4934c:	d8c02015 	stw	r3,128(sp)
   49350:	dc001f15 	stw	r16,124(sp)
   49354:	008001c4 	movi	r2,7
   49358:	14014c16 	blt	r2,r16,4988c <___svfprintf_internal_r+0x15b8>
   4935c:	44800204 	addi	r18,r8,8
   49360:	d9003717 	ldw	r4,220(sp)
   49364:	d9403817 	ldw	r5,224(sp)
   49368:	000d883a 	mov	r6,zero
   4936c:	000f883a 	mov	r7,zero
   49370:	d8c03e15 	stw	r3,248(sp)
   49374:	0046ba00 	call	46ba0 <__eqdf2>
   49378:	d8c03e17 	ldw	r3,248(sp)
   4937c:	db003317 	ldw	r12,204(sp)
   49380:	10009526 	beq	r2,zero,495d8 <___svfprintf_internal_r+0x1304>
   49384:	dac03117 	ldw	r11,196(sp)
   49388:	60bfffc4 	addi	r2,r12,-1
   4938c:	1887883a 	add	r3,r3,r2
   49390:	59000044 	addi	r4,r11,1
   49394:	84000044 	addi	r16,r16,1
   49398:	90800115 	stw	r2,4(r18)
   4939c:	91000015 	stw	r4,0(r18)
   493a0:	d8c02015 	stw	r3,128(sp)
   493a4:	dc001f15 	stw	r16,124(sp)
   493a8:	008001c4 	movi	r2,7
   493ac:	1400b316 	blt	r2,r16,4967c <___svfprintf_internal_r+0x13a8>
   493b0:	94800204 	addi	r18,r18,8
   493b4:	dac03a17 	ldw	r11,232(sp)
   493b8:	dd4022c4 	addi	r21,sp,139
   493bc:	84000044 	addi	r16,r16,1
   493c0:	1ac7883a 	add	r3,r3,r11
   493c4:	95400015 	stw	r21,0(r18)
   493c8:	92c00115 	stw	r11,4(r18)
   493cc:	d8c02015 	stw	r3,128(sp)
   493d0:	dc001f15 	stw	r16,124(sp)
   493d4:	008001c4 	movi	r2,7
   493d8:	14001416 	blt	r2,r16,4942c <___svfprintf_internal_r+0x1158>
   493dc:	92000204 	addi	r8,r18,8
   493e0:	003d9106 	br	48a28 <__alt_data_end+0xfffd6a28>
   493e4:	d9002f17 	ldw	r4,188(sp)
   493e8:	b80b883a 	mov	r5,r23
   493ec:	b00d883a 	mov	r6,r22
   493f0:	004e2c40 	call	4e2c4 <__ssprint_r>
   493f4:	103dc826 	beq	r2,zero,48b18 <__alt_data_end+0xfffd6b18>
   493f8:	003c7e06 	br	485f4 <__alt_data_end+0xfffd65f4>
   493fc:	01000174 	movhi	r4,5
   49400:	2112e184 	addi	r4,r4,19334
   49404:	d9002b15 	stw	r4,172(sp)
   49408:	dac02b17 	ldw	r11,172(sp)
   4940c:	1c07883a 	add	r3,r3,r16
   49410:	44000115 	stw	r16,4(r8)
   49414:	42c00015 	stw	r11,0(r8)
   49418:	10800044 	addi	r2,r2,1
   4941c:	d8c02015 	stw	r3,128(sp)
   49420:	d8801f15 	stw	r2,124(sp)
   49424:	010001c4 	movi	r4,7
   49428:	20bd7e0e 	bge	r4,r2,48a24 <__alt_data_end+0xfffd6a24>
   4942c:	d9002f17 	ldw	r4,188(sp)
   49430:	b80b883a 	mov	r5,r23
   49434:	b00d883a 	mov	r6,r22
   49438:	004e2c40 	call	4e2c4 <__ssprint_r>
   4943c:	103c6d1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49440:	d8c02017 	ldw	r3,128(sp)
   49444:	da000404 	addi	r8,sp,16
   49448:	003d7706 	br	48a28 <__alt_data_end+0xfffd6a28>
   4944c:	10803fcc 	andi	r2,r2,255
   49450:	1000201e 	bne	r2,zero,494d4 <___svfprintf_internal_r+0x1200>
   49454:	8880004c 	andi	r2,r17,1
   49458:	10001e26 	beq	r2,zero,494d4 <___svfprintf_internal_r+0x1200>
   4945c:	00800c04 	movi	r2,48
   49460:	d8c01dc4 	addi	r3,sp,119
   49464:	d8801dc5 	stb	r2,119(sp)
   49468:	dc803d17 	ldw	r18,244(sp)
   4946c:	d8c03115 	stw	r3,196(sp)
   49470:	003cbf06 	br	48770 <__alt_data_end+0xfffd6770>
   49474:	d9002f17 	ldw	r4,188(sp)
   49478:	b80b883a 	mov	r5,r23
   4947c:	b00d883a 	mov	r6,r22
   49480:	004e2c40 	call	4e2c4 <__ssprint_r>
   49484:	103c5b1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49488:	d8c02017 	ldw	r3,128(sp)
   4948c:	da000404 	addi	r8,sp,16
   49490:	003d5806 	br	489f4 <__alt_data_end+0xfffd69f4>
   49494:	d9002f17 	ldw	r4,188(sp)
   49498:	b80b883a 	mov	r5,r23
   4949c:	b00d883a 	mov	r6,r22
   494a0:	004e2c40 	call	4e2c4 <__ssprint_r>
   494a4:	103c531e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   494a8:	d8c02017 	ldw	r3,128(sp)
   494ac:	da000404 	addi	r8,sp,16
   494b0:	003d1906 	br	48918 <__alt_data_end+0xfffd6918>
   494b4:	d9002f17 	ldw	r4,188(sp)
   494b8:	b80b883a 	mov	r5,r23
   494bc:	b00d883a 	mov	r6,r22
   494c0:	004e2c40 	call	4e2c4 <__ssprint_r>
   494c4:	103c4b1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   494c8:	d8c02017 	ldw	r3,128(sp)
   494cc:	da000404 	addi	r8,sp,16
   494d0:	003d0306 	br	488e0 <__alt_data_end+0xfffd68e0>
   494d4:	0025883a 	mov	r18,zero
   494d8:	dd803115 	stw	r22,196(sp)
   494dc:	003ca406 	br	48770 <__alt_data_end+0xfffd6770>
   494e0:	dc002617 	ldw	r16,152(sp)
   494e4:	0401480e 	bge	zero,r16,49a08 <___svfprintf_internal_r+0x1734>
   494e8:	db003117 	ldw	r12,196(sp)
   494ec:	dac03317 	ldw	r11,204(sp)
   494f0:	62e1883a 	add	r16,r12,r11
   494f4:	db003417 	ldw	r12,208(sp)
   494f8:	5825883a 	mov	r18,r11
   494fc:	62c0010e 	bge	r12,r11,49504 <___svfprintf_internal_r+0x1230>
   49500:	6025883a 	mov	r18,r12
   49504:	04800b0e 	bge	zero,r18,49534 <___svfprintf_internal_r+0x1260>
   49508:	d8801f17 	ldw	r2,124(sp)
   4950c:	dac03117 	ldw	r11,196(sp)
   49510:	1c87883a 	add	r3,r3,r18
   49514:	10800044 	addi	r2,r2,1
   49518:	42c00015 	stw	r11,0(r8)
   4951c:	44800115 	stw	r18,4(r8)
   49520:	d8c02015 	stw	r3,128(sp)
   49524:	d8801f15 	stw	r2,124(sp)
   49528:	010001c4 	movi	r4,7
   4952c:	20823f16 	blt	r4,r2,49e2c <___svfprintf_internal_r+0x1b58>
   49530:	42000204 	addi	r8,r8,8
   49534:	90023b16 	blt	r18,zero,49e24 <___svfprintf_internal_r+0x1b50>
   49538:	db003417 	ldw	r12,208(sp)
   4953c:	64a5c83a 	sub	r18,r12,r18
   49540:	0480780e 	bge	zero,r18,49724 <___svfprintf_internal_r+0x1450>
   49544:	05400404 	movi	r21,16
   49548:	d8801f17 	ldw	r2,124(sp)
   4954c:	ac81140e 	bge	r21,r18,499a0 <___svfprintf_internal_r+0x16cc>
   49550:	01400174 	movhi	r5,5
   49554:	2952e184 	addi	r5,r5,19334
   49558:	d9402b15 	stw	r5,172(sp)
   4955c:	070001c4 	movi	fp,7
   49560:	dcc02f17 	ldw	r19,188(sp)
   49564:	00000306 	br	49574 <___svfprintf_internal_r+0x12a0>
   49568:	42000204 	addi	r8,r8,8
   4956c:	94bffc04 	addi	r18,r18,-16
   49570:	ac810e0e 	bge	r21,r18,499ac <___svfprintf_internal_r+0x16d8>
   49574:	18c00404 	addi	r3,r3,16
   49578:	10800044 	addi	r2,r2,1
   4957c:	45000015 	stw	r20,0(r8)
   49580:	45400115 	stw	r21,4(r8)
   49584:	d8c02015 	stw	r3,128(sp)
   49588:	d8801f15 	stw	r2,124(sp)
   4958c:	e0bff60e 	bge	fp,r2,49568 <__alt_data_end+0xfffd7568>
   49590:	9809883a 	mov	r4,r19
   49594:	b80b883a 	mov	r5,r23
   49598:	b00d883a 	mov	r6,r22
   4959c:	004e2c40 	call	4e2c4 <__ssprint_r>
   495a0:	103c141e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   495a4:	d8c02017 	ldw	r3,128(sp)
   495a8:	d8801f17 	ldw	r2,124(sp)
   495ac:	da000404 	addi	r8,sp,16
   495b0:	003fee06 	br	4956c <__alt_data_end+0xfffd756c>
   495b4:	d9002f17 	ldw	r4,188(sp)
   495b8:	b80b883a 	mov	r5,r23
   495bc:	b00d883a 	mov	r6,r22
   495c0:	004e2c40 	call	4e2c4 <__ssprint_r>
   495c4:	103c0b1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   495c8:	d8c02017 	ldw	r3,128(sp)
   495cc:	d8802787 	ldb	r2,158(sp)
   495d0:	da000404 	addi	r8,sp,16
   495d4:	003cb506 	br	488ac <__alt_data_end+0xfffd68ac>
   495d8:	657fffc4 	addi	r21,r12,-1
   495dc:	057f750e 	bge	zero,r21,493b4 <__alt_data_end+0xfffd73b4>
   495e0:	07000404 	movi	fp,16
   495e4:	e542ed0e 	bge	fp,r21,4a19c <___svfprintf_internal_r+0x1ec8>
   495e8:	01000174 	movhi	r4,5
   495ec:	2112e184 	addi	r4,r4,19334
   495f0:	d9002b15 	stw	r4,172(sp)
   495f4:	01c001c4 	movi	r7,7
   495f8:	dcc02f17 	ldw	r19,188(sp)
   495fc:	00000306 	br	4960c <___svfprintf_internal_r+0x1338>
   49600:	ad7ffc04 	addi	r21,r21,-16
   49604:	94800204 	addi	r18,r18,8
   49608:	e540130e 	bge	fp,r21,49658 <___svfprintf_internal_r+0x1384>
   4960c:	18c00404 	addi	r3,r3,16
   49610:	84000044 	addi	r16,r16,1
   49614:	95000015 	stw	r20,0(r18)
   49618:	97000115 	stw	fp,4(r18)
   4961c:	d8c02015 	stw	r3,128(sp)
   49620:	dc001f15 	stw	r16,124(sp)
   49624:	3c3ff60e 	bge	r7,r16,49600 <__alt_data_end+0xfffd7600>
   49628:	9809883a 	mov	r4,r19
   4962c:	b80b883a 	mov	r5,r23
   49630:	b00d883a 	mov	r6,r22
   49634:	d9c03e15 	stw	r7,248(sp)
   49638:	004e2c40 	call	4e2c4 <__ssprint_r>
   4963c:	d9c03e17 	ldw	r7,248(sp)
   49640:	103bec1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49644:	ad7ffc04 	addi	r21,r21,-16
   49648:	d8c02017 	ldw	r3,128(sp)
   4964c:	dc001f17 	ldw	r16,124(sp)
   49650:	dc800404 	addi	r18,sp,16
   49654:	e57fed16 	blt	fp,r21,4960c <__alt_data_end+0xfffd760c>
   49658:	dac02b17 	ldw	r11,172(sp)
   4965c:	1d47883a 	add	r3,r3,r21
   49660:	84000044 	addi	r16,r16,1
   49664:	92c00015 	stw	r11,0(r18)
   49668:	95400115 	stw	r21,4(r18)
   4966c:	d8c02015 	stw	r3,128(sp)
   49670:	dc001f15 	stw	r16,124(sp)
   49674:	008001c4 	movi	r2,7
   49678:	143f4d0e 	bge	r2,r16,493b0 <__alt_data_end+0xfffd73b0>
   4967c:	d9002f17 	ldw	r4,188(sp)
   49680:	b80b883a 	mov	r5,r23
   49684:	b00d883a 	mov	r6,r22
   49688:	004e2c40 	call	4e2c4 <__ssprint_r>
   4968c:	103bd91e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49690:	d8c02017 	ldw	r3,128(sp)
   49694:	dc001f17 	ldw	r16,124(sp)
   49698:	dc800404 	addi	r18,sp,16
   4969c:	003f4506 	br	493b4 <__alt_data_end+0xfffd73b4>
   496a0:	00800084 	movi	r2,2
   496a4:	9f06b03a 	or	r3,r19,fp
   496a8:	003d5706 	br	48c08 <__alt_data_end+0xfffd6c08>
   496ac:	1cc00017 	ldw	r19,0(r3)
   496b0:	dac02d17 	ldw	r11,180(sp)
   496b4:	9839d7fa 	srai	fp,r19,31
   496b8:	5ac00104 	addi	r11,r11,4
   496bc:	dac02d15 	stw	r11,180(sp)
   496c0:	e005883a 	mov	r2,fp
   496c4:	003c0306 	br	486d4 <__alt_data_end+0xfffd66d4>
   496c8:	dac02d17 	ldw	r11,180(sp)
   496cc:	0039883a 	mov	fp,zero
   496d0:	0005883a 	mov	r2,zero
   496d4:	5cc00017 	ldw	r19,0(r11)
   496d8:	5ac00104 	addi	r11,r11,4
   496dc:	dac02d15 	stw	r11,180(sp)
   496e0:	9807883a 	mov	r3,r19
   496e4:	003d4806 	br	48c08 <__alt_data_end+0xfffd6c08>
   496e8:	db002d17 	ldw	r12,180(sp)
   496ec:	14c00017 	ldw	r19,0(r2)
   496f0:	0039883a 	mov	fp,zero
   496f4:	63000104 	addi	r12,r12,4
   496f8:	db002d15 	stw	r12,180(sp)
   496fc:	00800044 	movi	r2,1
   49700:	9807883a 	mov	r3,r19
   49704:	003d4006 	br	48c08 <__alt_data_end+0xfffd6c08>
   49708:	d9002f17 	ldw	r4,188(sp)
   4970c:	b80b883a 	mov	r5,r23
   49710:	b00d883a 	mov	r6,r22
   49714:	004e2c40 	call	4e2c4 <__ssprint_r>
   49718:	103bb61e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   4971c:	d8c02017 	ldw	r3,128(sp)
   49720:	da000404 	addi	r8,sp,16
   49724:	db003117 	ldw	r12,196(sp)
   49728:	dac03417 	ldw	r11,208(sp)
   4972c:	d8802617 	ldw	r2,152(sp)
   49730:	62e5883a 	add	r18,r12,r11
   49734:	db003317 	ldw	r12,204(sp)
   49738:	13000216 	blt	r2,r12,49744 <___svfprintf_internal_r+0x1470>
   4973c:	8900004c 	andi	r4,r17,1
   49740:	20000c26 	beq	r4,zero,49774 <___svfprintf_internal_r+0x14a0>
   49744:	dac03917 	ldw	r11,228(sp)
   49748:	d9001f17 	ldw	r4,124(sp)
   4974c:	db003517 	ldw	r12,212(sp)
   49750:	1ac7883a 	add	r3,r3,r11
   49754:	21000044 	addi	r4,r4,1
   49758:	43000015 	stw	r12,0(r8)
   4975c:	42c00115 	stw	r11,4(r8)
   49760:	d8c02015 	stw	r3,128(sp)
   49764:	d9001f15 	stw	r4,124(sp)
   49768:	014001c4 	movi	r5,7
   4976c:	2901b716 	blt	r5,r4,49e4c <___svfprintf_internal_r+0x1b78>
   49770:	42000204 	addi	r8,r8,8
   49774:	dac03317 	ldw	r11,204(sp)
   49778:	8489c83a 	sub	r4,r16,r18
   4977c:	5885c83a 	sub	r2,r11,r2
   49780:	1021883a 	mov	r16,r2
   49784:	2080010e 	bge	r4,r2,4978c <___svfprintf_internal_r+0x14b8>
   49788:	2021883a 	mov	r16,r4
   4978c:	04000a0e 	bge	zero,r16,497b8 <___svfprintf_internal_r+0x14e4>
   49790:	d9001f17 	ldw	r4,124(sp)
   49794:	1c07883a 	add	r3,r3,r16
   49798:	44800015 	stw	r18,0(r8)
   4979c:	21000044 	addi	r4,r4,1
   497a0:	44000115 	stw	r16,4(r8)
   497a4:	d8c02015 	stw	r3,128(sp)
   497a8:	d9001f15 	stw	r4,124(sp)
   497ac:	014001c4 	movi	r5,7
   497b0:	2901bf16 	blt	r5,r4,49eb0 <___svfprintf_internal_r+0x1bdc>
   497b4:	42000204 	addi	r8,r8,8
   497b8:	8001bb16 	blt	r16,zero,49ea8 <___svfprintf_internal_r+0x1bd4>
   497bc:	1421c83a 	sub	r16,r2,r16
   497c0:	043c990e 	bge	zero,r16,48a28 <__alt_data_end+0xfffd6a28>
   497c4:	04800404 	movi	r18,16
   497c8:	d8801f17 	ldw	r2,124(sp)
   497cc:	943f0b0e 	bge	r18,r16,493fc <__alt_data_end+0xfffd73fc>
   497d0:	01400174 	movhi	r5,5
   497d4:	2952e184 	addi	r5,r5,19334
   497d8:	d9402b15 	stw	r5,172(sp)
   497dc:	054001c4 	movi	r21,7
   497e0:	dcc02f17 	ldw	r19,188(sp)
   497e4:	00000306 	br	497f4 <___svfprintf_internal_r+0x1520>
   497e8:	42000204 	addi	r8,r8,8
   497ec:	843ffc04 	addi	r16,r16,-16
   497f0:	943f050e 	bge	r18,r16,49408 <__alt_data_end+0xfffd7408>
   497f4:	18c00404 	addi	r3,r3,16
   497f8:	10800044 	addi	r2,r2,1
   497fc:	45000015 	stw	r20,0(r8)
   49800:	44800115 	stw	r18,4(r8)
   49804:	d8c02015 	stw	r3,128(sp)
   49808:	d8801f15 	stw	r2,124(sp)
   4980c:	a8bff60e 	bge	r21,r2,497e8 <__alt_data_end+0xfffd77e8>
   49810:	9809883a 	mov	r4,r19
   49814:	b80b883a 	mov	r5,r23
   49818:	b00d883a 	mov	r6,r22
   4981c:	004e2c40 	call	4e2c4 <__ssprint_r>
   49820:	103b741e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49824:	d8c02017 	ldw	r3,128(sp)
   49828:	d8801f17 	ldw	r2,124(sp)
   4982c:	da000404 	addi	r8,sp,16
   49830:	003fee06 	br	497ec <__alt_data_end+0xfffd77ec>
   49834:	8888703a 	and	r4,r17,r2
   49838:	203eb31e 	bne	r4,zero,49308 <__alt_data_end+0xfffd7308>
   4983c:	dc001f17 	ldw	r16,124(sp)
   49840:	db003117 	ldw	r12,196(sp)
   49844:	40800115 	stw	r2,4(r8)
   49848:	84000044 	addi	r16,r16,1
   4984c:	43000015 	stw	r12,0(r8)
   49850:	d8c02015 	stw	r3,128(sp)
   49854:	dc001f15 	stw	r16,124(sp)
   49858:	008001c4 	movi	r2,7
   4985c:	143f8716 	blt	r2,r16,4967c <__alt_data_end+0xfffd767c>
   49860:	44800204 	addi	r18,r8,8
   49864:	003ed306 	br	493b4 <__alt_data_end+0xfffd73b4>
   49868:	d9002f17 	ldw	r4,188(sp)
   4986c:	b80b883a 	mov	r5,r23
   49870:	b00d883a 	mov	r6,r22
   49874:	004e2c40 	call	4e2c4 <__ssprint_r>
   49878:	103b5e1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   4987c:	d8c02017 	ldw	r3,128(sp)
   49880:	dc001f17 	ldw	r16,124(sp)
   49884:	da000404 	addi	r8,sp,16
   49888:	003eaa06 	br	49334 <__alt_data_end+0xfffd7334>
   4988c:	d9002f17 	ldw	r4,188(sp)
   49890:	b80b883a 	mov	r5,r23
   49894:	b00d883a 	mov	r6,r22
   49898:	004e2c40 	call	4e2c4 <__ssprint_r>
   4989c:	103b551e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   498a0:	d8c02017 	ldw	r3,128(sp)
   498a4:	dc001f17 	ldw	r16,124(sp)
   498a8:	dc800404 	addi	r18,sp,16
   498ac:	003eac06 	br	49360 <__alt_data_end+0xfffd7360>
   498b0:	d9002f17 	ldw	r4,188(sp)
   498b4:	b80b883a 	mov	r5,r23
   498b8:	b00d883a 	mov	r6,r22
   498bc:	004e2c40 	call	4e2c4 <__ssprint_r>
   498c0:	103b4c1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   498c4:	d8c02017 	ldw	r3,128(sp)
   498c8:	da000404 	addi	r8,sp,16
   498cc:	003c1506 	br	48924 <__alt_data_end+0xfffd6924>
   498d0:	da004015 	stw	r8,256(sp)
   498d4:	da403f15 	stw	r9,252(sp)
   498d8:	004e1580 	call	4e158 <__fpclassifyd>
   498dc:	da004017 	ldw	r8,256(sp)
   498e0:	da403f17 	ldw	r9,252(sp)
   498e4:	1000951e 	bne	r2,zero,49b3c <___svfprintf_internal_r+0x1868>
   498e8:	008011c4 	movi	r2,71
   498ec:	1400fb16 	blt	r2,r16,49cdc <___svfprintf_internal_r+0x1a08>
   498f0:	03000174 	movhi	r12,5
   498f4:	6312d304 	addi	r12,r12,19276
   498f8:	db003115 	stw	r12,196(sp)
   498fc:	00c000c4 	movi	r3,3
   49900:	00bfdfc4 	movi	r2,-129
   49904:	d8c02a15 	stw	r3,168(sp)
   49908:	88a2703a 	and	r17,r17,r2
   4990c:	dd402783 	ldbu	r21,158(sp)
   49910:	dcc02d15 	stw	r19,180(sp)
   49914:	1825883a 	mov	r18,r3
   49918:	d8003215 	stw	zero,200(sp)
   4991c:	d8003415 	stw	zero,208(sp)
   49920:	003b9806 	br	48784 <__alt_data_end+0xfffd6784>
   49924:	1c000007 	ldb	r16,0(r3)
   49928:	1805883a 	mov	r2,r3
   4992c:	003abf06 	br	4842c <__alt_data_end+0xfffd642c>
   49930:	00800084 	movi	r2,2
   49934:	003cb406 	br	48c08 <__alt_data_end+0xfffd6c08>
   49938:	88c0100c 	andi	r3,r17,64
   4993c:	1800f626 	beq	r3,zero,49d18 <___svfprintf_internal_r+0x1a44>
   49940:	dac02d17 	ldw	r11,180(sp)
   49944:	14c0000b 	ldhu	r19,0(r2)
   49948:	0039883a 	mov	fp,zero
   4994c:	5ac00104 	addi	r11,r11,4
   49950:	dac02d15 	stw	r11,180(sp)
   49954:	003cbd06 	br	48c4c <__alt_data_end+0xfffd6c4c>
   49958:	8880040c 	andi	r2,r17,16
   4995c:	1000091e 	bne	r2,zero,49984 <___svfprintf_internal_r+0x16b0>
   49960:	8c40100c 	andi	r17,r17,64
   49964:	88000726 	beq	r17,zero,49984 <___svfprintf_internal_r+0x16b0>
   49968:	db002d17 	ldw	r12,180(sp)
   4996c:	dac03017 	ldw	r11,192(sp)
   49970:	60800017 	ldw	r2,0(r12)
   49974:	63000104 	addi	r12,r12,4
   49978:	db002d15 	stw	r12,180(sp)
   4997c:	12c0000d 	sth	r11,0(r2)
   49980:	003a8006 	br	48384 <__alt_data_end+0xfffd6384>
   49984:	db002d17 	ldw	r12,180(sp)
   49988:	dac03017 	ldw	r11,192(sp)
   4998c:	60800017 	ldw	r2,0(r12)
   49990:	63000104 	addi	r12,r12,4
   49994:	db002d15 	stw	r12,180(sp)
   49998:	12c00015 	stw	r11,0(r2)
   4999c:	003a7906 	br	48384 <__alt_data_end+0xfffd6384>
   499a0:	01000174 	movhi	r4,5
   499a4:	2112e184 	addi	r4,r4,19334
   499a8:	d9002b15 	stw	r4,172(sp)
   499ac:	dac02b17 	ldw	r11,172(sp)
   499b0:	1c87883a 	add	r3,r3,r18
   499b4:	10800044 	addi	r2,r2,1
   499b8:	42c00015 	stw	r11,0(r8)
   499bc:	44800115 	stw	r18,4(r8)
   499c0:	d8c02015 	stw	r3,128(sp)
   499c4:	d8801f15 	stw	r2,124(sp)
   499c8:	010001c4 	movi	r4,7
   499cc:	20bf4e16 	blt	r4,r2,49708 <__alt_data_end+0xfffd7708>
   499d0:	42000204 	addi	r8,r8,8
   499d4:	003f5306 	br	49724 <__alt_data_end+0xfffd7724>
   499d8:	01000174 	movhi	r4,5
   499dc:	2112e184 	addi	r4,r4,19334
   499e0:	d9002b15 	stw	r4,172(sp)
   499e4:	003bf906 	br	489cc <__alt_data_end+0xfffd69cc>
   499e8:	d9002f17 	ldw	r4,188(sp)
   499ec:	b80b883a 	mov	r5,r23
   499f0:	b00d883a 	mov	r6,r22
   499f4:	004e2c40 	call	4e2c4 <__ssprint_r>
   499f8:	103afe1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   499fc:	d8c02017 	ldw	r3,128(sp)
   49a00:	da000404 	addi	r8,sp,16
   49a04:	003dc606 	br	49120 <__alt_data_end+0xfffd7120>
   49a08:	d8801f17 	ldw	r2,124(sp)
   49a0c:	03000174 	movhi	r12,5
   49a10:	01000044 	movi	r4,1
   49a14:	18c00044 	addi	r3,r3,1
   49a18:	10800044 	addi	r2,r2,1
   49a1c:	6312e104 	addi	r12,r12,19332
   49a20:	41000115 	stw	r4,4(r8)
   49a24:	43000015 	stw	r12,0(r8)
   49a28:	d8c02015 	stw	r3,128(sp)
   49a2c:	d8801f15 	stw	r2,124(sp)
   49a30:	010001c4 	movi	r4,7
   49a34:	2080ad16 	blt	r4,r2,49cec <___svfprintf_internal_r+0x1a18>
   49a38:	42000204 	addi	r8,r8,8
   49a3c:	8000041e 	bne	r16,zero,49a50 <___svfprintf_internal_r+0x177c>
   49a40:	dac03317 	ldw	r11,204(sp)
   49a44:	5800021e 	bne	r11,zero,49a50 <___svfprintf_internal_r+0x177c>
   49a48:	8880004c 	andi	r2,r17,1
   49a4c:	103bf626 	beq	r2,zero,48a28 <__alt_data_end+0xfffd6a28>
   49a50:	db003917 	ldw	r12,228(sp)
   49a54:	d8801f17 	ldw	r2,124(sp)
   49a58:	dac03517 	ldw	r11,212(sp)
   49a5c:	1b07883a 	add	r3,r3,r12
   49a60:	10800044 	addi	r2,r2,1
   49a64:	42c00015 	stw	r11,0(r8)
   49a68:	43000115 	stw	r12,4(r8)
   49a6c:	d8c02015 	stw	r3,128(sp)
   49a70:	d8801f15 	stw	r2,124(sp)
   49a74:	010001c4 	movi	r4,7
   49a78:	20818616 	blt	r4,r2,4a094 <___svfprintf_internal_r+0x1dc0>
   49a7c:	42000204 	addi	r8,r8,8
   49a80:	0421c83a 	sub	r16,zero,r16
   49a84:	0400bc0e 	bge	zero,r16,49d78 <___svfprintf_internal_r+0x1aa4>
   49a88:	04800404 	movi	r18,16
   49a8c:	9400f80e 	bge	r18,r16,49e70 <___svfprintf_internal_r+0x1b9c>
   49a90:	01000174 	movhi	r4,5
   49a94:	2112e184 	addi	r4,r4,19334
   49a98:	d9002b15 	stw	r4,172(sp)
   49a9c:	054001c4 	movi	r21,7
   49aa0:	dcc02f17 	ldw	r19,188(sp)
   49aa4:	00000306 	br	49ab4 <___svfprintf_internal_r+0x17e0>
   49aa8:	42000204 	addi	r8,r8,8
   49aac:	843ffc04 	addi	r16,r16,-16
   49ab0:	9400f20e 	bge	r18,r16,49e7c <___svfprintf_internal_r+0x1ba8>
   49ab4:	18c00404 	addi	r3,r3,16
   49ab8:	10800044 	addi	r2,r2,1
   49abc:	45000015 	stw	r20,0(r8)
   49ac0:	44800115 	stw	r18,4(r8)
   49ac4:	d8c02015 	stw	r3,128(sp)
   49ac8:	d8801f15 	stw	r2,124(sp)
   49acc:	a8bff60e 	bge	r21,r2,49aa8 <__alt_data_end+0xfffd7aa8>
   49ad0:	9809883a 	mov	r4,r19
   49ad4:	b80b883a 	mov	r5,r23
   49ad8:	b00d883a 	mov	r6,r22
   49adc:	004e2c40 	call	4e2c4 <__ssprint_r>
   49ae0:	103ac41e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49ae4:	d8c02017 	ldw	r3,128(sp)
   49ae8:	d8801f17 	ldw	r2,124(sp)
   49aec:	da000404 	addi	r8,sp,16
   49af0:	003fee06 	br	49aac <__alt_data_end+0xfffd7aac>
   49af4:	db002e17 	ldw	r12,184(sp)
   49af8:	1805883a 	mov	r2,r3
   49afc:	dac02d15 	stw	r11,180(sp)
   49b00:	0319c83a 	sub	r12,zero,r12
   49b04:	db002e15 	stw	r12,184(sp)
   49b08:	003acf06 	br	48648 <__alt_data_end+0xfffd6648>
   49b0c:	18800044 	addi	r2,r3,1
   49b10:	8c400814 	ori	r17,r17,32
   49b14:	1c000047 	ldb	r16,1(r3)
   49b18:	003a4406 	br	4842c <__alt_data_end+0xfffd642c>
   49b1c:	d9002f17 	ldw	r4,188(sp)
   49b20:	b80b883a 	mov	r5,r23
   49b24:	b00d883a 	mov	r6,r22
   49b28:	004e2c40 	call	4e2c4 <__ssprint_r>
   49b2c:	103ab11e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49b30:	d8c02017 	ldw	r3,128(sp)
   49b34:	da000404 	addi	r8,sp,16
   49b38:	003d8a06 	br	49164 <__alt_data_end+0xfffd7164>
   49b3c:	057ff7c4 	movi	r21,-33
   49b40:	00bfffc4 	movi	r2,-1
   49b44:	856a703a 	and	r21,r16,r21
   49b48:	48807126 	beq	r9,r2,49d10 <___svfprintf_internal_r+0x1a3c>
   49b4c:	008011c4 	movi	r2,71
   49b50:	a8814d26 	beq	r21,r2,4a088 <___svfprintf_internal_r+0x1db4>
   49b54:	db003817 	ldw	r12,224(sp)
   49b58:	8ac04014 	ori	r11,r17,256
   49b5c:	dac02d15 	stw	r11,180(sp)
   49b60:	60015616 	blt	r12,zero,4a0bc <___svfprintf_internal_r+0x1de8>
   49b64:	dc803817 	ldw	r18,224(sp)
   49b68:	d8002a05 	stb	zero,168(sp)
   49b6c:	00801984 	movi	r2,102
   49b70:	80808c26 	beq	r16,r2,49da4 <___svfprintf_internal_r+0x1ad0>
   49b74:	00801184 	movi	r2,70
   49b78:	80808a26 	beq	r16,r2,49da4 <___svfprintf_internal_r+0x1ad0>
   49b7c:	00801144 	movi	r2,69
   49b80:	a8815226 	beq	r21,r2,4a0cc <___svfprintf_internal_r+0x1df8>
   49b84:	4839883a 	mov	fp,r9
   49b88:	d8802604 	addi	r2,sp,152
   49b8c:	d8800115 	stw	r2,4(sp)
   49b90:	d9002f17 	ldw	r4,188(sp)
   49b94:	d8802504 	addi	r2,sp,148
   49b98:	d9403717 	ldw	r5,220(sp)
   49b9c:	d8800215 	stw	r2,8(sp)
   49ba0:	d8802104 	addi	r2,sp,132
   49ba4:	df000015 	stw	fp,0(sp)
   49ba8:	d8800315 	stw	r2,12(sp)
   49bac:	900d883a 	mov	r6,r18
   49bb0:	01c00084 	movi	r7,2
   49bb4:	da004015 	stw	r8,256(sp)
   49bb8:	da403f15 	stw	r9,252(sp)
   49bbc:	004a4640 	call	4a464 <_dtoa_r>
   49bc0:	d8803115 	stw	r2,196(sp)
   49bc4:	008019c4 	movi	r2,103
   49bc8:	da004017 	ldw	r8,256(sp)
   49bcc:	da403f17 	ldw	r9,252(sp)
   49bd0:	80800226 	beq	r16,r2,49bdc <___svfprintf_internal_r+0x1908>
   49bd4:	008011c4 	movi	r2,71
   49bd8:	8080841e 	bne	r16,r2,49dec <___svfprintf_internal_r+0x1b18>
   49bdc:	8880004c 	andi	r2,r17,1
   49be0:	10014f26 	beq	r2,zero,4a120 <___svfprintf_internal_r+0x1e4c>
   49be4:	db003117 	ldw	r12,196(sp)
   49be8:	6715883a 	add	r10,r12,fp
   49bec:	d9003717 	ldw	r4,220(sp)
   49bf0:	900b883a 	mov	r5,r18
   49bf4:	000d883a 	mov	r6,zero
   49bf8:	000f883a 	mov	r7,zero
   49bfc:	da004015 	stw	r8,256(sp)
   49c00:	da403f15 	stw	r9,252(sp)
   49c04:	da803e15 	stw	r10,248(sp)
   49c08:	0046ba00 	call	46ba0 <__eqdf2>
   49c0c:	da004017 	ldw	r8,256(sp)
   49c10:	da403f17 	ldw	r9,252(sp)
   49c14:	da803e17 	ldw	r10,248(sp)
   49c18:	1000d926 	beq	r2,zero,49f80 <___svfprintf_internal_r+0x1cac>
   49c1c:	d8802117 	ldw	r2,132(sp)
   49c20:	1280062e 	bgeu	r2,r10,49c3c <___svfprintf_internal_r+0x1968>
   49c24:	01000c04 	movi	r4,48
   49c28:	10c00044 	addi	r3,r2,1
   49c2c:	d8c02115 	stw	r3,132(sp)
   49c30:	11000005 	stb	r4,0(r2)
   49c34:	d8802117 	ldw	r2,132(sp)
   49c38:	12bffb36 	bltu	r2,r10,49c28 <__alt_data_end+0xfffd7c28>
   49c3c:	db003117 	ldw	r12,196(sp)
   49c40:	1305c83a 	sub	r2,r2,r12
   49c44:	d8803315 	stw	r2,204(sp)
   49c48:	008011c4 	movi	r2,71
   49c4c:	a880b626 	beq	r21,r2,49f28 <___svfprintf_internal_r+0x1c54>
   49c50:	00801944 	movi	r2,101
   49c54:	14017c0e 	bge	r2,r16,4a248 <___svfprintf_internal_r+0x1f74>
   49c58:	00801984 	movi	r2,102
   49c5c:	80812626 	beq	r16,r2,4a0f8 <___svfprintf_internal_r+0x1e24>
   49c60:	db002617 	ldw	r12,152(sp)
   49c64:	db003415 	stw	r12,208(sp)
   49c68:	db003417 	ldw	r12,208(sp)
   49c6c:	dac03317 	ldw	r11,204(sp)
   49c70:	62c11816 	blt	r12,r11,4a0d4 <___svfprintf_internal_r+0x1e00>
   49c74:	8c40004c 	andi	r17,r17,1
   49c78:	88013b1e 	bne	r17,zero,4a168 <___svfprintf_internal_r+0x1e94>
   49c7c:	6005883a 	mov	r2,r12
   49c80:	60012516 	blt	r12,zero,4a118 <___svfprintf_internal_r+0x1e44>
   49c84:	dc803417 	ldw	r18,208(sp)
   49c88:	df002a07 	ldb	fp,168(sp)
   49c8c:	e000b01e 	bne	fp,zero,49f50 <___svfprintf_internal_r+0x1c7c>
   49c90:	dc402d17 	ldw	r17,180(sp)
   49c94:	dd402783 	ldbu	r21,158(sp)
   49c98:	d8802a15 	stw	r2,168(sp)
   49c9c:	dcc02d15 	stw	r19,180(sp)
   49ca0:	d8003215 	stw	zero,200(sp)
   49ca4:	003ab706 	br	48784 <__alt_data_end+0xfffd6784>
   49ca8:	00800174 	movhi	r2,5
   49cac:	1092d104 	addi	r2,r2,19268
   49cb0:	d8803115 	stw	r2,196(sp)
   49cb4:	003bbb06 	br	48ba4 <__alt_data_end+0xfffd6ba4>
   49cb8:	d9002f17 	ldw	r4,188(sp)
   49cbc:	04001004 	movi	r16,64
   49cc0:	800b883a 	mov	r5,r16
   49cc4:	004c12c0 	call	4c12c <_malloc_r>
   49cc8:	b8800015 	stw	r2,0(r23)
   49ccc:	b8800415 	stw	r2,16(r23)
   49cd0:	10015f26 	beq	r2,zero,4a250 <___svfprintf_internal_r+0x1f7c>
   49cd4:	bc000515 	stw	r16,20(r23)
   49cd8:	00399806 	br	4833c <__alt_data_end+0xfffd633c>
   49cdc:	00800174 	movhi	r2,5
   49ce0:	1092d404 	addi	r2,r2,19280
   49ce4:	d8803115 	stw	r2,196(sp)
   49ce8:	003f0406 	br	498fc <__alt_data_end+0xfffd78fc>
   49cec:	d9002f17 	ldw	r4,188(sp)
   49cf0:	b80b883a 	mov	r5,r23
   49cf4:	b00d883a 	mov	r6,r22
   49cf8:	004e2c40 	call	4e2c4 <__ssprint_r>
   49cfc:	103a3d1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49d00:	dc002617 	ldw	r16,152(sp)
   49d04:	d8c02017 	ldw	r3,128(sp)
   49d08:	da000404 	addi	r8,sp,16
   49d0c:	003f4b06 	br	49a3c <__alt_data_end+0xfffd7a3c>
   49d10:	02400184 	movi	r9,6
   49d14:	003f8f06 	br	49b54 <__alt_data_end+0xfffd7b54>
   49d18:	db002d17 	ldw	r12,180(sp)
   49d1c:	14c00017 	ldw	r19,0(r2)
   49d20:	0039883a 	mov	fp,zero
   49d24:	63000104 	addi	r12,r12,4
   49d28:	db002d15 	stw	r12,180(sp)
   49d2c:	003bc706 	br	48c4c <__alt_data_end+0xfffd6c4c>
   49d30:	d8c03117 	ldw	r3,196(sp)
   49d34:	b0e5c83a 	sub	r18,r22,r3
   49d38:	003a8d06 	br	48770 <__alt_data_end+0xfffd6770>
   49d3c:	da004015 	stw	r8,256(sp)
   49d40:	004823c0 	call	4823c <strlen>
   49d44:	1025883a 	mov	r18,r2
   49d48:	da004017 	ldw	r8,256(sp)
   49d4c:	903bf20e 	bge	r18,zero,48d18 <__alt_data_end+0xfffd6d18>
   49d50:	0005883a 	mov	r2,zero
   49d54:	003bf006 	br	48d18 <__alt_data_end+0xfffd6d18>
   49d58:	d9002f17 	ldw	r4,188(sp)
   49d5c:	b80b883a 	mov	r5,r23
   49d60:	b00d883a 	mov	r6,r22
   49d64:	004e2c40 	call	4e2c4 <__ssprint_r>
   49d68:	103a221e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49d6c:	d8c02017 	ldw	r3,128(sp)
   49d70:	d8801f17 	ldw	r2,124(sp)
   49d74:	da000404 	addi	r8,sp,16
   49d78:	db003317 	ldw	r12,204(sp)
   49d7c:	dac03117 	ldw	r11,196(sp)
   49d80:	10800044 	addi	r2,r2,1
   49d84:	1b07883a 	add	r3,r3,r12
   49d88:	42c00015 	stw	r11,0(r8)
   49d8c:	43000115 	stw	r12,4(r8)
   49d90:	d8c02015 	stw	r3,128(sp)
   49d94:	d8801f15 	stw	r2,124(sp)
   49d98:	010001c4 	movi	r4,7
   49d9c:	20bb210e 	bge	r4,r2,48a24 <__alt_data_end+0xfffd6a24>
   49da0:	003da206 	br	4942c <__alt_data_end+0xfffd742c>
   49da4:	d8802604 	addi	r2,sp,152
   49da8:	d8800115 	stw	r2,4(sp)
   49dac:	d9002f17 	ldw	r4,188(sp)
   49db0:	d8802504 	addi	r2,sp,148
   49db4:	d9403717 	ldw	r5,220(sp)
   49db8:	d8800215 	stw	r2,8(sp)
   49dbc:	d8802104 	addi	r2,sp,132
   49dc0:	da400015 	stw	r9,0(sp)
   49dc4:	d8800315 	stw	r2,12(sp)
   49dc8:	900d883a 	mov	r6,r18
   49dcc:	01c000c4 	movi	r7,3
   49dd0:	da004015 	stw	r8,256(sp)
   49dd4:	da403f15 	stw	r9,252(sp)
   49dd8:	004a4640 	call	4a464 <_dtoa_r>
   49ddc:	da403f17 	ldw	r9,252(sp)
   49de0:	da004017 	ldw	r8,256(sp)
   49de4:	d8803115 	stw	r2,196(sp)
   49de8:	4839883a 	mov	fp,r9
   49dec:	dac03117 	ldw	r11,196(sp)
   49df0:	00801184 	movi	r2,70
   49df4:	5f15883a 	add	r10,r11,fp
   49df8:	a8bf7c1e 	bne	r21,r2,49bec <__alt_data_end+0xfffd7bec>
   49dfc:	59000007 	ldb	r4,0(r11)
   49e00:	00800c04 	movi	r2,48
   49e04:	2080c826 	beq	r4,r2,4a128 <___svfprintf_internal_r+0x1e54>
   49e08:	d8c02617 	ldw	r3,152(sp)
   49e0c:	50d5883a 	add	r10,r10,r3
   49e10:	003f7606 	br	49bec <__alt_data_end+0xfffd7bec>
   49e14:	01000174 	movhi	r4,5
   49e18:	2112e584 	addi	r4,r4,19350
   49e1c:	d9003615 	stw	r4,216(sp)
   49e20:	003a9706 	br	48880 <__alt_data_end+0xfffd6880>
   49e24:	0025883a 	mov	r18,zero
   49e28:	003dc306 	br	49538 <__alt_data_end+0xfffd7538>
   49e2c:	d9002f17 	ldw	r4,188(sp)
   49e30:	b80b883a 	mov	r5,r23
   49e34:	b00d883a 	mov	r6,r22
   49e38:	004e2c40 	call	4e2c4 <__ssprint_r>
   49e3c:	1039ed1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49e40:	d8c02017 	ldw	r3,128(sp)
   49e44:	da000404 	addi	r8,sp,16
   49e48:	003dba06 	br	49534 <__alt_data_end+0xfffd7534>
   49e4c:	d9002f17 	ldw	r4,188(sp)
   49e50:	b80b883a 	mov	r5,r23
   49e54:	b00d883a 	mov	r6,r22
   49e58:	004e2c40 	call	4e2c4 <__ssprint_r>
   49e5c:	1039e51e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49e60:	d8802617 	ldw	r2,152(sp)
   49e64:	d8c02017 	ldw	r3,128(sp)
   49e68:	da000404 	addi	r8,sp,16
   49e6c:	003e4106 	br	49774 <__alt_data_end+0xfffd7774>
   49e70:	03000174 	movhi	r12,5
   49e74:	6312e184 	addi	r12,r12,19334
   49e78:	db002b15 	stw	r12,172(sp)
   49e7c:	dac02b17 	ldw	r11,172(sp)
   49e80:	1c07883a 	add	r3,r3,r16
   49e84:	10800044 	addi	r2,r2,1
   49e88:	42c00015 	stw	r11,0(r8)
   49e8c:	44000115 	stw	r16,4(r8)
   49e90:	d8c02015 	stw	r3,128(sp)
   49e94:	d8801f15 	stw	r2,124(sp)
   49e98:	010001c4 	movi	r4,7
   49e9c:	20bfae16 	blt	r4,r2,49d58 <__alt_data_end+0xfffd7d58>
   49ea0:	42000204 	addi	r8,r8,8
   49ea4:	003fb406 	br	49d78 <__alt_data_end+0xfffd7d78>
   49ea8:	0021883a 	mov	r16,zero
   49eac:	003e4306 	br	497bc <__alt_data_end+0xfffd77bc>
   49eb0:	d9002f17 	ldw	r4,188(sp)
   49eb4:	b80b883a 	mov	r5,r23
   49eb8:	b00d883a 	mov	r6,r22
   49ebc:	004e2c40 	call	4e2c4 <__ssprint_r>
   49ec0:	1039cc1e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   49ec4:	d8802617 	ldw	r2,152(sp)
   49ec8:	db003317 	ldw	r12,204(sp)
   49ecc:	d8c02017 	ldw	r3,128(sp)
   49ed0:	da000404 	addi	r8,sp,16
   49ed4:	6085c83a 	sub	r2,r12,r2
   49ed8:	003e3706 	br	497b8 <__alt_data_end+0xfffd77b8>
   49edc:	00800184 	movi	r2,6
   49ee0:	1240012e 	bgeu	r2,r9,49ee8 <___svfprintf_internal_r+0x1c14>
   49ee4:	1013883a 	mov	r9,r2
   49ee8:	4825883a 	mov	r18,r9
   49eec:	4805883a 	mov	r2,r9
   49ef0:	4800a216 	blt	r9,zero,4a17c <___svfprintf_internal_r+0x1ea8>
   49ef4:	d8802a15 	stw	r2,168(sp)
   49ef8:	00800174 	movhi	r2,5
   49efc:	1092df04 	addi	r2,r2,19324
   49f00:	d8803115 	stw	r2,196(sp)
   49f04:	dcc02d15 	stw	r19,180(sp)
   49f08:	d8003215 	stw	zero,200(sp)
   49f0c:	d8003415 	stw	zero,208(sp)
   49f10:	0005883a 	mov	r2,zero
   49f14:	003a2206 	br	487a0 <__alt_data_end+0xfffd67a0>
   49f18:	03000174 	movhi	r12,5
   49f1c:	6312e584 	addi	r12,r12,19350
   49f20:	db003615 	stw	r12,216(sp)
   49f24:	003ae506 	br	48abc <__alt_data_end+0xfffd6abc>
   49f28:	d8c02617 	ldw	r3,152(sp)
   49f2c:	00bfff44 	movi	r2,-3
   49f30:	18801516 	blt	r3,r2,49f88 <___svfprintf_internal_r+0x1cb4>
   49f34:	48c01416 	blt	r9,r3,49f88 <___svfprintf_internal_r+0x1cb4>
   49f38:	d8c03415 	stw	r3,208(sp)
   49f3c:	040019c4 	movi	r16,103
   49f40:	003f4906 	br	49c68 <__alt_data_end+0xfffd7c68>
   49f44:	05400b44 	movi	r21,45
   49f48:	dd402785 	stb	r21,158(sp)
   49f4c:	003b1006 	br	48b90 <__alt_data_end+0xfffd6b90>
   49f50:	00c00b44 	movi	r3,45
   49f54:	d8802a15 	stw	r2,168(sp)
   49f58:	dc402d17 	ldw	r17,180(sp)
   49f5c:	d8c02785 	stb	r3,158(sp)
   49f60:	dcc02d15 	stw	r19,180(sp)
   49f64:	d8003215 	stw	zero,200(sp)
   49f68:	00800b44 	movi	r2,45
   49f6c:	003a0906 	br	48794 <__alt_data_end+0xfffd6794>
   49f70:	01000174 	movhi	r4,5
   49f74:	2112e184 	addi	r4,r4,19334
   49f78:	d9002b15 	stw	r4,172(sp)
   49f7c:	003cc306 	br	4928c <__alt_data_end+0xfffd728c>
   49f80:	5005883a 	mov	r2,r10
   49f84:	003f2d06 	br	49c3c <__alt_data_end+0xfffd7c3c>
   49f88:	843fff84 	addi	r16,r16,-2
   49f8c:	1f3fffc4 	addi	fp,r3,-1
   49f90:	df002615 	stw	fp,152(sp)
   49f94:	dc0022c5 	stb	r16,139(sp)
   49f98:	e000a016 	blt	fp,zero,4a21c <___svfprintf_internal_r+0x1f48>
   49f9c:	00800ac4 	movi	r2,43
   49fa0:	d8802305 	stb	r2,140(sp)
   49fa4:	00800244 	movi	r2,9
   49fa8:	1700800e 	bge	r2,fp,4a1ac <___svfprintf_internal_r+0x1ed8>
   49fac:	dd4022c4 	addi	r21,sp,139
   49fb0:	dc002b15 	stw	r16,172(sp)
   49fb4:	4025883a 	mov	r18,r8
   49fb8:	a821883a 	mov	r16,r21
   49fbc:	e009883a 	mov	r4,fp
   49fc0:	01400284 	movi	r5,10
   49fc4:	0044b540 	call	44b54 <__modsi3>
   49fc8:	10800c04 	addi	r2,r2,48
   49fcc:	843fffc4 	addi	r16,r16,-1
   49fd0:	e009883a 	mov	r4,fp
   49fd4:	01400284 	movi	r5,10
   49fd8:	80800005 	stb	r2,0(r16)
   49fdc:	0044b000 	call	44b00 <__divsi3>
   49fe0:	1039883a 	mov	fp,r2
   49fe4:	00800244 	movi	r2,9
   49fe8:	173ff416 	blt	r2,fp,49fbc <__alt_data_end+0xfffd7fbc>
   49fec:	9011883a 	mov	r8,r18
   49ff0:	e0800c04 	addi	r2,fp,48
   49ff4:	8025883a 	mov	r18,r16
   49ff8:	913fffc4 	addi	r4,r18,-1
   49ffc:	90bfffc5 	stb	r2,-1(r18)
   4a000:	dc002b17 	ldw	r16,172(sp)
   4a004:	25408e2e 	bgeu	r4,r21,4a240 <___svfprintf_internal_r+0x1f6c>
   4a008:	d9402384 	addi	r5,sp,142
   4a00c:	2c8bc83a 	sub	r5,r5,r18
   4a010:	d8c02344 	addi	r3,sp,141
   4a014:	a94b883a 	add	r5,r21,r5
   4a018:	00000106 	br	4a020 <___svfprintf_internal_r+0x1d4c>
   4a01c:	20800003 	ldbu	r2,0(r4)
   4a020:	18800005 	stb	r2,0(r3)
   4a024:	18c00044 	addi	r3,r3,1
   4a028:	21000044 	addi	r4,r4,1
   4a02c:	197ffb1e 	bne	r3,r5,4a01c <__alt_data_end+0xfffd801c>
   4a030:	d8802304 	addi	r2,sp,140
   4a034:	1485c83a 	sub	r2,r2,r18
   4a038:	d8c02344 	addi	r3,sp,141
   4a03c:	1885883a 	add	r2,r3,r2
   4a040:	dac03317 	ldw	r11,204(sp)
   4a044:	156bc83a 	sub	r21,r2,r21
   4a048:	dd403a15 	stw	r21,232(sp)
   4a04c:	00800044 	movi	r2,1
   4a050:	5d65883a 	add	r18,r11,r21
   4a054:	12c0770e 	bge	r2,r11,4a234 <___svfprintf_internal_r+0x1f60>
   4a058:	94800044 	addi	r18,r18,1
   4a05c:	9005883a 	mov	r2,r18
   4a060:	90007216 	blt	r18,zero,4a22c <___svfprintf_internal_r+0x1f58>
   4a064:	d8003415 	stw	zero,208(sp)
   4a068:	003f0706 	br	49c88 <__alt_data_end+0xfffd7c88>
   4a06c:	da402a15 	stw	r9,168(sp)
   4a070:	dd402783 	ldbu	r21,158(sp)
   4a074:	4825883a 	mov	r18,r9
   4a078:	dcc02d15 	stw	r19,180(sp)
   4a07c:	d8003215 	stw	zero,200(sp)
   4a080:	d8003415 	stw	zero,208(sp)
   4a084:	0039bf06 	br	48784 <__alt_data_end+0xfffd6784>
   4a088:	483eb21e 	bne	r9,zero,49b54 <__alt_data_end+0xfffd7b54>
   4a08c:	9013883a 	mov	r9,r18
   4a090:	003eb006 	br	49b54 <__alt_data_end+0xfffd7b54>
   4a094:	d9002f17 	ldw	r4,188(sp)
   4a098:	b80b883a 	mov	r5,r23
   4a09c:	b00d883a 	mov	r6,r22
   4a0a0:	004e2c40 	call	4e2c4 <__ssprint_r>
   4a0a4:	1039531e 	bne	r2,zero,485f4 <__alt_data_end+0xfffd65f4>
   4a0a8:	dc002617 	ldw	r16,152(sp)
   4a0ac:	d8c02017 	ldw	r3,128(sp)
   4a0b0:	d8801f17 	ldw	r2,124(sp)
   4a0b4:	da000404 	addi	r8,sp,16
   4a0b8:	003e7106 	br	49a80 <__alt_data_end+0xfffd7a80>
   4a0bc:	00c00b44 	movi	r3,45
   4a0c0:	64a0003c 	xorhi	r18,r12,32768
   4a0c4:	d8c02a05 	stb	r3,168(sp)
   4a0c8:	003ea806 	br	49b6c <__alt_data_end+0xfffd7b6c>
   4a0cc:	4f000044 	addi	fp,r9,1
   4a0d0:	003ead06 	br	49b88 <__alt_data_end+0xfffd7b88>
   4a0d4:	d8c03417 	ldw	r3,208(sp)
   4a0d8:	00c0410e 	bge	zero,r3,4a1e0 <___svfprintf_internal_r+0x1f0c>
   4a0dc:	04800044 	movi	r18,1
   4a0e0:	dac03317 	ldw	r11,204(sp)
   4a0e4:	92e5883a 	add	r18,r18,r11
   4a0e8:	9005883a 	mov	r2,r18
   4a0ec:	903ee60e 	bge	r18,zero,49c88 <__alt_data_end+0xfffd7c88>
   4a0f0:	0005883a 	mov	r2,zero
   4a0f4:	003ee406 	br	49c88 <__alt_data_end+0xfffd7c88>
   4a0f8:	d8c02617 	ldw	r3,152(sp)
   4a0fc:	d8c03415 	stw	r3,208(sp)
   4a100:	00c0310e 	bge	zero,r3,4a1c8 <___svfprintf_internal_r+0x1ef4>
   4a104:	48001f1e 	bne	r9,zero,4a184 <___svfprintf_internal_r+0x1eb0>
   4a108:	8c40004c 	andi	r17,r17,1
   4a10c:	88001d1e 	bne	r17,zero,4a184 <___svfprintf_internal_r+0x1eb0>
   4a110:	1805883a 	mov	r2,r3
   4a114:	183edb0e 	bge	r3,zero,49c84 <__alt_data_end+0xfffd7c84>
   4a118:	0005883a 	mov	r2,zero
   4a11c:	003ed906 	br	49c84 <__alt_data_end+0xfffd7c84>
   4a120:	d8802117 	ldw	r2,132(sp)
   4a124:	003ec506 	br	49c3c <__alt_data_end+0xfffd7c3c>
   4a128:	d9003717 	ldw	r4,220(sp)
   4a12c:	900b883a 	mov	r5,r18
   4a130:	000d883a 	mov	r6,zero
   4a134:	000f883a 	mov	r7,zero
   4a138:	da004015 	stw	r8,256(sp)
   4a13c:	da403f15 	stw	r9,252(sp)
   4a140:	da803e15 	stw	r10,248(sp)
   4a144:	0046ba00 	call	46ba0 <__eqdf2>
   4a148:	da004017 	ldw	r8,256(sp)
   4a14c:	da403f17 	ldw	r9,252(sp)
   4a150:	da803e17 	ldw	r10,248(sp)
   4a154:	103f2c26 	beq	r2,zero,49e08 <__alt_data_end+0xfffd7e08>
   4a158:	00800044 	movi	r2,1
   4a15c:	1707c83a 	sub	r3,r2,fp
   4a160:	d8c02615 	stw	r3,152(sp)
   4a164:	003f2906 	br	49e0c <__alt_data_end+0xfffd7e0c>
   4a168:	db003417 	ldw	r12,208(sp)
   4a16c:	64800044 	addi	r18,r12,1
   4a170:	9005883a 	mov	r2,r18
   4a174:	903ec40e 	bge	r18,zero,49c88 <__alt_data_end+0xfffd7c88>
   4a178:	003fdd06 	br	4a0f0 <__alt_data_end+0xfffd80f0>
   4a17c:	0005883a 	mov	r2,zero
   4a180:	003f5c06 	br	49ef4 <__alt_data_end+0xfffd7ef4>
   4a184:	dac03417 	ldw	r11,208(sp)
   4a188:	4a400044 	addi	r9,r9,1
   4a18c:	5a65883a 	add	r18,r11,r9
   4a190:	9005883a 	mov	r2,r18
   4a194:	903ebc0e 	bge	r18,zero,49c88 <__alt_data_end+0xfffd7c88>
   4a198:	003fd506 	br	4a0f0 <__alt_data_end+0xfffd80f0>
   4a19c:	00800174 	movhi	r2,5
   4a1a0:	1092e184 	addi	r2,r2,19334
   4a1a4:	d8802b15 	stw	r2,172(sp)
   4a1a8:	003d2b06 	br	49658 <__alt_data_end+0xfffd7658>
   4a1ac:	00800c04 	movi	r2,48
   4a1b0:	e0c00c04 	addi	r3,fp,48
   4a1b4:	d8802345 	stb	r2,141(sp)
   4a1b8:	d8c02385 	stb	r3,142(sp)
   4a1bc:	d88023c4 	addi	r2,sp,143
   4a1c0:	dd4022c4 	addi	r21,sp,139
   4a1c4:	003f9e06 	br	4a040 <__alt_data_end+0xfffd8040>
   4a1c8:	4800081e 	bne	r9,zero,4a1ec <___svfprintf_internal_r+0x1f18>
   4a1cc:	8c40004c 	andi	r17,r17,1
   4a1d0:	8800061e 	bne	r17,zero,4a1ec <___svfprintf_internal_r+0x1f18>
   4a1d4:	00800044 	movi	r2,1
   4a1d8:	1025883a 	mov	r18,r2
   4a1dc:	003eaa06 	br	49c88 <__alt_data_end+0xfffd7c88>
   4a1e0:	04800084 	movi	r18,2
   4a1e4:	90e5c83a 	sub	r18,r18,r3
   4a1e8:	003fbd06 	br	4a0e0 <__alt_data_end+0xfffd80e0>
   4a1ec:	4c800084 	addi	r18,r9,2
   4a1f0:	9005883a 	mov	r2,r18
   4a1f4:	903ea40e 	bge	r18,zero,49c88 <__alt_data_end+0xfffd7c88>
   4a1f8:	003fbd06 	br	4a0f0 <__alt_data_end+0xfffd80f0>
   4a1fc:	dac02d17 	ldw	r11,180(sp)
   4a200:	5a400017 	ldw	r9,0(r11)
   4a204:	5ac00104 	addi	r11,r11,4
   4a208:	dac02d15 	stw	r11,180(sp)
   4a20c:	483e410e 	bge	r9,zero,49b14 <__alt_data_end+0xfffd7b14>
   4a210:	027fffc4 	movi	r9,-1
   4a214:	1c000047 	ldb	r16,1(r3)
   4a218:	00388406 	br	4842c <__alt_data_end+0xfffd642c>
   4a21c:	00800b44 	movi	r2,45
   4a220:	0739c83a 	sub	fp,zero,fp
   4a224:	d8802305 	stb	r2,140(sp)
   4a228:	003f5e06 	br	49fa4 <__alt_data_end+0xfffd7fa4>
   4a22c:	0005883a 	mov	r2,zero
   4a230:	003f8c06 	br	4a064 <__alt_data_end+0xfffd8064>
   4a234:	88a2703a 	and	r17,r17,r2
   4a238:	883f8826 	beq	r17,zero,4a05c <__alt_data_end+0xfffd805c>
   4a23c:	003f8606 	br	4a058 <__alt_data_end+0xfffd8058>
   4a240:	d8802344 	addi	r2,sp,141
   4a244:	003f7e06 	br	4a040 <__alt_data_end+0xfffd8040>
   4a248:	d8c02617 	ldw	r3,152(sp)
   4a24c:	003f4f06 	br	49f8c <__alt_data_end+0xfffd7f8c>
   4a250:	dac02f17 	ldw	r11,188(sp)
   4a254:	00800304 	movi	r2,12
   4a258:	58800015 	stw	r2,0(r11)
   4a25c:	00bfffc4 	movi	r2,-1
   4a260:	0038e806 	br	48604 <__alt_data_end+0xfffd6604>

0004a264 <quorem>:
   4a264:	defff704 	addi	sp,sp,-36
   4a268:	dc800215 	stw	r18,8(sp)
   4a26c:	20800417 	ldw	r2,16(r4)
   4a270:	2c800417 	ldw	r18,16(r5)
   4a274:	dfc00815 	stw	ra,32(sp)
   4a278:	ddc00715 	stw	r23,28(sp)
   4a27c:	dd800615 	stw	r22,24(sp)
   4a280:	dd400515 	stw	r21,20(sp)
   4a284:	dd000415 	stw	r20,16(sp)
   4a288:	dcc00315 	stw	r19,12(sp)
   4a28c:	dc400115 	stw	r17,4(sp)
   4a290:	dc000015 	stw	r16,0(sp)
   4a294:	14807116 	blt	r2,r18,4a45c <quorem+0x1f8>
   4a298:	94bfffc4 	addi	r18,r18,-1
   4a29c:	94ad883a 	add	r22,r18,r18
   4a2a0:	b5ad883a 	add	r22,r22,r22
   4a2a4:	2c400504 	addi	r17,r5,20
   4a2a8:	8da9883a 	add	r20,r17,r22
   4a2ac:	25400504 	addi	r21,r4,20
   4a2b0:	282f883a 	mov	r23,r5
   4a2b4:	adad883a 	add	r22,r21,r22
   4a2b8:	a1400017 	ldw	r5,0(r20)
   4a2bc:	2021883a 	mov	r16,r4
   4a2c0:	b1000017 	ldw	r4,0(r22)
   4a2c4:	29400044 	addi	r5,r5,1
   4a2c8:	0044bb00 	call	44bb0 <__udivsi3>
   4a2cc:	1027883a 	mov	r19,r2
   4a2d0:	10002c26 	beq	r2,zero,4a384 <quorem+0x120>
   4a2d4:	a813883a 	mov	r9,r21
   4a2d8:	8811883a 	mov	r8,r17
   4a2dc:	0009883a 	mov	r4,zero
   4a2e0:	000d883a 	mov	r6,zero
   4a2e4:	41c00017 	ldw	r7,0(r8)
   4a2e8:	49400017 	ldw	r5,0(r9)
   4a2ec:	42000104 	addi	r8,r8,4
   4a2f0:	38bfffcc 	andi	r2,r7,65535
   4a2f4:	14c5383a 	mul	r2,r2,r19
   4a2f8:	380ed43a 	srli	r7,r7,16
   4a2fc:	28ffffcc 	andi	r3,r5,65535
   4a300:	2085883a 	add	r2,r4,r2
   4a304:	1008d43a 	srli	r4,r2,16
   4a308:	3ccf383a 	mul	r7,r7,r19
   4a30c:	198d883a 	add	r6,r3,r6
   4a310:	10ffffcc 	andi	r3,r2,65535
   4a314:	30c7c83a 	sub	r3,r6,r3
   4a318:	280ad43a 	srli	r5,r5,16
   4a31c:	21c9883a 	add	r4,r4,r7
   4a320:	180dd43a 	srai	r6,r3,16
   4a324:	20bfffcc 	andi	r2,r4,65535
   4a328:	288bc83a 	sub	r5,r5,r2
   4a32c:	298b883a 	add	r5,r5,r6
   4a330:	280e943a 	slli	r7,r5,16
   4a334:	18ffffcc 	andi	r3,r3,65535
   4a338:	2008d43a 	srli	r4,r4,16
   4a33c:	38ceb03a 	or	r7,r7,r3
   4a340:	49c00015 	stw	r7,0(r9)
   4a344:	280dd43a 	srai	r6,r5,16
   4a348:	4a400104 	addi	r9,r9,4
   4a34c:	a23fe52e 	bgeu	r20,r8,4a2e4 <__alt_data_end+0xfffd82e4>
   4a350:	b0800017 	ldw	r2,0(r22)
   4a354:	10000b1e 	bne	r2,zero,4a384 <quorem+0x120>
   4a358:	b0bfff04 	addi	r2,r22,-4
   4a35c:	a880082e 	bgeu	r21,r2,4a380 <quorem+0x11c>
   4a360:	b0ffff17 	ldw	r3,-4(r22)
   4a364:	18000326 	beq	r3,zero,4a374 <quorem+0x110>
   4a368:	00000506 	br	4a380 <quorem+0x11c>
   4a36c:	10c00017 	ldw	r3,0(r2)
   4a370:	1800031e 	bne	r3,zero,4a380 <quorem+0x11c>
   4a374:	10bfff04 	addi	r2,r2,-4
   4a378:	94bfffc4 	addi	r18,r18,-1
   4a37c:	a8bffb36 	bltu	r21,r2,4a36c <__alt_data_end+0xfffd836c>
   4a380:	84800415 	stw	r18,16(r16)
   4a384:	8009883a 	mov	r4,r16
   4a388:	b80b883a 	mov	r5,r23
   4a38c:	004d5240 	call	4d524 <__mcmp>
   4a390:	10002616 	blt	r2,zero,4a42c <quorem+0x1c8>
   4a394:	9cc00044 	addi	r19,r19,1
   4a398:	a80d883a 	mov	r6,r21
   4a39c:	000b883a 	mov	r5,zero
   4a3a0:	31000017 	ldw	r4,0(r6)
   4a3a4:	88800017 	ldw	r2,0(r17)
   4a3a8:	31800104 	addi	r6,r6,4
   4a3ac:	20ffffcc 	andi	r3,r4,65535
   4a3b0:	194b883a 	add	r5,r3,r5
   4a3b4:	10ffffcc 	andi	r3,r2,65535
   4a3b8:	28c7c83a 	sub	r3,r5,r3
   4a3bc:	1004d43a 	srli	r2,r2,16
   4a3c0:	2008d43a 	srli	r4,r4,16
   4a3c4:	180bd43a 	srai	r5,r3,16
   4a3c8:	18ffffcc 	andi	r3,r3,65535
   4a3cc:	2089c83a 	sub	r4,r4,r2
   4a3d0:	2149883a 	add	r4,r4,r5
   4a3d4:	2004943a 	slli	r2,r4,16
   4a3d8:	8c400104 	addi	r17,r17,4
   4a3dc:	200bd43a 	srai	r5,r4,16
   4a3e0:	10c6b03a 	or	r3,r2,r3
   4a3e4:	30ffff15 	stw	r3,-4(r6)
   4a3e8:	a47fed2e 	bgeu	r20,r17,4a3a0 <__alt_data_end+0xfffd83a0>
   4a3ec:	9485883a 	add	r2,r18,r18
   4a3f0:	1085883a 	add	r2,r2,r2
   4a3f4:	a887883a 	add	r3,r21,r2
   4a3f8:	18800017 	ldw	r2,0(r3)
   4a3fc:	10000b1e 	bne	r2,zero,4a42c <quorem+0x1c8>
   4a400:	18bfff04 	addi	r2,r3,-4
   4a404:	a880082e 	bgeu	r21,r2,4a428 <quorem+0x1c4>
   4a408:	18ffff17 	ldw	r3,-4(r3)
   4a40c:	18000326 	beq	r3,zero,4a41c <quorem+0x1b8>
   4a410:	00000506 	br	4a428 <quorem+0x1c4>
   4a414:	10c00017 	ldw	r3,0(r2)
   4a418:	1800031e 	bne	r3,zero,4a428 <quorem+0x1c4>
   4a41c:	10bfff04 	addi	r2,r2,-4
   4a420:	94bfffc4 	addi	r18,r18,-1
   4a424:	a8bffb36 	bltu	r21,r2,4a414 <__alt_data_end+0xfffd8414>
   4a428:	84800415 	stw	r18,16(r16)
   4a42c:	9805883a 	mov	r2,r19
   4a430:	dfc00817 	ldw	ra,32(sp)
   4a434:	ddc00717 	ldw	r23,28(sp)
   4a438:	dd800617 	ldw	r22,24(sp)
   4a43c:	dd400517 	ldw	r21,20(sp)
   4a440:	dd000417 	ldw	r20,16(sp)
   4a444:	dcc00317 	ldw	r19,12(sp)
   4a448:	dc800217 	ldw	r18,8(sp)
   4a44c:	dc400117 	ldw	r17,4(sp)
   4a450:	dc000017 	ldw	r16,0(sp)
   4a454:	dec00904 	addi	sp,sp,36
   4a458:	f800283a 	ret
   4a45c:	0005883a 	mov	r2,zero
   4a460:	003ff306 	br	4a430 <__alt_data_end+0xfffd8430>

0004a464 <_dtoa_r>:
   4a464:	20801017 	ldw	r2,64(r4)
   4a468:	deffde04 	addi	sp,sp,-136
   4a46c:	dd401d15 	stw	r21,116(sp)
   4a470:	dcc01b15 	stw	r19,108(sp)
   4a474:	dc801a15 	stw	r18,104(sp)
   4a478:	dc401915 	stw	r17,100(sp)
   4a47c:	dc001815 	stw	r16,96(sp)
   4a480:	dfc02115 	stw	ra,132(sp)
   4a484:	df002015 	stw	fp,128(sp)
   4a488:	ddc01f15 	stw	r23,124(sp)
   4a48c:	dd801e15 	stw	r22,120(sp)
   4a490:	dd001c15 	stw	r20,112(sp)
   4a494:	d9c00315 	stw	r7,12(sp)
   4a498:	2021883a 	mov	r16,r4
   4a49c:	302b883a 	mov	r21,r6
   4a4a0:	2825883a 	mov	r18,r5
   4a4a4:	dc402417 	ldw	r17,144(sp)
   4a4a8:	3027883a 	mov	r19,r6
   4a4ac:	10000826 	beq	r2,zero,4a4d0 <_dtoa_r+0x6c>
   4a4b0:	21801117 	ldw	r6,68(r4)
   4a4b4:	00c00044 	movi	r3,1
   4a4b8:	100b883a 	mov	r5,r2
   4a4bc:	1986983a 	sll	r3,r3,r6
   4a4c0:	11800115 	stw	r6,4(r2)
   4a4c4:	10c00215 	stw	r3,8(r2)
   4a4c8:	004ccf80 	call	4ccf8 <_Bfree>
   4a4cc:	80001015 	stw	zero,64(r16)
   4a4d0:	a8002d16 	blt	r21,zero,4a588 <_dtoa_r+0x124>
   4a4d4:	88000015 	stw	zero,0(r17)
   4a4d8:	a8dffc2c 	andhi	r3,r21,32752
   4a4dc:	009ffc34 	movhi	r2,32752
   4a4e0:	18801b26 	beq	r3,r2,4a550 <_dtoa_r+0xec>
   4a4e4:	9009883a 	mov	r4,r18
   4a4e8:	980b883a 	mov	r5,r19
   4a4ec:	000d883a 	mov	r6,zero
   4a4f0:	000f883a 	mov	r7,zero
   4a4f4:	0046ba00 	call	46ba0 <__eqdf2>
   4a4f8:	10002a1e 	bne	r2,zero,4a5a4 <_dtoa_r+0x140>
   4a4fc:	d8c02317 	ldw	r3,140(sp)
   4a500:	d9002517 	ldw	r4,148(sp)
   4a504:	00800044 	movi	r2,1
   4a508:	18800015 	stw	r2,0(r3)
   4a50c:	2001a226 	beq	r4,zero,4ab98 <_dtoa_r+0x734>
   4a510:	00800174 	movhi	r2,5
   4a514:	1092e144 	addi	r2,r2,19333
   4a518:	20800015 	stw	r2,0(r4)
   4a51c:	10bfffc4 	addi	r2,r2,-1
   4a520:	dfc02117 	ldw	ra,132(sp)
   4a524:	df002017 	ldw	fp,128(sp)
   4a528:	ddc01f17 	ldw	r23,124(sp)
   4a52c:	dd801e17 	ldw	r22,120(sp)
   4a530:	dd401d17 	ldw	r21,116(sp)
   4a534:	dd001c17 	ldw	r20,112(sp)
   4a538:	dcc01b17 	ldw	r19,108(sp)
   4a53c:	dc801a17 	ldw	r18,104(sp)
   4a540:	dc401917 	ldw	r17,100(sp)
   4a544:	dc001817 	ldw	r16,96(sp)
   4a548:	dec02204 	addi	sp,sp,136
   4a54c:	f800283a 	ret
   4a550:	d8c02317 	ldw	r3,140(sp)
   4a554:	0089c3c4 	movi	r2,9999
   4a558:	18800015 	stw	r2,0(r3)
   4a55c:	90017c26 	beq	r18,zero,4ab50 <_dtoa_r+0x6ec>
   4a560:	00800174 	movhi	r2,5
   4a564:	1092ed04 	addi	r2,r2,19380
   4a568:	d9002517 	ldw	r4,148(sp)
   4a56c:	203fec26 	beq	r4,zero,4a520 <__alt_data_end+0xfffd8520>
   4a570:	10c000c7 	ldb	r3,3(r2)
   4a574:	18017d1e 	bne	r3,zero,4ab6c <_dtoa_r+0x708>
   4a578:	10c000c4 	addi	r3,r2,3
   4a57c:	d9802517 	ldw	r6,148(sp)
   4a580:	30c00015 	stw	r3,0(r6)
   4a584:	003fe606 	br	4a520 <__alt_data_end+0xfffd8520>
   4a588:	04e00034 	movhi	r19,32768
   4a58c:	9cffffc4 	addi	r19,r19,-1
   4a590:	00800044 	movi	r2,1
   4a594:	ace6703a 	and	r19,r21,r19
   4a598:	88800015 	stw	r2,0(r17)
   4a59c:	982b883a 	mov	r21,r19
   4a5a0:	003fcd06 	br	4a4d8 <__alt_data_end+0xfffd84d8>
   4a5a4:	d8800204 	addi	r2,sp,8
   4a5a8:	a822d53a 	srli	r17,r21,20
   4a5ac:	d8800015 	stw	r2,0(sp)
   4a5b0:	8009883a 	mov	r4,r16
   4a5b4:	900b883a 	mov	r5,r18
   4a5b8:	980d883a 	mov	r6,r19
   4a5bc:	d9c00104 	addi	r7,sp,4
   4a5c0:	004d8980 	call	4d898 <__d2b>
   4a5c4:	1039883a 	mov	fp,r2
   4a5c8:	88016a1e 	bne	r17,zero,4ab74 <_dtoa_r+0x710>
   4a5cc:	dd000217 	ldw	r20,8(sp)
   4a5d0:	dc400117 	ldw	r17,4(sp)
   4a5d4:	00befbc4 	movi	r2,-1041
   4a5d8:	a463883a 	add	r17,r20,r17
   4a5dc:	8882ea16 	blt	r17,r2,4b188 <_dtoa_r+0xd24>
   4a5e0:	00bf0384 	movi	r2,-1010
   4a5e4:	1445c83a 	sub	r2,r2,r17
   4a5e8:	89010484 	addi	r4,r17,1042
   4a5ec:	a8aa983a 	sll	r21,r21,r2
   4a5f0:	9108d83a 	srl	r4,r18,r4
   4a5f4:	a908b03a 	or	r4,r21,r4
   4a5f8:	00516100 	call	51610 <__floatunsidf>
   4a5fc:	017f8434 	movhi	r5,65040
   4a600:	01800044 	movi	r6,1
   4a604:	1009883a 	mov	r4,r2
   4a608:	194b883a 	add	r5,r3,r5
   4a60c:	8c7fffc4 	addi	r17,r17,-1
   4a610:	d9800f15 	stw	r6,60(sp)
   4a614:	000d883a 	mov	r6,zero
   4a618:	01cffe34 	movhi	r7,16376
   4a61c:	00474280 	call	47428 <__subdf3>
   4a620:	0198dbf4 	movhi	r6,25455
   4a624:	01cff4f4 	movhi	r7,16339
   4a628:	1009883a 	mov	r4,r2
   4a62c:	180b883a 	mov	r5,r3
   4a630:	3190d844 	addi	r6,r6,17249
   4a634:	39e1e9c4 	addi	r7,r7,-30809
   4a638:	0046d040 	call	46d04 <__muldf3>
   4a63c:	01a2d874 	movhi	r6,35681
   4a640:	01cff1f4 	movhi	r7,16327
   4a644:	180b883a 	mov	r5,r3
   4a648:	31b22cc4 	addi	r6,r6,-14157
   4a64c:	39e28a04 	addi	r7,r7,-30168
   4a650:	1009883a 	mov	r4,r2
   4a654:	0045a380 	call	45a38 <__adddf3>
   4a658:	8809883a 	mov	r4,r17
   4a65c:	102d883a 	mov	r22,r2
   4a660:	182b883a 	mov	r21,r3
   4a664:	0047d800 	call	47d80 <__floatsidf>
   4a668:	019427f4 	movhi	r6,20639
   4a66c:	01cff4f4 	movhi	r7,16339
   4a670:	1009883a 	mov	r4,r2
   4a674:	180b883a 	mov	r5,r3
   4a678:	319e7ec4 	addi	r6,r6,31227
   4a67c:	39d104c4 	addi	r7,r7,17427
   4a680:	0046d040 	call	46d04 <__muldf3>
   4a684:	b009883a 	mov	r4,r22
   4a688:	a80b883a 	mov	r5,r21
   4a68c:	100d883a 	mov	r6,r2
   4a690:	180f883a 	mov	r7,r3
   4a694:	0045a380 	call	45a38 <__adddf3>
   4a698:	1009883a 	mov	r4,r2
   4a69c:	180b883a 	mov	r5,r3
   4a6a0:	102d883a 	mov	r22,r2
   4a6a4:	182b883a 	mov	r21,r3
   4a6a8:	0047cf80 	call	47cf8 <__fixdfsi>
   4a6ac:	b009883a 	mov	r4,r22
   4a6b0:	a80b883a 	mov	r5,r21
   4a6b4:	000d883a 	mov	r6,zero
   4a6b8:	000f883a 	mov	r7,zero
   4a6bc:	d8800515 	stw	r2,20(sp)
   4a6c0:	00515300 	call	51530 <__ledf2>
   4a6c4:	10023116 	blt	r2,zero,4af8c <_dtoa_r+0xb28>
   4a6c8:	d8c00517 	ldw	r3,20(sp)
   4a6cc:	00800584 	movi	r2,22
   4a6d0:	10c21f36 	bltu	r2,r3,4af50 <_dtoa_r+0xaec>
   4a6d4:	180490fa 	slli	r2,r3,3
   4a6d8:	00c00174 	movhi	r3,5
   4a6dc:	18d30904 	addi	r3,r3,19492
   4a6e0:	1885883a 	add	r2,r3,r2
   4a6e4:	11000017 	ldw	r4,0(r2)
   4a6e8:	11400117 	ldw	r5,4(r2)
   4a6ec:	900d883a 	mov	r6,r18
   4a6f0:	980f883a 	mov	r7,r19
   4a6f4:	0046c240 	call	46c24 <__gedf2>
   4a6f8:	0082a70e 	bge	zero,r2,4b198 <_dtoa_r+0xd34>
   4a6fc:	d9000517 	ldw	r4,20(sp)
   4a700:	d8000d15 	stw	zero,52(sp)
   4a704:	213fffc4 	addi	r4,r4,-1
   4a708:	d9000515 	stw	r4,20(sp)
   4a70c:	a463c83a 	sub	r17,r20,r17
   4a710:	8dbfffc4 	addi	r22,r17,-1
   4a714:	b0021916 	blt	r22,zero,4af7c <_dtoa_r+0xb18>
   4a718:	d8000815 	stw	zero,32(sp)
   4a71c:	d8800517 	ldw	r2,20(sp)
   4a720:	10020e16 	blt	r2,zero,4af5c <_dtoa_r+0xaf8>
   4a724:	b0ad883a 	add	r22,r22,r2
   4a728:	d8800a15 	stw	r2,40(sp)
   4a72c:	d8000915 	stw	zero,36(sp)
   4a730:	d8c00317 	ldw	r3,12(sp)
   4a734:	00800244 	movi	r2,9
   4a738:	10c11a36 	bltu	r2,r3,4aba4 <_dtoa_r+0x740>
   4a73c:	00800144 	movi	r2,5
   4a740:	10c4fc0e 	bge	r2,r3,4bb34 <_dtoa_r+0x16d0>
   4a744:	18ffff04 	addi	r3,r3,-4
   4a748:	d8c00315 	stw	r3,12(sp)
   4a74c:	0029883a 	mov	r20,zero
   4a750:	d9800317 	ldw	r6,12(sp)
   4a754:	008000c4 	movi	r2,3
   4a758:	3083bd26 	beq	r6,r2,4b650 <_dtoa_r+0x11ec>
   4a75c:	1183670e 	bge	r2,r6,4b4fc <_dtoa_r+0x1098>
   4a760:	d8c00317 	ldw	r3,12(sp)
   4a764:	00800104 	movi	r2,4
   4a768:	1882e726 	beq	r3,r2,4b308 <_dtoa_r+0xea4>
   4a76c:	00800144 	movi	r2,5
   4a770:	1884f21e 	bne	r3,r2,4bb3c <_dtoa_r+0x16d8>
   4a774:	00800044 	movi	r2,1
   4a778:	d8800b15 	stw	r2,44(sp)
   4a77c:	d8c02217 	ldw	r3,136(sp)
   4a780:	d9000517 	ldw	r4,20(sp)
   4a784:	1907883a 	add	r3,r3,r4
   4a788:	19800044 	addi	r6,r3,1
   4a78c:	d8c00c15 	stw	r3,48(sp)
   4a790:	d9800615 	stw	r6,24(sp)
   4a794:	0183c30e 	bge	zero,r6,4b6a4 <_dtoa_r+0x1240>
   4a798:	d9800617 	ldw	r6,24(sp)
   4a79c:	3023883a 	mov	r17,r6
   4a7a0:	80001115 	stw	zero,68(r16)
   4a7a4:	008005c4 	movi	r2,23
   4a7a8:	1184f62e 	bgeu	r2,r6,4bb84 <_dtoa_r+0x1720>
   4a7ac:	00c00044 	movi	r3,1
   4a7b0:	00800104 	movi	r2,4
   4a7b4:	1085883a 	add	r2,r2,r2
   4a7b8:	11000504 	addi	r4,r2,20
   4a7bc:	180b883a 	mov	r5,r3
   4a7c0:	18c00044 	addi	r3,r3,1
   4a7c4:	313ffb2e 	bgeu	r6,r4,4a7b4 <__alt_data_end+0xfffd87b4>
   4a7c8:	81401115 	stw	r5,68(r16)
   4a7cc:	8009883a 	mov	r4,r16
   4a7d0:	004cc500 	call	4cc50 <_Balloc>
   4a7d4:	d8800715 	stw	r2,28(sp)
   4a7d8:	80801015 	stw	r2,64(r16)
   4a7dc:	00800384 	movi	r2,14
   4a7e0:	1440fd36 	bltu	r2,r17,4abd8 <_dtoa_r+0x774>
   4a7e4:	a000fc26 	beq	r20,zero,4abd8 <_dtoa_r+0x774>
   4a7e8:	d8800517 	ldw	r2,20(sp)
   4a7ec:	0083b90e 	bge	zero,r2,4b6d4 <_dtoa_r+0x1270>
   4a7f0:	d8c00517 	ldw	r3,20(sp)
   4a7f4:	108003cc 	andi	r2,r2,15
   4a7f8:	100490fa 	slli	r2,r2,3
   4a7fc:	182fd13a 	srai	r23,r3,4
   4a800:	00c00174 	movhi	r3,5
   4a804:	18d30904 	addi	r3,r3,19492
   4a808:	1885883a 	add	r2,r3,r2
   4a80c:	b8c0040c 	andi	r3,r23,16
   4a810:	12c00017 	ldw	r11,0(r2)
   4a814:	12800117 	ldw	r10,4(r2)
   4a818:	18039726 	beq	r3,zero,4b678 <_dtoa_r+0x1214>
   4a81c:	00800174 	movhi	r2,5
   4a820:	1092ff04 	addi	r2,r2,19452
   4a824:	11800817 	ldw	r6,32(r2)
   4a828:	11c00917 	ldw	r7,36(r2)
   4a82c:	9009883a 	mov	r4,r18
   4a830:	980b883a 	mov	r5,r19
   4a834:	da801615 	stw	r10,88(sp)
   4a838:	dac01515 	stw	r11,84(sp)
   4a83c:	00462d40 	call	462d4 <__divdf3>
   4a840:	da801617 	ldw	r10,88(sp)
   4a844:	dac01517 	ldw	r11,84(sp)
   4a848:	bdc003cc 	andi	r23,r23,15
   4a84c:	044000c4 	movi	r17,3
   4a850:	d8800e15 	stw	r2,56(sp)
   4a854:	182b883a 	mov	r21,r3
   4a858:	b8001126 	beq	r23,zero,4a8a0 <_dtoa_r+0x43c>
   4a85c:	05000174 	movhi	r20,5
   4a860:	a512ff04 	addi	r20,r20,19452
   4a864:	5805883a 	mov	r2,r11
   4a868:	5007883a 	mov	r3,r10
   4a86c:	b980004c 	andi	r6,r23,1
   4a870:	1009883a 	mov	r4,r2
   4a874:	b82fd07a 	srai	r23,r23,1
   4a878:	180b883a 	mov	r5,r3
   4a87c:	30000426 	beq	r6,zero,4a890 <_dtoa_r+0x42c>
   4a880:	a1800017 	ldw	r6,0(r20)
   4a884:	a1c00117 	ldw	r7,4(r20)
   4a888:	8c400044 	addi	r17,r17,1
   4a88c:	0046d040 	call	46d04 <__muldf3>
   4a890:	a5000204 	addi	r20,r20,8
   4a894:	b83ff51e 	bne	r23,zero,4a86c <__alt_data_end+0xfffd886c>
   4a898:	1017883a 	mov	r11,r2
   4a89c:	1815883a 	mov	r10,r3
   4a8a0:	d9000e17 	ldw	r4,56(sp)
   4a8a4:	a80b883a 	mov	r5,r21
   4a8a8:	580d883a 	mov	r6,r11
   4a8ac:	500f883a 	mov	r7,r10
   4a8b0:	00462d40 	call	462d4 <__divdf3>
   4a8b4:	1029883a 	mov	r20,r2
   4a8b8:	182b883a 	mov	r21,r3
   4a8bc:	d9800d17 	ldw	r6,52(sp)
   4a8c0:	30000626 	beq	r6,zero,4a8dc <_dtoa_r+0x478>
   4a8c4:	a009883a 	mov	r4,r20
   4a8c8:	a80b883a 	mov	r5,r21
   4a8cc:	000d883a 	mov	r6,zero
   4a8d0:	01cffc34 	movhi	r7,16368
   4a8d4:	00515300 	call	51530 <__ledf2>
   4a8d8:	10043216 	blt	r2,zero,4b9a4 <_dtoa_r+0x1540>
   4a8dc:	8809883a 	mov	r4,r17
   4a8e0:	0047d800 	call	47d80 <__floatsidf>
   4a8e4:	1009883a 	mov	r4,r2
   4a8e8:	180b883a 	mov	r5,r3
   4a8ec:	a00d883a 	mov	r6,r20
   4a8f0:	a80f883a 	mov	r7,r21
   4a8f4:	0046d040 	call	46d04 <__muldf3>
   4a8f8:	000d883a 	mov	r6,zero
   4a8fc:	1009883a 	mov	r4,r2
   4a900:	180b883a 	mov	r5,r3
   4a904:	01d00734 	movhi	r7,16412
   4a908:	0045a380 	call	45a38 <__adddf3>
   4a90c:	1023883a 	mov	r17,r2
   4a910:	d9800617 	ldw	r6,24(sp)
   4a914:	00bf3034 	movhi	r2,64704
   4a918:	1885883a 	add	r2,r3,r2
   4a91c:	d8800e15 	stw	r2,56(sp)
   4a920:	30032e26 	beq	r6,zero,4b5dc <_dtoa_r+0x1178>
   4a924:	d8c00517 	ldw	r3,20(sp)
   4a928:	da800617 	ldw	r10,24(sp)
   4a92c:	d8c01215 	stw	r3,72(sp)
   4a930:	d9000b17 	ldw	r4,44(sp)
   4a934:	2003b026 	beq	r4,zero,4b7f8 <_dtoa_r+0x1394>
   4a938:	50bfffc4 	addi	r2,r10,-1
   4a93c:	100490fa 	slli	r2,r2,3
   4a940:	00c00174 	movhi	r3,5
   4a944:	18d30904 	addi	r3,r3,19492
   4a948:	1885883a 	add	r2,r3,r2
   4a94c:	11800017 	ldw	r6,0(r2)
   4a950:	11c00117 	ldw	r7,4(r2)
   4a954:	d8800717 	ldw	r2,28(sp)
   4a958:	0009883a 	mov	r4,zero
   4a95c:	014ff834 	movhi	r5,16352
   4a960:	da801615 	stw	r10,88(sp)
   4a964:	15c00044 	addi	r23,r2,1
   4a968:	00462d40 	call	462d4 <__divdf3>
   4a96c:	d9c00e17 	ldw	r7,56(sp)
   4a970:	880d883a 	mov	r6,r17
   4a974:	1009883a 	mov	r4,r2
   4a978:	180b883a 	mov	r5,r3
   4a97c:	00474280 	call	47428 <__subdf3>
   4a980:	a80b883a 	mov	r5,r21
   4a984:	a009883a 	mov	r4,r20
   4a988:	d8c01015 	stw	r3,64(sp)
   4a98c:	d8800e15 	stw	r2,56(sp)
   4a990:	0047cf80 	call	47cf8 <__fixdfsi>
   4a994:	1009883a 	mov	r4,r2
   4a998:	d8801715 	stw	r2,92(sp)
   4a99c:	0047d800 	call	47d80 <__floatsidf>
   4a9a0:	a009883a 	mov	r4,r20
   4a9a4:	a80b883a 	mov	r5,r21
   4a9a8:	100d883a 	mov	r6,r2
   4a9ac:	180f883a 	mov	r7,r3
   4a9b0:	00474280 	call	47428 <__subdf3>
   4a9b4:	da001717 	ldw	r8,92(sp)
   4a9b8:	1829883a 	mov	r20,r3
   4a9bc:	d8c00717 	ldw	r3,28(sp)
   4a9c0:	d9000e17 	ldw	r4,56(sp)
   4a9c4:	d9401017 	ldw	r5,64(sp)
   4a9c8:	42000c04 	addi	r8,r8,48
   4a9cc:	1023883a 	mov	r17,r2
   4a9d0:	1a000005 	stb	r8,0(r3)
   4a9d4:	880d883a 	mov	r6,r17
   4a9d8:	a00f883a 	mov	r7,r20
   4a9dc:	402b883a 	mov	r21,r8
   4a9e0:	0046c240 	call	46c24 <__gedf2>
   4a9e4:	00844516 	blt	zero,r2,4bafc <_dtoa_r+0x1698>
   4a9e8:	0009883a 	mov	r4,zero
   4a9ec:	014ffc34 	movhi	r5,16368
   4a9f0:	880d883a 	mov	r6,r17
   4a9f4:	a00f883a 	mov	r7,r20
   4a9f8:	00474280 	call	47428 <__subdf3>
   4a9fc:	d9000e17 	ldw	r4,56(sp)
   4aa00:	d9401017 	ldw	r5,64(sp)
   4aa04:	100d883a 	mov	r6,r2
   4aa08:	180f883a 	mov	r7,r3
   4aa0c:	0046c240 	call	46c24 <__gedf2>
   4aa10:	da801617 	ldw	r10,88(sp)
   4aa14:	00843616 	blt	zero,r2,4baf0 <_dtoa_r+0x168c>
   4aa18:	00800044 	movi	r2,1
   4aa1c:	12806e0e 	bge	r2,r10,4abd8 <_dtoa_r+0x774>
   4aa20:	d9000717 	ldw	r4,28(sp)
   4aa24:	dd801315 	stw	r22,76(sp)
   4aa28:	dc001115 	stw	r16,68(sp)
   4aa2c:	2295883a 	add	r10,r4,r10
   4aa30:	dcc01415 	stw	r19,80(sp)
   4aa34:	502d883a 	mov	r22,r10
   4aa38:	dcc01017 	ldw	r19,64(sp)
   4aa3c:	b821883a 	mov	r16,r23
   4aa40:	dc801015 	stw	r18,64(sp)
   4aa44:	dc800e17 	ldw	r18,56(sp)
   4aa48:	00000906 	br	4aa70 <_dtoa_r+0x60c>
   4aa4c:	00474280 	call	47428 <__subdf3>
   4aa50:	1009883a 	mov	r4,r2
   4aa54:	180b883a 	mov	r5,r3
   4aa58:	900d883a 	mov	r6,r18
   4aa5c:	980f883a 	mov	r7,r19
   4aa60:	00515300 	call	51530 <__ledf2>
   4aa64:	10040e16 	blt	r2,zero,4baa0 <_dtoa_r+0x163c>
   4aa68:	b821883a 	mov	r16,r23
   4aa6c:	bd841026 	beq	r23,r22,4bab0 <_dtoa_r+0x164c>
   4aa70:	9009883a 	mov	r4,r18
   4aa74:	980b883a 	mov	r5,r19
   4aa78:	000d883a 	mov	r6,zero
   4aa7c:	01d00934 	movhi	r7,16420
   4aa80:	0046d040 	call	46d04 <__muldf3>
   4aa84:	000d883a 	mov	r6,zero
   4aa88:	01d00934 	movhi	r7,16420
   4aa8c:	8809883a 	mov	r4,r17
   4aa90:	a00b883a 	mov	r5,r20
   4aa94:	1025883a 	mov	r18,r2
   4aa98:	1827883a 	mov	r19,r3
   4aa9c:	0046d040 	call	46d04 <__muldf3>
   4aaa0:	180b883a 	mov	r5,r3
   4aaa4:	1009883a 	mov	r4,r2
   4aaa8:	1823883a 	mov	r17,r3
   4aaac:	1029883a 	mov	r20,r2
   4aab0:	0047cf80 	call	47cf8 <__fixdfsi>
   4aab4:	1009883a 	mov	r4,r2
   4aab8:	102b883a 	mov	r21,r2
   4aabc:	0047d800 	call	47d80 <__floatsidf>
   4aac0:	a009883a 	mov	r4,r20
   4aac4:	880b883a 	mov	r5,r17
   4aac8:	100d883a 	mov	r6,r2
   4aacc:	180f883a 	mov	r7,r3
   4aad0:	00474280 	call	47428 <__subdf3>
   4aad4:	ad400c04 	addi	r21,r21,48
   4aad8:	1009883a 	mov	r4,r2
   4aadc:	180b883a 	mov	r5,r3
   4aae0:	900d883a 	mov	r6,r18
   4aae4:	980f883a 	mov	r7,r19
   4aae8:	85400005 	stb	r21,0(r16)
   4aaec:	1023883a 	mov	r17,r2
   4aaf0:	1829883a 	mov	r20,r3
   4aaf4:	00515300 	call	51530 <__ledf2>
   4aaf8:	bdc00044 	addi	r23,r23,1
   4aafc:	0009883a 	mov	r4,zero
   4ab00:	014ffc34 	movhi	r5,16368
   4ab04:	880d883a 	mov	r6,r17
   4ab08:	a00f883a 	mov	r7,r20
   4ab0c:	103fcf0e 	bge	r2,zero,4aa4c <__alt_data_end+0xfffd8a4c>
   4ab10:	d9801217 	ldw	r6,72(sp)
   4ab14:	dc001117 	ldw	r16,68(sp)
   4ab18:	d9800515 	stw	r6,20(sp)
   4ab1c:	8009883a 	mov	r4,r16
   4ab20:	e00b883a 	mov	r5,fp
   4ab24:	004ccf80 	call	4ccf8 <_Bfree>
   4ab28:	d8c00517 	ldw	r3,20(sp)
   4ab2c:	d9002317 	ldw	r4,140(sp)
   4ab30:	d9802517 	ldw	r6,148(sp)
   4ab34:	b8000005 	stb	zero,0(r23)
   4ab38:	18800044 	addi	r2,r3,1
   4ab3c:	20800015 	stw	r2,0(r4)
   4ab40:	30027226 	beq	r6,zero,4b50c <_dtoa_r+0x10a8>
   4ab44:	35c00015 	stw	r23,0(r6)
   4ab48:	d8800717 	ldw	r2,28(sp)
   4ab4c:	003e7406 	br	4a520 <__alt_data_end+0xfffd8520>
   4ab50:	00800434 	movhi	r2,16
   4ab54:	10bfffc4 	addi	r2,r2,-1
   4ab58:	a8aa703a 	and	r21,r21,r2
   4ab5c:	a83e801e 	bne	r21,zero,4a560 <__alt_data_end+0xfffd8560>
   4ab60:	00800174 	movhi	r2,5
   4ab64:	1092ea04 	addi	r2,r2,19368
   4ab68:	003e7f06 	br	4a568 <__alt_data_end+0xfffd8568>
   4ab6c:	10c00204 	addi	r3,r2,8
   4ab70:	003e8206 	br	4a57c <__alt_data_end+0xfffd857c>
   4ab74:	01400434 	movhi	r5,16
   4ab78:	297fffc4 	addi	r5,r5,-1
   4ab7c:	994a703a 	and	r5,r19,r5
   4ab80:	9009883a 	mov	r4,r18
   4ab84:	8c7f0044 	addi	r17,r17,-1023
   4ab88:	294ffc34 	orhi	r5,r5,16368
   4ab8c:	dd000217 	ldw	r20,8(sp)
   4ab90:	d8000f15 	stw	zero,60(sp)
   4ab94:	003e9f06 	br	4a614 <__alt_data_end+0xfffd8614>
   4ab98:	00800174 	movhi	r2,5
   4ab9c:	1092e104 	addi	r2,r2,19332
   4aba0:	003e5f06 	br	4a520 <__alt_data_end+0xfffd8520>
   4aba4:	80001115 	stw	zero,68(r16)
   4aba8:	8009883a 	mov	r4,r16
   4abac:	000b883a 	mov	r5,zero
   4abb0:	004cc500 	call	4cc50 <_Balloc>
   4abb4:	01bfffc4 	movi	r6,-1
   4abb8:	d8800715 	stw	r2,28(sp)
   4abbc:	80801015 	stw	r2,64(r16)
   4abc0:	00800044 	movi	r2,1
   4abc4:	d9800c15 	stw	r6,48(sp)
   4abc8:	d8800b15 	stw	r2,44(sp)
   4abcc:	d9800615 	stw	r6,24(sp)
   4abd0:	d8002215 	stw	zero,136(sp)
   4abd4:	d8000315 	stw	zero,12(sp)
   4abd8:	d8800117 	ldw	r2,4(sp)
   4abdc:	10008e16 	blt	r2,zero,4ae18 <_dtoa_r+0x9b4>
   4abe0:	d9000517 	ldw	r4,20(sp)
   4abe4:	00c00384 	movi	r3,14
   4abe8:	19008b16 	blt	r3,r4,4ae18 <_dtoa_r+0x9b4>
   4abec:	200490fa 	slli	r2,r4,3
   4abf0:	00c00174 	movhi	r3,5
   4abf4:	d9802217 	ldw	r6,136(sp)
   4abf8:	18d30904 	addi	r3,r3,19492
   4abfc:	1885883a 	add	r2,r3,r2
   4ac00:	14400017 	ldw	r17,0(r2)
   4ac04:	15000117 	ldw	r20,4(r2)
   4ac08:	3001c716 	blt	r6,zero,4b328 <_dtoa_r+0xec4>
   4ac0c:	880d883a 	mov	r6,r17
   4ac10:	a00f883a 	mov	r7,r20
   4ac14:	9009883a 	mov	r4,r18
   4ac18:	980b883a 	mov	r5,r19
   4ac1c:	00462d40 	call	462d4 <__divdf3>
   4ac20:	180b883a 	mov	r5,r3
   4ac24:	1009883a 	mov	r4,r2
   4ac28:	0047cf80 	call	47cf8 <__fixdfsi>
   4ac2c:	1009883a 	mov	r4,r2
   4ac30:	102d883a 	mov	r22,r2
   4ac34:	0047d800 	call	47d80 <__floatsidf>
   4ac38:	1009883a 	mov	r4,r2
   4ac3c:	180b883a 	mov	r5,r3
   4ac40:	880d883a 	mov	r6,r17
   4ac44:	a00f883a 	mov	r7,r20
   4ac48:	0046d040 	call	46d04 <__muldf3>
   4ac4c:	9009883a 	mov	r4,r18
   4ac50:	980b883a 	mov	r5,r19
   4ac54:	100d883a 	mov	r6,r2
   4ac58:	180f883a 	mov	r7,r3
   4ac5c:	00474280 	call	47428 <__subdf3>
   4ac60:	d9000717 	ldw	r4,28(sp)
   4ac64:	d9800617 	ldw	r6,24(sp)
   4ac68:	180b883a 	mov	r5,r3
   4ac6c:	b0c00c04 	addi	r3,r22,48
   4ac70:	20c00005 	stb	r3,0(r4)
   4ac74:	25c00044 	addi	r23,r4,1
   4ac78:	01000044 	movi	r4,1
   4ac7c:	1011883a 	mov	r8,r2
   4ac80:	2807883a 	mov	r3,r5
   4ac84:	31003d26 	beq	r6,r4,4ad7c <_dtoa_r+0x918>
   4ac88:	000d883a 	mov	r6,zero
   4ac8c:	01d00934 	movhi	r7,16420
   4ac90:	1009883a 	mov	r4,r2
   4ac94:	0046d040 	call	46d04 <__muldf3>
   4ac98:	1009883a 	mov	r4,r2
   4ac9c:	180b883a 	mov	r5,r3
   4aca0:	000d883a 	mov	r6,zero
   4aca4:	000f883a 	mov	r7,zero
   4aca8:	1027883a 	mov	r19,r2
   4acac:	182b883a 	mov	r21,r3
   4acb0:	0046ba00 	call	46ba0 <__eqdf2>
   4acb4:	103f9926 	beq	r2,zero,4ab1c <__alt_data_end+0xfffd8b1c>
   4acb8:	d8c00617 	ldw	r3,24(sp)
   4acbc:	d9000717 	ldw	r4,28(sp)
   4acc0:	b825883a 	mov	r18,r23
   4acc4:	18bfffc4 	addi	r2,r3,-1
   4acc8:	20ad883a 	add	r22,r4,r2
   4accc:	dc000315 	stw	r16,12(sp)
   4acd0:	00000a06 	br	4acfc <_dtoa_r+0x898>
   4acd4:	0046d040 	call	46d04 <__muldf3>
   4acd8:	1009883a 	mov	r4,r2
   4acdc:	180b883a 	mov	r5,r3
   4ace0:	000d883a 	mov	r6,zero
   4ace4:	000f883a 	mov	r7,zero
   4ace8:	1027883a 	mov	r19,r2
   4acec:	182b883a 	mov	r21,r3
   4acf0:	b825883a 	mov	r18,r23
   4acf4:	0046ba00 	call	46ba0 <__eqdf2>
   4acf8:	10022626 	beq	r2,zero,4b594 <_dtoa_r+0x1130>
   4acfc:	880d883a 	mov	r6,r17
   4ad00:	a00f883a 	mov	r7,r20
   4ad04:	9809883a 	mov	r4,r19
   4ad08:	a80b883a 	mov	r5,r21
   4ad0c:	00462d40 	call	462d4 <__divdf3>
   4ad10:	180b883a 	mov	r5,r3
   4ad14:	1009883a 	mov	r4,r2
   4ad18:	0047cf80 	call	47cf8 <__fixdfsi>
   4ad1c:	1009883a 	mov	r4,r2
   4ad20:	1021883a 	mov	r16,r2
   4ad24:	0047d800 	call	47d80 <__floatsidf>
   4ad28:	1009883a 	mov	r4,r2
   4ad2c:	180b883a 	mov	r5,r3
   4ad30:	880d883a 	mov	r6,r17
   4ad34:	a00f883a 	mov	r7,r20
   4ad38:	0046d040 	call	46d04 <__muldf3>
   4ad3c:	9809883a 	mov	r4,r19
   4ad40:	a80b883a 	mov	r5,r21
   4ad44:	100d883a 	mov	r6,r2
   4ad48:	180f883a 	mov	r7,r3
   4ad4c:	00474280 	call	47428 <__subdf3>
   4ad50:	82000c04 	addi	r8,r16,48
   4ad54:	92000005 	stb	r8,0(r18)
   4ad58:	1009883a 	mov	r4,r2
   4ad5c:	180b883a 	mov	r5,r3
   4ad60:	000d883a 	mov	r6,zero
   4ad64:	01d00934 	movhi	r7,16420
   4ad68:	1011883a 	mov	r8,r2
   4ad6c:	bdc00044 	addi	r23,r23,1
   4ad70:	95bfd81e 	bne	r18,r22,4acd4 <__alt_data_end+0xfffd8cd4>
   4ad74:	802d883a 	mov	r22,r16
   4ad78:	dc000317 	ldw	r16,12(sp)
   4ad7c:	4009883a 	mov	r4,r8
   4ad80:	180b883a 	mov	r5,r3
   4ad84:	400d883a 	mov	r6,r8
   4ad88:	180f883a 	mov	r7,r3
   4ad8c:	0045a380 	call	45a38 <__adddf3>
   4ad90:	8809883a 	mov	r4,r17
   4ad94:	a00b883a 	mov	r5,r20
   4ad98:	100d883a 	mov	r6,r2
   4ad9c:	180f883a 	mov	r7,r3
   4ada0:	1027883a 	mov	r19,r2
   4ada4:	1825883a 	mov	r18,r3
   4ada8:	00515300 	call	51530 <__ledf2>
   4adac:	10000816 	blt	r2,zero,4add0 <_dtoa_r+0x96c>
   4adb0:	8809883a 	mov	r4,r17
   4adb4:	a00b883a 	mov	r5,r20
   4adb8:	980d883a 	mov	r6,r19
   4adbc:	900f883a 	mov	r7,r18
   4adc0:	0046ba00 	call	46ba0 <__eqdf2>
   4adc4:	103f551e 	bne	r2,zero,4ab1c <__alt_data_end+0xfffd8b1c>
   4adc8:	b580004c 	andi	r22,r22,1
   4adcc:	b03f5326 	beq	r22,zero,4ab1c <__alt_data_end+0xfffd8b1c>
   4add0:	bd7fffc3 	ldbu	r21,-1(r23)
   4add4:	b8bfffc4 	addi	r2,r23,-1
   4add8:	1007883a 	mov	r3,r2
   4addc:	01400e44 	movi	r5,57
   4ade0:	d9800717 	ldw	r6,28(sp)
   4ade4:	00000506 	br	4adfc <_dtoa_r+0x998>
   4ade8:	18ffffc4 	addi	r3,r3,-1
   4adec:	30825e26 	beq	r6,r2,4b768 <_dtoa_r+0x1304>
   4adf0:	1d400003 	ldbu	r21,0(r3)
   4adf4:	102f883a 	mov	r23,r2
   4adf8:	10bfffc4 	addi	r2,r2,-1
   4adfc:	a9003fcc 	andi	r4,r21,255
   4ae00:	2100201c 	xori	r4,r4,128
   4ae04:	213fe004 	addi	r4,r4,-128
   4ae08:	217ff726 	beq	r4,r5,4ade8 <__alt_data_end+0xfffd8de8>
   4ae0c:	aa000044 	addi	r8,r21,1
   4ae10:	12000005 	stb	r8,0(r2)
   4ae14:	003f4106 	br	4ab1c <__alt_data_end+0xfffd8b1c>
   4ae18:	d8c00b17 	ldw	r3,44(sp)
   4ae1c:	18006726 	beq	r3,zero,4afbc <_dtoa_r+0xb58>
   4ae20:	d9000317 	ldw	r4,12(sp)
   4ae24:	00c00044 	movi	r3,1
   4ae28:	19016a0e 	bge	r3,r4,4b3d4 <_dtoa_r+0xf70>
   4ae2c:	d8800617 	ldw	r2,24(sp)
   4ae30:	d8c00917 	ldw	r3,36(sp)
   4ae34:	157fffc4 	addi	r21,r2,-1
   4ae38:	1d420716 	blt	r3,r21,4b658 <_dtoa_r+0x11f4>
   4ae3c:	1d6bc83a 	sub	r21,r3,r21
   4ae40:	d8800617 	ldw	r2,24(sp)
   4ae44:	1002c716 	blt	r2,zero,4b964 <_dtoa_r+0x1500>
   4ae48:	dd000817 	ldw	r20,32(sp)
   4ae4c:	d8800617 	ldw	r2,24(sp)
   4ae50:	d9800817 	ldw	r6,32(sp)
   4ae54:	8009883a 	mov	r4,r16
   4ae58:	01400044 	movi	r5,1
   4ae5c:	308d883a 	add	r6,r6,r2
   4ae60:	d9800815 	stw	r6,32(sp)
   4ae64:	b0ad883a 	add	r22,r22,r2
   4ae68:	004d05c0 	call	4d05c <__i2b>
   4ae6c:	1023883a 	mov	r17,r2
   4ae70:	a0000826 	beq	r20,zero,4ae94 <_dtoa_r+0xa30>
   4ae74:	0580070e 	bge	zero,r22,4ae94 <_dtoa_r+0xa30>
   4ae78:	b005883a 	mov	r2,r22
   4ae7c:	a5812016 	blt	r20,r22,4b300 <_dtoa_r+0xe9c>
   4ae80:	d8c00817 	ldw	r3,32(sp)
   4ae84:	a0a9c83a 	sub	r20,r20,r2
   4ae88:	b0adc83a 	sub	r22,r22,r2
   4ae8c:	1887c83a 	sub	r3,r3,r2
   4ae90:	d8c00815 	stw	r3,32(sp)
   4ae94:	d9000917 	ldw	r4,36(sp)
   4ae98:	0100140e 	bge	zero,r4,4aeec <_dtoa_r+0xa88>
   4ae9c:	d9800b17 	ldw	r6,44(sp)
   4aea0:	3001e526 	beq	r6,zero,4b638 <_dtoa_r+0x11d4>
   4aea4:	05400e0e 	bge	zero,r21,4aee0 <_dtoa_r+0xa7c>
   4aea8:	880b883a 	mov	r5,r17
   4aeac:	8009883a 	mov	r4,r16
   4aeb0:	a80d883a 	mov	r6,r21
   4aeb4:	004d2940 	call	4d294 <__pow5mult>
   4aeb8:	e00d883a 	mov	r6,fp
   4aebc:	8009883a 	mov	r4,r16
   4aec0:	100b883a 	mov	r5,r2
   4aec4:	1023883a 	mov	r17,r2
   4aec8:	004d0980 	call	4d098 <__multiply>
   4aecc:	102f883a 	mov	r23,r2
   4aed0:	e00b883a 	mov	r5,fp
   4aed4:	8009883a 	mov	r4,r16
   4aed8:	004ccf80 	call	4ccf8 <_Bfree>
   4aedc:	b839883a 	mov	fp,r23
   4aee0:	d8800917 	ldw	r2,36(sp)
   4aee4:	154dc83a 	sub	r6,r2,r21
   4aee8:	3001281e 	bne	r6,zero,4b38c <_dtoa_r+0xf28>
   4aeec:	05c00044 	movi	r23,1
   4aef0:	8009883a 	mov	r4,r16
   4aef4:	b80b883a 	mov	r5,r23
   4aef8:	004d05c0 	call	4d05c <__i2b>
   4aefc:	d8c00a17 	ldw	r3,40(sp)
   4af00:	102b883a 	mov	r21,r2
   4af04:	00c0310e 	bge	zero,r3,4afcc <_dtoa_r+0xb68>
   4af08:	8009883a 	mov	r4,r16
   4af0c:	100b883a 	mov	r5,r2
   4af10:	180d883a 	mov	r6,r3
   4af14:	004d2940 	call	4d294 <__pow5mult>
   4af18:	d9000317 	ldw	r4,12(sp)
   4af1c:	102b883a 	mov	r21,r2
   4af20:	b9011f0e 	bge	r23,r4,4b3a0 <_dtoa_r+0xf3c>
   4af24:	0027883a 	mov	r19,zero
   4af28:	a8800417 	ldw	r2,16(r21)
   4af2c:	10800104 	addi	r2,r2,4
   4af30:	1085883a 	add	r2,r2,r2
   4af34:	1085883a 	add	r2,r2,r2
   4af38:	a885883a 	add	r2,r21,r2
   4af3c:	11000017 	ldw	r4,0(r2)
   4af40:	004cf440 	call	4cf44 <__hi0bits>
   4af44:	00c00804 	movi	r3,32
   4af48:	1885c83a 	sub	r2,r3,r2
   4af4c:	00002506 	br	4afe4 <_dtoa_r+0xb80>
   4af50:	01800044 	movi	r6,1
   4af54:	d9800d15 	stw	r6,52(sp)
   4af58:	003dec06 	br	4a70c <__alt_data_end+0xfffd870c>
   4af5c:	d8c00817 	ldw	r3,32(sp)
   4af60:	d9000517 	ldw	r4,20(sp)
   4af64:	d8000a15 	stw	zero,40(sp)
   4af68:	1907c83a 	sub	r3,r3,r4
   4af6c:	010dc83a 	sub	r6,zero,r4
   4af70:	d8c00815 	stw	r3,32(sp)
   4af74:	d9800915 	stw	r6,36(sp)
   4af78:	003ded06 	br	4a730 <__alt_data_end+0xfffd8730>
   4af7c:	05adc83a 	sub	r22,zero,r22
   4af80:	dd800815 	stw	r22,32(sp)
   4af84:	002d883a 	mov	r22,zero
   4af88:	003de406 	br	4a71c <__alt_data_end+0xfffd871c>
   4af8c:	d9000517 	ldw	r4,20(sp)
   4af90:	0047d800 	call	47d80 <__floatsidf>
   4af94:	1009883a 	mov	r4,r2
   4af98:	180b883a 	mov	r5,r3
   4af9c:	b00d883a 	mov	r6,r22
   4afa0:	a80f883a 	mov	r7,r21
   4afa4:	0046ba00 	call	46ba0 <__eqdf2>
   4afa8:	103dc726 	beq	r2,zero,4a6c8 <__alt_data_end+0xfffd86c8>
   4afac:	d8800517 	ldw	r2,20(sp)
   4afb0:	10bfffc4 	addi	r2,r2,-1
   4afb4:	d8800515 	stw	r2,20(sp)
   4afb8:	003dc306 	br	4a6c8 <__alt_data_end+0xfffd86c8>
   4afbc:	dd400917 	ldw	r21,36(sp)
   4afc0:	dd000817 	ldw	r20,32(sp)
   4afc4:	0023883a 	mov	r17,zero
   4afc8:	003fa906 	br	4ae70 <__alt_data_end+0xfffd8e70>
   4afcc:	d9800317 	ldw	r6,12(sp)
   4afd0:	b981670e 	bge	r23,r6,4b570 <_dtoa_r+0x110c>
   4afd4:	0027883a 	mov	r19,zero
   4afd8:	d8c00a17 	ldw	r3,40(sp)
   4afdc:	183fd21e 	bne	r3,zero,4af28 <__alt_data_end+0xfffd8f28>
   4afe0:	00800044 	movi	r2,1
   4afe4:	1585883a 	add	r2,r2,r22
   4afe8:	108007cc 	andi	r2,r2,31
   4afec:	10005f26 	beq	r2,zero,4b16c <_dtoa_r+0xd08>
   4aff0:	00c00804 	movi	r3,32
   4aff4:	1887c83a 	sub	r3,r3,r2
   4aff8:	01000104 	movi	r4,4
   4affc:	20c2dd0e 	bge	r4,r3,4bb74 <_dtoa_r+0x1710>
   4b000:	d9000817 	ldw	r4,32(sp)
   4b004:	00c00704 	movi	r3,28
   4b008:	1885c83a 	sub	r2,r3,r2
   4b00c:	2089883a 	add	r4,r4,r2
   4b010:	d9000815 	stw	r4,32(sp)
   4b014:	a0a9883a 	add	r20,r20,r2
   4b018:	b0ad883a 	add	r22,r22,r2
   4b01c:	d8800817 	ldw	r2,32(sp)
   4b020:	0080050e 	bge	zero,r2,4b038 <_dtoa_r+0xbd4>
   4b024:	e00b883a 	mov	r5,fp
   4b028:	8009883a 	mov	r4,r16
   4b02c:	100d883a 	mov	r6,r2
   4b030:	004d3d40 	call	4d3d4 <__lshift>
   4b034:	1039883a 	mov	fp,r2
   4b038:	0580050e 	bge	zero,r22,4b050 <_dtoa_r+0xbec>
   4b03c:	a80b883a 	mov	r5,r21
   4b040:	8009883a 	mov	r4,r16
   4b044:	b00d883a 	mov	r6,r22
   4b048:	004d3d40 	call	4d3d4 <__lshift>
   4b04c:	102b883a 	mov	r21,r2
   4b050:	d8c00d17 	ldw	r3,52(sp)
   4b054:	1801161e 	bne	r3,zero,4b4b0 <_dtoa_r+0x104c>
   4b058:	d8c00617 	ldw	r3,24(sp)
   4b05c:	00c12d0e 	bge	zero,r3,4b514 <_dtoa_r+0x10b0>
   4b060:	d8c00b17 	ldw	r3,44(sp)
   4b064:	1800571e 	bne	r3,zero,4b1c4 <_dtoa_r+0xd60>
   4b068:	dc800717 	ldw	r18,28(sp)
   4b06c:	dcc00617 	ldw	r19,24(sp)
   4b070:	9029883a 	mov	r20,r18
   4b074:	00000206 	br	4b080 <_dtoa_r+0xc1c>
   4b078:	004cd200 	call	4cd20 <__multadd>
   4b07c:	1039883a 	mov	fp,r2
   4b080:	e009883a 	mov	r4,fp
   4b084:	a80b883a 	mov	r5,r21
   4b088:	004a2640 	call	4a264 <quorem>
   4b08c:	10800c04 	addi	r2,r2,48
   4b090:	90800005 	stb	r2,0(r18)
   4b094:	94800044 	addi	r18,r18,1
   4b098:	9507c83a 	sub	r3,r18,r20
   4b09c:	8009883a 	mov	r4,r16
   4b0a0:	e00b883a 	mov	r5,fp
   4b0a4:	01800284 	movi	r6,10
   4b0a8:	000f883a 	mov	r7,zero
   4b0ac:	1cfff216 	blt	r3,r19,4b078 <__alt_data_end+0xfffd9078>
   4b0b0:	1011883a 	mov	r8,r2
   4b0b4:	d8800617 	ldw	r2,24(sp)
   4b0b8:	00822e0e 	bge	zero,r2,4b974 <_dtoa_r+0x1510>
   4b0bc:	d9000717 	ldw	r4,28(sp)
   4b0c0:	0025883a 	mov	r18,zero
   4b0c4:	20af883a 	add	r23,r4,r2
   4b0c8:	e00b883a 	mov	r5,fp
   4b0cc:	01800044 	movi	r6,1
   4b0d0:	8009883a 	mov	r4,r16
   4b0d4:	da001715 	stw	r8,92(sp)
   4b0d8:	004d3d40 	call	4d3d4 <__lshift>
   4b0dc:	1009883a 	mov	r4,r2
   4b0e0:	a80b883a 	mov	r5,r21
   4b0e4:	1039883a 	mov	fp,r2
   4b0e8:	004d5240 	call	4d524 <__mcmp>
   4b0ec:	da001717 	ldw	r8,92(sp)
   4b0f0:	00816e0e 	bge	zero,r2,4b6ac <_dtoa_r+0x1248>
   4b0f4:	b93fffc3 	ldbu	r4,-1(r23)
   4b0f8:	b8bfffc4 	addi	r2,r23,-1
   4b0fc:	1007883a 	mov	r3,r2
   4b100:	01800e44 	movi	r6,57
   4b104:	d9c00717 	ldw	r7,28(sp)
   4b108:	00000506 	br	4b120 <_dtoa_r+0xcbc>
   4b10c:	18ffffc4 	addi	r3,r3,-1
   4b110:	38811926 	beq	r7,r2,4b578 <_dtoa_r+0x1114>
   4b114:	19000003 	ldbu	r4,0(r3)
   4b118:	102f883a 	mov	r23,r2
   4b11c:	10bfffc4 	addi	r2,r2,-1
   4b120:	21403fcc 	andi	r5,r4,255
   4b124:	2940201c 	xori	r5,r5,128
   4b128:	297fe004 	addi	r5,r5,-128
   4b12c:	29bff726 	beq	r5,r6,4b10c <__alt_data_end+0xfffd910c>
   4b130:	21000044 	addi	r4,r4,1
   4b134:	11000005 	stb	r4,0(r2)
   4b138:	8009883a 	mov	r4,r16
   4b13c:	a80b883a 	mov	r5,r21
   4b140:	004ccf80 	call	4ccf8 <_Bfree>
   4b144:	883e7526 	beq	r17,zero,4ab1c <__alt_data_end+0xfffd8b1c>
   4b148:	90000426 	beq	r18,zero,4b15c <_dtoa_r+0xcf8>
   4b14c:	94400326 	beq	r18,r17,4b15c <_dtoa_r+0xcf8>
   4b150:	8009883a 	mov	r4,r16
   4b154:	900b883a 	mov	r5,r18
   4b158:	004ccf80 	call	4ccf8 <_Bfree>
   4b15c:	8009883a 	mov	r4,r16
   4b160:	880b883a 	mov	r5,r17
   4b164:	004ccf80 	call	4ccf8 <_Bfree>
   4b168:	003e6c06 	br	4ab1c <__alt_data_end+0xfffd8b1c>
   4b16c:	00800704 	movi	r2,28
   4b170:	d9800817 	ldw	r6,32(sp)
   4b174:	a0a9883a 	add	r20,r20,r2
   4b178:	b0ad883a 	add	r22,r22,r2
   4b17c:	308d883a 	add	r6,r6,r2
   4b180:	d9800815 	stw	r6,32(sp)
   4b184:	003fa506 	br	4b01c <__alt_data_end+0xfffd901c>
   4b188:	013efb84 	movi	r4,-1042
   4b18c:	246bc83a 	sub	r21,r4,r17
   4b190:	9548983a 	sll	r4,r18,r21
   4b194:	003d1806 	br	4a5f8 <__alt_data_end+0xfffd85f8>
   4b198:	d8000d15 	stw	zero,52(sp)
   4b19c:	003d5b06 	br	4a70c <__alt_data_end+0xfffd870c>
   4b1a0:	880b883a 	mov	r5,r17
   4b1a4:	8009883a 	mov	r4,r16
   4b1a8:	01800284 	movi	r6,10
   4b1ac:	000f883a 	mov	r7,zero
   4b1b0:	004cd200 	call	4cd20 <__multadd>
   4b1b4:	1023883a 	mov	r17,r2
   4b1b8:	d8800c17 	ldw	r2,48(sp)
   4b1bc:	0082550e 	bge	zero,r2,4bb14 <_dtoa_r+0x16b0>
   4b1c0:	d8800615 	stw	r2,24(sp)
   4b1c4:	0500050e 	bge	zero,r20,4b1dc <_dtoa_r+0xd78>
   4b1c8:	880b883a 	mov	r5,r17
   4b1cc:	8009883a 	mov	r4,r16
   4b1d0:	a00d883a 	mov	r6,r20
   4b1d4:	004d3d40 	call	4d3d4 <__lshift>
   4b1d8:	1023883a 	mov	r17,r2
   4b1dc:	98016a1e 	bne	r19,zero,4b788 <_dtoa_r+0x1324>
   4b1e0:	8829883a 	mov	r20,r17
   4b1e4:	d9000617 	ldw	r4,24(sp)
   4b1e8:	dcc00717 	ldw	r19,28(sp)
   4b1ec:	9480004c 	andi	r18,r18,1
   4b1f0:	20bfffc4 	addi	r2,r4,-1
   4b1f4:	9885883a 	add	r2,r19,r2
   4b1f8:	d8800415 	stw	r2,16(sp)
   4b1fc:	dc800615 	stw	r18,24(sp)
   4b200:	e009883a 	mov	r4,fp
   4b204:	a80b883a 	mov	r5,r21
   4b208:	004a2640 	call	4a264 <quorem>
   4b20c:	e009883a 	mov	r4,fp
   4b210:	880b883a 	mov	r5,r17
   4b214:	102f883a 	mov	r23,r2
   4b218:	004d5240 	call	4d524 <__mcmp>
   4b21c:	8009883a 	mov	r4,r16
   4b220:	a80b883a 	mov	r5,r21
   4b224:	a00d883a 	mov	r6,r20
   4b228:	102d883a 	mov	r22,r2
   4b22c:	004d5840 	call	4d584 <__mdiff>
   4b230:	1007883a 	mov	r3,r2
   4b234:	10800317 	ldw	r2,12(r2)
   4b238:	bc800c04 	addi	r18,r23,48
   4b23c:	1000971e 	bne	r2,zero,4b49c <_dtoa_r+0x1038>
   4b240:	180b883a 	mov	r5,r3
   4b244:	e009883a 	mov	r4,fp
   4b248:	d8c01515 	stw	r3,84(sp)
   4b24c:	004d5240 	call	4d524 <__mcmp>
   4b250:	d8c01517 	ldw	r3,84(sp)
   4b254:	8009883a 	mov	r4,r16
   4b258:	d8801515 	stw	r2,84(sp)
   4b25c:	180b883a 	mov	r5,r3
   4b260:	004ccf80 	call	4ccf8 <_Bfree>
   4b264:	d8801517 	ldw	r2,84(sp)
   4b268:	1000041e 	bne	r2,zero,4b27c <_dtoa_r+0xe18>
   4b26c:	d9800317 	ldw	r6,12(sp)
   4b270:	3000021e 	bne	r6,zero,4b27c <_dtoa_r+0xe18>
   4b274:	d8c00617 	ldw	r3,24(sp)
   4b278:	18007626 	beq	r3,zero,4b454 <_dtoa_r+0xff0>
   4b27c:	b0005b16 	blt	r22,zero,4b3ec <_dtoa_r+0xf88>
   4b280:	b000041e 	bne	r22,zero,4b294 <_dtoa_r+0xe30>
   4b284:	d9000317 	ldw	r4,12(sp)
   4b288:	2000021e 	bne	r4,zero,4b294 <_dtoa_r+0xe30>
   4b28c:	d8c00617 	ldw	r3,24(sp)
   4b290:	18005626 	beq	r3,zero,4b3ec <_dtoa_r+0xf88>
   4b294:	00814d16 	blt	zero,r2,4b7cc <_dtoa_r+0x1368>
   4b298:	d8c00417 	ldw	r3,16(sp)
   4b29c:	9d800044 	addi	r22,r19,1
   4b2a0:	9c800005 	stb	r18,0(r19)
   4b2a4:	b02f883a 	mov	r23,r22
   4b2a8:	98c14c26 	beq	r19,r3,4b7dc <_dtoa_r+0x1378>
   4b2ac:	e00b883a 	mov	r5,fp
   4b2b0:	8009883a 	mov	r4,r16
   4b2b4:	01800284 	movi	r6,10
   4b2b8:	000f883a 	mov	r7,zero
   4b2bc:	004cd200 	call	4cd20 <__multadd>
   4b2c0:	1039883a 	mov	fp,r2
   4b2c4:	8d006d26 	beq	r17,r20,4b47c <_dtoa_r+0x1018>
   4b2c8:	880b883a 	mov	r5,r17
   4b2cc:	01800284 	movi	r6,10
   4b2d0:	000f883a 	mov	r7,zero
   4b2d4:	8009883a 	mov	r4,r16
   4b2d8:	004cd200 	call	4cd20 <__multadd>
   4b2dc:	a00b883a 	mov	r5,r20
   4b2e0:	8009883a 	mov	r4,r16
   4b2e4:	01800284 	movi	r6,10
   4b2e8:	000f883a 	mov	r7,zero
   4b2ec:	1023883a 	mov	r17,r2
   4b2f0:	004cd200 	call	4cd20 <__multadd>
   4b2f4:	1029883a 	mov	r20,r2
   4b2f8:	b027883a 	mov	r19,r22
   4b2fc:	003fc006 	br	4b200 <__alt_data_end+0xfffd9200>
   4b300:	a005883a 	mov	r2,r20
   4b304:	003ede06 	br	4ae80 <__alt_data_end+0xfffd8e80>
   4b308:	01000044 	movi	r4,1
   4b30c:	d9000b15 	stw	r4,44(sp)
   4b310:	d9802217 	ldw	r6,136(sp)
   4b314:	0180dc0e 	bge	zero,r6,4b688 <_dtoa_r+0x1224>
   4b318:	3023883a 	mov	r17,r6
   4b31c:	d9800c15 	stw	r6,48(sp)
   4b320:	d9800615 	stw	r6,24(sp)
   4b324:	003d1e06 	br	4a7a0 <__alt_data_end+0xfffd87a0>
   4b328:	d8800617 	ldw	r2,24(sp)
   4b32c:	00be3716 	blt	zero,r2,4ac0c <__alt_data_end+0xfffd8c0c>
   4b330:	1000be1e 	bne	r2,zero,4b62c <_dtoa_r+0x11c8>
   4b334:	8809883a 	mov	r4,r17
   4b338:	a00b883a 	mov	r5,r20
   4b33c:	000d883a 	mov	r6,zero
   4b340:	01d00534 	movhi	r7,16404
   4b344:	0046d040 	call	46d04 <__muldf3>
   4b348:	1009883a 	mov	r4,r2
   4b34c:	180b883a 	mov	r5,r3
   4b350:	900d883a 	mov	r6,r18
   4b354:	980f883a 	mov	r7,r19
   4b358:	0046c240 	call	46c24 <__gedf2>
   4b35c:	002b883a 	mov	r21,zero
   4b360:	0023883a 	mov	r17,zero
   4b364:	10007a16 	blt	r2,zero,4b550 <_dtoa_r+0x10ec>
   4b368:	d9002217 	ldw	r4,136(sp)
   4b36c:	ddc00717 	ldw	r23,28(sp)
   4b370:	0108303a 	nor	r4,zero,r4
   4b374:	d9000515 	stw	r4,20(sp)
   4b378:	8009883a 	mov	r4,r16
   4b37c:	a80b883a 	mov	r5,r21
   4b380:	004ccf80 	call	4ccf8 <_Bfree>
   4b384:	883f751e 	bne	r17,zero,4b15c <__alt_data_end+0xfffd915c>
   4b388:	003de406 	br	4ab1c <__alt_data_end+0xfffd8b1c>
   4b38c:	e00b883a 	mov	r5,fp
   4b390:	8009883a 	mov	r4,r16
   4b394:	004d2940 	call	4d294 <__pow5mult>
   4b398:	1039883a 	mov	fp,r2
   4b39c:	003ed306 	br	4aeec <__alt_data_end+0xfffd8eec>
   4b3a0:	903ee01e 	bne	r18,zero,4af24 <__alt_data_end+0xfffd8f24>
   4b3a4:	00800434 	movhi	r2,16
   4b3a8:	10bfffc4 	addi	r2,r2,-1
   4b3ac:	9884703a 	and	r2,r19,r2
   4b3b0:	103f081e 	bne	r2,zero,4afd4 <__alt_data_end+0xfffd8fd4>
   4b3b4:	9cdffc2c 	andhi	r19,r19,32752
   4b3b8:	983f0626 	beq	r19,zero,4afd4 <__alt_data_end+0xfffd8fd4>
   4b3bc:	d8800817 	ldw	r2,32(sp)
   4b3c0:	b5800044 	addi	r22,r22,1
   4b3c4:	04c00044 	movi	r19,1
   4b3c8:	10800044 	addi	r2,r2,1
   4b3cc:	d8800815 	stw	r2,32(sp)
   4b3d0:	003f0106 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b3d4:	d9800f17 	ldw	r6,60(sp)
   4b3d8:	30016826 	beq	r6,zero,4b97c <_dtoa_r+0x1518>
   4b3dc:	10810cc4 	addi	r2,r2,1075
   4b3e0:	dd400917 	ldw	r21,36(sp)
   4b3e4:	dd000817 	ldw	r20,32(sp)
   4b3e8:	003e9906 	br	4ae50 <__alt_data_end+0xfffd8e50>
   4b3ec:	9011883a 	mov	r8,r18
   4b3f0:	4007883a 	mov	r3,r8
   4b3f4:	e02d883a 	mov	r22,fp
   4b3f8:	0080100e 	bge	zero,r2,4b43c <_dtoa_r+0xfd8>
   4b3fc:	01800044 	movi	r6,1
   4b400:	8009883a 	mov	r4,r16
   4b404:	e00b883a 	mov	r5,fp
   4b408:	da001515 	stw	r8,84(sp)
   4b40c:	da001715 	stw	r8,92(sp)
   4b410:	004d3d40 	call	4d3d4 <__lshift>
   4b414:	1009883a 	mov	r4,r2
   4b418:	a80b883a 	mov	r5,r21
   4b41c:	102d883a 	mov	r22,r2
   4b420:	004d5240 	call	4d524 <__mcmp>
   4b424:	d8c01517 	ldw	r3,84(sp)
   4b428:	da001717 	ldw	r8,92(sp)
   4b42c:	0081a50e 	bge	zero,r2,4bac4 <_dtoa_r+0x1660>
   4b430:	00800e44 	movi	r2,57
   4b434:	40817b26 	beq	r8,r2,4ba24 <_dtoa_r+0x15c0>
   4b438:	40c00044 	addi	r3,r8,1
   4b43c:	8825883a 	mov	r18,r17
   4b440:	9dc00044 	addi	r23,r19,1
   4b444:	98c00005 	stb	r3,0(r19)
   4b448:	a023883a 	mov	r17,r20
   4b44c:	b039883a 	mov	fp,r22
   4b450:	003f3906 	br	4b138 <__alt_data_end+0xfffd9138>
   4b454:	00800e44 	movi	r2,57
   4b458:	9011883a 	mov	r8,r18
   4b45c:	90817226 	beq	r18,r2,4ba28 <_dtoa_r+0x15c4>
   4b460:	0580010e 	bge	zero,r22,4b468 <_dtoa_r+0x1004>
   4b464:	ba000c44 	addi	r8,r23,49
   4b468:	8825883a 	mov	r18,r17
   4b46c:	9dc00044 	addi	r23,r19,1
   4b470:	9a000005 	stb	r8,0(r19)
   4b474:	a023883a 	mov	r17,r20
   4b478:	003f2f06 	br	4b138 <__alt_data_end+0xfffd9138>
   4b47c:	880b883a 	mov	r5,r17
   4b480:	8009883a 	mov	r4,r16
   4b484:	01800284 	movi	r6,10
   4b488:	000f883a 	mov	r7,zero
   4b48c:	004cd200 	call	4cd20 <__multadd>
   4b490:	1023883a 	mov	r17,r2
   4b494:	1029883a 	mov	r20,r2
   4b498:	003f9706 	br	4b2f8 <__alt_data_end+0xfffd92f8>
   4b49c:	8009883a 	mov	r4,r16
   4b4a0:	180b883a 	mov	r5,r3
   4b4a4:	004ccf80 	call	4ccf8 <_Bfree>
   4b4a8:	00800044 	movi	r2,1
   4b4ac:	003f7306 	br	4b27c <__alt_data_end+0xfffd927c>
   4b4b0:	e009883a 	mov	r4,fp
   4b4b4:	a80b883a 	mov	r5,r21
   4b4b8:	004d5240 	call	4d524 <__mcmp>
   4b4bc:	103ee60e 	bge	r2,zero,4b058 <__alt_data_end+0xfffd9058>
   4b4c0:	8009883a 	mov	r4,r16
   4b4c4:	e00b883a 	mov	r5,fp
   4b4c8:	01800284 	movi	r6,10
   4b4cc:	000f883a 	mov	r7,zero
   4b4d0:	004cd200 	call	4cd20 <__multadd>
   4b4d4:	d9000517 	ldw	r4,20(sp)
   4b4d8:	d9800b17 	ldw	r6,44(sp)
   4b4dc:	1039883a 	mov	fp,r2
   4b4e0:	213fffc4 	addi	r4,r4,-1
   4b4e4:	d9000515 	stw	r4,20(sp)
   4b4e8:	303f2d1e 	bne	r6,zero,4b1a0 <__alt_data_end+0xfffd91a0>
   4b4ec:	d9000c17 	ldw	r4,48(sp)
   4b4f0:	0101780e 	bge	zero,r4,4bad4 <_dtoa_r+0x1670>
   4b4f4:	d9000615 	stw	r4,24(sp)
   4b4f8:	003edb06 	br	4b068 <__alt_data_end+0xfffd9068>
   4b4fc:	00800084 	movi	r2,2
   4b500:	30818e1e 	bne	r6,r2,4bb3c <_dtoa_r+0x16d8>
   4b504:	d8000b15 	stw	zero,44(sp)
   4b508:	003f8106 	br	4b310 <__alt_data_end+0xfffd9310>
   4b50c:	d8800717 	ldw	r2,28(sp)
   4b510:	003c0306 	br	4a520 <__alt_data_end+0xfffd8520>
   4b514:	d9000317 	ldw	r4,12(sp)
   4b518:	00800084 	movi	r2,2
   4b51c:	113ed00e 	bge	r2,r4,4b060 <__alt_data_end+0xfffd9060>
   4b520:	d8c00617 	ldw	r3,24(sp)
   4b524:	183f901e 	bne	r3,zero,4b368 <__alt_data_end+0xfffd9368>
   4b528:	a80b883a 	mov	r5,r21
   4b52c:	8009883a 	mov	r4,r16
   4b530:	01800144 	movi	r6,5
   4b534:	000f883a 	mov	r7,zero
   4b538:	004cd200 	call	4cd20 <__multadd>
   4b53c:	e009883a 	mov	r4,fp
   4b540:	100b883a 	mov	r5,r2
   4b544:	102b883a 	mov	r21,r2
   4b548:	004d5240 	call	4d524 <__mcmp>
   4b54c:	00bf860e 	bge	zero,r2,4b368 <__alt_data_end+0xfffd9368>
   4b550:	d9800717 	ldw	r6,28(sp)
   4b554:	00800c44 	movi	r2,49
   4b558:	30800005 	stb	r2,0(r6)
   4b55c:	d8800517 	ldw	r2,20(sp)
   4b560:	35c00044 	addi	r23,r6,1
   4b564:	10800044 	addi	r2,r2,1
   4b568:	d8800515 	stw	r2,20(sp)
   4b56c:	003f8206 	br	4b378 <__alt_data_end+0xfffd9378>
   4b570:	903e981e 	bne	r18,zero,4afd4 <__alt_data_end+0xfffd8fd4>
   4b574:	003f8b06 	br	4b3a4 <__alt_data_end+0xfffd93a4>
   4b578:	d9800517 	ldw	r6,20(sp)
   4b57c:	d8c00717 	ldw	r3,28(sp)
   4b580:	00800c44 	movi	r2,49
   4b584:	31800044 	addi	r6,r6,1
   4b588:	d9800515 	stw	r6,20(sp)
   4b58c:	18800005 	stb	r2,0(r3)
   4b590:	003ee906 	br	4b138 <__alt_data_end+0xfffd9138>
   4b594:	dc000317 	ldw	r16,12(sp)
   4b598:	003d6006 	br	4ab1c <__alt_data_end+0xfffd8b1c>
   4b59c:	8809883a 	mov	r4,r17
   4b5a0:	0047d800 	call	47d80 <__floatsidf>
   4b5a4:	a009883a 	mov	r4,r20
   4b5a8:	a80b883a 	mov	r5,r21
   4b5ac:	100d883a 	mov	r6,r2
   4b5b0:	180f883a 	mov	r7,r3
   4b5b4:	0046d040 	call	46d04 <__muldf3>
   4b5b8:	1009883a 	mov	r4,r2
   4b5bc:	180b883a 	mov	r5,r3
   4b5c0:	000d883a 	mov	r6,zero
   4b5c4:	01d00734 	movhi	r7,16412
   4b5c8:	0045a380 	call	45a38 <__adddf3>
   4b5cc:	1023883a 	mov	r17,r2
   4b5d0:	00bf3034 	movhi	r2,64704
   4b5d4:	1885883a 	add	r2,r3,r2
   4b5d8:	d8800e15 	stw	r2,56(sp)
   4b5dc:	a009883a 	mov	r4,r20
   4b5e0:	a80b883a 	mov	r5,r21
   4b5e4:	000d883a 	mov	r6,zero
   4b5e8:	01d00534 	movhi	r7,16404
   4b5ec:	00474280 	call	47428 <__subdf3>
   4b5f0:	d9c00e17 	ldw	r7,56(sp)
   4b5f4:	1009883a 	mov	r4,r2
   4b5f8:	180b883a 	mov	r5,r3
   4b5fc:	880d883a 	mov	r6,r17
   4b600:	102b883a 	mov	r21,r2
   4b604:	1829883a 	mov	r20,r3
   4b608:	0046c240 	call	46c24 <__gedf2>
   4b60c:	00807716 	blt	zero,r2,4b7ec <_dtoa_r+0x1388>
   4b610:	d8800e17 	ldw	r2,56(sp)
   4b614:	a809883a 	mov	r4,r21
   4b618:	a00b883a 	mov	r5,r20
   4b61c:	11e0003c 	xorhi	r7,r2,32768
   4b620:	880d883a 	mov	r6,r17
   4b624:	00515300 	call	51530 <__ledf2>
   4b628:	103d6b0e 	bge	r2,zero,4abd8 <__alt_data_end+0xfffd8bd8>
   4b62c:	002b883a 	mov	r21,zero
   4b630:	0023883a 	mov	r17,zero
   4b634:	003f4c06 	br	4b368 <__alt_data_end+0xfffd9368>
   4b638:	d9800917 	ldw	r6,36(sp)
   4b63c:	e00b883a 	mov	r5,fp
   4b640:	8009883a 	mov	r4,r16
   4b644:	004d2940 	call	4d294 <__pow5mult>
   4b648:	1039883a 	mov	fp,r2
   4b64c:	003e2706 	br	4aeec <__alt_data_end+0xfffd8eec>
   4b650:	d8000b15 	stw	zero,44(sp)
   4b654:	003c4906 	br	4a77c <__alt_data_end+0xfffd877c>
   4b658:	d9000917 	ldw	r4,36(sp)
   4b65c:	d9800a17 	ldw	r6,40(sp)
   4b660:	dd400915 	stw	r21,36(sp)
   4b664:	a905c83a 	sub	r2,r21,r4
   4b668:	308d883a 	add	r6,r6,r2
   4b66c:	d9800a15 	stw	r6,40(sp)
   4b670:	002b883a 	mov	r21,zero
   4b674:	003df206 	br	4ae40 <__alt_data_end+0xfffd8e40>
   4b678:	dc800e15 	stw	r18,56(sp)
   4b67c:	982b883a 	mov	r21,r19
   4b680:	04400084 	movi	r17,2
   4b684:	003c7406 	br	4a858 <__alt_data_end+0xfffd8858>
   4b688:	04400044 	movi	r17,1
   4b68c:	dc400c15 	stw	r17,48(sp)
   4b690:	dc400615 	stw	r17,24(sp)
   4b694:	dc402215 	stw	r17,136(sp)
   4b698:	80001115 	stw	zero,68(r16)
   4b69c:	000b883a 	mov	r5,zero
   4b6a0:	003c4a06 	br	4a7cc <__alt_data_end+0xfffd87cc>
   4b6a4:	3023883a 	mov	r17,r6
   4b6a8:	003ffb06 	br	4b698 <__alt_data_end+0xfffd9698>
   4b6ac:	1000021e 	bne	r2,zero,4b6b8 <_dtoa_r+0x1254>
   4b6b0:	4200004c 	andi	r8,r8,1
   4b6b4:	403e8f1e 	bne	r8,zero,4b0f4 <__alt_data_end+0xfffd90f4>
   4b6b8:	01000c04 	movi	r4,48
   4b6bc:	00000106 	br	4b6c4 <_dtoa_r+0x1260>
   4b6c0:	102f883a 	mov	r23,r2
   4b6c4:	b8bfffc4 	addi	r2,r23,-1
   4b6c8:	10c00007 	ldb	r3,0(r2)
   4b6cc:	193ffc26 	beq	r3,r4,4b6c0 <__alt_data_end+0xfffd96c0>
   4b6d0:	003e9906 	br	4b138 <__alt_data_end+0xfffd9138>
   4b6d4:	d9000517 	ldw	r4,20(sp)
   4b6d8:	012fc83a 	sub	r23,zero,r4
   4b6dc:	b800ad26 	beq	r23,zero,4b994 <_dtoa_r+0x1530>
   4b6e0:	b88003cc 	andi	r2,r23,15
   4b6e4:	100490fa 	slli	r2,r2,3
   4b6e8:	00c00174 	movhi	r3,5
   4b6ec:	18d30904 	addi	r3,r3,19492
   4b6f0:	1885883a 	add	r2,r3,r2
   4b6f4:	11800017 	ldw	r6,0(r2)
   4b6f8:	11c00117 	ldw	r7,4(r2)
   4b6fc:	b82fd13a 	srai	r23,r23,4
   4b700:	9009883a 	mov	r4,r18
   4b704:	980b883a 	mov	r5,r19
   4b708:	0046d040 	call	46d04 <__muldf3>
   4b70c:	1029883a 	mov	r20,r2
   4b710:	182b883a 	mov	r21,r3
   4b714:	b800f426 	beq	r23,zero,4bae8 <_dtoa_r+0x1684>
   4b718:	02000174 	movhi	r8,5
   4b71c:	4212ff04 	addi	r8,r8,19452
   4b720:	8029883a 	mov	r20,r16
   4b724:	04400084 	movi	r17,2
   4b728:	4021883a 	mov	r16,r8
   4b72c:	b980004c 	andi	r6,r23,1
   4b730:	1009883a 	mov	r4,r2
   4b734:	b82fd07a 	srai	r23,r23,1
   4b738:	180b883a 	mov	r5,r3
   4b73c:	30000426 	beq	r6,zero,4b750 <_dtoa_r+0x12ec>
   4b740:	81800017 	ldw	r6,0(r16)
   4b744:	81c00117 	ldw	r7,4(r16)
   4b748:	8c400044 	addi	r17,r17,1
   4b74c:	0046d040 	call	46d04 <__muldf3>
   4b750:	84000204 	addi	r16,r16,8
   4b754:	b83ff51e 	bne	r23,zero,4b72c <__alt_data_end+0xfffd972c>
   4b758:	a021883a 	mov	r16,r20
   4b75c:	182b883a 	mov	r21,r3
   4b760:	1029883a 	mov	r20,r2
   4b764:	003c5506 	br	4a8bc <__alt_data_end+0xfffd88bc>
   4b768:	d9800517 	ldw	r6,20(sp)
   4b76c:	d9000717 	ldw	r4,28(sp)
   4b770:	00c00c04 	movi	r3,48
   4b774:	31800044 	addi	r6,r6,1
   4b778:	d9800515 	stw	r6,20(sp)
   4b77c:	20c00005 	stb	r3,0(r4)
   4b780:	02000c44 	movi	r8,49
   4b784:	003da206 	br	4ae10 <__alt_data_end+0xfffd8e10>
   4b788:	89400117 	ldw	r5,4(r17)
   4b78c:	8009883a 	mov	r4,r16
   4b790:	004cc500 	call	4cc50 <_Balloc>
   4b794:	89800417 	ldw	r6,16(r17)
   4b798:	11000304 	addi	r4,r2,12
   4b79c:	89400304 	addi	r5,r17,12
   4b7a0:	31800084 	addi	r6,r6,2
   4b7a4:	318d883a 	add	r6,r6,r6
   4b7a8:	318d883a 	add	r6,r6,r6
   4b7ac:	1027883a 	mov	r19,r2
   4b7b0:	004c9bc0 	call	4c9bc <memcpy>
   4b7b4:	8009883a 	mov	r4,r16
   4b7b8:	980b883a 	mov	r5,r19
   4b7bc:	01800044 	movi	r6,1
   4b7c0:	004d3d40 	call	4d3d4 <__lshift>
   4b7c4:	1029883a 	mov	r20,r2
   4b7c8:	003e8606 	br	4b1e4 <__alt_data_end+0xfffd91e4>
   4b7cc:	00800e44 	movi	r2,57
   4b7d0:	90809526 	beq	r18,r2,4ba28 <_dtoa_r+0x15c4>
   4b7d4:	92000044 	addi	r8,r18,1
   4b7d8:	003f2306 	br	4b468 <__alt_data_end+0xfffd9468>
   4b7dc:	9011883a 	mov	r8,r18
   4b7e0:	8825883a 	mov	r18,r17
   4b7e4:	a023883a 	mov	r17,r20
   4b7e8:	003e3706 	br	4b0c8 <__alt_data_end+0xfffd90c8>
   4b7ec:	002b883a 	mov	r21,zero
   4b7f0:	0023883a 	mov	r17,zero
   4b7f4:	003f5606 	br	4b550 <__alt_data_end+0xfffd9550>
   4b7f8:	51bfffc4 	addi	r6,r10,-1
   4b7fc:	300490fa 	slli	r2,r6,3
   4b800:	00c00174 	movhi	r3,5
   4b804:	18d30904 	addi	r3,r3,19492
   4b808:	1885883a 	add	r2,r3,r2
   4b80c:	d9c00e17 	ldw	r7,56(sp)
   4b810:	11000017 	ldw	r4,0(r2)
   4b814:	11400117 	ldw	r5,4(r2)
   4b818:	d8800717 	ldw	r2,28(sp)
   4b81c:	d9801015 	stw	r6,64(sp)
   4b820:	880d883a 	mov	r6,r17
   4b824:	da801615 	stw	r10,88(sp)
   4b828:	15c00044 	addi	r23,r2,1
   4b82c:	0046d040 	call	46d04 <__muldf3>
   4b830:	a80b883a 	mov	r5,r21
   4b834:	a009883a 	mov	r4,r20
   4b838:	d8c01115 	stw	r3,68(sp)
   4b83c:	d8800e15 	stw	r2,56(sp)
   4b840:	0047cf80 	call	47cf8 <__fixdfsi>
   4b844:	1009883a 	mov	r4,r2
   4b848:	1023883a 	mov	r17,r2
   4b84c:	0047d800 	call	47d80 <__floatsidf>
   4b850:	a009883a 	mov	r4,r20
   4b854:	a80b883a 	mov	r5,r21
   4b858:	100d883a 	mov	r6,r2
   4b85c:	180f883a 	mov	r7,r3
   4b860:	00474280 	call	47428 <__subdf3>
   4b864:	1813883a 	mov	r9,r3
   4b868:	d8c00717 	ldw	r3,28(sp)
   4b86c:	8c400c04 	addi	r17,r17,48
   4b870:	1011883a 	mov	r8,r2
   4b874:	1c400005 	stb	r17,0(r3)
   4b878:	da801617 	ldw	r10,88(sp)
   4b87c:	00800044 	movi	r2,1
   4b880:	50802326 	beq	r10,r2,4b910 <_dtoa_r+0x14ac>
   4b884:	d8800717 	ldw	r2,28(sp)
   4b888:	b82b883a 	mov	r21,r23
   4b88c:	dc001315 	stw	r16,76(sp)
   4b890:	12a9883a 	add	r20,r2,r10
   4b894:	4807883a 	mov	r3,r9
   4b898:	4005883a 	mov	r2,r8
   4b89c:	dc801415 	stw	r18,80(sp)
   4b8a0:	000d883a 	mov	r6,zero
   4b8a4:	01d00934 	movhi	r7,16420
   4b8a8:	1009883a 	mov	r4,r2
   4b8ac:	180b883a 	mov	r5,r3
   4b8b0:	0046d040 	call	46d04 <__muldf3>
   4b8b4:	180b883a 	mov	r5,r3
   4b8b8:	1009883a 	mov	r4,r2
   4b8bc:	1821883a 	mov	r16,r3
   4b8c0:	1025883a 	mov	r18,r2
   4b8c4:	0047cf80 	call	47cf8 <__fixdfsi>
   4b8c8:	1009883a 	mov	r4,r2
   4b8cc:	1023883a 	mov	r17,r2
   4b8d0:	0047d800 	call	47d80 <__floatsidf>
   4b8d4:	9009883a 	mov	r4,r18
   4b8d8:	800b883a 	mov	r5,r16
   4b8dc:	100d883a 	mov	r6,r2
   4b8e0:	180f883a 	mov	r7,r3
   4b8e4:	8c400c04 	addi	r17,r17,48
   4b8e8:	00474280 	call	47428 <__subdf3>
   4b8ec:	ad400044 	addi	r21,r21,1
   4b8f0:	ac7fffc5 	stb	r17,-1(r21)
   4b8f4:	ad3fea1e 	bne	r21,r20,4b8a0 <__alt_data_end+0xfffd98a0>
   4b8f8:	1813883a 	mov	r9,r3
   4b8fc:	d8c01017 	ldw	r3,64(sp)
   4b900:	dc001317 	ldw	r16,76(sp)
   4b904:	dc801417 	ldw	r18,80(sp)
   4b908:	1011883a 	mov	r8,r2
   4b90c:	b8ef883a 	add	r23,r23,r3
   4b910:	d9000e17 	ldw	r4,56(sp)
   4b914:	d9401117 	ldw	r5,68(sp)
   4b918:	000d883a 	mov	r6,zero
   4b91c:	01cff834 	movhi	r7,16352
   4b920:	da001715 	stw	r8,92(sp)
   4b924:	da401515 	stw	r9,84(sp)
   4b928:	0045a380 	call	45a38 <__adddf3>
   4b92c:	da001717 	ldw	r8,92(sp)
   4b930:	da401517 	ldw	r9,84(sp)
   4b934:	1009883a 	mov	r4,r2
   4b938:	400d883a 	mov	r6,r8
   4b93c:	480f883a 	mov	r7,r9
   4b940:	180b883a 	mov	r5,r3
   4b944:	00515300 	call	51530 <__ledf2>
   4b948:	da001717 	ldw	r8,92(sp)
   4b94c:	da401517 	ldw	r9,84(sp)
   4b950:	10003b0e 	bge	r2,zero,4ba40 <_dtoa_r+0x15dc>
   4b954:	d9001217 	ldw	r4,72(sp)
   4b958:	bd7fffc3 	ldbu	r21,-1(r23)
   4b95c:	d9000515 	stw	r4,20(sp)
   4b960:	003d1c06 	br	4add4 <__alt_data_end+0xfffd8dd4>
   4b964:	d8c00817 	ldw	r3,32(sp)
   4b968:	18a9c83a 	sub	r20,r3,r2
   4b96c:	0005883a 	mov	r2,zero
   4b970:	003d3706 	br	4ae50 <__alt_data_end+0xfffd8e50>
   4b974:	00800044 	movi	r2,1
   4b978:	003dd006 	br	4b0bc <__alt_data_end+0xfffd90bc>
   4b97c:	d8c00217 	ldw	r3,8(sp)
   4b980:	00800d84 	movi	r2,54
   4b984:	dd400917 	ldw	r21,36(sp)
   4b988:	10c5c83a 	sub	r2,r2,r3
   4b98c:	dd000817 	ldw	r20,32(sp)
   4b990:	003d2f06 	br	4ae50 <__alt_data_end+0xfffd8e50>
   4b994:	9029883a 	mov	r20,r18
   4b998:	982b883a 	mov	r21,r19
   4b99c:	04400084 	movi	r17,2
   4b9a0:	003bc606 	br	4a8bc <__alt_data_end+0xfffd88bc>
   4b9a4:	d8800617 	ldw	r2,24(sp)
   4b9a8:	103efc26 	beq	r2,zero,4b59c <__alt_data_end+0xfffd959c>
   4b9ac:	d8c00c17 	ldw	r3,48(sp)
   4b9b0:	00fc890e 	bge	zero,r3,4abd8 <__alt_data_end+0xfffd8bd8>
   4b9b4:	a80b883a 	mov	r5,r21
   4b9b8:	a009883a 	mov	r4,r20
   4b9bc:	000d883a 	mov	r6,zero
   4b9c0:	01d00934 	movhi	r7,16420
   4b9c4:	0046d040 	call	46d04 <__muldf3>
   4b9c8:	89000044 	addi	r4,r17,1
   4b9cc:	1029883a 	mov	r20,r2
   4b9d0:	182b883a 	mov	r21,r3
   4b9d4:	0047d800 	call	47d80 <__floatsidf>
   4b9d8:	a009883a 	mov	r4,r20
   4b9dc:	a80b883a 	mov	r5,r21
   4b9e0:	100d883a 	mov	r6,r2
   4b9e4:	180f883a 	mov	r7,r3
   4b9e8:	0046d040 	call	46d04 <__muldf3>
   4b9ec:	1009883a 	mov	r4,r2
   4b9f0:	180b883a 	mov	r5,r3
   4b9f4:	000d883a 	mov	r6,zero
   4b9f8:	01d00734 	movhi	r7,16412
   4b9fc:	0045a380 	call	45a38 <__adddf3>
   4ba00:	d9000517 	ldw	r4,20(sp)
   4ba04:	1023883a 	mov	r17,r2
   4ba08:	00bf3034 	movhi	r2,64704
   4ba0c:	213fffc4 	addi	r4,r4,-1
   4ba10:	1885883a 	add	r2,r3,r2
   4ba14:	d9001215 	stw	r4,72(sp)
   4ba18:	d8800e15 	stw	r2,56(sp)
   4ba1c:	da800c17 	ldw	r10,48(sp)
   4ba20:	003bc306 	br	4a930 <__alt_data_end+0xfffd8930>
   4ba24:	b039883a 	mov	fp,r22
   4ba28:	01000e44 	movi	r4,57
   4ba2c:	8825883a 	mov	r18,r17
   4ba30:	9dc00044 	addi	r23,r19,1
   4ba34:	99000005 	stb	r4,0(r19)
   4ba38:	a023883a 	mov	r17,r20
   4ba3c:	003dae06 	br	4b0f8 <__alt_data_end+0xfffd90f8>
   4ba40:	d9800e17 	ldw	r6,56(sp)
   4ba44:	d9c01117 	ldw	r7,68(sp)
   4ba48:	0009883a 	mov	r4,zero
   4ba4c:	014ff834 	movhi	r5,16352
   4ba50:	da001715 	stw	r8,92(sp)
   4ba54:	da401515 	stw	r9,84(sp)
   4ba58:	00474280 	call	47428 <__subdf3>
   4ba5c:	da001717 	ldw	r8,92(sp)
   4ba60:	da401517 	ldw	r9,84(sp)
   4ba64:	1009883a 	mov	r4,r2
   4ba68:	180b883a 	mov	r5,r3
   4ba6c:	400d883a 	mov	r6,r8
   4ba70:	480f883a 	mov	r7,r9
   4ba74:	0046c240 	call	46c24 <__gedf2>
   4ba78:	00bc570e 	bge	zero,r2,4abd8 <__alt_data_end+0xfffd8bd8>
   4ba7c:	01000c04 	movi	r4,48
   4ba80:	00000106 	br	4ba88 <_dtoa_r+0x1624>
   4ba84:	102f883a 	mov	r23,r2
   4ba88:	b8bfffc4 	addi	r2,r23,-1
   4ba8c:	10c00007 	ldb	r3,0(r2)
   4ba90:	193ffc26 	beq	r3,r4,4ba84 <__alt_data_end+0xfffd9a84>
   4ba94:	d9801217 	ldw	r6,72(sp)
   4ba98:	d9800515 	stw	r6,20(sp)
   4ba9c:	003c1f06 	br	4ab1c <__alt_data_end+0xfffd8b1c>
   4baa0:	d8801217 	ldw	r2,72(sp)
   4baa4:	dc001117 	ldw	r16,68(sp)
   4baa8:	d8800515 	stw	r2,20(sp)
   4baac:	003cc906 	br	4add4 <__alt_data_end+0xfffd8dd4>
   4bab0:	dd801317 	ldw	r22,76(sp)
   4bab4:	dc001117 	ldw	r16,68(sp)
   4bab8:	dcc01417 	ldw	r19,80(sp)
   4babc:	dc801017 	ldw	r18,64(sp)
   4bac0:	003c4506 	br	4abd8 <__alt_data_end+0xfffd8bd8>
   4bac4:	103e5d1e 	bne	r2,zero,4b43c <__alt_data_end+0xfffd943c>
   4bac8:	4080004c 	andi	r2,r8,1
   4bacc:	103e5b26 	beq	r2,zero,4b43c <__alt_data_end+0xfffd943c>
   4bad0:	003e5706 	br	4b430 <__alt_data_end+0xfffd9430>
   4bad4:	d8c00317 	ldw	r3,12(sp)
   4bad8:	00800084 	movi	r2,2
   4badc:	10c00a16 	blt	r2,r3,4bb08 <_dtoa_r+0x16a4>
   4bae0:	d9000c17 	ldw	r4,48(sp)
   4bae4:	003e8306 	br	4b4f4 <__alt_data_end+0xfffd94f4>
   4bae8:	04400084 	movi	r17,2
   4baec:	003b7306 	br	4a8bc <__alt_data_end+0xfffd88bc>
   4baf0:	d9801217 	ldw	r6,72(sp)
   4baf4:	d9800515 	stw	r6,20(sp)
   4baf8:	003cb606 	br	4add4 <__alt_data_end+0xfffd8dd4>
   4bafc:	d9001217 	ldw	r4,72(sp)
   4bb00:	d9000515 	stw	r4,20(sp)
   4bb04:	003c0506 	br	4ab1c <__alt_data_end+0xfffd8b1c>
   4bb08:	d9800c17 	ldw	r6,48(sp)
   4bb0c:	d9800615 	stw	r6,24(sp)
   4bb10:	003e8306 	br	4b520 <__alt_data_end+0xfffd9520>
   4bb14:	d9800317 	ldw	r6,12(sp)
   4bb18:	00800084 	movi	r2,2
   4bb1c:	11800216 	blt	r2,r6,4bb28 <_dtoa_r+0x16c4>
   4bb20:	d8800c17 	ldw	r2,48(sp)
   4bb24:	003da606 	br	4b1c0 <__alt_data_end+0xfffd91c0>
   4bb28:	d8800c17 	ldw	r2,48(sp)
   4bb2c:	d8800615 	stw	r2,24(sp)
   4bb30:	003e7b06 	br	4b520 <__alt_data_end+0xfffd9520>
   4bb34:	05000044 	movi	r20,1
   4bb38:	003b0506 	br	4a750 <__alt_data_end+0xfffd8750>
   4bb3c:	8009883a 	mov	r4,r16
   4bb40:	80001115 	stw	zero,68(r16)
   4bb44:	000b883a 	mov	r5,zero
   4bb48:	004cc500 	call	4cc50 <_Balloc>
   4bb4c:	d8800715 	stw	r2,28(sp)
   4bb50:	d8c00717 	ldw	r3,28(sp)
   4bb54:	00bfffc4 	movi	r2,-1
   4bb58:	01000044 	movi	r4,1
   4bb5c:	d8800c15 	stw	r2,48(sp)
   4bb60:	80c01015 	stw	r3,64(r16)
   4bb64:	d9000b15 	stw	r4,44(sp)
   4bb68:	d8800615 	stw	r2,24(sp)
   4bb6c:	d8002215 	stw	zero,136(sp)
   4bb70:	003c1906 	br	4abd8 <__alt_data_end+0xfffd8bd8>
   4bb74:	193d2926 	beq	r3,r4,4b01c <__alt_data_end+0xfffd901c>
   4bb78:	00c00f04 	movi	r3,60
   4bb7c:	1885c83a 	sub	r2,r3,r2
   4bb80:	003d7b06 	br	4b170 <__alt_data_end+0xfffd9170>
   4bb84:	000b883a 	mov	r5,zero
   4bb88:	003b1006 	br	4a7cc <__alt_data_end+0xfffd87cc>

0004bb8c <__sfvwrite_r>:
   4bb8c:	30800217 	ldw	r2,8(r6)
   4bb90:	10006726 	beq	r2,zero,4bd30 <__sfvwrite_r+0x1a4>
   4bb94:	defff404 	addi	sp,sp,-48
   4bb98:	dd000615 	stw	r20,24(sp)
   4bb9c:	2029883a 	mov	r20,r4
   4bba0:	2900030b 	ldhu	r4,12(r5)
   4bba4:	ddc00915 	stw	r23,36(sp)
   4bba8:	dc000215 	stw	r16,8(sp)
   4bbac:	dfc00b15 	stw	ra,44(sp)
   4bbb0:	df000a15 	stw	fp,40(sp)
   4bbb4:	dd800815 	stw	r22,32(sp)
   4bbb8:	dd400715 	stw	r21,28(sp)
   4bbbc:	dcc00515 	stw	r19,20(sp)
   4bbc0:	dc800415 	stw	r18,16(sp)
   4bbc4:	dc400315 	stw	r17,12(sp)
   4bbc8:	2080020c 	andi	r2,r4,8
   4bbcc:	2821883a 	mov	r16,r5
   4bbd0:	302f883a 	mov	r23,r6
   4bbd4:	10002726 	beq	r2,zero,4bc74 <__sfvwrite_r+0xe8>
   4bbd8:	28800417 	ldw	r2,16(r5)
   4bbdc:	10002526 	beq	r2,zero,4bc74 <__sfvwrite_r+0xe8>
   4bbe0:	2080008c 	andi	r2,r4,2
   4bbe4:	bc400017 	ldw	r17,0(r23)
   4bbe8:	10002a26 	beq	r2,zero,4bc94 <__sfvwrite_r+0x108>
   4bbec:	05600034 	movhi	r21,32768
   4bbf0:	0027883a 	mov	r19,zero
   4bbf4:	0025883a 	mov	r18,zero
   4bbf8:	ad7f0004 	addi	r21,r21,-1024
   4bbfc:	980d883a 	mov	r6,r19
   4bc00:	a009883a 	mov	r4,r20
   4bc04:	90004626 	beq	r18,zero,4bd20 <__sfvwrite_r+0x194>
   4bc08:	900f883a 	mov	r7,r18
   4bc0c:	81400717 	ldw	r5,28(r16)
   4bc10:	ac80022e 	bgeu	r21,r18,4bc1c <__sfvwrite_r+0x90>
   4bc14:	01e00034 	movhi	r7,32768
   4bc18:	39ff0004 	addi	r7,r7,-1024
   4bc1c:	80800917 	ldw	r2,36(r16)
   4bc20:	103ee83a 	callr	r2
   4bc24:	0080520e 	bge	zero,r2,4bd70 <__sfvwrite_r+0x1e4>
   4bc28:	b8c00217 	ldw	r3,8(r23)
   4bc2c:	98a7883a 	add	r19,r19,r2
   4bc30:	90a5c83a 	sub	r18,r18,r2
   4bc34:	1885c83a 	sub	r2,r3,r2
   4bc38:	b8800215 	stw	r2,8(r23)
   4bc3c:	103fef1e 	bne	r2,zero,4bbfc <__alt_data_end+0xfffd9bfc>
   4bc40:	0005883a 	mov	r2,zero
   4bc44:	dfc00b17 	ldw	ra,44(sp)
   4bc48:	df000a17 	ldw	fp,40(sp)
   4bc4c:	ddc00917 	ldw	r23,36(sp)
   4bc50:	dd800817 	ldw	r22,32(sp)
   4bc54:	dd400717 	ldw	r21,28(sp)
   4bc58:	dd000617 	ldw	r20,24(sp)
   4bc5c:	dcc00517 	ldw	r19,20(sp)
   4bc60:	dc800417 	ldw	r18,16(sp)
   4bc64:	dc400317 	ldw	r17,12(sp)
   4bc68:	dc000217 	ldw	r16,8(sp)
   4bc6c:	dec00c04 	addi	sp,sp,48
   4bc70:	f800283a 	ret
   4bc74:	a009883a 	mov	r4,r20
   4bc78:	800b883a 	mov	r5,r16
   4bc7c:	004f4c80 	call	4f4c8 <__swsetup_r>
   4bc80:	1000ec1e 	bne	r2,zero,4c034 <__sfvwrite_r+0x4a8>
   4bc84:	8100030b 	ldhu	r4,12(r16)
   4bc88:	bc400017 	ldw	r17,0(r23)
   4bc8c:	2080008c 	andi	r2,r4,2
   4bc90:	103fd61e 	bne	r2,zero,4bbec <__alt_data_end+0xfffd9bec>
   4bc94:	2080004c 	andi	r2,r4,1
   4bc98:	10003a1e 	bne	r2,zero,4bd84 <__sfvwrite_r+0x1f8>
   4bc9c:	0039883a 	mov	fp,zero
   4bca0:	0025883a 	mov	r18,zero
   4bca4:	90001a26 	beq	r18,zero,4bd10 <__sfvwrite_r+0x184>
   4bca8:	2080800c 	andi	r2,r4,512
   4bcac:	85800217 	ldw	r22,8(r16)
   4bcb0:	10007626 	beq	r2,zero,4be8c <__sfvwrite_r+0x300>
   4bcb4:	b027883a 	mov	r19,r22
   4bcb8:	95809436 	bltu	r18,r22,4bf0c <__sfvwrite_r+0x380>
   4bcbc:	2081200c 	andi	r2,r4,1152
   4bcc0:	10009f1e 	bne	r2,zero,4bf40 <__sfvwrite_r+0x3b4>
   4bcc4:	81000017 	ldw	r4,0(r16)
   4bcc8:	e00b883a 	mov	r5,fp
   4bccc:	980d883a 	mov	r6,r19
   4bcd0:	004caf40 	call	4caf4 <memmove>
   4bcd4:	81000217 	ldw	r4,8(r16)
   4bcd8:	81400017 	ldw	r5,0(r16)
   4bcdc:	9005883a 	mov	r2,r18
   4bce0:	2587c83a 	sub	r3,r4,r22
   4bce4:	2ce7883a 	add	r19,r5,r19
   4bce8:	80c00215 	stw	r3,8(r16)
   4bcec:	84c00015 	stw	r19,0(r16)
   4bcf0:	b8c00217 	ldw	r3,8(r23)
   4bcf4:	e0b9883a 	add	fp,fp,r2
   4bcf8:	90a5c83a 	sub	r18,r18,r2
   4bcfc:	1885c83a 	sub	r2,r3,r2
   4bd00:	b8800215 	stw	r2,8(r23)
   4bd04:	103fce26 	beq	r2,zero,4bc40 <__alt_data_end+0xfffd9c40>
   4bd08:	8100030b 	ldhu	r4,12(r16)
   4bd0c:	903fe61e 	bne	r18,zero,4bca8 <__alt_data_end+0xfffd9ca8>
   4bd10:	8f000017 	ldw	fp,0(r17)
   4bd14:	8c800117 	ldw	r18,4(r17)
   4bd18:	8c400204 	addi	r17,r17,8
   4bd1c:	003fe106 	br	4bca4 <__alt_data_end+0xfffd9ca4>
   4bd20:	8cc00017 	ldw	r19,0(r17)
   4bd24:	8c800117 	ldw	r18,4(r17)
   4bd28:	8c400204 	addi	r17,r17,8
   4bd2c:	003fb306 	br	4bbfc <__alt_data_end+0xfffd9bfc>
   4bd30:	0005883a 	mov	r2,zero
   4bd34:	f800283a 	ret
   4bd38:	00a00034 	movhi	r2,32768
   4bd3c:	10bfffc4 	addi	r2,r2,-1
   4bd40:	9009883a 	mov	r4,r18
   4bd44:	1480012e 	bgeu	r2,r18,4bd4c <__sfvwrite_r+0x1c0>
   4bd48:	1009883a 	mov	r4,r2
   4bd4c:	980b883a 	mov	r5,r19
   4bd50:	0044b000 	call	44b00 <__divsi3>
   4bd54:	81400717 	ldw	r5,28(r16)
   4bd58:	80c00917 	ldw	r3,36(r16)
   4bd5c:	988f383a 	mul	r7,r19,r2
   4bd60:	a009883a 	mov	r4,r20
   4bd64:	e00d883a 	mov	r6,fp
   4bd68:	183ee83a 	callr	r3
   4bd6c:	00bfe016 	blt	zero,r2,4bcf0 <__alt_data_end+0xfffd9cf0>
   4bd70:	8080030b 	ldhu	r2,12(r16)
   4bd74:	10801014 	ori	r2,r2,64
   4bd78:	8080030d 	sth	r2,12(r16)
   4bd7c:	00bfffc4 	movi	r2,-1
   4bd80:	003fb006 	br	4bc44 <__alt_data_end+0xfffd9c44>
   4bd84:	0027883a 	mov	r19,zero
   4bd88:	0011883a 	mov	r8,zero
   4bd8c:	0039883a 	mov	fp,zero
   4bd90:	0025883a 	mov	r18,zero
   4bd94:	90001f26 	beq	r18,zero,4be14 <__sfvwrite_r+0x288>
   4bd98:	40006026 	beq	r8,zero,4bf1c <__sfvwrite_r+0x390>
   4bd9c:	982b883a 	mov	r21,r19
   4bda0:	94c0012e 	bgeu	r18,r19,4bda8 <__sfvwrite_r+0x21c>
   4bda4:	902b883a 	mov	r21,r18
   4bda8:	81000017 	ldw	r4,0(r16)
   4bdac:	80800417 	ldw	r2,16(r16)
   4bdb0:	a82d883a 	mov	r22,r21
   4bdb4:	81800217 	ldw	r6,8(r16)
   4bdb8:	81c00517 	ldw	r7,20(r16)
   4bdbc:	1100022e 	bgeu	r2,r4,4bdc8 <__sfvwrite_r+0x23c>
   4bdc0:	31c7883a 	add	r3,r6,r7
   4bdc4:	1d401816 	blt	r3,r21,4be28 <__sfvwrite_r+0x29c>
   4bdc8:	a9c04416 	blt	r21,r7,4bedc <__sfvwrite_r+0x350>
   4bdcc:	80800917 	ldw	r2,36(r16)
   4bdd0:	81400717 	ldw	r5,28(r16)
   4bdd4:	a009883a 	mov	r4,r20
   4bdd8:	da000115 	stw	r8,4(sp)
   4bddc:	e00d883a 	mov	r6,fp
   4bde0:	103ee83a 	callr	r2
   4bde4:	102d883a 	mov	r22,r2
   4bde8:	da000117 	ldw	r8,4(sp)
   4bdec:	00bfe00e 	bge	zero,r2,4bd70 <__alt_data_end+0xfffd9d70>
   4bdf0:	9da7c83a 	sub	r19,r19,r22
   4bdf4:	98001f26 	beq	r19,zero,4be74 <__sfvwrite_r+0x2e8>
   4bdf8:	b8800217 	ldw	r2,8(r23)
   4bdfc:	e5b9883a 	add	fp,fp,r22
   4be00:	95a5c83a 	sub	r18,r18,r22
   4be04:	15adc83a 	sub	r22,r2,r22
   4be08:	bd800215 	stw	r22,8(r23)
   4be0c:	b03f8c26 	beq	r22,zero,4bc40 <__alt_data_end+0xfffd9c40>
   4be10:	903fe11e 	bne	r18,zero,4bd98 <__alt_data_end+0xfffd9d98>
   4be14:	8f000017 	ldw	fp,0(r17)
   4be18:	8c800117 	ldw	r18,4(r17)
   4be1c:	0011883a 	mov	r8,zero
   4be20:	8c400204 	addi	r17,r17,8
   4be24:	003fdb06 	br	4bd94 <__alt_data_end+0xfffd9d94>
   4be28:	180d883a 	mov	r6,r3
   4be2c:	e00b883a 	mov	r5,fp
   4be30:	da000115 	stw	r8,4(sp)
   4be34:	d8c00015 	stw	r3,0(sp)
   4be38:	004caf40 	call	4caf4 <memmove>
   4be3c:	d8c00017 	ldw	r3,0(sp)
   4be40:	80800017 	ldw	r2,0(r16)
   4be44:	a009883a 	mov	r4,r20
   4be48:	800b883a 	mov	r5,r16
   4be4c:	10c5883a 	add	r2,r2,r3
   4be50:	80800015 	stw	r2,0(r16)
   4be54:	d8c00015 	stw	r3,0(sp)
   4be58:	004f8e80 	call	4f8e8 <_fflush_r>
   4be5c:	d8c00017 	ldw	r3,0(sp)
   4be60:	da000117 	ldw	r8,4(sp)
   4be64:	103fc21e 	bne	r2,zero,4bd70 <__alt_data_end+0xfffd9d70>
   4be68:	182d883a 	mov	r22,r3
   4be6c:	9da7c83a 	sub	r19,r19,r22
   4be70:	983fe11e 	bne	r19,zero,4bdf8 <__alt_data_end+0xfffd9df8>
   4be74:	a009883a 	mov	r4,r20
   4be78:	800b883a 	mov	r5,r16
   4be7c:	004f8e80 	call	4f8e8 <_fflush_r>
   4be80:	103fbb1e 	bne	r2,zero,4bd70 <__alt_data_end+0xfffd9d70>
   4be84:	0011883a 	mov	r8,zero
   4be88:	003fdb06 	br	4bdf8 <__alt_data_end+0xfffd9df8>
   4be8c:	81000017 	ldw	r4,0(r16)
   4be90:	80800417 	ldw	r2,16(r16)
   4be94:	11000236 	bltu	r2,r4,4bea0 <__sfvwrite_r+0x314>
   4be98:	84c00517 	ldw	r19,20(r16)
   4be9c:	94ffa62e 	bgeu	r18,r19,4bd38 <__alt_data_end+0xfffd9d38>
   4bea0:	9027883a 	mov	r19,r18
   4bea4:	b480012e 	bgeu	r22,r18,4beac <__sfvwrite_r+0x320>
   4bea8:	b027883a 	mov	r19,r22
   4beac:	e00b883a 	mov	r5,fp
   4beb0:	980d883a 	mov	r6,r19
   4beb4:	004caf40 	call	4caf4 <memmove>
   4beb8:	80800217 	ldw	r2,8(r16)
   4bebc:	80c00017 	ldw	r3,0(r16)
   4bec0:	14c5c83a 	sub	r2,r2,r19
   4bec4:	1cc7883a 	add	r3,r3,r19
   4bec8:	80800215 	stw	r2,8(r16)
   4becc:	80c00015 	stw	r3,0(r16)
   4bed0:	10004326 	beq	r2,zero,4bfe0 <__sfvwrite_r+0x454>
   4bed4:	9805883a 	mov	r2,r19
   4bed8:	003f8506 	br	4bcf0 <__alt_data_end+0xfffd9cf0>
   4bedc:	a80d883a 	mov	r6,r21
   4bee0:	e00b883a 	mov	r5,fp
   4bee4:	da000115 	stw	r8,4(sp)
   4bee8:	004caf40 	call	4caf4 <memmove>
   4beec:	80800217 	ldw	r2,8(r16)
   4bef0:	80c00017 	ldw	r3,0(r16)
   4bef4:	da000117 	ldw	r8,4(sp)
   4bef8:	1545c83a 	sub	r2,r2,r21
   4befc:	1d6b883a 	add	r21,r3,r21
   4bf00:	80800215 	stw	r2,8(r16)
   4bf04:	85400015 	stw	r21,0(r16)
   4bf08:	003fb906 	br	4bdf0 <__alt_data_end+0xfffd9df0>
   4bf0c:	81000017 	ldw	r4,0(r16)
   4bf10:	902d883a 	mov	r22,r18
   4bf14:	9027883a 	mov	r19,r18
   4bf18:	003f6b06 	br	4bcc8 <__alt_data_end+0xfffd9cc8>
   4bf1c:	e009883a 	mov	r4,fp
   4bf20:	01400284 	movi	r5,10
   4bf24:	900d883a 	mov	r6,r18
   4bf28:	004c8d40 	call	4c8d4 <memchr>
   4bf2c:	10003e26 	beq	r2,zero,4c028 <__sfvwrite_r+0x49c>
   4bf30:	10800044 	addi	r2,r2,1
   4bf34:	1727c83a 	sub	r19,r2,fp
   4bf38:	02000044 	movi	r8,1
   4bf3c:	003f9706 	br	4bd9c <__alt_data_end+0xfffd9d9c>
   4bf40:	80800517 	ldw	r2,20(r16)
   4bf44:	81400417 	ldw	r5,16(r16)
   4bf48:	80c00017 	ldw	r3,0(r16)
   4bf4c:	10a7883a 	add	r19,r2,r2
   4bf50:	9885883a 	add	r2,r19,r2
   4bf54:	1026d7fa 	srli	r19,r2,31
   4bf58:	196bc83a 	sub	r21,r3,r5
   4bf5c:	a9800044 	addi	r6,r21,1
   4bf60:	9885883a 	add	r2,r19,r2
   4bf64:	1027d07a 	srai	r19,r2,1
   4bf68:	3485883a 	add	r2,r6,r18
   4bf6c:	980d883a 	mov	r6,r19
   4bf70:	9880022e 	bgeu	r19,r2,4bf7c <__sfvwrite_r+0x3f0>
   4bf74:	1027883a 	mov	r19,r2
   4bf78:	100d883a 	mov	r6,r2
   4bf7c:	2101000c 	andi	r4,r4,1024
   4bf80:	20001c26 	beq	r4,zero,4bff4 <__sfvwrite_r+0x468>
   4bf84:	a009883a 	mov	r4,r20
   4bf88:	300b883a 	mov	r5,r6
   4bf8c:	004c12c0 	call	4c12c <_malloc_r>
   4bf90:	102d883a 	mov	r22,r2
   4bf94:	10002926 	beq	r2,zero,4c03c <__sfvwrite_r+0x4b0>
   4bf98:	81400417 	ldw	r5,16(r16)
   4bf9c:	1009883a 	mov	r4,r2
   4bfa0:	a80d883a 	mov	r6,r21
   4bfa4:	004c9bc0 	call	4c9bc <memcpy>
   4bfa8:	8080030b 	ldhu	r2,12(r16)
   4bfac:	00fedfc4 	movi	r3,-1153
   4bfb0:	10c4703a 	and	r2,r2,r3
   4bfb4:	10802014 	ori	r2,r2,128
   4bfb8:	8080030d 	sth	r2,12(r16)
   4bfbc:	b549883a 	add	r4,r22,r21
   4bfc0:	9d4bc83a 	sub	r5,r19,r21
   4bfc4:	85800415 	stw	r22,16(r16)
   4bfc8:	84c00515 	stw	r19,20(r16)
   4bfcc:	81000015 	stw	r4,0(r16)
   4bfd0:	902d883a 	mov	r22,r18
   4bfd4:	81400215 	stw	r5,8(r16)
   4bfd8:	9027883a 	mov	r19,r18
   4bfdc:	003f3a06 	br	4bcc8 <__alt_data_end+0xfffd9cc8>
   4bfe0:	a009883a 	mov	r4,r20
   4bfe4:	800b883a 	mov	r5,r16
   4bfe8:	004f8e80 	call	4f8e8 <_fflush_r>
   4bfec:	103fb926 	beq	r2,zero,4bed4 <__alt_data_end+0xfffd9ed4>
   4bff0:	003f5f06 	br	4bd70 <__alt_data_end+0xfffd9d70>
   4bff4:	a009883a 	mov	r4,r20
   4bff8:	004dbf00 	call	4dbf0 <_realloc_r>
   4bffc:	102d883a 	mov	r22,r2
   4c000:	103fee1e 	bne	r2,zero,4bfbc <__alt_data_end+0xfffd9fbc>
   4c004:	81400417 	ldw	r5,16(r16)
   4c008:	a009883a 	mov	r4,r20
   4c00c:	004fe380 	call	4fe38 <_free_r>
   4c010:	8080030b 	ldhu	r2,12(r16)
   4c014:	00ffdfc4 	movi	r3,-129
   4c018:	1884703a 	and	r2,r3,r2
   4c01c:	00c00304 	movi	r3,12
   4c020:	a0c00015 	stw	r3,0(r20)
   4c024:	003f5306 	br	4bd74 <__alt_data_end+0xfffd9d74>
   4c028:	94c00044 	addi	r19,r18,1
   4c02c:	02000044 	movi	r8,1
   4c030:	003f5a06 	br	4bd9c <__alt_data_end+0xfffd9d9c>
   4c034:	00bfffc4 	movi	r2,-1
   4c038:	003f0206 	br	4bc44 <__alt_data_end+0xfffd9c44>
   4c03c:	00800304 	movi	r2,12
   4c040:	a0800015 	stw	r2,0(r20)
   4c044:	8080030b 	ldhu	r2,12(r16)
   4c048:	003f4a06 	br	4bd74 <__alt_data_end+0xfffd9d74>

0004c04c <_setlocale_r>:
   4c04c:	30001b26 	beq	r6,zero,4c0bc <_setlocale_r+0x70>
   4c050:	01400174 	movhi	r5,5
   4c054:	defffe04 	addi	sp,sp,-8
   4c058:	2952ef04 	addi	r5,r5,19388
   4c05c:	3009883a 	mov	r4,r6
   4c060:	dc000015 	stw	r16,0(sp)
   4c064:	dfc00115 	stw	ra,4(sp)
   4c068:	3021883a 	mov	r16,r6
   4c06c:	004e2200 	call	4e220 <strcmp>
   4c070:	1000061e 	bne	r2,zero,4c08c <_setlocale_r+0x40>
   4c074:	00800174 	movhi	r2,5
   4c078:	1092ee04 	addi	r2,r2,19384
   4c07c:	dfc00117 	ldw	ra,4(sp)
   4c080:	dc000017 	ldw	r16,0(sp)
   4c084:	dec00204 	addi	sp,sp,8
   4c088:	f800283a 	ret
   4c08c:	01400174 	movhi	r5,5
   4c090:	2952ee04 	addi	r5,r5,19384
   4c094:	8009883a 	mov	r4,r16
   4c098:	004e2200 	call	4e220 <strcmp>
   4c09c:	103ff526 	beq	r2,zero,4c074 <__alt_data_end+0xfffda074>
   4c0a0:	01400174 	movhi	r5,5
   4c0a4:	2952d904 	addi	r5,r5,19300
   4c0a8:	8009883a 	mov	r4,r16
   4c0ac:	004e2200 	call	4e220 <strcmp>
   4c0b0:	103ff026 	beq	r2,zero,4c074 <__alt_data_end+0xfffda074>
   4c0b4:	0005883a 	mov	r2,zero
   4c0b8:	003ff006 	br	4c07c <__alt_data_end+0xfffda07c>
   4c0bc:	00800174 	movhi	r2,5
   4c0c0:	1092ee04 	addi	r2,r2,19384
   4c0c4:	f800283a 	ret

0004c0c8 <__locale_charset>:
   4c0c8:	00800174 	movhi	r2,5
   4c0cc:	10948704 	addi	r2,r2,21020
   4c0d0:	f800283a 	ret

0004c0d4 <__locale_mb_cur_max>:
   4c0d4:	00800174 	movhi	r2,5
   4c0d8:	109a6004 	addi	r2,r2,27008
   4c0dc:	10800017 	ldw	r2,0(r2)
   4c0e0:	f800283a 	ret

0004c0e4 <__locale_msgcharset>:
   4c0e4:	00800174 	movhi	r2,5
   4c0e8:	10947f04 	addi	r2,r2,20988
   4c0ec:	f800283a 	ret

0004c0f0 <__locale_cjk_lang>:
   4c0f0:	0005883a 	mov	r2,zero
   4c0f4:	f800283a 	ret

0004c0f8 <_localeconv_r>:
   4c0f8:	00800174 	movhi	r2,5
   4c0fc:	10948f04 	addi	r2,r2,21052
   4c100:	f800283a 	ret

0004c104 <setlocale>:
   4c104:	00c00174 	movhi	r3,5
   4c108:	18da5f04 	addi	r3,r3,27004
   4c10c:	2005883a 	mov	r2,r4
   4c110:	19000017 	ldw	r4,0(r3)
   4c114:	280d883a 	mov	r6,r5
   4c118:	100b883a 	mov	r5,r2
   4c11c:	004c04c1 	jmpi	4c04c <_setlocale_r>

0004c120 <localeconv>:
   4c120:	00800174 	movhi	r2,5
   4c124:	10948f04 	addi	r2,r2,21052
   4c128:	f800283a 	ret

0004c12c <_malloc_r>:
   4c12c:	defff504 	addi	sp,sp,-44
   4c130:	dc800315 	stw	r18,12(sp)
   4c134:	dfc00a15 	stw	ra,40(sp)
   4c138:	df000915 	stw	fp,36(sp)
   4c13c:	ddc00815 	stw	r23,32(sp)
   4c140:	dd800715 	stw	r22,28(sp)
   4c144:	dd400615 	stw	r21,24(sp)
   4c148:	dd000515 	stw	r20,20(sp)
   4c14c:	dcc00415 	stw	r19,16(sp)
   4c150:	dc400215 	stw	r17,8(sp)
   4c154:	dc000115 	stw	r16,4(sp)
   4c158:	288002c4 	addi	r2,r5,11
   4c15c:	00c00584 	movi	r3,22
   4c160:	2025883a 	mov	r18,r4
   4c164:	18802a2e 	bgeu	r3,r2,4c210 <_malloc_r+0xe4>
   4c168:	047ffe04 	movi	r17,-8
   4c16c:	1462703a 	and	r17,r2,r17
   4c170:	88009e16 	blt	r17,zero,4c3ec <_malloc_r+0x2c0>
   4c174:	89409d36 	bltu	r17,r5,4c3ec <_malloc_r+0x2c0>
   4c178:	0051e240 	call	51e24 <__malloc_lock>
   4c17c:	00807dc4 	movi	r2,503
   4c180:	14402736 	bltu	r2,r17,4c220 <_malloc_r+0xf4>
   4c184:	8806d0fa 	srli	r3,r17,3
   4c188:	04c00174 	movhi	r19,5
   4c18c:	9cd49d04 	addi	r19,r19,21108
   4c190:	18c5883a 	add	r2,r3,r3
   4c194:	1085883a 	add	r2,r2,r2
   4c198:	1085883a 	add	r2,r2,r2
   4c19c:	9885883a 	add	r2,r19,r2
   4c1a0:	14000317 	ldw	r16,12(r2)
   4c1a4:	80814a26 	beq	r16,r2,4c6d0 <_malloc_r+0x5a4>
   4c1a8:	80c00117 	ldw	r3,4(r16)
   4c1ac:	81000317 	ldw	r4,12(r16)
   4c1b0:	00bfff04 	movi	r2,-4
   4c1b4:	1884703a 	and	r2,r3,r2
   4c1b8:	81400217 	ldw	r5,8(r16)
   4c1bc:	8085883a 	add	r2,r16,r2
   4c1c0:	10c00117 	ldw	r3,4(r2)
   4c1c4:	29000315 	stw	r4,12(r5)
   4c1c8:	21400215 	stw	r5,8(r4)
   4c1cc:	18c00054 	ori	r3,r3,1
   4c1d0:	10c00115 	stw	r3,4(r2)
   4c1d4:	9009883a 	mov	r4,r18
   4c1d8:	0051e440 	call	51e44 <__malloc_unlock>
   4c1dc:	80800204 	addi	r2,r16,8
   4c1e0:	dfc00a17 	ldw	ra,40(sp)
   4c1e4:	df000917 	ldw	fp,36(sp)
   4c1e8:	ddc00817 	ldw	r23,32(sp)
   4c1ec:	dd800717 	ldw	r22,28(sp)
   4c1f0:	dd400617 	ldw	r21,24(sp)
   4c1f4:	dd000517 	ldw	r20,20(sp)
   4c1f8:	dcc00417 	ldw	r19,16(sp)
   4c1fc:	dc800317 	ldw	r18,12(sp)
   4c200:	dc400217 	ldw	r17,8(sp)
   4c204:	dc000117 	ldw	r16,4(sp)
   4c208:	dec00b04 	addi	sp,sp,44
   4c20c:	f800283a 	ret
   4c210:	04400404 	movi	r17,16
   4c214:	89407536 	bltu	r17,r5,4c3ec <_malloc_r+0x2c0>
   4c218:	0051e240 	call	51e24 <__malloc_lock>
   4c21c:	003fd906 	br	4c184 <__alt_data_end+0xfffda184>
   4c220:	8806d27a 	srli	r3,r17,9
   4c224:	18007526 	beq	r3,zero,4c3fc <_malloc_r+0x2d0>
   4c228:	00800104 	movi	r2,4
   4c22c:	10c0ef36 	bltu	r2,r3,4c5ec <_malloc_r+0x4c0>
   4c230:	8806d1ba 	srli	r3,r17,6
   4c234:	19c00e04 	addi	r7,r3,56
   4c238:	39cb883a 	add	r5,r7,r7
   4c23c:	04c00174 	movhi	r19,5
   4c240:	294b883a 	add	r5,r5,r5
   4c244:	9cd49d04 	addi	r19,r19,21108
   4c248:	294b883a 	add	r5,r5,r5
   4c24c:	994b883a 	add	r5,r19,r5
   4c250:	2c000317 	ldw	r16,12(r5)
   4c254:	2c000e26 	beq	r5,r16,4c290 <_malloc_r+0x164>
   4c258:	80800117 	ldw	r2,4(r16)
   4c25c:	01bfff04 	movi	r6,-4
   4c260:	010003c4 	movi	r4,15
   4c264:	1184703a 	and	r2,r2,r6
   4c268:	1447c83a 	sub	r3,r2,r17
   4c26c:	20c00716 	blt	r4,r3,4c28c <_malloc_r+0x160>
   4c270:	1800650e 	bge	r3,zero,4c408 <_malloc_r+0x2dc>
   4c274:	84000317 	ldw	r16,12(r16)
   4c278:	2c000526 	beq	r5,r16,4c290 <_malloc_r+0x164>
   4c27c:	80800117 	ldw	r2,4(r16)
   4c280:	1184703a 	and	r2,r2,r6
   4c284:	1447c83a 	sub	r3,r2,r17
   4c288:	20fff90e 	bge	r4,r3,4c270 <__alt_data_end+0xfffda270>
   4c28c:	39ffffc4 	addi	r7,r7,-1
   4c290:	38c00044 	addi	r3,r7,1
   4c294:	01800174 	movhi	r6,5
   4c298:	9c000417 	ldw	r16,16(r19)
   4c29c:	31949d04 	addi	r6,r6,21108
   4c2a0:	32400204 	addi	r9,r6,8
   4c2a4:	82410326 	beq	r16,r9,4c6b4 <_malloc_r+0x588>
   4c2a8:	81000117 	ldw	r4,4(r16)
   4c2ac:	00bfff04 	movi	r2,-4
   4c2b0:	208e703a 	and	r7,r4,r2
   4c2b4:	3c45c83a 	sub	r2,r7,r17
   4c2b8:	010003c4 	movi	r4,15
   4c2bc:	2080ee16 	blt	r4,r2,4c678 <_malloc_r+0x54c>
   4c2c0:	32400515 	stw	r9,20(r6)
   4c2c4:	32400415 	stw	r9,16(r6)
   4c2c8:	1000510e 	bge	r2,zero,4c410 <_malloc_r+0x2e4>
   4c2cc:	00807fc4 	movi	r2,511
   4c2d0:	11c0ce36 	bltu	r2,r7,4c60c <_malloc_r+0x4e0>
   4c2d4:	3808d0fa 	srli	r4,r7,3
   4c2d8:	01c00044 	movi	r7,1
   4c2dc:	30800117 	ldw	r2,4(r6)
   4c2e0:	210b883a 	add	r5,r4,r4
   4c2e4:	294b883a 	add	r5,r5,r5
   4c2e8:	2009d0ba 	srai	r4,r4,2
   4c2ec:	294b883a 	add	r5,r5,r5
   4c2f0:	298b883a 	add	r5,r5,r6
   4c2f4:	2a000217 	ldw	r8,8(r5)
   4c2f8:	3908983a 	sll	r4,r7,r4
   4c2fc:	81400315 	stw	r5,12(r16)
   4c300:	82000215 	stw	r8,8(r16)
   4c304:	2088b03a 	or	r4,r4,r2
   4c308:	2c000215 	stw	r16,8(r5)
   4c30c:	31000115 	stw	r4,4(r6)
   4c310:	44000315 	stw	r16,12(r8)
   4c314:	1805d0ba 	srai	r2,r3,2
   4c318:	01400044 	movi	r5,1
   4c31c:	288a983a 	sll	r5,r5,r2
   4c320:	21404336 	bltu	r4,r5,4c430 <_malloc_r+0x304>
   4c324:	2144703a 	and	r2,r4,r5
   4c328:	10000a1e 	bne	r2,zero,4c354 <_malloc_r+0x228>
   4c32c:	00bfff04 	movi	r2,-4
   4c330:	294b883a 	add	r5,r5,r5
   4c334:	1886703a 	and	r3,r3,r2
   4c338:	2144703a 	and	r2,r4,r5
   4c33c:	18c00104 	addi	r3,r3,4
   4c340:	1000041e 	bne	r2,zero,4c354 <_malloc_r+0x228>
   4c344:	294b883a 	add	r5,r5,r5
   4c348:	2144703a 	and	r2,r4,r5
   4c34c:	18c00104 	addi	r3,r3,4
   4c350:	103ffc26 	beq	r2,zero,4c344 <__alt_data_end+0xfffda344>
   4c354:	023fff04 	movi	r8,-4
   4c358:	01c003c4 	movi	r7,15
   4c35c:	18c5883a 	add	r2,r3,r3
   4c360:	1085883a 	add	r2,r2,r2
   4c364:	1085883a 	add	r2,r2,r2
   4c368:	9895883a 	add	r10,r19,r2
   4c36c:	52c00304 	addi	r11,r10,12
   4c370:	1819883a 	mov	r12,r3
   4c374:	5c000017 	ldw	r16,0(r11)
   4c378:	59bffd04 	addi	r6,r11,-12
   4c37c:	8180041e 	bne	r16,r6,4c390 <_malloc_r+0x264>
   4c380:	0000ce06 	br	4c6bc <_malloc_r+0x590>
   4c384:	2000d70e 	bge	r4,zero,4c6e4 <_malloc_r+0x5b8>
   4c388:	84000317 	ldw	r16,12(r16)
   4c38c:	8180cb26 	beq	r16,r6,4c6bc <_malloc_r+0x590>
   4c390:	80800117 	ldw	r2,4(r16)
   4c394:	1204703a 	and	r2,r2,r8
   4c398:	1449c83a 	sub	r4,r2,r17
   4c39c:	393ff90e 	bge	r7,r4,4c384 <__alt_data_end+0xfffda384>
   4c3a0:	80800317 	ldw	r2,12(r16)
   4c3a4:	80c00217 	ldw	r3,8(r16)
   4c3a8:	89400054 	ori	r5,r17,1
   4c3ac:	81400115 	stw	r5,4(r16)
   4c3b0:	18800315 	stw	r2,12(r3)
   4c3b4:	10c00215 	stw	r3,8(r2)
   4c3b8:	8463883a 	add	r17,r16,r17
   4c3bc:	9c400515 	stw	r17,20(r19)
   4c3c0:	9c400415 	stw	r17,16(r19)
   4c3c4:	20800054 	ori	r2,r4,1
   4c3c8:	88800115 	stw	r2,4(r17)
   4c3cc:	8a400315 	stw	r9,12(r17)
   4c3d0:	8a400215 	stw	r9,8(r17)
   4c3d4:	8923883a 	add	r17,r17,r4
   4c3d8:	89000015 	stw	r4,0(r17)
   4c3dc:	9009883a 	mov	r4,r18
   4c3e0:	0051e440 	call	51e44 <__malloc_unlock>
   4c3e4:	80800204 	addi	r2,r16,8
   4c3e8:	003f7d06 	br	4c1e0 <__alt_data_end+0xfffda1e0>
   4c3ec:	00800304 	movi	r2,12
   4c3f0:	90800015 	stw	r2,0(r18)
   4c3f4:	0005883a 	mov	r2,zero
   4c3f8:	003f7906 	br	4c1e0 <__alt_data_end+0xfffda1e0>
   4c3fc:	01401f84 	movi	r5,126
   4c400:	01c00fc4 	movi	r7,63
   4c404:	003f8d06 	br	4c23c <__alt_data_end+0xfffda23c>
   4c408:	81000317 	ldw	r4,12(r16)
   4c40c:	003f6a06 	br	4c1b8 <__alt_data_end+0xfffda1b8>
   4c410:	81c5883a 	add	r2,r16,r7
   4c414:	10c00117 	ldw	r3,4(r2)
   4c418:	9009883a 	mov	r4,r18
   4c41c:	18c00054 	ori	r3,r3,1
   4c420:	10c00115 	stw	r3,4(r2)
   4c424:	0051e440 	call	51e44 <__malloc_unlock>
   4c428:	80800204 	addi	r2,r16,8
   4c42c:	003f6c06 	br	4c1e0 <__alt_data_end+0xfffda1e0>
   4c430:	9c000217 	ldw	r16,8(r19)
   4c434:	00bfff04 	movi	r2,-4
   4c438:	85800117 	ldw	r22,4(r16)
   4c43c:	b0ac703a 	and	r22,r22,r2
   4c440:	b4400336 	bltu	r22,r17,4c450 <_malloc_r+0x324>
   4c444:	b445c83a 	sub	r2,r22,r17
   4c448:	00c003c4 	movi	r3,15
   4c44c:	18805d16 	blt	r3,r2,4c5c4 <_malloc_r+0x498>
   4c450:	05c00174 	movhi	r23,5
   4c454:	008001b4 	movhi	r2,6
   4c458:	bdda6104 	addi	r23,r23,27012
   4c45c:	10a1a504 	addi	r2,r2,-31084
   4c460:	15400017 	ldw	r21,0(r2)
   4c464:	b9000017 	ldw	r4,0(r23)
   4c468:	00ffffc4 	movi	r3,-1
   4c46c:	858d883a 	add	r6,r16,r22
   4c470:	8d6b883a 	add	r21,r17,r21
   4c474:	20c0e426 	beq	r4,r3,4c808 <_malloc_r+0x6dc>
   4c478:	ad4403c4 	addi	r21,r21,4111
   4c47c:	00fc0004 	movi	r3,-4096
   4c480:	a8ea703a 	and	r21,r21,r3
   4c484:	9009883a 	mov	r4,r18
   4c488:	a80b883a 	mov	r5,r21
   4c48c:	d9800015 	stw	r6,0(sp)
   4c490:	004e1cc0 	call	4e1cc <_sbrk_r>
   4c494:	00ffffc4 	movi	r3,-1
   4c498:	1029883a 	mov	r20,r2
   4c49c:	d9800017 	ldw	r6,0(sp)
   4c4a0:	10c0a426 	beq	r2,r3,4c734 <_malloc_r+0x608>
   4c4a4:	1180a236 	bltu	r2,r6,4c730 <_malloc_r+0x604>
   4c4a8:	070001b4 	movhi	fp,6
   4c4ac:	e721ad04 	addi	fp,fp,-31052
   4c4b0:	e0c00017 	ldw	r3,0(fp)
   4c4b4:	a8c7883a 	add	r3,r21,r3
   4c4b8:	e0c00015 	stw	r3,0(fp)
   4c4bc:	3500da26 	beq	r6,r20,4c828 <_malloc_r+0x6fc>
   4c4c0:	b9000017 	ldw	r4,0(r23)
   4c4c4:	00bfffc4 	movi	r2,-1
   4c4c8:	2080e426 	beq	r4,r2,4c85c <_malloc_r+0x730>
   4c4cc:	a185c83a 	sub	r2,r20,r6
   4c4d0:	1885883a 	add	r2,r3,r2
   4c4d4:	e0800015 	stw	r2,0(fp)
   4c4d8:	a0c001cc 	andi	r3,r20,7
   4c4dc:	1800b526 	beq	r3,zero,4c7b4 <_malloc_r+0x688>
   4c4e0:	a0e9c83a 	sub	r20,r20,r3
   4c4e4:	00840204 	movi	r2,4104
   4c4e8:	a5000204 	addi	r20,r20,8
   4c4ec:	10c7c83a 	sub	r3,r2,r3
   4c4f0:	a545883a 	add	r2,r20,r21
   4c4f4:	1083ffcc 	andi	r2,r2,4095
   4c4f8:	18abc83a 	sub	r21,r3,r2
   4c4fc:	9009883a 	mov	r4,r18
   4c500:	a80b883a 	mov	r5,r21
   4c504:	004e1cc0 	call	4e1cc <_sbrk_r>
   4c508:	00ffffc4 	movi	r3,-1
   4c50c:	10c0d026 	beq	r2,r3,4c850 <_malloc_r+0x724>
   4c510:	1507c83a 	sub	r3,r2,r20
   4c514:	a8c7883a 	add	r3,r21,r3
   4c518:	18c00054 	ori	r3,r3,1
   4c51c:	e0800017 	ldw	r2,0(fp)
   4c520:	9d000215 	stw	r20,8(r19)
   4c524:	a0c00115 	stw	r3,4(r20)
   4c528:	a887883a 	add	r3,r21,r2
   4c52c:	e0c00015 	stw	r3,0(fp)
   4c530:	84c00e26 	beq	r16,r19,4c56c <_malloc_r+0x440>
   4c534:	018003c4 	movi	r6,15
   4c538:	3580a02e 	bgeu	r6,r22,4c7bc <_malloc_r+0x690>
   4c53c:	81400117 	ldw	r5,4(r16)
   4c540:	013ffe04 	movi	r4,-8
   4c544:	b0bffd04 	addi	r2,r22,-12
   4c548:	1104703a 	and	r2,r2,r4
   4c54c:	2900004c 	andi	r4,r5,1
   4c550:	1108b03a 	or	r4,r2,r4
   4c554:	81000115 	stw	r4,4(r16)
   4c558:	01400144 	movi	r5,5
   4c55c:	8089883a 	add	r4,r16,r2
   4c560:	21400115 	stw	r5,4(r4)
   4c564:	21400215 	stw	r5,8(r4)
   4c568:	3080c036 	bltu	r6,r2,4c86c <_malloc_r+0x740>
   4c56c:	008001b4 	movhi	r2,6
   4c570:	10a1a404 	addi	r2,r2,-31088
   4c574:	11000017 	ldw	r4,0(r2)
   4c578:	20c0012e 	bgeu	r4,r3,4c580 <_malloc_r+0x454>
   4c57c:	10c00015 	stw	r3,0(r2)
   4c580:	008001b4 	movhi	r2,6
   4c584:	10a1a304 	addi	r2,r2,-31092
   4c588:	11000017 	ldw	r4,0(r2)
   4c58c:	9c000217 	ldw	r16,8(r19)
   4c590:	20c0012e 	bgeu	r4,r3,4c598 <_malloc_r+0x46c>
   4c594:	10c00015 	stw	r3,0(r2)
   4c598:	80c00117 	ldw	r3,4(r16)
   4c59c:	00bfff04 	movi	r2,-4
   4c5a0:	1886703a 	and	r3,r3,r2
   4c5a4:	1c45c83a 	sub	r2,r3,r17
   4c5a8:	1c400236 	bltu	r3,r17,4c5b4 <_malloc_r+0x488>
   4c5ac:	00c003c4 	movi	r3,15
   4c5b0:	18800416 	blt	r3,r2,4c5c4 <_malloc_r+0x498>
   4c5b4:	9009883a 	mov	r4,r18
   4c5b8:	0051e440 	call	51e44 <__malloc_unlock>
   4c5bc:	0005883a 	mov	r2,zero
   4c5c0:	003f0706 	br	4c1e0 <__alt_data_end+0xfffda1e0>
   4c5c4:	88c00054 	ori	r3,r17,1
   4c5c8:	80c00115 	stw	r3,4(r16)
   4c5cc:	8463883a 	add	r17,r16,r17
   4c5d0:	10800054 	ori	r2,r2,1
   4c5d4:	9c400215 	stw	r17,8(r19)
   4c5d8:	88800115 	stw	r2,4(r17)
   4c5dc:	9009883a 	mov	r4,r18
   4c5e0:	0051e440 	call	51e44 <__malloc_unlock>
   4c5e4:	80800204 	addi	r2,r16,8
   4c5e8:	003efd06 	br	4c1e0 <__alt_data_end+0xfffda1e0>
   4c5ec:	00800504 	movi	r2,20
   4c5f0:	10c0482e 	bgeu	r2,r3,4c714 <_malloc_r+0x5e8>
   4c5f4:	00801504 	movi	r2,84
   4c5f8:	10c06836 	bltu	r2,r3,4c79c <_malloc_r+0x670>
   4c5fc:	8806d33a 	srli	r3,r17,12
   4c600:	19c01b84 	addi	r7,r3,110
   4c604:	39cb883a 	add	r5,r7,r7
   4c608:	003f0c06 	br	4c23c <__alt_data_end+0xfffda23c>
   4c60c:	3804d27a 	srli	r2,r7,9
   4c610:	01000104 	movi	r4,4
   4c614:	2080422e 	bgeu	r4,r2,4c720 <_malloc_r+0x5f4>
   4c618:	01000504 	movi	r4,20
   4c61c:	20807c36 	bltu	r4,r2,4c810 <_malloc_r+0x6e4>
   4c620:	110016c4 	addi	r4,r2,91
   4c624:	210b883a 	add	r5,r4,r4
   4c628:	294b883a 	add	r5,r5,r5
   4c62c:	294b883a 	add	r5,r5,r5
   4c630:	994b883a 	add	r5,r19,r5
   4c634:	28800217 	ldw	r2,8(r5)
   4c638:	02000174 	movhi	r8,5
   4c63c:	42149d04 	addi	r8,r8,21108
   4c640:	11406326 	beq	r2,r5,4c7d0 <_malloc_r+0x6a4>
   4c644:	01bfff04 	movi	r6,-4
   4c648:	11000117 	ldw	r4,4(r2)
   4c64c:	2188703a 	and	r4,r4,r6
   4c650:	3900022e 	bgeu	r7,r4,4c65c <_malloc_r+0x530>
   4c654:	10800217 	ldw	r2,8(r2)
   4c658:	28bffb1e 	bne	r5,r2,4c648 <__alt_data_end+0xfffda648>
   4c65c:	11800317 	ldw	r6,12(r2)
   4c660:	99000117 	ldw	r4,4(r19)
   4c664:	81800315 	stw	r6,12(r16)
   4c668:	80800215 	stw	r2,8(r16)
   4c66c:	34000215 	stw	r16,8(r6)
   4c670:	14000315 	stw	r16,12(r2)
   4c674:	003f2706 	br	4c314 <__alt_data_end+0xfffda314>
   4c678:	88c00054 	ori	r3,r17,1
   4c67c:	80c00115 	stw	r3,4(r16)
   4c680:	8463883a 	add	r17,r16,r17
   4c684:	34400515 	stw	r17,20(r6)
   4c688:	34400415 	stw	r17,16(r6)
   4c68c:	10c00054 	ori	r3,r2,1
   4c690:	8a400315 	stw	r9,12(r17)
   4c694:	8a400215 	stw	r9,8(r17)
   4c698:	88c00115 	stw	r3,4(r17)
   4c69c:	88a3883a 	add	r17,r17,r2
   4c6a0:	88800015 	stw	r2,0(r17)
   4c6a4:	9009883a 	mov	r4,r18
   4c6a8:	0051e440 	call	51e44 <__malloc_unlock>
   4c6ac:	80800204 	addi	r2,r16,8
   4c6b0:	003ecb06 	br	4c1e0 <__alt_data_end+0xfffda1e0>
   4c6b4:	31000117 	ldw	r4,4(r6)
   4c6b8:	003f1606 	br	4c314 <__alt_data_end+0xfffda314>
   4c6bc:	63000044 	addi	r12,r12,1
   4c6c0:	608000cc 	andi	r2,r12,3
   4c6c4:	5ac00204 	addi	r11,r11,8
   4c6c8:	103f2a1e 	bne	r2,zero,4c374 <__alt_data_end+0xfffda374>
   4c6cc:	00002106 	br	4c754 <_malloc_r+0x628>
   4c6d0:	80800204 	addi	r2,r16,8
   4c6d4:	84000517 	ldw	r16,20(r16)
   4c6d8:	143eb31e 	bne	r2,r16,4c1a8 <__alt_data_end+0xfffda1a8>
   4c6dc:	18c00084 	addi	r3,r3,2
   4c6e0:	003eec06 	br	4c294 <__alt_data_end+0xfffda294>
   4c6e4:	8085883a 	add	r2,r16,r2
   4c6e8:	10c00117 	ldw	r3,4(r2)
   4c6ec:	81000317 	ldw	r4,12(r16)
   4c6f0:	81400217 	ldw	r5,8(r16)
   4c6f4:	18c00054 	ori	r3,r3,1
   4c6f8:	10c00115 	stw	r3,4(r2)
   4c6fc:	29000315 	stw	r4,12(r5)
   4c700:	21400215 	stw	r5,8(r4)
   4c704:	9009883a 	mov	r4,r18
   4c708:	0051e440 	call	51e44 <__malloc_unlock>
   4c70c:	80800204 	addi	r2,r16,8
   4c710:	003eb306 	br	4c1e0 <__alt_data_end+0xfffda1e0>
   4c714:	19c016c4 	addi	r7,r3,91
   4c718:	39cb883a 	add	r5,r7,r7
   4c71c:	003ec706 	br	4c23c <__alt_data_end+0xfffda23c>
   4c720:	3804d1ba 	srli	r2,r7,6
   4c724:	11000e04 	addi	r4,r2,56
   4c728:	210b883a 	add	r5,r4,r4
   4c72c:	003fbe06 	br	4c628 <__alt_data_end+0xfffda628>
   4c730:	84ff5d26 	beq	r16,r19,4c4a8 <__alt_data_end+0xfffda4a8>
   4c734:	9c000217 	ldw	r16,8(r19)
   4c738:	00bfff04 	movi	r2,-4
   4c73c:	80c00117 	ldw	r3,4(r16)
   4c740:	1886703a 	and	r3,r3,r2
   4c744:	003f9706 	br	4c5a4 <__alt_data_end+0xfffda5a4>
   4c748:	52800017 	ldw	r10,0(r10)
   4c74c:	18ffffc4 	addi	r3,r3,-1
   4c750:	50805c1e 	bne	r10,r2,4c8c4 <_malloc_r+0x798>
   4c754:	190000cc 	andi	r4,r3,3
   4c758:	50bffe04 	addi	r2,r10,-8
   4c75c:	203ffa1e 	bne	r4,zero,4c748 <__alt_data_end+0xfffda748>
   4c760:	98800117 	ldw	r2,4(r19)
   4c764:	0146303a 	nor	r3,zero,r5
   4c768:	1884703a 	and	r2,r3,r2
   4c76c:	98800115 	stw	r2,4(r19)
   4c770:	294b883a 	add	r5,r5,r5
   4c774:	117f2e36 	bltu	r2,r5,4c430 <__alt_data_end+0xfffda430>
   4c778:	283f2d26 	beq	r5,zero,4c430 <__alt_data_end+0xfffda430>
   4c77c:	1146703a 	and	r3,r2,r5
   4c780:	1800521e 	bne	r3,zero,4c8cc <_malloc_r+0x7a0>
   4c784:	6007883a 	mov	r3,r12
   4c788:	294b883a 	add	r5,r5,r5
   4c78c:	1148703a 	and	r4,r2,r5
   4c790:	18c00104 	addi	r3,r3,4
   4c794:	203ffc26 	beq	r4,zero,4c788 <__alt_data_end+0xfffda788>
   4c798:	003ef006 	br	4c35c <__alt_data_end+0xfffda35c>
   4c79c:	00805504 	movi	r2,340
   4c7a0:	10c01336 	bltu	r2,r3,4c7f0 <_malloc_r+0x6c4>
   4c7a4:	8806d3fa 	srli	r3,r17,15
   4c7a8:	19c01dc4 	addi	r7,r3,119
   4c7ac:	39cb883a 	add	r5,r7,r7
   4c7b0:	003ea206 	br	4c23c <__alt_data_end+0xfffda23c>
   4c7b4:	00c40004 	movi	r3,4096
   4c7b8:	003f4d06 	br	4c4f0 <__alt_data_end+0xfffda4f0>
   4c7bc:	00800044 	movi	r2,1
   4c7c0:	a0800115 	stw	r2,4(r20)
   4c7c4:	a021883a 	mov	r16,r20
   4c7c8:	0007883a 	mov	r3,zero
   4c7cc:	003f7506 	br	4c5a4 <__alt_data_end+0xfffda5a4>
   4c7d0:	200bd0ba 	srai	r5,r4,2
   4c7d4:	01800044 	movi	r6,1
   4c7d8:	41000117 	ldw	r4,4(r8)
   4c7dc:	314a983a 	sll	r5,r6,r5
   4c7e0:	100d883a 	mov	r6,r2
   4c7e4:	2908b03a 	or	r4,r5,r4
   4c7e8:	41000115 	stw	r4,4(r8)
   4c7ec:	003f9d06 	br	4c664 <__alt_data_end+0xfffda664>
   4c7f0:	00815504 	movi	r2,1364
   4c7f4:	10c01336 	bltu	r2,r3,4c844 <_malloc_r+0x718>
   4c7f8:	8806d4ba 	srli	r3,r17,18
   4c7fc:	19c01f04 	addi	r7,r3,124
   4c800:	39cb883a 	add	r5,r7,r7
   4c804:	003e8d06 	br	4c23c <__alt_data_end+0xfffda23c>
   4c808:	ad400404 	addi	r21,r21,16
   4c80c:	003f1d06 	br	4c484 <__alt_data_end+0xfffda484>
   4c810:	01001504 	movi	r4,84
   4c814:	20801c36 	bltu	r4,r2,4c888 <_malloc_r+0x75c>
   4c818:	3804d33a 	srli	r2,r7,12
   4c81c:	11001b84 	addi	r4,r2,110
   4c820:	210b883a 	add	r5,r4,r4
   4c824:	003f8006 	br	4c628 <__alt_data_end+0xfffda628>
   4c828:	3083ffcc 	andi	r2,r6,4095
   4c82c:	103f241e 	bne	r2,zero,4c4c0 <__alt_data_end+0xfffda4c0>
   4c830:	99000217 	ldw	r4,8(r19)
   4c834:	ad85883a 	add	r2,r21,r22
   4c838:	10800054 	ori	r2,r2,1
   4c83c:	20800115 	stw	r2,4(r4)
   4c840:	003f4a06 	br	4c56c <__alt_data_end+0xfffda56c>
   4c844:	01403f04 	movi	r5,252
   4c848:	01c01f84 	movi	r7,126
   4c84c:	003e7b06 	br	4c23c <__alt_data_end+0xfffda23c>
   4c850:	00c00044 	movi	r3,1
   4c854:	002b883a 	mov	r21,zero
   4c858:	003f3006 	br	4c51c <__alt_data_end+0xfffda51c>
   4c85c:	00800174 	movhi	r2,5
   4c860:	109a6104 	addi	r2,r2,27012
   4c864:	15000015 	stw	r20,0(r2)
   4c868:	003f1b06 	br	4c4d8 <__alt_data_end+0xfffda4d8>
   4c86c:	9009883a 	mov	r4,r18
   4c870:	81400204 	addi	r5,r16,8
   4c874:	004fe380 	call	4fe38 <_free_r>
   4c878:	008001b4 	movhi	r2,6
   4c87c:	10a1ad04 	addi	r2,r2,-31052
   4c880:	10c00017 	ldw	r3,0(r2)
   4c884:	003f3906 	br	4c56c <__alt_data_end+0xfffda56c>
   4c888:	01005504 	movi	r4,340
   4c88c:	20800436 	bltu	r4,r2,4c8a0 <_malloc_r+0x774>
   4c890:	3804d3fa 	srli	r2,r7,15
   4c894:	11001dc4 	addi	r4,r2,119
   4c898:	210b883a 	add	r5,r4,r4
   4c89c:	003f6206 	br	4c628 <__alt_data_end+0xfffda628>
   4c8a0:	01015504 	movi	r4,1364
   4c8a4:	20800436 	bltu	r4,r2,4c8b8 <_malloc_r+0x78c>
   4c8a8:	3804d4ba 	srli	r2,r7,18
   4c8ac:	11001f04 	addi	r4,r2,124
   4c8b0:	210b883a 	add	r5,r4,r4
   4c8b4:	003f5c06 	br	4c628 <__alt_data_end+0xfffda628>
   4c8b8:	01403f04 	movi	r5,252
   4c8bc:	01001f84 	movi	r4,126
   4c8c0:	003f5906 	br	4c628 <__alt_data_end+0xfffda628>
   4c8c4:	98800117 	ldw	r2,4(r19)
   4c8c8:	003fa906 	br	4c770 <__alt_data_end+0xfffda770>
   4c8cc:	6007883a 	mov	r3,r12
   4c8d0:	003ea206 	br	4c35c <__alt_data_end+0xfffda35c>

0004c8d4 <memchr>:
   4c8d4:	208000cc 	andi	r2,r4,3
   4c8d8:	280f883a 	mov	r7,r5
   4c8dc:	10003526 	beq	r2,zero,4c9b4 <memchr+0xe0>
   4c8e0:	30bfffc4 	addi	r2,r6,-1
   4c8e4:	30001b26 	beq	r6,zero,4c954 <memchr+0x80>
   4c8e8:	21800003 	ldbu	r6,0(r4)
   4c8ec:	28c03fcc 	andi	r3,r5,255
   4c8f0:	30c01a26 	beq	r6,r3,4c95c <memchr+0x88>
   4c8f4:	180d883a 	mov	r6,r3
   4c8f8:	00000406 	br	4c90c <memchr+0x38>
   4c8fc:	10001526 	beq	r2,zero,4c954 <memchr+0x80>
   4c900:	20c00003 	ldbu	r3,0(r4)
   4c904:	10bfffc4 	addi	r2,r2,-1
   4c908:	19801426 	beq	r3,r6,4c95c <memchr+0x88>
   4c90c:	21000044 	addi	r4,r4,1
   4c910:	20c000cc 	andi	r3,r4,3
   4c914:	183ff91e 	bne	r3,zero,4c8fc <__alt_data_end+0xfffda8fc>
   4c918:	024000c4 	movi	r9,3
   4c91c:	48801136 	bltu	r9,r2,4c964 <memchr+0x90>
   4c920:	10000c26 	beq	r2,zero,4c954 <memchr+0x80>
   4c924:	20c00003 	ldbu	r3,0(r4)
   4c928:	29403fcc 	andi	r5,r5,255
   4c92c:	19400b26 	beq	r3,r5,4c95c <memchr+0x88>
   4c930:	20c00044 	addi	r3,r4,1
   4c934:	2085883a 	add	r2,r4,r2
   4c938:	39803fcc 	andi	r6,r7,255
   4c93c:	00000306 	br	4c94c <memchr+0x78>
   4c940:	18c00044 	addi	r3,r3,1
   4c944:	197fffc3 	ldbu	r5,-1(r3)
   4c948:	29800426 	beq	r5,r6,4c95c <memchr+0x88>
   4c94c:	1809883a 	mov	r4,r3
   4c950:	18bffb1e 	bne	r3,r2,4c940 <__alt_data_end+0xfffda940>
   4c954:	0005883a 	mov	r2,zero
   4c958:	f800283a 	ret
   4c95c:	2005883a 	mov	r2,r4
   4c960:	f800283a 	ret
   4c964:	28c03fcc 	andi	r3,r5,255
   4c968:	1810923a 	slli	r8,r3,8
   4c96c:	02ffbff4 	movhi	r11,65279
   4c970:	02a02074 	movhi	r10,32897
   4c974:	40c6b03a 	or	r3,r8,r3
   4c978:	1810943a 	slli	r8,r3,16
   4c97c:	5affbfc4 	addi	r11,r11,-257
   4c980:	52a02004 	addi	r10,r10,-32640
   4c984:	40d0b03a 	or	r8,r8,r3
   4c988:	20c00017 	ldw	r3,0(r4)
   4c98c:	40c6f03a 	xor	r3,r8,r3
   4c990:	1acd883a 	add	r6,r3,r11
   4c994:	00c6303a 	nor	r3,zero,r3
   4c998:	30c6703a 	and	r3,r6,r3
   4c99c:	1a86703a 	and	r3,r3,r10
   4c9a0:	183fdf1e 	bne	r3,zero,4c920 <__alt_data_end+0xfffda920>
   4c9a4:	10bfff04 	addi	r2,r2,-4
   4c9a8:	21000104 	addi	r4,r4,4
   4c9ac:	48bff636 	bltu	r9,r2,4c988 <__alt_data_end+0xfffda988>
   4c9b0:	003fdb06 	br	4c920 <__alt_data_end+0xfffda920>
   4c9b4:	3005883a 	mov	r2,r6
   4c9b8:	003fd706 	br	4c918 <__alt_data_end+0xfffda918>

0004c9bc <memcpy>:
   4c9bc:	deffff04 	addi	sp,sp,-4
   4c9c0:	dc000015 	stw	r16,0(sp)
   4c9c4:	00c003c4 	movi	r3,15
   4c9c8:	2005883a 	mov	r2,r4
   4c9cc:	1980432e 	bgeu	r3,r6,4cadc <memcpy+0x120>
   4c9d0:	2146b03a 	or	r3,r4,r5
   4c9d4:	18c000cc 	andi	r3,r3,3
   4c9d8:	1800421e 	bne	r3,zero,4cae4 <memcpy+0x128>
   4c9dc:	343ffc04 	addi	r16,r6,-16
   4c9e0:	8020d13a 	srli	r16,r16,4
   4c9e4:	28c00104 	addi	r3,r5,4
   4c9e8:	23400104 	addi	r13,r4,4
   4c9ec:	801e913a 	slli	r15,r16,4
   4c9f0:	2b000204 	addi	r12,r5,8
   4c9f4:	22c00204 	addi	r11,r4,8
   4c9f8:	7bc00504 	addi	r15,r15,20
   4c9fc:	2a800304 	addi	r10,r5,12
   4ca00:	22400304 	addi	r9,r4,12
   4ca04:	2bdf883a 	add	r15,r5,r15
   4ca08:	2811883a 	mov	r8,r5
   4ca0c:	200f883a 	mov	r7,r4
   4ca10:	41000017 	ldw	r4,0(r8)
   4ca14:	39c00404 	addi	r7,r7,16
   4ca18:	18c00404 	addi	r3,r3,16
   4ca1c:	393ffc15 	stw	r4,-16(r7)
   4ca20:	1bbffc17 	ldw	r14,-16(r3)
   4ca24:	6b400404 	addi	r13,r13,16
   4ca28:	5ac00404 	addi	r11,r11,16
   4ca2c:	6bbffc15 	stw	r14,-16(r13)
   4ca30:	63800017 	ldw	r14,0(r12)
   4ca34:	4a400404 	addi	r9,r9,16
   4ca38:	42000404 	addi	r8,r8,16
   4ca3c:	5bbffc15 	stw	r14,-16(r11)
   4ca40:	53800017 	ldw	r14,0(r10)
   4ca44:	63000404 	addi	r12,r12,16
   4ca48:	52800404 	addi	r10,r10,16
   4ca4c:	4bbffc15 	stw	r14,-16(r9)
   4ca50:	1bffef1e 	bne	r3,r15,4ca10 <__alt_data_end+0xfffdaa10>
   4ca54:	81c00044 	addi	r7,r16,1
   4ca58:	380e913a 	slli	r7,r7,4
   4ca5c:	310003cc 	andi	r4,r6,15
   4ca60:	02c000c4 	movi	r11,3
   4ca64:	11c7883a 	add	r3,r2,r7
   4ca68:	29cb883a 	add	r5,r5,r7
   4ca6c:	59001f2e 	bgeu	r11,r4,4caec <memcpy+0x130>
   4ca70:	1813883a 	mov	r9,r3
   4ca74:	2811883a 	mov	r8,r5
   4ca78:	200f883a 	mov	r7,r4
   4ca7c:	42800017 	ldw	r10,0(r8)
   4ca80:	4a400104 	addi	r9,r9,4
   4ca84:	39ffff04 	addi	r7,r7,-4
   4ca88:	4abfff15 	stw	r10,-4(r9)
   4ca8c:	42000104 	addi	r8,r8,4
   4ca90:	59fffa36 	bltu	r11,r7,4ca7c <__alt_data_end+0xfffdaa7c>
   4ca94:	213fff04 	addi	r4,r4,-4
   4ca98:	2008d0ba 	srli	r4,r4,2
   4ca9c:	318000cc 	andi	r6,r6,3
   4caa0:	21000044 	addi	r4,r4,1
   4caa4:	2109883a 	add	r4,r4,r4
   4caa8:	2109883a 	add	r4,r4,r4
   4caac:	1907883a 	add	r3,r3,r4
   4cab0:	290b883a 	add	r5,r5,r4
   4cab4:	30000626 	beq	r6,zero,4cad0 <memcpy+0x114>
   4cab8:	198d883a 	add	r6,r3,r6
   4cabc:	29c00003 	ldbu	r7,0(r5)
   4cac0:	18c00044 	addi	r3,r3,1
   4cac4:	29400044 	addi	r5,r5,1
   4cac8:	19ffffc5 	stb	r7,-1(r3)
   4cacc:	19bffb1e 	bne	r3,r6,4cabc <__alt_data_end+0xfffdaabc>
   4cad0:	dc000017 	ldw	r16,0(sp)
   4cad4:	dec00104 	addi	sp,sp,4
   4cad8:	f800283a 	ret
   4cadc:	2007883a 	mov	r3,r4
   4cae0:	003ff406 	br	4cab4 <__alt_data_end+0xfffdaab4>
   4cae4:	2007883a 	mov	r3,r4
   4cae8:	003ff306 	br	4cab8 <__alt_data_end+0xfffdaab8>
   4caec:	200d883a 	mov	r6,r4
   4caf0:	003ff006 	br	4cab4 <__alt_data_end+0xfffdaab4>

0004caf4 <memmove>:
   4caf4:	2005883a 	mov	r2,r4
   4caf8:	29000b2e 	bgeu	r5,r4,4cb28 <memmove+0x34>
   4cafc:	298f883a 	add	r7,r5,r6
   4cb00:	21c0092e 	bgeu	r4,r7,4cb28 <memmove+0x34>
   4cb04:	2187883a 	add	r3,r4,r6
   4cb08:	198bc83a 	sub	r5,r3,r6
   4cb0c:	30004b26 	beq	r6,zero,4cc3c <memmove+0x148>
   4cb10:	39ffffc4 	addi	r7,r7,-1
   4cb14:	39000003 	ldbu	r4,0(r7)
   4cb18:	18ffffc4 	addi	r3,r3,-1
   4cb1c:	19000005 	stb	r4,0(r3)
   4cb20:	197ffb1e 	bne	r3,r5,4cb10 <__alt_data_end+0xfffdab10>
   4cb24:	f800283a 	ret
   4cb28:	00c003c4 	movi	r3,15
   4cb2c:	1980412e 	bgeu	r3,r6,4cc34 <memmove+0x140>
   4cb30:	1146b03a 	or	r3,r2,r5
   4cb34:	18c000cc 	andi	r3,r3,3
   4cb38:	1800411e 	bne	r3,zero,4cc40 <memmove+0x14c>
   4cb3c:	33fffc04 	addi	r15,r6,-16
   4cb40:	781ed13a 	srli	r15,r15,4
   4cb44:	28c00104 	addi	r3,r5,4
   4cb48:	13400104 	addi	r13,r2,4
   4cb4c:	781c913a 	slli	r14,r15,4
   4cb50:	2b000204 	addi	r12,r5,8
   4cb54:	12c00204 	addi	r11,r2,8
   4cb58:	73800504 	addi	r14,r14,20
   4cb5c:	2a800304 	addi	r10,r5,12
   4cb60:	12400304 	addi	r9,r2,12
   4cb64:	2b9d883a 	add	r14,r5,r14
   4cb68:	2811883a 	mov	r8,r5
   4cb6c:	100f883a 	mov	r7,r2
   4cb70:	41000017 	ldw	r4,0(r8)
   4cb74:	39c00404 	addi	r7,r7,16
   4cb78:	18c00404 	addi	r3,r3,16
   4cb7c:	393ffc15 	stw	r4,-16(r7)
   4cb80:	193ffc17 	ldw	r4,-16(r3)
   4cb84:	6b400404 	addi	r13,r13,16
   4cb88:	5ac00404 	addi	r11,r11,16
   4cb8c:	693ffc15 	stw	r4,-16(r13)
   4cb90:	61000017 	ldw	r4,0(r12)
   4cb94:	4a400404 	addi	r9,r9,16
   4cb98:	42000404 	addi	r8,r8,16
   4cb9c:	593ffc15 	stw	r4,-16(r11)
   4cba0:	51000017 	ldw	r4,0(r10)
   4cba4:	63000404 	addi	r12,r12,16
   4cba8:	52800404 	addi	r10,r10,16
   4cbac:	493ffc15 	stw	r4,-16(r9)
   4cbb0:	1bbfef1e 	bne	r3,r14,4cb70 <__alt_data_end+0xfffdab70>
   4cbb4:	79000044 	addi	r4,r15,1
   4cbb8:	2008913a 	slli	r4,r4,4
   4cbbc:	328003cc 	andi	r10,r6,15
   4cbc0:	02c000c4 	movi	r11,3
   4cbc4:	1107883a 	add	r3,r2,r4
   4cbc8:	290b883a 	add	r5,r5,r4
   4cbcc:	5a801e2e 	bgeu	r11,r10,4cc48 <memmove+0x154>
   4cbd0:	1813883a 	mov	r9,r3
   4cbd4:	2811883a 	mov	r8,r5
   4cbd8:	500f883a 	mov	r7,r10
   4cbdc:	41000017 	ldw	r4,0(r8)
   4cbe0:	4a400104 	addi	r9,r9,4
   4cbe4:	39ffff04 	addi	r7,r7,-4
   4cbe8:	493fff15 	stw	r4,-4(r9)
   4cbec:	42000104 	addi	r8,r8,4
   4cbf0:	59fffa36 	bltu	r11,r7,4cbdc <__alt_data_end+0xfffdabdc>
   4cbf4:	513fff04 	addi	r4,r10,-4
   4cbf8:	2008d0ba 	srli	r4,r4,2
   4cbfc:	318000cc 	andi	r6,r6,3
   4cc00:	21000044 	addi	r4,r4,1
   4cc04:	2109883a 	add	r4,r4,r4
   4cc08:	2109883a 	add	r4,r4,r4
   4cc0c:	1907883a 	add	r3,r3,r4
   4cc10:	290b883a 	add	r5,r5,r4
   4cc14:	30000926 	beq	r6,zero,4cc3c <memmove+0x148>
   4cc18:	198d883a 	add	r6,r3,r6
   4cc1c:	29c00003 	ldbu	r7,0(r5)
   4cc20:	18c00044 	addi	r3,r3,1
   4cc24:	29400044 	addi	r5,r5,1
   4cc28:	19ffffc5 	stb	r7,-1(r3)
   4cc2c:	19bffb1e 	bne	r3,r6,4cc1c <__alt_data_end+0xfffdac1c>
   4cc30:	f800283a 	ret
   4cc34:	1007883a 	mov	r3,r2
   4cc38:	003ff606 	br	4cc14 <__alt_data_end+0xfffdac14>
   4cc3c:	f800283a 	ret
   4cc40:	1007883a 	mov	r3,r2
   4cc44:	003ff406 	br	4cc18 <__alt_data_end+0xfffdac18>
   4cc48:	500d883a 	mov	r6,r10
   4cc4c:	003ff106 	br	4cc14 <__alt_data_end+0xfffdac14>

0004cc50 <_Balloc>:
   4cc50:	20801317 	ldw	r2,76(r4)
   4cc54:	defffc04 	addi	sp,sp,-16
   4cc58:	dc400115 	stw	r17,4(sp)
   4cc5c:	dc000015 	stw	r16,0(sp)
   4cc60:	dfc00315 	stw	ra,12(sp)
   4cc64:	dc800215 	stw	r18,8(sp)
   4cc68:	2023883a 	mov	r17,r4
   4cc6c:	2821883a 	mov	r16,r5
   4cc70:	10000f26 	beq	r2,zero,4ccb0 <_Balloc+0x60>
   4cc74:	8407883a 	add	r3,r16,r16
   4cc78:	18c7883a 	add	r3,r3,r3
   4cc7c:	10c7883a 	add	r3,r2,r3
   4cc80:	18800017 	ldw	r2,0(r3)
   4cc84:	10001126 	beq	r2,zero,4cccc <_Balloc+0x7c>
   4cc88:	11000017 	ldw	r4,0(r2)
   4cc8c:	19000015 	stw	r4,0(r3)
   4cc90:	10000415 	stw	zero,16(r2)
   4cc94:	10000315 	stw	zero,12(r2)
   4cc98:	dfc00317 	ldw	ra,12(sp)
   4cc9c:	dc800217 	ldw	r18,8(sp)
   4cca0:	dc400117 	ldw	r17,4(sp)
   4cca4:	dc000017 	ldw	r16,0(sp)
   4cca8:	dec00404 	addi	sp,sp,16
   4ccac:	f800283a 	ret
   4ccb0:	01400104 	movi	r5,4
   4ccb4:	01800844 	movi	r6,33
   4ccb8:	004f61c0 	call	4f61c <_calloc_r>
   4ccbc:	88801315 	stw	r2,76(r17)
   4ccc0:	103fec1e 	bne	r2,zero,4cc74 <__alt_data_end+0xfffdac74>
   4ccc4:	0005883a 	mov	r2,zero
   4ccc8:	003ff306 	br	4cc98 <__alt_data_end+0xfffdac98>
   4cccc:	01400044 	movi	r5,1
   4ccd0:	2c24983a 	sll	r18,r5,r16
   4ccd4:	8809883a 	mov	r4,r17
   4ccd8:	91800144 	addi	r6,r18,5
   4ccdc:	318d883a 	add	r6,r6,r6
   4cce0:	318d883a 	add	r6,r6,r6
   4cce4:	004f61c0 	call	4f61c <_calloc_r>
   4cce8:	103ff626 	beq	r2,zero,4ccc4 <__alt_data_end+0xfffdacc4>
   4ccec:	14000115 	stw	r16,4(r2)
   4ccf0:	14800215 	stw	r18,8(r2)
   4ccf4:	003fe606 	br	4cc90 <__alt_data_end+0xfffdac90>

0004ccf8 <_Bfree>:
   4ccf8:	28000826 	beq	r5,zero,4cd1c <_Bfree+0x24>
   4ccfc:	28c00117 	ldw	r3,4(r5)
   4cd00:	20801317 	ldw	r2,76(r4)
   4cd04:	18c7883a 	add	r3,r3,r3
   4cd08:	18c7883a 	add	r3,r3,r3
   4cd0c:	10c5883a 	add	r2,r2,r3
   4cd10:	10c00017 	ldw	r3,0(r2)
   4cd14:	28c00015 	stw	r3,0(r5)
   4cd18:	11400015 	stw	r5,0(r2)
   4cd1c:	f800283a 	ret

0004cd20 <__multadd>:
   4cd20:	defffa04 	addi	sp,sp,-24
   4cd24:	dc000115 	stw	r16,4(sp)
   4cd28:	2c000417 	ldw	r16,16(r5)
   4cd2c:	dc800315 	stw	r18,12(sp)
   4cd30:	dc400215 	stw	r17,8(sp)
   4cd34:	dfc00515 	stw	ra,20(sp)
   4cd38:	dcc00415 	stw	r19,16(sp)
   4cd3c:	2823883a 	mov	r17,r5
   4cd40:	2025883a 	mov	r18,r4
   4cd44:	2a400504 	addi	r9,r5,20
   4cd48:	0015883a 	mov	r10,zero
   4cd4c:	4a000017 	ldw	r8,0(r9)
   4cd50:	4a400104 	addi	r9,r9,4
   4cd54:	52800044 	addi	r10,r10,1
   4cd58:	40ffffcc 	andi	r3,r8,65535
   4cd5c:	1987383a 	mul	r3,r3,r6
   4cd60:	4010d43a 	srli	r8,r8,16
   4cd64:	19cf883a 	add	r7,r3,r7
   4cd68:	4191383a 	mul	r8,r8,r6
   4cd6c:	3816d43a 	srli	r11,r7,16
   4cd70:	38ffffcc 	andi	r3,r7,65535
   4cd74:	5a0f883a 	add	r7,r11,r8
   4cd78:	3810943a 	slli	r8,r7,16
   4cd7c:	380ed43a 	srli	r7,r7,16
   4cd80:	40c7883a 	add	r3,r8,r3
   4cd84:	48ffff15 	stw	r3,-4(r9)
   4cd88:	543ff016 	blt	r10,r16,4cd4c <__alt_data_end+0xfffdad4c>
   4cd8c:	38000926 	beq	r7,zero,4cdb4 <__multadd+0x94>
   4cd90:	88800217 	ldw	r2,8(r17)
   4cd94:	80800f0e 	bge	r16,r2,4cdd4 <__multadd+0xb4>
   4cd98:	80800144 	addi	r2,r16,5
   4cd9c:	1085883a 	add	r2,r2,r2
   4cda0:	1085883a 	add	r2,r2,r2
   4cda4:	8885883a 	add	r2,r17,r2
   4cda8:	11c00015 	stw	r7,0(r2)
   4cdac:	84000044 	addi	r16,r16,1
   4cdb0:	8c000415 	stw	r16,16(r17)
   4cdb4:	8805883a 	mov	r2,r17
   4cdb8:	dfc00517 	ldw	ra,20(sp)
   4cdbc:	dcc00417 	ldw	r19,16(sp)
   4cdc0:	dc800317 	ldw	r18,12(sp)
   4cdc4:	dc400217 	ldw	r17,8(sp)
   4cdc8:	dc000117 	ldw	r16,4(sp)
   4cdcc:	dec00604 	addi	sp,sp,24
   4cdd0:	f800283a 	ret
   4cdd4:	89400117 	ldw	r5,4(r17)
   4cdd8:	9009883a 	mov	r4,r18
   4cddc:	d9c00015 	stw	r7,0(sp)
   4cde0:	29400044 	addi	r5,r5,1
   4cde4:	004cc500 	call	4cc50 <_Balloc>
   4cde8:	89800417 	ldw	r6,16(r17)
   4cdec:	11000304 	addi	r4,r2,12
   4cdf0:	89400304 	addi	r5,r17,12
   4cdf4:	31800084 	addi	r6,r6,2
   4cdf8:	318d883a 	add	r6,r6,r6
   4cdfc:	318d883a 	add	r6,r6,r6
   4ce00:	1027883a 	mov	r19,r2
   4ce04:	004c9bc0 	call	4c9bc <memcpy>
   4ce08:	d9c00017 	ldw	r7,0(sp)
   4ce0c:	88000a26 	beq	r17,zero,4ce38 <__multadd+0x118>
   4ce10:	89000117 	ldw	r4,4(r17)
   4ce14:	90c01317 	ldw	r3,76(r18)
   4ce18:	2109883a 	add	r4,r4,r4
   4ce1c:	2109883a 	add	r4,r4,r4
   4ce20:	1907883a 	add	r3,r3,r4
   4ce24:	18800017 	ldw	r2,0(r3)
   4ce28:	88800015 	stw	r2,0(r17)
   4ce2c:	1c400015 	stw	r17,0(r3)
   4ce30:	9823883a 	mov	r17,r19
   4ce34:	003fd806 	br	4cd98 <__alt_data_end+0xfffdad98>
   4ce38:	9823883a 	mov	r17,r19
   4ce3c:	003fd606 	br	4cd98 <__alt_data_end+0xfffdad98>

0004ce40 <__s2b>:
   4ce40:	defff904 	addi	sp,sp,-28
   4ce44:	dc400115 	stw	r17,4(sp)
   4ce48:	dc000015 	stw	r16,0(sp)
   4ce4c:	2023883a 	mov	r17,r4
   4ce50:	2821883a 	mov	r16,r5
   4ce54:	39000204 	addi	r4,r7,8
   4ce58:	01400244 	movi	r5,9
   4ce5c:	dcc00315 	stw	r19,12(sp)
   4ce60:	dc800215 	stw	r18,8(sp)
   4ce64:	dfc00615 	stw	ra,24(sp)
   4ce68:	dd400515 	stw	r21,20(sp)
   4ce6c:	dd000415 	stw	r20,16(sp)
   4ce70:	3825883a 	mov	r18,r7
   4ce74:	3027883a 	mov	r19,r6
   4ce78:	0044b000 	call	44b00 <__divsi3>
   4ce7c:	00c00044 	movi	r3,1
   4ce80:	000b883a 	mov	r5,zero
   4ce84:	1880030e 	bge	r3,r2,4ce94 <__s2b+0x54>
   4ce88:	18c7883a 	add	r3,r3,r3
   4ce8c:	29400044 	addi	r5,r5,1
   4ce90:	18bffd16 	blt	r3,r2,4ce88 <__alt_data_end+0xfffdae88>
   4ce94:	8809883a 	mov	r4,r17
   4ce98:	004cc500 	call	4cc50 <_Balloc>
   4ce9c:	d8c00717 	ldw	r3,28(sp)
   4cea0:	10c00515 	stw	r3,20(r2)
   4cea4:	00c00044 	movi	r3,1
   4cea8:	10c00415 	stw	r3,16(r2)
   4ceac:	00c00244 	movi	r3,9
   4ceb0:	1cc0210e 	bge	r3,r19,4cf38 <__s2b+0xf8>
   4ceb4:	80eb883a 	add	r21,r16,r3
   4ceb8:	a829883a 	mov	r20,r21
   4cebc:	84e1883a 	add	r16,r16,r19
   4cec0:	a1c00007 	ldb	r7,0(r20)
   4cec4:	8809883a 	mov	r4,r17
   4cec8:	a5000044 	addi	r20,r20,1
   4cecc:	100b883a 	mov	r5,r2
   4ced0:	01800284 	movi	r6,10
   4ced4:	39fff404 	addi	r7,r7,-48
   4ced8:	004cd200 	call	4cd20 <__multadd>
   4cedc:	a43ff81e 	bne	r20,r16,4cec0 <__alt_data_end+0xfffdaec0>
   4cee0:	ace1883a 	add	r16,r21,r19
   4cee4:	843ffe04 	addi	r16,r16,-8
   4cee8:	9c800a0e 	bge	r19,r18,4cf14 <__s2b+0xd4>
   4ceec:	94e5c83a 	sub	r18,r18,r19
   4cef0:	84a5883a 	add	r18,r16,r18
   4cef4:	81c00007 	ldb	r7,0(r16)
   4cef8:	8809883a 	mov	r4,r17
   4cefc:	84000044 	addi	r16,r16,1
   4cf00:	100b883a 	mov	r5,r2
   4cf04:	01800284 	movi	r6,10
   4cf08:	39fff404 	addi	r7,r7,-48
   4cf0c:	004cd200 	call	4cd20 <__multadd>
   4cf10:	84bff81e 	bne	r16,r18,4cef4 <__alt_data_end+0xfffdaef4>
   4cf14:	dfc00617 	ldw	ra,24(sp)
   4cf18:	dd400517 	ldw	r21,20(sp)
   4cf1c:	dd000417 	ldw	r20,16(sp)
   4cf20:	dcc00317 	ldw	r19,12(sp)
   4cf24:	dc800217 	ldw	r18,8(sp)
   4cf28:	dc400117 	ldw	r17,4(sp)
   4cf2c:	dc000017 	ldw	r16,0(sp)
   4cf30:	dec00704 	addi	sp,sp,28
   4cf34:	f800283a 	ret
   4cf38:	84000284 	addi	r16,r16,10
   4cf3c:	1827883a 	mov	r19,r3
   4cf40:	003fe906 	br	4cee8 <__alt_data_end+0xfffdaee8>

0004cf44 <__hi0bits>:
   4cf44:	20bfffec 	andhi	r2,r4,65535
   4cf48:	1000141e 	bne	r2,zero,4cf9c <__hi0bits+0x58>
   4cf4c:	2008943a 	slli	r4,r4,16
   4cf50:	00800404 	movi	r2,16
   4cf54:	20ffc02c 	andhi	r3,r4,65280
   4cf58:	1800021e 	bne	r3,zero,4cf64 <__hi0bits+0x20>
   4cf5c:	2008923a 	slli	r4,r4,8
   4cf60:	10800204 	addi	r2,r2,8
   4cf64:	20fc002c 	andhi	r3,r4,61440
   4cf68:	1800021e 	bne	r3,zero,4cf74 <__hi0bits+0x30>
   4cf6c:	2008913a 	slli	r4,r4,4
   4cf70:	10800104 	addi	r2,r2,4
   4cf74:	20f0002c 	andhi	r3,r4,49152
   4cf78:	1800031e 	bne	r3,zero,4cf88 <__hi0bits+0x44>
   4cf7c:	2109883a 	add	r4,r4,r4
   4cf80:	10800084 	addi	r2,r2,2
   4cf84:	2109883a 	add	r4,r4,r4
   4cf88:	20000316 	blt	r4,zero,4cf98 <__hi0bits+0x54>
   4cf8c:	2110002c 	andhi	r4,r4,16384
   4cf90:	2000041e 	bne	r4,zero,4cfa4 <__hi0bits+0x60>
   4cf94:	00800804 	movi	r2,32
   4cf98:	f800283a 	ret
   4cf9c:	0005883a 	mov	r2,zero
   4cfa0:	003fec06 	br	4cf54 <__alt_data_end+0xfffdaf54>
   4cfa4:	10800044 	addi	r2,r2,1
   4cfa8:	f800283a 	ret

0004cfac <__lo0bits>:
   4cfac:	20c00017 	ldw	r3,0(r4)
   4cfb0:	188001cc 	andi	r2,r3,7
   4cfb4:	10000826 	beq	r2,zero,4cfd8 <__lo0bits+0x2c>
   4cfb8:	1880004c 	andi	r2,r3,1
   4cfbc:	1000211e 	bne	r2,zero,4d044 <__lo0bits+0x98>
   4cfc0:	1880008c 	andi	r2,r3,2
   4cfc4:	1000211e 	bne	r2,zero,4d04c <__lo0bits+0xa0>
   4cfc8:	1806d0ba 	srli	r3,r3,2
   4cfcc:	00800084 	movi	r2,2
   4cfd0:	20c00015 	stw	r3,0(r4)
   4cfd4:	f800283a 	ret
   4cfd8:	18bfffcc 	andi	r2,r3,65535
   4cfdc:	10001326 	beq	r2,zero,4d02c <__lo0bits+0x80>
   4cfe0:	0005883a 	mov	r2,zero
   4cfe4:	19403fcc 	andi	r5,r3,255
   4cfe8:	2800021e 	bne	r5,zero,4cff4 <__lo0bits+0x48>
   4cfec:	1806d23a 	srli	r3,r3,8
   4cff0:	10800204 	addi	r2,r2,8
   4cff4:	194003cc 	andi	r5,r3,15
   4cff8:	2800021e 	bne	r5,zero,4d004 <__lo0bits+0x58>
   4cffc:	1806d13a 	srli	r3,r3,4
   4d000:	10800104 	addi	r2,r2,4
   4d004:	194000cc 	andi	r5,r3,3
   4d008:	2800021e 	bne	r5,zero,4d014 <__lo0bits+0x68>
   4d00c:	1806d0ba 	srli	r3,r3,2
   4d010:	10800084 	addi	r2,r2,2
   4d014:	1940004c 	andi	r5,r3,1
   4d018:	2800081e 	bne	r5,zero,4d03c <__lo0bits+0x90>
   4d01c:	1806d07a 	srli	r3,r3,1
   4d020:	1800051e 	bne	r3,zero,4d038 <__lo0bits+0x8c>
   4d024:	00800804 	movi	r2,32
   4d028:	f800283a 	ret
   4d02c:	1806d43a 	srli	r3,r3,16
   4d030:	00800404 	movi	r2,16
   4d034:	003feb06 	br	4cfe4 <__alt_data_end+0xfffdafe4>
   4d038:	10800044 	addi	r2,r2,1
   4d03c:	20c00015 	stw	r3,0(r4)
   4d040:	f800283a 	ret
   4d044:	0005883a 	mov	r2,zero
   4d048:	f800283a 	ret
   4d04c:	1806d07a 	srli	r3,r3,1
   4d050:	00800044 	movi	r2,1
   4d054:	20c00015 	stw	r3,0(r4)
   4d058:	f800283a 	ret

0004d05c <__i2b>:
   4d05c:	defffd04 	addi	sp,sp,-12
   4d060:	dc000015 	stw	r16,0(sp)
   4d064:	04000044 	movi	r16,1
   4d068:	dc400115 	stw	r17,4(sp)
   4d06c:	2823883a 	mov	r17,r5
   4d070:	800b883a 	mov	r5,r16
   4d074:	dfc00215 	stw	ra,8(sp)
   4d078:	004cc500 	call	4cc50 <_Balloc>
   4d07c:	14400515 	stw	r17,20(r2)
   4d080:	14000415 	stw	r16,16(r2)
   4d084:	dfc00217 	ldw	ra,8(sp)
   4d088:	dc400117 	ldw	r17,4(sp)
   4d08c:	dc000017 	ldw	r16,0(sp)
   4d090:	dec00304 	addi	sp,sp,12
   4d094:	f800283a 	ret

0004d098 <__multiply>:
   4d098:	defffa04 	addi	sp,sp,-24
   4d09c:	dcc00315 	stw	r19,12(sp)
   4d0a0:	dc800215 	stw	r18,8(sp)
   4d0a4:	2cc00417 	ldw	r19,16(r5)
   4d0a8:	34800417 	ldw	r18,16(r6)
   4d0ac:	dd000415 	stw	r20,16(sp)
   4d0b0:	dc400115 	stw	r17,4(sp)
   4d0b4:	dfc00515 	stw	ra,20(sp)
   4d0b8:	dc000015 	stw	r16,0(sp)
   4d0bc:	2829883a 	mov	r20,r5
   4d0c0:	3023883a 	mov	r17,r6
   4d0c4:	9c807016 	blt	r19,r18,4d288 <__multiply+0x1f0>
   4d0c8:	9005883a 	mov	r2,r18
   4d0cc:	9825883a 	mov	r18,r19
   4d0d0:	1027883a 	mov	r19,r2
   4d0d4:	a0800217 	ldw	r2,8(r20)
   4d0d8:	94e1883a 	add	r16,r18,r19
   4d0dc:	a1400117 	ldw	r5,4(r20)
   4d0e0:	1400010e 	bge	r2,r16,4d0e8 <__multiply+0x50>
   4d0e4:	29400044 	addi	r5,r5,1
   4d0e8:	004cc500 	call	4cc50 <_Balloc>
   4d0ec:	8417883a 	add	r11,r16,r16
   4d0f0:	13000504 	addi	r12,r2,20
   4d0f4:	5ad7883a 	add	r11,r11,r11
   4d0f8:	62d7883a 	add	r11,r12,r11
   4d0fc:	6007883a 	mov	r3,r12
   4d100:	62c0032e 	bgeu	r12,r11,4d110 <__multiply+0x78>
   4d104:	18000015 	stw	zero,0(r3)
   4d108:	18c00104 	addi	r3,r3,4
   4d10c:	1afffd36 	bltu	r3,r11,4d104 <__alt_data_end+0xfffdb104>
   4d110:	9ce7883a 	add	r19,r19,r19
   4d114:	94a5883a 	add	r18,r18,r18
   4d118:	89800504 	addi	r6,r17,20
   4d11c:	9ce7883a 	add	r19,r19,r19
   4d120:	a3800504 	addi	r14,r20,20
   4d124:	94a5883a 	add	r18,r18,r18
   4d128:	34db883a 	add	r13,r6,r19
   4d12c:	7495883a 	add	r10,r14,r18
   4d130:	3340422e 	bgeu	r6,r13,4d23c <__multiply+0x1a4>
   4d134:	34400017 	ldw	r17,0(r6)
   4d138:	8cbfffcc 	andi	r18,r17,65535
   4d13c:	90001b26 	beq	r18,zero,4d1ac <__multiply+0x114>
   4d140:	6013883a 	mov	r9,r12
   4d144:	7023883a 	mov	r17,r14
   4d148:	0011883a 	mov	r8,zero
   4d14c:	88c00017 	ldw	r3,0(r17)
   4d150:	4bc00017 	ldw	r15,0(r9)
   4d154:	8c400104 	addi	r17,r17,4
   4d158:	19ffffcc 	andi	r7,r3,65535
   4d15c:	3c8f383a 	mul	r7,r7,r18
   4d160:	1808d43a 	srli	r4,r3,16
   4d164:	797fffcc 	andi	r5,r15,65535
   4d168:	29cb883a 	add	r5,r5,r7
   4d16c:	2a0b883a 	add	r5,r5,r8
   4d170:	2489383a 	mul	r4,r4,r18
   4d174:	7806d43a 	srli	r3,r15,16
   4d178:	2810d43a 	srli	r8,r5,16
   4d17c:	297fffcc 	andi	r5,r5,65535
   4d180:	1907883a 	add	r3,r3,r4
   4d184:	1a07883a 	add	r3,r3,r8
   4d188:	1808943a 	slli	r4,r3,16
   4d18c:	480f883a 	mov	r7,r9
   4d190:	1810d43a 	srli	r8,r3,16
   4d194:	214ab03a 	or	r5,r4,r5
   4d198:	49400015 	stw	r5,0(r9)
   4d19c:	4a400104 	addi	r9,r9,4
   4d1a0:	8abfea36 	bltu	r17,r10,4d14c <__alt_data_end+0xfffdb14c>
   4d1a4:	3a000115 	stw	r8,4(r7)
   4d1a8:	34400017 	ldw	r17,0(r6)
   4d1ac:	8822d43a 	srli	r17,r17,16
   4d1b0:	88001f26 	beq	r17,zero,4d230 <__multiply+0x198>
   4d1b4:	60c00017 	ldw	r3,0(r12)
   4d1b8:	7013883a 	mov	r9,r14
   4d1bc:	601f883a 	mov	r15,r12
   4d1c0:	1811883a 	mov	r8,r3
   4d1c4:	6027883a 	mov	r19,r12
   4d1c8:	000f883a 	mov	r7,zero
   4d1cc:	00000106 	br	4d1d4 <__multiply+0x13c>
   4d1d0:	9027883a 	mov	r19,r18
   4d1d4:	4940000b 	ldhu	r5,0(r9)
   4d1d8:	4010d43a 	srli	r8,r8,16
   4d1dc:	193fffcc 	andi	r4,r3,65535
   4d1e0:	2c4b383a 	mul	r5,r5,r17
   4d1e4:	7bc00104 	addi	r15,r15,4
   4d1e8:	4a400104 	addi	r9,r9,4
   4d1ec:	2a0b883a 	add	r5,r5,r8
   4d1f0:	29cb883a 	add	r5,r5,r7
   4d1f4:	2806943a 	slli	r3,r5,16
   4d1f8:	9c800104 	addi	r18,r19,4
   4d1fc:	280ad43a 	srli	r5,r5,16
   4d200:	1908b03a 	or	r4,r3,r4
   4d204:	793fff15 	stw	r4,-4(r15)
   4d208:	48ffff17 	ldw	r3,-4(r9)
   4d20c:	92000017 	ldw	r8,0(r18)
   4d210:	1806d43a 	srli	r3,r3,16
   4d214:	413fffcc 	andi	r4,r8,65535
   4d218:	1c47383a 	mul	r3,r3,r17
   4d21c:	1907883a 	add	r3,r3,r4
   4d220:	1947883a 	add	r3,r3,r5
   4d224:	180ed43a 	srli	r7,r3,16
   4d228:	4abfe936 	bltu	r9,r10,4d1d0 <__alt_data_end+0xfffdb1d0>
   4d22c:	98c00115 	stw	r3,4(r19)
   4d230:	31800104 	addi	r6,r6,4
   4d234:	63000104 	addi	r12,r12,4
   4d238:	337fbe36 	bltu	r6,r13,4d134 <__alt_data_end+0xfffdb134>
   4d23c:	0400090e 	bge	zero,r16,4d264 <__multiply+0x1cc>
   4d240:	58ffff17 	ldw	r3,-4(r11)
   4d244:	5affff04 	addi	r11,r11,-4
   4d248:	18000326 	beq	r3,zero,4d258 <__multiply+0x1c0>
   4d24c:	00000506 	br	4d264 <__multiply+0x1cc>
   4d250:	58c00017 	ldw	r3,0(r11)
   4d254:	1800031e 	bne	r3,zero,4d264 <__multiply+0x1cc>
   4d258:	843fffc4 	addi	r16,r16,-1
   4d25c:	5affff04 	addi	r11,r11,-4
   4d260:	803ffb1e 	bne	r16,zero,4d250 <__alt_data_end+0xfffdb250>
   4d264:	14000415 	stw	r16,16(r2)
   4d268:	dfc00517 	ldw	ra,20(sp)
   4d26c:	dd000417 	ldw	r20,16(sp)
   4d270:	dcc00317 	ldw	r19,12(sp)
   4d274:	dc800217 	ldw	r18,8(sp)
   4d278:	dc400117 	ldw	r17,4(sp)
   4d27c:	dc000017 	ldw	r16,0(sp)
   4d280:	dec00604 	addi	sp,sp,24
   4d284:	f800283a 	ret
   4d288:	3029883a 	mov	r20,r6
   4d28c:	2823883a 	mov	r17,r5
   4d290:	003f9006 	br	4d0d4 <__alt_data_end+0xfffdb0d4>

0004d294 <__pow5mult>:
   4d294:	defffa04 	addi	sp,sp,-24
   4d298:	dcc00315 	stw	r19,12(sp)
   4d29c:	dc800215 	stw	r18,8(sp)
   4d2a0:	dc000015 	stw	r16,0(sp)
   4d2a4:	dfc00515 	stw	ra,20(sp)
   4d2a8:	dd000415 	stw	r20,16(sp)
   4d2ac:	dc400115 	stw	r17,4(sp)
   4d2b0:	308000cc 	andi	r2,r6,3
   4d2b4:	3021883a 	mov	r16,r6
   4d2b8:	2027883a 	mov	r19,r4
   4d2bc:	2825883a 	mov	r18,r5
   4d2c0:	10002e1e 	bne	r2,zero,4d37c <__pow5mult+0xe8>
   4d2c4:	8021d0ba 	srai	r16,r16,2
   4d2c8:	80001a26 	beq	r16,zero,4d334 <__pow5mult+0xa0>
   4d2cc:	9c401217 	ldw	r17,72(r19)
   4d2d0:	8800061e 	bne	r17,zero,4d2ec <__pow5mult+0x58>
   4d2d4:	00003406 	br	4d3a8 <__pow5mult+0x114>
   4d2d8:	8021d07a 	srai	r16,r16,1
   4d2dc:	80001526 	beq	r16,zero,4d334 <__pow5mult+0xa0>
   4d2e0:	88800017 	ldw	r2,0(r17)
   4d2e4:	10001c26 	beq	r2,zero,4d358 <__pow5mult+0xc4>
   4d2e8:	1023883a 	mov	r17,r2
   4d2ec:	80c0004c 	andi	r3,r16,1
   4d2f0:	183ff926 	beq	r3,zero,4d2d8 <__alt_data_end+0xfffdb2d8>
   4d2f4:	900b883a 	mov	r5,r18
   4d2f8:	880d883a 	mov	r6,r17
   4d2fc:	9809883a 	mov	r4,r19
   4d300:	004d0980 	call	4d098 <__multiply>
   4d304:	90001b26 	beq	r18,zero,4d374 <__pow5mult+0xe0>
   4d308:	91c00117 	ldw	r7,4(r18)
   4d30c:	98c01317 	ldw	r3,76(r19)
   4d310:	8021d07a 	srai	r16,r16,1
   4d314:	39cf883a 	add	r7,r7,r7
   4d318:	39cf883a 	add	r7,r7,r7
   4d31c:	19c7883a 	add	r3,r3,r7
   4d320:	19000017 	ldw	r4,0(r3)
   4d324:	91000015 	stw	r4,0(r18)
   4d328:	1c800015 	stw	r18,0(r3)
   4d32c:	1025883a 	mov	r18,r2
   4d330:	803feb1e 	bne	r16,zero,4d2e0 <__alt_data_end+0xfffdb2e0>
   4d334:	9005883a 	mov	r2,r18
   4d338:	dfc00517 	ldw	ra,20(sp)
   4d33c:	dd000417 	ldw	r20,16(sp)
   4d340:	dcc00317 	ldw	r19,12(sp)
   4d344:	dc800217 	ldw	r18,8(sp)
   4d348:	dc400117 	ldw	r17,4(sp)
   4d34c:	dc000017 	ldw	r16,0(sp)
   4d350:	dec00604 	addi	sp,sp,24
   4d354:	f800283a 	ret
   4d358:	9809883a 	mov	r4,r19
   4d35c:	880b883a 	mov	r5,r17
   4d360:	880d883a 	mov	r6,r17
   4d364:	004d0980 	call	4d098 <__multiply>
   4d368:	88800015 	stw	r2,0(r17)
   4d36c:	10000015 	stw	zero,0(r2)
   4d370:	003fdd06 	br	4d2e8 <__alt_data_end+0xfffdb2e8>
   4d374:	1025883a 	mov	r18,r2
   4d378:	003fd706 	br	4d2d8 <__alt_data_end+0xfffdb2d8>
   4d37c:	10bfffc4 	addi	r2,r2,-1
   4d380:	1085883a 	add	r2,r2,r2
   4d384:	00c00174 	movhi	r3,5
   4d388:	18d2f204 	addi	r3,r3,19400
   4d38c:	1085883a 	add	r2,r2,r2
   4d390:	1885883a 	add	r2,r3,r2
   4d394:	11800017 	ldw	r6,0(r2)
   4d398:	000f883a 	mov	r7,zero
   4d39c:	004cd200 	call	4cd20 <__multadd>
   4d3a0:	1025883a 	mov	r18,r2
   4d3a4:	003fc706 	br	4d2c4 <__alt_data_end+0xfffdb2c4>
   4d3a8:	05000044 	movi	r20,1
   4d3ac:	9809883a 	mov	r4,r19
   4d3b0:	a00b883a 	mov	r5,r20
   4d3b4:	004cc500 	call	4cc50 <_Balloc>
   4d3b8:	1023883a 	mov	r17,r2
   4d3bc:	00809c44 	movi	r2,625
   4d3c0:	88800515 	stw	r2,20(r17)
   4d3c4:	8d000415 	stw	r20,16(r17)
   4d3c8:	9c401215 	stw	r17,72(r19)
   4d3cc:	88000015 	stw	zero,0(r17)
   4d3d0:	003fc606 	br	4d2ec <__alt_data_end+0xfffdb2ec>

0004d3d4 <__lshift>:
   4d3d4:	defff904 	addi	sp,sp,-28
   4d3d8:	dd000415 	stw	r20,16(sp)
   4d3dc:	dcc00315 	stw	r19,12(sp)
   4d3e0:	3029d17a 	srai	r20,r6,5
   4d3e4:	2cc00417 	ldw	r19,16(r5)
   4d3e8:	28800217 	ldw	r2,8(r5)
   4d3ec:	dd400515 	stw	r21,20(sp)
   4d3f0:	a4e7883a 	add	r19,r20,r19
   4d3f4:	dc800215 	stw	r18,8(sp)
   4d3f8:	dc400115 	stw	r17,4(sp)
   4d3fc:	dc000015 	stw	r16,0(sp)
   4d400:	dfc00615 	stw	ra,24(sp)
   4d404:	9c000044 	addi	r16,r19,1
   4d408:	2823883a 	mov	r17,r5
   4d40c:	302b883a 	mov	r21,r6
   4d410:	2025883a 	mov	r18,r4
   4d414:	29400117 	ldw	r5,4(r5)
   4d418:	1400030e 	bge	r2,r16,4d428 <__lshift+0x54>
   4d41c:	1085883a 	add	r2,r2,r2
   4d420:	29400044 	addi	r5,r5,1
   4d424:	143ffd16 	blt	r2,r16,4d41c <__alt_data_end+0xfffdb41c>
   4d428:	9009883a 	mov	r4,r18
   4d42c:	004cc500 	call	4cc50 <_Balloc>
   4d430:	11c00504 	addi	r7,r2,20
   4d434:	0500090e 	bge	zero,r20,4d45c <__lshift+0x88>
   4d438:	3811883a 	mov	r8,r7
   4d43c:	0007883a 	mov	r3,zero
   4d440:	40000015 	stw	zero,0(r8)
   4d444:	18c00044 	addi	r3,r3,1
   4d448:	42000104 	addi	r8,r8,4
   4d44c:	1d3ffc1e 	bne	r3,r20,4d440 <__alt_data_end+0xfffdb440>
   4d450:	18c7883a 	add	r3,r3,r3
   4d454:	18c7883a 	add	r3,r3,r3
   4d458:	38cf883a 	add	r7,r7,r3
   4d45c:	89000417 	ldw	r4,16(r17)
   4d460:	88c00504 	addi	r3,r17,20
   4d464:	a98007cc 	andi	r6,r21,31
   4d468:	2109883a 	add	r4,r4,r4
   4d46c:	2109883a 	add	r4,r4,r4
   4d470:	1909883a 	add	r4,r3,r4
   4d474:	30002326 	beq	r6,zero,4d504 <__lshift+0x130>
   4d478:	01400804 	movi	r5,32
   4d47c:	298bc83a 	sub	r5,r5,r6
   4d480:	0013883a 	mov	r9,zero
   4d484:	1a000017 	ldw	r8,0(r3)
   4d488:	3815883a 	mov	r10,r7
   4d48c:	39c00104 	addi	r7,r7,4
   4d490:	4190983a 	sll	r8,r8,r6
   4d494:	18c00104 	addi	r3,r3,4
   4d498:	4a10b03a 	or	r8,r9,r8
   4d49c:	3a3fff15 	stw	r8,-4(r7)
   4d4a0:	1a3fff17 	ldw	r8,-4(r3)
   4d4a4:	4152d83a 	srl	r9,r8,r5
   4d4a8:	193ff636 	bltu	r3,r4,4d484 <__alt_data_end+0xfffdb484>
   4d4ac:	52400115 	stw	r9,4(r10)
   4d4b0:	48001a1e 	bne	r9,zero,4d51c <__lshift+0x148>
   4d4b4:	843fffc4 	addi	r16,r16,-1
   4d4b8:	14000415 	stw	r16,16(r2)
   4d4bc:	88000826 	beq	r17,zero,4d4e0 <__lshift+0x10c>
   4d4c0:	89000117 	ldw	r4,4(r17)
   4d4c4:	90c01317 	ldw	r3,76(r18)
   4d4c8:	2109883a 	add	r4,r4,r4
   4d4cc:	2109883a 	add	r4,r4,r4
   4d4d0:	1907883a 	add	r3,r3,r4
   4d4d4:	19000017 	ldw	r4,0(r3)
   4d4d8:	89000015 	stw	r4,0(r17)
   4d4dc:	1c400015 	stw	r17,0(r3)
   4d4e0:	dfc00617 	ldw	ra,24(sp)
   4d4e4:	dd400517 	ldw	r21,20(sp)
   4d4e8:	dd000417 	ldw	r20,16(sp)
   4d4ec:	dcc00317 	ldw	r19,12(sp)
   4d4f0:	dc800217 	ldw	r18,8(sp)
   4d4f4:	dc400117 	ldw	r17,4(sp)
   4d4f8:	dc000017 	ldw	r16,0(sp)
   4d4fc:	dec00704 	addi	sp,sp,28
   4d500:	f800283a 	ret
   4d504:	19400017 	ldw	r5,0(r3)
   4d508:	39c00104 	addi	r7,r7,4
   4d50c:	18c00104 	addi	r3,r3,4
   4d510:	397fff15 	stw	r5,-4(r7)
   4d514:	193ffb36 	bltu	r3,r4,4d504 <__alt_data_end+0xfffdb504>
   4d518:	003fe606 	br	4d4b4 <__alt_data_end+0xfffdb4b4>
   4d51c:	9c000084 	addi	r16,r19,2
   4d520:	003fe406 	br	4d4b4 <__alt_data_end+0xfffdb4b4>

0004d524 <__mcmp>:
   4d524:	20800417 	ldw	r2,16(r4)
   4d528:	28c00417 	ldw	r3,16(r5)
   4d52c:	10c5c83a 	sub	r2,r2,r3
   4d530:	1000111e 	bne	r2,zero,4d578 <__mcmp+0x54>
   4d534:	18c7883a 	add	r3,r3,r3
   4d538:	18c7883a 	add	r3,r3,r3
   4d53c:	21000504 	addi	r4,r4,20
   4d540:	29400504 	addi	r5,r5,20
   4d544:	20c5883a 	add	r2,r4,r3
   4d548:	28cb883a 	add	r5,r5,r3
   4d54c:	00000106 	br	4d554 <__mcmp+0x30>
   4d550:	20800a2e 	bgeu	r4,r2,4d57c <__mcmp+0x58>
   4d554:	10bfff04 	addi	r2,r2,-4
   4d558:	297fff04 	addi	r5,r5,-4
   4d55c:	11800017 	ldw	r6,0(r2)
   4d560:	28c00017 	ldw	r3,0(r5)
   4d564:	30fffa26 	beq	r6,r3,4d550 <__alt_data_end+0xfffdb550>
   4d568:	30c00236 	bltu	r6,r3,4d574 <__mcmp+0x50>
   4d56c:	00800044 	movi	r2,1
   4d570:	f800283a 	ret
   4d574:	00bfffc4 	movi	r2,-1
   4d578:	f800283a 	ret
   4d57c:	0005883a 	mov	r2,zero
   4d580:	f800283a 	ret

0004d584 <__mdiff>:
   4d584:	defffb04 	addi	sp,sp,-20
   4d588:	dc000015 	stw	r16,0(sp)
   4d58c:	2821883a 	mov	r16,r5
   4d590:	dcc00315 	stw	r19,12(sp)
   4d594:	300b883a 	mov	r5,r6
   4d598:	2027883a 	mov	r19,r4
   4d59c:	8009883a 	mov	r4,r16
   4d5a0:	dc800215 	stw	r18,8(sp)
   4d5a4:	dfc00415 	stw	ra,16(sp)
   4d5a8:	dc400115 	stw	r17,4(sp)
   4d5ac:	3025883a 	mov	r18,r6
   4d5b0:	004d5240 	call	4d524 <__mcmp>
   4d5b4:	10005226 	beq	r2,zero,4d700 <__mdiff+0x17c>
   4d5b8:	10004c16 	blt	r2,zero,4d6ec <__mdiff+0x168>
   4d5bc:	0023883a 	mov	r17,zero
   4d5c0:	81400117 	ldw	r5,4(r16)
   4d5c4:	9809883a 	mov	r4,r19
   4d5c8:	004cc500 	call	4cc50 <_Balloc>
   4d5cc:	83400417 	ldw	r13,16(r16)
   4d5d0:	93800417 	ldw	r14,16(r18)
   4d5d4:	81000504 	addi	r4,r16,20
   4d5d8:	6b59883a 	add	r12,r13,r13
   4d5dc:	739d883a 	add	r14,r14,r14
   4d5e0:	6319883a 	add	r12,r12,r12
   4d5e4:	91800504 	addi	r6,r18,20
   4d5e8:	739d883a 	add	r14,r14,r14
   4d5ec:	14400315 	stw	r17,12(r2)
   4d5f0:	2319883a 	add	r12,r4,r12
   4d5f4:	339d883a 	add	r14,r6,r14
   4d5f8:	12400504 	addi	r9,r2,20
   4d5fc:	0007883a 	mov	r3,zero
   4d600:	22000017 	ldw	r8,0(r4)
   4d604:	32800017 	ldw	r10,0(r6)
   4d608:	4ac00104 	addi	r11,r9,4
   4d60c:	41ffffcc 	andi	r7,r8,65535
   4d610:	38c7883a 	add	r3,r7,r3
   4d614:	51ffffcc 	andi	r7,r10,65535
   4d618:	19cfc83a 	sub	r7,r3,r7
   4d61c:	4010d43a 	srli	r8,r8,16
   4d620:	5014d43a 	srli	r10,r10,16
   4d624:	3807d43a 	srai	r3,r7,16
   4d628:	39ffffcc 	andi	r7,r7,65535
   4d62c:	4291c83a 	sub	r8,r8,r10
   4d630:	40c7883a 	add	r3,r8,r3
   4d634:	1810943a 	slli	r8,r3,16
   4d638:	31800104 	addi	r6,r6,4
   4d63c:	21000104 	addi	r4,r4,4
   4d640:	41ceb03a 	or	r7,r8,r7
   4d644:	49c00015 	stw	r7,0(r9)
   4d648:	1807d43a 	srai	r3,r3,16
   4d64c:	580b883a 	mov	r5,r11
   4d650:	5813883a 	mov	r9,r11
   4d654:	33bfea36 	bltu	r6,r14,4d600 <__alt_data_end+0xfffdb600>
   4d658:	2011883a 	mov	r8,r4
   4d65c:	2300152e 	bgeu	r4,r12,4d6b4 <__mdiff+0x130>
   4d660:	21400017 	ldw	r5,0(r4)
   4d664:	4a400104 	addi	r9,r9,4
   4d668:	21000104 	addi	r4,r4,4
   4d66c:	29ffffcc 	andi	r7,r5,65535
   4d670:	38c7883a 	add	r3,r7,r3
   4d674:	280ad43a 	srli	r5,r5,16
   4d678:	180dd43a 	srai	r6,r3,16
   4d67c:	19ffffcc 	andi	r7,r3,65535
   4d680:	3147883a 	add	r3,r6,r5
   4d684:	180a943a 	slli	r5,r3,16
   4d688:	1807d43a 	srai	r3,r3,16
   4d68c:	29ceb03a 	or	r7,r5,r7
   4d690:	49ffff15 	stw	r7,-4(r9)
   4d694:	233ff236 	bltu	r4,r12,4d660 <__alt_data_end+0xfffdb660>
   4d698:	0206303a 	nor	r3,zero,r8
   4d69c:	1b07883a 	add	r3,r3,r12
   4d6a0:	1806d0ba 	srli	r3,r3,2
   4d6a4:	18c00044 	addi	r3,r3,1
   4d6a8:	18c7883a 	add	r3,r3,r3
   4d6ac:	18c7883a 	add	r3,r3,r3
   4d6b0:	58cb883a 	add	r5,r11,r3
   4d6b4:	28ffff04 	addi	r3,r5,-4
   4d6b8:	3800041e 	bne	r7,zero,4d6cc <__mdiff+0x148>
   4d6bc:	18ffff04 	addi	r3,r3,-4
   4d6c0:	19000017 	ldw	r4,0(r3)
   4d6c4:	6b7fffc4 	addi	r13,r13,-1
   4d6c8:	203ffc26 	beq	r4,zero,4d6bc <__alt_data_end+0xfffdb6bc>
   4d6cc:	13400415 	stw	r13,16(r2)
   4d6d0:	dfc00417 	ldw	ra,16(sp)
   4d6d4:	dcc00317 	ldw	r19,12(sp)
   4d6d8:	dc800217 	ldw	r18,8(sp)
   4d6dc:	dc400117 	ldw	r17,4(sp)
   4d6e0:	dc000017 	ldw	r16,0(sp)
   4d6e4:	dec00504 	addi	sp,sp,20
   4d6e8:	f800283a 	ret
   4d6ec:	8005883a 	mov	r2,r16
   4d6f0:	04400044 	movi	r17,1
   4d6f4:	9021883a 	mov	r16,r18
   4d6f8:	1025883a 	mov	r18,r2
   4d6fc:	003fb006 	br	4d5c0 <__alt_data_end+0xfffdb5c0>
   4d700:	9809883a 	mov	r4,r19
   4d704:	000b883a 	mov	r5,zero
   4d708:	004cc500 	call	4cc50 <_Balloc>
   4d70c:	00c00044 	movi	r3,1
   4d710:	10c00415 	stw	r3,16(r2)
   4d714:	10000515 	stw	zero,20(r2)
   4d718:	003fed06 	br	4d6d0 <__alt_data_end+0xfffdb6d0>

0004d71c <__ulp>:
   4d71c:	295ffc2c 	andhi	r5,r5,32752
   4d720:	00bf3034 	movhi	r2,64704
   4d724:	2887883a 	add	r3,r5,r2
   4d728:	00c0020e 	bge	zero,r3,4d734 <__ulp+0x18>
   4d72c:	0005883a 	mov	r2,zero
   4d730:	f800283a 	ret
   4d734:	00c7c83a 	sub	r3,zero,r3
   4d738:	180bd53a 	srai	r5,r3,20
   4d73c:	008004c4 	movi	r2,19
   4d740:	11400a0e 	bge	r2,r5,4d76c <__ulp+0x50>
   4d744:	00800c84 	movi	r2,50
   4d748:	0007883a 	mov	r3,zero
   4d74c:	11400516 	blt	r2,r5,4d764 <__ulp+0x48>
   4d750:	00800cc4 	movi	r2,51
   4d754:	114bc83a 	sub	r5,r2,r5
   4d758:	00800044 	movi	r2,1
   4d75c:	1144983a 	sll	r2,r2,r5
   4d760:	f800283a 	ret
   4d764:	00800044 	movi	r2,1
   4d768:	f800283a 	ret
   4d76c:	00800234 	movhi	r2,8
   4d770:	1147d83a 	sra	r3,r2,r5
   4d774:	0005883a 	mov	r2,zero
   4d778:	f800283a 	ret

0004d77c <__b2d>:
   4d77c:	defffa04 	addi	sp,sp,-24
   4d780:	dc000015 	stw	r16,0(sp)
   4d784:	24000417 	ldw	r16,16(r4)
   4d788:	dc400115 	stw	r17,4(sp)
   4d78c:	24400504 	addi	r17,r4,20
   4d790:	8421883a 	add	r16,r16,r16
   4d794:	8421883a 	add	r16,r16,r16
   4d798:	8c21883a 	add	r16,r17,r16
   4d79c:	dc800215 	stw	r18,8(sp)
   4d7a0:	84bfff17 	ldw	r18,-4(r16)
   4d7a4:	dd000415 	stw	r20,16(sp)
   4d7a8:	dcc00315 	stw	r19,12(sp)
   4d7ac:	9009883a 	mov	r4,r18
   4d7b0:	2829883a 	mov	r20,r5
   4d7b4:	dfc00515 	stw	ra,20(sp)
   4d7b8:	004cf440 	call	4cf44 <__hi0bits>
   4d7bc:	00c00804 	movi	r3,32
   4d7c0:	1887c83a 	sub	r3,r3,r2
   4d7c4:	a0c00015 	stw	r3,0(r20)
   4d7c8:	00c00284 	movi	r3,10
   4d7cc:	84ffff04 	addi	r19,r16,-4
   4d7d0:	18801216 	blt	r3,r2,4d81c <__b2d+0xa0>
   4d7d4:	014002c4 	movi	r5,11
   4d7d8:	2889c83a 	sub	r4,r5,r2
   4d7dc:	9106d83a 	srl	r3,r18,r4
   4d7e0:	18cffc34 	orhi	r3,r3,16368
   4d7e4:	8cc0282e 	bgeu	r17,r19,4d888 <__b2d+0x10c>
   4d7e8:	817ffe17 	ldw	r5,-8(r16)
   4d7ec:	290ad83a 	srl	r5,r5,r4
   4d7f0:	10800544 	addi	r2,r2,21
   4d7f4:	9084983a 	sll	r2,r18,r2
   4d7f8:	2884b03a 	or	r2,r5,r2
   4d7fc:	dfc00517 	ldw	ra,20(sp)
   4d800:	dd000417 	ldw	r20,16(sp)
   4d804:	dcc00317 	ldw	r19,12(sp)
   4d808:	dc800217 	ldw	r18,8(sp)
   4d80c:	dc400117 	ldw	r17,4(sp)
   4d810:	dc000017 	ldw	r16,0(sp)
   4d814:	dec00604 	addi	sp,sp,24
   4d818:	f800283a 	ret
   4d81c:	113ffd44 	addi	r4,r2,-11
   4d820:	8cc00f2e 	bgeu	r17,r19,4d860 <__b2d+0xe4>
   4d824:	81bffe04 	addi	r6,r16,-8
   4d828:	817ffe17 	ldw	r5,-8(r16)
   4d82c:	20001326 	beq	r4,zero,4d87c <__b2d+0x100>
   4d830:	00c00ac4 	movi	r3,43
   4d834:	1885c83a 	sub	r2,r3,r2
   4d838:	2886d83a 	srl	r3,r5,r2
   4d83c:	9124983a 	sll	r18,r18,r4
   4d840:	90e4b03a 	or	r18,r18,r3
   4d844:	90cffc34 	orhi	r3,r18,16368
   4d848:	8980112e 	bgeu	r17,r6,4d890 <__b2d+0x114>
   4d84c:	81bffd17 	ldw	r6,-12(r16)
   4d850:	308cd83a 	srl	r6,r6,r2
   4d854:	2904983a 	sll	r2,r5,r4
   4d858:	1184b03a 	or	r2,r2,r6
   4d85c:	003fe706 	br	4d7fc <__alt_data_end+0xfffdb7fc>
   4d860:	20000526 	beq	r4,zero,4d878 <__b2d+0xfc>
   4d864:	9124983a 	sll	r18,r18,r4
   4d868:	000d883a 	mov	r6,zero
   4d86c:	000b883a 	mov	r5,zero
   4d870:	90cffc34 	orhi	r3,r18,16368
   4d874:	003ff706 	br	4d854 <__alt_data_end+0xfffdb854>
   4d878:	000b883a 	mov	r5,zero
   4d87c:	90cffc34 	orhi	r3,r18,16368
   4d880:	2805883a 	mov	r2,r5
   4d884:	003fdd06 	br	4d7fc <__alt_data_end+0xfffdb7fc>
   4d888:	000b883a 	mov	r5,zero
   4d88c:	003fd806 	br	4d7f0 <__alt_data_end+0xfffdb7f0>
   4d890:	000d883a 	mov	r6,zero
   4d894:	003fef06 	br	4d854 <__alt_data_end+0xfffdb854>

0004d898 <__d2b>:
   4d898:	defff704 	addi	sp,sp,-36
   4d89c:	dc000215 	stw	r16,8(sp)
   4d8a0:	3021883a 	mov	r16,r6
   4d8a4:	dc400315 	stw	r17,12(sp)
   4d8a8:	8022907a 	slli	r17,r16,1
   4d8ac:	dd400715 	stw	r21,28(sp)
   4d8b0:	282b883a 	mov	r21,r5
   4d8b4:	01400044 	movi	r5,1
   4d8b8:	dd000615 	stw	r20,24(sp)
   4d8bc:	dcc00515 	stw	r19,20(sp)
   4d8c0:	dc800415 	stw	r18,16(sp)
   4d8c4:	dfc00815 	stw	ra,32(sp)
   4d8c8:	3829883a 	mov	r20,r7
   4d8cc:	dc800917 	ldw	r18,36(sp)
   4d8d0:	8822d57a 	srli	r17,r17,21
   4d8d4:	004cc500 	call	4cc50 <_Balloc>
   4d8d8:	1027883a 	mov	r19,r2
   4d8dc:	00800434 	movhi	r2,16
   4d8e0:	10bfffc4 	addi	r2,r2,-1
   4d8e4:	808c703a 	and	r6,r16,r2
   4d8e8:	88000126 	beq	r17,zero,4d8f0 <__d2b+0x58>
   4d8ec:	31800434 	orhi	r6,r6,16
   4d8f0:	d9800015 	stw	r6,0(sp)
   4d8f4:	a8001f26 	beq	r21,zero,4d974 <__d2b+0xdc>
   4d8f8:	d9000104 	addi	r4,sp,4
   4d8fc:	dd400115 	stw	r21,4(sp)
   4d900:	004cfac0 	call	4cfac <__lo0bits>
   4d904:	d8c00017 	ldw	r3,0(sp)
   4d908:	1000291e 	bne	r2,zero,4d9b0 <__d2b+0x118>
   4d90c:	d9000117 	ldw	r4,4(sp)
   4d910:	99000515 	stw	r4,20(r19)
   4d914:	1820c03a 	cmpne	r16,r3,zero
   4d918:	84000044 	addi	r16,r16,1
   4d91c:	98c00615 	stw	r3,24(r19)
   4d920:	9c000415 	stw	r16,16(r19)
   4d924:	88001b1e 	bne	r17,zero,4d994 <__d2b+0xfc>
   4d928:	800690ba 	slli	r3,r16,2
   4d92c:	10bef384 	addi	r2,r2,-1074
   4d930:	a0800015 	stw	r2,0(r20)
   4d934:	98c5883a 	add	r2,r19,r3
   4d938:	11000417 	ldw	r4,16(r2)
   4d93c:	8020917a 	slli	r16,r16,5
   4d940:	004cf440 	call	4cf44 <__hi0bits>
   4d944:	8085c83a 	sub	r2,r16,r2
   4d948:	90800015 	stw	r2,0(r18)
   4d94c:	9805883a 	mov	r2,r19
   4d950:	dfc00817 	ldw	ra,32(sp)
   4d954:	dd400717 	ldw	r21,28(sp)
   4d958:	dd000617 	ldw	r20,24(sp)
   4d95c:	dcc00517 	ldw	r19,20(sp)
   4d960:	dc800417 	ldw	r18,16(sp)
   4d964:	dc400317 	ldw	r17,12(sp)
   4d968:	dc000217 	ldw	r16,8(sp)
   4d96c:	dec00904 	addi	sp,sp,36
   4d970:	f800283a 	ret
   4d974:	d809883a 	mov	r4,sp
   4d978:	004cfac0 	call	4cfac <__lo0bits>
   4d97c:	d8c00017 	ldw	r3,0(sp)
   4d980:	04000044 	movi	r16,1
   4d984:	9c000415 	stw	r16,16(r19)
   4d988:	98c00515 	stw	r3,20(r19)
   4d98c:	10800804 	addi	r2,r2,32
   4d990:	883fe526 	beq	r17,zero,4d928 <__alt_data_end+0xfffdb928>
   4d994:	8c7ef344 	addi	r17,r17,-1075
   4d998:	88a3883a 	add	r17,r17,r2
   4d99c:	00c00d44 	movi	r3,53
   4d9a0:	a4400015 	stw	r17,0(r20)
   4d9a4:	1885c83a 	sub	r2,r3,r2
   4d9a8:	90800015 	stw	r2,0(r18)
   4d9ac:	003fe706 	br	4d94c <__alt_data_end+0xfffdb94c>
   4d9b0:	01000804 	movi	r4,32
   4d9b4:	2089c83a 	sub	r4,r4,r2
   4d9b8:	1908983a 	sll	r4,r3,r4
   4d9bc:	d9400117 	ldw	r5,4(sp)
   4d9c0:	1886d83a 	srl	r3,r3,r2
   4d9c4:	2148b03a 	or	r4,r4,r5
   4d9c8:	99000515 	stw	r4,20(r19)
   4d9cc:	d8c00015 	stw	r3,0(sp)
   4d9d0:	003fd006 	br	4d914 <__alt_data_end+0xfffdb914>

0004d9d4 <__ratio>:
   4d9d4:	defff904 	addi	sp,sp,-28
   4d9d8:	dc400315 	stw	r17,12(sp)
   4d9dc:	2823883a 	mov	r17,r5
   4d9e0:	d9400104 	addi	r5,sp,4
   4d9e4:	dfc00615 	stw	ra,24(sp)
   4d9e8:	dcc00515 	stw	r19,20(sp)
   4d9ec:	dc800415 	stw	r18,16(sp)
   4d9f0:	2027883a 	mov	r19,r4
   4d9f4:	dc000215 	stw	r16,8(sp)
   4d9f8:	004d77c0 	call	4d77c <__b2d>
   4d9fc:	8809883a 	mov	r4,r17
   4da00:	d80b883a 	mov	r5,sp
   4da04:	1025883a 	mov	r18,r2
   4da08:	1821883a 	mov	r16,r3
   4da0c:	004d77c0 	call	4d77c <__b2d>
   4da10:	8a400417 	ldw	r9,16(r17)
   4da14:	9a000417 	ldw	r8,16(r19)
   4da18:	100d883a 	mov	r6,r2
   4da1c:	d8800017 	ldw	r2,0(sp)
   4da20:	4251c83a 	sub	r8,r8,r9
   4da24:	4012917a 	slli	r9,r8,5
   4da28:	da000117 	ldw	r8,4(sp)
   4da2c:	4091c83a 	sub	r8,r8,r2
   4da30:	4251883a 	add	r8,r8,r9
   4da34:	02000d0e 	bge	zero,r8,4da6c <__ratio+0x98>
   4da38:	4010953a 	slli	r8,r8,20
   4da3c:	4421883a 	add	r16,r8,r16
   4da40:	9009883a 	mov	r4,r18
   4da44:	800b883a 	mov	r5,r16
   4da48:	180f883a 	mov	r7,r3
   4da4c:	00462d40 	call	462d4 <__divdf3>
   4da50:	dfc00617 	ldw	ra,24(sp)
   4da54:	dcc00517 	ldw	r19,20(sp)
   4da58:	dc800417 	ldw	r18,16(sp)
   4da5c:	dc400317 	ldw	r17,12(sp)
   4da60:	dc000217 	ldw	r16,8(sp)
   4da64:	dec00704 	addi	sp,sp,28
   4da68:	f800283a 	ret
   4da6c:	4010953a 	slli	r8,r8,20
   4da70:	1a07c83a 	sub	r3,r3,r8
   4da74:	003ff206 	br	4da40 <__alt_data_end+0xfffdba40>

0004da78 <_mprec_log10>:
   4da78:	defffe04 	addi	sp,sp,-8
   4da7c:	dc000015 	stw	r16,0(sp)
   4da80:	dfc00115 	stw	ra,4(sp)
   4da84:	008005c4 	movi	r2,23
   4da88:	2021883a 	mov	r16,r4
   4da8c:	11000d0e 	bge	r2,r4,4dac4 <_mprec_log10+0x4c>
   4da90:	0005883a 	mov	r2,zero
   4da94:	00cffc34 	movhi	r3,16368
   4da98:	843fffc4 	addi	r16,r16,-1
   4da9c:	1009883a 	mov	r4,r2
   4daa0:	180b883a 	mov	r5,r3
   4daa4:	000d883a 	mov	r6,zero
   4daa8:	01d00934 	movhi	r7,16420
   4daac:	0046d040 	call	46d04 <__muldf3>
   4dab0:	803ff91e 	bne	r16,zero,4da98 <__alt_data_end+0xfffdba98>
   4dab4:	dfc00117 	ldw	ra,4(sp)
   4dab8:	dc000017 	ldw	r16,0(sp)
   4dabc:	dec00204 	addi	sp,sp,8
   4dac0:	f800283a 	ret
   4dac4:	202090fa 	slli	r16,r4,3
   4dac8:	00800174 	movhi	r2,5
   4dacc:	10930904 	addi	r2,r2,19492
   4dad0:	1421883a 	add	r16,r2,r16
   4dad4:	80800017 	ldw	r2,0(r16)
   4dad8:	80c00117 	ldw	r3,4(r16)
   4dadc:	dfc00117 	ldw	ra,4(sp)
   4dae0:	dc000017 	ldw	r16,0(sp)
   4dae4:	dec00204 	addi	sp,sp,8
   4dae8:	f800283a 	ret

0004daec <__copybits>:
   4daec:	297fffc4 	addi	r5,r5,-1
   4daf0:	280fd17a 	srai	r7,r5,5
   4daf4:	30c00417 	ldw	r3,16(r6)
   4daf8:	30800504 	addi	r2,r6,20
   4dafc:	39c00044 	addi	r7,r7,1
   4db00:	18c7883a 	add	r3,r3,r3
   4db04:	39cf883a 	add	r7,r7,r7
   4db08:	18c7883a 	add	r3,r3,r3
   4db0c:	39cf883a 	add	r7,r7,r7
   4db10:	10c7883a 	add	r3,r2,r3
   4db14:	21cf883a 	add	r7,r4,r7
   4db18:	10c00d2e 	bgeu	r2,r3,4db50 <__copybits+0x64>
   4db1c:	200b883a 	mov	r5,r4
   4db20:	12000017 	ldw	r8,0(r2)
   4db24:	29400104 	addi	r5,r5,4
   4db28:	10800104 	addi	r2,r2,4
   4db2c:	2a3fff15 	stw	r8,-4(r5)
   4db30:	10fffb36 	bltu	r2,r3,4db20 <__alt_data_end+0xfffdbb20>
   4db34:	1985c83a 	sub	r2,r3,r6
   4db38:	10bffac4 	addi	r2,r2,-21
   4db3c:	1004d0ba 	srli	r2,r2,2
   4db40:	10800044 	addi	r2,r2,1
   4db44:	1085883a 	add	r2,r2,r2
   4db48:	1085883a 	add	r2,r2,r2
   4db4c:	2089883a 	add	r4,r4,r2
   4db50:	21c0032e 	bgeu	r4,r7,4db60 <__copybits+0x74>
   4db54:	20000015 	stw	zero,0(r4)
   4db58:	21000104 	addi	r4,r4,4
   4db5c:	21fffd36 	bltu	r4,r7,4db54 <__alt_data_end+0xfffdbb54>
   4db60:	f800283a 	ret

0004db64 <__any_on>:
   4db64:	20c00417 	ldw	r3,16(r4)
   4db68:	2805d17a 	srai	r2,r5,5
   4db6c:	21000504 	addi	r4,r4,20
   4db70:	18800d0e 	bge	r3,r2,4dba8 <__any_on+0x44>
   4db74:	18c7883a 	add	r3,r3,r3
   4db78:	18c7883a 	add	r3,r3,r3
   4db7c:	20c7883a 	add	r3,r4,r3
   4db80:	20c0192e 	bgeu	r4,r3,4dbe8 <__any_on+0x84>
   4db84:	18bfff17 	ldw	r2,-4(r3)
   4db88:	18ffff04 	addi	r3,r3,-4
   4db8c:	1000041e 	bne	r2,zero,4dba0 <__any_on+0x3c>
   4db90:	20c0142e 	bgeu	r4,r3,4dbe4 <__any_on+0x80>
   4db94:	18ffff04 	addi	r3,r3,-4
   4db98:	19400017 	ldw	r5,0(r3)
   4db9c:	283ffc26 	beq	r5,zero,4db90 <__alt_data_end+0xfffdbb90>
   4dba0:	00800044 	movi	r2,1
   4dba4:	f800283a 	ret
   4dba8:	10c00a0e 	bge	r2,r3,4dbd4 <__any_on+0x70>
   4dbac:	1085883a 	add	r2,r2,r2
   4dbb0:	1085883a 	add	r2,r2,r2
   4dbb4:	294007cc 	andi	r5,r5,31
   4dbb8:	2087883a 	add	r3,r4,r2
   4dbbc:	283ff026 	beq	r5,zero,4db80 <__alt_data_end+0xfffdbb80>
   4dbc0:	19800017 	ldw	r6,0(r3)
   4dbc4:	3144d83a 	srl	r2,r6,r5
   4dbc8:	114a983a 	sll	r5,r2,r5
   4dbcc:	29bff41e 	bne	r5,r6,4dba0 <__alt_data_end+0xfffdbba0>
   4dbd0:	003feb06 	br	4db80 <__alt_data_end+0xfffdbb80>
   4dbd4:	1085883a 	add	r2,r2,r2
   4dbd8:	1085883a 	add	r2,r2,r2
   4dbdc:	2087883a 	add	r3,r4,r2
   4dbe0:	003fe706 	br	4db80 <__alt_data_end+0xfffdbb80>
   4dbe4:	f800283a 	ret
   4dbe8:	0005883a 	mov	r2,zero
   4dbec:	f800283a 	ret

0004dbf0 <_realloc_r>:
   4dbf0:	defff604 	addi	sp,sp,-40
   4dbf4:	dd000415 	stw	r20,16(sp)
   4dbf8:	dc400115 	stw	r17,4(sp)
   4dbfc:	dfc00915 	stw	ra,36(sp)
   4dc00:	df000815 	stw	fp,32(sp)
   4dc04:	ddc00715 	stw	r23,28(sp)
   4dc08:	dd800615 	stw	r22,24(sp)
   4dc0c:	dd400515 	stw	r21,20(sp)
   4dc10:	dcc00315 	stw	r19,12(sp)
   4dc14:	dc800215 	stw	r18,8(sp)
   4dc18:	dc000015 	stw	r16,0(sp)
   4dc1c:	2829883a 	mov	r20,r5
   4dc20:	3023883a 	mov	r17,r6
   4dc24:	2800ad26 	beq	r5,zero,4dedc <_realloc_r+0x2ec>
   4dc28:	2025883a 	mov	r18,r4
   4dc2c:	0051e240 	call	51e24 <__malloc_lock>
   4dc30:	a0ffff17 	ldw	r3,-4(r20)
   4dc34:	043fff04 	movi	r16,-4
   4dc38:	890002c4 	addi	r4,r17,11
   4dc3c:	01c00584 	movi	r7,22
   4dc40:	a57ffe04 	addi	r21,r20,-8
   4dc44:	1c20703a 	and	r16,r3,r16
   4dc48:	39001d2e 	bgeu	r7,r4,4dcc0 <_realloc_r+0xd0>
   4dc4c:	05bffe04 	movi	r22,-8
   4dc50:	25ac703a 	and	r22,r4,r22
   4dc54:	b00f883a 	mov	r7,r22
   4dc58:	b0006516 	blt	r22,zero,4ddf0 <_realloc_r+0x200>
   4dc5c:	b4406436 	bltu	r22,r17,4ddf0 <_realloc_r+0x200>
   4dc60:	81c01a0e 	bge	r16,r7,4dccc <_realloc_r+0xdc>
   4dc64:	07000174 	movhi	fp,5
   4dc68:	e7149d04 	addi	fp,fp,21108
   4dc6c:	e1400217 	ldw	r5,8(fp)
   4dc70:	ac11883a 	add	r8,r21,r16
   4dc74:	2a006226 	beq	r5,r8,4de00 <_realloc_r+0x210>
   4dc78:	41800117 	ldw	r6,4(r8)
   4dc7c:	027fff84 	movi	r9,-2
   4dc80:	3252703a 	and	r9,r6,r9
   4dc84:	4253883a 	add	r9,r8,r9
   4dc88:	49000117 	ldw	r4,4(r9)
   4dc8c:	2100004c 	andi	r4,r4,1
   4dc90:	2000281e 	bne	r4,zero,4dd34 <_realloc_r+0x144>
   4dc94:	00bfff04 	movi	r2,-4
   4dc98:	3084703a 	and	r2,r6,r2
   4dc9c:	1409883a 	add	r4,r2,r16
   4dca0:	21c05e16 	blt	r4,r7,4de1c <_realloc_r+0x22c>
   4dca4:	40800317 	ldw	r2,12(r8)
   4dca8:	41400217 	ldw	r5,8(r8)
   4dcac:	a023883a 	mov	r17,r20
   4dcb0:	2021883a 	mov	r16,r4
   4dcb4:	28800315 	stw	r2,12(r5)
   4dcb8:	11400215 	stw	r5,8(r2)
   4dcbc:	00000406 	br	4dcd0 <_realloc_r+0xe0>
   4dcc0:	01c00404 	movi	r7,16
   4dcc4:	382d883a 	mov	r22,r7
   4dcc8:	003fe406 	br	4dc5c <__alt_data_end+0xfffdbc5c>
   4dccc:	a023883a 	mov	r17,r20
   4dcd0:	858fc83a 	sub	r7,r16,r22
   4dcd4:	008003c4 	movi	r2,15
   4dcd8:	18c0004c 	andi	r3,r3,1
   4dcdc:	11c07236 	bltu	r2,r7,4dea8 <_realloc_r+0x2b8>
   4dce0:	1c06b03a 	or	r3,r3,r16
   4dce4:	a8c00115 	stw	r3,4(r21)
   4dce8:	ac21883a 	add	r16,r21,r16
   4dcec:	80800117 	ldw	r2,4(r16)
   4dcf0:	10800054 	ori	r2,r2,1
   4dcf4:	80800115 	stw	r2,4(r16)
   4dcf8:	9009883a 	mov	r4,r18
   4dcfc:	0051e440 	call	51e44 <__malloc_unlock>
   4dd00:	8805883a 	mov	r2,r17
   4dd04:	dfc00917 	ldw	ra,36(sp)
   4dd08:	df000817 	ldw	fp,32(sp)
   4dd0c:	ddc00717 	ldw	r23,28(sp)
   4dd10:	dd800617 	ldw	r22,24(sp)
   4dd14:	dd400517 	ldw	r21,20(sp)
   4dd18:	dd000417 	ldw	r20,16(sp)
   4dd1c:	dcc00317 	ldw	r19,12(sp)
   4dd20:	dc800217 	ldw	r18,8(sp)
   4dd24:	dc400117 	ldw	r17,4(sp)
   4dd28:	dc000017 	ldw	r16,0(sp)
   4dd2c:	dec00a04 	addi	sp,sp,40
   4dd30:	f800283a 	ret
   4dd34:	18c0004c 	andi	r3,r3,1
   4dd38:	1800081e 	bne	r3,zero,4dd5c <_realloc_r+0x16c>
   4dd3c:	a4fffe17 	ldw	r19,-8(r20)
   4dd40:	00bfff04 	movi	r2,-4
   4dd44:	ace7c83a 	sub	r19,r21,r19
   4dd48:	98c00117 	ldw	r3,4(r19)
   4dd4c:	1886703a 	and	r3,r3,r2
   4dd50:	98000226 	beq	r19,zero,4dd5c <_realloc_r+0x16c>
   4dd54:	1c2f883a 	add	r23,r3,r16
   4dd58:	b9c06d0e 	bge	r23,r7,4df10 <_realloc_r+0x320>
   4dd5c:	880b883a 	mov	r5,r17
   4dd60:	9009883a 	mov	r4,r18
   4dd64:	004c12c0 	call	4c12c <_malloc_r>
   4dd68:	1023883a 	mov	r17,r2
   4dd6c:	1000ef26 	beq	r2,zero,4e12c <_realloc_r+0x53c>
   4dd70:	a0ffff17 	ldw	r3,-4(r20)
   4dd74:	113ffe04 	addi	r4,r2,-8
   4dd78:	00bfff84 	movi	r2,-2
   4dd7c:	1884703a 	and	r2,r3,r2
   4dd80:	a885883a 	add	r2,r21,r2
   4dd84:	2080bf26 	beq	r4,r2,4e084 <_realloc_r+0x494>
   4dd88:	81bfff04 	addi	r6,r16,-4
   4dd8c:	00800904 	movi	r2,36
   4dd90:	11808936 	bltu	r2,r6,4dfb8 <_realloc_r+0x3c8>
   4dd94:	00c004c4 	movi	r3,19
   4dd98:	19806c2e 	bgeu	r3,r6,4df4c <_realloc_r+0x35c>
   4dd9c:	a0c00017 	ldw	r3,0(r20)
   4dda0:	88c00015 	stw	r3,0(r17)
   4dda4:	a0c00117 	ldw	r3,4(r20)
   4dda8:	88c00115 	stw	r3,4(r17)
   4ddac:	00c006c4 	movi	r3,27
   4ddb0:	1980ac36 	bltu	r3,r6,4e064 <_realloc_r+0x474>
   4ddb4:	88800204 	addi	r2,r17,8
   4ddb8:	a0c00204 	addi	r3,r20,8
   4ddbc:	19000017 	ldw	r4,0(r3)
   4ddc0:	11000015 	stw	r4,0(r2)
   4ddc4:	19000117 	ldw	r4,4(r3)
   4ddc8:	11000115 	stw	r4,4(r2)
   4ddcc:	18c00217 	ldw	r3,8(r3)
   4ddd0:	10c00215 	stw	r3,8(r2)
   4ddd4:	a00b883a 	mov	r5,r20
   4ddd8:	9009883a 	mov	r4,r18
   4dddc:	004fe380 	call	4fe38 <_free_r>
   4dde0:	9009883a 	mov	r4,r18
   4dde4:	0051e440 	call	51e44 <__malloc_unlock>
   4dde8:	8805883a 	mov	r2,r17
   4ddec:	003fc506 	br	4dd04 <__alt_data_end+0xfffdbd04>
   4ddf0:	00800304 	movi	r2,12
   4ddf4:	90800015 	stw	r2,0(r18)
   4ddf8:	0005883a 	mov	r2,zero
   4ddfc:	003fc106 	br	4dd04 <__alt_data_end+0xfffdbd04>
   4de00:	29800117 	ldw	r6,4(r5)
   4de04:	00bfff04 	movi	r2,-4
   4de08:	b1000404 	addi	r4,r22,16
   4de0c:	3084703a 	and	r2,r6,r2
   4de10:	140d883a 	add	r6,r2,r16
   4de14:	31005b0e 	bge	r6,r4,4df84 <_realloc_r+0x394>
   4de18:	2811883a 	mov	r8,r5
   4de1c:	18c0004c 	andi	r3,r3,1
   4de20:	183fce1e 	bne	r3,zero,4dd5c <__alt_data_end+0xfffdbd5c>
   4de24:	a4fffe17 	ldw	r19,-8(r20)
   4de28:	00ffff04 	movi	r3,-4
   4de2c:	ace7c83a 	sub	r19,r21,r19
   4de30:	99000117 	ldw	r4,4(r19)
   4de34:	20c6703a 	and	r3,r4,r3
   4de38:	403fc526 	beq	r8,zero,4dd50 <__alt_data_end+0xfffdbd50>
   4de3c:	1c2f883a 	add	r23,r3,r16
   4de40:	b8af883a 	add	r23,r23,r2
   4de44:	41406026 	beq	r8,r5,4dfc8 <_realloc_r+0x3d8>
   4de48:	b9ffc116 	blt	r23,r7,4dd50 <__alt_data_end+0xfffdbd50>
   4de4c:	40c00217 	ldw	r3,8(r8)
   4de50:	40800317 	ldw	r2,12(r8)
   4de54:	81bfff04 	addi	r6,r16,-4
   4de58:	01000904 	movi	r4,36
   4de5c:	18800315 	stw	r2,12(r3)
   4de60:	10c00215 	stw	r3,8(r2)
   4de64:	99400217 	ldw	r5,8(r19)
   4de68:	98c00317 	ldw	r3,12(r19)
   4de6c:	9c400204 	addi	r17,r19,8
   4de70:	28c00315 	stw	r3,12(r5)
   4de74:	19400215 	stw	r5,8(r3)
   4de78:	21802d36 	bltu	r4,r6,4df30 <_realloc_r+0x340>
   4de7c:	008004c4 	movi	r2,19
   4de80:	1180352e 	bgeu	r2,r6,4df58 <_realloc_r+0x368>
   4de84:	a0800017 	ldw	r2,0(r20)
   4de88:	98800215 	stw	r2,8(r19)
   4de8c:	a0800117 	ldw	r2,4(r20)
   4de90:	98800315 	stw	r2,12(r19)
   4de94:	008006c4 	movi	r2,27
   4de98:	11808036 	bltu	r2,r6,4e09c <_realloc_r+0x4ac>
   4de9c:	98c00404 	addi	r3,r19,16
   4dea0:	a5000204 	addi	r20,r20,8
   4dea4:	00002d06 	br	4df5c <_realloc_r+0x36c>
   4dea8:	1d86b03a 	or	r3,r3,r22
   4deac:	ad8b883a 	add	r5,r21,r22
   4deb0:	a8c00115 	stw	r3,4(r21)
   4deb4:	38800054 	ori	r2,r7,1
   4deb8:	28800115 	stw	r2,4(r5)
   4debc:	29cf883a 	add	r7,r5,r7
   4dec0:	38800117 	ldw	r2,4(r7)
   4dec4:	9009883a 	mov	r4,r18
   4dec8:	29400204 	addi	r5,r5,8
   4decc:	10800054 	ori	r2,r2,1
   4ded0:	38800115 	stw	r2,4(r7)
   4ded4:	004fe380 	call	4fe38 <_free_r>
   4ded8:	003f8706 	br	4dcf8 <__alt_data_end+0xfffdbcf8>
   4dedc:	300b883a 	mov	r5,r6
   4dee0:	dfc00917 	ldw	ra,36(sp)
   4dee4:	df000817 	ldw	fp,32(sp)
   4dee8:	ddc00717 	ldw	r23,28(sp)
   4deec:	dd800617 	ldw	r22,24(sp)
   4def0:	dd400517 	ldw	r21,20(sp)
   4def4:	dd000417 	ldw	r20,16(sp)
   4def8:	dcc00317 	ldw	r19,12(sp)
   4defc:	dc800217 	ldw	r18,8(sp)
   4df00:	dc400117 	ldw	r17,4(sp)
   4df04:	dc000017 	ldw	r16,0(sp)
   4df08:	dec00a04 	addi	sp,sp,40
   4df0c:	004c12c1 	jmpi	4c12c <_malloc_r>
   4df10:	98800317 	ldw	r2,12(r19)
   4df14:	98c00217 	ldw	r3,8(r19)
   4df18:	81bfff04 	addi	r6,r16,-4
   4df1c:	01000904 	movi	r4,36
   4df20:	18800315 	stw	r2,12(r3)
   4df24:	10c00215 	stw	r3,8(r2)
   4df28:	9c400204 	addi	r17,r19,8
   4df2c:	21bfd32e 	bgeu	r4,r6,4de7c <__alt_data_end+0xfffdbe7c>
   4df30:	8809883a 	mov	r4,r17
   4df34:	a00b883a 	mov	r5,r20
   4df38:	004caf40 	call	4caf4 <memmove>
   4df3c:	98c00117 	ldw	r3,4(r19)
   4df40:	b821883a 	mov	r16,r23
   4df44:	982b883a 	mov	r21,r19
   4df48:	003f6106 	br	4dcd0 <__alt_data_end+0xfffdbcd0>
   4df4c:	8805883a 	mov	r2,r17
   4df50:	a007883a 	mov	r3,r20
   4df54:	003f9906 	br	4ddbc <__alt_data_end+0xfffdbdbc>
   4df58:	8807883a 	mov	r3,r17
   4df5c:	a0800017 	ldw	r2,0(r20)
   4df60:	b821883a 	mov	r16,r23
   4df64:	982b883a 	mov	r21,r19
   4df68:	18800015 	stw	r2,0(r3)
   4df6c:	a0800117 	ldw	r2,4(r20)
   4df70:	18800115 	stw	r2,4(r3)
   4df74:	a0800217 	ldw	r2,8(r20)
   4df78:	18800215 	stw	r2,8(r3)
   4df7c:	98c00117 	ldw	r3,4(r19)
   4df80:	003f5306 	br	4dcd0 <__alt_data_end+0xfffdbcd0>
   4df84:	adab883a 	add	r21,r21,r22
   4df88:	3585c83a 	sub	r2,r6,r22
   4df8c:	e5400215 	stw	r21,8(fp)
   4df90:	10800054 	ori	r2,r2,1
   4df94:	a8800115 	stw	r2,4(r21)
   4df98:	a0bfff17 	ldw	r2,-4(r20)
   4df9c:	9009883a 	mov	r4,r18
   4dfa0:	1080004c 	andi	r2,r2,1
   4dfa4:	b0acb03a 	or	r22,r22,r2
   4dfa8:	a5bfff15 	stw	r22,-4(r20)
   4dfac:	0051e440 	call	51e44 <__malloc_unlock>
   4dfb0:	a005883a 	mov	r2,r20
   4dfb4:	003f5306 	br	4dd04 <__alt_data_end+0xfffdbd04>
   4dfb8:	8809883a 	mov	r4,r17
   4dfbc:	a00b883a 	mov	r5,r20
   4dfc0:	004caf40 	call	4caf4 <memmove>
   4dfc4:	003f8306 	br	4ddd4 <__alt_data_end+0xfffdbdd4>
   4dfc8:	b0800404 	addi	r2,r22,16
   4dfcc:	b8bf6016 	blt	r23,r2,4dd50 <__alt_data_end+0xfffdbd50>
   4dfd0:	98800317 	ldw	r2,12(r19)
   4dfd4:	98c00217 	ldw	r3,8(r19)
   4dfd8:	81bfff04 	addi	r6,r16,-4
   4dfdc:	01000904 	movi	r4,36
   4dfe0:	18800315 	stw	r2,12(r3)
   4dfe4:	10c00215 	stw	r3,8(r2)
   4dfe8:	9c400204 	addi	r17,r19,8
   4dfec:	21804336 	bltu	r4,r6,4e0fc <_realloc_r+0x50c>
   4dff0:	008004c4 	movi	r2,19
   4dff4:	11803f2e 	bgeu	r2,r6,4e0f4 <_realloc_r+0x504>
   4dff8:	a0800017 	ldw	r2,0(r20)
   4dffc:	98800215 	stw	r2,8(r19)
   4e000:	a0800117 	ldw	r2,4(r20)
   4e004:	98800315 	stw	r2,12(r19)
   4e008:	008006c4 	movi	r2,27
   4e00c:	11803f36 	bltu	r2,r6,4e10c <_realloc_r+0x51c>
   4e010:	98800404 	addi	r2,r19,16
   4e014:	a5000204 	addi	r20,r20,8
   4e018:	a0c00017 	ldw	r3,0(r20)
   4e01c:	10c00015 	stw	r3,0(r2)
   4e020:	a0c00117 	ldw	r3,4(r20)
   4e024:	10c00115 	stw	r3,4(r2)
   4e028:	a0c00217 	ldw	r3,8(r20)
   4e02c:	10c00215 	stw	r3,8(r2)
   4e030:	9d87883a 	add	r3,r19,r22
   4e034:	bd85c83a 	sub	r2,r23,r22
   4e038:	e0c00215 	stw	r3,8(fp)
   4e03c:	10800054 	ori	r2,r2,1
   4e040:	18800115 	stw	r2,4(r3)
   4e044:	98800117 	ldw	r2,4(r19)
   4e048:	9009883a 	mov	r4,r18
   4e04c:	1080004c 	andi	r2,r2,1
   4e050:	b0acb03a 	or	r22,r22,r2
   4e054:	9d800115 	stw	r22,4(r19)
   4e058:	0051e440 	call	51e44 <__malloc_unlock>
   4e05c:	8805883a 	mov	r2,r17
   4e060:	003f2806 	br	4dd04 <__alt_data_end+0xfffdbd04>
   4e064:	a0c00217 	ldw	r3,8(r20)
   4e068:	88c00215 	stw	r3,8(r17)
   4e06c:	a0c00317 	ldw	r3,12(r20)
   4e070:	88c00315 	stw	r3,12(r17)
   4e074:	30801126 	beq	r6,r2,4e0bc <_realloc_r+0x4cc>
   4e078:	88800404 	addi	r2,r17,16
   4e07c:	a0c00404 	addi	r3,r20,16
   4e080:	003f4e06 	br	4ddbc <__alt_data_end+0xfffdbdbc>
   4e084:	893fff17 	ldw	r4,-4(r17)
   4e088:	00bfff04 	movi	r2,-4
   4e08c:	a023883a 	mov	r17,r20
   4e090:	2084703a 	and	r2,r4,r2
   4e094:	80a1883a 	add	r16,r16,r2
   4e098:	003f0d06 	br	4dcd0 <__alt_data_end+0xfffdbcd0>
   4e09c:	a0800217 	ldw	r2,8(r20)
   4e0a0:	98800415 	stw	r2,16(r19)
   4e0a4:	a0800317 	ldw	r2,12(r20)
   4e0a8:	98800515 	stw	r2,20(r19)
   4e0ac:	31000a26 	beq	r6,r4,4e0d8 <_realloc_r+0x4e8>
   4e0b0:	98c00604 	addi	r3,r19,24
   4e0b4:	a5000404 	addi	r20,r20,16
   4e0b8:	003fa806 	br	4df5c <__alt_data_end+0xfffdbf5c>
   4e0bc:	a1000417 	ldw	r4,16(r20)
   4e0c0:	88800604 	addi	r2,r17,24
   4e0c4:	a0c00604 	addi	r3,r20,24
   4e0c8:	89000415 	stw	r4,16(r17)
   4e0cc:	a1000517 	ldw	r4,20(r20)
   4e0d0:	89000515 	stw	r4,20(r17)
   4e0d4:	003f3906 	br	4ddbc <__alt_data_end+0xfffdbdbc>
   4e0d8:	a0800417 	ldw	r2,16(r20)
   4e0dc:	a5000604 	addi	r20,r20,24
   4e0e0:	98c00804 	addi	r3,r19,32
   4e0e4:	98800615 	stw	r2,24(r19)
   4e0e8:	a0bfff17 	ldw	r2,-4(r20)
   4e0ec:	98800715 	stw	r2,28(r19)
   4e0f0:	003f9a06 	br	4df5c <__alt_data_end+0xfffdbf5c>
   4e0f4:	8805883a 	mov	r2,r17
   4e0f8:	003fc706 	br	4e018 <__alt_data_end+0xfffdc018>
   4e0fc:	8809883a 	mov	r4,r17
   4e100:	a00b883a 	mov	r5,r20
   4e104:	004caf40 	call	4caf4 <memmove>
   4e108:	003fc906 	br	4e030 <__alt_data_end+0xfffdc030>
   4e10c:	a0800217 	ldw	r2,8(r20)
   4e110:	98800415 	stw	r2,16(r19)
   4e114:	a0800317 	ldw	r2,12(r20)
   4e118:	98800515 	stw	r2,20(r19)
   4e11c:	31000726 	beq	r6,r4,4e13c <_realloc_r+0x54c>
   4e120:	98800604 	addi	r2,r19,24
   4e124:	a5000404 	addi	r20,r20,16
   4e128:	003fbb06 	br	4e018 <__alt_data_end+0xfffdc018>
   4e12c:	9009883a 	mov	r4,r18
   4e130:	0051e440 	call	51e44 <__malloc_unlock>
   4e134:	0005883a 	mov	r2,zero
   4e138:	003ef206 	br	4dd04 <__alt_data_end+0xfffdbd04>
   4e13c:	a0c00417 	ldw	r3,16(r20)
   4e140:	a5000604 	addi	r20,r20,24
   4e144:	98800804 	addi	r2,r19,32
   4e148:	98c00615 	stw	r3,24(r19)
   4e14c:	a0ffff17 	ldw	r3,-4(r20)
   4e150:	98c00715 	stw	r3,28(r19)
   4e154:	003fb006 	br	4e018 <__alt_data_end+0xfffdc018>

0004e158 <__fpclassifyd>:
   4e158:	00a00034 	movhi	r2,32768
   4e15c:	10bfffc4 	addi	r2,r2,-1
   4e160:	2884703a 	and	r2,r5,r2
   4e164:	10000726 	beq	r2,zero,4e184 <__fpclassifyd+0x2c>
   4e168:	00fffc34 	movhi	r3,65520
   4e16c:	019ff834 	movhi	r6,32736
   4e170:	28c7883a 	add	r3,r5,r3
   4e174:	31bfffc4 	addi	r6,r6,-1
   4e178:	30c00536 	bltu	r6,r3,4e190 <__fpclassifyd+0x38>
   4e17c:	00800104 	movi	r2,4
   4e180:	f800283a 	ret
   4e184:	2000021e 	bne	r4,zero,4e190 <__fpclassifyd+0x38>
   4e188:	00800084 	movi	r2,2
   4e18c:	f800283a 	ret
   4e190:	00dffc34 	movhi	r3,32752
   4e194:	019ff834 	movhi	r6,32736
   4e198:	28cb883a 	add	r5,r5,r3
   4e19c:	31bfffc4 	addi	r6,r6,-1
   4e1a0:	317ff62e 	bgeu	r6,r5,4e17c <__alt_data_end+0xfffdc17c>
   4e1a4:	01400434 	movhi	r5,16
   4e1a8:	297fffc4 	addi	r5,r5,-1
   4e1ac:	28800236 	bltu	r5,r2,4e1b8 <__fpclassifyd+0x60>
   4e1b0:	008000c4 	movi	r2,3
   4e1b4:	f800283a 	ret
   4e1b8:	10c00226 	beq	r2,r3,4e1c4 <__fpclassifyd+0x6c>
   4e1bc:	0005883a 	mov	r2,zero
   4e1c0:	f800283a 	ret
   4e1c4:	2005003a 	cmpeq	r2,r4,zero
   4e1c8:	f800283a 	ret

0004e1cc <_sbrk_r>:
   4e1cc:	defffd04 	addi	sp,sp,-12
   4e1d0:	dc000015 	stw	r16,0(sp)
   4e1d4:	040001b4 	movhi	r16,6
   4e1d8:	dc400115 	stw	r17,4(sp)
   4e1dc:	8421a604 	addi	r16,r16,-31080
   4e1e0:	2023883a 	mov	r17,r4
   4e1e4:	2809883a 	mov	r4,r5
   4e1e8:	dfc00215 	stw	ra,8(sp)
   4e1ec:	80000015 	stw	zero,0(r16)
   4e1f0:	00522840 	call	52284 <sbrk>
   4e1f4:	00ffffc4 	movi	r3,-1
   4e1f8:	10c00526 	beq	r2,r3,4e210 <_sbrk_r+0x44>
   4e1fc:	dfc00217 	ldw	ra,8(sp)
   4e200:	dc400117 	ldw	r17,4(sp)
   4e204:	dc000017 	ldw	r16,0(sp)
   4e208:	dec00304 	addi	sp,sp,12
   4e20c:	f800283a 	ret
   4e210:	80c00017 	ldw	r3,0(r16)
   4e214:	183ff926 	beq	r3,zero,4e1fc <__alt_data_end+0xfffdc1fc>
   4e218:	88c00015 	stw	r3,0(r17)
   4e21c:	003ff706 	br	4e1fc <__alt_data_end+0xfffdc1fc>

0004e220 <strcmp>:
   4e220:	2144b03a 	or	r2,r4,r5
   4e224:	108000cc 	andi	r2,r2,3
   4e228:	1000171e 	bne	r2,zero,4e288 <strcmp+0x68>
   4e22c:	20800017 	ldw	r2,0(r4)
   4e230:	28c00017 	ldw	r3,0(r5)
   4e234:	10c0141e 	bne	r2,r3,4e288 <strcmp+0x68>
   4e238:	027fbff4 	movhi	r9,65279
   4e23c:	4a7fbfc4 	addi	r9,r9,-257
   4e240:	0086303a 	nor	r3,zero,r2
   4e244:	02202074 	movhi	r8,32897
   4e248:	1245883a 	add	r2,r2,r9
   4e24c:	42202004 	addi	r8,r8,-32640
   4e250:	10c4703a 	and	r2,r2,r3
   4e254:	1204703a 	and	r2,r2,r8
   4e258:	10000226 	beq	r2,zero,4e264 <strcmp+0x44>
   4e25c:	00001706 	br	4e2bc <strcmp+0x9c>
   4e260:	1000161e 	bne	r2,zero,4e2bc <strcmp+0x9c>
   4e264:	21000104 	addi	r4,r4,4
   4e268:	20c00017 	ldw	r3,0(r4)
   4e26c:	29400104 	addi	r5,r5,4
   4e270:	29800017 	ldw	r6,0(r5)
   4e274:	1a4f883a 	add	r7,r3,r9
   4e278:	00c4303a 	nor	r2,zero,r3
   4e27c:	3884703a 	and	r2,r7,r2
   4e280:	1204703a 	and	r2,r2,r8
   4e284:	19bff626 	beq	r3,r6,4e260 <__alt_data_end+0xfffdc260>
   4e288:	20800007 	ldb	r2,0(r4)
   4e28c:	1000051e 	bne	r2,zero,4e2a4 <strcmp+0x84>
   4e290:	00000606 	br	4e2ac <strcmp+0x8c>
   4e294:	21000044 	addi	r4,r4,1
   4e298:	20800007 	ldb	r2,0(r4)
   4e29c:	29400044 	addi	r5,r5,1
   4e2a0:	10000226 	beq	r2,zero,4e2ac <strcmp+0x8c>
   4e2a4:	28c00007 	ldb	r3,0(r5)
   4e2a8:	10fffa26 	beq	r2,r3,4e294 <__alt_data_end+0xfffdc294>
   4e2ac:	20800003 	ldbu	r2,0(r4)
   4e2b0:	28c00003 	ldbu	r3,0(r5)
   4e2b4:	10c5c83a 	sub	r2,r2,r3
   4e2b8:	f800283a 	ret
   4e2bc:	0005883a 	mov	r2,zero
   4e2c0:	f800283a 	ret

0004e2c4 <__ssprint_r>:
   4e2c4:	30800217 	ldw	r2,8(r6)
   4e2c8:	defff604 	addi	sp,sp,-40
   4e2cc:	ddc00715 	stw	r23,28(sp)
   4e2d0:	dc800215 	stw	r18,8(sp)
   4e2d4:	dfc00915 	stw	ra,36(sp)
   4e2d8:	df000815 	stw	fp,32(sp)
   4e2dc:	dd800615 	stw	r22,24(sp)
   4e2e0:	dd400515 	stw	r21,20(sp)
   4e2e4:	dd000415 	stw	r20,16(sp)
   4e2e8:	dcc00315 	stw	r19,12(sp)
   4e2ec:	dc400115 	stw	r17,4(sp)
   4e2f0:	dc000015 	stw	r16,0(sp)
   4e2f4:	3025883a 	mov	r18,r6
   4e2f8:	35c00017 	ldw	r23,0(r6)
   4e2fc:	10005626 	beq	r2,zero,4e458 <__ssprint_r+0x194>
   4e300:	2027883a 	mov	r19,r4
   4e304:	28800217 	ldw	r2,8(r5)
   4e308:	29000017 	ldw	r4,0(r5)
   4e30c:	2823883a 	mov	r17,r5
   4e310:	0039883a 	mov	fp,zero
   4e314:	0021883a 	mov	r16,zero
   4e318:	80003926 	beq	r16,zero,4e400 <__ssprint_r+0x13c>
   4e31c:	102b883a 	mov	r21,r2
   4e320:	102d883a 	mov	r22,r2
   4e324:	80803a36 	bltu	r16,r2,4e410 <__ssprint_r+0x14c>
   4e328:	88c0030b 	ldhu	r3,12(r17)
   4e32c:	1881200c 	andi	r2,r3,1152
   4e330:	10002626 	beq	r2,zero,4e3cc <__ssprint_r+0x108>
   4e334:	88800517 	ldw	r2,20(r17)
   4e338:	89400417 	ldw	r5,16(r17)
   4e33c:	81c00044 	addi	r7,r16,1
   4e340:	108d883a 	add	r6,r2,r2
   4e344:	3085883a 	add	r2,r6,r2
   4e348:	100cd7fa 	srli	r6,r2,31
   4e34c:	216dc83a 	sub	r22,r4,r5
   4e350:	3d89883a 	add	r4,r7,r22
   4e354:	3085883a 	add	r2,r6,r2
   4e358:	102bd07a 	srai	r21,r2,1
   4e35c:	a80d883a 	mov	r6,r21
   4e360:	a900022e 	bgeu	r21,r4,4e36c <__ssprint_r+0xa8>
   4e364:	202b883a 	mov	r21,r4
   4e368:	200d883a 	mov	r6,r4
   4e36c:	18c1000c 	andi	r3,r3,1024
   4e370:	9809883a 	mov	r4,r19
   4e374:	18002926 	beq	r3,zero,4e41c <__ssprint_r+0x158>
   4e378:	300b883a 	mov	r5,r6
   4e37c:	004c12c0 	call	4c12c <_malloc_r>
   4e380:	1029883a 	mov	r20,r2
   4e384:	10002b26 	beq	r2,zero,4e434 <__ssprint_r+0x170>
   4e388:	89400417 	ldw	r5,16(r17)
   4e38c:	1009883a 	mov	r4,r2
   4e390:	b00d883a 	mov	r6,r22
   4e394:	004c9bc0 	call	4c9bc <memcpy>
   4e398:	8880030b 	ldhu	r2,12(r17)
   4e39c:	00fedfc4 	movi	r3,-1153
   4e3a0:	10c4703a 	and	r2,r2,r3
   4e3a4:	10802014 	ori	r2,r2,128
   4e3a8:	8880030d 	sth	r2,12(r17)
   4e3ac:	a589883a 	add	r4,r20,r22
   4e3b0:	adadc83a 	sub	r22,r21,r22
   4e3b4:	8d400515 	stw	r21,20(r17)
   4e3b8:	8d800215 	stw	r22,8(r17)
   4e3bc:	8d000415 	stw	r20,16(r17)
   4e3c0:	89000015 	stw	r4,0(r17)
   4e3c4:	802b883a 	mov	r21,r16
   4e3c8:	802d883a 	mov	r22,r16
   4e3cc:	e00b883a 	mov	r5,fp
   4e3d0:	b00d883a 	mov	r6,r22
   4e3d4:	004caf40 	call	4caf4 <memmove>
   4e3d8:	88800217 	ldw	r2,8(r17)
   4e3dc:	89000017 	ldw	r4,0(r17)
   4e3e0:	90c00217 	ldw	r3,8(r18)
   4e3e4:	1545c83a 	sub	r2,r2,r21
   4e3e8:	2589883a 	add	r4,r4,r22
   4e3ec:	88800215 	stw	r2,8(r17)
   4e3f0:	89000015 	stw	r4,0(r17)
   4e3f4:	1c21c83a 	sub	r16,r3,r16
   4e3f8:	94000215 	stw	r16,8(r18)
   4e3fc:	80001626 	beq	r16,zero,4e458 <__ssprint_r+0x194>
   4e400:	bf000017 	ldw	fp,0(r23)
   4e404:	bc000117 	ldw	r16,4(r23)
   4e408:	bdc00204 	addi	r23,r23,8
   4e40c:	003fc206 	br	4e318 <__alt_data_end+0xfffdc318>
   4e410:	802b883a 	mov	r21,r16
   4e414:	802d883a 	mov	r22,r16
   4e418:	003fec06 	br	4e3cc <__alt_data_end+0xfffdc3cc>
   4e41c:	004dbf00 	call	4dbf0 <_realloc_r>
   4e420:	1029883a 	mov	r20,r2
   4e424:	103fe11e 	bne	r2,zero,4e3ac <__alt_data_end+0xfffdc3ac>
   4e428:	89400417 	ldw	r5,16(r17)
   4e42c:	9809883a 	mov	r4,r19
   4e430:	004fe380 	call	4fe38 <_free_r>
   4e434:	88c0030b 	ldhu	r3,12(r17)
   4e438:	00800304 	movi	r2,12
   4e43c:	98800015 	stw	r2,0(r19)
   4e440:	18c01014 	ori	r3,r3,64
   4e444:	88c0030d 	sth	r3,12(r17)
   4e448:	00bfffc4 	movi	r2,-1
   4e44c:	90000215 	stw	zero,8(r18)
   4e450:	90000115 	stw	zero,4(r18)
   4e454:	00000206 	br	4e460 <__ssprint_r+0x19c>
   4e458:	90000115 	stw	zero,4(r18)
   4e45c:	0005883a 	mov	r2,zero
   4e460:	dfc00917 	ldw	ra,36(sp)
   4e464:	df000817 	ldw	fp,32(sp)
   4e468:	ddc00717 	ldw	r23,28(sp)
   4e46c:	dd800617 	ldw	r22,24(sp)
   4e470:	dd400517 	ldw	r21,20(sp)
   4e474:	dd000417 	ldw	r20,16(sp)
   4e478:	dcc00317 	ldw	r19,12(sp)
   4e47c:	dc800217 	ldw	r18,8(sp)
   4e480:	dc400117 	ldw	r17,4(sp)
   4e484:	dc000017 	ldw	r16,0(sp)
   4e488:	dec00a04 	addi	sp,sp,40
   4e48c:	f800283a 	ret

0004e490 <___svfiprintf_internal_r>:
   4e490:	2880030b 	ldhu	r2,12(r5)
   4e494:	deffc904 	addi	sp,sp,-220
   4e498:	dd403215 	stw	r21,200(sp)
   4e49c:	dfc03615 	stw	ra,216(sp)
   4e4a0:	df003515 	stw	fp,212(sp)
   4e4a4:	ddc03415 	stw	r23,208(sp)
   4e4a8:	dd803315 	stw	r22,204(sp)
   4e4ac:	dd003115 	stw	r20,196(sp)
   4e4b0:	dcc03015 	stw	r19,192(sp)
   4e4b4:	dc802f15 	stw	r18,188(sp)
   4e4b8:	dc402e15 	stw	r17,184(sp)
   4e4bc:	dc002d15 	stw	r16,180(sp)
   4e4c0:	d9402715 	stw	r5,156(sp)
   4e4c4:	d9002915 	stw	r4,164(sp)
   4e4c8:	1080200c 	andi	r2,r2,128
   4e4cc:	d9c02315 	stw	r7,140(sp)
   4e4d0:	302b883a 	mov	r21,r6
   4e4d4:	10000226 	beq	r2,zero,4e4e0 <___svfiprintf_internal_r+0x50>
   4e4d8:	28800417 	ldw	r2,16(r5)
   4e4dc:	1003ce26 	beq	r2,zero,4f418 <___svfiprintf_internal_r+0xf88>
   4e4e0:	dac01a04 	addi	r11,sp,104
   4e4e4:	da8019c4 	addi	r10,sp,103
   4e4e8:	dc802917 	ldw	r18,164(sp)
   4e4ec:	dd002717 	ldw	r20,156(sp)
   4e4f0:	04c00174 	movhi	r19,5
   4e4f4:	dac01e15 	stw	r11,120(sp)
   4e4f8:	5a97c83a 	sub	r11,r11,r10
   4e4fc:	9cd33b04 	addi	r19,r19,19692
   4e500:	da801f15 	stw	r10,124(sp)
   4e504:	dec01a15 	stw	sp,104(sp)
   4e508:	d8001c15 	stw	zero,112(sp)
   4e50c:	d8001b15 	stw	zero,108(sp)
   4e510:	d811883a 	mov	r8,sp
   4e514:	d8002a15 	stw	zero,168(sp)
   4e518:	d8002415 	stw	zero,144(sp)
   4e51c:	dac02b15 	stw	r11,172(sp)
   4e520:	a8800007 	ldb	r2,0(r21)
   4e524:	10026a26 	beq	r2,zero,4eed0 <___svfiprintf_internal_r+0xa40>
   4e528:	01000944 	movi	r4,37
   4e52c:	11026826 	beq	r2,r4,4eed0 <___svfiprintf_internal_r+0xa40>
   4e530:	a805883a 	mov	r2,r21
   4e534:	00000106 	br	4e53c <___svfiprintf_internal_r+0xac>
   4e538:	19000326 	beq	r3,r4,4e548 <___svfiprintf_internal_r+0xb8>
   4e53c:	10800044 	addi	r2,r2,1
   4e540:	10c00007 	ldb	r3,0(r2)
   4e544:	183ffc1e 	bne	r3,zero,4e538 <__alt_data_end+0xfffdc538>
   4e548:	1561c83a 	sub	r16,r2,r21
   4e54c:	102d883a 	mov	r22,r2
   4e550:	80000e26 	beq	r16,zero,4e58c <___svfiprintf_internal_r+0xfc>
   4e554:	d8c01c17 	ldw	r3,112(sp)
   4e558:	d8801b17 	ldw	r2,108(sp)
   4e55c:	45400015 	stw	r21,0(r8)
   4e560:	1c07883a 	add	r3,r3,r16
   4e564:	10800044 	addi	r2,r2,1
   4e568:	d8c01c15 	stw	r3,112(sp)
   4e56c:	44000115 	stw	r16,4(r8)
   4e570:	d8801b15 	stw	r2,108(sp)
   4e574:	00c001c4 	movi	r3,7
   4e578:	1882d816 	blt	r3,r2,4f0dc <___svfiprintf_internal_r+0xc4c>
   4e57c:	42000204 	addi	r8,r8,8
   4e580:	da802417 	ldw	r10,144(sp)
   4e584:	5415883a 	add	r10,r10,r16
   4e588:	da802415 	stw	r10,144(sp)
   4e58c:	b0800007 	ldb	r2,0(r22)
   4e590:	10027526 	beq	r2,zero,4ef68 <___svfiprintf_internal_r+0xad8>
   4e594:	b1000047 	ldb	r4,1(r22)
   4e598:	b5400044 	addi	r21,r22,1
   4e59c:	d8001d85 	stb	zero,118(sp)
   4e5a0:	000d883a 	mov	r6,zero
   4e5a4:	043fffc4 	movi	r16,-1
   4e5a8:	d8002115 	stw	zero,132(sp)
   4e5ac:	0023883a 	mov	r17,zero
   4e5b0:	00c01604 	movi	r3,88
   4e5b4:	01400244 	movi	r5,9
   4e5b8:	02400a84 	movi	r9,42
   4e5bc:	01c01b04 	movi	r7,108
   4e5c0:	ad400044 	addi	r21,r21,1
   4e5c4:	20bff804 	addi	r2,r4,-32
   4e5c8:	18819736 	bltu	r3,r2,4ec28 <___svfiprintf_internal_r+0x798>
   4e5cc:	100490ba 	slli	r2,r2,2
   4e5d0:	02c00174 	movhi	r11,5
   4e5d4:	5af97904 	addi	r11,r11,-6684
   4e5d8:	12c5883a 	add	r2,r2,r11
   4e5dc:	10800017 	ldw	r2,0(r2)
   4e5e0:	1000683a 	jmp	r2
   4e5e4:	0004eb20 	cmpeqi	zero,zero,5036
   4e5e8:	0004ec28 	cmpgeui	zero,zero,5040
   4e5ec:	0004ec28 	cmpgeui	zero,zero,5040
   4e5f0:	0004eb14 	movui	zero,5036
   4e5f4:	0004ec28 	cmpgeui	zero,zero,5040
   4e5f8:	0004ec28 	cmpgeui	zero,zero,5040
   4e5fc:	0004ec28 	cmpgeui	zero,zero,5040
   4e600:	0004ec28 	cmpgeui	zero,zero,5040
   4e604:	0004ec28 	cmpgeui	zero,zero,5040
   4e608:	0004ec28 	cmpgeui	zero,zero,5040
   4e60c:	0004e840 	call	4e84 <__alt_mem_onchip_memory2-0x3b17c>
   4e610:	0004ec5c 	xori	zero,zero,5041
   4e614:	0004ec28 	cmpgeui	zero,zero,5040
   4e618:	0004e868 	cmpgeui	zero,zero,5025
   4e61c:	0004ec68 	cmpgeui	zero,zero,5041
   4e620:	0004ec28 	cmpgeui	zero,zero,5040
   4e624:	0004ec50 	cmplti	zero,zero,5041
   4e628:	0004ebf0 	cmpltui	zero,zero,5039
   4e62c:	0004ebf0 	cmpltui	zero,zero,5039
   4e630:	0004ebf0 	cmpltui	zero,zero,5039
   4e634:	0004ebf0 	cmpltui	zero,zero,5039
   4e638:	0004ebf0 	cmpltui	zero,zero,5039
   4e63c:	0004ebf0 	cmpltui	zero,zero,5039
   4e640:	0004ebf0 	cmpltui	zero,zero,5039
   4e644:	0004ebf0 	cmpltui	zero,zero,5039
   4e648:	0004ebf0 	cmpltui	zero,zero,5039
   4e64c:	0004ec28 	cmpgeui	zero,zero,5040
   4e650:	0004ec28 	cmpgeui	zero,zero,5040
   4e654:	0004ec28 	cmpgeui	zero,zero,5040
   4e658:	0004ec28 	cmpgeui	zero,zero,5040
   4e65c:	0004ec28 	cmpgeui	zero,zero,5040
   4e660:	0004ec28 	cmpgeui	zero,zero,5040
   4e664:	0004ec28 	cmpgeui	zero,zero,5040
   4e668:	0004ec28 	cmpgeui	zero,zero,5040
   4e66c:	0004ec28 	cmpgeui	zero,zero,5040
   4e670:	0004ec28 	cmpgeui	zero,zero,5040
   4e674:	0004eb88 	cmpgei	zero,zero,5038
   4e678:	0004ec28 	cmpgeui	zero,zero,5040
   4e67c:	0004ec28 	cmpgeui	zero,zero,5040
   4e680:	0004ec28 	cmpgeui	zero,zero,5040
   4e684:	0004ec28 	cmpgeui	zero,zero,5040
   4e688:	0004ec28 	cmpgeui	zero,zero,5040
   4e68c:	0004ec28 	cmpgeui	zero,zero,5040
   4e690:	0004ec28 	cmpgeui	zero,zero,5040
   4e694:	0004ec28 	cmpgeui	zero,zero,5040
   4e698:	0004ec28 	cmpgeui	zero,zero,5040
   4e69c:	0004ec28 	cmpgeui	zero,zero,5040
   4e6a0:	0004e814 	movui	zero,5024
   4e6a4:	0004ec28 	cmpgeui	zero,zero,5040
   4e6a8:	0004ec28 	cmpgeui	zero,zero,5040
   4e6ac:	0004ec28 	cmpgeui	zero,zero,5040
   4e6b0:	0004ec28 	cmpgeui	zero,zero,5040
   4e6b4:	0004ec28 	cmpgeui	zero,zero,5040
   4e6b8:	0004e748 	cmpgei	zero,zero,5021
   4e6bc:	0004ec28 	cmpgeui	zero,zero,5040
   4e6c0:	0004ec28 	cmpgeui	zero,zero,5040
   4e6c4:	0004ea74 	movhi	zero,5033
   4e6c8:	0004ec28 	cmpgeui	zero,zero,5040
   4e6cc:	0004ec28 	cmpgeui	zero,zero,5040
   4e6d0:	0004ec28 	cmpgeui	zero,zero,5040
   4e6d4:	0004ec28 	cmpgeui	zero,zero,5040
   4e6d8:	0004ec28 	cmpgeui	zero,zero,5040
   4e6dc:	0004ec28 	cmpgeui	zero,zero,5040
   4e6e0:	0004ec28 	cmpgeui	zero,zero,5040
   4e6e4:	0004ec28 	cmpgeui	zero,zero,5040
   4e6e8:	0004ec28 	cmpgeui	zero,zero,5040
   4e6ec:	0004ec28 	cmpgeui	zero,zero,5040
   4e6f0:	0004e960 	cmpeqi	zero,zero,5029
   4e6f4:	0004e920 	cmpeqi	zero,zero,5028
   4e6f8:	0004ec28 	cmpgeui	zero,zero,5040
   4e6fc:	0004ec28 	cmpgeui	zero,zero,5040
   4e700:	0004ec28 	cmpgeui	zero,zero,5040
   4e704:	0004ead0 	cmplti	zero,zero,5035
   4e708:	0004e920 	cmpeqi	zero,zero,5028
   4e70c:	0004ec28 	cmpgeui	zero,zero,5040
   4e710:	0004ec28 	cmpgeui	zero,zero,5040
   4e714:	0004eabc 	xorhi	zero,zero,5034
   4e718:	0004ec28 	cmpgeui	zero,zero,5040
   4e71c:	0004eadc 	xori	zero,zero,5035
   4e720:	0004e818 	cmpnei	zero,zero,5024
   4e724:	0004e8dc 	xori	zero,zero,5027
   4e728:	0004e8d0 	cmplti	zero,zero,5027
   4e72c:	0004ec28 	cmpgeui	zero,zero,5040
   4e730:	0004e874 	movhi	zero,5025
   4e734:	0004ec28 	cmpgeui	zero,zero,5040
   4e738:	0004e74c 	andi	zero,zero,5021
   4e73c:	0004ec28 	cmpgeui	zero,zero,5040
   4e740:	0004ec28 	cmpgeui	zero,zero,5040
   4e744:	0004eb3c 	xorhi	zero,zero,5036
   4e748:	8c400414 	ori	r17,r17,16
   4e74c:	8880080c 	andi	r2,r17,32
   4e750:	10029626 	beq	r2,zero,4f1ac <___svfiprintf_internal_r+0xd1c>
   4e754:	da802317 	ldw	r10,140(sp)
   4e758:	dac02317 	ldw	r11,140(sp)
   4e75c:	00800044 	movi	r2,1
   4e760:	52400017 	ldw	r9,0(r10)
   4e764:	52800117 	ldw	r10,4(r10)
   4e768:	5ac00204 	addi	r11,r11,8
   4e76c:	dac02315 	stw	r11,140(sp)
   4e770:	4a86b03a 	or	r3,r9,r10
   4e774:	d8001d85 	stb	zero,118(sp)
   4e778:	8039883a 	mov	fp,r16
   4e77c:	0017883a 	mov	r11,zero
   4e780:	80000216 	blt	r16,zero,4e78c <___svfiprintf_internal_r+0x2fc>
   4e784:	013fdfc4 	movi	r4,-129
   4e788:	8922703a 	and	r17,r17,r4
   4e78c:	1801d21e 	bne	r3,zero,4eed8 <___svfiprintf_internal_r+0xa48>
   4e790:	80024626 	beq	r16,zero,4f0ac <___svfiprintf_internal_r+0xc1c>
   4e794:	10803fcc 	andi	r2,r2,255
   4e798:	00c00044 	movi	r3,1
   4e79c:	10c2b426 	beq	r2,r3,4f270 <___svfiprintf_internal_r+0xde0>
   4e7a0:	00c00084 	movi	r3,2
   4e7a4:	10c25d26 	beq	r2,r3,4f11c <___svfiprintf_internal_r+0xc8c>
   4e7a8:	d8c01a04 	addi	r3,sp,104
   4e7ac:	4808d0fa 	srli	r4,r9,3
   4e7b0:	500a977a 	slli	r5,r10,29
   4e7b4:	5014d0fa 	srli	r10,r10,3
   4e7b8:	4a4001cc 	andi	r9,r9,7
   4e7bc:	48800c04 	addi	r2,r9,48
   4e7c0:	18ffffc4 	addi	r3,r3,-1
   4e7c4:	2912b03a 	or	r9,r5,r4
   4e7c8:	18800005 	stb	r2,0(r3)
   4e7cc:	4a88b03a 	or	r4,r9,r10
   4e7d0:	203ff61e 	bne	r4,zero,4e7ac <__alt_data_end+0xfffdc7ac>
   4e7d4:	8900004c 	andi	r4,r17,1
   4e7d8:	d8c02615 	stw	r3,152(sp)
   4e7dc:	2002961e 	bne	r4,zero,4f238 <___svfiprintf_internal_r+0xda8>
   4e7e0:	da801e17 	ldw	r10,120(sp)
   4e7e4:	50f9c83a 	sub	fp,r10,r3
   4e7e8:	df002015 	stw	fp,128(sp)
   4e7ec:	e400010e 	bge	fp,r16,4e7f4 <___svfiprintf_internal_r+0x364>
   4e7f0:	dc002015 	stw	r16,128(sp)
   4e7f4:	5ac03fcc 	andi	r11,r11,255
   4e7f8:	5ac0201c 	xori	r11,r11,128
   4e7fc:	5affe004 	addi	r11,r11,-128
   4e800:	58006326 	beq	r11,zero,4e990 <___svfiprintf_internal_r+0x500>
   4e804:	d8c02017 	ldw	r3,128(sp)
   4e808:	18c00044 	addi	r3,r3,1
   4e80c:	d8c02015 	stw	r3,128(sp)
   4e810:	00005f06 	br	4e990 <___svfiprintf_internal_r+0x500>
   4e814:	8c400414 	ori	r17,r17,16
   4e818:	8880080c 	andi	r2,r17,32
   4e81c:	10027926 	beq	r2,zero,4f204 <___svfiprintf_internal_r+0xd74>
   4e820:	dac02317 	ldw	r11,140(sp)
   4e824:	0005883a 	mov	r2,zero
   4e828:	5a400017 	ldw	r9,0(r11)
   4e82c:	5a800117 	ldw	r10,4(r11)
   4e830:	5ac00204 	addi	r11,r11,8
   4e834:	dac02315 	stw	r11,140(sp)
   4e838:	4a86b03a 	or	r3,r9,r10
   4e83c:	003fcd06 	br	4e774 <__alt_data_end+0xfffdc774>
   4e840:	da802317 	ldw	r10,140(sp)
   4e844:	dac02317 	ldw	r11,140(sp)
   4e848:	52800017 	ldw	r10,0(r10)
   4e84c:	58800104 	addi	r2,r11,4
   4e850:	da802115 	stw	r10,132(sp)
   4e854:	50028c0e 	bge	r10,zero,4f288 <___svfiprintf_internal_r+0xdf8>
   4e858:	da802117 	ldw	r10,132(sp)
   4e85c:	d8802315 	stw	r2,140(sp)
   4e860:	0295c83a 	sub	r10,zero,r10
   4e864:	da802115 	stw	r10,132(sp)
   4e868:	8c400114 	ori	r17,r17,4
   4e86c:	a9000007 	ldb	r4,0(r21)
   4e870:	003f5306 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4e874:	da802317 	ldw	r10,140(sp)
   4e878:	dac02317 	ldw	r11,140(sp)
   4e87c:	d8001d85 	stb	zero,118(sp)
   4e880:	52800017 	ldw	r10,0(r10)
   4e884:	5dc00104 	addi	r23,r11,4
   4e888:	da802615 	stw	r10,152(sp)
   4e88c:	5002d626 	beq	r10,zero,4f3e8 <___svfiprintf_internal_r+0xf58>
   4e890:	d9002617 	ldw	r4,152(sp)
   4e894:	8002cc16 	blt	r16,zero,4f3c8 <___svfiprintf_internal_r+0xf38>
   4e898:	000b883a 	mov	r5,zero
   4e89c:	800d883a 	mov	r6,r16
   4e8a0:	da002c15 	stw	r8,176(sp)
   4e8a4:	004c8d40 	call	4c8d4 <memchr>
   4e8a8:	da002c17 	ldw	r8,176(sp)
   4e8ac:	1002f026 	beq	r2,zero,4f470 <___svfiprintf_internal_r+0xfe0>
   4e8b0:	d8c02617 	ldw	r3,152(sp)
   4e8b4:	10f9c83a 	sub	fp,r2,r3
   4e8b8:	8700010e 	bge	r16,fp,4e8c0 <___svfiprintf_internal_r+0x430>
   4e8bc:	8039883a 	mov	fp,r16
   4e8c0:	dac01d83 	ldbu	r11,118(sp)
   4e8c4:	ddc02315 	stw	r23,140(sp)
   4e8c8:	0021883a 	mov	r16,zero
   4e8cc:	003fc606 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4e8d0:	8c400814 	ori	r17,r17,32
   4e8d4:	a9000007 	ldb	r4,0(r21)
   4e8d8:	003f3906 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4e8dc:	da802317 	ldw	r10,140(sp)
   4e8e0:	00800c04 	movi	r2,48
   4e8e4:	dac02317 	ldw	r11,140(sp)
   4e8e8:	52400017 	ldw	r9,0(r10)
   4e8ec:	d8801d05 	stb	r2,116(sp)
   4e8f0:	00801e04 	movi	r2,120
   4e8f4:	d8801d45 	stb	r2,117(sp)
   4e8f8:	00800174 	movhi	r2,5
   4e8fc:	1092da04 	addi	r2,r2,19304
   4e900:	5ac00104 	addi	r11,r11,4
   4e904:	d8802a15 	stw	r2,168(sp)
   4e908:	0015883a 	mov	r10,zero
   4e90c:	8c400094 	ori	r17,r17,2
   4e910:	dac02315 	stw	r11,140(sp)
   4e914:	00800084 	movi	r2,2
   4e918:	4807883a 	mov	r3,r9
   4e91c:	003f9506 	br	4e774 <__alt_data_end+0xfffdc774>
   4e920:	d9801d85 	stb	r6,118(sp)
   4e924:	8880080c 	andi	r2,r17,32
   4e928:	d8c02317 	ldw	r3,140(sp)
   4e92c:	10009b26 	beq	r2,zero,4eb9c <___svfiprintf_internal_r+0x70c>
   4e930:	dac02317 	ldw	r11,140(sp)
   4e934:	18800117 	ldw	r2,4(r3)
   4e938:	1a400017 	ldw	r9,0(r3)
   4e93c:	5ac00204 	addi	r11,r11,8
   4e940:	dac02315 	stw	r11,140(sp)
   4e944:	1015883a 	mov	r10,r2
   4e948:	10009f16 	blt	r2,zero,4ebc8 <___svfiprintf_internal_r+0x738>
   4e94c:	dac01d83 	ldbu	r11,118(sp)
   4e950:	8039883a 	mov	fp,r16
   4e954:	00800044 	movi	r2,1
   4e958:	4a86b03a 	or	r3,r9,r10
   4e95c:	003f8806 	br	4e780 <__alt_data_end+0xfffdc780>
   4e960:	dac02317 	ldw	r11,140(sp)
   4e964:	00c00044 	movi	r3,1
   4e968:	da801004 	addi	r10,sp,64
   4e96c:	58800017 	ldw	r2,0(r11)
   4e970:	5ac00104 	addi	r11,r11,4
   4e974:	d8c02015 	stw	r3,128(sp)
   4e978:	d8001d85 	stb	zero,118(sp)
   4e97c:	d8801005 	stb	r2,64(sp)
   4e980:	dac02315 	stw	r11,140(sp)
   4e984:	1839883a 	mov	fp,r3
   4e988:	da802615 	stw	r10,152(sp)
   4e98c:	0021883a 	mov	r16,zero
   4e990:	8a80008c 	andi	r10,r17,2
   4e994:	da802215 	stw	r10,136(sp)
   4e998:	50000326 	beq	r10,zero,4e9a8 <___svfiprintf_internal_r+0x518>
   4e99c:	dac02017 	ldw	r11,128(sp)
   4e9a0:	5ac00084 	addi	r11,r11,2
   4e9a4:	dac02015 	stw	r11,128(sp)
   4e9a8:	88c0210c 	andi	r3,r17,132
   4e9ac:	d8c02515 	stw	r3,148(sp)
   4e9b0:	1800bd1e 	bne	r3,zero,4eca8 <___svfiprintf_internal_r+0x818>
   4e9b4:	da802117 	ldw	r10,132(sp)
   4e9b8:	dac02017 	ldw	r11,128(sp)
   4e9bc:	52edc83a 	sub	r22,r10,r11
   4e9c0:	0580b90e 	bge	zero,r22,4eca8 <___svfiprintf_internal_r+0x818>
   4e9c4:	02400404 	movi	r9,16
   4e9c8:	d8c01c17 	ldw	r3,112(sp)
   4e9cc:	d8801b17 	ldw	r2,108(sp)
   4e9d0:	4d829b0e 	bge	r9,r22,4f440 <___svfiprintf_internal_r+0xfb0>
   4e9d4:	01400174 	movhi	r5,5
   4e9d8:	29533f04 	addi	r5,r5,19708
   4e9dc:	d9402815 	stw	r5,160(sp)
   4e9e0:	05c001c4 	movi	r23,7
   4e9e4:	00000306 	br	4e9f4 <___svfiprintf_internal_r+0x564>
   4e9e8:	b5bffc04 	addi	r22,r22,-16
   4e9ec:	42000204 	addi	r8,r8,8
   4e9f0:	4d80150e 	bge	r9,r22,4ea48 <___svfiprintf_internal_r+0x5b8>
   4e9f4:	02800174 	movhi	r10,5
   4e9f8:	18c00404 	addi	r3,r3,16
   4e9fc:	10800044 	addi	r2,r2,1
   4ea00:	52933f04 	addi	r10,r10,19708
   4ea04:	42800015 	stw	r10,0(r8)
   4ea08:	42400115 	stw	r9,4(r8)
   4ea0c:	d8c01c15 	stw	r3,112(sp)
   4ea10:	d8801b15 	stw	r2,108(sp)
   4ea14:	b8bff40e 	bge	r23,r2,4e9e8 <__alt_data_end+0xfffdc9e8>
   4ea18:	9009883a 	mov	r4,r18
   4ea1c:	a00b883a 	mov	r5,r20
   4ea20:	d9801a04 	addi	r6,sp,104
   4ea24:	da402c15 	stw	r9,176(sp)
   4ea28:	004e2c40 	call	4e2c4 <__ssprint_r>
   4ea2c:	da402c17 	ldw	r9,176(sp)
   4ea30:	1001531e 	bne	r2,zero,4ef80 <___svfiprintf_internal_r+0xaf0>
   4ea34:	b5bffc04 	addi	r22,r22,-16
   4ea38:	d8c01c17 	ldw	r3,112(sp)
   4ea3c:	d8801b17 	ldw	r2,108(sp)
   4ea40:	d811883a 	mov	r8,sp
   4ea44:	4dbfeb16 	blt	r9,r22,4e9f4 <__alt_data_end+0xfffdc9f4>
   4ea48:	dac02817 	ldw	r11,160(sp)
   4ea4c:	b0c7883a 	add	r3,r22,r3
   4ea50:	10800044 	addi	r2,r2,1
   4ea54:	42c00015 	stw	r11,0(r8)
   4ea58:	45800115 	stw	r22,4(r8)
   4ea5c:	d8c01c15 	stw	r3,112(sp)
   4ea60:	d8801b15 	stw	r2,108(sp)
   4ea64:	010001c4 	movi	r4,7
   4ea68:	2081dd16 	blt	r4,r2,4f1e0 <___svfiprintf_internal_r+0xd50>
   4ea6c:	42000204 	addi	r8,r8,8
   4ea70:	00008f06 	br	4ecb0 <___svfiprintf_internal_r+0x820>
   4ea74:	00800174 	movhi	r2,5
   4ea78:	1092d504 	addi	r2,r2,19284
   4ea7c:	d8802a15 	stw	r2,168(sp)
   4ea80:	d9801d85 	stb	r6,118(sp)
   4ea84:	8880080c 	andi	r2,r17,32
   4ea88:	10003226 	beq	r2,zero,4eb54 <___svfiprintf_internal_r+0x6c4>
   4ea8c:	da802317 	ldw	r10,140(sp)
   4ea90:	dac02317 	ldw	r11,140(sp)
   4ea94:	52400017 	ldw	r9,0(r10)
   4ea98:	52800117 	ldw	r10,4(r10)
   4ea9c:	5ac00204 	addi	r11,r11,8
   4eaa0:	dac02315 	stw	r11,140(sp)
   4eaa4:	8880004c 	andi	r2,r17,1
   4eaa8:	10003426 	beq	r2,zero,4eb7c <___svfiprintf_internal_r+0x6ec>
   4eaac:	4a86b03a 	or	r3,r9,r10
   4eab0:	1802231e 	bne	r3,zero,4f340 <___svfiprintf_internal_r+0xeb0>
   4eab4:	00800084 	movi	r2,2
   4eab8:	003f2e06 	br	4e774 <__alt_data_end+0xfffdc774>
   4eabc:	a9000007 	ldb	r4,0(r21)
   4eac0:	a805883a 	mov	r2,r21
   4eac4:	21c22426 	beq	r4,r7,4f358 <___svfiprintf_internal_r+0xec8>
   4eac8:	8c400414 	ori	r17,r17,16
   4eacc:	003ebc06 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4ead0:	8c401014 	ori	r17,r17,64
   4ead4:	a9000007 	ldb	r4,0(r21)
   4ead8:	003eb906 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4eadc:	d9801d85 	stb	r6,118(sp)
   4eae0:	8880080c 	andi	r2,r17,32
   4eae4:	10020d1e 	bne	r2,zero,4f31c <___svfiprintf_internal_r+0xe8c>
   4eae8:	8880040c 	andi	r2,r17,16
   4eaec:	10021e1e 	bne	r2,zero,4f368 <___svfiprintf_internal_r+0xed8>
   4eaf0:	8c40100c 	andi	r17,r17,64
   4eaf4:	88021c26 	beq	r17,zero,4f368 <___svfiprintf_internal_r+0xed8>
   4eaf8:	dac02317 	ldw	r11,140(sp)
   4eafc:	da802417 	ldw	r10,144(sp)
   4eb00:	58800017 	ldw	r2,0(r11)
   4eb04:	5ac00104 	addi	r11,r11,4
   4eb08:	dac02315 	stw	r11,140(sp)
   4eb0c:	1280000d 	sth	r10,0(r2)
   4eb10:	003e8306 	br	4e520 <__alt_data_end+0xfffdc520>
   4eb14:	8c400054 	ori	r17,r17,1
   4eb18:	a9000007 	ldb	r4,0(r21)
   4eb1c:	003ea806 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4eb20:	30803fcc 	andi	r2,r6,255
   4eb24:	1080201c 	xori	r2,r2,128
   4eb28:	10bfe004 	addi	r2,r2,-128
   4eb2c:	1001f91e 	bne	r2,zero,4f314 <___svfiprintf_internal_r+0xe84>
   4eb30:	01800804 	movi	r6,32
   4eb34:	a9000007 	ldb	r4,0(r21)
   4eb38:	003ea106 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4eb3c:	00800174 	movhi	r2,5
   4eb40:	1092da04 	addi	r2,r2,19304
   4eb44:	d8802a15 	stw	r2,168(sp)
   4eb48:	d9801d85 	stb	r6,118(sp)
   4eb4c:	8880080c 	andi	r2,r17,32
   4eb50:	103fce1e 	bne	r2,zero,4ea8c <__alt_data_end+0xfffdca8c>
   4eb54:	8880040c 	andi	r2,r17,16
   4eb58:	1001e526 	beq	r2,zero,4f2f0 <___svfiprintf_internal_r+0xe60>
   4eb5c:	da802317 	ldw	r10,140(sp)
   4eb60:	dac02317 	ldw	r11,140(sp)
   4eb64:	52400017 	ldw	r9,0(r10)
   4eb68:	8880004c 	andi	r2,r17,1
   4eb6c:	5ac00104 	addi	r11,r11,4
   4eb70:	dac02315 	stw	r11,140(sp)
   4eb74:	0015883a 	mov	r10,zero
   4eb78:	103fcc1e 	bne	r2,zero,4eaac <__alt_data_end+0xfffdcaac>
   4eb7c:	00800084 	movi	r2,2
   4eb80:	4a86b03a 	or	r3,r9,r10
   4eb84:	003efb06 	br	4e774 <__alt_data_end+0xfffdc774>
   4eb88:	8c400414 	ori	r17,r17,16
   4eb8c:	d9801d85 	stb	r6,118(sp)
   4eb90:	8880080c 	andi	r2,r17,32
   4eb94:	d8c02317 	ldw	r3,140(sp)
   4eb98:	103f651e 	bne	r2,zero,4e930 <__alt_data_end+0xfffdc930>
   4eb9c:	8880040c 	andi	r2,r17,16
   4eba0:	1001c61e 	bne	r2,zero,4f2bc <___svfiprintf_internal_r+0xe2c>
   4eba4:	8880100c 	andi	r2,r17,64
   4eba8:	1001c426 	beq	r2,zero,4f2bc <___svfiprintf_internal_r+0xe2c>
   4ebac:	1a40000f 	ldh	r9,0(r3)
   4ebb0:	dac02317 	ldw	r11,140(sp)
   4ebb4:	4815d7fa 	srai	r10,r9,31
   4ebb8:	5ac00104 	addi	r11,r11,4
   4ebbc:	dac02315 	stw	r11,140(sp)
   4ebc0:	5005883a 	mov	r2,r10
   4ebc4:	103f610e 	bge	r2,zero,4e94c <__alt_data_end+0xfffdc94c>
   4ebc8:	0253c83a 	sub	r9,zero,r9
   4ebcc:	4804c03a 	cmpne	r2,r9,zero
   4ebd0:	0295c83a 	sub	r10,zero,r10
   4ebd4:	5095c83a 	sub	r10,r10,r2
   4ebd8:	02c00b44 	movi	r11,45
   4ebdc:	dac01d85 	stb	r11,118(sp)
   4ebe0:	8039883a 	mov	fp,r16
   4ebe4:	00800044 	movi	r2,1
   4ebe8:	4a86b03a 	or	r3,r9,r10
   4ebec:	003ee406 	br	4e780 <__alt_data_end+0xfffdc780>
   4ebf0:	a815883a 	mov	r10,r21
   4ebf4:	d8002115 	stw	zero,132(sp)
   4ebf8:	20bff404 	addi	r2,r4,-48
   4ebfc:	51000007 	ldb	r4,0(r10)
   4ec00:	da802117 	ldw	r10,132(sp)
   4ec04:	ad400044 	addi	r21,r21,1
   4ec08:	52c002a4 	muli	r11,r10,10
   4ec0c:	a815883a 	mov	r10,r21
   4ec10:	5885883a 	add	r2,r11,r2
   4ec14:	d8802115 	stw	r2,132(sp)
   4ec18:	20bff404 	addi	r2,r4,-48
   4ec1c:	28bff72e 	bgeu	r5,r2,4ebfc <__alt_data_end+0xfffdcbfc>
   4ec20:	20bff804 	addi	r2,r4,-32
   4ec24:	18be692e 	bgeu	r3,r2,4e5cc <__alt_data_end+0xfffdc5cc>
   4ec28:	d9801d85 	stb	r6,118(sp)
   4ec2c:	2000ce26 	beq	r4,zero,4ef68 <___svfiprintf_internal_r+0xad8>
   4ec30:	02800044 	movi	r10,1
   4ec34:	dac01004 	addi	r11,sp,64
   4ec38:	da802015 	stw	r10,128(sp)
   4ec3c:	d9001005 	stb	r4,64(sp)
   4ec40:	d8001d85 	stb	zero,118(sp)
   4ec44:	5039883a 	mov	fp,r10
   4ec48:	dac02615 	stw	r11,152(sp)
   4ec4c:	003f4f06 	br	4e98c <__alt_data_end+0xfffdc98c>
   4ec50:	8c402014 	ori	r17,r17,128
   4ec54:	a9000007 	ldb	r4,0(r21)
   4ec58:	003e5906 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4ec5c:	01800ac4 	movi	r6,43
   4ec60:	a9000007 	ldb	r4,0(r21)
   4ec64:	003e5606 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4ec68:	a9000007 	ldb	r4,0(r21)
   4ec6c:	aa800044 	addi	r10,r21,1
   4ec70:	22420626 	beq	r4,r9,4f48c <___svfiprintf_internal_r+0xffc>
   4ec74:	20bff404 	addi	r2,r4,-48
   4ec78:	502b883a 	mov	r21,r10
   4ec7c:	0021883a 	mov	r16,zero
   4ec80:	28be5036 	bltu	r5,r2,4e5c4 <__alt_data_end+0xfffdc5c4>
   4ec84:	a9000007 	ldb	r4,0(r21)
   4ec88:	840002a4 	muli	r16,r16,10
   4ec8c:	ad400044 	addi	r21,r21,1
   4ec90:	1421883a 	add	r16,r2,r16
   4ec94:	20bff404 	addi	r2,r4,-48
   4ec98:	28bffa2e 	bgeu	r5,r2,4ec84 <__alt_data_end+0xfffdcc84>
   4ec9c:	803e490e 	bge	r16,zero,4e5c4 <__alt_data_end+0xfffdc5c4>
   4eca0:	043fffc4 	movi	r16,-1
   4eca4:	003e4706 	br	4e5c4 <__alt_data_end+0xfffdc5c4>
   4eca8:	d8c01c17 	ldw	r3,112(sp)
   4ecac:	d8801b17 	ldw	r2,108(sp)
   4ecb0:	d9001d87 	ldb	r4,118(sp)
   4ecb4:	20000b26 	beq	r4,zero,4ece4 <___svfiprintf_internal_r+0x854>
   4ecb8:	d9001d84 	addi	r4,sp,118
   4ecbc:	18c00044 	addi	r3,r3,1
   4ecc0:	10800044 	addi	r2,r2,1
   4ecc4:	41000015 	stw	r4,0(r8)
   4ecc8:	01000044 	movi	r4,1
   4eccc:	41000115 	stw	r4,4(r8)
   4ecd0:	d8c01c15 	stw	r3,112(sp)
   4ecd4:	d8801b15 	stw	r2,108(sp)
   4ecd8:	010001c4 	movi	r4,7
   4ecdc:	20811e16 	blt	r4,r2,4f158 <___svfiprintf_internal_r+0xcc8>
   4ece0:	42000204 	addi	r8,r8,8
   4ece4:	da802217 	ldw	r10,136(sp)
   4ece8:	50000b26 	beq	r10,zero,4ed18 <___svfiprintf_internal_r+0x888>
   4ecec:	d9001d04 	addi	r4,sp,116
   4ecf0:	18c00084 	addi	r3,r3,2
   4ecf4:	10800044 	addi	r2,r2,1
   4ecf8:	41000015 	stw	r4,0(r8)
   4ecfc:	01000084 	movi	r4,2
   4ed00:	41000115 	stw	r4,4(r8)
   4ed04:	d8c01c15 	stw	r3,112(sp)
   4ed08:	d8801b15 	stw	r2,108(sp)
   4ed0c:	010001c4 	movi	r4,7
   4ed10:	20811a16 	blt	r4,r2,4f17c <___svfiprintf_internal_r+0xcec>
   4ed14:	42000204 	addi	r8,r8,8
   4ed18:	dac02517 	ldw	r11,148(sp)
   4ed1c:	01002004 	movi	r4,128
   4ed20:	5900a826 	beq	r11,r4,4efc4 <___svfiprintf_internal_r+0xb34>
   4ed24:	8721c83a 	sub	r16,r16,fp
   4ed28:	0400260e 	bge	zero,r16,4edc4 <___svfiprintf_internal_r+0x934>
   4ed2c:	01c00404 	movi	r7,16
   4ed30:	3c019d0e 	bge	r7,r16,4f3a8 <___svfiprintf_internal_r+0xf18>
   4ed34:	01000174 	movhi	r4,5
   4ed38:	21133b04 	addi	r4,r4,19692
   4ed3c:	d9002215 	stw	r4,136(sp)
   4ed40:	382f883a 	mov	r23,r7
   4ed44:	058001c4 	movi	r22,7
   4ed48:	00000306 	br	4ed58 <___svfiprintf_internal_r+0x8c8>
   4ed4c:	843ffc04 	addi	r16,r16,-16
   4ed50:	42000204 	addi	r8,r8,8
   4ed54:	bc00110e 	bge	r23,r16,4ed9c <___svfiprintf_internal_r+0x90c>
   4ed58:	18c00404 	addi	r3,r3,16
   4ed5c:	10800044 	addi	r2,r2,1
   4ed60:	44c00015 	stw	r19,0(r8)
   4ed64:	45c00115 	stw	r23,4(r8)
   4ed68:	d8c01c15 	stw	r3,112(sp)
   4ed6c:	d8801b15 	stw	r2,108(sp)
   4ed70:	b0bff60e 	bge	r22,r2,4ed4c <__alt_data_end+0xfffdcd4c>
   4ed74:	9009883a 	mov	r4,r18
   4ed78:	a00b883a 	mov	r5,r20
   4ed7c:	d9801a04 	addi	r6,sp,104
   4ed80:	004e2c40 	call	4e2c4 <__ssprint_r>
   4ed84:	10007e1e 	bne	r2,zero,4ef80 <___svfiprintf_internal_r+0xaf0>
   4ed88:	843ffc04 	addi	r16,r16,-16
   4ed8c:	d8c01c17 	ldw	r3,112(sp)
   4ed90:	d8801b17 	ldw	r2,108(sp)
   4ed94:	d811883a 	mov	r8,sp
   4ed98:	bc3fef16 	blt	r23,r16,4ed58 <__alt_data_end+0xfffdcd58>
   4ed9c:	da802217 	ldw	r10,136(sp)
   4eda0:	1c07883a 	add	r3,r3,r16
   4eda4:	10800044 	addi	r2,r2,1
   4eda8:	42800015 	stw	r10,0(r8)
   4edac:	44000115 	stw	r16,4(r8)
   4edb0:	d8c01c15 	stw	r3,112(sp)
   4edb4:	d8801b15 	stw	r2,108(sp)
   4edb8:	010001c4 	movi	r4,7
   4edbc:	2080ce16 	blt	r4,r2,4f0f8 <___svfiprintf_internal_r+0xc68>
   4edc0:	42000204 	addi	r8,r8,8
   4edc4:	dac02617 	ldw	r11,152(sp)
   4edc8:	1f07883a 	add	r3,r3,fp
   4edcc:	10800044 	addi	r2,r2,1
   4edd0:	42c00015 	stw	r11,0(r8)
   4edd4:	47000115 	stw	fp,4(r8)
   4edd8:	d8c01c15 	stw	r3,112(sp)
   4eddc:	d8801b15 	stw	r2,108(sp)
   4ede0:	010001c4 	movi	r4,7
   4ede4:	2080a316 	blt	r4,r2,4f074 <___svfiprintf_internal_r+0xbe4>
   4ede8:	42000204 	addi	r8,r8,8
   4edec:	8c40010c 	andi	r17,r17,4
   4edf0:	88002b26 	beq	r17,zero,4eea0 <___svfiprintf_internal_r+0xa10>
   4edf4:	da802117 	ldw	r10,132(sp)
   4edf8:	dac02017 	ldw	r11,128(sp)
   4edfc:	52e1c83a 	sub	r16,r10,r11
   4ee00:	0400270e 	bge	zero,r16,4eea0 <___svfiprintf_internal_r+0xa10>
   4ee04:	04400404 	movi	r17,16
   4ee08:	d8801b17 	ldw	r2,108(sp)
   4ee0c:	8c01900e 	bge	r17,r16,4f450 <___svfiprintf_internal_r+0xfc0>
   4ee10:	01400174 	movhi	r5,5
   4ee14:	29533f04 	addi	r5,r5,19708
   4ee18:	d9402815 	stw	r5,160(sp)
   4ee1c:	070001c4 	movi	fp,7
   4ee20:	00000306 	br	4ee30 <___svfiprintf_internal_r+0x9a0>
   4ee24:	843ffc04 	addi	r16,r16,-16
   4ee28:	42000204 	addi	r8,r8,8
   4ee2c:	8c00130e 	bge	r17,r16,4ee7c <___svfiprintf_internal_r+0x9ec>
   4ee30:	02800174 	movhi	r10,5
   4ee34:	18c00404 	addi	r3,r3,16
   4ee38:	10800044 	addi	r2,r2,1
   4ee3c:	52933f04 	addi	r10,r10,19708
   4ee40:	42800015 	stw	r10,0(r8)
   4ee44:	44400115 	stw	r17,4(r8)
   4ee48:	d8c01c15 	stw	r3,112(sp)
   4ee4c:	d8801b15 	stw	r2,108(sp)
   4ee50:	e0bff40e 	bge	fp,r2,4ee24 <__alt_data_end+0xfffdce24>
   4ee54:	9009883a 	mov	r4,r18
   4ee58:	a00b883a 	mov	r5,r20
   4ee5c:	d9801a04 	addi	r6,sp,104
   4ee60:	004e2c40 	call	4e2c4 <__ssprint_r>
   4ee64:	1000461e 	bne	r2,zero,4ef80 <___svfiprintf_internal_r+0xaf0>
   4ee68:	843ffc04 	addi	r16,r16,-16
   4ee6c:	d8c01c17 	ldw	r3,112(sp)
   4ee70:	d8801b17 	ldw	r2,108(sp)
   4ee74:	d811883a 	mov	r8,sp
   4ee78:	8c3fed16 	blt	r17,r16,4ee30 <__alt_data_end+0xfffdce30>
   4ee7c:	dac02817 	ldw	r11,160(sp)
   4ee80:	1c07883a 	add	r3,r3,r16
   4ee84:	10800044 	addi	r2,r2,1
   4ee88:	42c00015 	stw	r11,0(r8)
   4ee8c:	44000115 	stw	r16,4(r8)
   4ee90:	d8c01c15 	stw	r3,112(sp)
   4ee94:	d8801b15 	stw	r2,108(sp)
   4ee98:	010001c4 	movi	r4,7
   4ee9c:	2080fd16 	blt	r4,r2,4f294 <___svfiprintf_internal_r+0xe04>
   4eea0:	dd802017 	ldw	r22,128(sp)
   4eea4:	da802117 	ldw	r10,132(sp)
   4eea8:	b280010e 	bge	r22,r10,4eeb0 <___svfiprintf_internal_r+0xa20>
   4eeac:	502d883a 	mov	r22,r10
   4eeb0:	dac02417 	ldw	r11,144(sp)
   4eeb4:	5d97883a 	add	r11,r11,r22
   4eeb8:	dac02415 	stw	r11,144(sp)
   4eebc:	1800751e 	bne	r3,zero,4f094 <___svfiprintf_internal_r+0xc04>
   4eec0:	a8800007 	ldb	r2,0(r21)
   4eec4:	d8001b15 	stw	zero,108(sp)
   4eec8:	d811883a 	mov	r8,sp
   4eecc:	103d961e 	bne	r2,zero,4e528 <__alt_data_end+0xfffdc528>
   4eed0:	a82d883a 	mov	r22,r21
   4eed4:	003dad06 	br	4e58c <__alt_data_end+0xfffdc58c>
   4eed8:	10803fcc 	andi	r2,r2,255
   4eedc:	00c00044 	movi	r3,1
   4eee0:	10fe2f1e 	bne	r2,r3,4e7a0 <__alt_data_end+0xfffdc7a0>
   4eee4:	5000e026 	beq	r10,zero,4f268 <___svfiprintf_internal_r+0xdd8>
   4eee8:	dc002015 	stw	r16,128(sp)
   4eeec:	dc402215 	stw	r17,136(sp)
   4eef0:	dd801a04 	addi	r22,sp,104
   4eef4:	402f883a 	mov	r23,r8
   4eef8:	5839883a 	mov	fp,r11
   4eefc:	4821883a 	mov	r16,r9
   4ef00:	5023883a 	mov	r17,r10
   4ef04:	8009883a 	mov	r4,r16
   4ef08:	880b883a 	mov	r5,r17
   4ef0c:	01800284 	movi	r6,10
   4ef10:	000f883a 	mov	r7,zero
   4ef14:	0050fa00 	call	50fa0 <__umoddi3>
   4ef18:	10800c04 	addi	r2,r2,48
   4ef1c:	b5bfffc4 	addi	r22,r22,-1
   4ef20:	8009883a 	mov	r4,r16
   4ef24:	880b883a 	mov	r5,r17
   4ef28:	01800284 	movi	r6,10
   4ef2c:	000f883a 	mov	r7,zero
   4ef30:	b0800005 	stb	r2,0(r22)
   4ef34:	00509e00 	call	509e0 <__udivdi3>
   4ef38:	1021883a 	mov	r16,r2
   4ef3c:	10c4b03a 	or	r2,r2,r3
   4ef40:	1823883a 	mov	r17,r3
   4ef44:	103fef1e 	bne	r2,zero,4ef04 <__alt_data_end+0xfffdcf04>
   4ef48:	da801e17 	ldw	r10,120(sp)
   4ef4c:	e017883a 	mov	r11,fp
   4ef50:	dc002017 	ldw	r16,128(sp)
   4ef54:	dc402217 	ldw	r17,136(sp)
   4ef58:	b811883a 	mov	r8,r23
   4ef5c:	dd802615 	stw	r22,152(sp)
   4ef60:	55b9c83a 	sub	fp,r10,r22
   4ef64:	003e2006 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4ef68:	d8801c17 	ldw	r2,112(sp)
   4ef6c:	10000426 	beq	r2,zero,4ef80 <___svfiprintf_internal_r+0xaf0>
   4ef70:	d9002917 	ldw	r4,164(sp)
   4ef74:	d9402717 	ldw	r5,156(sp)
   4ef78:	d9801a04 	addi	r6,sp,104
   4ef7c:	004e2c40 	call	4e2c4 <__ssprint_r>
   4ef80:	da802717 	ldw	r10,156(sp)
   4ef84:	5080030b 	ldhu	r2,12(r10)
   4ef88:	1080100c 	andi	r2,r2,64
   4ef8c:	1000511e 	bne	r2,zero,4f0d4 <___svfiprintf_internal_r+0xc44>
   4ef90:	d8802417 	ldw	r2,144(sp)
   4ef94:	dfc03617 	ldw	ra,216(sp)
   4ef98:	df003517 	ldw	fp,212(sp)
   4ef9c:	ddc03417 	ldw	r23,208(sp)
   4efa0:	dd803317 	ldw	r22,204(sp)
   4efa4:	dd403217 	ldw	r21,200(sp)
   4efa8:	dd003117 	ldw	r20,196(sp)
   4efac:	dcc03017 	ldw	r19,192(sp)
   4efb0:	dc802f17 	ldw	r18,188(sp)
   4efb4:	dc402e17 	ldw	r17,184(sp)
   4efb8:	dc002d17 	ldw	r16,180(sp)
   4efbc:	dec03704 	addi	sp,sp,220
   4efc0:	f800283a 	ret
   4efc4:	da802117 	ldw	r10,132(sp)
   4efc8:	dac02017 	ldw	r11,128(sp)
   4efcc:	52edc83a 	sub	r22,r10,r11
   4efd0:	05bf540e 	bge	zero,r22,4ed24 <__alt_data_end+0xfffdcd24>
   4efd4:	02400404 	movi	r9,16
   4efd8:	4d81210e 	bge	r9,r22,4f460 <___svfiprintf_internal_r+0xfd0>
   4efdc:	01400174 	movhi	r5,5
   4efe0:	29533b04 	addi	r5,r5,19692
   4efe4:	d9402215 	stw	r5,136(sp)
   4efe8:	05c001c4 	movi	r23,7
   4efec:	00000306 	br	4effc <___svfiprintf_internal_r+0xb6c>
   4eff0:	b5bffc04 	addi	r22,r22,-16
   4eff4:	42000204 	addi	r8,r8,8
   4eff8:	4d80130e 	bge	r9,r22,4f048 <___svfiprintf_internal_r+0xbb8>
   4effc:	18c00404 	addi	r3,r3,16
   4f000:	10800044 	addi	r2,r2,1
   4f004:	44c00015 	stw	r19,0(r8)
   4f008:	42400115 	stw	r9,4(r8)
   4f00c:	d8c01c15 	stw	r3,112(sp)
   4f010:	d8801b15 	stw	r2,108(sp)
   4f014:	b8bff60e 	bge	r23,r2,4eff0 <__alt_data_end+0xfffdcff0>
   4f018:	9009883a 	mov	r4,r18
   4f01c:	a00b883a 	mov	r5,r20
   4f020:	d9801a04 	addi	r6,sp,104
   4f024:	da402c15 	stw	r9,176(sp)
   4f028:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f02c:	da402c17 	ldw	r9,176(sp)
   4f030:	103fd31e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f034:	b5bffc04 	addi	r22,r22,-16
   4f038:	d8c01c17 	ldw	r3,112(sp)
   4f03c:	d8801b17 	ldw	r2,108(sp)
   4f040:	d811883a 	mov	r8,sp
   4f044:	4dbfed16 	blt	r9,r22,4effc <__alt_data_end+0xfffdcffc>
   4f048:	da802217 	ldw	r10,136(sp)
   4f04c:	1d87883a 	add	r3,r3,r22
   4f050:	10800044 	addi	r2,r2,1
   4f054:	42800015 	stw	r10,0(r8)
   4f058:	45800115 	stw	r22,4(r8)
   4f05c:	d8c01c15 	stw	r3,112(sp)
   4f060:	d8801b15 	stw	r2,108(sp)
   4f064:	010001c4 	movi	r4,7
   4f068:	2080c616 	blt	r4,r2,4f384 <___svfiprintf_internal_r+0xef4>
   4f06c:	42000204 	addi	r8,r8,8
   4f070:	003f2c06 	br	4ed24 <__alt_data_end+0xfffdcd24>
   4f074:	9009883a 	mov	r4,r18
   4f078:	a00b883a 	mov	r5,r20
   4f07c:	d9801a04 	addi	r6,sp,104
   4f080:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f084:	103fbe1e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f088:	d8c01c17 	ldw	r3,112(sp)
   4f08c:	d811883a 	mov	r8,sp
   4f090:	003f5606 	br	4edec <__alt_data_end+0xfffdcdec>
   4f094:	9009883a 	mov	r4,r18
   4f098:	a00b883a 	mov	r5,r20
   4f09c:	d9801a04 	addi	r6,sp,104
   4f0a0:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f0a4:	103f8626 	beq	r2,zero,4eec0 <__alt_data_end+0xfffdcec0>
   4f0a8:	003fb506 	br	4ef80 <__alt_data_end+0xfffdcf80>
   4f0ac:	10803fcc 	andi	r2,r2,255
   4f0b0:	10003b1e 	bne	r2,zero,4f1a0 <___svfiprintf_internal_r+0xd10>
   4f0b4:	8880004c 	andi	r2,r17,1
   4f0b8:	10007d26 	beq	r2,zero,4f2b0 <___svfiprintf_internal_r+0xe20>
   4f0bc:	00800c04 	movi	r2,48
   4f0c0:	d8c019c4 	addi	r3,sp,103
   4f0c4:	d88019c5 	stb	r2,103(sp)
   4f0c8:	df002b17 	ldw	fp,172(sp)
   4f0cc:	d8c02615 	stw	r3,152(sp)
   4f0d0:	003dc506 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4f0d4:	00bfffc4 	movi	r2,-1
   4f0d8:	003fae06 	br	4ef94 <__alt_data_end+0xfffdcf94>
   4f0dc:	9009883a 	mov	r4,r18
   4f0e0:	a00b883a 	mov	r5,r20
   4f0e4:	d9801a04 	addi	r6,sp,104
   4f0e8:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f0ec:	103fa41e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f0f0:	d811883a 	mov	r8,sp
   4f0f4:	003d2206 	br	4e580 <__alt_data_end+0xfffdc580>
   4f0f8:	9009883a 	mov	r4,r18
   4f0fc:	a00b883a 	mov	r5,r20
   4f100:	d9801a04 	addi	r6,sp,104
   4f104:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f108:	103f9d1e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f10c:	d8c01c17 	ldw	r3,112(sp)
   4f110:	d8801b17 	ldw	r2,108(sp)
   4f114:	d811883a 	mov	r8,sp
   4f118:	003f2a06 	br	4edc4 <__alt_data_end+0xfffdcdc4>
   4f11c:	d9402a17 	ldw	r5,168(sp)
   4f120:	d8c01a04 	addi	r3,sp,104
   4f124:	488003cc 	andi	r2,r9,15
   4f128:	5008973a 	slli	r4,r10,28
   4f12c:	2885883a 	add	r2,r5,r2
   4f130:	4812d13a 	srli	r9,r9,4
   4f134:	10800003 	ldbu	r2,0(r2)
   4f138:	5014d13a 	srli	r10,r10,4
   4f13c:	18ffffc4 	addi	r3,r3,-1
   4f140:	2252b03a 	or	r9,r4,r9
   4f144:	18800005 	stb	r2,0(r3)
   4f148:	4a84b03a 	or	r2,r9,r10
   4f14c:	103ff51e 	bne	r2,zero,4f124 <__alt_data_end+0xfffdd124>
   4f150:	d8c02615 	stw	r3,152(sp)
   4f154:	003da206 	br	4e7e0 <__alt_data_end+0xfffdc7e0>
   4f158:	9009883a 	mov	r4,r18
   4f15c:	a00b883a 	mov	r5,r20
   4f160:	d9801a04 	addi	r6,sp,104
   4f164:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f168:	103f851e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f16c:	d8c01c17 	ldw	r3,112(sp)
   4f170:	d8801b17 	ldw	r2,108(sp)
   4f174:	d811883a 	mov	r8,sp
   4f178:	003eda06 	br	4ece4 <__alt_data_end+0xfffdcce4>
   4f17c:	9009883a 	mov	r4,r18
   4f180:	a00b883a 	mov	r5,r20
   4f184:	d9801a04 	addi	r6,sp,104
   4f188:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f18c:	103f7c1e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f190:	d8c01c17 	ldw	r3,112(sp)
   4f194:	d8801b17 	ldw	r2,108(sp)
   4f198:	d811883a 	mov	r8,sp
   4f19c:	003ede06 	br	4ed18 <__alt_data_end+0xfffdcd18>
   4f1a0:	da801a04 	addi	r10,sp,104
   4f1a4:	da802615 	stw	r10,152(sp)
   4f1a8:	003d8f06 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4f1ac:	8880040c 	andi	r2,r17,16
   4f1b0:	10004c1e 	bne	r2,zero,4f2e4 <___svfiprintf_internal_r+0xe54>
   4f1b4:	8880100c 	andi	r2,r17,64
   4f1b8:	da802317 	ldw	r10,140(sp)
   4f1bc:	10004a26 	beq	r2,zero,4f2e8 <___svfiprintf_internal_r+0xe58>
   4f1c0:	5240000b 	ldhu	r9,0(r10)
   4f1c4:	dac02317 	ldw	r11,140(sp)
   4f1c8:	0015883a 	mov	r10,zero
   4f1cc:	00800044 	movi	r2,1
   4f1d0:	5ac00104 	addi	r11,r11,4
   4f1d4:	dac02315 	stw	r11,140(sp)
   4f1d8:	4807883a 	mov	r3,r9
   4f1dc:	003d6506 	br	4e774 <__alt_data_end+0xfffdc774>
   4f1e0:	9009883a 	mov	r4,r18
   4f1e4:	a00b883a 	mov	r5,r20
   4f1e8:	d9801a04 	addi	r6,sp,104
   4f1ec:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f1f0:	103f631e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f1f4:	d8c01c17 	ldw	r3,112(sp)
   4f1f8:	d8801b17 	ldw	r2,108(sp)
   4f1fc:	d811883a 	mov	r8,sp
   4f200:	003eab06 	br	4ecb0 <__alt_data_end+0xfffdccb0>
   4f204:	8880040c 	andi	r2,r17,16
   4f208:	1000331e 	bne	r2,zero,4f2d8 <___svfiprintf_internal_r+0xe48>
   4f20c:	8880100c 	andi	r2,r17,64
   4f210:	da802317 	ldw	r10,140(sp)
   4f214:	10003126 	beq	r2,zero,4f2dc <___svfiprintf_internal_r+0xe4c>
   4f218:	5240000b 	ldhu	r9,0(r10)
   4f21c:	dac02317 	ldw	r11,140(sp)
   4f220:	0015883a 	mov	r10,zero
   4f224:	0005883a 	mov	r2,zero
   4f228:	5ac00104 	addi	r11,r11,4
   4f22c:	dac02315 	stw	r11,140(sp)
   4f230:	4807883a 	mov	r3,r9
   4f234:	003d4f06 	br	4e774 <__alt_data_end+0xfffdc774>
   4f238:	10803fcc 	andi	r2,r2,255
   4f23c:	1080201c 	xori	r2,r2,128
   4f240:	10bfe004 	addi	r2,r2,-128
   4f244:	01000c04 	movi	r4,48
   4f248:	11005b26 	beq	r2,r4,4f3b8 <___svfiprintf_internal_r+0xf28>
   4f24c:	da802617 	ldw	r10,152(sp)
   4f250:	d8801e17 	ldw	r2,120(sp)
   4f254:	193fffc5 	stb	r4,-1(r3)
   4f258:	52bfffc4 	addi	r10,r10,-1
   4f25c:	da802615 	stw	r10,152(sp)
   4f260:	12b9c83a 	sub	fp,r2,r10
   4f264:	003d6006 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4f268:	00800244 	movi	r2,9
   4f26c:	127f1e36 	bltu	r2,r9,4eee8 <__alt_data_end+0xfffdcee8>
   4f270:	4a400c04 	addi	r9,r9,48
   4f274:	d8c019c4 	addi	r3,sp,103
   4f278:	da4019c5 	stb	r9,103(sp)
   4f27c:	df002b17 	ldw	fp,172(sp)
   4f280:	d8c02615 	stw	r3,152(sp)
   4f284:	003d5806 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4f288:	d8802315 	stw	r2,140(sp)
   4f28c:	a9000007 	ldb	r4,0(r21)
   4f290:	003ccb06 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4f294:	9009883a 	mov	r4,r18
   4f298:	a00b883a 	mov	r5,r20
   4f29c:	d9801a04 	addi	r6,sp,104
   4f2a0:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f2a4:	103f361e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f2a8:	d8c01c17 	ldw	r3,112(sp)
   4f2ac:	003efc06 	br	4eea0 <__alt_data_end+0xfffdcea0>
   4f2b0:	d8c01a04 	addi	r3,sp,104
   4f2b4:	d8c02615 	stw	r3,152(sp)
   4f2b8:	003d4b06 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4f2bc:	da802317 	ldw	r10,140(sp)
   4f2c0:	1a400017 	ldw	r9,0(r3)
   4f2c4:	52800104 	addi	r10,r10,4
   4f2c8:	da802315 	stw	r10,140(sp)
   4f2cc:	4815d7fa 	srai	r10,r9,31
   4f2d0:	5005883a 	mov	r2,r10
   4f2d4:	003d9c06 	br	4e948 <__alt_data_end+0xfffdc948>
   4f2d8:	da802317 	ldw	r10,140(sp)
   4f2dc:	52400017 	ldw	r9,0(r10)
   4f2e0:	003fce06 	br	4f21c <__alt_data_end+0xfffdd21c>
   4f2e4:	da802317 	ldw	r10,140(sp)
   4f2e8:	52400017 	ldw	r9,0(r10)
   4f2ec:	003fb506 	br	4f1c4 <__alt_data_end+0xfffdd1c4>
   4f2f0:	8880100c 	andi	r2,r17,64
   4f2f4:	da802317 	ldw	r10,140(sp)
   4f2f8:	103e1926 	beq	r2,zero,4eb60 <__alt_data_end+0xfffdcb60>
   4f2fc:	dac02317 	ldw	r11,140(sp)
   4f300:	5240000b 	ldhu	r9,0(r10)
   4f304:	0015883a 	mov	r10,zero
   4f308:	5ac00104 	addi	r11,r11,4
   4f30c:	dac02315 	stw	r11,140(sp)
   4f310:	003de406 	br	4eaa4 <__alt_data_end+0xfffdcaa4>
   4f314:	a9000007 	ldb	r4,0(r21)
   4f318:	003ca906 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4f31c:	dac02317 	ldw	r11,140(sp)
   4f320:	da802417 	ldw	r10,144(sp)
   4f324:	58800017 	ldw	r2,0(r11)
   4f328:	5007d7fa 	srai	r3,r10,31
   4f32c:	5ac00104 	addi	r11,r11,4
   4f330:	dac02315 	stw	r11,140(sp)
   4f334:	12800015 	stw	r10,0(r2)
   4f338:	10c00115 	stw	r3,4(r2)
   4f33c:	003c7806 	br	4e520 <__alt_data_end+0xfffdc520>
   4f340:	00800c04 	movi	r2,48
   4f344:	d8801d05 	stb	r2,116(sp)
   4f348:	d9001d45 	stb	r4,117(sp)
   4f34c:	8c400094 	ori	r17,r17,2
   4f350:	00800084 	movi	r2,2
   4f354:	003d0706 	br	4e774 <__alt_data_end+0xfffdc774>
   4f358:	ad400044 	addi	r21,r21,1
   4f35c:	8c400814 	ori	r17,r17,32
   4f360:	11000047 	ldb	r4,1(r2)
   4f364:	003c9606 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4f368:	dac02317 	ldw	r11,140(sp)
   4f36c:	da802417 	ldw	r10,144(sp)
   4f370:	58800017 	ldw	r2,0(r11)
   4f374:	5ac00104 	addi	r11,r11,4
   4f378:	dac02315 	stw	r11,140(sp)
   4f37c:	12800015 	stw	r10,0(r2)
   4f380:	003c6706 	br	4e520 <__alt_data_end+0xfffdc520>
   4f384:	9009883a 	mov	r4,r18
   4f388:	a00b883a 	mov	r5,r20
   4f38c:	d9801a04 	addi	r6,sp,104
   4f390:	004e2c40 	call	4e2c4 <__ssprint_r>
   4f394:	103efa1e 	bne	r2,zero,4ef80 <__alt_data_end+0xfffdcf80>
   4f398:	d8c01c17 	ldw	r3,112(sp)
   4f39c:	d8801b17 	ldw	r2,108(sp)
   4f3a0:	d811883a 	mov	r8,sp
   4f3a4:	003e5f06 	br	4ed24 <__alt_data_end+0xfffdcd24>
   4f3a8:	02c00174 	movhi	r11,5
   4f3ac:	5ad33b04 	addi	r11,r11,19692
   4f3b0:	dac02215 	stw	r11,136(sp)
   4f3b4:	003e7906 	br	4ed9c <__alt_data_end+0xfffdcd9c>
   4f3b8:	da801e17 	ldw	r10,120(sp)
   4f3bc:	d8c02617 	ldw	r3,152(sp)
   4f3c0:	50f9c83a 	sub	fp,r10,r3
   4f3c4:	003d0806 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4f3c8:	da002c15 	stw	r8,176(sp)
   4f3cc:	004823c0 	call	4823c <strlen>
   4f3d0:	1039883a 	mov	fp,r2
   4f3d4:	dac01d83 	ldbu	r11,118(sp)
   4f3d8:	ddc02315 	stw	r23,140(sp)
   4f3dc:	0021883a 	mov	r16,zero
   4f3e0:	da002c17 	ldw	r8,176(sp)
   4f3e4:	003d0006 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4f3e8:	00800184 	movi	r2,6
   4f3ec:	1400012e 	bgeu	r2,r16,4f3f4 <___svfiprintf_internal_r+0xf64>
   4f3f0:	1021883a 	mov	r16,r2
   4f3f4:	8039883a 	mov	fp,r16
   4f3f8:	802d883a 	mov	r22,r16
   4f3fc:	80002116 	blt	r16,zero,4f484 <___svfiprintf_internal_r+0xff4>
   4f400:	00800174 	movhi	r2,5
   4f404:	1092df04 	addi	r2,r2,19324
   4f408:	dd802015 	stw	r22,128(sp)
   4f40c:	ddc02315 	stw	r23,140(sp)
   4f410:	d8802615 	stw	r2,152(sp)
   4f414:	003d5d06 	br	4e98c <__alt_data_end+0xfffdc98c>
   4f418:	04001004 	movi	r16,64
   4f41c:	800b883a 	mov	r5,r16
   4f420:	004c12c0 	call	4c12c <_malloc_r>
   4f424:	da802717 	ldw	r10,156(sp)
   4f428:	50800015 	stw	r2,0(r10)
   4f42c:	50800415 	stw	r2,16(r10)
   4f430:	10002026 	beq	r2,zero,4f4b4 <___svfiprintf_internal_r+0x1024>
   4f434:	da802717 	ldw	r10,156(sp)
   4f438:	54000515 	stw	r16,20(r10)
   4f43c:	003c2806 	br	4e4e0 <__alt_data_end+0xfffdc4e0>
   4f440:	01000174 	movhi	r4,5
   4f444:	21133f04 	addi	r4,r4,19708
   4f448:	d9002815 	stw	r4,160(sp)
   4f44c:	003d7e06 	br	4ea48 <__alt_data_end+0xfffdca48>
   4f450:	01000174 	movhi	r4,5
   4f454:	21133f04 	addi	r4,r4,19708
   4f458:	d9002815 	stw	r4,160(sp)
   4f45c:	003e8706 	br	4ee7c <__alt_data_end+0xfffdce7c>
   4f460:	01000174 	movhi	r4,5
   4f464:	21133b04 	addi	r4,r4,19692
   4f468:	d9002215 	stw	r4,136(sp)
   4f46c:	003ef606 	br	4f048 <__alt_data_end+0xfffdd048>
   4f470:	8039883a 	mov	fp,r16
   4f474:	dac01d83 	ldbu	r11,118(sp)
   4f478:	ddc02315 	stw	r23,140(sp)
   4f47c:	0021883a 	mov	r16,zero
   4f480:	003cd906 	br	4e7e8 <__alt_data_end+0xfffdc7e8>
   4f484:	002d883a 	mov	r22,zero
   4f488:	003fdd06 	br	4f400 <__alt_data_end+0xfffdd400>
   4f48c:	dac02317 	ldw	r11,140(sp)
   4f490:	a805883a 	mov	r2,r21
   4f494:	502b883a 	mov	r21,r10
   4f498:	5c000017 	ldw	r16,0(r11)
   4f49c:	59000104 	addi	r4,r11,4
   4f4a0:	d9002315 	stw	r4,140(sp)
   4f4a4:	803fae0e 	bge	r16,zero,4f360 <__alt_data_end+0xfffdd360>
   4f4a8:	043fffc4 	movi	r16,-1
   4f4ac:	11000047 	ldb	r4,1(r2)
   4f4b0:	003c4306 	br	4e5c0 <__alt_data_end+0xfffdc5c0>
   4f4b4:	dac02917 	ldw	r11,164(sp)
   4f4b8:	00800304 	movi	r2,12
   4f4bc:	58800015 	stw	r2,0(r11)
   4f4c0:	00bfffc4 	movi	r2,-1
   4f4c4:	003eb306 	br	4ef94 <__alt_data_end+0xfffdcf94>

0004f4c8 <__swsetup_r>:
   4f4c8:	00800174 	movhi	r2,5
   4f4cc:	defffd04 	addi	sp,sp,-12
   4f4d0:	109a5f04 	addi	r2,r2,27004
   4f4d4:	dc400115 	stw	r17,4(sp)
   4f4d8:	2023883a 	mov	r17,r4
   4f4dc:	11000017 	ldw	r4,0(r2)
   4f4e0:	dc000015 	stw	r16,0(sp)
   4f4e4:	dfc00215 	stw	ra,8(sp)
   4f4e8:	2821883a 	mov	r16,r5
   4f4ec:	20000226 	beq	r4,zero,4f4f8 <__swsetup_r+0x30>
   4f4f0:	20c00e17 	ldw	r3,56(r4)
   4f4f4:	18003126 	beq	r3,zero,4f5bc <__swsetup_r+0xf4>
   4f4f8:	8080030b 	ldhu	r2,12(r16)
   4f4fc:	10c0020c 	andi	r3,r2,8
   4f500:	100d883a 	mov	r6,r2
   4f504:	18000f26 	beq	r3,zero,4f544 <__swsetup_r+0x7c>
   4f508:	80c00417 	ldw	r3,16(r16)
   4f50c:	18001526 	beq	r3,zero,4f564 <__swsetup_r+0x9c>
   4f510:	1100004c 	andi	r4,r2,1
   4f514:	20001c1e 	bne	r4,zero,4f588 <__swsetup_r+0xc0>
   4f518:	1080008c 	andi	r2,r2,2
   4f51c:	1000291e 	bne	r2,zero,4f5c4 <__swsetup_r+0xfc>
   4f520:	80800517 	ldw	r2,20(r16)
   4f524:	80800215 	stw	r2,8(r16)
   4f528:	18001c26 	beq	r3,zero,4f59c <__swsetup_r+0xd4>
   4f52c:	0005883a 	mov	r2,zero
   4f530:	dfc00217 	ldw	ra,8(sp)
   4f534:	dc400117 	ldw	r17,4(sp)
   4f538:	dc000017 	ldw	r16,0(sp)
   4f53c:	dec00304 	addi	sp,sp,12
   4f540:	f800283a 	ret
   4f544:	3080040c 	andi	r2,r6,16
   4f548:	10002e26 	beq	r2,zero,4f604 <__swsetup_r+0x13c>
   4f54c:	3080010c 	andi	r2,r6,4
   4f550:	10001e1e 	bne	r2,zero,4f5cc <__swsetup_r+0x104>
   4f554:	80c00417 	ldw	r3,16(r16)
   4f558:	30800214 	ori	r2,r6,8
   4f55c:	8080030d 	sth	r2,12(r16)
   4f560:	183feb1e 	bne	r3,zero,4f510 <__alt_data_end+0xfffdd510>
   4f564:	1140a00c 	andi	r5,r2,640
   4f568:	01008004 	movi	r4,512
   4f56c:	293fe826 	beq	r5,r4,4f510 <__alt_data_end+0xfffdd510>
   4f570:	8809883a 	mov	r4,r17
   4f574:	800b883a 	mov	r5,r16
   4f578:	00502b00 	call	502b0 <__smakebuf_r>
   4f57c:	8080030b 	ldhu	r2,12(r16)
   4f580:	80c00417 	ldw	r3,16(r16)
   4f584:	003fe206 	br	4f510 <__alt_data_end+0xfffdd510>
   4f588:	80800517 	ldw	r2,20(r16)
   4f58c:	80000215 	stw	zero,8(r16)
   4f590:	0085c83a 	sub	r2,zero,r2
   4f594:	80800615 	stw	r2,24(r16)
   4f598:	183fe41e 	bne	r3,zero,4f52c <__alt_data_end+0xfffdd52c>
   4f59c:	80c0030b 	ldhu	r3,12(r16)
   4f5a0:	0005883a 	mov	r2,zero
   4f5a4:	1900200c 	andi	r4,r3,128
   4f5a8:	203fe126 	beq	r4,zero,4f530 <__alt_data_end+0xfffdd530>
   4f5ac:	18c01014 	ori	r3,r3,64
   4f5b0:	80c0030d 	sth	r3,12(r16)
   4f5b4:	00bfffc4 	movi	r2,-1
   4f5b8:	003fdd06 	br	4f530 <__alt_data_end+0xfffdd530>
   4f5bc:	004fcc40 	call	4fcc4 <__sinit>
   4f5c0:	003fcd06 	br	4f4f8 <__alt_data_end+0xfffdd4f8>
   4f5c4:	0005883a 	mov	r2,zero
   4f5c8:	003fd606 	br	4f524 <__alt_data_end+0xfffdd524>
   4f5cc:	81400c17 	ldw	r5,48(r16)
   4f5d0:	28000626 	beq	r5,zero,4f5ec <__swsetup_r+0x124>
   4f5d4:	80801004 	addi	r2,r16,64
   4f5d8:	28800326 	beq	r5,r2,4f5e8 <__swsetup_r+0x120>
   4f5dc:	8809883a 	mov	r4,r17
   4f5e0:	004fe380 	call	4fe38 <_free_r>
   4f5e4:	8180030b 	ldhu	r6,12(r16)
   4f5e8:	80000c15 	stw	zero,48(r16)
   4f5ec:	80c00417 	ldw	r3,16(r16)
   4f5f0:	00bff6c4 	movi	r2,-37
   4f5f4:	118c703a 	and	r6,r2,r6
   4f5f8:	80000115 	stw	zero,4(r16)
   4f5fc:	80c00015 	stw	r3,0(r16)
   4f600:	003fd506 	br	4f558 <__alt_data_end+0xfffdd558>
   4f604:	00800244 	movi	r2,9
   4f608:	88800015 	stw	r2,0(r17)
   4f60c:	30801014 	ori	r2,r6,64
   4f610:	8080030d 	sth	r2,12(r16)
   4f614:	00bfffc4 	movi	r2,-1
   4f618:	003fc506 	br	4f530 <__alt_data_end+0xfffdd530>

0004f61c <_calloc_r>:
   4f61c:	298b383a 	mul	r5,r5,r6
   4f620:	defffe04 	addi	sp,sp,-8
   4f624:	dc000015 	stw	r16,0(sp)
   4f628:	dfc00115 	stw	ra,4(sp)
   4f62c:	004c12c0 	call	4c12c <_malloc_r>
   4f630:	1021883a 	mov	r16,r2
   4f634:	10002826 	beq	r2,zero,4f6d8 <_calloc_r+0xbc>
   4f638:	11bfff17 	ldw	r6,-4(r2)
   4f63c:	00bfff04 	movi	r2,-4
   4f640:	00c00904 	movi	r3,36
   4f644:	308c703a 	and	r6,r6,r2
   4f648:	308d883a 	add	r6,r6,r2
   4f64c:	19801436 	bltu	r3,r6,4f6a0 <_calloc_r+0x84>
   4f650:	008004c4 	movi	r2,19
   4f654:	11800936 	bltu	r2,r6,4f67c <_calloc_r+0x60>
   4f658:	8005883a 	mov	r2,r16
   4f65c:	10000015 	stw	zero,0(r2)
   4f660:	10000115 	stw	zero,4(r2)
   4f664:	10000215 	stw	zero,8(r2)
   4f668:	8005883a 	mov	r2,r16
   4f66c:	dfc00117 	ldw	ra,4(sp)
   4f670:	dc000017 	ldw	r16,0(sp)
   4f674:	dec00204 	addi	sp,sp,8
   4f678:	f800283a 	ret
   4f67c:	80000015 	stw	zero,0(r16)
   4f680:	80000115 	stw	zero,4(r16)
   4f684:	008006c4 	movi	r2,27
   4f688:	11800d2e 	bgeu	r2,r6,4f6c0 <_calloc_r+0xa4>
   4f68c:	80000215 	stw	zero,8(r16)
   4f690:	80000315 	stw	zero,12(r16)
   4f694:	30c00c26 	beq	r6,r3,4f6c8 <_calloc_r+0xac>
   4f698:	80800404 	addi	r2,r16,16
   4f69c:	003fef06 	br	4f65c <__alt_data_end+0xfffdd65c>
   4f6a0:	8009883a 	mov	r4,r16
   4f6a4:	000b883a 	mov	r5,zero
   4f6a8:	00504680 	call	50468 <memset>
   4f6ac:	8005883a 	mov	r2,r16
   4f6b0:	dfc00117 	ldw	ra,4(sp)
   4f6b4:	dc000017 	ldw	r16,0(sp)
   4f6b8:	dec00204 	addi	sp,sp,8
   4f6bc:	f800283a 	ret
   4f6c0:	80800204 	addi	r2,r16,8
   4f6c4:	003fe506 	br	4f65c <__alt_data_end+0xfffdd65c>
   4f6c8:	80000415 	stw	zero,16(r16)
   4f6cc:	80800604 	addi	r2,r16,24
   4f6d0:	80000515 	stw	zero,20(r16)
   4f6d4:	003fe106 	br	4f65c <__alt_data_end+0xfffdd65c>
   4f6d8:	0005883a 	mov	r2,zero
   4f6dc:	003fe306 	br	4f66c <__alt_data_end+0xfffdd66c>

0004f6e0 <__sflush_r>:
   4f6e0:	2880030b 	ldhu	r2,12(r5)
   4f6e4:	defffb04 	addi	sp,sp,-20
   4f6e8:	dcc00315 	stw	r19,12(sp)
   4f6ec:	dc400115 	stw	r17,4(sp)
   4f6f0:	dfc00415 	stw	ra,16(sp)
   4f6f4:	dc800215 	stw	r18,8(sp)
   4f6f8:	dc000015 	stw	r16,0(sp)
   4f6fc:	10c0020c 	andi	r3,r2,8
   4f700:	2823883a 	mov	r17,r5
   4f704:	2027883a 	mov	r19,r4
   4f708:	1800311e 	bne	r3,zero,4f7d0 <__sflush_r+0xf0>
   4f70c:	28c00117 	ldw	r3,4(r5)
   4f710:	10820014 	ori	r2,r2,2048
   4f714:	2880030d 	sth	r2,12(r5)
   4f718:	00c04b0e 	bge	zero,r3,4f848 <__sflush_r+0x168>
   4f71c:	8a000a17 	ldw	r8,40(r17)
   4f720:	40002326 	beq	r8,zero,4f7b0 <__sflush_r+0xd0>
   4f724:	9c000017 	ldw	r16,0(r19)
   4f728:	10c4000c 	andi	r3,r2,4096
   4f72c:	98000015 	stw	zero,0(r19)
   4f730:	18004826 	beq	r3,zero,4f854 <__sflush_r+0x174>
   4f734:	89801417 	ldw	r6,80(r17)
   4f738:	10c0010c 	andi	r3,r2,4
   4f73c:	18000626 	beq	r3,zero,4f758 <__sflush_r+0x78>
   4f740:	88c00117 	ldw	r3,4(r17)
   4f744:	88800c17 	ldw	r2,48(r17)
   4f748:	30cdc83a 	sub	r6,r6,r3
   4f74c:	10000226 	beq	r2,zero,4f758 <__sflush_r+0x78>
   4f750:	88800f17 	ldw	r2,60(r17)
   4f754:	308dc83a 	sub	r6,r6,r2
   4f758:	89400717 	ldw	r5,28(r17)
   4f75c:	9809883a 	mov	r4,r19
   4f760:	000f883a 	mov	r7,zero
   4f764:	403ee83a 	callr	r8
   4f768:	00ffffc4 	movi	r3,-1
   4f76c:	10c04426 	beq	r2,r3,4f880 <__sflush_r+0x1a0>
   4f770:	88c0030b 	ldhu	r3,12(r17)
   4f774:	89000417 	ldw	r4,16(r17)
   4f778:	88000115 	stw	zero,4(r17)
   4f77c:	197dffcc 	andi	r5,r3,63487
   4f780:	8940030d 	sth	r5,12(r17)
   4f784:	89000015 	stw	r4,0(r17)
   4f788:	18c4000c 	andi	r3,r3,4096
   4f78c:	18002c1e 	bne	r3,zero,4f840 <__sflush_r+0x160>
   4f790:	89400c17 	ldw	r5,48(r17)
   4f794:	9c000015 	stw	r16,0(r19)
   4f798:	28000526 	beq	r5,zero,4f7b0 <__sflush_r+0xd0>
   4f79c:	88801004 	addi	r2,r17,64
   4f7a0:	28800226 	beq	r5,r2,4f7ac <__sflush_r+0xcc>
   4f7a4:	9809883a 	mov	r4,r19
   4f7a8:	004fe380 	call	4fe38 <_free_r>
   4f7ac:	88000c15 	stw	zero,48(r17)
   4f7b0:	0005883a 	mov	r2,zero
   4f7b4:	dfc00417 	ldw	ra,16(sp)
   4f7b8:	dcc00317 	ldw	r19,12(sp)
   4f7bc:	dc800217 	ldw	r18,8(sp)
   4f7c0:	dc400117 	ldw	r17,4(sp)
   4f7c4:	dc000017 	ldw	r16,0(sp)
   4f7c8:	dec00504 	addi	sp,sp,20
   4f7cc:	f800283a 	ret
   4f7d0:	2c800417 	ldw	r18,16(r5)
   4f7d4:	903ff626 	beq	r18,zero,4f7b0 <__alt_data_end+0xfffdd7b0>
   4f7d8:	2c000017 	ldw	r16,0(r5)
   4f7dc:	108000cc 	andi	r2,r2,3
   4f7e0:	2c800015 	stw	r18,0(r5)
   4f7e4:	84a1c83a 	sub	r16,r16,r18
   4f7e8:	1000131e 	bne	r2,zero,4f838 <__sflush_r+0x158>
   4f7ec:	28800517 	ldw	r2,20(r5)
   4f7f0:	88800215 	stw	r2,8(r17)
   4f7f4:	04000316 	blt	zero,r16,4f804 <__sflush_r+0x124>
   4f7f8:	003fed06 	br	4f7b0 <__alt_data_end+0xfffdd7b0>
   4f7fc:	90a5883a 	add	r18,r18,r2
   4f800:	043feb0e 	bge	zero,r16,4f7b0 <__alt_data_end+0xfffdd7b0>
   4f804:	88800917 	ldw	r2,36(r17)
   4f808:	89400717 	ldw	r5,28(r17)
   4f80c:	800f883a 	mov	r7,r16
   4f810:	900d883a 	mov	r6,r18
   4f814:	9809883a 	mov	r4,r19
   4f818:	103ee83a 	callr	r2
   4f81c:	80a1c83a 	sub	r16,r16,r2
   4f820:	00bff616 	blt	zero,r2,4f7fc <__alt_data_end+0xfffdd7fc>
   4f824:	88c0030b 	ldhu	r3,12(r17)
   4f828:	00bfffc4 	movi	r2,-1
   4f82c:	18c01014 	ori	r3,r3,64
   4f830:	88c0030d 	sth	r3,12(r17)
   4f834:	003fdf06 	br	4f7b4 <__alt_data_end+0xfffdd7b4>
   4f838:	0005883a 	mov	r2,zero
   4f83c:	003fec06 	br	4f7f0 <__alt_data_end+0xfffdd7f0>
   4f840:	88801415 	stw	r2,80(r17)
   4f844:	003fd206 	br	4f790 <__alt_data_end+0xfffdd790>
   4f848:	28c00f17 	ldw	r3,60(r5)
   4f84c:	00ffb316 	blt	zero,r3,4f71c <__alt_data_end+0xfffdd71c>
   4f850:	003fd706 	br	4f7b0 <__alt_data_end+0xfffdd7b0>
   4f854:	89400717 	ldw	r5,28(r17)
   4f858:	000d883a 	mov	r6,zero
   4f85c:	9809883a 	mov	r4,r19
   4f860:	01c00044 	movi	r7,1
   4f864:	403ee83a 	callr	r8
   4f868:	100d883a 	mov	r6,r2
   4f86c:	00bfffc4 	movi	r2,-1
   4f870:	30801426 	beq	r6,r2,4f8c4 <__sflush_r+0x1e4>
   4f874:	8880030b 	ldhu	r2,12(r17)
   4f878:	8a000a17 	ldw	r8,40(r17)
   4f87c:	003fae06 	br	4f738 <__alt_data_end+0xfffdd738>
   4f880:	98c00017 	ldw	r3,0(r19)
   4f884:	183fba26 	beq	r3,zero,4f770 <__alt_data_end+0xfffdd770>
   4f888:	01000744 	movi	r4,29
   4f88c:	19000626 	beq	r3,r4,4f8a8 <__sflush_r+0x1c8>
   4f890:	01000584 	movi	r4,22
   4f894:	19000426 	beq	r3,r4,4f8a8 <__sflush_r+0x1c8>
   4f898:	88c0030b 	ldhu	r3,12(r17)
   4f89c:	18c01014 	ori	r3,r3,64
   4f8a0:	88c0030d 	sth	r3,12(r17)
   4f8a4:	003fc306 	br	4f7b4 <__alt_data_end+0xfffdd7b4>
   4f8a8:	8880030b 	ldhu	r2,12(r17)
   4f8ac:	88c00417 	ldw	r3,16(r17)
   4f8b0:	88000115 	stw	zero,4(r17)
   4f8b4:	10bdffcc 	andi	r2,r2,63487
   4f8b8:	8880030d 	sth	r2,12(r17)
   4f8bc:	88c00015 	stw	r3,0(r17)
   4f8c0:	003fb306 	br	4f790 <__alt_data_end+0xfffdd790>
   4f8c4:	98800017 	ldw	r2,0(r19)
   4f8c8:	103fea26 	beq	r2,zero,4f874 <__alt_data_end+0xfffdd874>
   4f8cc:	00c00744 	movi	r3,29
   4f8d0:	10c00226 	beq	r2,r3,4f8dc <__sflush_r+0x1fc>
   4f8d4:	00c00584 	movi	r3,22
   4f8d8:	10ffd21e 	bne	r2,r3,4f824 <__alt_data_end+0xfffdd824>
   4f8dc:	9c000015 	stw	r16,0(r19)
   4f8e0:	0005883a 	mov	r2,zero
   4f8e4:	003fb306 	br	4f7b4 <__alt_data_end+0xfffdd7b4>

0004f8e8 <_fflush_r>:
   4f8e8:	defffd04 	addi	sp,sp,-12
   4f8ec:	dc000115 	stw	r16,4(sp)
   4f8f0:	dfc00215 	stw	ra,8(sp)
   4f8f4:	2021883a 	mov	r16,r4
   4f8f8:	20000226 	beq	r4,zero,4f904 <_fflush_r+0x1c>
   4f8fc:	20800e17 	ldw	r2,56(r4)
   4f900:	10000c26 	beq	r2,zero,4f934 <_fflush_r+0x4c>
   4f904:	2880030f 	ldh	r2,12(r5)
   4f908:	1000051e 	bne	r2,zero,4f920 <_fflush_r+0x38>
   4f90c:	0005883a 	mov	r2,zero
   4f910:	dfc00217 	ldw	ra,8(sp)
   4f914:	dc000117 	ldw	r16,4(sp)
   4f918:	dec00304 	addi	sp,sp,12
   4f91c:	f800283a 	ret
   4f920:	8009883a 	mov	r4,r16
   4f924:	dfc00217 	ldw	ra,8(sp)
   4f928:	dc000117 	ldw	r16,4(sp)
   4f92c:	dec00304 	addi	sp,sp,12
   4f930:	004f6e01 	jmpi	4f6e0 <__sflush_r>
   4f934:	d9400015 	stw	r5,0(sp)
   4f938:	004fcc40 	call	4fcc4 <__sinit>
   4f93c:	d9400017 	ldw	r5,0(sp)
   4f940:	003ff006 	br	4f904 <__alt_data_end+0xfffdd904>

0004f944 <fflush>:
   4f944:	20000526 	beq	r4,zero,4f95c <fflush+0x18>
   4f948:	00800174 	movhi	r2,5
   4f94c:	109a5f04 	addi	r2,r2,27004
   4f950:	200b883a 	mov	r5,r4
   4f954:	11000017 	ldw	r4,0(r2)
   4f958:	004f8e81 	jmpi	4f8e8 <_fflush_r>
   4f95c:	00800174 	movhi	r2,5
   4f960:	109a5e04 	addi	r2,r2,27000
   4f964:	11000017 	ldw	r4,0(r2)
   4f968:	01400174 	movhi	r5,5
   4f96c:	297e3a04 	addi	r5,r5,-1816
   4f970:	00501ec1 	jmpi	501ec <_fwalk_reent>

0004f974 <__fp_lock>:
   4f974:	0005883a 	mov	r2,zero
   4f978:	f800283a 	ret

0004f97c <__fp_unlock>:
   4f97c:	0005883a 	mov	r2,zero
   4f980:	f800283a 	ret

0004f984 <_cleanup_r>:
   4f984:	01400174 	movhi	r5,5
   4f988:	2941de04 	addi	r5,r5,1912
   4f98c:	00501ec1 	jmpi	501ec <_fwalk_reent>

0004f990 <__sinit.part.1>:
   4f990:	defff704 	addi	sp,sp,-36
   4f994:	00c00174 	movhi	r3,5
   4f998:	dfc00815 	stw	ra,32(sp)
   4f99c:	ddc00715 	stw	r23,28(sp)
   4f9a0:	dd800615 	stw	r22,24(sp)
   4f9a4:	dd400515 	stw	r21,20(sp)
   4f9a8:	dd000415 	stw	r20,16(sp)
   4f9ac:	dcc00315 	stw	r19,12(sp)
   4f9b0:	dc800215 	stw	r18,8(sp)
   4f9b4:	dc400115 	stw	r17,4(sp)
   4f9b8:	dc000015 	stw	r16,0(sp)
   4f9bc:	18fe6104 	addi	r3,r3,-1660
   4f9c0:	24000117 	ldw	r16,4(r4)
   4f9c4:	20c00f15 	stw	r3,60(r4)
   4f9c8:	2080bb04 	addi	r2,r4,748
   4f9cc:	00c000c4 	movi	r3,3
   4f9d0:	20c0b915 	stw	r3,740(r4)
   4f9d4:	2080ba15 	stw	r2,744(r4)
   4f9d8:	2000b815 	stw	zero,736(r4)
   4f9dc:	05c00204 	movi	r23,8
   4f9e0:	00800104 	movi	r2,4
   4f9e4:	2025883a 	mov	r18,r4
   4f9e8:	b80d883a 	mov	r6,r23
   4f9ec:	81001704 	addi	r4,r16,92
   4f9f0:	000b883a 	mov	r5,zero
   4f9f4:	80000015 	stw	zero,0(r16)
   4f9f8:	80000115 	stw	zero,4(r16)
   4f9fc:	80000215 	stw	zero,8(r16)
   4fa00:	8080030d 	sth	r2,12(r16)
   4fa04:	80001915 	stw	zero,100(r16)
   4fa08:	8000038d 	sth	zero,14(r16)
   4fa0c:	80000415 	stw	zero,16(r16)
   4fa10:	80000515 	stw	zero,20(r16)
   4fa14:	80000615 	stw	zero,24(r16)
   4fa18:	00504680 	call	50468 <memset>
   4fa1c:	05800174 	movhi	r22,5
   4fa20:	94400217 	ldw	r17,8(r18)
   4fa24:	05400174 	movhi	r21,5
   4fa28:	05000174 	movhi	r20,5
   4fa2c:	04c00174 	movhi	r19,5
   4fa30:	b5816304 	addi	r22,r22,1420
   4fa34:	ad417a04 	addi	r21,r21,1512
   4fa38:	a5019904 	addi	r20,r20,1636
   4fa3c:	9cc1b004 	addi	r19,r19,1728
   4fa40:	85800815 	stw	r22,32(r16)
   4fa44:	85400915 	stw	r21,36(r16)
   4fa48:	85000a15 	stw	r20,40(r16)
   4fa4c:	84c00b15 	stw	r19,44(r16)
   4fa50:	84000715 	stw	r16,28(r16)
   4fa54:	00800284 	movi	r2,10
   4fa58:	8880030d 	sth	r2,12(r17)
   4fa5c:	00800044 	movi	r2,1
   4fa60:	89001704 	addi	r4,r17,92
   4fa64:	b80d883a 	mov	r6,r23
   4fa68:	000b883a 	mov	r5,zero
   4fa6c:	88000015 	stw	zero,0(r17)
   4fa70:	88000115 	stw	zero,4(r17)
   4fa74:	88000215 	stw	zero,8(r17)
   4fa78:	88001915 	stw	zero,100(r17)
   4fa7c:	8880038d 	sth	r2,14(r17)
   4fa80:	88000415 	stw	zero,16(r17)
   4fa84:	88000515 	stw	zero,20(r17)
   4fa88:	88000615 	stw	zero,24(r17)
   4fa8c:	00504680 	call	50468 <memset>
   4fa90:	94000317 	ldw	r16,12(r18)
   4fa94:	00800484 	movi	r2,18
   4fa98:	8c400715 	stw	r17,28(r17)
   4fa9c:	8d800815 	stw	r22,32(r17)
   4faa0:	8d400915 	stw	r21,36(r17)
   4faa4:	8d000a15 	stw	r20,40(r17)
   4faa8:	8cc00b15 	stw	r19,44(r17)
   4faac:	8080030d 	sth	r2,12(r16)
   4fab0:	00800084 	movi	r2,2
   4fab4:	80000015 	stw	zero,0(r16)
   4fab8:	80000115 	stw	zero,4(r16)
   4fabc:	80000215 	stw	zero,8(r16)
   4fac0:	80001915 	stw	zero,100(r16)
   4fac4:	8080038d 	sth	r2,14(r16)
   4fac8:	80000415 	stw	zero,16(r16)
   4facc:	80000515 	stw	zero,20(r16)
   4fad0:	80000615 	stw	zero,24(r16)
   4fad4:	81001704 	addi	r4,r16,92
   4fad8:	000b883a 	mov	r5,zero
   4fadc:	b80d883a 	mov	r6,r23
   4fae0:	00504680 	call	50468 <memset>
   4fae4:	00800044 	movi	r2,1
   4fae8:	84000715 	stw	r16,28(r16)
   4faec:	85800815 	stw	r22,32(r16)
   4faf0:	85400915 	stw	r21,36(r16)
   4faf4:	85000a15 	stw	r20,40(r16)
   4faf8:	84c00b15 	stw	r19,44(r16)
   4fafc:	90800e15 	stw	r2,56(r18)
   4fb00:	dfc00817 	ldw	ra,32(sp)
   4fb04:	ddc00717 	ldw	r23,28(sp)
   4fb08:	dd800617 	ldw	r22,24(sp)
   4fb0c:	dd400517 	ldw	r21,20(sp)
   4fb10:	dd000417 	ldw	r20,16(sp)
   4fb14:	dcc00317 	ldw	r19,12(sp)
   4fb18:	dc800217 	ldw	r18,8(sp)
   4fb1c:	dc400117 	ldw	r17,4(sp)
   4fb20:	dc000017 	ldw	r16,0(sp)
   4fb24:	dec00904 	addi	sp,sp,36
   4fb28:	f800283a 	ret

0004fb2c <__sfmoreglue>:
   4fb2c:	defffc04 	addi	sp,sp,-16
   4fb30:	dc400115 	stw	r17,4(sp)
   4fb34:	2c7fffc4 	addi	r17,r5,-1
   4fb38:	8c401a24 	muli	r17,r17,104
   4fb3c:	dc800215 	stw	r18,8(sp)
   4fb40:	2825883a 	mov	r18,r5
   4fb44:	89401d04 	addi	r5,r17,116
   4fb48:	dc000015 	stw	r16,0(sp)
   4fb4c:	dfc00315 	stw	ra,12(sp)
   4fb50:	004c12c0 	call	4c12c <_malloc_r>
   4fb54:	1021883a 	mov	r16,r2
   4fb58:	10000726 	beq	r2,zero,4fb78 <__sfmoreglue+0x4c>
   4fb5c:	11000304 	addi	r4,r2,12
   4fb60:	10000015 	stw	zero,0(r2)
   4fb64:	14800115 	stw	r18,4(r2)
   4fb68:	11000215 	stw	r4,8(r2)
   4fb6c:	000b883a 	mov	r5,zero
   4fb70:	89801a04 	addi	r6,r17,104
   4fb74:	00504680 	call	50468 <memset>
   4fb78:	8005883a 	mov	r2,r16
   4fb7c:	dfc00317 	ldw	ra,12(sp)
   4fb80:	dc800217 	ldw	r18,8(sp)
   4fb84:	dc400117 	ldw	r17,4(sp)
   4fb88:	dc000017 	ldw	r16,0(sp)
   4fb8c:	dec00404 	addi	sp,sp,16
   4fb90:	f800283a 	ret

0004fb94 <__sfp>:
   4fb94:	00800174 	movhi	r2,5
   4fb98:	defffb04 	addi	sp,sp,-20
   4fb9c:	109a5e04 	addi	r2,r2,27000
   4fba0:	dc800215 	stw	r18,8(sp)
   4fba4:	14800017 	ldw	r18,0(r2)
   4fba8:	dcc00315 	stw	r19,12(sp)
   4fbac:	dfc00415 	stw	ra,16(sp)
   4fbb0:	90800e17 	ldw	r2,56(r18)
   4fbb4:	dc400115 	stw	r17,4(sp)
   4fbb8:	dc000015 	stw	r16,0(sp)
   4fbbc:	2027883a 	mov	r19,r4
   4fbc0:	1000021e 	bne	r2,zero,4fbcc <__sfp+0x38>
   4fbc4:	9009883a 	mov	r4,r18
   4fbc8:	004f9900 	call	4f990 <__sinit.part.1>
   4fbcc:	9480b804 	addi	r18,r18,736
   4fbd0:	047fffc4 	movi	r17,-1
   4fbd4:	91400117 	ldw	r5,4(r18)
   4fbd8:	94000217 	ldw	r16,8(r18)
   4fbdc:	297fffc4 	addi	r5,r5,-1
   4fbe0:	28000a16 	blt	r5,zero,4fc0c <__sfp+0x78>
   4fbe4:	8080030f 	ldh	r2,12(r16)
   4fbe8:	10000c26 	beq	r2,zero,4fc1c <__sfp+0x88>
   4fbec:	80c01d04 	addi	r3,r16,116
   4fbf0:	00000206 	br	4fbfc <__sfp+0x68>
   4fbf4:	18bfe60f 	ldh	r2,-104(r3)
   4fbf8:	10000826 	beq	r2,zero,4fc1c <__sfp+0x88>
   4fbfc:	297fffc4 	addi	r5,r5,-1
   4fc00:	1c3ffd04 	addi	r16,r3,-12
   4fc04:	18c01a04 	addi	r3,r3,104
   4fc08:	2c7ffa1e 	bne	r5,r17,4fbf4 <__alt_data_end+0xfffddbf4>
   4fc0c:	90800017 	ldw	r2,0(r18)
   4fc10:	10001d26 	beq	r2,zero,4fc88 <__sfp+0xf4>
   4fc14:	1025883a 	mov	r18,r2
   4fc18:	003fee06 	br	4fbd4 <__alt_data_end+0xfffddbd4>
   4fc1c:	00bfffc4 	movi	r2,-1
   4fc20:	8080038d 	sth	r2,14(r16)
   4fc24:	00800044 	movi	r2,1
   4fc28:	8080030d 	sth	r2,12(r16)
   4fc2c:	80001915 	stw	zero,100(r16)
   4fc30:	80000015 	stw	zero,0(r16)
   4fc34:	80000215 	stw	zero,8(r16)
   4fc38:	80000115 	stw	zero,4(r16)
   4fc3c:	80000415 	stw	zero,16(r16)
   4fc40:	80000515 	stw	zero,20(r16)
   4fc44:	80000615 	stw	zero,24(r16)
   4fc48:	81001704 	addi	r4,r16,92
   4fc4c:	000b883a 	mov	r5,zero
   4fc50:	01800204 	movi	r6,8
   4fc54:	00504680 	call	50468 <memset>
   4fc58:	8005883a 	mov	r2,r16
   4fc5c:	80000c15 	stw	zero,48(r16)
   4fc60:	80000d15 	stw	zero,52(r16)
   4fc64:	80001115 	stw	zero,68(r16)
   4fc68:	80001215 	stw	zero,72(r16)
   4fc6c:	dfc00417 	ldw	ra,16(sp)
   4fc70:	dcc00317 	ldw	r19,12(sp)
   4fc74:	dc800217 	ldw	r18,8(sp)
   4fc78:	dc400117 	ldw	r17,4(sp)
   4fc7c:	dc000017 	ldw	r16,0(sp)
   4fc80:	dec00504 	addi	sp,sp,20
   4fc84:	f800283a 	ret
   4fc88:	9809883a 	mov	r4,r19
   4fc8c:	01400104 	movi	r5,4
   4fc90:	004fb2c0 	call	4fb2c <__sfmoreglue>
   4fc94:	90800015 	stw	r2,0(r18)
   4fc98:	103fde1e 	bne	r2,zero,4fc14 <__alt_data_end+0xfffddc14>
   4fc9c:	00800304 	movi	r2,12
   4fca0:	98800015 	stw	r2,0(r19)
   4fca4:	0005883a 	mov	r2,zero
   4fca8:	003ff006 	br	4fc6c <__alt_data_end+0xfffddc6c>

0004fcac <_cleanup>:
   4fcac:	00800174 	movhi	r2,5
   4fcb0:	109a5e04 	addi	r2,r2,27000
   4fcb4:	11000017 	ldw	r4,0(r2)
   4fcb8:	01400174 	movhi	r5,5
   4fcbc:	2941de04 	addi	r5,r5,1912
   4fcc0:	00501ec1 	jmpi	501ec <_fwalk_reent>

0004fcc4 <__sinit>:
   4fcc4:	20800e17 	ldw	r2,56(r4)
   4fcc8:	10000126 	beq	r2,zero,4fcd0 <__sinit+0xc>
   4fccc:	f800283a 	ret
   4fcd0:	004f9901 	jmpi	4f990 <__sinit.part.1>

0004fcd4 <__sfp_lock_acquire>:
   4fcd4:	f800283a 	ret

0004fcd8 <__sfp_lock_release>:
   4fcd8:	f800283a 	ret

0004fcdc <__sinit_lock_acquire>:
   4fcdc:	f800283a 	ret

0004fce0 <__sinit_lock_release>:
   4fce0:	f800283a 	ret

0004fce4 <__fp_lock_all>:
   4fce4:	00800174 	movhi	r2,5
   4fce8:	109a5f04 	addi	r2,r2,27004
   4fcec:	11000017 	ldw	r4,0(r2)
   4fcf0:	01400174 	movhi	r5,5
   4fcf4:	297e5d04 	addi	r5,r5,-1676
   4fcf8:	00501281 	jmpi	50128 <_fwalk>

0004fcfc <__fp_unlock_all>:
   4fcfc:	00800174 	movhi	r2,5
   4fd00:	109a5f04 	addi	r2,r2,27004
   4fd04:	11000017 	ldw	r4,0(r2)
   4fd08:	01400174 	movhi	r5,5
   4fd0c:	297e5f04 	addi	r5,r5,-1668
   4fd10:	00501281 	jmpi	50128 <_fwalk>

0004fd14 <_malloc_trim_r>:
   4fd14:	defffb04 	addi	sp,sp,-20
   4fd18:	dcc00315 	stw	r19,12(sp)
   4fd1c:	04c00174 	movhi	r19,5
   4fd20:	dc800215 	stw	r18,8(sp)
   4fd24:	dc400115 	stw	r17,4(sp)
   4fd28:	dc000015 	stw	r16,0(sp)
   4fd2c:	dfc00415 	stw	ra,16(sp)
   4fd30:	2821883a 	mov	r16,r5
   4fd34:	9cd49d04 	addi	r19,r19,21108
   4fd38:	2025883a 	mov	r18,r4
   4fd3c:	0051e240 	call	51e24 <__malloc_lock>
   4fd40:	98800217 	ldw	r2,8(r19)
   4fd44:	14400117 	ldw	r17,4(r2)
   4fd48:	00bfff04 	movi	r2,-4
   4fd4c:	88a2703a 	and	r17,r17,r2
   4fd50:	8c21c83a 	sub	r16,r17,r16
   4fd54:	8403fbc4 	addi	r16,r16,4079
   4fd58:	8020d33a 	srli	r16,r16,12
   4fd5c:	0083ffc4 	movi	r2,4095
   4fd60:	843fffc4 	addi	r16,r16,-1
   4fd64:	8020933a 	slli	r16,r16,12
   4fd68:	1400060e 	bge	r2,r16,4fd84 <_malloc_trim_r+0x70>
   4fd6c:	9009883a 	mov	r4,r18
   4fd70:	000b883a 	mov	r5,zero
   4fd74:	004e1cc0 	call	4e1cc <_sbrk_r>
   4fd78:	98c00217 	ldw	r3,8(r19)
   4fd7c:	1c47883a 	add	r3,r3,r17
   4fd80:	10c00a26 	beq	r2,r3,4fdac <_malloc_trim_r+0x98>
   4fd84:	9009883a 	mov	r4,r18
   4fd88:	0051e440 	call	51e44 <__malloc_unlock>
   4fd8c:	0005883a 	mov	r2,zero
   4fd90:	dfc00417 	ldw	ra,16(sp)
   4fd94:	dcc00317 	ldw	r19,12(sp)
   4fd98:	dc800217 	ldw	r18,8(sp)
   4fd9c:	dc400117 	ldw	r17,4(sp)
   4fda0:	dc000017 	ldw	r16,0(sp)
   4fda4:	dec00504 	addi	sp,sp,20
   4fda8:	f800283a 	ret
   4fdac:	9009883a 	mov	r4,r18
   4fdb0:	040bc83a 	sub	r5,zero,r16
   4fdb4:	004e1cc0 	call	4e1cc <_sbrk_r>
   4fdb8:	00ffffc4 	movi	r3,-1
   4fdbc:	10c00d26 	beq	r2,r3,4fdf4 <_malloc_trim_r+0xe0>
   4fdc0:	00c001b4 	movhi	r3,6
   4fdc4:	18e1ad04 	addi	r3,r3,-31052
   4fdc8:	18800017 	ldw	r2,0(r3)
   4fdcc:	99000217 	ldw	r4,8(r19)
   4fdd0:	8c23c83a 	sub	r17,r17,r16
   4fdd4:	8c400054 	ori	r17,r17,1
   4fdd8:	1421c83a 	sub	r16,r2,r16
   4fddc:	24400115 	stw	r17,4(r4)
   4fde0:	9009883a 	mov	r4,r18
   4fde4:	1c000015 	stw	r16,0(r3)
   4fde8:	0051e440 	call	51e44 <__malloc_unlock>
   4fdec:	00800044 	movi	r2,1
   4fdf0:	003fe706 	br	4fd90 <__alt_data_end+0xfffddd90>
   4fdf4:	9009883a 	mov	r4,r18
   4fdf8:	000b883a 	mov	r5,zero
   4fdfc:	004e1cc0 	call	4e1cc <_sbrk_r>
   4fe00:	99000217 	ldw	r4,8(r19)
   4fe04:	014003c4 	movi	r5,15
   4fe08:	1107c83a 	sub	r3,r2,r4
   4fe0c:	28ffdd0e 	bge	r5,r3,4fd84 <__alt_data_end+0xfffddd84>
   4fe10:	01400174 	movhi	r5,5
   4fe14:	295a6104 	addi	r5,r5,27012
   4fe18:	29400017 	ldw	r5,0(r5)
   4fe1c:	18c00054 	ori	r3,r3,1
   4fe20:	20c00115 	stw	r3,4(r4)
   4fe24:	00c001b4 	movhi	r3,6
   4fe28:	1145c83a 	sub	r2,r2,r5
   4fe2c:	18e1ad04 	addi	r3,r3,-31052
   4fe30:	18800015 	stw	r2,0(r3)
   4fe34:	003fd306 	br	4fd84 <__alt_data_end+0xfffddd84>

0004fe38 <_free_r>:
   4fe38:	28004c26 	beq	r5,zero,4ff6c <_free_r+0x134>
   4fe3c:	defffd04 	addi	sp,sp,-12
   4fe40:	dc400115 	stw	r17,4(sp)
   4fe44:	dc000015 	stw	r16,0(sp)
   4fe48:	2023883a 	mov	r17,r4
   4fe4c:	2821883a 	mov	r16,r5
   4fe50:	dfc00215 	stw	ra,8(sp)
   4fe54:	0051e240 	call	51e24 <__malloc_lock>
   4fe58:	813fff17 	ldw	r4,-4(r16)
   4fe5c:	00bfff84 	movi	r2,-2
   4fe60:	02400174 	movhi	r9,5
   4fe64:	81bffe04 	addi	r6,r16,-8
   4fe68:	2084703a 	and	r2,r4,r2
   4fe6c:	4a549d04 	addi	r9,r9,21108
   4fe70:	308b883a 	add	r5,r6,r2
   4fe74:	2a000117 	ldw	r8,4(r5)
   4fe78:	49c00217 	ldw	r7,8(r9)
   4fe7c:	00ffff04 	movi	r3,-4
   4fe80:	40c6703a 	and	r3,r8,r3
   4fe84:	39405326 	beq	r7,r5,4ffd4 <_free_r+0x19c>
   4fe88:	28c00115 	stw	r3,4(r5)
   4fe8c:	2100004c 	andi	r4,r4,1
   4fe90:	2000091e 	bne	r4,zero,4feb8 <_free_r+0x80>
   4fe94:	81fffe17 	ldw	r7,-8(r16)
   4fe98:	4a000204 	addi	r8,r9,8
   4fe9c:	31cdc83a 	sub	r6,r6,r7
   4fea0:	31000217 	ldw	r4,8(r6)
   4fea4:	11c5883a 	add	r2,r2,r7
   4fea8:	22006126 	beq	r4,r8,50030 <_free_r+0x1f8>
   4feac:	31c00317 	ldw	r7,12(r6)
   4feb0:	21c00315 	stw	r7,12(r4)
   4feb4:	39000215 	stw	r4,8(r7)
   4feb8:	28c9883a 	add	r4,r5,r3
   4febc:	21c00117 	ldw	r7,4(r4)
   4fec0:	39c0004c 	andi	r7,r7,1
   4fec4:	38000d1e 	bne	r7,zero,4fefc <_free_r+0xc4>
   4fec8:	29000217 	ldw	r4,8(r5)
   4fecc:	10c5883a 	add	r2,r2,r3
   4fed0:	00c00174 	movhi	r3,5
   4fed4:	18d49f04 	addi	r3,r3,21116
   4fed8:	20c07526 	beq	r4,r3,500b0 <_free_r+0x278>
   4fedc:	29c00317 	ldw	r7,12(r5)
   4fee0:	11400054 	ori	r5,r2,1
   4fee4:	3087883a 	add	r3,r6,r2
   4fee8:	21c00315 	stw	r7,12(r4)
   4feec:	39000215 	stw	r4,8(r7)
   4fef0:	31400115 	stw	r5,4(r6)
   4fef4:	18800015 	stw	r2,0(r3)
   4fef8:	00000406 	br	4ff0c <_free_r+0xd4>
   4fefc:	10c00054 	ori	r3,r2,1
   4ff00:	30c00115 	stw	r3,4(r6)
   4ff04:	3087883a 	add	r3,r6,r2
   4ff08:	18800015 	stw	r2,0(r3)
   4ff0c:	00c07fc4 	movi	r3,511
   4ff10:	18801736 	bltu	r3,r2,4ff70 <_free_r+0x138>
   4ff14:	1004d0fa 	srli	r2,r2,3
   4ff18:	01400044 	movi	r5,1
   4ff1c:	49000117 	ldw	r4,4(r9)
   4ff20:	1087883a 	add	r3,r2,r2
   4ff24:	18c7883a 	add	r3,r3,r3
   4ff28:	1005d0ba 	srai	r2,r2,2
   4ff2c:	18c7883a 	add	r3,r3,r3
   4ff30:	1a47883a 	add	r3,r3,r9
   4ff34:	19c00217 	ldw	r7,8(r3)
   4ff38:	2884983a 	sll	r2,r5,r2
   4ff3c:	30c00315 	stw	r3,12(r6)
   4ff40:	31c00215 	stw	r7,8(r6)
   4ff44:	1104b03a 	or	r2,r2,r4
   4ff48:	19800215 	stw	r6,8(r3)
   4ff4c:	48800115 	stw	r2,4(r9)
   4ff50:	39800315 	stw	r6,12(r7)
   4ff54:	8809883a 	mov	r4,r17
   4ff58:	dfc00217 	ldw	ra,8(sp)
   4ff5c:	dc400117 	ldw	r17,4(sp)
   4ff60:	dc000017 	ldw	r16,0(sp)
   4ff64:	dec00304 	addi	sp,sp,12
   4ff68:	0051e441 	jmpi	51e44 <__malloc_unlock>
   4ff6c:	f800283a 	ret
   4ff70:	1006d27a 	srli	r3,r2,9
   4ff74:	01000104 	movi	r4,4
   4ff78:	20c04036 	bltu	r4,r3,5007c <_free_r+0x244>
   4ff7c:	1006d1ba 	srli	r3,r2,6
   4ff80:	19400e04 	addi	r5,r3,56
   4ff84:	2947883a 	add	r3,r5,r5
   4ff88:	18c7883a 	add	r3,r3,r3
   4ff8c:	18c7883a 	add	r3,r3,r3
   4ff90:	1a49883a 	add	r4,r3,r9
   4ff94:	20c00217 	ldw	r3,8(r4)
   4ff98:	01c00174 	movhi	r7,5
   4ff9c:	39d49d04 	addi	r7,r7,21108
   4ffa0:	19003b26 	beq	r3,r4,50090 <_free_r+0x258>
   4ffa4:	01ffff04 	movi	r7,-4
   4ffa8:	19400117 	ldw	r5,4(r3)
   4ffac:	29ca703a 	and	r5,r5,r7
   4ffb0:	1140022e 	bgeu	r2,r5,4ffbc <_free_r+0x184>
   4ffb4:	18c00217 	ldw	r3,8(r3)
   4ffb8:	20fffb1e 	bne	r4,r3,4ffa8 <__alt_data_end+0xfffddfa8>
   4ffbc:	18800317 	ldw	r2,12(r3)
   4ffc0:	30800315 	stw	r2,12(r6)
   4ffc4:	30c00215 	stw	r3,8(r6)
   4ffc8:	11800215 	stw	r6,8(r2)
   4ffcc:	19800315 	stw	r6,12(r3)
   4ffd0:	003fe006 	br	4ff54 <__alt_data_end+0xfffddf54>
   4ffd4:	2100004c 	andi	r4,r4,1
   4ffd8:	1885883a 	add	r2,r3,r2
   4ffdc:	2000071e 	bne	r4,zero,4fffc <_free_r+0x1c4>
   4ffe0:	817ffe17 	ldw	r5,-8(r16)
   4ffe4:	314dc83a 	sub	r6,r6,r5
   4ffe8:	30c00317 	ldw	r3,12(r6)
   4ffec:	31000217 	ldw	r4,8(r6)
   4fff0:	1145883a 	add	r2,r2,r5
   4fff4:	20c00315 	stw	r3,12(r4)
   4fff8:	19000215 	stw	r4,8(r3)
   4fffc:	10c00054 	ori	r3,r2,1
   50000:	30c00115 	stw	r3,4(r6)
   50004:	00c00174 	movhi	r3,5
   50008:	18da6204 	addi	r3,r3,27016
   5000c:	18c00017 	ldw	r3,0(r3)
   50010:	49800215 	stw	r6,8(r9)
   50014:	10ffcf36 	bltu	r2,r3,4ff54 <__alt_data_end+0xfffddf54>
   50018:	008001b4 	movhi	r2,6
   5001c:	10a1a504 	addi	r2,r2,-31084
   50020:	11400017 	ldw	r5,0(r2)
   50024:	8809883a 	mov	r4,r17
   50028:	004fd140 	call	4fd14 <_malloc_trim_r>
   5002c:	003fc906 	br	4ff54 <__alt_data_end+0xfffddf54>
   50030:	28c9883a 	add	r4,r5,r3
   50034:	21000117 	ldw	r4,4(r4)
   50038:	2100004c 	andi	r4,r4,1
   5003c:	20000a1e 	bne	r4,zero,50068 <_free_r+0x230>
   50040:	29000317 	ldw	r4,12(r5)
   50044:	29400217 	ldw	r5,8(r5)
   50048:	10c5883a 	add	r2,r2,r3
   5004c:	10c00054 	ori	r3,r2,1
   50050:	29000315 	stw	r4,12(r5)
   50054:	21400215 	stw	r5,8(r4)
   50058:	30c00115 	stw	r3,4(r6)
   5005c:	308d883a 	add	r6,r6,r2
   50060:	30800015 	stw	r2,0(r6)
   50064:	003fbb06 	br	4ff54 <__alt_data_end+0xfffddf54>
   50068:	10c00054 	ori	r3,r2,1
   5006c:	30c00115 	stw	r3,4(r6)
   50070:	308d883a 	add	r6,r6,r2
   50074:	30800015 	stw	r2,0(r6)
   50078:	003fb606 	br	4ff54 <__alt_data_end+0xfffddf54>
   5007c:	01000504 	movi	r4,20
   50080:	20c01436 	bltu	r4,r3,500d4 <_free_r+0x29c>
   50084:	194016c4 	addi	r5,r3,91
   50088:	2947883a 	add	r3,r5,r5
   5008c:	003fbe06 	br	4ff88 <__alt_data_end+0xfffddf88>
   50090:	280bd0ba 	srai	r5,r5,2
   50094:	00800044 	movi	r2,1
   50098:	39000117 	ldw	r4,4(r7)
   5009c:	114a983a 	sll	r5,r2,r5
   500a0:	1805883a 	mov	r2,r3
   500a4:	2908b03a 	or	r4,r5,r4
   500a8:	39000115 	stw	r4,4(r7)
   500ac:	003fc406 	br	4ffc0 <__alt_data_end+0xfffddfc0>
   500b0:	49800515 	stw	r6,20(r9)
   500b4:	49800415 	stw	r6,16(r9)
   500b8:	10c00054 	ori	r3,r2,1
   500bc:	31000315 	stw	r4,12(r6)
   500c0:	31000215 	stw	r4,8(r6)
   500c4:	30c00115 	stw	r3,4(r6)
   500c8:	308d883a 	add	r6,r6,r2
   500cc:	30800015 	stw	r2,0(r6)
   500d0:	003fa006 	br	4ff54 <__alt_data_end+0xfffddf54>
   500d4:	01001504 	movi	r4,84
   500d8:	20c00436 	bltu	r4,r3,500ec <_free_r+0x2b4>
   500dc:	1006d33a 	srli	r3,r2,12
   500e0:	19401b84 	addi	r5,r3,110
   500e4:	2947883a 	add	r3,r5,r5
   500e8:	003fa706 	br	4ff88 <__alt_data_end+0xfffddf88>
   500ec:	01005504 	movi	r4,340
   500f0:	20c00436 	bltu	r4,r3,50104 <_free_r+0x2cc>
   500f4:	1006d3fa 	srli	r3,r2,15
   500f8:	19401dc4 	addi	r5,r3,119
   500fc:	2947883a 	add	r3,r5,r5
   50100:	003fa106 	br	4ff88 <__alt_data_end+0xfffddf88>
   50104:	01015504 	movi	r4,1364
   50108:	20c00436 	bltu	r4,r3,5011c <_free_r+0x2e4>
   5010c:	1006d4ba 	srli	r3,r2,18
   50110:	19401f04 	addi	r5,r3,124
   50114:	2947883a 	add	r3,r5,r5
   50118:	003f9b06 	br	4ff88 <__alt_data_end+0xfffddf88>
   5011c:	00c03f04 	movi	r3,252
   50120:	01401f84 	movi	r5,126
   50124:	003f9806 	br	4ff88 <__alt_data_end+0xfffddf88>

00050128 <_fwalk>:
   50128:	defff704 	addi	sp,sp,-36
   5012c:	dd000415 	stw	r20,16(sp)
   50130:	dfc00815 	stw	ra,32(sp)
   50134:	ddc00715 	stw	r23,28(sp)
   50138:	dd800615 	stw	r22,24(sp)
   5013c:	dd400515 	stw	r21,20(sp)
   50140:	dcc00315 	stw	r19,12(sp)
   50144:	dc800215 	stw	r18,8(sp)
   50148:	dc400115 	stw	r17,4(sp)
   5014c:	dc000015 	stw	r16,0(sp)
   50150:	2500b804 	addi	r20,r4,736
   50154:	a0002326 	beq	r20,zero,501e4 <_fwalk+0xbc>
   50158:	282b883a 	mov	r21,r5
   5015c:	002f883a 	mov	r23,zero
   50160:	05800044 	movi	r22,1
   50164:	04ffffc4 	movi	r19,-1
   50168:	a4400117 	ldw	r17,4(r20)
   5016c:	a4800217 	ldw	r18,8(r20)
   50170:	8c7fffc4 	addi	r17,r17,-1
   50174:	88000d16 	blt	r17,zero,501ac <_fwalk+0x84>
   50178:	94000304 	addi	r16,r18,12
   5017c:	94800384 	addi	r18,r18,14
   50180:	80c0000b 	ldhu	r3,0(r16)
   50184:	8c7fffc4 	addi	r17,r17,-1
   50188:	813ffd04 	addi	r4,r16,-12
   5018c:	b0c0042e 	bgeu	r22,r3,501a0 <_fwalk+0x78>
   50190:	90c0000f 	ldh	r3,0(r18)
   50194:	1cc00226 	beq	r3,r19,501a0 <_fwalk+0x78>
   50198:	a83ee83a 	callr	r21
   5019c:	b8aeb03a 	or	r23,r23,r2
   501a0:	84001a04 	addi	r16,r16,104
   501a4:	94801a04 	addi	r18,r18,104
   501a8:	8cfff51e 	bne	r17,r19,50180 <__alt_data_end+0xfffde180>
   501ac:	a5000017 	ldw	r20,0(r20)
   501b0:	a03fed1e 	bne	r20,zero,50168 <__alt_data_end+0xfffde168>
   501b4:	b805883a 	mov	r2,r23
   501b8:	dfc00817 	ldw	ra,32(sp)
   501bc:	ddc00717 	ldw	r23,28(sp)
   501c0:	dd800617 	ldw	r22,24(sp)
   501c4:	dd400517 	ldw	r21,20(sp)
   501c8:	dd000417 	ldw	r20,16(sp)
   501cc:	dcc00317 	ldw	r19,12(sp)
   501d0:	dc800217 	ldw	r18,8(sp)
   501d4:	dc400117 	ldw	r17,4(sp)
   501d8:	dc000017 	ldw	r16,0(sp)
   501dc:	dec00904 	addi	sp,sp,36
   501e0:	f800283a 	ret
   501e4:	002f883a 	mov	r23,zero
   501e8:	003ff206 	br	501b4 <__alt_data_end+0xfffde1b4>

000501ec <_fwalk_reent>:
   501ec:	defff704 	addi	sp,sp,-36
   501f0:	dd400515 	stw	r21,20(sp)
   501f4:	dfc00815 	stw	ra,32(sp)
   501f8:	ddc00715 	stw	r23,28(sp)
   501fc:	dd800615 	stw	r22,24(sp)
   50200:	dd000415 	stw	r20,16(sp)
   50204:	dcc00315 	stw	r19,12(sp)
   50208:	dc800215 	stw	r18,8(sp)
   5020c:	dc400115 	stw	r17,4(sp)
   50210:	dc000015 	stw	r16,0(sp)
   50214:	2540b804 	addi	r21,r4,736
   50218:	a8002326 	beq	r21,zero,502a8 <_fwalk_reent+0xbc>
   5021c:	2829883a 	mov	r20,r5
   50220:	202d883a 	mov	r22,r4
   50224:	002f883a 	mov	r23,zero
   50228:	04c00044 	movi	r19,1
   5022c:	04bfffc4 	movi	r18,-1
   50230:	ac400117 	ldw	r17,4(r21)
   50234:	ac000217 	ldw	r16,8(r21)
   50238:	8c7fffc4 	addi	r17,r17,-1
   5023c:	88000c16 	blt	r17,zero,50270 <_fwalk_reent+0x84>
   50240:	84000304 	addi	r16,r16,12
   50244:	80c0000b 	ldhu	r3,0(r16)
   50248:	8c7fffc4 	addi	r17,r17,-1
   5024c:	817ffd04 	addi	r5,r16,-12
   50250:	98c0052e 	bgeu	r19,r3,50268 <_fwalk_reent+0x7c>
   50254:	80c0008f 	ldh	r3,2(r16)
   50258:	b009883a 	mov	r4,r22
   5025c:	1c800226 	beq	r3,r18,50268 <_fwalk_reent+0x7c>
   50260:	a03ee83a 	callr	r20
   50264:	b8aeb03a 	or	r23,r23,r2
   50268:	84001a04 	addi	r16,r16,104
   5026c:	8cbff51e 	bne	r17,r18,50244 <__alt_data_end+0xfffde244>
   50270:	ad400017 	ldw	r21,0(r21)
   50274:	a83fee1e 	bne	r21,zero,50230 <__alt_data_end+0xfffde230>
   50278:	b805883a 	mov	r2,r23
   5027c:	dfc00817 	ldw	ra,32(sp)
   50280:	ddc00717 	ldw	r23,28(sp)
   50284:	dd800617 	ldw	r22,24(sp)
   50288:	dd400517 	ldw	r21,20(sp)
   5028c:	dd000417 	ldw	r20,16(sp)
   50290:	dcc00317 	ldw	r19,12(sp)
   50294:	dc800217 	ldw	r18,8(sp)
   50298:	dc400117 	ldw	r17,4(sp)
   5029c:	dc000017 	ldw	r16,0(sp)
   502a0:	dec00904 	addi	sp,sp,36
   502a4:	f800283a 	ret
   502a8:	002f883a 	mov	r23,zero
   502ac:	003ff206 	br	50278 <__alt_data_end+0xfffde278>

000502b0 <__smakebuf_r>:
   502b0:	2880030b 	ldhu	r2,12(r5)
   502b4:	10c0008c 	andi	r3,r2,2
   502b8:	1800401e 	bne	r3,zero,503bc <__smakebuf_r+0x10c>
   502bc:	deffec04 	addi	sp,sp,-80
   502c0:	dc000f15 	stw	r16,60(sp)
   502c4:	2821883a 	mov	r16,r5
   502c8:	2940038f 	ldh	r5,14(r5)
   502cc:	dc401015 	stw	r17,64(sp)
   502d0:	dfc01315 	stw	ra,76(sp)
   502d4:	dcc01215 	stw	r19,72(sp)
   502d8:	dc801115 	stw	r18,68(sp)
   502dc:	2023883a 	mov	r17,r4
   502e0:	28001b16 	blt	r5,zero,50350 <__smakebuf_r+0xa0>
   502e4:	d80d883a 	mov	r6,sp
   502e8:	005087c0 	call	5087c <_fstat_r>
   502ec:	10001716 	blt	r2,zero,5034c <__smakebuf_r+0x9c>
   502f0:	d8800117 	ldw	r2,4(sp)
   502f4:	00e00014 	movui	r3,32768
   502f8:	10bc000c 	andi	r2,r2,61440
   502fc:	10c03726 	beq	r2,r3,503dc <__smakebuf_r+0x12c>
   50300:	80c0030b 	ldhu	r3,12(r16)
   50304:	18c20014 	ori	r3,r3,2048
   50308:	80c0030d 	sth	r3,12(r16)
   5030c:	00c80004 	movi	r3,8192
   50310:	10c03c1e 	bne	r2,r3,50404 <__smakebuf_r+0x154>
   50314:	8140038f 	ldh	r5,14(r16)
   50318:	8809883a 	mov	r4,r17
   5031c:	00508d40 	call	508d4 <_isatty_r>
   50320:	10004e26 	beq	r2,zero,5045c <__smakebuf_r+0x1ac>
   50324:	8080030b 	ldhu	r2,12(r16)
   50328:	04c00044 	movi	r19,1
   5032c:	80c010c4 	addi	r3,r16,67
   50330:	14c4b03a 	or	r2,r2,r19
   50334:	8080030d 	sth	r2,12(r16)
   50338:	80c00015 	stw	r3,0(r16)
   5033c:	80c00415 	stw	r3,16(r16)
   50340:	84c00515 	stw	r19,20(r16)
   50344:	04810004 	movi	r18,1024
   50348:	00000706 	br	50368 <__smakebuf_r+0xb8>
   5034c:	8080030b 	ldhu	r2,12(r16)
   50350:	10c0200c 	andi	r3,r2,128
   50354:	18001f1e 	bne	r3,zero,503d4 <__smakebuf_r+0x124>
   50358:	04810004 	movi	r18,1024
   5035c:	10820014 	ori	r2,r2,2048
   50360:	8080030d 	sth	r2,12(r16)
   50364:	0027883a 	mov	r19,zero
   50368:	8809883a 	mov	r4,r17
   5036c:	900b883a 	mov	r5,r18
   50370:	004c12c0 	call	4c12c <_malloc_r>
   50374:	10002e26 	beq	r2,zero,50430 <__smakebuf_r+0x180>
   50378:	80c0030b 	ldhu	r3,12(r16)
   5037c:	01000174 	movhi	r4,5
   50380:	213e6104 	addi	r4,r4,-1660
   50384:	89000f15 	stw	r4,60(r17)
   50388:	18c02014 	ori	r3,r3,128
   5038c:	80c0030d 	sth	r3,12(r16)
   50390:	80800015 	stw	r2,0(r16)
   50394:	80800415 	stw	r2,16(r16)
   50398:	84800515 	stw	r18,20(r16)
   5039c:	98001c1e 	bne	r19,zero,50410 <__smakebuf_r+0x160>
   503a0:	dfc01317 	ldw	ra,76(sp)
   503a4:	dcc01217 	ldw	r19,72(sp)
   503a8:	dc801117 	ldw	r18,68(sp)
   503ac:	dc401017 	ldw	r17,64(sp)
   503b0:	dc000f17 	ldw	r16,60(sp)
   503b4:	dec01404 	addi	sp,sp,80
   503b8:	f800283a 	ret
   503bc:	288010c4 	addi	r2,r5,67
   503c0:	28800015 	stw	r2,0(r5)
   503c4:	28800415 	stw	r2,16(r5)
   503c8:	00800044 	movi	r2,1
   503cc:	28800515 	stw	r2,20(r5)
   503d0:	f800283a 	ret
   503d4:	04801004 	movi	r18,64
   503d8:	003fe006 	br	5035c <__alt_data_end+0xfffde35c>
   503dc:	81000a17 	ldw	r4,40(r16)
   503e0:	00c00174 	movhi	r3,5
   503e4:	18c19904 	addi	r3,r3,1636
   503e8:	20ffc51e 	bne	r4,r3,50300 <__alt_data_end+0xfffde300>
   503ec:	80c0030b 	ldhu	r3,12(r16)
   503f0:	01010004 	movi	r4,1024
   503f4:	81001315 	stw	r4,76(r16)
   503f8:	1906b03a 	or	r3,r3,r4
   503fc:	80c0030d 	sth	r3,12(r16)
   50400:	003fc206 	br	5030c <__alt_data_end+0xfffde30c>
   50404:	0027883a 	mov	r19,zero
   50408:	04810004 	movi	r18,1024
   5040c:	003fd606 	br	50368 <__alt_data_end+0xfffde368>
   50410:	8140038f 	ldh	r5,14(r16)
   50414:	8809883a 	mov	r4,r17
   50418:	00508d40 	call	508d4 <_isatty_r>
   5041c:	103fe026 	beq	r2,zero,503a0 <__alt_data_end+0xfffde3a0>
   50420:	8080030b 	ldhu	r2,12(r16)
   50424:	10800054 	ori	r2,r2,1
   50428:	8080030d 	sth	r2,12(r16)
   5042c:	003fdc06 	br	503a0 <__alt_data_end+0xfffde3a0>
   50430:	8080030b 	ldhu	r2,12(r16)
   50434:	10c0800c 	andi	r3,r2,512
   50438:	183fd91e 	bne	r3,zero,503a0 <__alt_data_end+0xfffde3a0>
   5043c:	10800094 	ori	r2,r2,2
   50440:	80c010c4 	addi	r3,r16,67
   50444:	8080030d 	sth	r2,12(r16)
   50448:	00800044 	movi	r2,1
   5044c:	80c00015 	stw	r3,0(r16)
   50450:	80c00415 	stw	r3,16(r16)
   50454:	80800515 	stw	r2,20(r16)
   50458:	003fd106 	br	503a0 <__alt_data_end+0xfffde3a0>
   5045c:	04c00044 	movi	r19,1
   50460:	04810004 	movi	r18,1024
   50464:	003fc006 	br	50368 <__alt_data_end+0xfffde368>

00050468 <memset>:
   50468:	20c000cc 	andi	r3,r4,3
   5046c:	2005883a 	mov	r2,r4
   50470:	18004326 	beq	r3,zero,50580 <memset+0x118>
   50474:	31ffffc4 	addi	r7,r6,-1
   50478:	30004026 	beq	r6,zero,5057c <memset+0x114>
   5047c:	2813883a 	mov	r9,r5
   50480:	200d883a 	mov	r6,r4
   50484:	2007883a 	mov	r3,r4
   50488:	00000406 	br	5049c <memset+0x34>
   5048c:	3a3fffc4 	addi	r8,r7,-1
   50490:	31800044 	addi	r6,r6,1
   50494:	38003926 	beq	r7,zero,5057c <memset+0x114>
   50498:	400f883a 	mov	r7,r8
   5049c:	18c00044 	addi	r3,r3,1
   504a0:	32400005 	stb	r9,0(r6)
   504a4:	1a0000cc 	andi	r8,r3,3
   504a8:	403ff81e 	bne	r8,zero,5048c <__alt_data_end+0xfffde48c>
   504ac:	010000c4 	movi	r4,3
   504b0:	21c02d2e 	bgeu	r4,r7,50568 <memset+0x100>
   504b4:	29803fcc 	andi	r6,r5,255
   504b8:	3008923a 	slli	r4,r6,8
   504bc:	218cb03a 	or	r6,r4,r6
   504c0:	3008943a 	slli	r4,r6,16
   504c4:	218cb03a 	or	r6,r4,r6
   504c8:	010003c4 	movi	r4,15
   504cc:	21c0182e 	bgeu	r4,r7,50530 <memset+0xc8>
   504d0:	3b3ffc04 	addi	r12,r7,-16
   504d4:	6018d13a 	srli	r12,r12,4
   504d8:	1a000104 	addi	r8,r3,4
   504dc:	1ac00204 	addi	r11,r3,8
   504e0:	6008913a 	slli	r4,r12,4
   504e4:	1a800304 	addi	r10,r3,12
   504e8:	1813883a 	mov	r9,r3
   504ec:	21000504 	addi	r4,r4,20
   504f0:	1909883a 	add	r4,r3,r4
   504f4:	49800015 	stw	r6,0(r9)
   504f8:	41800015 	stw	r6,0(r8)
   504fc:	59800015 	stw	r6,0(r11)
   50500:	51800015 	stw	r6,0(r10)
   50504:	42000404 	addi	r8,r8,16
   50508:	4a400404 	addi	r9,r9,16
   5050c:	5ac00404 	addi	r11,r11,16
   50510:	52800404 	addi	r10,r10,16
   50514:	413ff71e 	bne	r8,r4,504f4 <__alt_data_end+0xfffde4f4>
   50518:	63000044 	addi	r12,r12,1
   5051c:	6018913a 	slli	r12,r12,4
   50520:	39c003cc 	andi	r7,r7,15
   50524:	010000c4 	movi	r4,3
   50528:	1b07883a 	add	r3,r3,r12
   5052c:	21c00e2e 	bgeu	r4,r7,50568 <memset+0x100>
   50530:	1813883a 	mov	r9,r3
   50534:	3811883a 	mov	r8,r7
   50538:	010000c4 	movi	r4,3
   5053c:	49800015 	stw	r6,0(r9)
   50540:	423fff04 	addi	r8,r8,-4
   50544:	4a400104 	addi	r9,r9,4
   50548:	223ffc36 	bltu	r4,r8,5053c <__alt_data_end+0xfffde53c>
   5054c:	393fff04 	addi	r4,r7,-4
   50550:	2008d0ba 	srli	r4,r4,2
   50554:	39c000cc 	andi	r7,r7,3
   50558:	21000044 	addi	r4,r4,1
   5055c:	2109883a 	add	r4,r4,r4
   50560:	2109883a 	add	r4,r4,r4
   50564:	1907883a 	add	r3,r3,r4
   50568:	38000426 	beq	r7,zero,5057c <memset+0x114>
   5056c:	19cf883a 	add	r7,r3,r7
   50570:	19400005 	stb	r5,0(r3)
   50574:	18c00044 	addi	r3,r3,1
   50578:	19fffd1e 	bne	r3,r7,50570 <__alt_data_end+0xfffde570>
   5057c:	f800283a 	ret
   50580:	2007883a 	mov	r3,r4
   50584:	300f883a 	mov	r7,r6
   50588:	003fc806 	br	504ac <__alt_data_end+0xfffde4ac>

0005058c <__sread>:
   5058c:	defffe04 	addi	sp,sp,-8
   50590:	dc000015 	stw	r16,0(sp)
   50594:	2821883a 	mov	r16,r5
   50598:	2940038f 	ldh	r5,14(r5)
   5059c:	dfc00115 	stw	ra,4(sp)
   505a0:	00509840 	call	50984 <_read_r>
   505a4:	10000716 	blt	r2,zero,505c4 <__sread+0x38>
   505a8:	80c01417 	ldw	r3,80(r16)
   505ac:	1887883a 	add	r3,r3,r2
   505b0:	80c01415 	stw	r3,80(r16)
   505b4:	dfc00117 	ldw	ra,4(sp)
   505b8:	dc000017 	ldw	r16,0(sp)
   505bc:	dec00204 	addi	sp,sp,8
   505c0:	f800283a 	ret
   505c4:	80c0030b 	ldhu	r3,12(r16)
   505c8:	18fbffcc 	andi	r3,r3,61439
   505cc:	80c0030d 	sth	r3,12(r16)
   505d0:	dfc00117 	ldw	ra,4(sp)
   505d4:	dc000017 	ldw	r16,0(sp)
   505d8:	dec00204 	addi	sp,sp,8
   505dc:	f800283a 	ret

000505e0 <__seofread>:
   505e0:	0005883a 	mov	r2,zero
   505e4:	f800283a 	ret

000505e8 <__swrite>:
   505e8:	2880030b 	ldhu	r2,12(r5)
   505ec:	defffb04 	addi	sp,sp,-20
   505f0:	dcc00315 	stw	r19,12(sp)
   505f4:	dc800215 	stw	r18,8(sp)
   505f8:	dc400115 	stw	r17,4(sp)
   505fc:	dc000015 	stw	r16,0(sp)
   50600:	dfc00415 	stw	ra,16(sp)
   50604:	10c0400c 	andi	r3,r2,256
   50608:	2821883a 	mov	r16,r5
   5060c:	2027883a 	mov	r19,r4
   50610:	3025883a 	mov	r18,r6
   50614:	3823883a 	mov	r17,r7
   50618:	18000526 	beq	r3,zero,50630 <__swrite+0x48>
   5061c:	2940038f 	ldh	r5,14(r5)
   50620:	000d883a 	mov	r6,zero
   50624:	01c00084 	movi	r7,2
   50628:	00509280 	call	50928 <_lseek_r>
   5062c:	8080030b 	ldhu	r2,12(r16)
   50630:	8140038f 	ldh	r5,14(r16)
   50634:	10bbffcc 	andi	r2,r2,61439
   50638:	9809883a 	mov	r4,r19
   5063c:	900d883a 	mov	r6,r18
   50640:	880f883a 	mov	r7,r17
   50644:	8080030d 	sth	r2,12(r16)
   50648:	dfc00417 	ldw	ra,16(sp)
   5064c:	dcc00317 	ldw	r19,12(sp)
   50650:	dc800217 	ldw	r18,8(sp)
   50654:	dc400117 	ldw	r17,4(sp)
   50658:	dc000017 	ldw	r16,0(sp)
   5065c:	dec00504 	addi	sp,sp,20
   50660:	00506c81 	jmpi	506c8 <_write_r>

00050664 <__sseek>:
   50664:	defffe04 	addi	sp,sp,-8
   50668:	dc000015 	stw	r16,0(sp)
   5066c:	2821883a 	mov	r16,r5
   50670:	2940038f 	ldh	r5,14(r5)
   50674:	dfc00115 	stw	ra,4(sp)
   50678:	00509280 	call	50928 <_lseek_r>
   5067c:	00ffffc4 	movi	r3,-1
   50680:	10c00826 	beq	r2,r3,506a4 <__sseek+0x40>
   50684:	80c0030b 	ldhu	r3,12(r16)
   50688:	80801415 	stw	r2,80(r16)
   5068c:	18c40014 	ori	r3,r3,4096
   50690:	80c0030d 	sth	r3,12(r16)
   50694:	dfc00117 	ldw	ra,4(sp)
   50698:	dc000017 	ldw	r16,0(sp)
   5069c:	dec00204 	addi	sp,sp,8
   506a0:	f800283a 	ret
   506a4:	80c0030b 	ldhu	r3,12(r16)
   506a8:	18fbffcc 	andi	r3,r3,61439
   506ac:	80c0030d 	sth	r3,12(r16)
   506b0:	dfc00117 	ldw	ra,4(sp)
   506b4:	dc000017 	ldw	r16,0(sp)
   506b8:	dec00204 	addi	sp,sp,8
   506bc:	f800283a 	ret

000506c0 <__sclose>:
   506c0:	2940038f 	ldh	r5,14(r5)
   506c4:	00507241 	jmpi	50724 <_close_r>

000506c8 <_write_r>:
   506c8:	defffd04 	addi	sp,sp,-12
   506cc:	dc000015 	stw	r16,0(sp)
   506d0:	040001b4 	movhi	r16,6
   506d4:	dc400115 	stw	r17,4(sp)
   506d8:	8421a604 	addi	r16,r16,-31080
   506dc:	2023883a 	mov	r17,r4
   506e0:	2809883a 	mov	r4,r5
   506e4:	300b883a 	mov	r5,r6
   506e8:	380d883a 	mov	r6,r7
   506ec:	dfc00215 	stw	ra,8(sp)
   506f0:	80000015 	stw	zero,0(r16)
   506f4:	00523840 	call	52384 <write>
   506f8:	00ffffc4 	movi	r3,-1
   506fc:	10c00526 	beq	r2,r3,50714 <_write_r+0x4c>
   50700:	dfc00217 	ldw	ra,8(sp)
   50704:	dc400117 	ldw	r17,4(sp)
   50708:	dc000017 	ldw	r16,0(sp)
   5070c:	dec00304 	addi	sp,sp,12
   50710:	f800283a 	ret
   50714:	80c00017 	ldw	r3,0(r16)
   50718:	183ff926 	beq	r3,zero,50700 <__alt_data_end+0xfffde700>
   5071c:	88c00015 	stw	r3,0(r17)
   50720:	003ff706 	br	50700 <__alt_data_end+0xfffde700>

00050724 <_close_r>:
   50724:	defffd04 	addi	sp,sp,-12
   50728:	dc000015 	stw	r16,0(sp)
   5072c:	040001b4 	movhi	r16,6
   50730:	dc400115 	stw	r17,4(sp)
   50734:	8421a604 	addi	r16,r16,-31080
   50738:	2023883a 	mov	r17,r4
   5073c:	2809883a 	mov	r4,r5
   50740:	dfc00215 	stw	ra,8(sp)
   50744:	80000015 	stw	zero,0(r16)
   50748:	00517040 	call	51704 <close>
   5074c:	00ffffc4 	movi	r3,-1
   50750:	10c00526 	beq	r2,r3,50768 <_close_r+0x44>
   50754:	dfc00217 	ldw	ra,8(sp)
   50758:	dc400117 	ldw	r17,4(sp)
   5075c:	dc000017 	ldw	r16,0(sp)
   50760:	dec00304 	addi	sp,sp,12
   50764:	f800283a 	ret
   50768:	80c00017 	ldw	r3,0(r16)
   5076c:	183ff926 	beq	r3,zero,50754 <__alt_data_end+0xfffde754>
   50770:	88c00015 	stw	r3,0(r17)
   50774:	003ff706 	br	50754 <__alt_data_end+0xfffde754>

00050778 <_fclose_r>:
   50778:	28003926 	beq	r5,zero,50860 <_fclose_r+0xe8>
   5077c:	defffc04 	addi	sp,sp,-16
   50780:	dc400115 	stw	r17,4(sp)
   50784:	dc000015 	stw	r16,0(sp)
   50788:	dfc00315 	stw	ra,12(sp)
   5078c:	dc800215 	stw	r18,8(sp)
   50790:	2023883a 	mov	r17,r4
   50794:	2821883a 	mov	r16,r5
   50798:	20000226 	beq	r4,zero,507a4 <_fclose_r+0x2c>
   5079c:	20800e17 	ldw	r2,56(r4)
   507a0:	10002726 	beq	r2,zero,50840 <_fclose_r+0xc8>
   507a4:	8080030f 	ldh	r2,12(r16)
   507a8:	1000071e 	bne	r2,zero,507c8 <_fclose_r+0x50>
   507ac:	0005883a 	mov	r2,zero
   507b0:	dfc00317 	ldw	ra,12(sp)
   507b4:	dc800217 	ldw	r18,8(sp)
   507b8:	dc400117 	ldw	r17,4(sp)
   507bc:	dc000017 	ldw	r16,0(sp)
   507c0:	dec00404 	addi	sp,sp,16
   507c4:	f800283a 	ret
   507c8:	8809883a 	mov	r4,r17
   507cc:	800b883a 	mov	r5,r16
   507d0:	004f6e00 	call	4f6e0 <__sflush_r>
   507d4:	1025883a 	mov	r18,r2
   507d8:	80800b17 	ldw	r2,44(r16)
   507dc:	10000426 	beq	r2,zero,507f0 <_fclose_r+0x78>
   507e0:	81400717 	ldw	r5,28(r16)
   507e4:	8809883a 	mov	r4,r17
   507e8:	103ee83a 	callr	r2
   507ec:	10001616 	blt	r2,zero,50848 <_fclose_r+0xd0>
   507f0:	8080030b 	ldhu	r2,12(r16)
   507f4:	1080200c 	andi	r2,r2,128
   507f8:	1000151e 	bne	r2,zero,50850 <_fclose_r+0xd8>
   507fc:	81400c17 	ldw	r5,48(r16)
   50800:	28000526 	beq	r5,zero,50818 <_fclose_r+0xa0>
   50804:	80801004 	addi	r2,r16,64
   50808:	28800226 	beq	r5,r2,50814 <_fclose_r+0x9c>
   5080c:	8809883a 	mov	r4,r17
   50810:	004fe380 	call	4fe38 <_free_r>
   50814:	80000c15 	stw	zero,48(r16)
   50818:	81401117 	ldw	r5,68(r16)
   5081c:	28000326 	beq	r5,zero,5082c <_fclose_r+0xb4>
   50820:	8809883a 	mov	r4,r17
   50824:	004fe380 	call	4fe38 <_free_r>
   50828:	80001115 	stw	zero,68(r16)
   5082c:	004fcd40 	call	4fcd4 <__sfp_lock_acquire>
   50830:	8000030d 	sth	zero,12(r16)
   50834:	004fcd80 	call	4fcd8 <__sfp_lock_release>
   50838:	9005883a 	mov	r2,r18
   5083c:	003fdc06 	br	507b0 <__alt_data_end+0xfffde7b0>
   50840:	004fcc40 	call	4fcc4 <__sinit>
   50844:	003fd706 	br	507a4 <__alt_data_end+0xfffde7a4>
   50848:	04bfffc4 	movi	r18,-1
   5084c:	003fe806 	br	507f0 <__alt_data_end+0xfffde7f0>
   50850:	81400417 	ldw	r5,16(r16)
   50854:	8809883a 	mov	r4,r17
   50858:	004fe380 	call	4fe38 <_free_r>
   5085c:	003fe706 	br	507fc <__alt_data_end+0xfffde7fc>
   50860:	0005883a 	mov	r2,zero
   50864:	f800283a 	ret

00050868 <fclose>:
   50868:	00800174 	movhi	r2,5
   5086c:	109a5f04 	addi	r2,r2,27004
   50870:	200b883a 	mov	r5,r4
   50874:	11000017 	ldw	r4,0(r2)
   50878:	00507781 	jmpi	50778 <_fclose_r>

0005087c <_fstat_r>:
   5087c:	defffd04 	addi	sp,sp,-12
   50880:	dc000015 	stw	r16,0(sp)
   50884:	040001b4 	movhi	r16,6
   50888:	dc400115 	stw	r17,4(sp)
   5088c:	8421a604 	addi	r16,r16,-31080
   50890:	2023883a 	mov	r17,r4
   50894:	2809883a 	mov	r4,r5
   50898:	300b883a 	mov	r5,r6
   5089c:	dfc00215 	stw	ra,8(sp)
   508a0:	80000015 	stw	zero,0(r16)
   508a4:	00518500 	call	51850 <fstat>
   508a8:	00ffffc4 	movi	r3,-1
   508ac:	10c00526 	beq	r2,r3,508c4 <_fstat_r+0x48>
   508b0:	dfc00217 	ldw	ra,8(sp)
   508b4:	dc400117 	ldw	r17,4(sp)
   508b8:	dc000017 	ldw	r16,0(sp)
   508bc:	dec00304 	addi	sp,sp,12
   508c0:	f800283a 	ret
   508c4:	80c00017 	ldw	r3,0(r16)
   508c8:	183ff926 	beq	r3,zero,508b0 <__alt_data_end+0xfffde8b0>
   508cc:	88c00015 	stw	r3,0(r17)
   508d0:	003ff706 	br	508b0 <__alt_data_end+0xfffde8b0>

000508d4 <_isatty_r>:
   508d4:	defffd04 	addi	sp,sp,-12
   508d8:	dc000015 	stw	r16,0(sp)
   508dc:	040001b4 	movhi	r16,6
   508e0:	dc400115 	stw	r17,4(sp)
   508e4:	8421a604 	addi	r16,r16,-31080
   508e8:	2023883a 	mov	r17,r4
   508ec:	2809883a 	mov	r4,r5
   508f0:	dfc00215 	stw	ra,8(sp)
   508f4:	80000015 	stw	zero,0(r16)
   508f8:	0051b000 	call	51b00 <isatty>
   508fc:	00ffffc4 	movi	r3,-1
   50900:	10c00526 	beq	r2,r3,50918 <_isatty_r+0x44>
   50904:	dfc00217 	ldw	ra,8(sp)
   50908:	dc400117 	ldw	r17,4(sp)
   5090c:	dc000017 	ldw	r16,0(sp)
   50910:	dec00304 	addi	sp,sp,12
   50914:	f800283a 	ret
   50918:	80c00017 	ldw	r3,0(r16)
   5091c:	183ff926 	beq	r3,zero,50904 <__alt_data_end+0xfffde904>
   50920:	88c00015 	stw	r3,0(r17)
   50924:	003ff706 	br	50904 <__alt_data_end+0xfffde904>

00050928 <_lseek_r>:
   50928:	defffd04 	addi	sp,sp,-12
   5092c:	dc000015 	stw	r16,0(sp)
   50930:	040001b4 	movhi	r16,6
   50934:	dc400115 	stw	r17,4(sp)
   50938:	8421a604 	addi	r16,r16,-31080
   5093c:	2023883a 	mov	r17,r4
   50940:	2809883a 	mov	r4,r5
   50944:	300b883a 	mov	r5,r6
   50948:	380d883a 	mov	r6,r7
   5094c:	dfc00215 	stw	ra,8(sp)
   50950:	80000015 	stw	zero,0(r16)
   50954:	0051cd80 	call	51cd8 <lseek>
   50958:	00ffffc4 	movi	r3,-1
   5095c:	10c00526 	beq	r2,r3,50974 <_lseek_r+0x4c>
   50960:	dfc00217 	ldw	ra,8(sp)
   50964:	dc400117 	ldw	r17,4(sp)
   50968:	dc000017 	ldw	r16,0(sp)
   5096c:	dec00304 	addi	sp,sp,12
   50970:	f800283a 	ret
   50974:	80c00017 	ldw	r3,0(r16)
   50978:	183ff926 	beq	r3,zero,50960 <__alt_data_end+0xfffde960>
   5097c:	88c00015 	stw	r3,0(r17)
   50980:	003ff706 	br	50960 <__alt_data_end+0xfffde960>

00050984 <_read_r>:
   50984:	defffd04 	addi	sp,sp,-12
   50988:	dc000015 	stw	r16,0(sp)
   5098c:	040001b4 	movhi	r16,6
   50990:	dc400115 	stw	r17,4(sp)
   50994:	8421a604 	addi	r16,r16,-31080
   50998:	2023883a 	mov	r17,r4
   5099c:	2809883a 	mov	r4,r5
   509a0:	300b883a 	mov	r5,r6
   509a4:	380d883a 	mov	r6,r7
   509a8:	dfc00215 	stw	ra,8(sp)
   509ac:	80000015 	stw	zero,0(r16)
   509b0:	00521280 	call	52128 <read>
   509b4:	00ffffc4 	movi	r3,-1
   509b8:	10c00526 	beq	r2,r3,509d0 <_read_r+0x4c>
   509bc:	dfc00217 	ldw	ra,8(sp)
   509c0:	dc400117 	ldw	r17,4(sp)
   509c4:	dc000017 	ldw	r16,0(sp)
   509c8:	dec00304 	addi	sp,sp,12
   509cc:	f800283a 	ret
   509d0:	80c00017 	ldw	r3,0(r16)
   509d4:	183ff926 	beq	r3,zero,509bc <__alt_data_end+0xfffde9bc>
   509d8:	88c00015 	stw	r3,0(r17)
   509dc:	003ff706 	br	509bc <__alt_data_end+0xfffde9bc>

000509e0 <__udivdi3>:
   509e0:	defff504 	addi	sp,sp,-44
   509e4:	dcc00415 	stw	r19,16(sp)
   509e8:	dc000115 	stw	r16,4(sp)
   509ec:	dfc00a15 	stw	ra,40(sp)
   509f0:	df000915 	stw	fp,36(sp)
   509f4:	ddc00815 	stw	r23,32(sp)
   509f8:	dd800715 	stw	r22,28(sp)
   509fc:	dd400615 	stw	r21,24(sp)
   50a00:	dd000515 	stw	r20,20(sp)
   50a04:	dc800315 	stw	r18,12(sp)
   50a08:	dc400215 	stw	r17,8(sp)
   50a0c:	2027883a 	mov	r19,r4
   50a10:	2821883a 	mov	r16,r5
   50a14:	3800421e 	bne	r7,zero,50b20 <__udivdi3+0x140>
   50a18:	3025883a 	mov	r18,r6
   50a1c:	2023883a 	mov	r17,r4
   50a20:	2980542e 	bgeu	r5,r6,50b74 <__udivdi3+0x194>
   50a24:	00bfffd4 	movui	r2,65535
   50a28:	282d883a 	mov	r22,r5
   50a2c:	1180a836 	bltu	r2,r6,50cd0 <__udivdi3+0x2f0>
   50a30:	00803fc4 	movi	r2,255
   50a34:	1181422e 	bgeu	r2,r6,50f40 <__udivdi3+0x560>
   50a38:	00800204 	movi	r2,8
   50a3c:	1007883a 	mov	r3,r2
   50a40:	3084d83a 	srl	r2,r6,r2
   50a44:	01000174 	movhi	r4,5
   50a48:	21129004 	addi	r4,r4,19008
   50a4c:	2085883a 	add	r2,r4,r2
   50a50:	10800003 	ldbu	r2,0(r2)
   50a54:	10c7883a 	add	r3,r2,r3
   50a58:	00800804 	movi	r2,32
   50a5c:	10c5c83a 	sub	r2,r2,r3
   50a60:	10000526 	beq	r2,zero,50a78 <__udivdi3+0x98>
   50a64:	80a0983a 	sll	r16,r16,r2
   50a68:	98c6d83a 	srl	r3,r19,r3
   50a6c:	30a4983a 	sll	r18,r6,r2
   50a70:	98a2983a 	sll	r17,r19,r2
   50a74:	80ecb03a 	or	r22,r16,r3
   50a78:	902ad43a 	srli	r21,r18,16
   50a7c:	b009883a 	mov	r4,r22
   50a80:	953fffcc 	andi	r20,r18,65535
   50a84:	a80b883a 	mov	r5,r21
   50a88:	0044bb80 	call	44bb8 <__umodsi3>
   50a8c:	b009883a 	mov	r4,r22
   50a90:	a80b883a 	mov	r5,r21
   50a94:	1027883a 	mov	r19,r2
   50a98:	0044bb00 	call	44bb0 <__udivsi3>
   50a9c:	1021883a 	mov	r16,r2
   50aa0:	8806d43a 	srli	r3,r17,16
   50aa4:	9804943a 	slli	r2,r19,16
   50aa8:	8527383a 	mul	r19,r16,r20
   50aac:	10c4b03a 	or	r2,r2,r3
   50ab0:	14c0052e 	bgeu	r2,r19,50ac8 <__udivdi3+0xe8>
   50ab4:	1485883a 	add	r2,r2,r18
   50ab8:	80ffffc4 	addi	r3,r16,-1
   50abc:	14800136 	bltu	r2,r18,50ac4 <__udivdi3+0xe4>
   50ac0:	14c13436 	bltu	r2,r19,50f94 <__udivdi3+0x5b4>
   50ac4:	1821883a 	mov	r16,r3
   50ac8:	14e7c83a 	sub	r19,r2,r19
   50acc:	9809883a 	mov	r4,r19
   50ad0:	a80b883a 	mov	r5,r21
   50ad4:	0044bb80 	call	44bb8 <__umodsi3>
   50ad8:	102d883a 	mov	r22,r2
   50adc:	9809883a 	mov	r4,r19
   50ae0:	a80b883a 	mov	r5,r21
   50ae4:	0044bb00 	call	44bb0 <__udivsi3>
   50ae8:	b02c943a 	slli	r22,r22,16
   50aec:	1529383a 	mul	r20,r2,r20
   50af0:	8c7fffcc 	andi	r17,r17,65535
   50af4:	b462b03a 	or	r17,r22,r17
   50af8:	8d00052e 	bgeu	r17,r20,50b10 <__udivdi3+0x130>
   50afc:	8ca3883a 	add	r17,r17,r18
   50b00:	10ffffc4 	addi	r3,r2,-1
   50b04:	8c80f636 	bltu	r17,r18,50ee0 <__udivdi3+0x500>
   50b08:	8d00f52e 	bgeu	r17,r20,50ee0 <__udivdi3+0x500>
   50b0c:	10bfff84 	addi	r2,r2,-2
   50b10:	8020943a 	slli	r16,r16,16
   50b14:	0007883a 	mov	r3,zero
   50b18:	1404b03a 	or	r2,r2,r16
   50b1c:	00005b06 	br	50c8c <__udivdi3+0x2ac>
   50b20:	29c05836 	bltu	r5,r7,50c84 <__udivdi3+0x2a4>
   50b24:	00bfffd4 	movui	r2,65535
   50b28:	11c0642e 	bgeu	r2,r7,50cbc <__udivdi3+0x2dc>
   50b2c:	00804034 	movhi	r2,256
   50b30:	10bfffc4 	addi	r2,r2,-1
   50b34:	11c0f32e 	bgeu	r2,r7,50f04 <__udivdi3+0x524>
   50b38:	00c00604 	movi	r3,24
   50b3c:	180b883a 	mov	r5,r3
   50b40:	38c6d83a 	srl	r3,r7,r3
   50b44:	00800174 	movhi	r2,5
   50b48:	10929004 	addi	r2,r2,19008
   50b4c:	10c7883a 	add	r3,r2,r3
   50b50:	18c00003 	ldbu	r3,0(r3)
   50b54:	01000804 	movi	r4,32
   50b58:	1947883a 	add	r3,r3,r5
   50b5c:	20e5c83a 	sub	r18,r4,r3
   50b60:	9000661e 	bne	r18,zero,50cfc <__udivdi3+0x31c>
   50b64:	3c00f936 	bltu	r7,r16,50f4c <__udivdi3+0x56c>
   50b68:	9985403a 	cmpgeu	r2,r19,r6
   50b6c:	0007883a 	mov	r3,zero
   50b70:	00004606 	br	50c8c <__udivdi3+0x2ac>
   50b74:	3000041e 	bne	r6,zero,50b88 <__udivdi3+0x1a8>
   50b78:	01000044 	movi	r4,1
   50b7c:	000b883a 	mov	r5,zero
   50b80:	0044bb00 	call	44bb0 <__udivsi3>
   50b84:	1025883a 	mov	r18,r2
   50b88:	00bfffd4 	movui	r2,65535
   50b8c:	1480562e 	bgeu	r2,r18,50ce8 <__udivdi3+0x308>
   50b90:	00804034 	movhi	r2,256
   50b94:	10bfffc4 	addi	r2,r2,-1
   50b98:	1480e32e 	bgeu	r2,r18,50f28 <__udivdi3+0x548>
   50b9c:	00800604 	movi	r2,24
   50ba0:	1007883a 	mov	r3,r2
   50ba4:	9084d83a 	srl	r2,r18,r2
   50ba8:	01000174 	movhi	r4,5
   50bac:	21129004 	addi	r4,r4,19008
   50bb0:	2085883a 	add	r2,r4,r2
   50bb4:	10800003 	ldbu	r2,0(r2)
   50bb8:	10c5883a 	add	r2,r2,r3
   50bbc:	00c00804 	movi	r3,32
   50bc0:	1887c83a 	sub	r3,r3,r2
   50bc4:	1800911e 	bne	r3,zero,50e0c <__udivdi3+0x42c>
   50bc8:	9028d43a 	srli	r20,r18,16
   50bcc:	84a1c83a 	sub	r16,r16,r18
   50bd0:	957fffcc 	andi	r21,r18,65535
   50bd4:	00c00044 	movi	r3,1
   50bd8:	8009883a 	mov	r4,r16
   50bdc:	a00b883a 	mov	r5,r20
   50be0:	d8c00015 	stw	r3,0(sp)
   50be4:	0044bb80 	call	44bb8 <__umodsi3>
   50be8:	8009883a 	mov	r4,r16
   50bec:	a00b883a 	mov	r5,r20
   50bf0:	1027883a 	mov	r19,r2
   50bf4:	0044bb00 	call	44bb0 <__udivsi3>
   50bf8:	1021883a 	mov	r16,r2
   50bfc:	880cd43a 	srli	r6,r17,16
   50c00:	9804943a 	slli	r2,r19,16
   50c04:	8567383a 	mul	r19,r16,r21
   50c08:	d8c00017 	ldw	r3,0(sp)
   50c0c:	1188b03a 	or	r4,r2,r6
   50c10:	24c0052e 	bgeu	r4,r19,50c28 <__udivdi3+0x248>
   50c14:	2489883a 	add	r4,r4,r18
   50c18:	80bfffc4 	addi	r2,r16,-1
   50c1c:	24800136 	bltu	r4,r18,50c24 <__udivdi3+0x244>
   50c20:	24c0d936 	bltu	r4,r19,50f88 <__udivdi3+0x5a8>
   50c24:	1021883a 	mov	r16,r2
   50c28:	24e7c83a 	sub	r19,r4,r19
   50c2c:	9809883a 	mov	r4,r19
   50c30:	a00b883a 	mov	r5,r20
   50c34:	d8c00015 	stw	r3,0(sp)
   50c38:	0044bb80 	call	44bb8 <__umodsi3>
   50c3c:	102d883a 	mov	r22,r2
   50c40:	9809883a 	mov	r4,r19
   50c44:	a00b883a 	mov	r5,r20
   50c48:	0044bb00 	call	44bb0 <__udivsi3>
   50c4c:	b02c943a 	slli	r22,r22,16
   50c50:	156b383a 	mul	r21,r2,r21
   50c54:	8c7fffcc 	andi	r17,r17,65535
   50c58:	b462b03a 	or	r17,r22,r17
   50c5c:	d8c00017 	ldw	r3,0(sp)
   50c60:	8d40052e 	bgeu	r17,r21,50c78 <__udivdi3+0x298>
   50c64:	8ca3883a 	add	r17,r17,r18
   50c68:	113fffc4 	addi	r4,r2,-1
   50c6c:	8c809a36 	bltu	r17,r18,50ed8 <__udivdi3+0x4f8>
   50c70:	8d40992e 	bgeu	r17,r21,50ed8 <__udivdi3+0x4f8>
   50c74:	10bfff84 	addi	r2,r2,-2
   50c78:	8020943a 	slli	r16,r16,16
   50c7c:	1404b03a 	or	r2,r2,r16
   50c80:	00000206 	br	50c8c <__udivdi3+0x2ac>
   50c84:	0007883a 	mov	r3,zero
   50c88:	0005883a 	mov	r2,zero
   50c8c:	dfc00a17 	ldw	ra,40(sp)
   50c90:	df000917 	ldw	fp,36(sp)
   50c94:	ddc00817 	ldw	r23,32(sp)
   50c98:	dd800717 	ldw	r22,28(sp)
   50c9c:	dd400617 	ldw	r21,24(sp)
   50ca0:	dd000517 	ldw	r20,20(sp)
   50ca4:	dcc00417 	ldw	r19,16(sp)
   50ca8:	dc800317 	ldw	r18,12(sp)
   50cac:	dc400217 	ldw	r17,8(sp)
   50cb0:	dc000117 	ldw	r16,4(sp)
   50cb4:	dec00b04 	addi	sp,sp,44
   50cb8:	f800283a 	ret
   50cbc:	00803fc4 	movi	r2,255
   50cc0:	11c0932e 	bgeu	r2,r7,50f10 <__udivdi3+0x530>
   50cc4:	00c00204 	movi	r3,8
   50cc8:	180b883a 	mov	r5,r3
   50ccc:	003f9c06 	br	50b40 <__alt_data_end+0xfffdeb40>
   50cd0:	00804034 	movhi	r2,256
   50cd4:	10bfffc4 	addi	r2,r2,-1
   50cd8:	1180902e 	bgeu	r2,r6,50f1c <__udivdi3+0x53c>
   50cdc:	00800604 	movi	r2,24
   50ce0:	1007883a 	mov	r3,r2
   50ce4:	003f5606 	br	50a40 <__alt_data_end+0xfffdea40>
   50ce8:	00803fc4 	movi	r2,255
   50cec:	1480912e 	bgeu	r2,r18,50f34 <__udivdi3+0x554>
   50cf0:	00800204 	movi	r2,8
   50cf4:	1007883a 	mov	r3,r2
   50cf8:	003faa06 	br	50ba4 <__alt_data_end+0xfffdeba4>
   50cfc:	30eed83a 	srl	r23,r6,r3
   50d00:	3c8e983a 	sll	r7,r7,r18
   50d04:	80f8d83a 	srl	fp,r16,r3
   50d08:	98c6d83a 	srl	r3,r19,r3
   50d0c:	3deeb03a 	or	r23,r7,r23
   50d10:	b828d43a 	srli	r20,r23,16
   50d14:	84a0983a 	sll	r16,r16,r18
   50d18:	e009883a 	mov	r4,fp
   50d1c:	a00b883a 	mov	r5,r20
   50d20:	80e2b03a 	or	r17,r16,r3
   50d24:	34aa983a 	sll	r21,r6,r18
   50d28:	0044bb80 	call	44bb8 <__umodsi3>
   50d2c:	e009883a 	mov	r4,fp
   50d30:	a00b883a 	mov	r5,r20
   50d34:	102d883a 	mov	r22,r2
   50d38:	0044bb00 	call	44bb0 <__udivsi3>
   50d3c:	1021883a 	mov	r16,r2
   50d40:	bf3fffcc 	andi	fp,r23,65535
   50d44:	b004943a 	slli	r2,r22,16
   50d48:	8808d43a 	srli	r4,r17,16
   50d4c:	872d383a 	mul	r22,r16,fp
   50d50:	1104b03a 	or	r2,r2,r4
   50d54:	1580042e 	bgeu	r2,r22,50d68 <__udivdi3+0x388>
   50d58:	15c5883a 	add	r2,r2,r23
   50d5c:	80ffffc4 	addi	r3,r16,-1
   50d60:	15c0812e 	bgeu	r2,r23,50f68 <__udivdi3+0x588>
   50d64:	1821883a 	mov	r16,r3
   50d68:	15adc83a 	sub	r22,r2,r22
   50d6c:	b009883a 	mov	r4,r22
   50d70:	a00b883a 	mov	r5,r20
   50d74:	0044bb80 	call	44bb8 <__umodsi3>
   50d78:	a00b883a 	mov	r5,r20
   50d7c:	b009883a 	mov	r4,r22
   50d80:	d8800015 	stw	r2,0(sp)
   50d84:	0044bb00 	call	44bb0 <__udivsi3>
   50d88:	d8c00017 	ldw	r3,0(sp)
   50d8c:	170b383a 	mul	r5,r2,fp
   50d90:	8c7fffcc 	andi	r17,r17,65535
   50d94:	1806943a 	slli	r3,r3,16
   50d98:	1c46b03a 	or	r3,r3,r17
   50d9c:	1940042e 	bgeu	r3,r5,50db0 <__udivdi3+0x3d0>
   50da0:	1dc7883a 	add	r3,r3,r23
   50da4:	113fffc4 	addi	r4,r2,-1
   50da8:	1dc06b2e 	bgeu	r3,r23,50f58 <__udivdi3+0x578>
   50dac:	2005883a 	mov	r2,r4
   50db0:	8020943a 	slli	r16,r16,16
   50db4:	a9ffffcc 	andi	r7,r21,65535
   50db8:	a82ad43a 	srli	r21,r21,16
   50dbc:	1404b03a 	or	r2,r2,r16
   50dc0:	113fffcc 	andi	r4,r2,65535
   50dc4:	100cd43a 	srli	r6,r2,16
   50dc8:	21d3383a 	mul	r9,r4,r7
   50dcc:	2549383a 	mul	r4,r4,r21
   50dd0:	31cf383a 	mul	r7,r6,r7
   50dd4:	4810d43a 	srli	r8,r9,16
   50dd8:	1947c83a 	sub	r3,r3,r5
   50ddc:	3909883a 	add	r4,r7,r4
   50de0:	2209883a 	add	r4,r4,r8
   50de4:	354d383a 	mul	r6,r6,r21
   50de8:	21c0022e 	bgeu	r4,r7,50df4 <__udivdi3+0x414>
   50dec:	01400074 	movhi	r5,1
   50df0:	314d883a 	add	r6,r6,r5
   50df4:	202ad43a 	srli	r21,r4,16
   50df8:	354d883a 	add	r6,r6,r21
   50dfc:	19803f36 	bltu	r3,r6,50efc <__udivdi3+0x51c>
   50e00:	19803926 	beq	r3,r6,50ee8 <__udivdi3+0x508>
   50e04:	0007883a 	mov	r3,zero
   50e08:	003fa006 	br	50c8c <__alt_data_end+0xfffdec8c>
   50e0c:	90e4983a 	sll	r18,r18,r3
   50e10:	80aad83a 	srl	r21,r16,r2
   50e14:	80e0983a 	sll	r16,r16,r3
   50e18:	9028d43a 	srli	r20,r18,16
   50e1c:	9884d83a 	srl	r2,r19,r2
   50e20:	a809883a 	mov	r4,r21
   50e24:	a00b883a 	mov	r5,r20
   50e28:	80acb03a 	or	r22,r16,r2
   50e2c:	98e2983a 	sll	r17,r19,r3
   50e30:	0044bb80 	call	44bb8 <__umodsi3>
   50e34:	a809883a 	mov	r4,r21
   50e38:	a00b883a 	mov	r5,r20
   50e3c:	1021883a 	mov	r16,r2
   50e40:	0044bb00 	call	44bb0 <__udivsi3>
   50e44:	957fffcc 	andi	r21,r18,65535
   50e48:	8020943a 	slli	r16,r16,16
   50e4c:	b00ad43a 	srli	r5,r22,16
   50e50:	1567383a 	mul	r19,r2,r21
   50e54:	102f883a 	mov	r23,r2
   50e58:	8148b03a 	or	r4,r16,r5
   50e5c:	24c0062e 	bgeu	r4,r19,50e78 <__udivdi3+0x498>
   50e60:	2489883a 	add	r4,r4,r18
   50e64:	10bfffc4 	addi	r2,r2,-1
   50e68:	24804536 	bltu	r4,r18,50f80 <__udivdi3+0x5a0>
   50e6c:	24c0442e 	bgeu	r4,r19,50f80 <__udivdi3+0x5a0>
   50e70:	bdffff84 	addi	r23,r23,-2
   50e74:	2489883a 	add	r4,r4,r18
   50e78:	24e7c83a 	sub	r19,r4,r19
   50e7c:	9809883a 	mov	r4,r19
   50e80:	a00b883a 	mov	r5,r20
   50e84:	0044bb80 	call	44bb8 <__umodsi3>
   50e88:	1021883a 	mov	r16,r2
   50e8c:	9809883a 	mov	r4,r19
   50e90:	a00b883a 	mov	r5,r20
   50e94:	0044bb00 	call	44bb0 <__udivsi3>
   50e98:	8020943a 	slli	r16,r16,16
   50e9c:	1007883a 	mov	r3,r2
   50ea0:	1545383a 	mul	r2,r2,r21
   50ea4:	b13fffcc 	andi	r4,r22,65535
   50ea8:	8108b03a 	or	r4,r16,r4
   50eac:	2080062e 	bgeu	r4,r2,50ec8 <__udivdi3+0x4e8>
   50eb0:	2489883a 	add	r4,r4,r18
   50eb4:	197fffc4 	addi	r5,r3,-1
   50eb8:	24802f36 	bltu	r4,r18,50f78 <__udivdi3+0x598>
   50ebc:	20802e2e 	bgeu	r4,r2,50f78 <__udivdi3+0x598>
   50ec0:	18ffff84 	addi	r3,r3,-2
   50ec4:	2489883a 	add	r4,r4,r18
   50ec8:	b82e943a 	slli	r23,r23,16
   50ecc:	20a1c83a 	sub	r16,r4,r2
   50ed0:	1dc6b03a 	or	r3,r3,r23
   50ed4:	003f4006 	br	50bd8 <__alt_data_end+0xfffdebd8>
   50ed8:	2005883a 	mov	r2,r4
   50edc:	003f6606 	br	50c78 <__alt_data_end+0xfffdec78>
   50ee0:	1805883a 	mov	r2,r3
   50ee4:	003f0a06 	br	50b10 <__alt_data_end+0xfffdeb10>
   50ee8:	2006943a 	slli	r3,r4,16
   50eec:	9c88983a 	sll	r4,r19,r18
   50ef0:	4a7fffcc 	andi	r9,r9,65535
   50ef4:	1a47883a 	add	r3,r3,r9
   50ef8:	20ffc22e 	bgeu	r4,r3,50e04 <__alt_data_end+0xfffdee04>
   50efc:	10bfffc4 	addi	r2,r2,-1
   50f00:	003fc006 	br	50e04 <__alt_data_end+0xfffdee04>
   50f04:	00c00404 	movi	r3,16
   50f08:	180b883a 	mov	r5,r3
   50f0c:	003f0c06 	br	50b40 <__alt_data_end+0xfffdeb40>
   50f10:	0007883a 	mov	r3,zero
   50f14:	000b883a 	mov	r5,zero
   50f18:	003f0906 	br	50b40 <__alt_data_end+0xfffdeb40>
   50f1c:	00800404 	movi	r2,16
   50f20:	1007883a 	mov	r3,r2
   50f24:	003ec606 	br	50a40 <__alt_data_end+0xfffdea40>
   50f28:	00800404 	movi	r2,16
   50f2c:	1007883a 	mov	r3,r2
   50f30:	003f1c06 	br	50ba4 <__alt_data_end+0xfffdeba4>
   50f34:	0005883a 	mov	r2,zero
   50f38:	0007883a 	mov	r3,zero
   50f3c:	003f1906 	br	50ba4 <__alt_data_end+0xfffdeba4>
   50f40:	0005883a 	mov	r2,zero
   50f44:	0007883a 	mov	r3,zero
   50f48:	003ebd06 	br	50a40 <__alt_data_end+0xfffdea40>
   50f4c:	0007883a 	mov	r3,zero
   50f50:	00800044 	movi	r2,1
   50f54:	003f4d06 	br	50c8c <__alt_data_end+0xfffdec8c>
   50f58:	197f942e 	bgeu	r3,r5,50dac <__alt_data_end+0xfffdedac>
   50f5c:	10bfff84 	addi	r2,r2,-2
   50f60:	1dc7883a 	add	r3,r3,r23
   50f64:	003f9206 	br	50db0 <__alt_data_end+0xfffdedb0>
   50f68:	15bf7e2e 	bgeu	r2,r22,50d64 <__alt_data_end+0xfffded64>
   50f6c:	843fff84 	addi	r16,r16,-2
   50f70:	15c5883a 	add	r2,r2,r23
   50f74:	003f7c06 	br	50d68 <__alt_data_end+0xfffded68>
   50f78:	2807883a 	mov	r3,r5
   50f7c:	003fd206 	br	50ec8 <__alt_data_end+0xfffdeec8>
   50f80:	102f883a 	mov	r23,r2
   50f84:	003fbc06 	br	50e78 <__alt_data_end+0xfffdee78>
   50f88:	843fff84 	addi	r16,r16,-2
   50f8c:	2489883a 	add	r4,r4,r18
   50f90:	003f2506 	br	50c28 <__alt_data_end+0xfffdec28>
   50f94:	843fff84 	addi	r16,r16,-2
   50f98:	1485883a 	add	r2,r2,r18
   50f9c:	003eca06 	br	50ac8 <__alt_data_end+0xfffdeac8>

00050fa0 <__umoddi3>:
   50fa0:	defff404 	addi	sp,sp,-48
   50fa4:	ddc00915 	stw	r23,36(sp)
   50fa8:	dc400315 	stw	r17,12(sp)
   50fac:	dc000215 	stw	r16,8(sp)
   50fb0:	dfc00b15 	stw	ra,44(sp)
   50fb4:	df000a15 	stw	fp,40(sp)
   50fb8:	dd800815 	stw	r22,32(sp)
   50fbc:	dd400715 	stw	r21,28(sp)
   50fc0:	dd000615 	stw	r20,24(sp)
   50fc4:	dcc00515 	stw	r19,20(sp)
   50fc8:	dc800415 	stw	r18,16(sp)
   50fcc:	2021883a 	mov	r16,r4
   50fd0:	2823883a 	mov	r17,r5
   50fd4:	282f883a 	mov	r23,r5
   50fd8:	3800381e 	bne	r7,zero,510bc <__umoddi3+0x11c>
   50fdc:	3027883a 	mov	r19,r6
   50fe0:	2029883a 	mov	r20,r4
   50fe4:	29804e2e 	bgeu	r5,r6,51120 <__umoddi3+0x180>
   50fe8:	00bfffd4 	movui	r2,65535
   50fec:	11809c36 	bltu	r2,r6,51260 <__umoddi3+0x2c0>
   50ff0:	00803fc4 	movi	r2,255
   50ff4:	11813b2e 	bgeu	r2,r6,514e4 <__umoddi3+0x544>
   50ff8:	01400204 	movi	r5,8
   50ffc:	2805883a 	mov	r2,r5
   51000:	314ad83a 	srl	r5,r6,r5
   51004:	00c00174 	movhi	r3,5
   51008:	18d29004 	addi	r3,r3,19008
   5100c:	194b883a 	add	r5,r3,r5
   51010:	29000003 	ldbu	r4,0(r5)
   51014:	2089883a 	add	r4,r4,r2
   51018:	00800804 	movi	r2,32
   5101c:	1105c83a 	sub	r2,r2,r4
   51020:	1000ec26 	beq	r2,zero,513d4 <__umoddi3+0x434>
   51024:	88a2983a 	sll	r17,r17,r2
   51028:	8108d83a 	srl	r4,r16,r4
   5102c:	30a6983a 	sll	r19,r6,r2
   51030:	80a8983a 	sll	r20,r16,r2
   51034:	1025883a 	mov	r18,r2
   51038:	892eb03a 	or	r23,r17,r4
   5103c:	982cd43a 	srli	r22,r19,16
   51040:	b809883a 	mov	r4,r23
   51044:	9d7fffcc 	andi	r21,r19,65535
   51048:	b00b883a 	mov	r5,r22
   5104c:	0044bb80 	call	44bb8 <__umodsi3>
   51050:	b809883a 	mov	r4,r23
   51054:	b00b883a 	mov	r5,r22
   51058:	1021883a 	mov	r16,r2
   5105c:	0044bb00 	call	44bb0 <__udivsi3>
   51060:	8020943a 	slli	r16,r16,16
   51064:	a00cd43a 	srli	r6,r20,16
   51068:	1545383a 	mul	r2,r2,r21
   5106c:	8188b03a 	or	r4,r16,r6
   51070:	2080042e 	bgeu	r4,r2,51084 <__umoddi3+0xe4>
   51074:	24c9883a 	add	r4,r4,r19
   51078:	24c00236 	bltu	r4,r19,51084 <__umoddi3+0xe4>
   5107c:	2080012e 	bgeu	r4,r2,51084 <__umoddi3+0xe4>
   51080:	24c9883a 	add	r4,r4,r19
   51084:	20a3c83a 	sub	r17,r4,r2
   51088:	8809883a 	mov	r4,r17
   5108c:	b00b883a 	mov	r5,r22
   51090:	0044bb80 	call	44bb8 <__umodsi3>
   51094:	8809883a 	mov	r4,r17
   51098:	b00b883a 	mov	r5,r22
   5109c:	1021883a 	mov	r16,r2
   510a0:	0044bb00 	call	44bb0 <__udivsi3>
   510a4:	8006943a 	slli	r3,r16,16
   510a8:	1545383a 	mul	r2,r2,r21
   510ac:	a13fffcc 	andi	r4,r20,65535
   510b0:	1906b03a 	or	r3,r3,r4
   510b4:	1880532e 	bgeu	r3,r2,51204 <__umoddi3+0x264>
   510b8:	00004e06 	br	511f4 <__umoddi3+0x254>
   510bc:	29c05536 	bltu	r5,r7,51214 <__umoddi3+0x274>
   510c0:	00bfffd4 	movui	r2,65535
   510c4:	11c0612e 	bgeu	r2,r7,5124c <__umoddi3+0x2ac>
   510c8:	00804034 	movhi	r2,256
   510cc:	10bfffc4 	addi	r2,r2,-1
   510d0:	11c0f82e 	bgeu	r2,r7,514b4 <__umoddi3+0x514>
   510d4:	01400604 	movi	r5,24
   510d8:	282b883a 	mov	r21,r5
   510dc:	394ad83a 	srl	r5,r7,r5
   510e0:	00c00174 	movhi	r3,5
   510e4:	18d29004 	addi	r3,r3,19008
   510e8:	194b883a 	add	r5,r3,r5
   510ec:	28800003 	ldbu	r2,0(r5)
   510f0:	00c00804 	movi	r3,32
   510f4:	156b883a 	add	r21,r2,r21
   510f8:	1d69c83a 	sub	r20,r3,r21
   510fc:	a000631e 	bne	r20,zero,5128c <__umoddi3+0x2ec>
   51100:	3c400136 	bltu	r7,r17,51108 <__umoddi3+0x168>
   51104:	81810436 	bltu	r16,r6,51518 <__umoddi3+0x578>
   51108:	8185c83a 	sub	r2,r16,r6
   5110c:	89e3c83a 	sub	r17,r17,r7
   51110:	8087803a 	cmpltu	r3,r16,r2
   51114:	88efc83a 	sub	r23,r17,r3
   51118:	b807883a 	mov	r3,r23
   5111c:	00003f06 	br	5121c <__umoddi3+0x27c>
   51120:	3000041e 	bne	r6,zero,51134 <__umoddi3+0x194>
   51124:	01000044 	movi	r4,1
   51128:	000b883a 	mov	r5,zero
   5112c:	0044bb00 	call	44bb0 <__udivsi3>
   51130:	1027883a 	mov	r19,r2
   51134:	00bfffd4 	movui	r2,65535
   51138:	14c04f2e 	bgeu	r2,r19,51278 <__umoddi3+0x2d8>
   5113c:	00804034 	movhi	r2,256
   51140:	10bfffc4 	addi	r2,r2,-1
   51144:	14c0e42e 	bgeu	r2,r19,514d8 <__umoddi3+0x538>
   51148:	00800604 	movi	r2,24
   5114c:	1007883a 	mov	r3,r2
   51150:	9884d83a 	srl	r2,r19,r2
   51154:	01000174 	movhi	r4,5
   51158:	21129004 	addi	r4,r4,19008
   5115c:	2085883a 	add	r2,r4,r2
   51160:	11000003 	ldbu	r4,0(r2)
   51164:	00800804 	movi	r2,32
   51168:	20c7883a 	add	r3,r4,r3
   5116c:	10c5c83a 	sub	r2,r2,r3
   51170:	10009a1e 	bne	r2,zero,513dc <__umoddi3+0x43c>
   51174:	982cd43a 	srli	r22,r19,16
   51178:	8ce3c83a 	sub	r17,r17,r19
   5117c:	9c3fffcc 	andi	r16,r19,65535
   51180:	0025883a 	mov	r18,zero
   51184:	8809883a 	mov	r4,r17
   51188:	b00b883a 	mov	r5,r22
   5118c:	0044bb80 	call	44bb8 <__umodsi3>
   51190:	8809883a 	mov	r4,r17
   51194:	b00b883a 	mov	r5,r22
   51198:	102b883a 	mov	r21,r2
   5119c:	0044bb00 	call	44bb0 <__udivsi3>
   511a0:	a806943a 	slli	r3,r21,16
   511a4:	a008d43a 	srli	r4,r20,16
   511a8:	1405383a 	mul	r2,r2,r16
   511ac:	190cb03a 	or	r6,r3,r4
   511b0:	3080032e 	bgeu	r6,r2,511c0 <__umoddi3+0x220>
   511b4:	34cd883a 	add	r6,r6,r19
   511b8:	34c00136 	bltu	r6,r19,511c0 <__umoddi3+0x220>
   511bc:	3080d436 	bltu	r6,r2,51510 <__umoddi3+0x570>
   511c0:	30abc83a 	sub	r21,r6,r2
   511c4:	a809883a 	mov	r4,r21
   511c8:	b00b883a 	mov	r5,r22
   511cc:	0044bb80 	call	44bb8 <__umodsi3>
   511d0:	1023883a 	mov	r17,r2
   511d4:	a809883a 	mov	r4,r21
   511d8:	b00b883a 	mov	r5,r22
   511dc:	0044bb00 	call	44bb0 <__udivsi3>
   511e0:	8822943a 	slli	r17,r17,16
   511e4:	1405383a 	mul	r2,r2,r16
   511e8:	a13fffcc 	andi	r4,r20,65535
   511ec:	8906b03a 	or	r3,r17,r4
   511f0:	1880042e 	bgeu	r3,r2,51204 <__umoddi3+0x264>
   511f4:	1cc7883a 	add	r3,r3,r19
   511f8:	1cc00236 	bltu	r3,r19,51204 <__umoddi3+0x264>
   511fc:	1880012e 	bgeu	r3,r2,51204 <__umoddi3+0x264>
   51200:	1cc7883a 	add	r3,r3,r19
   51204:	1887c83a 	sub	r3,r3,r2
   51208:	1c84d83a 	srl	r2,r3,r18
   5120c:	0007883a 	mov	r3,zero
   51210:	00000206 	br	5121c <__umoddi3+0x27c>
   51214:	2005883a 	mov	r2,r4
   51218:	2807883a 	mov	r3,r5
   5121c:	dfc00b17 	ldw	ra,44(sp)
   51220:	df000a17 	ldw	fp,40(sp)
   51224:	ddc00917 	ldw	r23,36(sp)
   51228:	dd800817 	ldw	r22,32(sp)
   5122c:	dd400717 	ldw	r21,28(sp)
   51230:	dd000617 	ldw	r20,24(sp)
   51234:	dcc00517 	ldw	r19,20(sp)
   51238:	dc800417 	ldw	r18,16(sp)
   5123c:	dc400317 	ldw	r17,12(sp)
   51240:	dc000217 	ldw	r16,8(sp)
   51244:	dec00c04 	addi	sp,sp,48
   51248:	f800283a 	ret
   5124c:	00803fc4 	movi	r2,255
   51250:	11c0952e 	bgeu	r2,r7,514a8 <__umoddi3+0x508>
   51254:	01400204 	movi	r5,8
   51258:	282b883a 	mov	r21,r5
   5125c:	003f9f06 	br	510dc <__alt_data_end+0xfffdf0dc>
   51260:	00804034 	movhi	r2,256
   51264:	10bfffc4 	addi	r2,r2,-1
   51268:	1180952e 	bgeu	r2,r6,514c0 <__umoddi3+0x520>
   5126c:	01400604 	movi	r5,24
   51270:	2805883a 	mov	r2,r5
   51274:	003f6206 	br	51000 <__alt_data_end+0xfffdf000>
   51278:	00803fc4 	movi	r2,255
   5127c:	14c0932e 	bgeu	r2,r19,514cc <__umoddi3+0x52c>
   51280:	00800204 	movi	r2,8
   51284:	1007883a 	mov	r3,r2
   51288:	003fb106 	br	51150 <__alt_data_end+0xfffdf150>
   5128c:	3548d83a 	srl	r4,r6,r21
   51290:	3d0e983a 	sll	r7,r7,r20
   51294:	8d10983a 	sll	r8,r17,r20
   51298:	8d6cd83a 	srl	r22,r17,r21
   5129c:	3922b03a 	or	r17,r7,r4
   512a0:	882ed43a 	srli	r23,r17,16
   512a4:	8564d83a 	srl	r18,r16,r21
   512a8:	b009883a 	mov	r4,r22
   512ac:	b80b883a 	mov	r5,r23
   512b0:	44a4b03a 	or	r18,r8,r18
   512b4:	3526983a 	sll	r19,r6,r20
   512b8:	0044bb80 	call	44bb8 <__umodsi3>
   512bc:	b009883a 	mov	r4,r22
   512c0:	b80b883a 	mov	r5,r23
   512c4:	1039883a 	mov	fp,r2
   512c8:	0044bb00 	call	44bb0 <__udivsi3>
   512cc:	102d883a 	mov	r22,r2
   512d0:	8a3fffcc 	andi	r8,r17,65535
   512d4:	e004943a 	slli	r2,fp,16
   512d8:	900cd43a 	srli	r6,r18,16
   512dc:	b239383a 	mul	fp,r22,r8
   512e0:	8520983a 	sll	r16,r16,r20
   512e4:	118ab03a 	or	r5,r2,r6
   512e8:	2f00042e 	bgeu	r5,fp,512fc <__umoddi3+0x35c>
   512ec:	2c4b883a 	add	r5,r5,r17
   512f0:	b0bfffc4 	addi	r2,r22,-1
   512f4:	2c40822e 	bgeu	r5,r17,51500 <__umoddi3+0x560>
   512f8:	102d883a 	mov	r22,r2
   512fc:	2f39c83a 	sub	fp,r5,fp
   51300:	e009883a 	mov	r4,fp
   51304:	b80b883a 	mov	r5,r23
   51308:	da000115 	stw	r8,4(sp)
   5130c:	0044bb80 	call	44bb8 <__umodsi3>
   51310:	e009883a 	mov	r4,fp
   51314:	b80b883a 	mov	r5,r23
   51318:	d8800015 	stw	r2,0(sp)
   5131c:	0044bb00 	call	44bb0 <__udivsi3>
   51320:	d9800017 	ldw	r6,0(sp)
   51324:	da000117 	ldw	r8,4(sp)
   51328:	94bfffcc 	andi	r18,r18,65535
   5132c:	300c943a 	slli	r6,r6,16
   51330:	1209383a 	mul	r4,r2,r8
   51334:	3490b03a 	or	r8,r6,r18
   51338:	4100042e 	bgeu	r8,r4,5134c <__umoddi3+0x3ac>
   5133c:	4451883a 	add	r8,r8,r17
   51340:	10ffffc4 	addi	r3,r2,-1
   51344:	44406a2e 	bgeu	r8,r17,514f0 <__umoddi3+0x550>
   51348:	1805883a 	mov	r2,r3
   5134c:	b012943a 	slli	r9,r22,16
   51350:	9abfffcc 	andi	r10,r19,65535
   51354:	980ed43a 	srli	r7,r19,16
   51358:	124ab03a 	or	r5,r2,r9
   5135c:	2a7fffcc 	andi	r9,r5,65535
   51360:	280ad43a 	srli	r5,r5,16
   51364:	4a8d383a 	mul	r6,r9,r10
   51368:	49d3383a 	mul	r9,r9,r7
   5136c:	2a95383a 	mul	r10,r5,r10
   51370:	3004d43a 	srli	r2,r6,16
   51374:	4111c83a 	sub	r8,r8,r4
   51378:	5253883a 	add	r9,r10,r9
   5137c:	4893883a 	add	r9,r9,r2
   51380:	29cb383a 	mul	r5,r5,r7
   51384:	4a80022e 	bgeu	r9,r10,51390 <__umoddi3+0x3f0>
   51388:	00800074 	movhi	r2,1
   5138c:	288b883a 	add	r5,r5,r2
   51390:	4808d43a 	srli	r4,r9,16
   51394:	4812943a 	slli	r9,r9,16
   51398:	31bfffcc 	andi	r6,r6,65535
   5139c:	290b883a 	add	r5,r5,r4
   513a0:	498d883a 	add	r6,r9,r6
   513a4:	41403a36 	bltu	r8,r5,51490 <__umoddi3+0x4f0>
   513a8:	41405d26 	beq	r8,r5,51520 <__umoddi3+0x580>
   513ac:	4149c83a 	sub	r4,r8,r5
   513b0:	300f883a 	mov	r7,r6
   513b4:	81cfc83a 	sub	r7,r16,r7
   513b8:	81c7803a 	cmpltu	r3,r16,r7
   513bc:	20c7c83a 	sub	r3,r4,r3
   513c0:	1d44983a 	sll	r2,r3,r21
   513c4:	3d0ed83a 	srl	r7,r7,r20
   513c8:	1d06d83a 	srl	r3,r3,r20
   513cc:	11c4b03a 	or	r2,r2,r7
   513d0:	003f9206 	br	5121c <__alt_data_end+0xfffdf21c>
   513d4:	0025883a 	mov	r18,zero
   513d8:	003f1806 	br	5103c <__alt_data_end+0xfffdf03c>
   513dc:	98a6983a 	sll	r19,r19,r2
   513e0:	88e8d83a 	srl	r20,r17,r3
   513e4:	80c6d83a 	srl	r3,r16,r3
   513e8:	982cd43a 	srli	r22,r19,16
   513ec:	88a2983a 	sll	r17,r17,r2
   513f0:	a009883a 	mov	r4,r20
   513f4:	b00b883a 	mov	r5,r22
   513f8:	88eab03a 	or	r21,r17,r3
   513fc:	1025883a 	mov	r18,r2
   51400:	0044bb80 	call	44bb8 <__umodsi3>
   51404:	a009883a 	mov	r4,r20
   51408:	b00b883a 	mov	r5,r22
   5140c:	1023883a 	mov	r17,r2
   51410:	0044bb00 	call	44bb0 <__udivsi3>
   51414:	9f3fffcc 	andi	fp,r19,65535
   51418:	8822943a 	slli	r17,r17,16
   5141c:	a80ad43a 	srli	r5,r21,16
   51420:	1705383a 	mul	r2,r2,fp
   51424:	84a8983a 	sll	r20,r16,r18
   51428:	8948b03a 	or	r4,r17,r5
   5142c:	2080042e 	bgeu	r4,r2,51440 <__umoddi3+0x4a0>
   51430:	24c9883a 	add	r4,r4,r19
   51434:	24c00236 	bltu	r4,r19,51440 <__umoddi3+0x4a0>
   51438:	2080012e 	bgeu	r4,r2,51440 <__umoddi3+0x4a0>
   5143c:	24c9883a 	add	r4,r4,r19
   51440:	20afc83a 	sub	r23,r4,r2
   51444:	b809883a 	mov	r4,r23
   51448:	b00b883a 	mov	r5,r22
   5144c:	0044bb80 	call	44bb8 <__umodsi3>
   51450:	1023883a 	mov	r17,r2
   51454:	b809883a 	mov	r4,r23
   51458:	b00b883a 	mov	r5,r22
   5145c:	0044bb00 	call	44bb0 <__udivsi3>
   51460:	8822943a 	slli	r17,r17,16
   51464:	1705383a 	mul	r2,r2,fp
   51468:	a93fffcc 	andi	r4,r21,65535
   5146c:	8908b03a 	or	r4,r17,r4
   51470:	2080042e 	bgeu	r4,r2,51484 <__umoddi3+0x4e4>
   51474:	24c9883a 	add	r4,r4,r19
   51478:	24c00236 	bltu	r4,r19,51484 <__umoddi3+0x4e4>
   5147c:	2080012e 	bgeu	r4,r2,51484 <__umoddi3+0x4e4>
   51480:	24c9883a 	add	r4,r4,r19
   51484:	20a3c83a 	sub	r17,r4,r2
   51488:	e021883a 	mov	r16,fp
   5148c:	003f3d06 	br	51184 <__alt_data_end+0xfffdf184>
   51490:	34cfc83a 	sub	r7,r6,r19
   51494:	2c4bc83a 	sub	r5,r5,r17
   51498:	31cd803a 	cmpltu	r6,r6,r7
   5149c:	298dc83a 	sub	r6,r5,r6
   514a0:	4189c83a 	sub	r4,r8,r6
   514a4:	003fc306 	br	513b4 <__alt_data_end+0xfffdf3b4>
   514a8:	000b883a 	mov	r5,zero
   514ac:	002b883a 	mov	r21,zero
   514b0:	003f0a06 	br	510dc <__alt_data_end+0xfffdf0dc>
   514b4:	01400404 	movi	r5,16
   514b8:	282b883a 	mov	r21,r5
   514bc:	003f0706 	br	510dc <__alt_data_end+0xfffdf0dc>
   514c0:	01400404 	movi	r5,16
   514c4:	2805883a 	mov	r2,r5
   514c8:	003ecd06 	br	51000 <__alt_data_end+0xfffdf000>
   514cc:	0005883a 	mov	r2,zero
   514d0:	0007883a 	mov	r3,zero
   514d4:	003f1e06 	br	51150 <__alt_data_end+0xfffdf150>
   514d8:	00800404 	movi	r2,16
   514dc:	1007883a 	mov	r3,r2
   514e0:	003f1b06 	br	51150 <__alt_data_end+0xfffdf150>
   514e4:	000b883a 	mov	r5,zero
   514e8:	0005883a 	mov	r2,zero
   514ec:	003ec406 	br	51000 <__alt_data_end+0xfffdf000>
   514f0:	413f952e 	bgeu	r8,r4,51348 <__alt_data_end+0xfffdf348>
   514f4:	10bfff84 	addi	r2,r2,-2
   514f8:	4451883a 	add	r8,r8,r17
   514fc:	003f9306 	br	5134c <__alt_data_end+0xfffdf34c>
   51500:	2f3f7d2e 	bgeu	r5,fp,512f8 <__alt_data_end+0xfffdf2f8>
   51504:	b5bfff84 	addi	r22,r22,-2
   51508:	2c4b883a 	add	r5,r5,r17
   5150c:	003f7b06 	br	512fc <__alt_data_end+0xfffdf2fc>
   51510:	34cd883a 	add	r6,r6,r19
   51514:	003f2a06 	br	511c0 <__alt_data_end+0xfffdf1c0>
   51518:	8005883a 	mov	r2,r16
   5151c:	003efe06 	br	51118 <__alt_data_end+0xfffdf118>
   51520:	81bfdb36 	bltu	r16,r6,51490 <__alt_data_end+0xfffdf490>
   51524:	300f883a 	mov	r7,r6
   51528:	0009883a 	mov	r4,zero
   5152c:	003fa106 	br	513b4 <__alt_data_end+0xfffdf3b4>

00051530 <__ledf2>:
   51530:	2804d53a 	srli	r2,r5,20
   51534:	3810d53a 	srli	r8,r7,20
   51538:	00c00434 	movhi	r3,16
   5153c:	18ffffc4 	addi	r3,r3,-1
   51540:	0241ffc4 	movi	r9,2047
   51544:	1081ffcc 	andi	r2,r2,2047
   51548:	28d4703a 	and	r10,r5,r3
   5154c:	4250703a 	and	r8,r8,r9
   51550:	38c6703a 	and	r3,r7,r3
   51554:	280ad7fa 	srli	r5,r5,31
   51558:	380ed7fa 	srli	r7,r7,31
   5155c:	12400b26 	beq	r2,r9,5158c <__ledf2+0x5c>
   51560:	42401926 	beq	r8,r9,515c8 <__ledf2+0x98>
   51564:	10000c1e 	bne	r2,zero,51598 <__ledf2+0x68>
   51568:	5112b03a 	or	r9,r10,r4
   5156c:	4813003a 	cmpeq	r9,r9,zero
   51570:	4817883a 	mov	r11,r9
   51574:	40000f26 	beq	r8,zero,515b4 <__ledf2+0x84>
   51578:	39c03fcc 	andi	r7,r7,255
   5157c:	58001826 	beq	r11,zero,515e0 <__ledf2+0xb0>
   51580:	38000a1e 	bne	r7,zero,515ac <__ledf2+0x7c>
   51584:	00bfffc4 	movi	r2,-1
   51588:	f800283a 	ret
   5158c:	5112b03a 	or	r9,r10,r4
   51590:	48000f1e 	bne	r9,zero,515d0 <__ledf2+0xa0>
   51594:	40800c26 	beq	r8,r2,515c8 <__ledf2+0x98>
   51598:	4000101e 	bne	r8,zero,515dc <__ledf2+0xac>
   5159c:	1992b03a 	or	r9,r3,r6
   515a0:	0017883a 	mov	r11,zero
   515a4:	483ff41e 	bne	r9,zero,51578 <__alt_data_end+0xfffdf578>
   515a8:	283ff61e 	bne	r5,zero,51584 <__alt_data_end+0xfffdf584>
   515ac:	00800044 	movi	r2,1
   515b0:	f800283a 	ret
   515b4:	1998b03a 	or	r12,r3,r6
   515b8:	603fef1e 	bne	r12,zero,51578 <__alt_data_end+0xfffdf578>
   515bc:	483ffa26 	beq	r9,zero,515a8 <__alt_data_end+0xfffdf5a8>
   515c0:	0005883a 	mov	r2,zero
   515c4:	f800283a 	ret
   515c8:	1992b03a 	or	r9,r3,r6
   515cc:	48000226 	beq	r9,zero,515d8 <__ledf2+0xa8>
   515d0:	00800084 	movi	r2,2
   515d4:	f800283a 	ret
   515d8:	103fe326 	beq	r2,zero,51568 <__alt_data_end+0xfffdf568>
   515dc:	39c03fcc 	andi	r7,r7,255
   515e0:	29fff11e 	bne	r5,r7,515a8 <__alt_data_end+0xfffdf5a8>
   515e4:	40bff016 	blt	r8,r2,515a8 <__alt_data_end+0xfffdf5a8>
   515e8:	12000316 	blt	r2,r8,515f8 <__ledf2+0xc8>
   515ec:	1abfee36 	bltu	r3,r10,515a8 <__alt_data_end+0xfffdf5a8>
   515f0:	50c00326 	beq	r10,r3,51600 <__ledf2+0xd0>
   515f4:	50fff22e 	bgeu	r10,r3,515c0 <__alt_data_end+0xfffdf5c0>
   515f8:	283fe226 	beq	r5,zero,51584 <__alt_data_end+0xfffdf584>
   515fc:	003feb06 	br	515ac <__alt_data_end+0xfffdf5ac>
   51600:	313fe936 	bltu	r6,r4,515a8 <__alt_data_end+0xfffdf5a8>
   51604:	21bfee2e 	bgeu	r4,r6,515c0 <__alt_data_end+0xfffdf5c0>
   51608:	283fde26 	beq	r5,zero,51584 <__alt_data_end+0xfffdf584>
   5160c:	003fe706 	br	515ac <__alt_data_end+0xfffdf5ac>

00051610 <__floatunsidf>:
   51610:	defffe04 	addi	sp,sp,-8
   51614:	dc000015 	stw	r16,0(sp)
   51618:	dfc00115 	stw	ra,4(sp)
   5161c:	2021883a 	mov	r16,r4
   51620:	20001026 	beq	r4,zero,51664 <__floatunsidf+0x54>
   51624:	0047f600 	call	47f60 <__clzsi2>
   51628:	01410784 	movi	r5,1054
   5162c:	100d883a 	mov	r6,r2
   51630:	288bc83a 	sub	r5,r5,r2
   51634:	00800284 	movi	r2,10
   51638:	11801616 	blt	r2,r6,51694 <__floatunsidf+0x84>
   5163c:	008002c4 	movi	r2,11
   51640:	1185c83a 	sub	r2,r2,r6
   51644:	8084d83a 	srl	r2,r16,r2
   51648:	00c00434 	movhi	r3,16
   5164c:	31c00544 	addi	r7,r6,21
   51650:	18ffffc4 	addi	r3,r3,-1
   51654:	81e0983a 	sll	r16,r16,r7
   51658:	10cc703a 	and	r6,r2,r3
   5165c:	2941ffcc 	andi	r5,r5,2047
   51660:	00000206 	br	5166c <__floatunsidf+0x5c>
   51664:	000b883a 	mov	r5,zero
   51668:	000d883a 	mov	r6,zero
   5166c:	280a953a 	slli	r5,r5,20
   51670:	00c00434 	movhi	r3,16
   51674:	18ffffc4 	addi	r3,r3,-1
   51678:	30c6703a 	and	r3,r6,r3
   5167c:	8005883a 	mov	r2,r16
   51680:	1946b03a 	or	r3,r3,r5
   51684:	dfc00117 	ldw	ra,4(sp)
   51688:	dc000017 	ldw	r16,0(sp)
   5168c:	dec00204 	addi	sp,sp,8
   51690:	f800283a 	ret
   51694:	31bffd44 	addi	r6,r6,-11
   51698:	818c983a 	sll	r6,r16,r6
   5169c:	00800434 	movhi	r2,16
   516a0:	10bfffc4 	addi	r2,r2,-1
   516a4:	2941ffcc 	andi	r5,r5,2047
   516a8:	0021883a 	mov	r16,zero
   516ac:	308c703a 	and	r6,r6,r2
   516b0:	003fee06 	br	5166c <__alt_data_end+0xfffdf66c>

000516b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   516b4:	defffe04 	addi	sp,sp,-8
   516b8:	dfc00115 	stw	ra,4(sp)
   516bc:	df000015 	stw	fp,0(sp)
   516c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   516c4:	00800174 	movhi	r2,5
   516c8:	109a6804 	addi	r2,r2,27040
   516cc:	10800017 	ldw	r2,0(r2)
   516d0:	10000526 	beq	r2,zero,516e8 <alt_get_errno+0x34>
   516d4:	00800174 	movhi	r2,5
   516d8:	109a6804 	addi	r2,r2,27040
   516dc:	10800017 	ldw	r2,0(r2)
   516e0:	103ee83a 	callr	r2
   516e4:	00000206 	br	516f0 <alt_get_errno+0x3c>
   516e8:	008001b4 	movhi	r2,6
   516ec:	10a1a604 	addi	r2,r2,-31080
}
   516f0:	e037883a 	mov	sp,fp
   516f4:	dfc00117 	ldw	ra,4(sp)
   516f8:	df000017 	ldw	fp,0(sp)
   516fc:	dec00204 	addi	sp,sp,8
   51700:	f800283a 	ret

00051704 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   51704:	defffb04 	addi	sp,sp,-20
   51708:	dfc00415 	stw	ra,16(sp)
   5170c:	df000315 	stw	fp,12(sp)
   51710:	df000304 	addi	fp,sp,12
   51714:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   51718:	e0bfff17 	ldw	r2,-4(fp)
   5171c:	10000616 	blt	r2,zero,51738 <close+0x34>
   51720:	e0bfff17 	ldw	r2,-4(fp)
   51724:	10c00324 	muli	r3,r2,12
   51728:	00800174 	movhi	r2,5
   5172c:	1095a904 	addi	r2,r2,22180
   51730:	1885883a 	add	r2,r3,r2
   51734:	00000106 	br	5173c <close+0x38>
   51738:	0005883a 	mov	r2,zero
   5173c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   51740:	e0bffd17 	ldw	r2,-12(fp)
   51744:	10001926 	beq	r2,zero,517ac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   51748:	e0bffd17 	ldw	r2,-12(fp)
   5174c:	10800017 	ldw	r2,0(r2)
   51750:	10800417 	ldw	r2,16(r2)
   51754:	10000626 	beq	r2,zero,51770 <close+0x6c>
   51758:	e0bffd17 	ldw	r2,-12(fp)
   5175c:	10800017 	ldw	r2,0(r2)
   51760:	10800417 	ldw	r2,16(r2)
   51764:	e13ffd17 	ldw	r4,-12(fp)
   51768:	103ee83a 	callr	r2
   5176c:	00000106 	br	51774 <close+0x70>
   51770:	0005883a 	mov	r2,zero
   51774:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   51778:	e13fff17 	ldw	r4,-4(fp)
   5177c:	00522240 	call	52224 <alt_release_fd>
    if (rval < 0)
   51780:	e0bffe17 	ldw	r2,-8(fp)
   51784:	1000070e 	bge	r2,zero,517a4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   51788:	00516b40 	call	516b4 <alt_get_errno>
   5178c:	1007883a 	mov	r3,r2
   51790:	e0bffe17 	ldw	r2,-8(fp)
   51794:	0085c83a 	sub	r2,zero,r2
   51798:	18800015 	stw	r2,0(r3)
      return -1;
   5179c:	00bfffc4 	movi	r2,-1
   517a0:	00000706 	br	517c0 <close+0xbc>
    }
    return 0;
   517a4:	0005883a 	mov	r2,zero
   517a8:	00000506 	br	517c0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   517ac:	00516b40 	call	516b4 <alt_get_errno>
   517b0:	1007883a 	mov	r3,r2
   517b4:	00801444 	movi	r2,81
   517b8:	18800015 	stw	r2,0(r3)
    return -1;
   517bc:	00bfffc4 	movi	r2,-1
  }
}
   517c0:	e037883a 	mov	sp,fp
   517c4:	dfc00117 	ldw	ra,4(sp)
   517c8:	df000017 	ldw	fp,0(sp)
   517cc:	dec00204 	addi	sp,sp,8
   517d0:	f800283a 	ret

000517d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   517d4:	defffc04 	addi	sp,sp,-16
   517d8:	df000315 	stw	fp,12(sp)
   517dc:	df000304 	addi	fp,sp,12
   517e0:	e13ffd15 	stw	r4,-12(fp)
   517e4:	e17ffe15 	stw	r5,-8(fp)
   517e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   517ec:	e0bfff17 	ldw	r2,-4(fp)
}
   517f0:	e037883a 	mov	sp,fp
   517f4:	df000017 	ldw	fp,0(sp)
   517f8:	dec00104 	addi	sp,sp,4
   517fc:	f800283a 	ret

00051800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51800:	defffe04 	addi	sp,sp,-8
   51804:	dfc00115 	stw	ra,4(sp)
   51808:	df000015 	stw	fp,0(sp)
   5180c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51810:	00800174 	movhi	r2,5
   51814:	109a6804 	addi	r2,r2,27040
   51818:	10800017 	ldw	r2,0(r2)
   5181c:	10000526 	beq	r2,zero,51834 <alt_get_errno+0x34>
   51820:	00800174 	movhi	r2,5
   51824:	109a6804 	addi	r2,r2,27040
   51828:	10800017 	ldw	r2,0(r2)
   5182c:	103ee83a 	callr	r2
   51830:	00000206 	br	5183c <alt_get_errno+0x3c>
   51834:	008001b4 	movhi	r2,6
   51838:	10a1a604 	addi	r2,r2,-31080
}
   5183c:	e037883a 	mov	sp,fp
   51840:	dfc00117 	ldw	ra,4(sp)
   51844:	df000017 	ldw	fp,0(sp)
   51848:	dec00204 	addi	sp,sp,8
   5184c:	f800283a 	ret

00051850 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   51850:	defffb04 	addi	sp,sp,-20
   51854:	dfc00415 	stw	ra,16(sp)
   51858:	df000315 	stw	fp,12(sp)
   5185c:	df000304 	addi	fp,sp,12
   51860:	e13ffe15 	stw	r4,-8(fp)
   51864:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51868:	e0bffe17 	ldw	r2,-8(fp)
   5186c:	10000616 	blt	r2,zero,51888 <fstat+0x38>
   51870:	e0bffe17 	ldw	r2,-8(fp)
   51874:	10c00324 	muli	r3,r2,12
   51878:	00800174 	movhi	r2,5
   5187c:	1095a904 	addi	r2,r2,22180
   51880:	1885883a 	add	r2,r3,r2
   51884:	00000106 	br	5188c <fstat+0x3c>
   51888:	0005883a 	mov	r2,zero
   5188c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   51890:	e0bffd17 	ldw	r2,-12(fp)
   51894:	10001026 	beq	r2,zero,518d8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   51898:	e0bffd17 	ldw	r2,-12(fp)
   5189c:	10800017 	ldw	r2,0(r2)
   518a0:	10800817 	ldw	r2,32(r2)
   518a4:	10000726 	beq	r2,zero,518c4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   518a8:	e0bffd17 	ldw	r2,-12(fp)
   518ac:	10800017 	ldw	r2,0(r2)
   518b0:	10800817 	ldw	r2,32(r2)
   518b4:	e13ffd17 	ldw	r4,-12(fp)
   518b8:	e17fff17 	ldw	r5,-4(fp)
   518bc:	103ee83a 	callr	r2
   518c0:	00000a06 	br	518ec <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   518c4:	e0bfff17 	ldw	r2,-4(fp)
   518c8:	00c80004 	movi	r3,8192
   518cc:	10c00115 	stw	r3,4(r2)
      return 0;
   518d0:	0005883a 	mov	r2,zero
   518d4:	00000506 	br	518ec <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   518d8:	00518000 	call	51800 <alt_get_errno>
   518dc:	1007883a 	mov	r3,r2
   518e0:	00801444 	movi	r2,81
   518e4:	18800015 	stw	r2,0(r3)
    return -1;
   518e8:	00bfffc4 	movi	r2,-1
  }
}
   518ec:	e037883a 	mov	sp,fp
   518f0:	dfc00117 	ldw	ra,4(sp)
   518f4:	df000017 	ldw	fp,0(sp)
   518f8:	dec00204 	addi	sp,sp,8
   518fc:	f800283a 	ret

00051900 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   51900:	defff004 	addi	sp,sp,-64
   51904:	df000f15 	stw	fp,60(sp)
   51908:	df000f04 	addi	fp,sp,60
   5190c:	e13ffd15 	stw	r4,-12(fp)
   51910:	e17ffe15 	stw	r5,-8(fp)
   51914:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   51918:	00bffa84 	movi	r2,-22
   5191c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   51920:	e0bffd17 	ldw	r2,-12(fp)
   51924:	10800828 	cmpgeui	r2,r2,32
   51928:	10005c1e 	bne	r2,zero,51a9c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5192c:	0005303a 	rdctl	r2,status
   51930:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51934:	e0fff317 	ldw	r3,-52(fp)
   51938:	00bfff84 	movi	r2,-2
   5193c:	1884703a 	and	r2,r3,r2
   51940:	1001703a 	wrctl	status,r2
  
  return context;
   51944:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   51948:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   5194c:	008001b4 	movhi	r2,6
   51950:	10a74804 	addi	r2,r2,-25312
   51954:	e0fffd17 	ldw	r3,-12(fp)
   51958:	180690fa 	slli	r3,r3,3
   5195c:	10c5883a 	add	r2,r2,r3
   51960:	e0ffff17 	ldw	r3,-4(fp)
   51964:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   51968:	008001b4 	movhi	r2,6
   5196c:	10a74804 	addi	r2,r2,-25312
   51970:	e0fffd17 	ldw	r3,-12(fp)
   51974:	180690fa 	slli	r3,r3,3
   51978:	18c00104 	addi	r3,r3,4
   5197c:	10c5883a 	add	r2,r2,r3
   51980:	e0fffe17 	ldw	r3,-8(fp)
   51984:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   51988:	e0bfff17 	ldw	r2,-4(fp)
   5198c:	10001f26 	beq	r2,zero,51a0c <alt_irq_register+0x10c>
   51990:	e0bffd17 	ldw	r2,-12(fp)
   51994:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51998:	0005303a 	rdctl	r2,status
   5199c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   519a0:	e0fff517 	ldw	r3,-44(fp)
   519a4:	00bfff84 	movi	r2,-2
   519a8:	1884703a 	and	r2,r3,r2
   519ac:	1001703a 	wrctl	status,r2
  
  return context;
   519b0:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   519b4:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   519b8:	e0bff417 	ldw	r2,-48(fp)
   519bc:	00c00044 	movi	r3,1
   519c0:	1884983a 	sll	r2,r3,r2
   519c4:	1007883a 	mov	r3,r2
   519c8:	008001b4 	movhi	r2,6
   519cc:	10a1a704 	addi	r2,r2,-31076
   519d0:	10800017 	ldw	r2,0(r2)
   519d4:	1886b03a 	or	r3,r3,r2
   519d8:	008001b4 	movhi	r2,6
   519dc:	10a1a704 	addi	r2,r2,-31076
   519e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   519e4:	008001b4 	movhi	r2,6
   519e8:	10a1a704 	addi	r2,r2,-31076
   519ec:	10800017 	ldw	r2,0(r2)
   519f0:	100170fa 	wrctl	ienable,r2
   519f4:	e0bff617 	ldw	r2,-40(fp)
   519f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   519fc:	e0bff717 	ldw	r2,-36(fp)
   51a00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   51a04:	0005883a 	mov	r2,zero
   51a08:	00001f06 	br	51a88 <alt_irq_register+0x188>
   51a0c:	e0bffd17 	ldw	r2,-12(fp)
   51a10:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51a14:	0005303a 	rdctl	r2,status
   51a18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51a1c:	e0fff917 	ldw	r3,-28(fp)
   51a20:	00bfff84 	movi	r2,-2
   51a24:	1884703a 	and	r2,r3,r2
   51a28:	1001703a 	wrctl	status,r2
  
  return context;
   51a2c:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   51a30:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   51a34:	e0bff817 	ldw	r2,-32(fp)
   51a38:	00c00044 	movi	r3,1
   51a3c:	1884983a 	sll	r2,r3,r2
   51a40:	0084303a 	nor	r2,zero,r2
   51a44:	1007883a 	mov	r3,r2
   51a48:	008001b4 	movhi	r2,6
   51a4c:	10a1a704 	addi	r2,r2,-31076
   51a50:	10800017 	ldw	r2,0(r2)
   51a54:	1886703a 	and	r3,r3,r2
   51a58:	008001b4 	movhi	r2,6
   51a5c:	10a1a704 	addi	r2,r2,-31076
   51a60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   51a64:	008001b4 	movhi	r2,6
   51a68:	10a1a704 	addi	r2,r2,-31076
   51a6c:	10800017 	ldw	r2,0(r2)
   51a70:	100170fa 	wrctl	ienable,r2
   51a74:	e0bffa17 	ldw	r2,-24(fp)
   51a78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51a7c:	e0bffb17 	ldw	r2,-20(fp)
   51a80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   51a84:	0005883a 	mov	r2,zero
   51a88:	e0bff115 	stw	r2,-60(fp)
   51a8c:	e0bff217 	ldw	r2,-56(fp)
   51a90:	e0bffc15 	stw	r2,-16(fp)
   51a94:	e0bffc17 	ldw	r2,-16(fp)
   51a98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   51a9c:	e0bff117 	ldw	r2,-60(fp)
}
   51aa0:	e037883a 	mov	sp,fp
   51aa4:	df000017 	ldw	fp,0(sp)
   51aa8:	dec00104 	addi	sp,sp,4
   51aac:	f800283a 	ret

00051ab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51ab0:	defffe04 	addi	sp,sp,-8
   51ab4:	dfc00115 	stw	ra,4(sp)
   51ab8:	df000015 	stw	fp,0(sp)
   51abc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51ac0:	00800174 	movhi	r2,5
   51ac4:	109a6804 	addi	r2,r2,27040
   51ac8:	10800017 	ldw	r2,0(r2)
   51acc:	10000526 	beq	r2,zero,51ae4 <alt_get_errno+0x34>
   51ad0:	00800174 	movhi	r2,5
   51ad4:	109a6804 	addi	r2,r2,27040
   51ad8:	10800017 	ldw	r2,0(r2)
   51adc:	103ee83a 	callr	r2
   51ae0:	00000206 	br	51aec <alt_get_errno+0x3c>
   51ae4:	008001b4 	movhi	r2,6
   51ae8:	10a1a604 	addi	r2,r2,-31080
}
   51aec:	e037883a 	mov	sp,fp
   51af0:	dfc00117 	ldw	ra,4(sp)
   51af4:	df000017 	ldw	fp,0(sp)
   51af8:	dec00204 	addi	sp,sp,8
   51afc:	f800283a 	ret

00051b00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   51b00:	deffed04 	addi	sp,sp,-76
   51b04:	dfc01215 	stw	ra,72(sp)
   51b08:	df001115 	stw	fp,68(sp)
   51b0c:	df001104 	addi	fp,sp,68
   51b10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51b14:	e0bfff17 	ldw	r2,-4(fp)
   51b18:	10000616 	blt	r2,zero,51b34 <isatty+0x34>
   51b1c:	e0bfff17 	ldw	r2,-4(fp)
   51b20:	10c00324 	muli	r3,r2,12
   51b24:	00800174 	movhi	r2,5
   51b28:	1095a904 	addi	r2,r2,22180
   51b2c:	1885883a 	add	r2,r3,r2
   51b30:	00000106 	br	51b38 <isatty+0x38>
   51b34:	0005883a 	mov	r2,zero
   51b38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   51b3c:	e0bfef17 	ldw	r2,-68(fp)
   51b40:	10000e26 	beq	r2,zero,51b7c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   51b44:	e0bfef17 	ldw	r2,-68(fp)
   51b48:	10800017 	ldw	r2,0(r2)
   51b4c:	10800817 	ldw	r2,32(r2)
   51b50:	1000021e 	bne	r2,zero,51b5c <isatty+0x5c>
    {
      return 1;
   51b54:	00800044 	movi	r2,1
   51b58:	00000d06 	br	51b90 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   51b5c:	e0bff004 	addi	r2,fp,-64
   51b60:	e13fff17 	ldw	r4,-4(fp)
   51b64:	100b883a 	mov	r5,r2
   51b68:	00518500 	call	51850 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   51b6c:	e0bff117 	ldw	r2,-60(fp)
   51b70:	10880020 	cmpeqi	r2,r2,8192
   51b74:	10803fcc 	andi	r2,r2,255
   51b78:	00000506 	br	51b90 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51b7c:	0051ab00 	call	51ab0 <alt_get_errno>
   51b80:	1007883a 	mov	r3,r2
   51b84:	00801444 	movi	r2,81
   51b88:	18800015 	stw	r2,0(r3)
    return 0;
   51b8c:	0005883a 	mov	r2,zero
  }
}
   51b90:	e037883a 	mov	sp,fp
   51b94:	dfc00117 	ldw	ra,4(sp)
   51b98:	df000017 	ldw	fp,0(sp)
   51b9c:	dec00204 	addi	sp,sp,8
   51ba0:	f800283a 	ret

00051ba4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   51ba4:	defffc04 	addi	sp,sp,-16
   51ba8:	df000315 	stw	fp,12(sp)
   51bac:	df000304 	addi	fp,sp,12
   51bb0:	e13ffd15 	stw	r4,-12(fp)
   51bb4:	e17ffe15 	stw	r5,-8(fp)
   51bb8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   51bbc:	e0fffe17 	ldw	r3,-8(fp)
   51bc0:	e0bffd17 	ldw	r2,-12(fp)
   51bc4:	18800c26 	beq	r3,r2,51bf8 <alt_load_section+0x54>
  {
    while( to != end )
   51bc8:	00000806 	br	51bec <alt_load_section+0x48>
    {
      *to++ = *from++;
   51bcc:	e0bffe17 	ldw	r2,-8(fp)
   51bd0:	10c00104 	addi	r3,r2,4
   51bd4:	e0fffe15 	stw	r3,-8(fp)
   51bd8:	e0fffd17 	ldw	r3,-12(fp)
   51bdc:	19000104 	addi	r4,r3,4
   51be0:	e13ffd15 	stw	r4,-12(fp)
   51be4:	18c00017 	ldw	r3,0(r3)
   51be8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   51bec:	e0fffe17 	ldw	r3,-8(fp)
   51bf0:	e0bfff17 	ldw	r2,-4(fp)
   51bf4:	18bff51e 	bne	r3,r2,51bcc <__alt_data_end+0xfffdfbcc>
    {
      *to++ = *from++;
    }
  }
}
   51bf8:	e037883a 	mov	sp,fp
   51bfc:	df000017 	ldw	fp,0(sp)
   51c00:	dec00104 	addi	sp,sp,4
   51c04:	f800283a 	ret

00051c08 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   51c08:	defffe04 	addi	sp,sp,-8
   51c0c:	dfc00115 	stw	ra,4(sp)
   51c10:	df000015 	stw	fp,0(sp)
   51c14:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   51c18:	01000174 	movhi	r4,5
   51c1c:	211a6d04 	addi	r4,r4,27060
   51c20:	01400174 	movhi	r5,5
   51c24:	29535104 	addi	r5,r5,19780
   51c28:	01800174 	movhi	r6,5
   51c2c:	319a6d04 	addi	r6,r6,27060
   51c30:	0051ba40 	call	51ba4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   51c34:	01000134 	movhi	r4,4
   51c38:	21000804 	addi	r4,r4,32
   51c3c:	01400134 	movhi	r5,4
   51c40:	29400804 	addi	r5,r5,32
   51c44:	01800134 	movhi	r6,4
   51c48:	31806f04 	addi	r6,r6,444
   51c4c:	0051ba40 	call	51ba4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   51c50:	01000174 	movhi	r4,5
   51c54:	21120e04 	addi	r4,r4,18488
   51c58:	01400174 	movhi	r5,5
   51c5c:	29520e04 	addi	r5,r5,18488
   51c60:	01800174 	movhi	r6,5
   51c64:	31935104 	addi	r6,r6,19780
   51c68:	0051ba40 	call	51ba4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   51c6c:	00539cc0 	call	539cc <alt_dcache_flush_all>
  alt_icache_flush_all();
   51c70:	0053e140 	call	53e14 <alt_icache_flush_all>
}
   51c74:	e037883a 	mov	sp,fp
   51c78:	dfc00117 	ldw	ra,4(sp)
   51c7c:	df000017 	ldw	fp,0(sp)
   51c80:	dec00204 	addi	sp,sp,8
   51c84:	f800283a 	ret

00051c88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51c88:	defffe04 	addi	sp,sp,-8
   51c8c:	dfc00115 	stw	ra,4(sp)
   51c90:	df000015 	stw	fp,0(sp)
   51c94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51c98:	00800174 	movhi	r2,5
   51c9c:	109a6804 	addi	r2,r2,27040
   51ca0:	10800017 	ldw	r2,0(r2)
   51ca4:	10000526 	beq	r2,zero,51cbc <alt_get_errno+0x34>
   51ca8:	00800174 	movhi	r2,5
   51cac:	109a6804 	addi	r2,r2,27040
   51cb0:	10800017 	ldw	r2,0(r2)
   51cb4:	103ee83a 	callr	r2
   51cb8:	00000206 	br	51cc4 <alt_get_errno+0x3c>
   51cbc:	008001b4 	movhi	r2,6
   51cc0:	10a1a604 	addi	r2,r2,-31080
}
   51cc4:	e037883a 	mov	sp,fp
   51cc8:	dfc00117 	ldw	ra,4(sp)
   51ccc:	df000017 	ldw	fp,0(sp)
   51cd0:	dec00204 	addi	sp,sp,8
   51cd4:	f800283a 	ret

00051cd8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   51cd8:	defff904 	addi	sp,sp,-28
   51cdc:	dfc00615 	stw	ra,24(sp)
   51ce0:	df000515 	stw	fp,20(sp)
   51ce4:	df000504 	addi	fp,sp,20
   51ce8:	e13ffd15 	stw	r4,-12(fp)
   51cec:	e17ffe15 	stw	r5,-8(fp)
   51cf0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   51cf4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51cf8:	e0bffd17 	ldw	r2,-12(fp)
   51cfc:	10000616 	blt	r2,zero,51d18 <lseek+0x40>
   51d00:	e0bffd17 	ldw	r2,-12(fp)
   51d04:	10c00324 	muli	r3,r2,12
   51d08:	00800174 	movhi	r2,5
   51d0c:	1095a904 	addi	r2,r2,22180
   51d10:	1885883a 	add	r2,r3,r2
   51d14:	00000106 	br	51d1c <lseek+0x44>
   51d18:	0005883a 	mov	r2,zero
   51d1c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   51d20:	e0bffc17 	ldw	r2,-16(fp)
   51d24:	10001026 	beq	r2,zero,51d68 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   51d28:	e0bffc17 	ldw	r2,-16(fp)
   51d2c:	10800017 	ldw	r2,0(r2)
   51d30:	10800717 	ldw	r2,28(r2)
   51d34:	10000926 	beq	r2,zero,51d5c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   51d38:	e0bffc17 	ldw	r2,-16(fp)
   51d3c:	10800017 	ldw	r2,0(r2)
   51d40:	10800717 	ldw	r2,28(r2)
   51d44:	e13ffc17 	ldw	r4,-16(fp)
   51d48:	e17ffe17 	ldw	r5,-8(fp)
   51d4c:	e1bfff17 	ldw	r6,-4(fp)
   51d50:	103ee83a 	callr	r2
   51d54:	e0bffb15 	stw	r2,-20(fp)
   51d58:	00000506 	br	51d70 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   51d5c:	00bfde84 	movi	r2,-134
   51d60:	e0bffb15 	stw	r2,-20(fp)
   51d64:	00000206 	br	51d70 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   51d68:	00bfebc4 	movi	r2,-81
   51d6c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   51d70:	e0bffb17 	ldw	r2,-20(fp)
   51d74:	1000070e 	bge	r2,zero,51d94 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   51d78:	0051c880 	call	51c88 <alt_get_errno>
   51d7c:	1007883a 	mov	r3,r2
   51d80:	e0bffb17 	ldw	r2,-20(fp)
   51d84:	0085c83a 	sub	r2,zero,r2
   51d88:	18800015 	stw	r2,0(r3)
    rc = -1;
   51d8c:	00bfffc4 	movi	r2,-1
   51d90:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   51d94:	e0bffb17 	ldw	r2,-20(fp)
}
   51d98:	e037883a 	mov	sp,fp
   51d9c:	dfc00117 	ldw	ra,4(sp)
   51da0:	df000017 	ldw	fp,0(sp)
   51da4:	dec00204 	addi	sp,sp,8
   51da8:	f800283a 	ret

00051dac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   51dac:	defffd04 	addi	sp,sp,-12
   51db0:	dfc00215 	stw	ra,8(sp)
   51db4:	df000115 	stw	fp,4(sp)
   51db8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   51dbc:	0009883a 	mov	r4,zero
   51dc0:	00524b40 	call	524b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   51dc4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   51dc8:	00524e80 	call	524e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   51dcc:	01000174 	movhi	r4,5
   51dd0:	21134604 	addi	r4,r4,19736
   51dd4:	01400174 	movhi	r5,5
   51dd8:	29534604 	addi	r5,r5,19736
   51ddc:	01800174 	movhi	r6,5
   51de0:	31934604 	addi	r6,r6,19736
   51de4:	00541d40 	call	541d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   51de8:	0053b040 	call	53b04 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   51dec:	01000174 	movhi	r4,5
   51df0:	210ed804 	addi	r4,r4,15200
   51df4:	00544940 	call	54494 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   51df8:	d1275617 	ldw	r4,-25256(gp)
   51dfc:	d0e75717 	ldw	r3,-25252(gp)
   51e00:	d0a75817 	ldw	r2,-25248(gp)
   51e04:	180b883a 	mov	r5,r3
   51e08:	100d883a 	mov	r6,r2
   51e0c:	00422740 	call	42274 <main>
   51e10:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   51e14:	01000044 	movi	r4,1
   51e18:	00517040 	call	51704 <close>
  exit (result);
   51e1c:	e13fff17 	ldw	r4,-4(fp)
   51e20:	00544a80 	call	544a8 <exit>

00051e24 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   51e24:	defffe04 	addi	sp,sp,-8
   51e28:	df000115 	stw	fp,4(sp)
   51e2c:	df000104 	addi	fp,sp,4
   51e30:	e13fff15 	stw	r4,-4(fp)
}
   51e34:	e037883a 	mov	sp,fp
   51e38:	df000017 	ldw	fp,0(sp)
   51e3c:	dec00104 	addi	sp,sp,4
   51e40:	f800283a 	ret

00051e44 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   51e44:	defffe04 	addi	sp,sp,-8
   51e48:	df000115 	stw	fp,4(sp)
   51e4c:	df000104 	addi	fp,sp,4
   51e50:	e13fff15 	stw	r4,-4(fp)
}
   51e54:	e037883a 	mov	sp,fp
   51e58:	df000017 	ldw	fp,0(sp)
   51e5c:	dec00104 	addi	sp,sp,4
   51e60:	f800283a 	ret

00051e64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51e64:	defffe04 	addi	sp,sp,-8
   51e68:	dfc00115 	stw	ra,4(sp)
   51e6c:	df000015 	stw	fp,0(sp)
   51e70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51e74:	00800174 	movhi	r2,5
   51e78:	109a6804 	addi	r2,r2,27040
   51e7c:	10800017 	ldw	r2,0(r2)
   51e80:	10000526 	beq	r2,zero,51e98 <alt_get_errno+0x34>
   51e84:	00800174 	movhi	r2,5
   51e88:	109a6804 	addi	r2,r2,27040
   51e8c:	10800017 	ldw	r2,0(r2)
   51e90:	103ee83a 	callr	r2
   51e94:	00000206 	br	51ea0 <alt_get_errno+0x3c>
   51e98:	008001b4 	movhi	r2,6
   51e9c:	10a1a604 	addi	r2,r2,-31080
}
   51ea0:	e037883a 	mov	sp,fp
   51ea4:	dfc00117 	ldw	ra,4(sp)
   51ea8:	df000017 	ldw	fp,0(sp)
   51eac:	dec00204 	addi	sp,sp,8
   51eb0:	f800283a 	ret

00051eb4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   51eb4:	defffd04 	addi	sp,sp,-12
   51eb8:	df000215 	stw	fp,8(sp)
   51ebc:	df000204 	addi	fp,sp,8
   51ec0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   51ec4:	e0bfff17 	ldw	r2,-4(fp)
   51ec8:	10800217 	ldw	r2,8(r2)
   51ecc:	10d00034 	orhi	r3,r2,16384
   51ed0:	e0bfff17 	ldw	r2,-4(fp)
   51ed4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   51ed8:	e03ffe15 	stw	zero,-8(fp)
   51edc:	00001d06 	br	51f54 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   51ee0:	00800174 	movhi	r2,5
   51ee4:	1095a904 	addi	r2,r2,22180
   51ee8:	e0fffe17 	ldw	r3,-8(fp)
   51eec:	18c00324 	muli	r3,r3,12
   51ef0:	10c5883a 	add	r2,r2,r3
   51ef4:	10c00017 	ldw	r3,0(r2)
   51ef8:	e0bfff17 	ldw	r2,-4(fp)
   51efc:	10800017 	ldw	r2,0(r2)
   51f00:	1880111e 	bne	r3,r2,51f48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   51f04:	00800174 	movhi	r2,5
   51f08:	1095a904 	addi	r2,r2,22180
   51f0c:	e0fffe17 	ldw	r3,-8(fp)
   51f10:	18c00324 	muli	r3,r3,12
   51f14:	18c00204 	addi	r3,r3,8
   51f18:	10c5883a 	add	r2,r2,r3
   51f1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   51f20:	1000090e 	bge	r2,zero,51f48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   51f24:	e0bffe17 	ldw	r2,-8(fp)
   51f28:	10c00324 	muli	r3,r2,12
   51f2c:	00800174 	movhi	r2,5
   51f30:	1095a904 	addi	r2,r2,22180
   51f34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   51f38:	e0bfff17 	ldw	r2,-4(fp)
   51f3c:	18800226 	beq	r3,r2,51f48 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   51f40:	00bffcc4 	movi	r2,-13
   51f44:	00000a06 	br	51f70 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   51f48:	e0bffe17 	ldw	r2,-8(fp)
   51f4c:	10800044 	addi	r2,r2,1
   51f50:	e0bffe15 	stw	r2,-8(fp)
   51f54:	00800174 	movhi	r2,5
   51f58:	109a6704 	addi	r2,r2,27036
   51f5c:	10800017 	ldw	r2,0(r2)
   51f60:	1007883a 	mov	r3,r2
   51f64:	e0bffe17 	ldw	r2,-8(fp)
   51f68:	18bfdd2e 	bgeu	r3,r2,51ee0 <__alt_data_end+0xfffdfee0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   51f6c:	0005883a 	mov	r2,zero
}
   51f70:	e037883a 	mov	sp,fp
   51f74:	df000017 	ldw	fp,0(sp)
   51f78:	dec00104 	addi	sp,sp,4
   51f7c:	f800283a 	ret

00051f80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   51f80:	defff604 	addi	sp,sp,-40
   51f84:	dfc00915 	stw	ra,36(sp)
   51f88:	df000815 	stw	fp,32(sp)
   51f8c:	df000804 	addi	fp,sp,32
   51f90:	e13ffd15 	stw	r4,-12(fp)
   51f94:	e17ffe15 	stw	r5,-8(fp)
   51f98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   51f9c:	00bfffc4 	movi	r2,-1
   51fa0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   51fa4:	00bffb44 	movi	r2,-19
   51fa8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   51fac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   51fb0:	e13ffd17 	ldw	r4,-12(fp)
   51fb4:	01400174 	movhi	r5,5
   51fb8:	295a6504 	addi	r5,r5,27028
   51fbc:	0053bbc0 	call	53bbc <alt_find_dev>
   51fc0:	e0bff815 	stw	r2,-32(fp)
   51fc4:	e0bff817 	ldw	r2,-32(fp)
   51fc8:	1000051e 	bne	r2,zero,51fe0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   51fcc:	e13ffd17 	ldw	r4,-12(fp)
   51fd0:	0053c4c0 	call	53c4c <alt_find_file>
   51fd4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   51fd8:	00800044 	movi	r2,1
   51fdc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   51fe0:	e0bff817 	ldw	r2,-32(fp)
   51fe4:	10002926 	beq	r2,zero,5208c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   51fe8:	e13ff817 	ldw	r4,-32(fp)
   51fec:	0053d600 	call	53d60 <alt_get_fd>
   51ff0:	e0bff915 	stw	r2,-28(fp)
   51ff4:	e0bff917 	ldw	r2,-28(fp)
   51ff8:	1000030e 	bge	r2,zero,52008 <open+0x88>
    {
      status = index;
   51ffc:	e0bff917 	ldw	r2,-28(fp)
   52000:	e0bffa15 	stw	r2,-24(fp)
   52004:	00002306 	br	52094 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   52008:	e0bff917 	ldw	r2,-28(fp)
   5200c:	10c00324 	muli	r3,r2,12
   52010:	00800174 	movhi	r2,5
   52014:	1095a904 	addi	r2,r2,22180
   52018:	1885883a 	add	r2,r3,r2
   5201c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   52020:	e0fffe17 	ldw	r3,-8(fp)
   52024:	00900034 	movhi	r2,16384
   52028:	10bfffc4 	addi	r2,r2,-1
   5202c:	1886703a 	and	r3,r3,r2
   52030:	e0bffc17 	ldw	r2,-16(fp)
   52034:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   52038:	e0bffb17 	ldw	r2,-20(fp)
   5203c:	1000051e 	bne	r2,zero,52054 <open+0xd4>
   52040:	e13ffc17 	ldw	r4,-16(fp)
   52044:	0051eb40 	call	51eb4 <alt_file_locked>
   52048:	e0bffa15 	stw	r2,-24(fp)
   5204c:	e0bffa17 	ldw	r2,-24(fp)
   52050:	10001016 	blt	r2,zero,52094 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   52054:	e0bff817 	ldw	r2,-32(fp)
   52058:	10800317 	ldw	r2,12(r2)
   5205c:	10000826 	beq	r2,zero,52080 <open+0x100>
   52060:	e0bff817 	ldw	r2,-32(fp)
   52064:	10800317 	ldw	r2,12(r2)
   52068:	e13ffc17 	ldw	r4,-16(fp)
   5206c:	e17ffd17 	ldw	r5,-12(fp)
   52070:	e1bffe17 	ldw	r6,-8(fp)
   52074:	e1ffff17 	ldw	r7,-4(fp)
   52078:	103ee83a 	callr	r2
   5207c:	00000106 	br	52084 <open+0x104>
   52080:	0005883a 	mov	r2,zero
   52084:	e0bffa15 	stw	r2,-24(fp)
   52088:	00000206 	br	52094 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   5208c:	00bffb44 	movi	r2,-19
   52090:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   52094:	e0bffa17 	ldw	r2,-24(fp)
   52098:	1000090e 	bge	r2,zero,520c0 <open+0x140>
  {
    alt_release_fd (index);  
   5209c:	e13ff917 	ldw	r4,-28(fp)
   520a0:	00522240 	call	52224 <alt_release_fd>
    ALT_ERRNO = -status;
   520a4:	0051e640 	call	51e64 <alt_get_errno>
   520a8:	1007883a 	mov	r3,r2
   520ac:	e0bffa17 	ldw	r2,-24(fp)
   520b0:	0085c83a 	sub	r2,zero,r2
   520b4:	18800015 	stw	r2,0(r3)
    return -1;
   520b8:	00bfffc4 	movi	r2,-1
   520bc:	00000106 	br	520c4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   520c0:	e0bff917 	ldw	r2,-28(fp)
}
   520c4:	e037883a 	mov	sp,fp
   520c8:	dfc00117 	ldw	ra,4(sp)
   520cc:	df000017 	ldw	fp,0(sp)
   520d0:	dec00204 	addi	sp,sp,8
   520d4:	f800283a 	ret

000520d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   520d8:	defffe04 	addi	sp,sp,-8
   520dc:	dfc00115 	stw	ra,4(sp)
   520e0:	df000015 	stw	fp,0(sp)
   520e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   520e8:	00800174 	movhi	r2,5
   520ec:	109a6804 	addi	r2,r2,27040
   520f0:	10800017 	ldw	r2,0(r2)
   520f4:	10000526 	beq	r2,zero,5210c <alt_get_errno+0x34>
   520f8:	00800174 	movhi	r2,5
   520fc:	109a6804 	addi	r2,r2,27040
   52100:	10800017 	ldw	r2,0(r2)
   52104:	103ee83a 	callr	r2
   52108:	00000206 	br	52114 <alt_get_errno+0x3c>
   5210c:	008001b4 	movhi	r2,6
   52110:	10a1a604 	addi	r2,r2,-31080
}
   52114:	e037883a 	mov	sp,fp
   52118:	dfc00117 	ldw	ra,4(sp)
   5211c:	df000017 	ldw	fp,0(sp)
   52120:	dec00204 	addi	sp,sp,8
   52124:	f800283a 	ret

00052128 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   52128:	defff904 	addi	sp,sp,-28
   5212c:	dfc00615 	stw	ra,24(sp)
   52130:	df000515 	stw	fp,20(sp)
   52134:	df000504 	addi	fp,sp,20
   52138:	e13ffd15 	stw	r4,-12(fp)
   5213c:	e17ffe15 	stw	r5,-8(fp)
   52140:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52144:	e0bffd17 	ldw	r2,-12(fp)
   52148:	10000616 	blt	r2,zero,52164 <read+0x3c>
   5214c:	e0bffd17 	ldw	r2,-12(fp)
   52150:	10c00324 	muli	r3,r2,12
   52154:	00800174 	movhi	r2,5
   52158:	1095a904 	addi	r2,r2,22180
   5215c:	1885883a 	add	r2,r3,r2
   52160:	00000106 	br	52168 <read+0x40>
   52164:	0005883a 	mov	r2,zero
   52168:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   5216c:	e0bffb17 	ldw	r2,-20(fp)
   52170:	10002226 	beq	r2,zero,521fc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   52174:	e0bffb17 	ldw	r2,-20(fp)
   52178:	10800217 	ldw	r2,8(r2)
   5217c:	108000cc 	andi	r2,r2,3
   52180:	10800060 	cmpeqi	r2,r2,1
   52184:	1000181e 	bne	r2,zero,521e8 <read+0xc0>
        (fd->dev->read))
   52188:	e0bffb17 	ldw	r2,-20(fp)
   5218c:	10800017 	ldw	r2,0(r2)
   52190:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   52194:	10001426 	beq	r2,zero,521e8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   52198:	e0bffb17 	ldw	r2,-20(fp)
   5219c:	10800017 	ldw	r2,0(r2)
   521a0:	10800517 	ldw	r2,20(r2)
   521a4:	e0ffff17 	ldw	r3,-4(fp)
   521a8:	e13ffb17 	ldw	r4,-20(fp)
   521ac:	e17ffe17 	ldw	r5,-8(fp)
   521b0:	180d883a 	mov	r6,r3
   521b4:	103ee83a 	callr	r2
   521b8:	e0bffc15 	stw	r2,-16(fp)
   521bc:	e0bffc17 	ldw	r2,-16(fp)
   521c0:	1000070e 	bge	r2,zero,521e0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   521c4:	00520d80 	call	520d8 <alt_get_errno>
   521c8:	1007883a 	mov	r3,r2
   521cc:	e0bffc17 	ldw	r2,-16(fp)
   521d0:	0085c83a 	sub	r2,zero,r2
   521d4:	18800015 	stw	r2,0(r3)
          return -1;
   521d8:	00bfffc4 	movi	r2,-1
   521dc:	00000c06 	br	52210 <read+0xe8>
        }
        return rval;
   521e0:	e0bffc17 	ldw	r2,-16(fp)
   521e4:	00000a06 	br	52210 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   521e8:	00520d80 	call	520d8 <alt_get_errno>
   521ec:	1007883a 	mov	r3,r2
   521f0:	00800344 	movi	r2,13
   521f4:	18800015 	stw	r2,0(r3)
   521f8:	00000406 	br	5220c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   521fc:	00520d80 	call	520d8 <alt_get_errno>
   52200:	1007883a 	mov	r3,r2
   52204:	00801444 	movi	r2,81
   52208:	18800015 	stw	r2,0(r3)
  }
  return -1;
   5220c:	00bfffc4 	movi	r2,-1
}
   52210:	e037883a 	mov	sp,fp
   52214:	dfc00117 	ldw	ra,4(sp)
   52218:	df000017 	ldw	fp,0(sp)
   5221c:	dec00204 	addi	sp,sp,8
   52220:	f800283a 	ret

00052224 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   52224:	defffe04 	addi	sp,sp,-8
   52228:	df000115 	stw	fp,4(sp)
   5222c:	df000104 	addi	fp,sp,4
   52230:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   52234:	e0bfff17 	ldw	r2,-4(fp)
   52238:	108000d0 	cmplti	r2,r2,3
   5223c:	10000d1e 	bne	r2,zero,52274 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   52240:	00800174 	movhi	r2,5
   52244:	1095a904 	addi	r2,r2,22180
   52248:	e0ffff17 	ldw	r3,-4(fp)
   5224c:	18c00324 	muli	r3,r3,12
   52250:	18c00204 	addi	r3,r3,8
   52254:	10c5883a 	add	r2,r2,r3
   52258:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   5225c:	00800174 	movhi	r2,5
   52260:	1095a904 	addi	r2,r2,22180
   52264:	e0ffff17 	ldw	r3,-4(fp)
   52268:	18c00324 	muli	r3,r3,12
   5226c:	10c5883a 	add	r2,r2,r3
   52270:	10000015 	stw	zero,0(r2)
  }
}
   52274:	e037883a 	mov	sp,fp
   52278:	df000017 	ldw	fp,0(sp)
   5227c:	dec00104 	addi	sp,sp,4
   52280:	f800283a 	ret

00052284 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   52284:	defff904 	addi	sp,sp,-28
   52288:	df000615 	stw	fp,24(sp)
   5228c:	df000604 	addi	fp,sp,24
   52290:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52294:	0005303a 	rdctl	r2,status
   52298:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5229c:	e0fffc17 	ldw	r3,-16(fp)
   522a0:	00bfff84 	movi	r2,-2
   522a4:	1884703a 	and	r2,r3,r2
   522a8:	1001703a 	wrctl	status,r2
  
  return context;
   522ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   522b0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   522b4:	d0a01817 	ldw	r2,-32672(gp)
   522b8:	10c000c4 	addi	r3,r2,3
   522bc:	00bfff04 	movi	r2,-4
   522c0:	1884703a 	and	r2,r3,r2
   522c4:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   522c8:	d0e01817 	ldw	r3,-32672(gp)
   522cc:	e0bfff17 	ldw	r2,-4(fp)
   522d0:	1887883a 	add	r3,r3,r2
   522d4:	008001f4 	movhi	r2,7
   522d8:	10880004 	addi	r2,r2,8192
   522dc:	10c0062e 	bgeu	r2,r3,522f8 <sbrk+0x74>
   522e0:	e0bffa17 	ldw	r2,-24(fp)
   522e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   522e8:	e0bffd17 	ldw	r2,-12(fp)
   522ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   522f0:	00bfffc4 	movi	r2,-1
   522f4:	00000b06 	br	52324 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   522f8:	d0a01817 	ldw	r2,-32672(gp)
   522fc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   52300:	d0e01817 	ldw	r3,-32672(gp)
   52304:	e0bfff17 	ldw	r2,-4(fp)
   52308:	1885883a 	add	r2,r3,r2
   5230c:	d0a01815 	stw	r2,-32672(gp)
   52310:	e0bffa17 	ldw	r2,-24(fp)
   52314:	e0bffe15 	stw	r2,-8(fp)
   52318:	e0bffe17 	ldw	r2,-8(fp)
   5231c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   52320:	e0bffb17 	ldw	r2,-20(fp)
} 
   52324:	e037883a 	mov	sp,fp
   52328:	df000017 	ldw	fp,0(sp)
   5232c:	dec00104 	addi	sp,sp,4
   52330:	f800283a 	ret

00052334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52334:	defffe04 	addi	sp,sp,-8
   52338:	dfc00115 	stw	ra,4(sp)
   5233c:	df000015 	stw	fp,0(sp)
   52340:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52344:	00800174 	movhi	r2,5
   52348:	109a6804 	addi	r2,r2,27040
   5234c:	10800017 	ldw	r2,0(r2)
   52350:	10000526 	beq	r2,zero,52368 <alt_get_errno+0x34>
   52354:	00800174 	movhi	r2,5
   52358:	109a6804 	addi	r2,r2,27040
   5235c:	10800017 	ldw	r2,0(r2)
   52360:	103ee83a 	callr	r2
   52364:	00000206 	br	52370 <alt_get_errno+0x3c>
   52368:	008001b4 	movhi	r2,6
   5236c:	10a1a604 	addi	r2,r2,-31080
}
   52370:	e037883a 	mov	sp,fp
   52374:	dfc00117 	ldw	ra,4(sp)
   52378:	df000017 	ldw	fp,0(sp)
   5237c:	dec00204 	addi	sp,sp,8
   52380:	f800283a 	ret

00052384 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   52384:	defff904 	addi	sp,sp,-28
   52388:	dfc00615 	stw	ra,24(sp)
   5238c:	df000515 	stw	fp,20(sp)
   52390:	df000504 	addi	fp,sp,20
   52394:	e13ffd15 	stw	r4,-12(fp)
   52398:	e17ffe15 	stw	r5,-8(fp)
   5239c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   523a0:	e0bffd17 	ldw	r2,-12(fp)
   523a4:	10000616 	blt	r2,zero,523c0 <write+0x3c>
   523a8:	e0bffd17 	ldw	r2,-12(fp)
   523ac:	10c00324 	muli	r3,r2,12
   523b0:	00800174 	movhi	r2,5
   523b4:	1095a904 	addi	r2,r2,22180
   523b8:	1885883a 	add	r2,r3,r2
   523bc:	00000106 	br	523c4 <write+0x40>
   523c0:	0005883a 	mov	r2,zero
   523c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   523c8:	e0bffb17 	ldw	r2,-20(fp)
   523cc:	10002126 	beq	r2,zero,52454 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   523d0:	e0bffb17 	ldw	r2,-20(fp)
   523d4:	10800217 	ldw	r2,8(r2)
   523d8:	108000cc 	andi	r2,r2,3
   523dc:	10001826 	beq	r2,zero,52440 <write+0xbc>
   523e0:	e0bffb17 	ldw	r2,-20(fp)
   523e4:	10800017 	ldw	r2,0(r2)
   523e8:	10800617 	ldw	r2,24(r2)
   523ec:	10001426 	beq	r2,zero,52440 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   523f0:	e0bffb17 	ldw	r2,-20(fp)
   523f4:	10800017 	ldw	r2,0(r2)
   523f8:	10800617 	ldw	r2,24(r2)
   523fc:	e0ffff17 	ldw	r3,-4(fp)
   52400:	e13ffb17 	ldw	r4,-20(fp)
   52404:	e17ffe17 	ldw	r5,-8(fp)
   52408:	180d883a 	mov	r6,r3
   5240c:	103ee83a 	callr	r2
   52410:	e0bffc15 	stw	r2,-16(fp)
   52414:	e0bffc17 	ldw	r2,-16(fp)
   52418:	1000070e 	bge	r2,zero,52438 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   5241c:	00523340 	call	52334 <alt_get_errno>
   52420:	1007883a 	mov	r3,r2
   52424:	e0bffc17 	ldw	r2,-16(fp)
   52428:	0085c83a 	sub	r2,zero,r2
   5242c:	18800015 	stw	r2,0(r3)
        return -1;
   52430:	00bfffc4 	movi	r2,-1
   52434:	00000c06 	br	52468 <write+0xe4>
      }
      return rval;
   52438:	e0bffc17 	ldw	r2,-16(fp)
   5243c:	00000a06 	br	52468 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   52440:	00523340 	call	52334 <alt_get_errno>
   52444:	1007883a 	mov	r3,r2
   52448:	00800344 	movi	r2,13
   5244c:	18800015 	stw	r2,0(r3)
   52450:	00000406 	br	52464 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   52454:	00523340 	call	52334 <alt_get_errno>
   52458:	1007883a 	mov	r3,r2
   5245c:	00801444 	movi	r2,81
   52460:	18800015 	stw	r2,0(r3)
  }
  return -1;
   52464:	00bfffc4 	movi	r2,-1
}
   52468:	e037883a 	mov	sp,fp
   5246c:	dfc00117 	ldw	ra,4(sp)
   52470:	df000017 	ldw	fp,0(sp)
   52474:	dec00204 	addi	sp,sp,8
   52478:	f800283a 	ret

0005247c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   5247c:	defffd04 	addi	sp,sp,-12
   52480:	dfc00215 	stw	ra,8(sp)
   52484:	df000115 	stw	fp,4(sp)
   52488:	df000104 	addi	fp,sp,4
   5248c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   52490:	e13fff17 	ldw	r4,-4(fp)
   52494:	01400174 	movhi	r5,5
   52498:	295a6504 	addi	r5,r5,27028
   5249c:	0053a600 	call	53a60 <alt_dev_llist_insert>
}
   524a0:	e037883a 	mov	sp,fp
   524a4:	dfc00117 	ldw	ra,4(sp)
   524a8:	df000017 	ldw	fp,0(sp)
   524ac:	dec00204 	addi	sp,sp,8
   524b0:	f800283a 	ret

000524b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   524b4:	defffd04 	addi	sp,sp,-12
   524b8:	dfc00215 	stw	ra,8(sp)
   524bc:	df000115 	stw	fp,4(sp)
   524c0:	df000104 	addi	fp,sp,4
   524c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   524c8:	00543e80 	call	543e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   524cc:	00800044 	movi	r2,1
   524d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   524d4:	e037883a 	mov	sp,fp
   524d8:	dfc00117 	ldw	ra,4(sp)
   524dc:	df000017 	ldw	fp,0(sp)
   524e0:	dec00204 	addi	sp,sp,8
   524e4:	f800283a 	ret

000524e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   524e8:	defffe04 	addi	sp,sp,-8
   524ec:	dfc00115 	stw	ra,4(sp)
   524f0:	df000015 	stw	fp,0(sp)
   524f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   524f8:	01000174 	movhi	r4,5
   524fc:	21161304 	addi	r4,r4,22604
   52500:	000b883a 	mov	r5,zero
   52504:	000d883a 	mov	r6,zero
   52508:	00526b40 	call	526b4 <altera_avalon_jtag_uart_init>
   5250c:	01000174 	movhi	r4,5
   52510:	21160904 	addi	r4,r4,22564
   52514:	005247c0 	call	5247c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   52518:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   5251c:	01000174 	movhi	r4,5
   52520:	211a2b04 	addi	r4,r4,26796
   52524:	000b883a 	mov	r5,zero
   52528:	01800044 	movi	r6,1
   5252c:	00530ac0 	call	530ac <altera_avalon_uart_init>
   52530:	01000174 	movhi	r4,5
   52534:	211a2104 	addi	r4,r4,26756
   52538:	005247c0 	call	5247c <alt_dev_reg>
}
   5253c:	e037883a 	mov	sp,fp
   52540:	dfc00117 	ldw	ra,4(sp)
   52544:	df000017 	ldw	fp,0(sp)
   52548:	dec00204 	addi	sp,sp,8
   5254c:	f800283a 	ret

00052550 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   52550:	defffa04 	addi	sp,sp,-24
   52554:	dfc00515 	stw	ra,20(sp)
   52558:	df000415 	stw	fp,16(sp)
   5255c:	df000404 	addi	fp,sp,16
   52560:	e13ffd15 	stw	r4,-12(fp)
   52564:	e17ffe15 	stw	r5,-8(fp)
   52568:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5256c:	e0bffd17 	ldw	r2,-12(fp)
   52570:	10800017 	ldw	r2,0(r2)
   52574:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   52578:	e0bffc17 	ldw	r2,-16(fp)
   5257c:	10c00a04 	addi	r3,r2,40
   52580:	e0bffd17 	ldw	r2,-12(fp)
   52584:	10800217 	ldw	r2,8(r2)
   52588:	1809883a 	mov	r4,r3
   5258c:	e17ffe17 	ldw	r5,-8(fp)
   52590:	e1bfff17 	ldw	r6,-4(fp)
   52594:	100f883a 	mov	r7,r2
   52598:	0052b780 	call	52b78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   5259c:	e037883a 	mov	sp,fp
   525a0:	dfc00117 	ldw	ra,4(sp)
   525a4:	df000017 	ldw	fp,0(sp)
   525a8:	dec00204 	addi	sp,sp,8
   525ac:	f800283a 	ret

000525b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   525b0:	defffa04 	addi	sp,sp,-24
   525b4:	dfc00515 	stw	ra,20(sp)
   525b8:	df000415 	stw	fp,16(sp)
   525bc:	df000404 	addi	fp,sp,16
   525c0:	e13ffd15 	stw	r4,-12(fp)
   525c4:	e17ffe15 	stw	r5,-8(fp)
   525c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   525cc:	e0bffd17 	ldw	r2,-12(fp)
   525d0:	10800017 	ldw	r2,0(r2)
   525d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   525d8:	e0bffc17 	ldw	r2,-16(fp)
   525dc:	10c00a04 	addi	r3,r2,40
   525e0:	e0bffd17 	ldw	r2,-12(fp)
   525e4:	10800217 	ldw	r2,8(r2)
   525e8:	1809883a 	mov	r4,r3
   525ec:	e17ffe17 	ldw	r5,-8(fp)
   525f0:	e1bfff17 	ldw	r6,-4(fp)
   525f4:	100f883a 	mov	r7,r2
   525f8:	0052d840 	call	52d84 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   525fc:	e037883a 	mov	sp,fp
   52600:	dfc00117 	ldw	ra,4(sp)
   52604:	df000017 	ldw	fp,0(sp)
   52608:	dec00204 	addi	sp,sp,8
   5260c:	f800283a 	ret

00052610 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   52610:	defffc04 	addi	sp,sp,-16
   52614:	dfc00315 	stw	ra,12(sp)
   52618:	df000215 	stw	fp,8(sp)
   5261c:	df000204 	addi	fp,sp,8
   52620:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   52624:	e0bfff17 	ldw	r2,-4(fp)
   52628:	10800017 	ldw	r2,0(r2)
   5262c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   52630:	e0bffe17 	ldw	r2,-8(fp)
   52634:	10c00a04 	addi	r3,r2,40
   52638:	e0bfff17 	ldw	r2,-4(fp)
   5263c:	10800217 	ldw	r2,8(r2)
   52640:	1809883a 	mov	r4,r3
   52644:	100b883a 	mov	r5,r2
   52648:	0052a240 	call	52a24 <altera_avalon_jtag_uart_close>
}
   5264c:	e037883a 	mov	sp,fp
   52650:	dfc00117 	ldw	ra,4(sp)
   52654:	df000017 	ldw	fp,0(sp)
   52658:	dec00204 	addi	sp,sp,8
   5265c:	f800283a 	ret

00052660 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   52660:	defffa04 	addi	sp,sp,-24
   52664:	dfc00515 	stw	ra,20(sp)
   52668:	df000415 	stw	fp,16(sp)
   5266c:	df000404 	addi	fp,sp,16
   52670:	e13ffd15 	stw	r4,-12(fp)
   52674:	e17ffe15 	stw	r5,-8(fp)
   52678:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   5267c:	e0bffd17 	ldw	r2,-12(fp)
   52680:	10800017 	ldw	r2,0(r2)
   52684:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   52688:	e0bffc17 	ldw	r2,-16(fp)
   5268c:	10800a04 	addi	r2,r2,40
   52690:	1009883a 	mov	r4,r2
   52694:	e17ffe17 	ldw	r5,-8(fp)
   52698:	e1bfff17 	ldw	r6,-4(fp)
   5269c:	0052a8c0 	call	52a8c <altera_avalon_jtag_uart_ioctl>
}
   526a0:	e037883a 	mov	sp,fp
   526a4:	dfc00117 	ldw	ra,4(sp)
   526a8:	df000017 	ldw	fp,0(sp)
   526ac:	dec00204 	addi	sp,sp,8
   526b0:	f800283a 	ret

000526b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   526b4:	defffa04 	addi	sp,sp,-24
   526b8:	dfc00515 	stw	ra,20(sp)
   526bc:	df000415 	stw	fp,16(sp)
   526c0:	df000404 	addi	fp,sp,16
   526c4:	e13ffd15 	stw	r4,-12(fp)
   526c8:	e17ffe15 	stw	r5,-8(fp)
   526cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   526d0:	e0bffd17 	ldw	r2,-12(fp)
   526d4:	00c00044 	movi	r3,1
   526d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   526dc:	e0bffd17 	ldw	r2,-12(fp)
   526e0:	10800017 	ldw	r2,0(r2)
   526e4:	10800104 	addi	r2,r2,4
   526e8:	1007883a 	mov	r3,r2
   526ec:	e0bffd17 	ldw	r2,-12(fp)
   526f0:	10800817 	ldw	r2,32(r2)
   526f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   526f8:	e0fffe17 	ldw	r3,-8(fp)
   526fc:	e0bfff17 	ldw	r2,-4(fp)
   52700:	d8000015 	stw	zero,0(sp)
   52704:	1809883a 	mov	r4,r3
   52708:	100b883a 	mov	r5,r2
   5270c:	01800174 	movhi	r6,5
   52710:	3189de04 	addi	r6,r6,10104
   52714:	e1fffd17 	ldw	r7,-12(fp)
   52718:	0053e440 	call	53e44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   5271c:	e0bffd17 	ldw	r2,-12(fp)
   52720:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   52724:	e0bffd17 	ldw	r2,-12(fp)
   52728:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   5272c:	008001b4 	movhi	r2,6
   52730:	10a1ab04 	addi	r2,r2,-31060
   52734:	10800017 	ldw	r2,0(r2)
   52738:	1809883a 	mov	r4,r3
   5273c:	100b883a 	mov	r5,r2
   52740:	01800174 	movhi	r6,5
   52744:	318a5f04 	addi	r6,r6,10620
   52748:	e1fffd17 	ldw	r7,-12(fp)
   5274c:	005388c0 	call	5388c <alt_alarm_start>
   52750:	1000040e 	bge	r2,zero,52764 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   52754:	e0fffd17 	ldw	r3,-12(fp)
   52758:	00a00034 	movhi	r2,32768
   5275c:	10bfffc4 	addi	r2,r2,-1
   52760:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   52764:	e037883a 	mov	sp,fp
   52768:	dfc00117 	ldw	ra,4(sp)
   5276c:	df000017 	ldw	fp,0(sp)
   52770:	dec00204 	addi	sp,sp,8
   52774:	f800283a 	ret

00052778 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   52778:	defff804 	addi	sp,sp,-32
   5277c:	df000715 	stw	fp,28(sp)
   52780:	df000704 	addi	fp,sp,28
   52784:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   52788:	e0bfff17 	ldw	r2,-4(fp)
   5278c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   52790:	e0bffb17 	ldw	r2,-20(fp)
   52794:	10800017 	ldw	r2,0(r2)
   52798:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5279c:	e0bffc17 	ldw	r2,-16(fp)
   527a0:	10800104 	addi	r2,r2,4
   527a4:	10800037 	ldwio	r2,0(r2)
   527a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   527ac:	e0bffd17 	ldw	r2,-12(fp)
   527b0:	1080c00c 	andi	r2,r2,768
   527b4:	1000011e 	bne	r2,zero,527bc <altera_avalon_jtag_uart_irq+0x44>
      break;
   527b8:	00006c06 	br	5296c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   527bc:	e0bffd17 	ldw	r2,-12(fp)
   527c0:	1080400c 	andi	r2,r2,256
   527c4:	10003426 	beq	r2,zero,52898 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   527c8:	00800074 	movhi	r2,1
   527cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   527d0:	e0bffb17 	ldw	r2,-20(fp)
   527d4:	10800a17 	ldw	r2,40(r2)
   527d8:	10800044 	addi	r2,r2,1
   527dc:	1081ffcc 	andi	r2,r2,2047
   527e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   527e4:	e0bffb17 	ldw	r2,-20(fp)
   527e8:	10c00b17 	ldw	r3,44(r2)
   527ec:	e0bffe17 	ldw	r2,-8(fp)
   527f0:	1880011e 	bne	r3,r2,527f8 <altera_avalon_jtag_uart_irq+0x80>
          break;
   527f4:	00001606 	br	52850 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   527f8:	e0bffc17 	ldw	r2,-16(fp)
   527fc:	10800037 	ldwio	r2,0(r2)
   52800:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   52804:	e0bff917 	ldw	r2,-28(fp)
   52808:	10a0000c 	andi	r2,r2,32768
   5280c:	1000011e 	bne	r2,zero,52814 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   52810:	00000f06 	br	52850 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   52814:	e0bffb17 	ldw	r2,-20(fp)
   52818:	10800a17 	ldw	r2,40(r2)
   5281c:	e0fff917 	ldw	r3,-28(fp)
   52820:	1809883a 	mov	r4,r3
   52824:	e0fffb17 	ldw	r3,-20(fp)
   52828:	1885883a 	add	r2,r3,r2
   5282c:	10800e04 	addi	r2,r2,56
   52830:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   52834:	e0bffb17 	ldw	r2,-20(fp)
   52838:	10800a17 	ldw	r2,40(r2)
   5283c:	10800044 	addi	r2,r2,1
   52840:	10c1ffcc 	andi	r3,r2,2047
   52844:	e0bffb17 	ldw	r2,-20(fp)
   52848:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   5284c:	003fe006 	br	527d0 <__alt_data_end+0xfffe07d0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   52850:	e0bff917 	ldw	r2,-28(fp)
   52854:	10bfffec 	andhi	r2,r2,65535
   52858:	10000f26 	beq	r2,zero,52898 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5285c:	e0bffb17 	ldw	r2,-20(fp)
   52860:	10c00817 	ldw	r3,32(r2)
   52864:	00bfff84 	movi	r2,-2
   52868:	1886703a 	and	r3,r3,r2
   5286c:	e0bffb17 	ldw	r2,-20(fp)
   52870:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   52874:	e0bffc17 	ldw	r2,-16(fp)
   52878:	10800104 	addi	r2,r2,4
   5287c:	1007883a 	mov	r3,r2
   52880:	e0bffb17 	ldw	r2,-20(fp)
   52884:	10800817 	ldw	r2,32(r2)
   52888:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5288c:	e0bffc17 	ldw	r2,-16(fp)
   52890:	10800104 	addi	r2,r2,4
   52894:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   52898:	e0bffd17 	ldw	r2,-12(fp)
   5289c:	1080800c 	andi	r2,r2,512
   528a0:	10003126 	beq	r2,zero,52968 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   528a4:	e0bffd17 	ldw	r2,-12(fp)
   528a8:	1004d43a 	srli	r2,r2,16
   528ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   528b0:	00001406 	br	52904 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   528b4:	e0bffc17 	ldw	r2,-16(fp)
   528b8:	e0fffb17 	ldw	r3,-20(fp)
   528bc:	18c00d17 	ldw	r3,52(r3)
   528c0:	e13ffb17 	ldw	r4,-20(fp)
   528c4:	20c7883a 	add	r3,r4,r3
   528c8:	18c20e04 	addi	r3,r3,2104
   528cc:	18c00003 	ldbu	r3,0(r3)
   528d0:	18c03fcc 	andi	r3,r3,255
   528d4:	18c0201c 	xori	r3,r3,128
   528d8:	18ffe004 	addi	r3,r3,-128
   528dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   528e0:	e0bffb17 	ldw	r2,-20(fp)
   528e4:	10800d17 	ldw	r2,52(r2)
   528e8:	10800044 	addi	r2,r2,1
   528ec:	10c1ffcc 	andi	r3,r2,2047
   528f0:	e0bffb17 	ldw	r2,-20(fp)
   528f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   528f8:	e0bffa17 	ldw	r2,-24(fp)
   528fc:	10bfffc4 	addi	r2,r2,-1
   52900:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   52904:	e0bffa17 	ldw	r2,-24(fp)
   52908:	10000526 	beq	r2,zero,52920 <altera_avalon_jtag_uart_irq+0x1a8>
   5290c:	e0bffb17 	ldw	r2,-20(fp)
   52910:	10c00d17 	ldw	r3,52(r2)
   52914:	e0bffb17 	ldw	r2,-20(fp)
   52918:	10800c17 	ldw	r2,48(r2)
   5291c:	18bfe51e 	bne	r3,r2,528b4 <__alt_data_end+0xfffe08b4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   52920:	e0bffa17 	ldw	r2,-24(fp)
   52924:	10001026 	beq	r2,zero,52968 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   52928:	e0bffb17 	ldw	r2,-20(fp)
   5292c:	10c00817 	ldw	r3,32(r2)
   52930:	00bfff44 	movi	r2,-3
   52934:	1886703a 	and	r3,r3,r2
   52938:	e0bffb17 	ldw	r2,-20(fp)
   5293c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   52940:	e0bffb17 	ldw	r2,-20(fp)
   52944:	10800017 	ldw	r2,0(r2)
   52948:	10800104 	addi	r2,r2,4
   5294c:	1007883a 	mov	r3,r2
   52950:	e0bffb17 	ldw	r2,-20(fp)
   52954:	10800817 	ldw	r2,32(r2)
   52958:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5295c:	e0bffc17 	ldw	r2,-16(fp)
   52960:	10800104 	addi	r2,r2,4
   52964:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   52968:	003f8c06 	br	5279c <__alt_data_end+0xfffe079c>
}
   5296c:	e037883a 	mov	sp,fp
   52970:	df000017 	ldw	fp,0(sp)
   52974:	dec00104 	addi	sp,sp,4
   52978:	f800283a 	ret

0005297c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   5297c:	defff804 	addi	sp,sp,-32
   52980:	df000715 	stw	fp,28(sp)
   52984:	df000704 	addi	fp,sp,28
   52988:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   5298c:	e0bffb17 	ldw	r2,-20(fp)
   52990:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   52994:	e0bff917 	ldw	r2,-28(fp)
   52998:	10800017 	ldw	r2,0(r2)
   5299c:	10800104 	addi	r2,r2,4
   529a0:	10800037 	ldwio	r2,0(r2)
   529a4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   529a8:	e0bffa17 	ldw	r2,-24(fp)
   529ac:	1081000c 	andi	r2,r2,1024
   529b0:	10000b26 	beq	r2,zero,529e0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   529b4:	e0bff917 	ldw	r2,-28(fp)
   529b8:	10800017 	ldw	r2,0(r2)
   529bc:	10800104 	addi	r2,r2,4
   529c0:	1007883a 	mov	r3,r2
   529c4:	e0bff917 	ldw	r2,-28(fp)
   529c8:	10800817 	ldw	r2,32(r2)
   529cc:	10810014 	ori	r2,r2,1024
   529d0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   529d4:	e0bff917 	ldw	r2,-28(fp)
   529d8:	10000915 	stw	zero,36(r2)
   529dc:	00000a06 	br	52a08 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   529e0:	e0bff917 	ldw	r2,-28(fp)
   529e4:	10c00917 	ldw	r3,36(r2)
   529e8:	00a00034 	movhi	r2,32768
   529ec:	10bfff04 	addi	r2,r2,-4
   529f0:	10c00536 	bltu	r2,r3,52a08 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   529f4:	e0bff917 	ldw	r2,-28(fp)
   529f8:	10800917 	ldw	r2,36(r2)
   529fc:	10c00044 	addi	r3,r2,1
   52a00:	e0bff917 	ldw	r2,-28(fp)
   52a04:	10c00915 	stw	r3,36(r2)
   52a08:	008001b4 	movhi	r2,6
   52a0c:	10a1ab04 	addi	r2,r2,-31060
   52a10:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   52a14:	e037883a 	mov	sp,fp
   52a18:	df000017 	ldw	fp,0(sp)
   52a1c:	dec00104 	addi	sp,sp,4
   52a20:	f800283a 	ret

00052a24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   52a24:	defffd04 	addi	sp,sp,-12
   52a28:	df000215 	stw	fp,8(sp)
   52a2c:	df000204 	addi	fp,sp,8
   52a30:	e13ffe15 	stw	r4,-8(fp)
   52a34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   52a38:	00000506 	br	52a50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   52a3c:	e0bfff17 	ldw	r2,-4(fp)
   52a40:	1090000c 	andi	r2,r2,16384
   52a44:	10000226 	beq	r2,zero,52a50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   52a48:	00bffd44 	movi	r2,-11
   52a4c:	00000b06 	br	52a7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   52a50:	e0bffe17 	ldw	r2,-8(fp)
   52a54:	10c00d17 	ldw	r3,52(r2)
   52a58:	e0bffe17 	ldw	r2,-8(fp)
   52a5c:	10800c17 	ldw	r2,48(r2)
   52a60:	18800526 	beq	r3,r2,52a78 <altera_avalon_jtag_uart_close+0x54>
   52a64:	e0bffe17 	ldw	r2,-8(fp)
   52a68:	10c00917 	ldw	r3,36(r2)
   52a6c:	e0bffe17 	ldw	r2,-8(fp)
   52a70:	10800117 	ldw	r2,4(r2)
   52a74:	18bff136 	bltu	r3,r2,52a3c <__alt_data_end+0xfffe0a3c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   52a78:	0005883a 	mov	r2,zero
}
   52a7c:	e037883a 	mov	sp,fp
   52a80:	df000017 	ldw	fp,0(sp)
   52a84:	dec00104 	addi	sp,sp,4
   52a88:	f800283a 	ret

00052a8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   52a8c:	defffa04 	addi	sp,sp,-24
   52a90:	df000515 	stw	fp,20(sp)
   52a94:	df000504 	addi	fp,sp,20
   52a98:	e13ffd15 	stw	r4,-12(fp)
   52a9c:	e17ffe15 	stw	r5,-8(fp)
   52aa0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   52aa4:	00bff9c4 	movi	r2,-25
   52aa8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   52aac:	e0bffe17 	ldw	r2,-8(fp)
   52ab0:	10da8060 	cmpeqi	r3,r2,27137
   52ab4:	1800031e 	bne	r3,zero,52ac4 <altera_avalon_jtag_uart_ioctl+0x38>
   52ab8:	109a80a0 	cmpeqi	r2,r2,27138
   52abc:	1000191e 	bne	r2,zero,52b24 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   52ac0:	00002806 	br	52b64 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   52ac4:	e0bffd17 	ldw	r2,-12(fp)
   52ac8:	10c00117 	ldw	r3,4(r2)
   52acc:	00a00034 	movhi	r2,32768
   52ad0:	10bfffc4 	addi	r2,r2,-1
   52ad4:	18801226 	beq	r3,r2,52b20 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   52ad8:	e0bfff17 	ldw	r2,-4(fp)
   52adc:	10800017 	ldw	r2,0(r2)
   52ae0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   52ae4:	e0bffc17 	ldw	r2,-16(fp)
   52ae8:	10800090 	cmplti	r2,r2,2
   52aec:	1000061e 	bne	r2,zero,52b08 <altera_avalon_jtag_uart_ioctl+0x7c>
   52af0:	e0fffc17 	ldw	r3,-16(fp)
   52af4:	00a00034 	movhi	r2,32768
   52af8:	10bfffc4 	addi	r2,r2,-1
   52afc:	18800226 	beq	r3,r2,52b08 <altera_avalon_jtag_uart_ioctl+0x7c>
   52b00:	e0bffc17 	ldw	r2,-16(fp)
   52b04:	00000206 	br	52b10 <altera_avalon_jtag_uart_ioctl+0x84>
   52b08:	00a00034 	movhi	r2,32768
   52b0c:	10bfff84 	addi	r2,r2,-2
   52b10:	e0fffd17 	ldw	r3,-12(fp)
   52b14:	18800115 	stw	r2,4(r3)
      rc = 0;
   52b18:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   52b1c:	00001106 	br	52b64 <altera_avalon_jtag_uart_ioctl+0xd8>
   52b20:	00001006 	br	52b64 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   52b24:	e0bffd17 	ldw	r2,-12(fp)
   52b28:	10c00117 	ldw	r3,4(r2)
   52b2c:	00a00034 	movhi	r2,32768
   52b30:	10bfffc4 	addi	r2,r2,-1
   52b34:	18800a26 	beq	r3,r2,52b60 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   52b38:	e0bffd17 	ldw	r2,-12(fp)
   52b3c:	10c00917 	ldw	r3,36(r2)
   52b40:	e0bffd17 	ldw	r2,-12(fp)
   52b44:	10800117 	ldw	r2,4(r2)
   52b48:	1885803a 	cmpltu	r2,r3,r2
   52b4c:	10c03fcc 	andi	r3,r2,255
   52b50:	e0bfff17 	ldw	r2,-4(fp)
   52b54:	10c00015 	stw	r3,0(r2)
      rc = 0;
   52b58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   52b5c:	00000006 	br	52b60 <altera_avalon_jtag_uart_ioctl+0xd4>
   52b60:	0001883a 	nop

  default:
    break;
  }

  return rc;
   52b64:	e0bffb17 	ldw	r2,-20(fp)
}
   52b68:	e037883a 	mov	sp,fp
   52b6c:	df000017 	ldw	fp,0(sp)
   52b70:	dec00104 	addi	sp,sp,4
   52b74:	f800283a 	ret

00052b78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   52b78:	defff304 	addi	sp,sp,-52
   52b7c:	dfc00c15 	stw	ra,48(sp)
   52b80:	df000b15 	stw	fp,44(sp)
   52b84:	df000b04 	addi	fp,sp,44
   52b88:	e13ffc15 	stw	r4,-16(fp)
   52b8c:	e17ffd15 	stw	r5,-12(fp)
   52b90:	e1bffe15 	stw	r6,-8(fp)
   52b94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   52b98:	e0bffd17 	ldw	r2,-12(fp)
   52b9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   52ba0:	00004906 	br	52cc8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   52ba4:	e0bffc17 	ldw	r2,-16(fp)
   52ba8:	10800a17 	ldw	r2,40(r2)
   52bac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   52bb0:	e0bffc17 	ldw	r2,-16(fp)
   52bb4:	10800b17 	ldw	r2,44(r2)
   52bb8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   52bbc:	e0fff717 	ldw	r3,-36(fp)
   52bc0:	e0bff817 	ldw	r2,-32(fp)
   52bc4:	18800536 	bltu	r3,r2,52bdc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   52bc8:	e0fff717 	ldw	r3,-36(fp)
   52bcc:	e0bff817 	ldw	r2,-32(fp)
   52bd0:	1885c83a 	sub	r2,r3,r2
   52bd4:	e0bff615 	stw	r2,-40(fp)
   52bd8:	00000406 	br	52bec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   52bdc:	00c20004 	movi	r3,2048
   52be0:	e0bff817 	ldw	r2,-32(fp)
   52be4:	1885c83a 	sub	r2,r3,r2
   52be8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   52bec:	e0bff617 	ldw	r2,-40(fp)
   52bf0:	1000011e 	bne	r2,zero,52bf8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   52bf4:	00001d06 	br	52c6c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   52bf8:	e0fffe17 	ldw	r3,-8(fp)
   52bfc:	e0bff617 	ldw	r2,-40(fp)
   52c00:	1880022e 	bgeu	r3,r2,52c0c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   52c04:	e0bffe17 	ldw	r2,-8(fp)
   52c08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   52c0c:	e0bff817 	ldw	r2,-32(fp)
   52c10:	10800e04 	addi	r2,r2,56
   52c14:	e0fffc17 	ldw	r3,-16(fp)
   52c18:	1885883a 	add	r2,r3,r2
   52c1c:	e13ff517 	ldw	r4,-44(fp)
   52c20:	100b883a 	mov	r5,r2
   52c24:	e1bff617 	ldw	r6,-40(fp)
   52c28:	004c9bc0 	call	4c9bc <memcpy>
      ptr   += n;
   52c2c:	e0fff517 	ldw	r3,-44(fp)
   52c30:	e0bff617 	ldw	r2,-40(fp)
   52c34:	1885883a 	add	r2,r3,r2
   52c38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   52c3c:	e0fffe17 	ldw	r3,-8(fp)
   52c40:	e0bff617 	ldw	r2,-40(fp)
   52c44:	1885c83a 	sub	r2,r3,r2
   52c48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   52c4c:	e0fff817 	ldw	r3,-32(fp)
   52c50:	e0bff617 	ldw	r2,-40(fp)
   52c54:	1885883a 	add	r2,r3,r2
   52c58:	10c1ffcc 	andi	r3,r2,2047
   52c5c:	e0bffc17 	ldw	r2,-16(fp)
   52c60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   52c64:	e0bffe17 	ldw	r2,-8(fp)
   52c68:	00bfce16 	blt	zero,r2,52ba4 <__alt_data_end+0xfffe0ba4>

    /* If we read any data then return it */
    if (ptr != buffer)
   52c6c:	e0fff517 	ldw	r3,-44(fp)
   52c70:	e0bffd17 	ldw	r2,-12(fp)
   52c74:	18800126 	beq	r3,r2,52c7c <altera_avalon_jtag_uart_read+0x104>
      break;
   52c78:	00001506 	br	52cd0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   52c7c:	e0bfff17 	ldw	r2,-4(fp)
   52c80:	1090000c 	andi	r2,r2,16384
   52c84:	10000126 	beq	r2,zero,52c8c <altera_avalon_jtag_uart_read+0x114>
      break;
   52c88:	00001106 	br	52cd0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   52c8c:	0001883a 	nop
   52c90:	e0bffc17 	ldw	r2,-16(fp)
   52c94:	10c00a17 	ldw	r3,40(r2)
   52c98:	e0bff717 	ldw	r2,-36(fp)
   52c9c:	1880051e 	bne	r3,r2,52cb4 <altera_avalon_jtag_uart_read+0x13c>
   52ca0:	e0bffc17 	ldw	r2,-16(fp)
   52ca4:	10c00917 	ldw	r3,36(r2)
   52ca8:	e0bffc17 	ldw	r2,-16(fp)
   52cac:	10800117 	ldw	r2,4(r2)
   52cb0:	18bff736 	bltu	r3,r2,52c90 <__alt_data_end+0xfffe0c90>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   52cb4:	e0bffc17 	ldw	r2,-16(fp)
   52cb8:	10c00a17 	ldw	r3,40(r2)
   52cbc:	e0bff717 	ldw	r2,-36(fp)
   52cc0:	1880011e 	bne	r3,r2,52cc8 <altera_avalon_jtag_uart_read+0x150>
      break;
   52cc4:	00000206 	br	52cd0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   52cc8:	e0bffe17 	ldw	r2,-8(fp)
   52ccc:	00bfb516 	blt	zero,r2,52ba4 <__alt_data_end+0xfffe0ba4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   52cd0:	e0fff517 	ldw	r3,-44(fp)
   52cd4:	e0bffd17 	ldw	r2,-12(fp)
   52cd8:	18801826 	beq	r3,r2,52d3c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52cdc:	0005303a 	rdctl	r2,status
   52ce0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52ce4:	e0fffa17 	ldw	r3,-24(fp)
   52ce8:	00bfff84 	movi	r2,-2
   52cec:	1884703a 	and	r2,r3,r2
   52cf0:	1001703a 	wrctl	status,r2
  
  return context;
   52cf4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   52cf8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   52cfc:	e0bffc17 	ldw	r2,-16(fp)
   52d00:	10800817 	ldw	r2,32(r2)
   52d04:	10c00054 	ori	r3,r2,1
   52d08:	e0bffc17 	ldw	r2,-16(fp)
   52d0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   52d10:	e0bffc17 	ldw	r2,-16(fp)
   52d14:	10800017 	ldw	r2,0(r2)
   52d18:	10800104 	addi	r2,r2,4
   52d1c:	1007883a 	mov	r3,r2
   52d20:	e0bffc17 	ldw	r2,-16(fp)
   52d24:	10800817 	ldw	r2,32(r2)
   52d28:	18800035 	stwio	r2,0(r3)
   52d2c:	e0bff917 	ldw	r2,-28(fp)
   52d30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52d34:	e0bffb17 	ldw	r2,-20(fp)
   52d38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   52d3c:	e0fff517 	ldw	r3,-44(fp)
   52d40:	e0bffd17 	ldw	r2,-12(fp)
   52d44:	18800426 	beq	r3,r2,52d58 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   52d48:	e0fff517 	ldw	r3,-44(fp)
   52d4c:	e0bffd17 	ldw	r2,-12(fp)
   52d50:	1885c83a 	sub	r2,r3,r2
   52d54:	00000606 	br	52d70 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   52d58:	e0bfff17 	ldw	r2,-4(fp)
   52d5c:	1090000c 	andi	r2,r2,16384
   52d60:	10000226 	beq	r2,zero,52d6c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   52d64:	00bffd44 	movi	r2,-11
   52d68:	00000106 	br	52d70 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   52d6c:	00bffec4 	movi	r2,-5
}
   52d70:	e037883a 	mov	sp,fp
   52d74:	dfc00117 	ldw	ra,4(sp)
   52d78:	df000017 	ldw	fp,0(sp)
   52d7c:	dec00204 	addi	sp,sp,8
   52d80:	f800283a 	ret

00052d84 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   52d84:	defff304 	addi	sp,sp,-52
   52d88:	dfc00c15 	stw	ra,48(sp)
   52d8c:	df000b15 	stw	fp,44(sp)
   52d90:	df000b04 	addi	fp,sp,44
   52d94:	e13ffc15 	stw	r4,-16(fp)
   52d98:	e17ffd15 	stw	r5,-12(fp)
   52d9c:	e1bffe15 	stw	r6,-8(fp)
   52da0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   52da4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   52da8:	e0bffd17 	ldw	r2,-12(fp)
   52dac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   52db0:	00003806 	br	52e94 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   52db4:	e0bffc17 	ldw	r2,-16(fp)
   52db8:	10800c17 	ldw	r2,48(r2)
   52dbc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   52dc0:	e0bffc17 	ldw	r2,-16(fp)
   52dc4:	10800d17 	ldw	r2,52(r2)
   52dc8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   52dcc:	e0fff817 	ldw	r3,-32(fp)
   52dd0:	e0bff517 	ldw	r2,-44(fp)
   52dd4:	1880062e 	bgeu	r3,r2,52df0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   52dd8:	e0fff517 	ldw	r3,-44(fp)
   52ddc:	e0bff817 	ldw	r2,-32(fp)
   52de0:	1885c83a 	sub	r2,r3,r2
   52de4:	10bfffc4 	addi	r2,r2,-1
   52de8:	e0bff615 	stw	r2,-40(fp)
   52dec:	00000b06 	br	52e1c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   52df0:	e0bff517 	ldw	r2,-44(fp)
   52df4:	10000526 	beq	r2,zero,52e0c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   52df8:	00c20004 	movi	r3,2048
   52dfc:	e0bff817 	ldw	r2,-32(fp)
   52e00:	1885c83a 	sub	r2,r3,r2
   52e04:	e0bff615 	stw	r2,-40(fp)
   52e08:	00000406 	br	52e1c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   52e0c:	00c1ffc4 	movi	r3,2047
   52e10:	e0bff817 	ldw	r2,-32(fp)
   52e14:	1885c83a 	sub	r2,r3,r2
   52e18:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   52e1c:	e0bff617 	ldw	r2,-40(fp)
   52e20:	1000011e 	bne	r2,zero,52e28 <altera_avalon_jtag_uart_write+0xa4>
        break;
   52e24:	00001d06 	br	52e9c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   52e28:	e0fffe17 	ldw	r3,-8(fp)
   52e2c:	e0bff617 	ldw	r2,-40(fp)
   52e30:	1880022e 	bgeu	r3,r2,52e3c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   52e34:	e0bffe17 	ldw	r2,-8(fp)
   52e38:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   52e3c:	e0bff817 	ldw	r2,-32(fp)
   52e40:	10820e04 	addi	r2,r2,2104
   52e44:	e0fffc17 	ldw	r3,-16(fp)
   52e48:	1885883a 	add	r2,r3,r2
   52e4c:	1009883a 	mov	r4,r2
   52e50:	e17ffd17 	ldw	r5,-12(fp)
   52e54:	e1bff617 	ldw	r6,-40(fp)
   52e58:	004c9bc0 	call	4c9bc <memcpy>
      ptr   += n;
   52e5c:	e0fffd17 	ldw	r3,-12(fp)
   52e60:	e0bff617 	ldw	r2,-40(fp)
   52e64:	1885883a 	add	r2,r3,r2
   52e68:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   52e6c:	e0fffe17 	ldw	r3,-8(fp)
   52e70:	e0bff617 	ldw	r2,-40(fp)
   52e74:	1885c83a 	sub	r2,r3,r2
   52e78:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   52e7c:	e0fff817 	ldw	r3,-32(fp)
   52e80:	e0bff617 	ldw	r2,-40(fp)
   52e84:	1885883a 	add	r2,r3,r2
   52e88:	10c1ffcc 	andi	r3,r2,2047
   52e8c:	e0bffc17 	ldw	r2,-16(fp)
   52e90:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   52e94:	e0bffe17 	ldw	r2,-8(fp)
   52e98:	00bfc616 	blt	zero,r2,52db4 <__alt_data_end+0xfffe0db4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52e9c:	0005303a 	rdctl	r2,status
   52ea0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52ea4:	e0fffa17 	ldw	r3,-24(fp)
   52ea8:	00bfff84 	movi	r2,-2
   52eac:	1884703a 	and	r2,r3,r2
   52eb0:	1001703a 	wrctl	status,r2
  
  return context;
   52eb4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   52eb8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   52ebc:	e0bffc17 	ldw	r2,-16(fp)
   52ec0:	10800817 	ldw	r2,32(r2)
   52ec4:	10c00094 	ori	r3,r2,2
   52ec8:	e0bffc17 	ldw	r2,-16(fp)
   52ecc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   52ed0:	e0bffc17 	ldw	r2,-16(fp)
   52ed4:	10800017 	ldw	r2,0(r2)
   52ed8:	10800104 	addi	r2,r2,4
   52edc:	1007883a 	mov	r3,r2
   52ee0:	e0bffc17 	ldw	r2,-16(fp)
   52ee4:	10800817 	ldw	r2,32(r2)
   52ee8:	18800035 	stwio	r2,0(r3)
   52eec:	e0bff917 	ldw	r2,-28(fp)
   52ef0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52ef4:	e0bffb17 	ldw	r2,-20(fp)
   52ef8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   52efc:	e0bffe17 	ldw	r2,-8(fp)
   52f00:	0080120e 	bge	zero,r2,52f4c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   52f04:	e0bfff17 	ldw	r2,-4(fp)
   52f08:	1090000c 	andi	r2,r2,16384
   52f0c:	10000126 	beq	r2,zero,52f14 <altera_avalon_jtag_uart_write+0x190>
        break;
   52f10:	00001006 	br	52f54 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   52f14:	0001883a 	nop
   52f18:	e0bffc17 	ldw	r2,-16(fp)
   52f1c:	10c00d17 	ldw	r3,52(r2)
   52f20:	e0bff517 	ldw	r2,-44(fp)
   52f24:	1880051e 	bne	r3,r2,52f3c <altera_avalon_jtag_uart_write+0x1b8>
   52f28:	e0bffc17 	ldw	r2,-16(fp)
   52f2c:	10c00917 	ldw	r3,36(r2)
   52f30:	e0bffc17 	ldw	r2,-16(fp)
   52f34:	10800117 	ldw	r2,4(r2)
   52f38:	18bff736 	bltu	r3,r2,52f18 <__alt_data_end+0xfffe0f18>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   52f3c:	e0bffc17 	ldw	r2,-16(fp)
   52f40:	10800917 	ldw	r2,36(r2)
   52f44:	10000126 	beq	r2,zero,52f4c <altera_avalon_jtag_uart_write+0x1c8>
         break;
   52f48:	00000206 	br	52f54 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   52f4c:	e0bffe17 	ldw	r2,-8(fp)
   52f50:	00bf9716 	blt	zero,r2,52db0 <__alt_data_end+0xfffe0db0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   52f54:	e0fffd17 	ldw	r3,-12(fp)
   52f58:	e0bff717 	ldw	r2,-36(fp)
   52f5c:	18800426 	beq	r3,r2,52f70 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   52f60:	e0fffd17 	ldw	r3,-12(fp)
   52f64:	e0bff717 	ldw	r2,-36(fp)
   52f68:	1885c83a 	sub	r2,r3,r2
   52f6c:	00000606 	br	52f88 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   52f70:	e0bfff17 	ldw	r2,-4(fp)
   52f74:	1090000c 	andi	r2,r2,16384
   52f78:	10000226 	beq	r2,zero,52f84 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   52f7c:	00bffd44 	movi	r2,-11
   52f80:	00000106 	br	52f88 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   52f84:	00bffec4 	movi	r2,-5
}
   52f88:	e037883a 	mov	sp,fp
   52f8c:	dfc00117 	ldw	ra,4(sp)
   52f90:	df000017 	ldw	fp,0(sp)
   52f94:	dec00204 	addi	sp,sp,8
   52f98:	f800283a 	ret

00052f9c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   52f9c:	defffa04 	addi	sp,sp,-24
   52fa0:	dfc00515 	stw	ra,20(sp)
   52fa4:	df000415 	stw	fp,16(sp)
   52fa8:	df000404 	addi	fp,sp,16
   52fac:	e13ffd15 	stw	r4,-12(fp)
   52fb0:	e17ffe15 	stw	r5,-8(fp)
   52fb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   52fb8:	e0bffd17 	ldw	r2,-12(fp)
   52fbc:	10800017 	ldw	r2,0(r2)
   52fc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   52fc4:	e0bffc17 	ldw	r2,-16(fp)
   52fc8:	10c00a04 	addi	r3,r2,40
   52fcc:	e0bffd17 	ldw	r2,-12(fp)
   52fd0:	10800217 	ldw	r2,8(r2)
   52fd4:	1809883a 	mov	r4,r3
   52fd8:	e17ffe17 	ldw	r5,-8(fp)
   52fdc:	e1bfff17 	ldw	r6,-4(fp)
   52fe0:	100f883a 	mov	r7,r2
   52fe4:	00534b40 	call	534b4 <altera_avalon_uart_read>
      fd->fd_flags);
}
   52fe8:	e037883a 	mov	sp,fp
   52fec:	dfc00117 	ldw	ra,4(sp)
   52ff0:	df000017 	ldw	fp,0(sp)
   52ff4:	dec00204 	addi	sp,sp,8
   52ff8:	f800283a 	ret

00052ffc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   52ffc:	defffa04 	addi	sp,sp,-24
   53000:	dfc00515 	stw	ra,20(sp)
   53004:	df000415 	stw	fp,16(sp)
   53008:	df000404 	addi	fp,sp,16
   5300c:	e13ffd15 	stw	r4,-12(fp)
   53010:	e17ffe15 	stw	r5,-8(fp)
   53014:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   53018:	e0bffd17 	ldw	r2,-12(fp)
   5301c:	10800017 	ldw	r2,0(r2)
   53020:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   53024:	e0bffc17 	ldw	r2,-16(fp)
   53028:	10c00a04 	addi	r3,r2,40
   5302c:	e0bffd17 	ldw	r2,-12(fp)
   53030:	10800217 	ldw	r2,8(r2)
   53034:	1809883a 	mov	r4,r3
   53038:	e17ffe17 	ldw	r5,-8(fp)
   5303c:	e1bfff17 	ldw	r6,-4(fp)
   53040:	100f883a 	mov	r7,r2
   53044:	00536e00 	call	536e0 <altera_avalon_uart_write>
      fd->fd_flags);
}
   53048:	e037883a 	mov	sp,fp
   5304c:	dfc00117 	ldw	ra,4(sp)
   53050:	df000017 	ldw	fp,0(sp)
   53054:	dec00204 	addi	sp,sp,8
   53058:	f800283a 	ret

0005305c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   5305c:	defffc04 	addi	sp,sp,-16
   53060:	dfc00315 	stw	ra,12(sp)
   53064:	df000215 	stw	fp,8(sp)
   53068:	df000204 	addi	fp,sp,8
   5306c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   53070:	e0bfff17 	ldw	r2,-4(fp)
   53074:	10800017 	ldw	r2,0(r2)
   53078:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   5307c:	e0bffe17 	ldw	r2,-8(fp)
   53080:	10c00a04 	addi	r3,r2,40
   53084:	e0bfff17 	ldw	r2,-4(fp)
   53088:	10800217 	ldw	r2,8(r2)
   5308c:	1809883a 	mov	r4,r3
   53090:	100b883a 	mov	r5,r2
   53094:	00534100 	call	53410 <altera_avalon_uart_close>
}
   53098:	e037883a 	mov	sp,fp
   5309c:	dfc00117 	ldw	ra,4(sp)
   530a0:	df000017 	ldw	fp,0(sp)
   530a4:	dec00204 	addi	sp,sp,8
   530a8:	f800283a 	ret

000530ac <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   530ac:	defff804 	addi	sp,sp,-32
   530b0:	dfc00715 	stw	ra,28(sp)
   530b4:	df000615 	stw	fp,24(sp)
   530b8:	df000604 	addi	fp,sp,24
   530bc:	e13ffd15 	stw	r4,-12(fp)
   530c0:	e17ffe15 	stw	r5,-8(fp)
   530c4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   530c8:	e0bffd17 	ldw	r2,-12(fp)
   530cc:	10800017 	ldw	r2,0(r2)
   530d0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   530d4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   530d8:	1000041e 	bne	r2,zero,530ec <altera_avalon_uart_init+0x40>
   530dc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   530e0:	1000021e 	bne	r2,zero,530ec <altera_avalon_uart_init+0x40>
   530e4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   530e8:	10000226 	beq	r2,zero,530f4 <altera_avalon_uart_init+0x48>
   530ec:	00800044 	movi	r2,1
   530f0:	00000106 	br	530f8 <altera_avalon_uart_init+0x4c>
   530f4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   530f8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   530fc:	e0bffc17 	ldw	r2,-16(fp)
   53100:	10000f1e 	bne	r2,zero,53140 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   53104:	e0bffd17 	ldw	r2,-12(fp)
   53108:	00c32004 	movi	r3,3200
   5310c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   53110:	e0bffb17 	ldw	r2,-20(fp)
   53114:	10800304 	addi	r2,r2,12
   53118:	e0fffd17 	ldw	r3,-12(fp)
   5311c:	18c00117 	ldw	r3,4(r3)
   53120:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   53124:	d8000015 	stw	zero,0(sp)
   53128:	e13ffe17 	ldw	r4,-8(fp)
   5312c:	e17fff17 	ldw	r5,-4(fp)
   53130:	01800174 	movhi	r6,5
   53134:	318c5504 	addi	r6,r6,12628
   53138:	e1fffd17 	ldw	r7,-12(fp)
   5313c:	0053e440 	call	53e44 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   53140:	e037883a 	mov	sp,fp
   53144:	dfc00117 	ldw	ra,4(sp)
   53148:	df000017 	ldw	fp,0(sp)
   5314c:	dec00204 	addi	sp,sp,8
   53150:	f800283a 	ret

00053154 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   53154:	defffa04 	addi	sp,sp,-24
   53158:	dfc00515 	stw	ra,20(sp)
   5315c:	df000415 	stw	fp,16(sp)
   53160:	df000404 	addi	fp,sp,16
   53164:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   53168:	e0bfff17 	ldw	r2,-4(fp)
   5316c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   53170:	e0bffc17 	ldw	r2,-16(fp)
   53174:	10800017 	ldw	r2,0(r2)
   53178:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   5317c:	e0bffd17 	ldw	r2,-12(fp)
   53180:	10800204 	addi	r2,r2,8
   53184:	10800037 	ldwio	r2,0(r2)
   53188:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   5318c:	e0bffd17 	ldw	r2,-12(fp)
   53190:	10800204 	addi	r2,r2,8
   53194:	0007883a 	mov	r3,zero
   53198:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   5319c:	e0bffd17 	ldw	r2,-12(fp)
   531a0:	10800204 	addi	r2,r2,8
   531a4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   531a8:	e0bffe17 	ldw	r2,-8(fp)
   531ac:	1080200c 	andi	r2,r2,128
   531b0:	10000326 	beq	r2,zero,531c0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   531b4:	e13ffc17 	ldw	r4,-16(fp)
   531b8:	e17ffe17 	ldw	r5,-8(fp)
   531bc:	00531ec0 	call	531ec <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   531c0:	e0bffe17 	ldw	r2,-8(fp)
   531c4:	1081100c 	andi	r2,r2,1088
   531c8:	10000326 	beq	r2,zero,531d8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   531cc:	e13ffc17 	ldw	r4,-16(fp)
   531d0:	e17ffe17 	ldw	r5,-8(fp)
   531d4:	00532cc0 	call	532cc <altera_avalon_uart_txirq>
  }
  

}
   531d8:	e037883a 	mov	sp,fp
   531dc:	dfc00117 	ldw	ra,4(sp)
   531e0:	df000017 	ldw	fp,0(sp)
   531e4:	dec00204 	addi	sp,sp,8
   531e8:	f800283a 	ret

000531ec <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   531ec:	defffc04 	addi	sp,sp,-16
   531f0:	df000315 	stw	fp,12(sp)
   531f4:	df000304 	addi	fp,sp,12
   531f8:	e13ffe15 	stw	r4,-8(fp)
   531fc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   53200:	e0bfff17 	ldw	r2,-4(fp)
   53204:	108000cc 	andi	r2,r2,3
   53208:	10000126 	beq	r2,zero,53210 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   5320c:	00002b06 	br	532bc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   53210:	e0bffe17 	ldw	r2,-8(fp)
   53214:	10800317 	ldw	r2,12(r2)
   53218:	e0bffe17 	ldw	r2,-8(fp)
   5321c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   53220:	e0bffe17 	ldw	r2,-8(fp)
   53224:	10800317 	ldw	r2,12(r2)
   53228:	10800044 	addi	r2,r2,1
   5322c:	10800fcc 	andi	r2,r2,63
   53230:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   53234:	e0bffe17 	ldw	r2,-8(fp)
   53238:	10800317 	ldw	r2,12(r2)
   5323c:	e0fffe17 	ldw	r3,-8(fp)
   53240:	18c00017 	ldw	r3,0(r3)
   53244:	18c00037 	ldwio	r3,0(r3)
   53248:	1809883a 	mov	r4,r3
   5324c:	e0fffe17 	ldw	r3,-8(fp)
   53250:	1885883a 	add	r2,r3,r2
   53254:	10800704 	addi	r2,r2,28
   53258:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   5325c:	e0bffe17 	ldw	r2,-8(fp)
   53260:	e0fffd17 	ldw	r3,-12(fp)
   53264:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   53268:	e0bffe17 	ldw	r2,-8(fp)
   5326c:	10800317 	ldw	r2,12(r2)
   53270:	10800044 	addi	r2,r2,1
   53274:	10800fcc 	andi	r2,r2,63
   53278:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   5327c:	e0bffe17 	ldw	r2,-8(fp)
   53280:	10c00217 	ldw	r3,8(r2)
   53284:	e0bffd17 	ldw	r2,-12(fp)
   53288:	18800c1e 	bne	r3,r2,532bc <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   5328c:	e0bffe17 	ldw	r2,-8(fp)
   53290:	10c00117 	ldw	r3,4(r2)
   53294:	00bfdfc4 	movi	r2,-129
   53298:	1886703a 	and	r3,r3,r2
   5329c:	e0bffe17 	ldw	r2,-8(fp)
   532a0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   532a4:	e0bffe17 	ldw	r2,-8(fp)
   532a8:	10800017 	ldw	r2,0(r2)
   532ac:	10800304 	addi	r2,r2,12
   532b0:	e0fffe17 	ldw	r3,-8(fp)
   532b4:	18c00117 	ldw	r3,4(r3)
   532b8:	10c00035 	stwio	r3,0(r2)
  }   
}
   532bc:	e037883a 	mov	sp,fp
   532c0:	df000017 	ldw	fp,0(sp)
   532c4:	dec00104 	addi	sp,sp,4
   532c8:	f800283a 	ret

000532cc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   532cc:	defffb04 	addi	sp,sp,-20
   532d0:	df000415 	stw	fp,16(sp)
   532d4:	df000404 	addi	fp,sp,16
   532d8:	e13ffc15 	stw	r4,-16(fp)
   532dc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   532e0:	e0bffc17 	ldw	r2,-16(fp)
   532e4:	10c00417 	ldw	r3,16(r2)
   532e8:	e0bffc17 	ldw	r2,-16(fp)
   532ec:	10800517 	ldw	r2,20(r2)
   532f0:	18803226 	beq	r3,r2,533bc <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   532f4:	e0bffc17 	ldw	r2,-16(fp)
   532f8:	10800617 	ldw	r2,24(r2)
   532fc:	1080008c 	andi	r2,r2,2
   53300:	10000326 	beq	r2,zero,53310 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   53304:	e0bffd17 	ldw	r2,-12(fp)
   53308:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   5330c:	10001d26 	beq	r2,zero,53384 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   53310:	e0bffc17 	ldw	r2,-16(fp)
   53314:	10800417 	ldw	r2,16(r2)
   53318:	e0bffc17 	ldw	r2,-16(fp)
   5331c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   53320:	e0bffc17 	ldw	r2,-16(fp)
   53324:	10800017 	ldw	r2,0(r2)
   53328:	10800104 	addi	r2,r2,4
   5332c:	e0fffc17 	ldw	r3,-16(fp)
   53330:	18c00417 	ldw	r3,16(r3)
   53334:	e13ffc17 	ldw	r4,-16(fp)
   53338:	20c7883a 	add	r3,r4,r3
   5333c:	18c01704 	addi	r3,r3,92
   53340:	18c00003 	ldbu	r3,0(r3)
   53344:	18c03fcc 	andi	r3,r3,255
   53348:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   5334c:	e0bffc17 	ldw	r2,-16(fp)
   53350:	10800417 	ldw	r2,16(r2)
   53354:	10800044 	addi	r2,r2,1
   53358:	e0fffc17 	ldw	r3,-16(fp)
   5335c:	18800415 	stw	r2,16(r3)
   53360:	10c00fcc 	andi	r3,r2,63
   53364:	e0bffc17 	ldw	r2,-16(fp)
   53368:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   5336c:	e0bffc17 	ldw	r2,-16(fp)
   53370:	10800117 	ldw	r2,4(r2)
   53374:	10c01014 	ori	r3,r2,64
   53378:	e0bffc17 	ldw	r2,-16(fp)
   5337c:	10c00115 	stw	r3,4(r2)
   53380:	00000e06 	br	533bc <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   53384:	e0bffc17 	ldw	r2,-16(fp)
   53388:	10800017 	ldw	r2,0(r2)
   5338c:	10800204 	addi	r2,r2,8
   53390:	10800037 	ldwio	r2,0(r2)
   53394:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   53398:	e0bffd17 	ldw	r2,-12(fp)
   5339c:	1082000c 	andi	r2,r2,2048
   533a0:	1000061e 	bne	r2,zero,533bc <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   533a4:	e0bffc17 	ldw	r2,-16(fp)
   533a8:	10c00117 	ldw	r3,4(r2)
   533ac:	00bfefc4 	movi	r2,-65
   533b0:	1886703a 	and	r3,r3,r2
   533b4:	e0bffc17 	ldw	r2,-16(fp)
   533b8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   533bc:	e0bffc17 	ldw	r2,-16(fp)
   533c0:	10c00417 	ldw	r3,16(r2)
   533c4:	e0bffc17 	ldw	r2,-16(fp)
   533c8:	10800517 	ldw	r2,20(r2)
   533cc:	1880061e 	bne	r3,r2,533e8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   533d0:	e0bffc17 	ldw	r2,-16(fp)
   533d4:	10c00117 	ldw	r3,4(r2)
   533d8:	00beefc4 	movi	r2,-1089
   533dc:	1886703a 	and	r3,r3,r2
   533e0:	e0bffc17 	ldw	r2,-16(fp)
   533e4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   533e8:	e0bffc17 	ldw	r2,-16(fp)
   533ec:	10800017 	ldw	r2,0(r2)
   533f0:	10800304 	addi	r2,r2,12
   533f4:	e0fffc17 	ldw	r3,-16(fp)
   533f8:	18c00117 	ldw	r3,4(r3)
   533fc:	10c00035 	stwio	r3,0(r2)
}
   53400:	e037883a 	mov	sp,fp
   53404:	df000017 	ldw	fp,0(sp)
   53408:	dec00104 	addi	sp,sp,4
   5340c:	f800283a 	ret

00053410 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   53410:	defffd04 	addi	sp,sp,-12
   53414:	df000215 	stw	fp,8(sp)
   53418:	df000204 	addi	fp,sp,8
   5341c:	e13ffe15 	stw	r4,-8(fp)
   53420:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   53424:	00000506 	br	5343c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   53428:	e0bfff17 	ldw	r2,-4(fp)
   5342c:	1090000c 	andi	r2,r2,16384
   53430:	10000226 	beq	r2,zero,5343c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   53434:	00bffd44 	movi	r2,-11
   53438:	00000606 	br	53454 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   5343c:	e0bffe17 	ldw	r2,-8(fp)
   53440:	10c00417 	ldw	r3,16(r2)
   53444:	e0bffe17 	ldw	r2,-8(fp)
   53448:	10800517 	ldw	r2,20(r2)
   5344c:	18bff61e 	bne	r3,r2,53428 <__alt_data_end+0xfffe1428>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   53450:	0005883a 	mov	r2,zero
}
   53454:	e037883a 	mov	sp,fp
   53458:	df000017 	ldw	fp,0(sp)
   5345c:	dec00104 	addi	sp,sp,4
   53460:	f800283a 	ret

00053464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53464:	defffe04 	addi	sp,sp,-8
   53468:	dfc00115 	stw	ra,4(sp)
   5346c:	df000015 	stw	fp,0(sp)
   53470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   53474:	00800174 	movhi	r2,5
   53478:	109a6804 	addi	r2,r2,27040
   5347c:	10800017 	ldw	r2,0(r2)
   53480:	10000526 	beq	r2,zero,53498 <alt_get_errno+0x34>
   53484:	00800174 	movhi	r2,5
   53488:	109a6804 	addi	r2,r2,27040
   5348c:	10800017 	ldw	r2,0(r2)
   53490:	103ee83a 	callr	r2
   53494:	00000206 	br	534a0 <alt_get_errno+0x3c>
   53498:	008001b4 	movhi	r2,6
   5349c:	10a1a604 	addi	r2,r2,-31080
}
   534a0:	e037883a 	mov	sp,fp
   534a4:	dfc00117 	ldw	ra,4(sp)
   534a8:	df000017 	ldw	fp,0(sp)
   534ac:	dec00204 	addi	sp,sp,8
   534b0:	f800283a 	ret

000534b4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   534b4:	defff204 	addi	sp,sp,-56
   534b8:	dfc00d15 	stw	ra,52(sp)
   534bc:	df000c15 	stw	fp,48(sp)
   534c0:	df000c04 	addi	fp,sp,48
   534c4:	e13ffc15 	stw	r4,-16(fp)
   534c8:	e17ffd15 	stw	r5,-12(fp)
   534cc:	e1bffe15 	stw	r6,-8(fp)
   534d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   534d4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   534d8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   534dc:	e0bfff17 	ldw	r2,-4(fp)
   534e0:	1090000c 	andi	r2,r2,16384
   534e4:	1005003a 	cmpeq	r2,r2,zero
   534e8:	10803fcc 	andi	r2,r2,255
   534ec:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   534f0:	00001306 	br	53540 <altera_avalon_uart_read+0x8c>
    {
      count++;
   534f4:	e0bff517 	ldw	r2,-44(fp)
   534f8:	10800044 	addi	r2,r2,1
   534fc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   53500:	e0bffd17 	ldw	r2,-12(fp)
   53504:	10c00044 	addi	r3,r2,1
   53508:	e0fffd15 	stw	r3,-12(fp)
   5350c:	e0fffc17 	ldw	r3,-16(fp)
   53510:	18c00217 	ldw	r3,8(r3)
   53514:	e13ffc17 	ldw	r4,-16(fp)
   53518:	20c7883a 	add	r3,r4,r3
   5351c:	18c00704 	addi	r3,r3,28
   53520:	18c00003 	ldbu	r3,0(r3)
   53524:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   53528:	e0bffc17 	ldw	r2,-16(fp)
   5352c:	10800217 	ldw	r2,8(r2)
   53530:	10800044 	addi	r2,r2,1
   53534:	10c00fcc 	andi	r3,r2,63
   53538:	e0bffc17 	ldw	r2,-16(fp)
   5353c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   53540:	e0fff517 	ldw	r3,-44(fp)
   53544:	e0bffe17 	ldw	r2,-8(fp)
   53548:	1880050e 	bge	r3,r2,53560 <altera_avalon_uart_read+0xac>
   5354c:	e0bffc17 	ldw	r2,-16(fp)
   53550:	10c00217 	ldw	r3,8(r2)
   53554:	e0bffc17 	ldw	r2,-16(fp)
   53558:	10800317 	ldw	r2,12(r2)
   5355c:	18bfe51e 	bne	r3,r2,534f4 <__alt_data_end+0xfffe14f4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   53560:	e0bff517 	ldw	r2,-44(fp)
   53564:	1000251e 	bne	r2,zero,535fc <altera_avalon_uart_read+0x148>
   53568:	e0bffc17 	ldw	r2,-16(fp)
   5356c:	10c00217 	ldw	r3,8(r2)
   53570:	e0bffc17 	ldw	r2,-16(fp)
   53574:	10800317 	ldw	r2,12(r2)
   53578:	1880201e 	bne	r3,r2,535fc <altera_avalon_uart_read+0x148>
    {
      if (!block)
   5357c:	e0bff617 	ldw	r2,-40(fp)
   53580:	1000071e 	bne	r2,zero,535a0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   53584:	00534640 	call	53464 <alt_get_errno>
   53588:	1007883a 	mov	r3,r2
   5358c:	008002c4 	movi	r2,11
   53590:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   53594:	00800044 	movi	r2,1
   53598:	e0bff405 	stb	r2,-48(fp)
        break;
   5359c:	00001b06 	br	5360c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   535a0:	0005303a 	rdctl	r2,status
   535a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   535a8:	e0fff817 	ldw	r3,-32(fp)
   535ac:	00bfff84 	movi	r2,-2
   535b0:	1884703a 	and	r2,r3,r2
   535b4:	1001703a 	wrctl	status,r2
  
  return context;
   535b8:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   535bc:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   535c0:	e0bffc17 	ldw	r2,-16(fp)
   535c4:	10800117 	ldw	r2,4(r2)
   535c8:	10c02014 	ori	r3,r2,128
   535cc:	e0bffc17 	ldw	r2,-16(fp)
   535d0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   535d4:	e0bffc17 	ldw	r2,-16(fp)
   535d8:	10800017 	ldw	r2,0(r2)
   535dc:	10800304 	addi	r2,r2,12
   535e0:	e0fffc17 	ldw	r3,-16(fp)
   535e4:	18c00117 	ldw	r3,4(r3)
   535e8:	10c00035 	stwio	r3,0(r2)
   535ec:	e0bff717 	ldw	r2,-36(fp)
   535f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   535f4:	e0bff917 	ldw	r2,-28(fp)
   535f8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   535fc:	e0bff517 	ldw	r2,-44(fp)
   53600:	1000021e 	bne	r2,zero,5360c <altera_avalon_uart_read+0x158>
   53604:	e0bffe17 	ldw	r2,-8(fp)
   53608:	103fb91e 	bne	r2,zero,534f0 <__alt_data_end+0xfffe14f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5360c:	0005303a 	rdctl	r2,status
   53610:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53614:	e0fffa17 	ldw	r3,-24(fp)
   53618:	00bfff84 	movi	r2,-2
   5361c:	1884703a 	and	r2,r3,r2
   53620:	1001703a 	wrctl	status,r2
  
  return context;
   53624:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   53628:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   5362c:	e0bffc17 	ldw	r2,-16(fp)
   53630:	10800117 	ldw	r2,4(r2)
   53634:	10c02014 	ori	r3,r2,128
   53638:	e0bffc17 	ldw	r2,-16(fp)
   5363c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   53640:	e0bffc17 	ldw	r2,-16(fp)
   53644:	10800017 	ldw	r2,0(r2)
   53648:	10800304 	addi	r2,r2,12
   5364c:	e0fffc17 	ldw	r3,-16(fp)
   53650:	18c00117 	ldw	r3,4(r3)
   53654:	10c00035 	stwio	r3,0(r2)
   53658:	e0bff717 	ldw	r2,-36(fp)
   5365c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53660:	e0bffb17 	ldw	r2,-20(fp)
   53664:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   53668:	e0bff403 	ldbu	r2,-48(fp)
   5366c:	10000226 	beq	r2,zero,53678 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   53670:	00bffd44 	movi	r2,-11
   53674:	00000106 	br	5367c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   53678:	e0bff517 	ldw	r2,-44(fp)
  }
}
   5367c:	e037883a 	mov	sp,fp
   53680:	dfc00117 	ldw	ra,4(sp)
   53684:	df000017 	ldw	fp,0(sp)
   53688:	dec00204 	addi	sp,sp,8
   5368c:	f800283a 	ret

00053690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53690:	defffe04 	addi	sp,sp,-8
   53694:	dfc00115 	stw	ra,4(sp)
   53698:	df000015 	stw	fp,0(sp)
   5369c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   536a0:	00800174 	movhi	r2,5
   536a4:	109a6804 	addi	r2,r2,27040
   536a8:	10800017 	ldw	r2,0(r2)
   536ac:	10000526 	beq	r2,zero,536c4 <alt_get_errno+0x34>
   536b0:	00800174 	movhi	r2,5
   536b4:	109a6804 	addi	r2,r2,27040
   536b8:	10800017 	ldw	r2,0(r2)
   536bc:	103ee83a 	callr	r2
   536c0:	00000206 	br	536cc <alt_get_errno+0x3c>
   536c4:	008001b4 	movhi	r2,6
   536c8:	10a1a604 	addi	r2,r2,-31080
}
   536cc:	e037883a 	mov	sp,fp
   536d0:	dfc00117 	ldw	ra,4(sp)
   536d4:	df000017 	ldw	fp,0(sp)
   536d8:	dec00204 	addi	sp,sp,8
   536dc:	f800283a 	ret

000536e0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   536e0:	defff204 	addi	sp,sp,-56
   536e4:	dfc00d15 	stw	ra,52(sp)
   536e8:	df000c15 	stw	fp,48(sp)
   536ec:	df000c04 	addi	fp,sp,48
   536f0:	e13ffc15 	stw	r4,-16(fp)
   536f4:	e17ffd15 	stw	r5,-12(fp)
   536f8:	e1bffe15 	stw	r6,-8(fp)
   536fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   53700:	e0bffe17 	ldw	r2,-8(fp)
   53704:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   53708:	e0bfff17 	ldw	r2,-4(fp)
   5370c:	1090000c 	andi	r2,r2,16384
   53710:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   53714:	00003c06 	br	53808 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   53718:	e0bffc17 	ldw	r2,-16(fp)
   5371c:	10800517 	ldw	r2,20(r2)
   53720:	10800044 	addi	r2,r2,1
   53724:	10800fcc 	andi	r2,r2,63
   53728:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   5372c:	e0bffc17 	ldw	r2,-16(fp)
   53730:	10c00417 	ldw	r3,16(r2)
   53734:	e0bff617 	ldw	r2,-40(fp)
   53738:	1880221e 	bne	r3,r2,537c4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   5373c:	e0bff517 	ldw	r2,-44(fp)
   53740:	10000526 	beq	r2,zero,53758 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   53744:	00536900 	call	53690 <alt_get_errno>
   53748:	1007883a 	mov	r3,r2
   5374c:	008002c4 	movi	r2,11
   53750:	18800015 	stw	r2,0(r3)
        break;
   53754:	00002e06 	br	53810 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53758:	0005303a 	rdctl	r2,status
   5375c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53760:	e0fff817 	ldw	r3,-32(fp)
   53764:	00bfff84 	movi	r2,-2
   53768:	1884703a 	and	r2,r3,r2
   5376c:	1001703a 	wrctl	status,r2
  
  return context;
   53770:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   53774:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   53778:	e0bffc17 	ldw	r2,-16(fp)
   5377c:	10800117 	ldw	r2,4(r2)
   53780:	10c11014 	ori	r3,r2,1088
   53784:	e0bffc17 	ldw	r2,-16(fp)
   53788:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   5378c:	e0bffc17 	ldw	r2,-16(fp)
   53790:	10800017 	ldw	r2,0(r2)
   53794:	10800304 	addi	r2,r2,12
   53798:	e0fffc17 	ldw	r3,-16(fp)
   5379c:	18c00117 	ldw	r3,4(r3)
   537a0:	10c00035 	stwio	r3,0(r2)
   537a4:	e0bff717 	ldw	r2,-36(fp)
   537a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   537ac:	e0bff917 	ldw	r2,-28(fp)
   537b0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   537b4:	e0bffc17 	ldw	r2,-16(fp)
   537b8:	10c00417 	ldw	r3,16(r2)
   537bc:	e0bff617 	ldw	r2,-40(fp)
   537c0:	18bffc26 	beq	r3,r2,537b4 <__alt_data_end+0xfffe17b4>
      }
    }

    count--;
   537c4:	e0bff417 	ldw	r2,-48(fp)
   537c8:	10bfffc4 	addi	r2,r2,-1
   537cc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   537d0:	e0bffc17 	ldw	r2,-16(fp)
   537d4:	10c00517 	ldw	r3,20(r2)
   537d8:	e0bffd17 	ldw	r2,-12(fp)
   537dc:	11000044 	addi	r4,r2,1
   537e0:	e13ffd15 	stw	r4,-12(fp)
   537e4:	10800003 	ldbu	r2,0(r2)
   537e8:	1009883a 	mov	r4,r2
   537ec:	e0bffc17 	ldw	r2,-16(fp)
   537f0:	10c5883a 	add	r2,r2,r3
   537f4:	10801704 	addi	r2,r2,92
   537f8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   537fc:	e0bffc17 	ldw	r2,-16(fp)
   53800:	e0fff617 	ldw	r3,-40(fp)
   53804:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   53808:	e0bff417 	ldw	r2,-48(fp)
   5380c:	103fc21e 	bne	r2,zero,53718 <__alt_data_end+0xfffe1718>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53810:	0005303a 	rdctl	r2,status
   53814:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53818:	e0fffa17 	ldw	r3,-24(fp)
   5381c:	00bfff84 	movi	r2,-2
   53820:	1884703a 	and	r2,r3,r2
   53824:	1001703a 	wrctl	status,r2
  
  return context;
   53828:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   5382c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   53830:	e0bffc17 	ldw	r2,-16(fp)
   53834:	10800117 	ldw	r2,4(r2)
   53838:	10c11014 	ori	r3,r2,1088
   5383c:	e0bffc17 	ldw	r2,-16(fp)
   53840:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   53844:	e0bffc17 	ldw	r2,-16(fp)
   53848:	10800017 	ldw	r2,0(r2)
   5384c:	10800304 	addi	r2,r2,12
   53850:	e0fffc17 	ldw	r3,-16(fp)
   53854:	18c00117 	ldw	r3,4(r3)
   53858:	10c00035 	stwio	r3,0(r2)
   5385c:	e0bff717 	ldw	r2,-36(fp)
   53860:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53864:	e0bffb17 	ldw	r2,-20(fp)
   53868:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   5386c:	e0fffe17 	ldw	r3,-8(fp)
   53870:	e0bff417 	ldw	r2,-48(fp)
   53874:	1885c83a 	sub	r2,r3,r2
}
   53878:	e037883a 	mov	sp,fp
   5387c:	dfc00117 	ldw	ra,4(sp)
   53880:	df000017 	ldw	fp,0(sp)
   53884:	dec00204 	addi	sp,sp,8
   53888:	f800283a 	ret

0005388c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5388c:	defff504 	addi	sp,sp,-44
   53890:	df000a15 	stw	fp,40(sp)
   53894:	df000a04 	addi	fp,sp,40
   53898:	e13ffc15 	stw	r4,-16(fp)
   5389c:	e17ffd15 	stw	r5,-12(fp)
   538a0:	e1bffe15 	stw	r6,-8(fp)
   538a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   538a8:	e03ff615 	stw	zero,-40(fp)
   538ac:	008001b4 	movhi	r2,6
   538b0:	10a1ab04 	addi	r2,r2,-31060
   538b4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   538b8:	10003f26 	beq	r2,zero,539b8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   538bc:	e0bffc17 	ldw	r2,-16(fp)
   538c0:	10003b26 	beq	r2,zero,539b0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   538c4:	e0bffc17 	ldw	r2,-16(fp)
   538c8:	e0fffe17 	ldw	r3,-8(fp)
   538cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   538d0:	e0bffc17 	ldw	r2,-16(fp)
   538d4:	e0ffff17 	ldw	r3,-4(fp)
   538d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   538dc:	0005303a 	rdctl	r2,status
   538e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   538e4:	e0fff817 	ldw	r3,-32(fp)
   538e8:	00bfff84 	movi	r2,-2
   538ec:	1884703a 	and	r2,r3,r2
   538f0:	1001703a 	wrctl	status,r2
  
  return context;
   538f4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   538f8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   538fc:	008001b4 	movhi	r2,6
   53900:	10a1ac04 	addi	r2,r2,-31056
   53904:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   53908:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   5390c:	e0fffd17 	ldw	r3,-12(fp)
   53910:	e0bff617 	ldw	r2,-40(fp)
   53914:	1885883a 	add	r2,r3,r2
   53918:	10c00044 	addi	r3,r2,1
   5391c:	e0bffc17 	ldw	r2,-16(fp)
   53920:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   53924:	e0bffc17 	ldw	r2,-16(fp)
   53928:	10c00217 	ldw	r3,8(r2)
   5392c:	e0bff617 	ldw	r2,-40(fp)
   53930:	1880042e 	bgeu	r3,r2,53944 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   53934:	e0bffc17 	ldw	r2,-16(fp)
   53938:	00c00044 	movi	r3,1
   5393c:	10c00405 	stb	r3,16(r2)
   53940:	00000206 	br	5394c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   53944:	e0bffc17 	ldw	r2,-16(fp)
   53948:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   5394c:	e0fffc17 	ldw	r3,-16(fp)
   53950:	00800174 	movhi	r2,5
   53954:	109a6b04 	addi	r2,r2,27052
   53958:	e0bff915 	stw	r2,-28(fp)
   5395c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   53960:	e0bffa17 	ldw	r2,-24(fp)
   53964:	e0fff917 	ldw	r3,-28(fp)
   53968:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5396c:	e0bff917 	ldw	r2,-28(fp)
   53970:	10c00017 	ldw	r3,0(r2)
   53974:	e0bffa17 	ldw	r2,-24(fp)
   53978:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5397c:	e0bff917 	ldw	r2,-28(fp)
   53980:	10800017 	ldw	r2,0(r2)
   53984:	e0fffa17 	ldw	r3,-24(fp)
   53988:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5398c:	e0bff917 	ldw	r2,-28(fp)
   53990:	e0fffa17 	ldw	r3,-24(fp)
   53994:	10c00015 	stw	r3,0(r2)
   53998:	e0bff717 	ldw	r2,-36(fp)
   5399c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   539a0:	e0bffb17 	ldw	r2,-20(fp)
   539a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   539a8:	0005883a 	mov	r2,zero
   539ac:	00000306 	br	539bc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   539b0:	00bffa84 	movi	r2,-22
   539b4:	00000106 	br	539bc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   539b8:	00bfde84 	movi	r2,-134
  }
}
   539bc:	e037883a 	mov	sp,fp
   539c0:	df000017 	ldw	fp,0(sp)
   539c4:	dec00104 	addi	sp,sp,4
   539c8:	f800283a 	ret

000539cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   539cc:	defffe04 	addi	sp,sp,-8
   539d0:	df000115 	stw	fp,4(sp)
   539d4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   539d8:	e03fff15 	stw	zero,-4(fp)
   539dc:	00000506 	br	539f4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   539e0:	e0bfff17 	ldw	r2,-4(fp)
   539e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   539e8:	e0bfff17 	ldw	r2,-4(fp)
   539ec:	10800804 	addi	r2,r2,32
   539f0:	e0bfff15 	stw	r2,-4(fp)
   539f4:	e0bfff17 	ldw	r2,-4(fp)
   539f8:	10820030 	cmpltui	r2,r2,2048
   539fc:	103ff81e 	bne	r2,zero,539e0 <__alt_data_end+0xfffe19e0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   53a00:	e037883a 	mov	sp,fp
   53a04:	df000017 	ldw	fp,0(sp)
   53a08:	dec00104 	addi	sp,sp,4
   53a0c:	f800283a 	ret

00053a10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53a10:	defffe04 	addi	sp,sp,-8
   53a14:	dfc00115 	stw	ra,4(sp)
   53a18:	df000015 	stw	fp,0(sp)
   53a1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   53a20:	00800174 	movhi	r2,5
   53a24:	109a6804 	addi	r2,r2,27040
   53a28:	10800017 	ldw	r2,0(r2)
   53a2c:	10000526 	beq	r2,zero,53a44 <alt_get_errno+0x34>
   53a30:	00800174 	movhi	r2,5
   53a34:	109a6804 	addi	r2,r2,27040
   53a38:	10800017 	ldw	r2,0(r2)
   53a3c:	103ee83a 	callr	r2
   53a40:	00000206 	br	53a4c <alt_get_errno+0x3c>
   53a44:	008001b4 	movhi	r2,6
   53a48:	10a1a604 	addi	r2,r2,-31080
}
   53a4c:	e037883a 	mov	sp,fp
   53a50:	dfc00117 	ldw	ra,4(sp)
   53a54:	df000017 	ldw	fp,0(sp)
   53a58:	dec00204 	addi	sp,sp,8
   53a5c:	f800283a 	ret

00053a60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   53a60:	defffa04 	addi	sp,sp,-24
   53a64:	dfc00515 	stw	ra,20(sp)
   53a68:	df000415 	stw	fp,16(sp)
   53a6c:	df000404 	addi	fp,sp,16
   53a70:	e13ffe15 	stw	r4,-8(fp)
   53a74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   53a78:	e0bffe17 	ldw	r2,-8(fp)
   53a7c:	10000326 	beq	r2,zero,53a8c <alt_dev_llist_insert+0x2c>
   53a80:	e0bffe17 	ldw	r2,-8(fp)
   53a84:	10800217 	ldw	r2,8(r2)
   53a88:	1000061e 	bne	r2,zero,53aa4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   53a8c:	0053a100 	call	53a10 <alt_get_errno>
   53a90:	1007883a 	mov	r3,r2
   53a94:	00800584 	movi	r2,22
   53a98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   53a9c:	00bffa84 	movi	r2,-22
   53aa0:	00001306 	br	53af0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   53aa4:	e0bffe17 	ldw	r2,-8(fp)
   53aa8:	e0ffff17 	ldw	r3,-4(fp)
   53aac:	e0fffc15 	stw	r3,-16(fp)
   53ab0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   53ab4:	e0bffd17 	ldw	r2,-12(fp)
   53ab8:	e0fffc17 	ldw	r3,-16(fp)
   53abc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   53ac0:	e0bffc17 	ldw	r2,-16(fp)
   53ac4:	10c00017 	ldw	r3,0(r2)
   53ac8:	e0bffd17 	ldw	r2,-12(fp)
   53acc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   53ad0:	e0bffc17 	ldw	r2,-16(fp)
   53ad4:	10800017 	ldw	r2,0(r2)
   53ad8:	e0fffd17 	ldw	r3,-12(fp)
   53adc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   53ae0:	e0bffc17 	ldw	r2,-16(fp)
   53ae4:	e0fffd17 	ldw	r3,-12(fp)
   53ae8:	10c00015 	stw	r3,0(r2)

  return 0;  
   53aec:	0005883a 	mov	r2,zero
}
   53af0:	e037883a 	mov	sp,fp
   53af4:	dfc00117 	ldw	ra,4(sp)
   53af8:	df000017 	ldw	fp,0(sp)
   53afc:	dec00204 	addi	sp,sp,8
   53b00:	f800283a 	ret

00053b04 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   53b04:	defffd04 	addi	sp,sp,-12
   53b08:	dfc00215 	stw	ra,8(sp)
   53b0c:	df000115 	stw	fp,4(sp)
   53b10:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   53b14:	00800174 	movhi	r2,5
   53b18:	10920d04 	addi	r2,r2,18484
   53b1c:	e0bfff15 	stw	r2,-4(fp)
   53b20:	00000606 	br	53b3c <_do_ctors+0x38>
        (*ctor) (); 
   53b24:	e0bfff17 	ldw	r2,-4(fp)
   53b28:	10800017 	ldw	r2,0(r2)
   53b2c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   53b30:	e0bfff17 	ldw	r2,-4(fp)
   53b34:	10bfff04 	addi	r2,r2,-4
   53b38:	e0bfff15 	stw	r2,-4(fp)
   53b3c:	e0ffff17 	ldw	r3,-4(fp)
   53b40:	00800174 	movhi	r2,5
   53b44:	10920e04 	addi	r2,r2,18488
   53b48:	18bff62e 	bgeu	r3,r2,53b24 <__alt_data_end+0xfffe1b24>
        (*ctor) (); 
}
   53b4c:	e037883a 	mov	sp,fp
   53b50:	dfc00117 	ldw	ra,4(sp)
   53b54:	df000017 	ldw	fp,0(sp)
   53b58:	dec00204 	addi	sp,sp,8
   53b5c:	f800283a 	ret

00053b60 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   53b60:	defffd04 	addi	sp,sp,-12
   53b64:	dfc00215 	stw	ra,8(sp)
   53b68:	df000115 	stw	fp,4(sp)
   53b6c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   53b70:	00800174 	movhi	r2,5
   53b74:	10920d04 	addi	r2,r2,18484
   53b78:	e0bfff15 	stw	r2,-4(fp)
   53b7c:	00000606 	br	53b98 <_do_dtors+0x38>
        (*dtor) (); 
   53b80:	e0bfff17 	ldw	r2,-4(fp)
   53b84:	10800017 	ldw	r2,0(r2)
   53b88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   53b8c:	e0bfff17 	ldw	r2,-4(fp)
   53b90:	10bfff04 	addi	r2,r2,-4
   53b94:	e0bfff15 	stw	r2,-4(fp)
   53b98:	e0ffff17 	ldw	r3,-4(fp)
   53b9c:	00800174 	movhi	r2,5
   53ba0:	10920e04 	addi	r2,r2,18488
   53ba4:	18bff62e 	bgeu	r3,r2,53b80 <__alt_data_end+0xfffe1b80>
        (*dtor) (); 
}
   53ba8:	e037883a 	mov	sp,fp
   53bac:	dfc00117 	ldw	ra,4(sp)
   53bb0:	df000017 	ldw	fp,0(sp)
   53bb4:	dec00204 	addi	sp,sp,8
   53bb8:	f800283a 	ret

00053bbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   53bbc:	defffa04 	addi	sp,sp,-24
   53bc0:	dfc00515 	stw	ra,20(sp)
   53bc4:	df000415 	stw	fp,16(sp)
   53bc8:	df000404 	addi	fp,sp,16
   53bcc:	e13ffe15 	stw	r4,-8(fp)
   53bd0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   53bd4:	e0bfff17 	ldw	r2,-4(fp)
   53bd8:	10800017 	ldw	r2,0(r2)
   53bdc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   53be0:	e13ffe17 	ldw	r4,-8(fp)
   53be4:	004823c0 	call	4823c <strlen>
   53be8:	10800044 	addi	r2,r2,1
   53bec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   53bf0:	00000d06 	br	53c28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   53bf4:	e0bffc17 	ldw	r2,-16(fp)
   53bf8:	10c00217 	ldw	r3,8(r2)
   53bfc:	e0bffd17 	ldw	r2,-12(fp)
   53c00:	1809883a 	mov	r4,r3
   53c04:	e17ffe17 	ldw	r5,-8(fp)
   53c08:	100d883a 	mov	r6,r2
   53c0c:	00544e00 	call	544e0 <memcmp>
   53c10:	1000021e 	bne	r2,zero,53c1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   53c14:	e0bffc17 	ldw	r2,-16(fp)
   53c18:	00000706 	br	53c38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   53c1c:	e0bffc17 	ldw	r2,-16(fp)
   53c20:	10800017 	ldw	r2,0(r2)
   53c24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   53c28:	e0fffc17 	ldw	r3,-16(fp)
   53c2c:	e0bfff17 	ldw	r2,-4(fp)
   53c30:	18bff01e 	bne	r3,r2,53bf4 <__alt_data_end+0xfffe1bf4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   53c34:	0005883a 	mov	r2,zero
}
   53c38:	e037883a 	mov	sp,fp
   53c3c:	dfc00117 	ldw	ra,4(sp)
   53c40:	df000017 	ldw	fp,0(sp)
   53c44:	dec00204 	addi	sp,sp,8
   53c48:	f800283a 	ret

00053c4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   53c4c:	defffb04 	addi	sp,sp,-20
   53c50:	dfc00415 	stw	ra,16(sp)
   53c54:	df000315 	stw	fp,12(sp)
   53c58:	df000304 	addi	fp,sp,12
   53c5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   53c60:	00800174 	movhi	r2,5
   53c64:	109a6304 	addi	r2,r2,27020
   53c68:	10800017 	ldw	r2,0(r2)
   53c6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   53c70:	00003106 	br	53d38 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   53c74:	e0bffd17 	ldw	r2,-12(fp)
   53c78:	10800217 	ldw	r2,8(r2)
   53c7c:	1009883a 	mov	r4,r2
   53c80:	004823c0 	call	4823c <strlen>
   53c84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   53c88:	e0bffd17 	ldw	r2,-12(fp)
   53c8c:	10c00217 	ldw	r3,8(r2)
   53c90:	e0bffe17 	ldw	r2,-8(fp)
   53c94:	10bfffc4 	addi	r2,r2,-1
   53c98:	1885883a 	add	r2,r3,r2
   53c9c:	10800003 	ldbu	r2,0(r2)
   53ca0:	10803fcc 	andi	r2,r2,255
   53ca4:	1080201c 	xori	r2,r2,128
   53ca8:	10bfe004 	addi	r2,r2,-128
   53cac:	10800bd8 	cmpnei	r2,r2,47
   53cb0:	1000031e 	bne	r2,zero,53cc0 <alt_find_file+0x74>
    {
      len -= 1;
   53cb4:	e0bffe17 	ldw	r2,-8(fp)
   53cb8:	10bfffc4 	addi	r2,r2,-1
   53cbc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   53cc0:	e0bffe17 	ldw	r2,-8(fp)
   53cc4:	e0ffff17 	ldw	r3,-4(fp)
   53cc8:	1885883a 	add	r2,r3,r2
   53ccc:	10800003 	ldbu	r2,0(r2)
   53cd0:	10803fcc 	andi	r2,r2,255
   53cd4:	1080201c 	xori	r2,r2,128
   53cd8:	10bfe004 	addi	r2,r2,-128
   53cdc:	10800be0 	cmpeqi	r2,r2,47
   53ce0:	1000081e 	bne	r2,zero,53d04 <alt_find_file+0xb8>
   53ce4:	e0bffe17 	ldw	r2,-8(fp)
   53ce8:	e0ffff17 	ldw	r3,-4(fp)
   53cec:	1885883a 	add	r2,r3,r2
   53cf0:	10800003 	ldbu	r2,0(r2)
   53cf4:	10803fcc 	andi	r2,r2,255
   53cf8:	1080201c 	xori	r2,r2,128
   53cfc:	10bfe004 	addi	r2,r2,-128
   53d00:	10000a1e 	bne	r2,zero,53d2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   53d04:	e0bffd17 	ldw	r2,-12(fp)
   53d08:	10c00217 	ldw	r3,8(r2)
   53d0c:	e0bffe17 	ldw	r2,-8(fp)
   53d10:	1809883a 	mov	r4,r3
   53d14:	e17fff17 	ldw	r5,-4(fp)
   53d18:	100d883a 	mov	r6,r2
   53d1c:	00544e00 	call	544e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   53d20:	1000021e 	bne	r2,zero,53d2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   53d24:	e0bffd17 	ldw	r2,-12(fp)
   53d28:	00000806 	br	53d4c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   53d2c:	e0bffd17 	ldw	r2,-12(fp)
   53d30:	10800017 	ldw	r2,0(r2)
   53d34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   53d38:	e0fffd17 	ldw	r3,-12(fp)
   53d3c:	00800174 	movhi	r2,5
   53d40:	109a6304 	addi	r2,r2,27020
   53d44:	18bfcb1e 	bne	r3,r2,53c74 <__alt_data_end+0xfffe1c74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   53d48:	0005883a 	mov	r2,zero
}
   53d4c:	e037883a 	mov	sp,fp
   53d50:	dfc00117 	ldw	ra,4(sp)
   53d54:	df000017 	ldw	fp,0(sp)
   53d58:	dec00204 	addi	sp,sp,8
   53d5c:	f800283a 	ret

00053d60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   53d60:	defffc04 	addi	sp,sp,-16
   53d64:	df000315 	stw	fp,12(sp)
   53d68:	df000304 	addi	fp,sp,12
   53d6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   53d70:	00bffa04 	movi	r2,-24
   53d74:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   53d78:	e03ffd15 	stw	zero,-12(fp)
   53d7c:	00001d06 	br	53df4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   53d80:	00800174 	movhi	r2,5
   53d84:	1095a904 	addi	r2,r2,22180
   53d88:	e0fffd17 	ldw	r3,-12(fp)
   53d8c:	18c00324 	muli	r3,r3,12
   53d90:	10c5883a 	add	r2,r2,r3
   53d94:	10800017 	ldw	r2,0(r2)
   53d98:	1000131e 	bne	r2,zero,53de8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   53d9c:	00800174 	movhi	r2,5
   53da0:	1095a904 	addi	r2,r2,22180
   53da4:	e0fffd17 	ldw	r3,-12(fp)
   53da8:	18c00324 	muli	r3,r3,12
   53dac:	10c5883a 	add	r2,r2,r3
   53db0:	e0ffff17 	ldw	r3,-4(fp)
   53db4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   53db8:	00800174 	movhi	r2,5
   53dbc:	109a6704 	addi	r2,r2,27036
   53dc0:	10c00017 	ldw	r3,0(r2)
   53dc4:	e0bffd17 	ldw	r2,-12(fp)
   53dc8:	1880040e 	bge	r3,r2,53ddc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   53dcc:	00800174 	movhi	r2,5
   53dd0:	109a6704 	addi	r2,r2,27036
   53dd4:	e0fffd17 	ldw	r3,-12(fp)
   53dd8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   53ddc:	e0bffd17 	ldw	r2,-12(fp)
   53de0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   53de4:	00000606 	br	53e00 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   53de8:	e0bffd17 	ldw	r2,-12(fp)
   53dec:	10800044 	addi	r2,r2,1
   53df0:	e0bffd15 	stw	r2,-12(fp)
   53df4:	e0bffd17 	ldw	r2,-12(fp)
   53df8:	10800810 	cmplti	r2,r2,32
   53dfc:	103fe01e 	bne	r2,zero,53d80 <__alt_data_end+0xfffe1d80>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   53e00:	e0bffe17 	ldw	r2,-8(fp)
}
   53e04:	e037883a 	mov	sp,fp
   53e08:	df000017 	ldw	fp,0(sp)
   53e0c:	dec00104 	addi	sp,sp,4
   53e10:	f800283a 	ret

00053e14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   53e14:	defffe04 	addi	sp,sp,-8
   53e18:	dfc00115 	stw	ra,4(sp)
   53e1c:	df000015 	stw	fp,0(sp)
   53e20:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   53e24:	0009883a 	mov	r4,zero
   53e28:	01440004 	movi	r5,4096
   53e2c:	00544080 	call	54408 <alt_icache_flush>
#endif
}
   53e30:	e037883a 	mov	sp,fp
   53e34:	dfc00117 	ldw	ra,4(sp)
   53e38:	df000017 	ldw	fp,0(sp)
   53e3c:	dec00204 	addi	sp,sp,8
   53e40:	f800283a 	ret

00053e44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   53e44:	defff904 	addi	sp,sp,-28
   53e48:	dfc00615 	stw	ra,24(sp)
   53e4c:	df000515 	stw	fp,20(sp)
   53e50:	df000504 	addi	fp,sp,20
   53e54:	e13ffc15 	stw	r4,-16(fp)
   53e58:	e17ffd15 	stw	r5,-12(fp)
   53e5c:	e1bffe15 	stw	r6,-8(fp)
   53e60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   53e64:	e0800217 	ldw	r2,8(fp)
   53e68:	d8800015 	stw	r2,0(sp)
   53e6c:	e13ffc17 	ldw	r4,-16(fp)
   53e70:	e17ffd17 	ldw	r5,-12(fp)
   53e74:	e1bffe17 	ldw	r6,-8(fp)
   53e78:	e1ffff17 	ldw	r7,-4(fp)
   53e7c:	00540240 	call	54024 <alt_iic_isr_register>
}  
   53e80:	e037883a 	mov	sp,fp
   53e84:	dfc00117 	ldw	ra,4(sp)
   53e88:	df000017 	ldw	fp,0(sp)
   53e8c:	dec00204 	addi	sp,sp,8
   53e90:	f800283a 	ret

00053e94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   53e94:	defff904 	addi	sp,sp,-28
   53e98:	df000615 	stw	fp,24(sp)
   53e9c:	df000604 	addi	fp,sp,24
   53ea0:	e13ffe15 	stw	r4,-8(fp)
   53ea4:	e17fff15 	stw	r5,-4(fp)
   53ea8:	e0bfff17 	ldw	r2,-4(fp)
   53eac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53eb0:	0005303a 	rdctl	r2,status
   53eb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53eb8:	e0fffb17 	ldw	r3,-20(fp)
   53ebc:	00bfff84 	movi	r2,-2
   53ec0:	1884703a 	and	r2,r3,r2
   53ec4:	1001703a 	wrctl	status,r2
  
  return context;
   53ec8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   53ecc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   53ed0:	e0bffa17 	ldw	r2,-24(fp)
   53ed4:	00c00044 	movi	r3,1
   53ed8:	1884983a 	sll	r2,r3,r2
   53edc:	1007883a 	mov	r3,r2
   53ee0:	008001b4 	movhi	r2,6
   53ee4:	10a1a704 	addi	r2,r2,-31076
   53ee8:	10800017 	ldw	r2,0(r2)
   53eec:	1886b03a 	or	r3,r3,r2
   53ef0:	008001b4 	movhi	r2,6
   53ef4:	10a1a704 	addi	r2,r2,-31076
   53ef8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   53efc:	008001b4 	movhi	r2,6
   53f00:	10a1a704 	addi	r2,r2,-31076
   53f04:	10800017 	ldw	r2,0(r2)
   53f08:	100170fa 	wrctl	ienable,r2
   53f0c:	e0bffc17 	ldw	r2,-16(fp)
   53f10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53f14:	e0bffd17 	ldw	r2,-12(fp)
   53f18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   53f1c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   53f20:	0001883a 	nop
}
   53f24:	e037883a 	mov	sp,fp
   53f28:	df000017 	ldw	fp,0(sp)
   53f2c:	dec00104 	addi	sp,sp,4
   53f30:	f800283a 	ret

00053f34 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   53f34:	defff904 	addi	sp,sp,-28
   53f38:	df000615 	stw	fp,24(sp)
   53f3c:	df000604 	addi	fp,sp,24
   53f40:	e13ffe15 	stw	r4,-8(fp)
   53f44:	e17fff15 	stw	r5,-4(fp)
   53f48:	e0bfff17 	ldw	r2,-4(fp)
   53f4c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53f50:	0005303a 	rdctl	r2,status
   53f54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53f58:	e0fffb17 	ldw	r3,-20(fp)
   53f5c:	00bfff84 	movi	r2,-2
   53f60:	1884703a 	and	r2,r3,r2
   53f64:	1001703a 	wrctl	status,r2
  
  return context;
   53f68:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   53f6c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   53f70:	e0bffa17 	ldw	r2,-24(fp)
   53f74:	00c00044 	movi	r3,1
   53f78:	1884983a 	sll	r2,r3,r2
   53f7c:	0084303a 	nor	r2,zero,r2
   53f80:	1007883a 	mov	r3,r2
   53f84:	008001b4 	movhi	r2,6
   53f88:	10a1a704 	addi	r2,r2,-31076
   53f8c:	10800017 	ldw	r2,0(r2)
   53f90:	1886703a 	and	r3,r3,r2
   53f94:	008001b4 	movhi	r2,6
   53f98:	10a1a704 	addi	r2,r2,-31076
   53f9c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   53fa0:	008001b4 	movhi	r2,6
   53fa4:	10a1a704 	addi	r2,r2,-31076
   53fa8:	10800017 	ldw	r2,0(r2)
   53fac:	100170fa 	wrctl	ienable,r2
   53fb0:	e0bffc17 	ldw	r2,-16(fp)
   53fb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53fb8:	e0bffd17 	ldw	r2,-12(fp)
   53fbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   53fc0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   53fc4:	0001883a 	nop
}
   53fc8:	e037883a 	mov	sp,fp
   53fcc:	df000017 	ldw	fp,0(sp)
   53fd0:	dec00104 	addi	sp,sp,4
   53fd4:	f800283a 	ret

00053fd8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   53fd8:	defffc04 	addi	sp,sp,-16
   53fdc:	df000315 	stw	fp,12(sp)
   53fe0:	df000304 	addi	fp,sp,12
   53fe4:	e13ffe15 	stw	r4,-8(fp)
   53fe8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   53fec:	000530fa 	rdctl	r2,ienable
   53ff0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   53ff4:	e0bfff17 	ldw	r2,-4(fp)
   53ff8:	00c00044 	movi	r3,1
   53ffc:	1884983a 	sll	r2,r3,r2
   54000:	1007883a 	mov	r3,r2
   54004:	e0bffd17 	ldw	r2,-12(fp)
   54008:	1884703a 	and	r2,r3,r2
   5400c:	1004c03a 	cmpne	r2,r2,zero
   54010:	10803fcc 	andi	r2,r2,255
}
   54014:	e037883a 	mov	sp,fp
   54018:	df000017 	ldw	fp,0(sp)
   5401c:	dec00104 	addi	sp,sp,4
   54020:	f800283a 	ret

00054024 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54024:	defff504 	addi	sp,sp,-44
   54028:	dfc00a15 	stw	ra,40(sp)
   5402c:	df000915 	stw	fp,36(sp)
   54030:	df000904 	addi	fp,sp,36
   54034:	e13ffc15 	stw	r4,-16(fp)
   54038:	e17ffd15 	stw	r5,-12(fp)
   5403c:	e1bffe15 	stw	r6,-8(fp)
   54040:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   54044:	00bffa84 	movi	r2,-22
   54048:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   5404c:	e0bffd17 	ldw	r2,-12(fp)
   54050:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   54054:	e0bff817 	ldw	r2,-32(fp)
   54058:	10800808 	cmpgei	r2,r2,32
   5405c:	1000271e 	bne	r2,zero,540fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54060:	0005303a 	rdctl	r2,status
   54064:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54068:	e0fffa17 	ldw	r3,-24(fp)
   5406c:	00bfff84 	movi	r2,-2
   54070:	1884703a 	and	r2,r3,r2
   54074:	1001703a 	wrctl	status,r2
  
  return context;
   54078:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   5407c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   54080:	008001b4 	movhi	r2,6
   54084:	10a74804 	addi	r2,r2,-25312
   54088:	e0fff817 	ldw	r3,-32(fp)
   5408c:	180690fa 	slli	r3,r3,3
   54090:	10c5883a 	add	r2,r2,r3
   54094:	e0fffe17 	ldw	r3,-8(fp)
   54098:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   5409c:	008001b4 	movhi	r2,6
   540a0:	10a74804 	addi	r2,r2,-25312
   540a4:	e0fff817 	ldw	r3,-32(fp)
   540a8:	180690fa 	slli	r3,r3,3
   540ac:	18c00104 	addi	r3,r3,4
   540b0:	10c5883a 	add	r2,r2,r3
   540b4:	e0ffff17 	ldw	r3,-4(fp)
   540b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   540bc:	e0bffe17 	ldw	r2,-8(fp)
   540c0:	10000526 	beq	r2,zero,540d8 <alt_iic_isr_register+0xb4>
   540c4:	e0bff817 	ldw	r2,-32(fp)
   540c8:	e13ffc17 	ldw	r4,-16(fp)
   540cc:	100b883a 	mov	r5,r2
   540d0:	0053e940 	call	53e94 <alt_ic_irq_enable>
   540d4:	00000406 	br	540e8 <alt_iic_isr_register+0xc4>
   540d8:	e0bff817 	ldw	r2,-32(fp)
   540dc:	e13ffc17 	ldw	r4,-16(fp)
   540e0:	100b883a 	mov	r5,r2
   540e4:	0053f340 	call	53f34 <alt_ic_irq_disable>
   540e8:	e0bff715 	stw	r2,-36(fp)
   540ec:	e0bff917 	ldw	r2,-28(fp)
   540f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   540f4:	e0bffb17 	ldw	r2,-20(fp)
   540f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   540fc:	e0bff717 	ldw	r2,-36(fp)
}
   54100:	e037883a 	mov	sp,fp
   54104:	dfc00117 	ldw	ra,4(sp)
   54108:	df000017 	ldw	fp,0(sp)
   5410c:	dec00204 	addi	sp,sp,8
   54110:	f800283a 	ret

00054114 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   54114:	defff904 	addi	sp,sp,-28
   54118:	dfc00615 	stw	ra,24(sp)
   5411c:	df000515 	stw	fp,20(sp)
   54120:	df000504 	addi	fp,sp,20
   54124:	e13ffc15 	stw	r4,-16(fp)
   54128:	e17ffd15 	stw	r5,-12(fp)
   5412c:	e1bffe15 	stw	r6,-8(fp)
   54130:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   54134:	e13ffd17 	ldw	r4,-12(fp)
   54138:	e17ffe17 	ldw	r5,-8(fp)
   5413c:	e1bfff17 	ldw	r6,-4(fp)
   54140:	0051f800 	call	51f80 <open>
   54144:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   54148:	e0bffb17 	ldw	r2,-20(fp)
   5414c:	10001c16 	blt	r2,zero,541c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   54150:	00800174 	movhi	r2,5
   54154:	1095a904 	addi	r2,r2,22180
   54158:	e0fffb17 	ldw	r3,-20(fp)
   5415c:	18c00324 	muli	r3,r3,12
   54160:	10c5883a 	add	r2,r2,r3
   54164:	10c00017 	ldw	r3,0(r2)
   54168:	e0bffc17 	ldw	r2,-16(fp)
   5416c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   54170:	00800174 	movhi	r2,5
   54174:	1095a904 	addi	r2,r2,22180
   54178:	e0fffb17 	ldw	r3,-20(fp)
   5417c:	18c00324 	muli	r3,r3,12
   54180:	18c00104 	addi	r3,r3,4
   54184:	10c5883a 	add	r2,r2,r3
   54188:	10c00017 	ldw	r3,0(r2)
   5418c:	e0bffc17 	ldw	r2,-16(fp)
   54190:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   54194:	00800174 	movhi	r2,5
   54198:	1095a904 	addi	r2,r2,22180
   5419c:	e0fffb17 	ldw	r3,-20(fp)
   541a0:	18c00324 	muli	r3,r3,12
   541a4:	18c00204 	addi	r3,r3,8
   541a8:	10c5883a 	add	r2,r2,r3
   541ac:	10c00017 	ldw	r3,0(r2)
   541b0:	e0bffc17 	ldw	r2,-16(fp)
   541b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   541b8:	e13ffb17 	ldw	r4,-20(fp)
   541bc:	00522240 	call	52224 <alt_release_fd>
  }
} 
   541c0:	e037883a 	mov	sp,fp
   541c4:	dfc00117 	ldw	ra,4(sp)
   541c8:	df000017 	ldw	fp,0(sp)
   541cc:	dec00204 	addi	sp,sp,8
   541d0:	f800283a 	ret

000541d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   541d4:	defffb04 	addi	sp,sp,-20
   541d8:	dfc00415 	stw	ra,16(sp)
   541dc:	df000315 	stw	fp,12(sp)
   541e0:	df000304 	addi	fp,sp,12
   541e4:	e13ffd15 	stw	r4,-12(fp)
   541e8:	e17ffe15 	stw	r5,-8(fp)
   541ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   541f0:	01000174 	movhi	r4,5
   541f4:	2115ac04 	addi	r4,r4,22192
   541f8:	e17ffd17 	ldw	r5,-12(fp)
   541fc:	01800044 	movi	r6,1
   54200:	01c07fc4 	movi	r7,511
   54204:	00541140 	call	54114 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   54208:	01000174 	movhi	r4,5
   5420c:	2115a904 	addi	r4,r4,22180
   54210:	e17ffe17 	ldw	r5,-8(fp)
   54214:	000d883a 	mov	r6,zero
   54218:	01c07fc4 	movi	r7,511
   5421c:	00541140 	call	54114 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   54220:	01000174 	movhi	r4,5
   54224:	2115af04 	addi	r4,r4,22204
   54228:	e17fff17 	ldw	r5,-4(fp)
   5422c:	01800044 	movi	r6,1
   54230:	01c07fc4 	movi	r7,511
   54234:	00541140 	call	54114 <alt_open_fd>
}  
   54238:	e037883a 	mov	sp,fp
   5423c:	dfc00117 	ldw	ra,4(sp)
   54240:	df000017 	ldw	fp,0(sp)
   54244:	dec00204 	addi	sp,sp,8
   54248:	f800283a 	ret

0005424c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   5424c:	defffa04 	addi	sp,sp,-24
   54250:	df000515 	stw	fp,20(sp)
   54254:	df000504 	addi	fp,sp,20
   54258:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5425c:	0005303a 	rdctl	r2,status
   54260:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54264:	e0fffc17 	ldw	r3,-16(fp)
   54268:	00bfff84 	movi	r2,-2
   5426c:	1884703a 	and	r2,r3,r2
   54270:	1001703a 	wrctl	status,r2
  
  return context;
   54274:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   54278:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   5427c:	e0bfff17 	ldw	r2,-4(fp)
   54280:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   54284:	e0bffd17 	ldw	r2,-12(fp)
   54288:	10800017 	ldw	r2,0(r2)
   5428c:	e0fffd17 	ldw	r3,-12(fp)
   54290:	18c00117 	ldw	r3,4(r3)
   54294:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   54298:	e0bffd17 	ldw	r2,-12(fp)
   5429c:	10800117 	ldw	r2,4(r2)
   542a0:	e0fffd17 	ldw	r3,-12(fp)
   542a4:	18c00017 	ldw	r3,0(r3)
   542a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   542ac:	e0bffd17 	ldw	r2,-12(fp)
   542b0:	e0fffd17 	ldw	r3,-12(fp)
   542b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   542b8:	e0bffd17 	ldw	r2,-12(fp)
   542bc:	e0fffd17 	ldw	r3,-12(fp)
   542c0:	10c00015 	stw	r3,0(r2)
   542c4:	e0bffb17 	ldw	r2,-20(fp)
   542c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   542cc:	e0bffe17 	ldw	r2,-8(fp)
   542d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   542d4:	e037883a 	mov	sp,fp
   542d8:	df000017 	ldw	fp,0(sp)
   542dc:	dec00104 	addi	sp,sp,4
   542e0:	f800283a 	ret

000542e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   542e4:	defffb04 	addi	sp,sp,-20
   542e8:	dfc00415 	stw	ra,16(sp)
   542ec:	df000315 	stw	fp,12(sp)
   542f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   542f4:	d0a01917 	ldw	r2,-32668(gp)
   542f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   542fc:	d0a75a17 	ldw	r2,-25240(gp)
   54300:	10800044 	addi	r2,r2,1
   54304:	d0a75a15 	stw	r2,-25240(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54308:	00002e06 	br	543c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   5430c:	e0bffd17 	ldw	r2,-12(fp)
   54310:	10800017 	ldw	r2,0(r2)
   54314:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   54318:	e0bffd17 	ldw	r2,-12(fp)
   5431c:	10800403 	ldbu	r2,16(r2)
   54320:	10803fcc 	andi	r2,r2,255
   54324:	10000426 	beq	r2,zero,54338 <alt_tick+0x54>
   54328:	d0a75a17 	ldw	r2,-25240(gp)
   5432c:	1000021e 	bne	r2,zero,54338 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   54330:	e0bffd17 	ldw	r2,-12(fp)
   54334:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   54338:	e0bffd17 	ldw	r2,-12(fp)
   5433c:	10800217 	ldw	r2,8(r2)
   54340:	d0e75a17 	ldw	r3,-25240(gp)
   54344:	18801d36 	bltu	r3,r2,543bc <alt_tick+0xd8>
   54348:	e0bffd17 	ldw	r2,-12(fp)
   5434c:	10800403 	ldbu	r2,16(r2)
   54350:	10803fcc 	andi	r2,r2,255
   54354:	1000191e 	bne	r2,zero,543bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   54358:	e0bffd17 	ldw	r2,-12(fp)
   5435c:	10800317 	ldw	r2,12(r2)
   54360:	e0fffd17 	ldw	r3,-12(fp)
   54364:	18c00517 	ldw	r3,20(r3)
   54368:	1809883a 	mov	r4,r3
   5436c:	103ee83a 	callr	r2
   54370:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   54374:	e0bfff17 	ldw	r2,-4(fp)
   54378:	1000031e 	bne	r2,zero,54388 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   5437c:	e13ffd17 	ldw	r4,-12(fp)
   54380:	005424c0 	call	5424c <alt_alarm_stop>
   54384:	00000d06 	br	543bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   54388:	e0bffd17 	ldw	r2,-12(fp)
   5438c:	10c00217 	ldw	r3,8(r2)
   54390:	e0bfff17 	ldw	r2,-4(fp)
   54394:	1887883a 	add	r3,r3,r2
   54398:	e0bffd17 	ldw	r2,-12(fp)
   5439c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   543a0:	e0bffd17 	ldw	r2,-12(fp)
   543a4:	10c00217 	ldw	r3,8(r2)
   543a8:	d0a75a17 	ldw	r2,-25240(gp)
   543ac:	1880032e 	bgeu	r3,r2,543bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   543b0:	e0bffd17 	ldw	r2,-12(fp)
   543b4:	00c00044 	movi	r3,1
   543b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   543bc:	e0bffe17 	ldw	r2,-8(fp)
   543c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   543c4:	e0fffd17 	ldw	r3,-12(fp)
   543c8:	d0a01904 	addi	r2,gp,-32668
   543cc:	18bfcf1e 	bne	r3,r2,5430c <__alt_data_end+0xfffe230c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   543d0:	0001883a 	nop
}
   543d4:	e037883a 	mov	sp,fp
   543d8:	dfc00117 	ldw	ra,4(sp)
   543dc:	df000017 	ldw	fp,0(sp)
   543e0:	dec00204 	addi	sp,sp,8
   543e4:	f800283a 	ret

000543e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   543e8:	deffff04 	addi	sp,sp,-4
   543ec:	df000015 	stw	fp,0(sp)
   543f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   543f4:	000170fa 	wrctl	ienable,zero
}
   543f8:	e037883a 	mov	sp,fp
   543fc:	df000017 	ldw	fp,0(sp)
   54400:	dec00104 	addi	sp,sp,4
   54404:	f800283a 	ret

00054408 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   54408:	defffb04 	addi	sp,sp,-20
   5440c:	df000415 	stw	fp,16(sp)
   54410:	df000404 	addi	fp,sp,16
   54414:	e13ffe15 	stw	r4,-8(fp)
   54418:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   5441c:	e0bfff17 	ldw	r2,-4(fp)
   54420:	10840070 	cmpltui	r2,r2,4097
   54424:	1000021e 	bne	r2,zero,54430 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   54428:	00840004 	movi	r2,4096
   5442c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   54430:	e0fffe17 	ldw	r3,-8(fp)
   54434:	e0bfff17 	ldw	r2,-4(fp)
   54438:	1885883a 	add	r2,r3,r2
   5443c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   54440:	e0bffe17 	ldw	r2,-8(fp)
   54444:	e0bffc15 	stw	r2,-16(fp)
   54448:	00000506 	br	54460 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   5444c:	e0bffc17 	ldw	r2,-16(fp)
   54450:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   54454:	e0bffc17 	ldw	r2,-16(fp)
   54458:	10800804 	addi	r2,r2,32
   5445c:	e0bffc15 	stw	r2,-16(fp)
   54460:	e0fffc17 	ldw	r3,-16(fp)
   54464:	e0bffd17 	ldw	r2,-12(fp)
   54468:	18bff836 	bltu	r3,r2,5444c <__alt_data_end+0xfffe244c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   5446c:	e0bffe17 	ldw	r2,-8(fp)
   54470:	108007cc 	andi	r2,r2,31
   54474:	10000226 	beq	r2,zero,54480 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   54478:	e0bffc17 	ldw	r2,-16(fp)
   5447c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   54480:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   54484:	e037883a 	mov	sp,fp
   54488:	df000017 	ldw	fp,0(sp)
   5448c:	dec00104 	addi	sp,sp,4
   54490:	f800283a 	ret

00054494 <atexit>:
   54494:	200b883a 	mov	r5,r4
   54498:	000d883a 	mov	r6,zero
   5449c:	0009883a 	mov	r4,zero
   544a0:	000f883a 	mov	r7,zero
   544a4:	005455c1 	jmpi	5455c <__register_exitproc>

000544a8 <exit>:
   544a8:	defffe04 	addi	sp,sp,-8
   544ac:	000b883a 	mov	r5,zero
   544b0:	dc000015 	stw	r16,0(sp)
   544b4:	dfc00115 	stw	ra,4(sp)
   544b8:	2021883a 	mov	r16,r4
   544bc:	00546700 	call	54670 <__call_exitprocs>
   544c0:	00800174 	movhi	r2,5
   544c4:	109a5e04 	addi	r2,r2,27000
   544c8:	11000017 	ldw	r4,0(r2)
   544cc:	20800f17 	ldw	r2,60(r4)
   544d0:	10000126 	beq	r2,zero,544d8 <exit+0x30>
   544d4:	103ee83a 	callr	r2
   544d8:	8009883a 	mov	r4,r16
   544dc:	00548040 	call	54804 <_exit>

000544e0 <memcmp>:
   544e0:	01c000c4 	movi	r7,3
   544e4:	3980192e 	bgeu	r7,r6,5454c <memcmp+0x6c>
   544e8:	2144b03a 	or	r2,r4,r5
   544ec:	11c4703a 	and	r2,r2,r7
   544f0:	10000f26 	beq	r2,zero,54530 <memcmp+0x50>
   544f4:	20800003 	ldbu	r2,0(r4)
   544f8:	28c00003 	ldbu	r3,0(r5)
   544fc:	10c0151e 	bne	r2,r3,54554 <memcmp+0x74>
   54500:	31bfff84 	addi	r6,r6,-2
   54504:	01ffffc4 	movi	r7,-1
   54508:	00000406 	br	5451c <memcmp+0x3c>
   5450c:	20800003 	ldbu	r2,0(r4)
   54510:	28c00003 	ldbu	r3,0(r5)
   54514:	31bfffc4 	addi	r6,r6,-1
   54518:	10c00e1e 	bne	r2,r3,54554 <memcmp+0x74>
   5451c:	21000044 	addi	r4,r4,1
   54520:	29400044 	addi	r5,r5,1
   54524:	31fff91e 	bne	r6,r7,5450c <__alt_data_end+0xfffe250c>
   54528:	0005883a 	mov	r2,zero
   5452c:	f800283a 	ret
   54530:	20c00017 	ldw	r3,0(r4)
   54534:	28800017 	ldw	r2,0(r5)
   54538:	1880041e 	bne	r3,r2,5454c <memcmp+0x6c>
   5453c:	31bfff04 	addi	r6,r6,-4
   54540:	21000104 	addi	r4,r4,4
   54544:	29400104 	addi	r5,r5,4
   54548:	39bff936 	bltu	r7,r6,54530 <__alt_data_end+0xfffe2530>
   5454c:	303fe91e 	bne	r6,zero,544f4 <__alt_data_end+0xfffe24f4>
   54550:	003ff506 	br	54528 <__alt_data_end+0xfffe2528>
   54554:	10c5c83a 	sub	r2,r2,r3
   54558:	f800283a 	ret

0005455c <__register_exitproc>:
   5455c:	00800174 	movhi	r2,5
   54560:	defffa04 	addi	sp,sp,-24
   54564:	109a5e04 	addi	r2,r2,27000
   54568:	dc000315 	stw	r16,12(sp)
   5456c:	14000017 	ldw	r16,0(r2)
   54570:	dc400415 	stw	r17,16(sp)
   54574:	dfc00515 	stw	ra,20(sp)
   54578:	80805217 	ldw	r2,328(r16)
   5457c:	2023883a 	mov	r17,r4
   54580:	10003626 	beq	r2,zero,5465c <__register_exitproc+0x100>
   54584:	10c00117 	ldw	r3,4(r2)
   54588:	010007c4 	movi	r4,31
   5458c:	20c00e16 	blt	r4,r3,545c8 <__register_exitproc+0x6c>
   54590:	1a400044 	addi	r9,r3,1
   54594:	8800211e 	bne	r17,zero,5461c <__register_exitproc+0xc0>
   54598:	18c00084 	addi	r3,r3,2
   5459c:	18c7883a 	add	r3,r3,r3
   545a0:	18c7883a 	add	r3,r3,r3
   545a4:	12400115 	stw	r9,4(r2)
   545a8:	10c7883a 	add	r3,r2,r3
   545ac:	19400015 	stw	r5,0(r3)
   545b0:	0005883a 	mov	r2,zero
   545b4:	dfc00517 	ldw	ra,20(sp)
   545b8:	dc400417 	ldw	r17,16(sp)
   545bc:	dc000317 	ldw	r16,12(sp)
   545c0:	dec00604 	addi	sp,sp,24
   545c4:	f800283a 	ret
   545c8:	00800034 	movhi	r2,0
   545cc:	10800004 	addi	r2,r2,0
   545d0:	10002526 	beq	r2,zero,54668 <__register_exitproc+0x10c>
   545d4:	01006404 	movi	r4,400
   545d8:	d9400015 	stw	r5,0(sp)
   545dc:	d9800115 	stw	r6,4(sp)
   545e0:	d9c00215 	stw	r7,8(sp)
   545e4:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   545e8:	d9400017 	ldw	r5,0(sp)
   545ec:	d9800117 	ldw	r6,4(sp)
   545f0:	d9c00217 	ldw	r7,8(sp)
   545f4:	10001c26 	beq	r2,zero,54668 <__register_exitproc+0x10c>
   545f8:	80c05217 	ldw	r3,328(r16)
   545fc:	10000115 	stw	zero,4(r2)
   54600:	02400044 	movi	r9,1
   54604:	10c00015 	stw	r3,0(r2)
   54608:	80805215 	stw	r2,328(r16)
   5460c:	10006215 	stw	zero,392(r2)
   54610:	10006315 	stw	zero,396(r2)
   54614:	0007883a 	mov	r3,zero
   54618:	883fdf26 	beq	r17,zero,54598 <__alt_data_end+0xfffe2598>
   5461c:	18d1883a 	add	r8,r3,r3
   54620:	4211883a 	add	r8,r8,r8
   54624:	1211883a 	add	r8,r2,r8
   54628:	41802215 	stw	r6,136(r8)
   5462c:	01000044 	movi	r4,1
   54630:	11806217 	ldw	r6,392(r2)
   54634:	20c8983a 	sll	r4,r4,r3
   54638:	310cb03a 	or	r6,r6,r4
   5463c:	11806215 	stw	r6,392(r2)
   54640:	41c04215 	stw	r7,264(r8)
   54644:	01800084 	movi	r6,2
   54648:	89bfd31e 	bne	r17,r6,54598 <__alt_data_end+0xfffe2598>
   5464c:	11806317 	ldw	r6,396(r2)
   54650:	3108b03a 	or	r4,r6,r4
   54654:	11006315 	stw	r4,396(r2)
   54658:	003fcf06 	br	54598 <__alt_data_end+0xfffe2598>
   5465c:	80805304 	addi	r2,r16,332
   54660:	80805215 	stw	r2,328(r16)
   54664:	003fc706 	br	54584 <__alt_data_end+0xfffe2584>
   54668:	00bfffc4 	movi	r2,-1
   5466c:	003fd106 	br	545b4 <__alt_data_end+0xfffe25b4>

00054670 <__call_exitprocs>:
   54670:	00800174 	movhi	r2,5
   54674:	109a5e04 	addi	r2,r2,27000
   54678:	10800017 	ldw	r2,0(r2)
   5467c:	defff404 	addi	sp,sp,-48
   54680:	dd800815 	stw	r22,32(sp)
   54684:	d8800015 	stw	r2,0(sp)
   54688:	10805204 	addi	r2,r2,328
   5468c:	dd000615 	stw	r20,24(sp)
   54690:	dc800415 	stw	r18,16(sp)
   54694:	dfc00b15 	stw	ra,44(sp)
   54698:	df000a15 	stw	fp,40(sp)
   5469c:	ddc00915 	stw	r23,36(sp)
   546a0:	dd400715 	stw	r21,28(sp)
   546a4:	dcc00515 	stw	r19,20(sp)
   546a8:	dc400315 	stw	r17,12(sp)
   546ac:	dc000215 	stw	r16,8(sp)
   546b0:	2025883a 	mov	r18,r4
   546b4:	2829883a 	mov	r20,r5
   546b8:	d8800115 	stw	r2,4(sp)
   546bc:	05bfffc4 	movi	r22,-1
   546c0:	d8800017 	ldw	r2,0(sp)
   546c4:	14c05217 	ldw	r19,328(r2)
   546c8:	98001d26 	beq	r19,zero,54740 <__call_exitprocs+0xd0>
   546cc:	dd400117 	ldw	r21,4(sp)
   546d0:	98800117 	ldw	r2,4(r19)
   546d4:	173fffc4 	addi	fp,r2,-1
   546d8:	e0000d16 	blt	fp,zero,54710 <__call_exitprocs+0xa0>
   546dc:	14000044 	addi	r16,r2,1
   546e0:	8421883a 	add	r16,r16,r16
   546e4:	8421883a 	add	r16,r16,r16
   546e8:	84402004 	addi	r17,r16,128
   546ec:	9c63883a 	add	r17,r19,r17
   546f0:	9c21883a 	add	r16,r19,r16
   546f4:	a0001e26 	beq	r20,zero,54770 <__call_exitprocs+0x100>
   546f8:	80804017 	ldw	r2,256(r16)
   546fc:	15001c26 	beq	r2,r20,54770 <__call_exitprocs+0x100>
   54700:	e73fffc4 	addi	fp,fp,-1
   54704:	843fff04 	addi	r16,r16,-4
   54708:	8c7fff04 	addi	r17,r17,-4
   5470c:	e5bff91e 	bne	fp,r22,546f4 <__alt_data_end+0xfffe26f4>
   54710:	00800034 	movhi	r2,0
   54714:	10800004 	addi	r2,r2,0
   54718:	10000926 	beq	r2,zero,54740 <__call_exitprocs+0xd0>
   5471c:	98800117 	ldw	r2,4(r19)
   54720:	1000311e 	bne	r2,zero,547e8 <__call_exitprocs+0x178>
   54724:	98800017 	ldw	r2,0(r19)
   54728:	10003426 	beq	r2,zero,547fc <__call_exitprocs+0x18c>
   5472c:	9809883a 	mov	r4,r19
   54730:	a8800015 	stw	r2,0(r21)
   54734:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   54738:	acc00017 	ldw	r19,0(r21)
   5473c:	983fe41e 	bne	r19,zero,546d0 <__alt_data_end+0xfffe26d0>
   54740:	dfc00b17 	ldw	ra,44(sp)
   54744:	df000a17 	ldw	fp,40(sp)
   54748:	ddc00917 	ldw	r23,36(sp)
   5474c:	dd800817 	ldw	r22,32(sp)
   54750:	dd400717 	ldw	r21,28(sp)
   54754:	dd000617 	ldw	r20,24(sp)
   54758:	dcc00517 	ldw	r19,20(sp)
   5475c:	dc800417 	ldw	r18,16(sp)
   54760:	dc400317 	ldw	r17,12(sp)
   54764:	dc000217 	ldw	r16,8(sp)
   54768:	dec00c04 	addi	sp,sp,48
   5476c:	f800283a 	ret
   54770:	98800117 	ldw	r2,4(r19)
   54774:	80c00017 	ldw	r3,0(r16)
   54778:	10bfffc4 	addi	r2,r2,-1
   5477c:	17001526 	beq	r2,fp,547d4 <__call_exitprocs+0x164>
   54780:	80000015 	stw	zero,0(r16)
   54784:	183fde26 	beq	r3,zero,54700 <__alt_data_end+0xfffe2700>
   54788:	00800044 	movi	r2,1
   5478c:	1708983a 	sll	r4,r2,fp
   54790:	98806217 	ldw	r2,392(r19)
   54794:	9dc00117 	ldw	r23,4(r19)
   54798:	2084703a 	and	r2,r4,r2
   5479c:	1000061e 	bne	r2,zero,547b8 <__call_exitprocs+0x148>
   547a0:	183ee83a 	callr	r3
   547a4:	98800117 	ldw	r2,4(r19)
   547a8:	15ffc51e 	bne	r2,r23,546c0 <__alt_data_end+0xfffe26c0>
   547ac:	a8800017 	ldw	r2,0(r21)
   547b0:	14ffd326 	beq	r2,r19,54700 <__alt_data_end+0xfffe2700>
   547b4:	003fc206 	br	546c0 <__alt_data_end+0xfffe26c0>
   547b8:	98806317 	ldw	r2,396(r19)
   547bc:	2084703a 	and	r2,r4,r2
   547c0:	1000061e 	bne	r2,zero,547dc <__call_exitprocs+0x16c>
   547c4:	89400017 	ldw	r5,0(r17)
   547c8:	9009883a 	mov	r4,r18
   547cc:	183ee83a 	callr	r3
   547d0:	003ff406 	br	547a4 <__alt_data_end+0xfffe27a4>
   547d4:	9f000115 	stw	fp,4(r19)
   547d8:	003fea06 	br	54784 <__alt_data_end+0xfffe2784>
   547dc:	89000017 	ldw	r4,0(r17)
   547e0:	183ee83a 	callr	r3
   547e4:	003fef06 	br	547a4 <__alt_data_end+0xfffe27a4>
   547e8:	98800017 	ldw	r2,0(r19)
   547ec:	982b883a 	mov	r21,r19
   547f0:	1027883a 	mov	r19,r2
   547f4:	983fb61e 	bne	r19,zero,546d0 <__alt_data_end+0xfffe26d0>
   547f8:	003fd106 	br	54740 <__alt_data_end+0xfffe2740>
   547fc:	0005883a 	mov	r2,zero
   54800:	003ffa06 	br	547ec <__alt_data_end+0xfffe27ec>

00054804 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   54804:	defffd04 	addi	sp,sp,-12
   54808:	df000215 	stw	fp,8(sp)
   5480c:	df000204 	addi	fp,sp,8
   54810:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   54814:	0001883a 	nop
   54818:	e0bfff17 	ldw	r2,-4(fp)
   5481c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   54820:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   54824:	10000226 	beq	r2,zero,54830 <_exit+0x2c>
    ALT_SIM_FAIL();
   54828:	002af070 	cmpltui	zero,zero,43969
   5482c:	00000106 	br	54834 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   54830:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   54834:	003fff06 	br	54834 <__alt_data_end+0xfffe2834>
