
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module EE443_DE2i_150(

	//////////// CLOCK //////////
	CLOCK_50, 	// BANK 4
	
	CLOCK2_50, 	// BANK 7
	CLOCK3_50, 	// BANK 3A

	//////////// LED (High Active) //////////
	LEDG,
	LEDR,

	//////////// KEY (Active Low) //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 (Low Active) //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// LCD //////////
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,

	//////////// RS232 //////////
	UART_CTS,
	UART_RTS,
	UART_RXD,
	UART_TXD,

	//////////// SDCARD //////////
	SD_CLK,
	SD_CMD,
	SD_DAT,
	SD_WP_N,

	//////////// I2C for EEPROM (I2C ADDRESS W/R = 0xA0/0xA1) //////////
	EEP_I2C_SCLK,
	EEP_I2C_SDAT,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// SSRAM //////////
	SSRAM_ADSC_N,
	SSRAM_ADSP_N,
	SSRAM_ADV_N,
	SSRAM_BE,
	SSRAM_CLK,
	SSRAM_GW_N,
	SSRAM_OE_N,
	SSRAM_WE_N,
	SSRAM0_CE_N,
	SSRAM1_CE_N,

	//////////// Flash //////////
	FL_CE_N,
	FL_OE_N,
	FL_RESET_N,
	FL_RY,
	FL_WE_N,
	FL_WP_N,

	//////////// Data and Address bus shared by Flash & SSRAM //////////
	FS_ADDR,
	FS_DQ,

	//////////// HSMC, HSMC connect to DCC - High Speed ADC/DAC //////////
	ADC_cardAD_SCLK,
	ADC_cardAD_SDIO,
	ADC_cardADA_D,
	ADC_cardADA_DCO,
	ADC_cardADA_OE,
	ADC_cardADA_OR,
	ADC_cardADA_SPI_CS,
	ADC_cardADB_D,
	ADC_cardADB_DCO,
	ADC_cardADB_OE,
	ADC_cardADB_OR,
	ADC_cardADB_SPI_CS,
	
	
	ADC_cardAIC_BCLK,
	ADC_cardAIC_DIN,
	ADC_cardAIC_DOUT,
	ADC_cardAIC_LRCIN,
	ADC_cardAIC_LRCOUT,
	ADC_cardAIC_SPI_CS,
	ADC_cardAIC_XCLK,
	
	
	ADC_cardCLKIN1,
	ADC_cardCLKOUT0,
	ADC_cardDA,
	ADC_cardDB,
	ADC_cardFPGA_CLK_A_N,
	ADC_cardFPGA_CLK_A_P,
	ADC_cardFPGA_CLK_B_N,
	ADC_cardFPGA_CLK_B_P,
	ADC_cardJ1_152,
	ADC_cardSCL,
	ADC_cardSDA,
	ADC_cardXT_IN_N,
	ADC_cardXT_IN_P,

	//////////// Fan Control //////////
	FAN_CTRL 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================



//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED (High Active) //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY (Active Low) //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;

//////////// SEG7 (Low Active) //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// LCD //////////
inout 		     [7:0]		LCD_DATA;
output		          		LCD_EN;
output		          		LCD_ON;
output		          		LCD_RS;
output		          		LCD_RW;

//////////// RS232 //////////
input 		          		UART_CTS;
output		          		UART_RTS;
input 		          		UART_RXD;
output		          		UART_TXD;

//////////// SDCARD //////////
output		          		SD_CLK;
inout 		          		SD_CMD;
inout 		     [3:0]		SD_DAT;
input 		          		SD_WP_N;

//////////// I2C for EEPROM (I2C ADDRESS W/R = 0xA0/0xA1) //////////
output		          		EEP_I2C_SCLK;
inout 		          		EEP_I2C_SDAT;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [31:0]		DRAM_DQ;
output		     [3:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// SSRAM //////////
output		          		SSRAM_ADSC_N;
output		          		SSRAM_ADSP_N;
output		          		SSRAM_ADV_N;
output		     [3:0]		SSRAM_BE;
output		          		SSRAM_CLK;
output		          		SSRAM_GW_N;
output		          		SSRAM_OE_N;
output		          		SSRAM_WE_N;
output		          		SSRAM0_CE_N;
output		          		SSRAM1_CE_N;

//////////// Flash //////////
output		          		FL_CE_N;
output		          		FL_OE_N;
output		          		FL_RESET_N;
input 		          		FL_RY;
output		          		FL_WE_N;
output		          		FL_WP_N;

//////////// Data and Address bus shared by Flash & SSRAM //////////
output		    [26:1]		FS_ADDR;
inout 		    [31:0]		FS_DQ;

//////////// HSMC, HSMC connect to DCC - High Speed ADC/DAC //////////
inout 		          		ADC_cardAD_SCLK;
inout 		          		ADC_cardAD_SDIO;
input 		    [13:0]		ADC_cardADA_D;
input 		          		ADC_cardADA_DCO;
output		          		ADC_cardADA_OE;
input 		          		ADC_cardADA_OR;
output		          		ADC_cardADA_SPI_CS;
input 		    [13:0]		ADC_cardADB_D;
input 		          		ADC_cardADB_DCO;
output		          		ADC_cardADB_OE;
input 		          		ADC_cardADB_OR;
output		          		ADC_cardADB_SPI_CS;
inout 		          		ADC_cardAIC_BCLK;
output		          		ADC_cardAIC_DIN;
input 		          		ADC_cardAIC_DOUT;
inout 		          		ADC_cardAIC_LRCIN;
inout 		          		ADC_cardAIC_LRCOUT;
output		          		ADC_cardAIC_SPI_CS;
output		          		ADC_cardAIC_XCLK;
input 		          		ADC_cardCLKIN1;
output		          		ADC_cardCLKOUT0;
output		    [13:0]		ADC_cardDA;
output		    [13:0]		ADC_cardDB;
inout 		          		ADC_cardFPGA_CLK_A_N;
inout 		          		ADC_cardFPGA_CLK_A_P;
inout 		          		ADC_cardFPGA_CLK_B_N;
inout 		          		ADC_cardFPGA_CLK_B_P;
inout 		          		ADC_cardJ1_152;
output		          		ADC_cardSCL;
inout 		          		ADC_cardSDA;
input 		          		ADC_cardXT_IN_N;
input 		          		ADC_cardXT_IN_P;

//////////// Fan Control //////////
inout 		          		FAN_CTRL;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire CLOCK_50;

reg ADC_cardAIC_DIN;
//reg ADC_cardAIC_XCLK;

//read data
reg prevlrc;
reg leftready,rightready;
reg [4:0] counter;
reg [15:0]leftdata,rightdata; 
reg [16:0]templeft,tempright;
reg temp;
//reg [24:0] m;

//send data
reg prevlrcin;
reg[4:0]inputcounter;
wire [15:0] leftchanneldata, rightchanneldata;




//initial m = 0;

initial counter = 0;
initial prevlrc = 0;
initial leftready = 0; 
initial rightready = 0;

initial inputcounter = 0;
initial prevlrcin = 0;





//=======================================================
//  Structural coding
//=======================================================
    
	
//always @ (posedge (CLOCK_50)) begin
//	if(m < 3)
//		m <= m+1;
//	else
//		m <= 0;
//end
//
//always @ (m) begin
//	if(m < 2)
//		ADC_cardAIC_XCLK <= 1;
//	else
//		ADC_cardAIC_XCLK <= 0;
//end
 

always @ (posedge ADC_cardAIC_BCLK) begin

	//--------------------------------------------------//
	//------------------DATA COLLECTION-----------------//
	//--------------------------------------------------//
	temp  <= 1; /////////
	if(ADC_cardAIC_LRCOUT != prevlrc)begin
		counter <= 0;
		leftready <= 0;
		rightready <= 0;
		inputcounter <= 0;
	end
	
	
	//first IF states collect left channel
	if (ADC_cardAIC_LRCOUT == 0 && counter < 17) begin
		counter <= counter + 1;
		inputcounter <= inputcounter + 1;
		templeft[16 - counter] = ADC_cardAIC_DOUT;
	end
	else if(ADC_cardAIC_LRCOUT == 0 && counter == 17)begin
		leftdata <= templeft[16:1]; 
		leftready <= 1;
		counter <= counter + 1;
		inputcounter <= inputcounter + 1;
		prevlrc = ADC_cardAIC_LRCOUT;
	end
	
	
	//second IF states collect right channel
	if (ADC_cardAIC_LRCOUT == 1 && counter < 17) begin
		counter <= counter + 1;
		inputcounter <= inputcounter + 1;
		tempright[16 - counter] = ADC_cardAIC_DOUT;
	end
	else if (ADC_cardAIC_LRCOUT == 1 && counter == 17)begin
		rightdata<= tempright[16:1]; 
		rightready <= 1;
		counter <= counter + 1;
		inputcounter <= inputcounter + 1;
		prevlrc = ADC_cardAIC_LRCOUT;
	end
	
	if(counter > 17) begin
		rightready <= 0;
		leftready <= 0;
	end
	
end	
	
	
always @ (negedge ADC_cardAIC_BCLK) begin
	//--------------------------------------------------//
	//------------------DATA TRANSIMIT------------------//
	//--------------------------------------------------//
	//reset counter to 0
	if(ADC_cardAIC_LRCIN != prevlrcin) begin
		ADC_cardAIC_DIN = 0;
	end
	
	//input left channel data to ADC_cardAIC_DIN
	if(ADC_cardAIC_LRCIN == 0 && inputcounter < 16)begin
		ADC_cardAIC_DIN = leftchanneldata[15 - inputcounter];
		//inputcounter <= inputcounter + 1;
		
	end
	else if (ADC_cardAIC_LRCIN == 0 && inputcounter == 16)begin
		prevlrcin = ADC_cardAIC_LRCIN;
		//inputcounter <= inputcounter + 1;
	end
	
	//input right channel data to ADC_cardAIC_DIN
	if(ADC_cardAIC_LRCIN == 1 && inputcounter < 16)begin
		ADC_cardAIC_DIN = rightchanneldata[15 - inputcounter];
		//inputcounter <= inputcounter + 1;
	end
	else if (ADC_cardAIC_LRCIN == 1 && inputcounter == 16)begin
		ADC_cardAIC_DIN = 0;
		prevlrcin = ADC_cardAIC_LRCIN;
		//inputcounter <= inputcounter + 1;
	end
	
	
end
 
	 de2i_150 u0 (
        .clk_clk         (CLOCK_50),         //      clk.clk
        .reset_reset_n   (1'b1),   //    reset.reset_n
		  
        .led_export      (LEDG),      //      led.export
		  
        .uart_rxd        (UART_RXD),        //     uart.rxd
        .uart_txd        (UART_TXD),        //         .txd
		  
        .cs_export       (ADC_cardAIC_SPI_CS),       //       cs.export
		  
        .sclk_export     (ADC_cardAD_SCLK),     //     sclk.export
        .sdin_export     (ADC_cardAD_SDIO),     //     sdin.export
        //.din_export      (ADC_cardAIC_DIN),      //      din.export
		  .dout_export     (ADC_cardAIC_DOUT),     //     dout.export
		  .lrcout_export   (ADC_cardAIC_LRCOUT),   //   lrcout.export
        .lrcin_export    (ADC_cardAIC_LRCIN),    //    lrcin.export
		  
		  .key0_export     (KEY[0]),     //     key0.export
        .key1_export     (KEY[1]),     //     key1.export
        .key2_export     (KEY[2]),     //     key2.export
        .key3_export     (KEY[3]),     //     key3.export
		  
		  .switch0_export  (SW[0]),  //  switch0.export
        .switch1_export  (SW[1]),  //  switch1.export
        .switch2_export  (SW[2]),  //  switch2.export
        .switch3_export  (SW[3]),  //  switch3.export
        .switch4_export  (SW[4]),  //  switch4.export
		  .switch5_export  (SW[5]),  //  switch5.export
        .switch6_export  (SW[6]),  //  switch6.export
        .switch7_export  (SW[7]),  //  switch7.export
        .switch8_export  (SW[8]),  //  switch8.export
		  
		  .leftdata_export   (leftdata),   //   leftdata.export
        .rightdata_export  (rightdata),  //  rightdata.export
        .leftready_export  (leftready),  //  leftready.export
        .rightready_export (rightready),  // rightready.export
		  .leftsenddata_export  (leftchanneldata),  //  leftsenddata.export
        .rightsenddata_export (rightchanneldata),  // rightsenddata.export
		  .clk_12mhz_c0_clk     (ADC_cardAIC_XCLK)      //     clk_12mhz.export
		  
    );


	//////////// FAN Control //////////
assign FAN_CTRL = 1'bz; // turn on FAN


endmodule
